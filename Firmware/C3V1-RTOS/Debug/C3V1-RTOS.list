
C3V1-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fd04  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005c08  0801fec8  0801fec8  0002fec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025ad0  08025ad0  00040278  2**0
                  CONTENTS
  4 .ARM          00000008  08025ad0  08025ad0  00035ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025ad8  08025ad8  00040278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025ad8  08025ad8  00035ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025adc  08025adc  00035adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08025ae0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00037190  20000278  08025d58  00040278  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20037408  08025d58  00047408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040278  2**0
                  CONTENTS, READONLY
 12 .debug_info   000341f7  00000000  00000000  000402a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000072b3  00000000  00000000  0007449f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002570  00000000  00000000  0007b758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003623d  00000000  00000000  0007dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00033761  00000000  00000000  000b3f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0012d81c  00000000  00000000  000e7666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00214e82  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00002228  00000000  00000000  00214ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b040  00000000  00000000  00217100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000278 	.word	0x20000278
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801feac 	.word	0x0801feac

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000027c 	.word	0x2000027c
 80001fc:	0801feac 	.word	0x0801feac

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <GFX_DrawPixelScreen>:

#if USING_STRINGS == 1
const uint8_t *font;
uint8_t size = 1;
void GFX_DrawPixelScreen(uint16_t x, uint16_t y, uint8_t color, Screen_TypeDef Screen)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4623      	mov	r3, r4
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	4603      	mov	r3, r0
 80010dc:	80bb      	strh	r3, [r7, #4]
 80010de:	460b      	mov	r3, r1
 80010e0:	70fb      	strb	r3, [r7, #3]
 80010e2:	4613      	mov	r3, r2
 80010e4:	70bb      	strb	r3, [r7, #2]
   if(Screen == OLED)
 80010e6:	78bb      	ldrb	r3, [r7, #2]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d108      	bne.n	80010fe <GFX_DrawPixelScreen+0x36>
   {
      GFX_DrawPixelOled(x, y, color);
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	88ba      	ldrh	r2, [r7, #4]
 80010f2:	b2d1      	uxtb	r1, r2
 80010f4:	78fa      	ldrb	r2, [r7, #3]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00c f9ea 	bl	800d4d0 <ssd1306_set_pixel>
   }
   else if(Screen == E_PAPIER)
   {
      GFX_DrawPixelEpapier(x, y, color);
   }
}
 80010fc:	e008      	b.n	8001110 <GFX_DrawPixelScreen+0x48>
   else if(Screen == E_PAPIER)
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <GFX_DrawPixelScreen+0x48>
      GFX_DrawPixelEpapier(x, y, color);
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	88b9      	ldrh	r1, [r7, #4]
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fccc 	bl	8004aa8 <e_papier_set_pixel>
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bd90      	pop	{r4, r7, pc}

08001118 <GFX_SetFont>:
void GFX_SetFont(const uint8_t *font_t)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
   font = font_t;
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <GFX_SetFont+0x1c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000294 	.word	0x20000294

08001138 <GFX_DrawChar>:
{
   return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af02      	add	r7, sp, #8
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	460b      	mov	r3, r1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	4613      	mov	r3, r2
 800114c:	71bb      	strb	r3, [r7, #6]
   if(chr > 0x7E)
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b7e      	cmp	r3, #126	; 0x7e
 8001152:	f200 80a7 	bhi.w	80012a4 <GFX_DrawChar+0x16c>
      return; // chr > '~'

   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 8001156:	2300      	movs	r3, #0
 8001158:	75fb      	strb	r3, [r7, #23]
 800115a:	e09a      	b.n	8001292 <GFX_DrawChar+0x15a>
   {
      uint8_t line = (uint8_t)font[(chr - 0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <GFX_DrawChar+0x174>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3b20      	subs	r3, #32
 8001164:	4951      	ldr	r1, [pc, #324]	; (80012ac <GFX_DrawChar+0x174>)
 8001166:	6809      	ldr	r1, [r1, #0]
 8001168:	3101      	adds	r1, #1
 800116a:	7809      	ldrb	r1, [r1, #0]
 800116c:	fb03 f101 	mul.w	r1, r3, r1
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	440b      	add	r3, r1
 8001174:	3302      	adds	r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	75bb      	strb	r3, [r7, #22]

      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 800117c:	2300      	movs	r3, #0
 800117e:	757b      	strb	r3, [r7, #21]
 8001180:	e07c      	b.n	800127c <GFX_DrawChar+0x144>
      {
         if(line & 1) // Check last pixel in line
 8001182:	7dbb      	ldrb	r3, [r7, #22]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d034      	beq.n	80011f6 <GFX_DrawChar+0xbe>
         {
            if(size == 1)
 800118c:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <GFX_DrawChar+0x178>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d112      	bne.n	80011ba <GFX_DrawChar+0x82>
               GFX_DrawPixelScreen(x + i, y + j, color, Screen); // Draw this pixel
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	b29a      	uxth	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b298      	uxth	r0, r3
 80011a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4413      	add	r3, r2
 80011ac:	b299      	uxth	r1, r3
 80011ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011b2:	79ba      	ldrb	r2, [r7, #6]
 80011b4:	f7ff ff88 	bl	80010c8 <GFX_DrawPixelScreen>
 80011b8:	e057      	b.n	800126a <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, color, Screen); // Or bigger pixel
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <GFX_DrawChar+0x178>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	fb03 f202 	mul.w	r2, r3, r2
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	18d0      	adds	r0, r2, r3
 80011c8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011cc:	4a38      	ldr	r2, [pc, #224]	; (80012b0 <GFX_DrawChar+0x178>)
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	fb03 f202 	mul.w	r2, r3, r2
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	18d1      	adds	r1, r2, r3
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <GFX_DrawChar+0x178>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <GFX_DrawChar+0x178>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b29c      	uxth	r4, r3
 80011e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	4623      	mov	r3, r4
 80011f0:	f000 f9d1 	bl	8001596 <GFX_DrawFillRectangle>
 80011f4:	e039      	b.n	800126a <GFX_DrawChar+0x132>
         }
         else if(background == 0)
 80011f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d135      	bne.n	800126a <GFX_DrawChar+0x132>
         {
            if(size == 1)
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <GFX_DrawChar+0x178>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d113      	bne.n	800122e <GFX_DrawChar+0xf6>
               GFX_DrawPixelScreen(x + i, y + j, background, Screen); // Draw black BG
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	b29a      	uxth	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	b298      	uxth	r0, r3
 8001212:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001216:	b29a      	uxth	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	b299      	uxth	r1, r3
 8001220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001224:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001228:	f7ff ff4e 	bl	80010c8 <GFX_DrawPixelScreen>
 800122c:	e01d      	b.n	800126a <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, background, Screen); // Or bigger
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <GFX_DrawChar+0x178>)
 8001232:	7812      	ldrb	r2, [r2, #0]
 8001234:	fb03 f202 	mul.w	r2, r3, r2
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	18d0      	adds	r0, r2, r3
 800123c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <GFX_DrawChar+0x178>)
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	fb03 f202 	mul.w	r2, r3, r2
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	18d1      	adds	r1, r2, r3
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <GFX_DrawChar+0x178>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <GFX_DrawChar+0x178>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b29c      	uxth	r4, r3
 8001258:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4623      	mov	r3, r4
 8001266:	f000 f996 	bl	8001596 <GFX_DrawFillRectangle>
      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 800126a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	757b      	strb	r3, [r7, #21]
 8001276:	7dbb      	ldrb	r3, [r7, #22]
 8001278:	085b      	lsrs	r3, r3, #1
 800127a:	75bb      	strb	r3, [r7, #22]
 800127c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <GFX_DrawChar+0x174>)
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	4293      	cmp	r3, r2
 8001288:	f6ff af7b 	blt.w	8001182 <GFX_DrawChar+0x4a>
   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	3301      	adds	r3, #1
 8001290:	75fb      	strb	r3, [r7, #23]
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <GFX_DrawChar+0x174>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	7dfa      	ldrb	r2, [r7, #23]
 800129c:	429a      	cmp	r2, r3
 800129e:	f4ff af5d 	bcc.w	800115c <GFX_DrawChar+0x24>
 80012a2:	e000      	b.n	80012a6 <GFX_DrawChar+0x16e>
      return; // chr > '~'
 80012a4:	bf00      	nop
         }
      }
   }
}
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	20000294 	.word	0x20000294
 80012b0:	20000000 	.word	0x20000000

080012b4 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char *str, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	70fb      	strb	r3, [r7, #3]
   int x_tmp = x;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	617b      	str	r3, [r7, #20]

   char znak;
   znak = *str;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	74fb      	strb	r3, [r7, #19]

   while(*str++)
 80012cc:	e040      	b.n	8001350 <GFX_DrawString+0x9c>
   {
      GFX_DrawChar(x_tmp, y, znak, color, background, Screen); // Draw current char
 80012ce:	78f9      	ldrb	r1, [r7, #3]
 80012d0:	7cfa      	ldrb	r2, [r7, #19]
 80012d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	460b      	mov	r3, r1
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff28 	bl	8001138 <GFX_DrawChar>

      x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <GFX_DrawString+0xb4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <GFX_DrawString+0xb8>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	4413      	add	r3, r2
 8001300:	617b      	str	r3, [r7, #20]

      if(background == 0) // Draw black space if needed
 8001302:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d11f      	bne.n	800134a <GFX_DrawString+0x96>
      {
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800130a:	2300      	movs	r3, #0
 800130c:	74bb      	strb	r3, [r7, #18]
 800130e:	e011      	b.n	8001334 <GFX_DrawString+0x80>
         {
            GFX_DrawPixelScreen(x_tmp - 1, y + i, PIXEL_BLACK, Screen);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	b29b      	uxth	r3, r3
 8001314:	3b01      	subs	r3, #1
 8001316:	b298      	uxth	r0, r3
 8001318:	7cbb      	ldrb	r3, [r7, #18]
 800131a:	b29a      	uxth	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4413      	add	r3, r2
 8001322:	b299      	uxth	r1, r3
 8001324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001328:	2200      	movs	r2, #0
 800132a:	f7ff fecd 	bl	80010c8 <GFX_DrawPixelScreen>
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800132e:	7cbb      	ldrb	r3, [r7, #18]
 8001330:	3301      	adds	r3, #1
 8001332:	74bb      	strb	r3, [r7, #18]
 8001334:	7cba      	ldrb	r2, [r7, #18]
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <GFX_DrawString+0xb4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <GFX_DrawString+0xb8>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	fb01 f303 	mul.w	r3, r1, r3
 8001346:	429a      	cmp	r2, r3
 8001348:	dbe2      	blt.n	8001310 <GFX_DrawString+0x5c>
         }
      }

      znak = *str; // Next char
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	74fb      	strb	r3, [r7, #19]
   while(*str++)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1b8      	bne.n	80012ce <GFX_DrawString+0x1a>
   }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000294 	.word	0x20000294
 800136c:	20000000 	.word	0x20000000

08001370 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color, Screen_TypeDef Screen)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	; 0x30
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
   int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001388:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1acb      	subs	r3, r1, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	bfb8      	it	lt
 8001396:	425b      	neglt	r3, r3
 8001398:	429a      	cmp	r2, r3
 800139a:	bfcc      	ite	gt
 800139c:	2301      	movgt	r3, #1
 800139e:	2300      	movle	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	857b      	strh	r3, [r7, #42]	; 0x2a

   if(steep)
 80013a4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <GFX_WriteLine+0x54>
   {
      _swap_int(x_start, y_start);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	60bb      	str	r3, [r7, #8]
      _swap_int(x_end, y_end);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	623b      	str	r3, [r7, #32]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	603b      	str	r3, [r7, #0]
   }

   if(x_start > x_end)
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dd0b      	ble.n	80013e4 <GFX_WriteLine+0x74>
   {
      _swap_int(x_start, x_end);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	607b      	str	r3, [r7, #4]
      _swap_int(y_start, y_end);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	603b      	str	r3, [r7, #0]
   }

   int16_t dx, dy;
   dx = x_end - x_start;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	82fb      	strh	r3, [r7, #22]
   dy = abs(y_end - y_start);
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bfb8      	it	lt
 80013fc:	425b      	neglt	r3, r3
 80013fe:	82bb      	strh	r3, [r7, #20]

   int16_t err = dx / 2;
 8001400:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001404:	0fda      	lsrs	r2, r3, #31
 8001406:	4413      	add	r3, r2
 8001408:	105b      	asrs	r3, r3, #1
 800140a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   int16_t ystep;

   if(y_start < y_end)
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	da02      	bge.n	800141a <GFX_WriteLine+0xaa>
   {
      ystep = 1;
 8001414:	2301      	movs	r3, #1
 8001416:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001418:	e032      	b.n	8001480 <GFX_WriteLine+0x110>
   }
   else
   {
      ystep = -1;
 800141a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   }

   for(; x_start <= x_end; x_start++)
 8001420:	e02e      	b.n	8001480 <GFX_WriteLine+0x110>
   {
      if(steep)
 8001422:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00a      	beq.n	8001440 <GFX_WriteLine+0xd0>
      {
         GFX_DrawPixelScreen(y_start, x_start, color, Screen);
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	b298      	uxth	r0, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	b299      	uxth	r1, r3
 8001432:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001436:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800143a:	f7ff fe45 	bl	80010c8 <GFX_DrawPixelScreen>
 800143e:	e009      	b.n	8001454 <GFX_WriteLine+0xe4>
      }
      else
      {
         GFX_DrawPixelScreen(x_start, y_start, color, Screen);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	b298      	uxth	r0, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	b299      	uxth	r1, r3
 8001448:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800144c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001450:	f7ff fe3a 	bl	80010c8 <GFX_DrawPixelScreen>
      }
      err -= dy;
 8001454:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001456:	8abb      	ldrh	r3, [r7, #20]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      if(err < 0)
 800145e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001462:	2b00      	cmp	r3, #0
 8001464:	da09      	bge.n	800147a <GFX_WriteLine+0x10a>
      {
         y_start += ystep;
 8001466:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	4413      	add	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
         err += dx;
 8001470:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001472:	8afb      	ldrh	r3, [r7, #22]
 8001474:	4413      	add	r3, r2
 8001476:	b29b      	uxth	r3, r3
 8001478:	85fb      	strh	r3, [r7, #46]	; 0x2e
   for(; x_start <= x_end; x_start++)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	ddcc      	ble.n	8001422 <GFX_WriteLine+0xb2>
      }
   }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3730      	adds	r7, #48	; 0x30
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color, Screen_TypeDef Screen)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af02      	add	r7, sp, #8
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	70fb      	strb	r3, [r7, #3]
   GFX_WriteLine(x_start, y_start, x_start, y_start + h - 1, color, Screen);
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	1e5a      	subs	r2, r3, #1
 80014a8:	7e3b      	ldrb	r3, [r7, #24]
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4613      	mov	r3, r2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff ff5a 	bl	8001370 <GFX_WriteLine>
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color, Screen_TypeDef Screen)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	70fb      	strb	r3, [r7, #3]
   GFX_WriteLine(x_start, y_start, x_start + w - 1, y_start, color, Screen);
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	7e3b      	ldrb	r3, [r7, #24]
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	78fb      	ldrb	r3, [r7, #3]
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff ff42 	bl	8001370 <GFX_WriteLine>
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint8_t color, Screen_TypeDef Screen)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
   if(x_start == x_end)
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	d118      	bne.n	800153c <GFX_DrawLine+0x48>
   {
      if(y_start > y_end)
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	dd05      	ble.n	800151e <GFX_DrawLine+0x2a>
         _swap_int(y_start, y_end);
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	603b      	str	r3, [r7, #0]
      GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color, Screen);
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	f897 1020 	ldrb.w	r1, [r7, #32]
 800152a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	460b      	mov	r3, r1
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff ffac 	bl	8001492 <GFX_DrawFastVLine>
   else
   {

      GFX_WriteLine(x_start, y_start, x_end, y_end, color, Screen);
   }
}
 800153a:	e028      	b.n	800158e <GFX_DrawLine+0x9a>
   else if(y_start == y_end)
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d118      	bne.n	8001576 <GFX_DrawLine+0x82>
      if(x_start > x_end)
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dd05      	ble.n	8001558 <GFX_DrawLine+0x64>
         _swap_int(x_start, x_end);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	607b      	str	r3, [r7, #4]
      GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color, Screen);
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001564:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	460b      	mov	r3, r1
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff ffa8 	bl	80014c4 <GFX_DrawFastHLine>
}
 8001574:	e00b      	b.n	800158e <GFX_DrawLine+0x9a>
      GFX_WriteLine(x_start, y_start, x_end, y_end, color, Screen);
 8001576:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fef1 	bl	8001370 <GFX_WriteLine>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <GFX_DrawFillRectangle>:
   GFX_DrawFastVLine(x + w - 1, y, h, color, Screen);
}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color, Screen_TypeDef Screen)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b088      	sub	sp, #32
 800159a:	af02      	add	r7, sp, #8
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	4611      	mov	r1, r2
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	80fb      	strh	r3, [r7, #6]
 80015a8:	4613      	mov	r3, r2
 80015aa:	80bb      	strh	r3, [r7, #4]
   for(int i = x; i < x + w; i++)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e00d      	b.n	80015ce <GFX_DrawFillRectangle+0x38>
   {
      GFX_DrawFastVLine(i, y, h, color, Screen);
 80015b2:	88ba      	ldrh	r2, [r7, #4]
 80015b4:	f897 1020 	ldrb.w	r1, [r7, #32]
 80015b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	460b      	mov	r3, r1
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff65 	bl	8001492 <GFX_DrawFastVLine>
   for(int i = x; i < x + w; i++)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbeb      	blt.n	80015b2 <GFX_DrawFillRectangle+0x1c>
   }
}
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
   CurrentFont = Font;
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <EF_SetFont+0x1c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000298 	.word	0x20000298

08001604 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
   return CurrentFont->CharHeight;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <EF_GetFontHeight+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	781b      	ldrb	r3, [r3, #0]
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	20000298 	.word	0x20000298

0800161c <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
   return CurrentFont->StartChar;
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <EF_GetFontStartChar+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	785b      	ldrb	r3, [r3, #1]
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	20000298 	.word	0x20000298

08001634 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
   return CurrentFont->EndChar;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <EF_GetFontEndChar+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	789b      	ldrb	r3, [r3, #2]
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	20000298 	.word	0x20000298

0800164c <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
   return CurrentFont->SpaceWidth;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <EF_GetFontSpaceWidth+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	78db      	ldrb	r3, [r3, #3]
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	20000298 	.word	0x20000298

08001664 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	460a      	mov	r2, r1
 800166e:	71fb      	strb	r3, [r7, #7]
 8001670:	4613      	mov	r3, r2
 8001672:	71bb      	strb	r3, [r7, #6]
   switch(chMsb) // Check first byte
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	2bc5      	cmp	r3, #197	; 0xc5
 8001678:	d052      	beq.n	8001720 <EF_DecodePolish+0xbc>
 800167a:	2bc5      	cmp	r3, #197	; 0xc5
 800167c:	f300 80e7 	bgt.w	800184e <EF_DecodePolish+0x1ea>
 8001680:	2bc3      	cmp	r3, #195	; 0xc3
 8001682:	d002      	beq.n	800168a <EF_DecodePolish+0x26>
 8001684:	2bc4      	cmp	r3, #196	; 0xc4
 8001686:	d00a      	beq.n	800169e <EF_DecodePolish+0x3a>
 8001688:	e0e1      	b.n	800184e <EF_DecodePolish+0x1ea>
   {
      case 0xC3:       // Ó, ó
         switch(chLsb) // Check second byte
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	2b93      	cmp	r3, #147	; 0x93
 800168e:	d002      	beq.n	8001696 <EF_DecodePolish+0x32>
 8001690:	2bb3      	cmp	r3, #179	; 0xb3
 8001692:	d002      	beq.n	800169a <EF_DecodePolish+0x36>
               break;
            case 0xB3: // ó
               return 0x8D;
               break;
         }
         break;
 8001694:	e0db      	b.n	800184e <EF_DecodePolish+0x1ea>
               return 0x84;
 8001696:	2384      	movs	r3, #132	; 0x84
 8001698:	e0da      	b.n	8001850 <EF_DecodePolish+0x1ec>
               return 0x8D;
 800169a:	238d      	movs	r3, #141	; 0x8d
 800169c:	e0d8      	b.n	8001850 <EF_DecodePolish+0x1ec>
      case 0xC4:       // Ą, Ę, Ć, ą, ę, ć
         switch(chLsb) // Check second byte
 800169e:	79bb      	ldrb	r3, [r7, #6]
 80016a0:	3b84      	subs	r3, #132	; 0x84
 80016a2:	2b15      	cmp	r3, #21
 80016a4:	f200 80d0 	bhi.w	8001848 <EF_DecodePolish+0x1e4>
 80016a8:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <EF_DecodePolish+0x4c>)
 80016aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ae:	bf00      	nop
 80016b0:	08001709 	.word	0x08001709
 80016b4:	08001715 	.word	0x08001715
 80016b8:	08001711 	.word	0x08001711
 80016bc:	0800171d 	.word	0x0800171d
 80016c0:	08001849 	.word	0x08001849
 80016c4:	08001849 	.word	0x08001849
 80016c8:	08001849 	.word	0x08001849
 80016cc:	08001849 	.word	0x08001849
 80016d0:	08001849 	.word	0x08001849
 80016d4:	08001849 	.word	0x08001849
 80016d8:	08001849 	.word	0x08001849
 80016dc:	08001849 	.word	0x08001849
 80016e0:	08001849 	.word	0x08001849
 80016e4:	08001849 	.word	0x08001849
 80016e8:	08001849 	.word	0x08001849
 80016ec:	08001849 	.word	0x08001849
 80016f0:	08001849 	.word	0x08001849
 80016f4:	08001849 	.word	0x08001849
 80016f8:	08001849 	.word	0x08001849
 80016fc:	08001849 	.word	0x08001849
 8001700:	0800170d 	.word	0x0800170d
 8001704:	08001719 	.word	0x08001719
         {
            case 0x84: // Ą
               return 0x7F;
 8001708:	237f      	movs	r3, #127	; 0x7f
 800170a:	e0a1      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x98: // Ę
               return 0x81;
 800170c:	2381      	movs	r3, #129	; 0x81
 800170e:	e09f      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x86: // Ć
               return 0x80;
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	e09d      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x85: // ą
               return 0x88;
 8001714:	2388      	movs	r3, #136	; 0x88
 8001716:	e09b      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x99: // ę
               return 0x8A;
 8001718:	238a      	movs	r3, #138	; 0x8a
 800171a:	e099      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x87: // ć
               return 0x89;
 800171c:	2389      	movs	r3, #137	; 0x89
 800171e:	e097      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
         }
         break;
      case 0xC5:       // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
         switch(chLsb) // Check second byte
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	3b81      	subs	r3, #129	; 0x81
 8001724:	2b3b      	cmp	r3, #59	; 0x3b
 8001726:	f200 8091 	bhi.w	800184c <EF_DecodePolish+0x1e8>
 800172a:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <EF_DecodePolish+0xcc>)
 800172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001730:	08001821 	.word	0x08001821
 8001734:	08001835 	.word	0x08001835
 8001738:	08001825 	.word	0x08001825
 800173c:	08001839 	.word	0x08001839
 8001740:	0800184d 	.word	0x0800184d
 8001744:	0800184d 	.word	0x0800184d
 8001748:	0800184d 	.word	0x0800184d
 800174c:	0800184d 	.word	0x0800184d
 8001750:	0800184d 	.word	0x0800184d
 8001754:	0800184d 	.word	0x0800184d
 8001758:	0800184d 	.word	0x0800184d
 800175c:	0800184d 	.word	0x0800184d
 8001760:	0800184d 	.word	0x0800184d
 8001764:	0800184d 	.word	0x0800184d
 8001768:	0800184d 	.word	0x0800184d
 800176c:	0800184d 	.word	0x0800184d
 8001770:	0800184d 	.word	0x0800184d
 8001774:	0800184d 	.word	0x0800184d
 8001778:	0800184d 	.word	0x0800184d
 800177c:	0800184d 	.word	0x0800184d
 8001780:	0800184d 	.word	0x0800184d
 8001784:	0800184d 	.word	0x0800184d
 8001788:	0800184d 	.word	0x0800184d
 800178c:	0800184d 	.word	0x0800184d
 8001790:	0800184d 	.word	0x0800184d
 8001794:	08001829 	.word	0x08001829
 8001798:	0800183d 	.word	0x0800183d
 800179c:	0800184d 	.word	0x0800184d
 80017a0:	0800184d 	.word	0x0800184d
 80017a4:	0800184d 	.word	0x0800184d
 80017a8:	0800184d 	.word	0x0800184d
 80017ac:	0800184d 	.word	0x0800184d
 80017b0:	0800184d 	.word	0x0800184d
 80017b4:	0800184d 	.word	0x0800184d
 80017b8:	0800184d 	.word	0x0800184d
 80017bc:	0800184d 	.word	0x0800184d
 80017c0:	0800184d 	.word	0x0800184d
 80017c4:	0800184d 	.word	0x0800184d
 80017c8:	0800184d 	.word	0x0800184d
 80017cc:	0800184d 	.word	0x0800184d
 80017d0:	0800184d 	.word	0x0800184d
 80017d4:	0800184d 	.word	0x0800184d
 80017d8:	0800184d 	.word	0x0800184d
 80017dc:	0800184d 	.word	0x0800184d
 80017e0:	0800184d 	.word	0x0800184d
 80017e4:	0800184d 	.word	0x0800184d
 80017e8:	0800184d 	.word	0x0800184d
 80017ec:	0800184d 	.word	0x0800184d
 80017f0:	0800184d 	.word	0x0800184d
 80017f4:	0800184d 	.word	0x0800184d
 80017f8:	0800184d 	.word	0x0800184d
 80017fc:	0800184d 	.word	0x0800184d
 8001800:	0800184d 	.word	0x0800184d
 8001804:	0800184d 	.word	0x0800184d
 8001808:	0800184d 	.word	0x0800184d
 800180c:	0800184d 	.word	0x0800184d
 8001810:	0800182d 	.word	0x0800182d
 8001814:	08001841 	.word	0x08001841
 8001818:	08001831 	.word	0x08001831
 800181c:	08001845 	.word	0x08001845
         {
            case 0x81: // Ł
               return 0x82;
 8001820:	2382      	movs	r3, #130	; 0x82
 8001822:	e015      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x83: // Ń
               return 0x83;
 8001824:	2383      	movs	r3, #131	; 0x83
 8001826:	e013      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x9A: // Ś
               return 0x85;
 8001828:	2385      	movs	r3, #133	; 0x85
 800182a:	e011      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0xB9: // Ź
               return 0x86;
 800182c:	2386      	movs	r3, #134	; 0x86
 800182e:	e00f      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0xBB: // Ż
               return 0x87;
 8001830:	2387      	movs	r3, #135	; 0x87
 8001832:	e00d      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x82: // ł
               return 0x8B;
 8001834:	238b      	movs	r3, #139	; 0x8b
 8001836:	e00b      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x84: // ń
               return 0x8C;
 8001838:	238c      	movs	r3, #140	; 0x8c
 800183a:	e009      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x9B: // ś
               return 0x8E;
 800183c:	238e      	movs	r3, #142	; 0x8e
 800183e:	e007      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0xBA: // ź
               return 0x8F;
 8001840:	238f      	movs	r3, #143	; 0x8f
 8001842:	e005      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0xBC: // ż
               return 0x90;
 8001844:	2390      	movs	r3, #144	; 0x90
 8001846:	e003      	b.n	8001850 <EF_DecodePolish+0x1ec>
         break;
 8001848:	bf00      	nop
 800184a:	e000      	b.n	800184e <EF_DecodePolish+0x1ea>
               break;
         }
         break;
 800184c:	bf00      	nop
   }

   return 0;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor, Screen_TypeDef Screen)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af02      	add	r7, sp, #8
 8001862:	4604      	mov	r4, r0
 8001864:	4608      	mov	r0, r1
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	4623      	mov	r3, r4
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	4603      	mov	r3, r0
 8001870:	80bb      	strh	r3, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	807b      	strh	r3, [r7, #2]
 8001876:	4613      	mov	r3, r2
 8001878:	803b      	strh	r3, [r7, #0]
   uint16_t PixelHeight;
   uint8_t WidthLoops, CharBits, CharBitsLeft;
   uint8_t CharNumber = ch - EF_GetFontStartChar();
 800187a:	f7ff fecf 	bl	800161c <EF_GetFontStartChar>
 800187e:	4603      	mov	r3, r0
 8001880:	461a      	mov	r2, r3
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	747b      	strb	r3, [r7, #17]

   if(ch == ' ') // Check if we have a Space char
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2b20      	cmp	r3, #32
 800188c:	d121      	bne.n	80018d2 <EF_PutChar+0x76>
   {
      if(Btransparent == BG_COLOR) // If draw BG by color...
 800188e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001892:	2b01      	cmp	r3, #1
 8001894:	d117      	bne.n	80018c6 <EF_PutChar+0x6a>
      {
         // Draw filled rectangle on Space char
         GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight, Bcolor, Screen);
 8001896:	88bc      	ldrh	r4, [r7, #4]
 8001898:	887d      	ldrh	r5, [r7, #2]
 800189a:	f7ff fed7 	bl	800164c <EF_GetFontSpaceWidth>
 800189e:	4603      	mov	r3, r0
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	b299      	uxth	r1, r3
 80018a6:	4b5b      	ldr	r3, [pc, #364]	; (8001a14 <EF_PutChar+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b298      	uxth	r0, r3
 80018ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80018b6:	9201      	str	r2, [sp, #4]
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	4603      	mov	r3, r0
 80018bc:	460a      	mov	r2, r1
 80018be:	4629      	mov	r1, r5
 80018c0:	4620      	mov	r0, r4
 80018c2:	f7ff fe68 	bl	8001596 <GFX_DrawFillRectangle>
      }
      // Return width for String function
      return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80018c6:	f7ff fec1 	bl	800164c <EF_GetFontSpaceWidth>
 80018ca:	4603      	mov	r3, r0
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	e09c      	b.n	8001a0c <EF_PutChar+0x1b0>
   }

   // Return if char is not in our font  (smaller than the first)
   if(ch < EF_GetFontStartChar())
 80018d2:	f7ff fea3 	bl	800161c <EF_GetFontStartChar>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	4293      	cmp	r3, r2
 80018de:	d201      	bcs.n	80018e4 <EF_PutChar+0x88>
   {
      return 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e093      	b.n	8001a0c <EF_PutChar+0x1b0>
   }

   // Return if char is not in our font (bigger than the lastlast)
   if(CharNumber > EF_GetFontEndChar())
 80018e4:	f7ff fea6 	bl	8001634 <EF_GetFontEndChar>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	7c7b      	ldrb	r3, [r7, #17]
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <EF_PutChar+0x9a>
   {
      return 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e08a      	b.n	8001a0c <EF_PutChar+0x1b0>
   }

   // Get Current char info descriptor - {width, bitmap start byte}
   const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <EF_PutChar+0x1b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	7c7b      	ldrb	r3, [r7, #17]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
   // Get bitmap pointer for our char
   uint8_t *CharPointer = (uint8_t *)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001904:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <EF_PutChar+0x1b8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	4a42      	ldr	r2, [pc, #264]	; (8001a14 <EF_PutChar+0x1b8>)
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	6851      	ldr	r1, [r2, #4]
 8001910:	7c7a      	ldrb	r2, [r7, #17]
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	440a      	add	r2, r1
 8001916:	8852      	ldrh	r2, [r2, #2]
 8001918:	4413      	add	r3, r2
 800191a:	617b      	str	r3, [r7, #20]

   // 1st iteration - for each Row by Height
   for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 800191c:	2300      	movs	r3, #0
 800191e:	83fb      	strh	r3, [r7, #30]
 8001920:	e066      	b.n	80019f0 <EF_PutChar+0x194>
   {
      // Check how many bits left to draw in current Row
      CharBitsLeft = CurrentChar->CharWidth;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	76fb      	strb	r3, [r7, #27]

      // 2nd Iterator - For each byte in that Row
      for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth - 1) / 8; WidthLoops++)
 8001928:	2300      	movs	r3, #0
 800192a:	777b      	strb	r3, [r7, #29]
 800192c:	e053      	b.n	80019d6 <EF_PutChar+0x17a>
      {
         // Take one line
         uint8_t line = (uint8_t)*CharPointer;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	74fb      	strb	r3, [r7, #19]
         // Define how many bit to draw - full byte or less
         if(CharBitsLeft >= 8)
 8001934:	7efb      	ldrb	r3, [r7, #27]
 8001936:	2b07      	cmp	r3, #7
 8001938:	d905      	bls.n	8001946 <EF_PutChar+0xea>
         {
            CharBits = 8;      // Full byte
 800193a:	2308      	movs	r3, #8
 800193c:	773b      	strb	r3, [r7, #28]
            CharBitsLeft -= 8; // Decrease bits left counter
 800193e:	7efb      	ldrb	r3, [r7, #27]
 8001940:	3b08      	subs	r3, #8
 8001942:	76fb      	strb	r3, [r7, #27]
 8001944:	e001      	b.n	800194a <EF_PutChar+0xee>
         }
         else
         {
            // If less than byte - only few bits
            CharBits = CharBitsLeft;
 8001946:	7efb      	ldrb	r3, [r7, #27]
 8001948:	773b      	strb	r3, [r7, #28]
         }

         // 3rd Iterator - for each bit in current byte in current row ;)
         for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 800194a:	2300      	movs	r3, #0
 800194c:	74bb      	strb	r3, [r7, #18]
 800194e:	e038      	b.n	80019c2 <EF_PutChar+0x166>
         {
            // Check bit first from left
            if(line & 0x80)
 8001950:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001954:	2b00      	cmp	r3, #0
 8001956:	da15      	bge.n	8001984 <EF_PutChar+0x128>
            {
               // If pixel exists - draw it
               GFX_DrawPixelScreen(PosX + (WidthLoops * 8) + i, PosY + PixelHeight, Fcolor, Screen);
 8001958:	7f7b      	ldrb	r3, [r7, #29]
 800195a:	b29b      	uxth	r3, r3
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	b29a      	uxth	r2, r3
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	b29a      	uxth	r2, r3
 8001966:	7cbb      	ldrb	r3, [r7, #18]
 8001968:	b29b      	uxth	r3, r3
 800196a:	4413      	add	r3, r2
 800196c:	b298      	uxth	r0, r3
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	8bfb      	ldrh	r3, [r7, #30]
 8001972:	4413      	add	r3, r2
 8001974:	b299      	uxth	r1, r3
 8001976:	883b      	ldrh	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800197e:	f7ff fba3 	bl	80010c8 <GFX_DrawPixelScreen>
 8001982:	e018      	b.n	80019b6 <EF_PutChar+0x15a>
            }
            else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001984:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001988:	2b01      	cmp	r3, #1
 800198a:	d114      	bne.n	80019b6 <EF_PutChar+0x15a>
            {
               // If no character pixel, then BG pixel
               GFX_DrawPixelScreen(PosX + (WidthLoops * 8) + i, PosY + PixelHeight, Bcolor, Screen);
 800198c:	7f7b      	ldrb	r3, [r7, #29]
 800198e:	b29b      	uxth	r3, r3
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	b29a      	uxth	r2, r3
 8001994:	88bb      	ldrh	r3, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	b29a      	uxth	r2, r3
 800199a:	7cbb      	ldrb	r3, [r7, #18]
 800199c:	b29b      	uxth	r3, r3
 800199e:	4413      	add	r3, r2
 80019a0:	b298      	uxth	r0, r3
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	8bfb      	ldrh	r3, [r7, #30]
 80019a6:	4413      	add	r3, r2
 80019a8:	b299      	uxth	r1, r3
 80019aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80019b2:	f7ff fb89 	bl	80010c8 <GFX_DrawPixelScreen>
         for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 80019b6:	7cbb      	ldrb	r3, [r7, #18]
 80019b8:	3301      	adds	r3, #1
 80019ba:	74bb      	strb	r3, [r7, #18]
 80019bc:	7cfb      	ldrb	r3, [r7, #19]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	74fb      	strb	r3, [r7, #19]
 80019c2:	7cba      	ldrb	r2, [r7, #18]
 80019c4:	7f3b      	ldrb	r3, [r7, #28]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d3c2      	bcc.n	8001950 <EF_PutChar+0xf4>
            }
         }

         // Take next byte in current char bitmap
         CharPointer++;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
      for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth - 1) / 8; WidthLoops++)
 80019d0:	7f7b      	ldrb	r3, [r7, #29]
 80019d2:	3301      	adds	r3, #1
 80019d4:	777b      	strb	r3, [r7, #29]
 80019d6:	7f7a      	ldrb	r2, [r7, #29]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	da00      	bge.n	80019e4 <EF_PutChar+0x188>
 80019e2:	3307      	adds	r3, #7
 80019e4:	10db      	asrs	r3, r3, #3
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dda1      	ble.n	800192e <EF_PutChar+0xd2>
   for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 80019ea:	8bfb      	ldrh	r3, [r7, #30]
 80019ec:	3301      	adds	r3, #1
 80019ee:	83fb      	strh	r3, [r7, #30]
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <EF_PutChar+0x1b8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	8bfa      	ldrh	r2, [r7, #30]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d391      	bcc.n	8001922 <EF_PutChar+0xc6>
      }
   }
   // Return char width for String function
   return CurrentFont->CharDescription[CharNumber].CharWidth;
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <EF_PutChar+0x1b8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	7c7b      	ldrb	r3, [r7, #17]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bdb0      	pop	{r4, r5, r7, pc}
 8001a14:	20000298 	.word	0x20000298

08001a18 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor, Screen_TypeDef Screen)
{
 8001a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1a:	b08b      	sub	sp, #44	; 0x2c
 8001a1c:	af04      	add	r7, sp, #16
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	4608      	mov	r0, r1
 8001a22:	4611      	mov	r1, r2
 8001a24:	461a      	mov	r2, r3
 8001a26:	4603      	mov	r3, r0
 8001a28:	817b      	strh	r3, [r7, #10]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	813b      	strh	r3, [r7, #8]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	80fb      	strh	r3, [r7, #6]
   uint8_t Lenght = strlen((char *)pStr); // Take a string length in bytes
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f7fe fbe4 	bl	8000200 <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	74bb      	strb	r3, [r7, #18]

   uint8_t Loop;        // Loop Iterator for current char
   uint16_t Shift = 0;  // Shift in X-axis for each char drawing
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	82bb      	strh	r3, [r7, #20]
   uint8_t CharWidth;   // Current char width
   uint8_t CharToPrint; // Current char to print

   for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001a40:	2300      	movs	r3, #0
 8001a42:	75fb      	strb	r3, [r7, #23]
 8001a44:	e06a      	b.n	8001b1c <EF_PutString+0x104>
   {

      if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2bc5      	cmp	r3, #197	; 0xc5
 8001a50:	d817      	bhi.n	8001a82 <EF_PutString+0x6a>
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2bc2      	cmp	r3, #194	; 0xc2
 8001a5c:	d911      	bls.n	8001a82 <EF_PutString+0x6a>
      {
         // If yes - decode that char
         CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop + 1]);
 8001a5e:	7dfb      	ldrb	r3, [r7, #23]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	7818      	ldrb	r0, [r3, #0]
 8001a66:	7dfb      	ldrb	r3, [r7, #23]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff fdf7 	bl	8001664 <EF_DecodePolish>
 8001a76:	4603      	mov	r3, r0
 8001a78:	74fb      	strb	r3, [r7, #19]
         // Skip one byte - Polish chars are 2-bytes
         Loop++;
 8001a7a:	7dfb      	ldrb	r3, [r7, #23]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	75fb      	strb	r3, [r7, #23]
 8001a80:	e00d      	b.n	8001a9e <EF_PutString+0x86>
      }
      else if(pStr[Loop] == 0)
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <EF_PutString+0x7c>
      {
         CharToPrint = ' ';
 8001a8e:	2320      	movs	r3, #32
 8001a90:	74fb      	strb	r3, [r7, #19]
 8001a92:	e004      	b.n	8001a9e <EF_PutString+0x86>
      }
      else
      {
         // If not polish - just take that char
         CharToPrint = pStr[Loop];
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	74fb      	strb	r3, [r7, #19]
      }

      // Draw char and take its width
      CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor, Screen);
 8001a9e:	897a      	ldrh	r2, [r7, #10]
 8001aa0:	8abb      	ldrh	r3, [r7, #20]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b299      	uxth	r1, r3
 8001aa6:	88fc      	ldrh	r4, [r7, #6]
 8001aa8:	893a      	ldrh	r2, [r7, #8]
 8001aaa:	7cf8      	ldrb	r0, [r7, #19]
 8001aac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4623      	mov	r3, r4
 8001abe:	f7ff fecd 	bl	800185c <EF_PutChar>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	747b      	strb	r3, [r7, #17]

      // Add last char width to drawing Shift
      Shift = Shift + CharWidth;
 8001ac6:	7c7b      	ldrb	r3, [r7, #17]
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	8abb      	ldrh	r3, [r7, #20]
 8001acc:	4413      	add	r3, r2
 8001ace:	82bb      	strh	r3, [r7, #20]

      if(Btransparent == BG_COLOR)
 8001ad0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d117      	bne.n	8001b08 <EF_PutString+0xf0>
      {
         // If draw background - draw the BG color between chars
         GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor, Screen);
 8001ad8:	897a      	ldrh	r2, [r7, #10]
 8001ada:	8abb      	ldrh	r3, [r7, #20]
 8001adc:	18d4      	adds	r4, r2, r3
 8001ade:	893d      	ldrh	r5, [r7, #8]
 8001ae0:	f7ff fdb4 	bl	800164c <EF_GetFontSpaceWidth>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b29e      	uxth	r6, r3
 8001ae8:	f7ff fd8c 	bl	8001604 <EF_GetFontHeight>
 8001aec:	4603      	mov	r3, r0
 8001aee:	b299      	uxth	r1, r3
 8001af0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001af8:	9201      	str	r2, [sp, #4]
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	460b      	mov	r3, r1
 8001afe:	4632      	mov	r2, r6
 8001b00:	4629      	mov	r1, r5
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7ff fd47 	bl	8001596 <GFX_DrawFillRectangle>
      }

      // Add between-char distance to Shift
      Shift = Shift + EF_GetFontSpaceWidth();
 8001b08:	f7ff fda0 	bl	800164c <EF_GetFontSpaceWidth>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	8abb      	ldrh	r3, [r7, #20]
 8001b12:	4413      	add	r3, r2
 8001b14:	82bb      	strh	r3, [r7, #20]
   for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	75fb      	strb	r3, [r7, #23]
 8001b1c:	7dfa      	ldrb	r2, [r7, #23]
 8001b1e:	7cbb      	ldrb	r3, [r7, #18]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d390      	bcc.n	8001a46 <EF_PutString+0x2e>
   }
   // Return whole String shift - if you want to use it higher in app.
   return Shift - EF_GetFontSpaceWidth();
 8001b24:	8abb      	ldrh	r3, [r7, #20]
 8001b26:	b2dc      	uxtb	r4, r3
 8001b28:	f7ff fd90 	bl	800164c <EF_GetFontSpaceWidth>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	1ae3      	subs	r3, r4, r3
 8001b30:	b2db      	uxtb	r3, r3
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b3a <HC12_ExitCommandMode>:
void HC12_EnterCommandMode(void)
{
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 0);
}
void HC12_ExitCommandMode(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 1);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b48:	f00d f9a6 	bl	800ee98 <HAL_GPIO_WritePin>
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HC12_TransmitData>:
void HC12_TransmitData(uint8_t *Data, uint32_t Length)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
   taskENTER_CRITICAL();
 8001b5a:	f017 fbcb 	bl	80192f4 <vPortEnterCritical>
   HAL_UART_Transmit(&huart1, Data, Length, 1000);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <HC12_TransmitData+0x2c>)
 8001b6a:	f012 f92b 	bl	8013dc4 <HAL_UART_Transmit>
   taskEXIT_CRITICAL();
 8001b6e:	f017 fbf1 	bl	8019354 <vPortExitCritical>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20004804 	.word	0x20004804

08001b80 <HC12_ReciveToIdleDMA>:
void HC12_ReciveToIdleDMA(uint8_t *Data, uint32_t Length)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <HC12_ReciveToIdleDMA+0x20>)
 8001b94:	f013 fcf0 	bl	8015578 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20004804 	.word	0x20004804

08001ba4 <HC12_Init>:
void HC12_Init(RFP_TypeDef *TempRfp, uint8_t *Buffer)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
   rfp      = TempRfp;
 8001bae:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <HC12_Init+0x24>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6013      	str	r3, [r2, #0]
   HC12Data = Buffer;
 8001bb4:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <HC12_Init+0x28>)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6013      	str	r3, [r2, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	2000029c 	.word	0x2000029c
 8001bcc:	200002a0 	.word	0x200002a0

08001bd0 <MENU_ChangeState>:
                                                  { MENU_STATE_RUNNING, MENU_STATE_END, MENU_EVENT_END },
                                                  { MENU_EVENT_END, MENU_STATE_IDLE, MENU_EVENT_NOTHING } };
MenuFunctions_TypeDef StateFunction[]         = { { MENU_IdleFunction }, { MENU_ChoiseFunction }, { MENU_RunningFunction }, { MENU_EndFunction } };
Menu_TypeDef Menu                             = { 0 };
static void MENU_ChangeState(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	e027      	b.n	8001c2c <MENU_ChangeState+0x5c>
   {
      if(Menu.State == TransitionTable[i].Source && Menu.NewEvent == TransitionTable[i].Event)
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <MENU_ChangeState+0x74>)
 8001bde:	7a19      	ldrb	r1, [r3, #8]
 8001be0:	4819      	ldr	r0, [pc, #100]	; (8001c48 <MENU_ChangeState+0x78>)
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	4403      	add	r3, r0
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4299      	cmp	r1, r3
 8001bf0:	d119      	bne.n	8001c26 <MENU_ChangeState+0x56>
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MENU_ChangeState+0x74>)
 8001bf4:	7a59      	ldrb	r1, [r3, #9]
 8001bf6:	4814      	ldr	r0, [pc, #80]	; (8001c48 <MENU_ChangeState+0x78>)
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	4403      	add	r3, r0
 8001c02:	3302      	adds	r3, #2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	4299      	cmp	r1, r3
 8001c08:	d10d      	bne.n	8001c26 <MENU_ChangeState+0x56>
      {
         Menu.State    = TransitionTable[i].Destination;
 8001c0a:	490f      	ldr	r1, [pc, #60]	; (8001c48 <MENU_ChangeState+0x78>)
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	3301      	adds	r3, #1
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MENU_ChangeState+0x74>)
 8001c1c:	721a      	strb	r2, [r3, #8]
         Menu.NewEvent = MENU_EVENT_NOTHING;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MENU_ChangeState+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	725a      	strb	r2, [r3, #9]
         return;
 8001c24:	e008      	b.n	8001c38 <MENU_ChangeState+0x68>
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d9d4      	bls.n	8001bdc <MENU_ChangeState+0xc>
      }
   }
   Menu.NewEvent = MENU_EVENT_NOTHING;
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <MENU_ChangeState+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	725a      	strb	r2, [r3, #9]
}
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	200002a4 	.word	0x200002a4
 8001c48:	20000004 	.word	0x20000004

08001c4c <MENU_Init>:
void MENU_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001c50:	213c      	movs	r1, #60	; 0x3c
 8001c52:	4802      	ldr	r0, [pc, #8]	; (8001c5c <MENU_Init+0x10>)
 8001c54:	f010 fe7a 	bl	801294c <HAL_TIM_Encoder_Start>
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	2000470c 	.word	0x2000470c

08001c60 <MENU_Handler>:
void MENU_Handler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
   MENU_ChangeState();
 8001c64:	f7ff ffb4 	bl	8001bd0 <MENU_ChangeState>
   if(StateFunction[Menu.State].MenuFunction != NULL)
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MENU_Handler+0x2c>)
 8001c6a:	7a1b      	ldrb	r3, [r3, #8]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <MENU_Handler+0x30>)
 8001c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <MENU_Handler+0x26>
   {
      StateFunction[Menu.State].MenuFunction();
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <MENU_Handler+0x2c>)
 8001c7a:	7a1b      	ldrb	r3, [r3, #8]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <MENU_Handler+0x30>)
 8001c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c84:	4798      	blx	r3
   }
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200002a4 	.word	0x200002a4
 8001c90:	20000014 	.word	0x20000014

08001c94 <MENU_IdleFunction>:
static void MENU_IdleFunction(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
   if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001c98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c9c:	480e      	ldr	r0, [pc, #56]	; (8001cd8 <MENU_IdleFunction+0x44>)
 8001c9e:	f00d f8e3 	bl	800ee68 <HAL_GPIO_ReadPin>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d115      	bne.n	8001cd4 <MENU_IdleFunction+0x40>
   {
      osMutexAcquire(MenuMutexHandle, osWaitForever);
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <MENU_IdleFunction+0x48>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f014 f879 	bl	8015da8 <osMutexAcquire>
      Menu.NewEvent = MENU_EVENT_NEW;
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <MENU_IdleFunction+0x4c>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	725a      	strb	r2, [r3, #9]
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001cbc:	e002      	b.n	8001cc4 <MENU_IdleFunction+0x30>
      {
         osDelay(100);
 8001cbe:	2064      	movs	r0, #100	; 0x64
 8001cc0:	f013 fe24 	bl	801590c <osDelay>
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc8:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <MENU_IdleFunction+0x44>)
 8001cca:	f00d f8cd 	bl	800ee68 <HAL_GPIO_ReadPin>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f4      	beq.n	8001cbe <MENU_IdleFunction+0x2a>
      }
   }
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	48000400 	.word	0x48000400
 8001cdc:	200040b8 	.word	0x200040b8
 8001ce0:	200002a4 	.word	0x200002a4

08001ce4 <MENU_ChoiseFunction>:
static void MENU_ChoiseFunction(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b09c      	sub	sp, #112	; 0x70
 8001ce8:	af02      	add	r7, sp, #8
   char Temp[100];
   switch((TIM5->CNT / 4) % MENU_CHOISE_CNT)
 8001cea:	4bc6      	ldr	r3, [pc, #792]	; (8002004 <MENU_ChoiseFunction+0x320>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	0899      	lsrs	r1, r3, #2
 8001cf0:	4bc5      	ldr	r3, [pc, #788]	; (8002008 <MENU_ChoiseFunction+0x324>)
 8001cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8001cf6:	089a      	lsrs	r2, r3, #2
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	1aca      	subs	r2, r1, r3
 8001d02:	2a05      	cmp	r2, #5
 8001d04:	f200 8198 	bhi.w	8002038 <MENU_ChoiseFunction+0x354>
 8001d08:	a301      	add	r3, pc, #4	; (adr r3, 8001d10 <MENU_ChoiseFunction+0x2c>)
 8001d0a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001d0e:	bf00      	nop
 8001d10:	08001d29 	.word	0x08001d29
 8001d14:	08001d99 	.word	0x08001d99
 8001d18:	08001e09 	.word	0x08001e09
 8001d1c:	08001e79 	.word	0x08001e79
 8001d20:	08001f07 	.word	0x08001f07
 8001d24:	08001f77 	.word	0x08001f77
   {
      case MENU_CHOISE_TIME:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001d28:	4bb8      	ldr	r3, [pc, #736]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	4618      	mov	r0, r3
 8001d32:	f014 f839 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001d36:	4bb6      	ldr	r3, [pc, #728]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f014 f832 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001d44:	4bb3      	ldr	r3, [pc, #716]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f014 f82b 	bl	8015da8 <osMutexAcquire>
         ssd1306_clear();
 8001d52:	f00b fc45 	bl	800d5e0 <ssd1306_clear>
         sprintf(Temp, "Ustaw godzine");
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	49af      	ldr	r1, [pc, #700]	; (8002018 <MENU_ChoiseFunction+0x334>)
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f00a ff10 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001d60:	1d3a      	adds	r2, r7, #4
 8001d62:	2300      	movs	r3, #0
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	2300      	movs	r3, #0
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f7ff faa0 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001d74:	f00b fc08 	bl	800d588 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001d78:	4ba6      	ldr	r3, [pc, #664]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f014 f85e 	bl	8015e3e <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001d82:	4ba3      	ldr	r3, [pc, #652]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f014 f859 	bl	8015e3e <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001d8c:	4b9f      	ldr	r3, [pc, #636]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f014 f854 	bl	8015e3e <osMutexRelease>
         break;
 8001d96:	e150      	b.n	800203a <MENU_ChoiseFunction+0x356>
      }
      case MENU_CHOISE_DATE:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001d98:	4b9c      	ldr	r3, [pc, #624]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	4618      	mov	r0, r3
 8001da2:	f014 f801 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001da6:	4b9a      	ldr	r3, [pc, #616]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f04f 31ff 	mov.w	r1, #4294967295
 8001dae:	4618      	mov	r0, r3
 8001db0:	f013 fffa 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001db4:	4b97      	ldr	r3, [pc, #604]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f013 fff3 	bl	8015da8 <osMutexAcquire>
         ssd1306_clear();
 8001dc2:	f00b fc0d 	bl	800d5e0 <ssd1306_clear>
         sprintf(Temp, "Ustaw date");
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4994      	ldr	r1, [pc, #592]	; (800201c <MENU_ChoiseFunction+0x338>)
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f00a fed8 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001dd0:	1d3a      	adds	r2, r7, #4
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2301      	movs	r3, #1
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff fa68 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001de4:	f00b fbd0 	bl	800d588 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001de8:	4b8a      	ldr	r3, [pc, #552]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f014 f826 	bl	8015e3e <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001df2:	4b87      	ldr	r3, [pc, #540]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f014 f821 	bl	8015e3e <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001dfc:	4b83      	ldr	r3, [pc, #524]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f014 f81c 	bl	8015e3e <osMutexRelease>
         break;
 8001e06:	e118      	b.n	800203a <MENU_ChoiseFunction+0x356>
      }
      case MENU_CHOISE_CHART:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001e08:	4b80      	ldr	r3, [pc, #512]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	4618      	mov	r0, r3
 8001e12:	f013 ffc9 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001e16:	4b7e      	ldr	r3, [pc, #504]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f013 ffc2 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001e24:	4b7b      	ldr	r3, [pc, #492]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f013 ffbb 	bl	8015da8 <osMutexAcquire>
         ssd1306_clear();
 8001e32:	f00b fbd5 	bl	800d5e0 <ssd1306_clear>
         sprintf(Temp, "Wykresy");
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	4979      	ldr	r1, [pc, #484]	; (8002020 <MENU_ChoiseFunction+0x33c>)
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f00a fea0 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001e40:	1d3a      	adds	r2, r7, #4
 8001e42:	2300      	movs	r3, #0
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	2300      	movs	r3, #0
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7ff fa30 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001e54:	f00b fb98 	bl	800d588 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001e58:	4b6e      	ldr	r3, [pc, #440]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f013 ffee 	bl	8015e3e <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001e62:	4b6b      	ldr	r3, [pc, #428]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f013 ffe9 	bl	8015e3e <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001e6c:	4b67      	ldr	r3, [pc, #412]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f013 ffe4 	bl	8015e3e <osMutexRelease>
         break;
 8001e76:	e0e0      	b.n	800203a <MENU_ChoiseFunction+0x356>
      }
      case MENU_CHOISE_CLEAR_EXTERNAL_MEMORY:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001e78:	4b64      	ldr	r3, [pc, #400]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	4618      	mov	r0, r3
 8001e82:	f013 ff91 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001e86:	4b62      	ldr	r3, [pc, #392]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f013 ff8a 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001e94:	4b5f      	ldr	r3, [pc, #380]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f013 ff83 	bl	8015da8 <osMutexAcquire>
         ssd1306_clear();
 8001ea2:	f00b fb9d 	bl	800d5e0 <ssd1306_clear>
         sprintf(Temp, "Czyszczenie Pamieci");
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	495e      	ldr	r1, [pc, #376]	; (8002024 <MENU_ChoiseFunction+0x340>)
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f00a fe68 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001eb0:	1d3a      	adds	r2, r7, #4
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2301      	movs	r3, #1
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff f9f8 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "WYMAGA POTWIERDZENIA");
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	4958      	ldr	r1, [pc, #352]	; (8002028 <MENU_ChoiseFunction+0x344>)
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f00a fe59 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 10, Temp, WHITE, 0, OLED);
 8001ece:	1d3a      	adds	r2, r7, #4
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	210a      	movs	r1, #10
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff f9e9 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001ee2:	f00b fb51 	bl	800d588 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001ee6:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f013 ffa7 	bl	8015e3e <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001ef0:	4b47      	ldr	r3, [pc, #284]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f013 ffa2 	bl	8015e3e <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001efa:	4b44      	ldr	r3, [pc, #272]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f013 ff9d 	bl	8015e3e <osMutexRelease>
         break;
 8001f04:	e099      	b.n	800203a <MENU_ChoiseFunction+0x356>
      }
      case MENU_CHOISE_DARK_MODE:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f013 ff4a 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001f14:	4b3e      	ldr	r3, [pc, #248]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f013 ff43 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001f22:	4b3c      	ldr	r3, [pc, #240]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f013 ff3c 	bl	8015da8 <osMutexAcquire>
         ssd1306_clear();
 8001f30:	f00b fb56 	bl	800d5e0 <ssd1306_clear>
         sprintf(Temp, "ON/OFF Tryb ciemny");
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	493d      	ldr	r1, [pc, #244]	; (800202c <MENU_ChoiseFunction+0x348>)
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f00a fe21 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001f3e:	1d3a      	adds	r2, r7, #4
 8001f40:	2300      	movs	r3, #0
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	2300      	movs	r3, #0
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2301      	movs	r3, #1
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff f9b1 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001f52:	f00b fb19 	bl	800d588 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001f56:	4b2f      	ldr	r3, [pc, #188]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f013 ff6f 	bl	8015e3e <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f013 ff6a 	bl	8015e3e <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001f6a:	4b28      	ldr	r3, [pc, #160]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f013 ff65 	bl	8015e3e <osMutexRelease>
         break;
 8001f74:	e061      	b.n	800203a <MENU_ChoiseFunction+0x356>
      }
      case MENU_CHOISE_SEND_MESURMENT_COMMAND:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001f76:	4b25      	ldr	r3, [pc, #148]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f013 ff12 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f013 ff0b 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f013 ff04 	bl	8015da8 <osMutexAcquire>
         ssd1306_clear();
 8001fa0:	f00b fb1e 	bl	800d5e0 <ssd1306_clear>
         sprintf(Temp, "WYSLIJ ZADANIE");
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	4922      	ldr	r1, [pc, #136]	; (8002030 <MENU_ChoiseFunction+0x34c>)
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00a fde9 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001fae:	1d3a      	adds	r2, r7, #4
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7ff f979 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "POMIARU");
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	491b      	ldr	r1, [pc, #108]	; (8002034 <MENU_ChoiseFunction+0x350>)
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f00a fdda 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 10, Temp, WHITE, 0, OLED);
 8001fcc:	1d3a      	adds	r2, r7, #4
 8001fce:	2300      	movs	r3, #0
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	210a      	movs	r1, #10
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f7ff f96a 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001fe0:	f00b fad2 	bl	800d588 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f013 ff28 	bl	8015e3e <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f013 ff23 	bl	8015e3e <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f013 ff1e 	bl	8015e3e <osMutexRelease>
         break;
 8002002:	e01a      	b.n	800203a <MENU_ChoiseFunction+0x356>
 8002004:	40000c00 	.word	0x40000c00
 8002008:	aaaaaaab 	.word	0xaaaaaaab
 800200c:	200040a4 	.word	0x200040a4
 8002010:	200040a8 	.word	0x200040a8
 8002014:	200040ac 	.word	0x200040ac
 8002018:	0801fec8 	.word	0x0801fec8
 800201c:	0801fed8 	.word	0x0801fed8
 8002020:	0801fee4 	.word	0x0801fee4
 8002024:	0801feec 	.word	0x0801feec
 8002028:	0801ff00 	.word	0x0801ff00
 800202c:	0801ff18 	.word	0x0801ff18
 8002030:	0801ff2c 	.word	0x0801ff2c
 8002034:	0801ff3c 	.word	0x0801ff3c
      }
      default:
      {
         break;
 8002038:	bf00      	nop
      }
   }
   if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800203a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800203e:	4816      	ldr	r0, [pc, #88]	; (8002098 <MENU_ChoiseFunction+0x3b4>)
 8002040:	f00c ff12 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d122      	bne.n	8002090 <MENU_ChoiseFunction+0x3ac>
   {
      Menu.NewEvent  = MENU_EVENT_CHOISE;
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <MENU_ChoiseFunction+0x3b8>)
 800204c:	2202      	movs	r2, #2
 800204e:	725a      	strb	r2, [r3, #9]
      Menu.ChoiseCnt = (TIM5->CNT / 4) % MENU_CHOISE_CNT;
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <MENU_ChoiseFunction+0x3bc>)
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	0899      	lsrs	r1, r3, #2
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <MENU_ChoiseFunction+0x3c0>)
 8002058:	fba3 2301 	umull	r2, r3, r3, r1
 800205c:	089a      	lsrs	r2, r3, #2
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	1aca      	subs	r2, r1, r3
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MENU_ChoiseFunction+0x3b8>)
 800206a:	601a      	str	r2, [r3, #0]
      TIM5->CNT      = 0;
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <MENU_ChoiseFunction+0x3bc>)
 800206e:	2200      	movs	r2, #0
 8002070:	625a      	str	r2, [r3, #36]	; 0x24
      Menu.f         = 0;
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <MENU_ChoiseFunction+0x3b8>)
 8002074:	2200      	movs	r2, #0
 8002076:	729a      	strb	r2, [r3, #10]
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002078:	e002      	b.n	8002080 <MENU_ChoiseFunction+0x39c>
      {
         osDelay(100);
 800207a:	2064      	movs	r0, #100	; 0x64
 800207c:	f013 fc46 	bl	801590c <osDelay>
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002080:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002084:	4804      	ldr	r0, [pc, #16]	; (8002098 <MENU_ChoiseFunction+0x3b4>)
 8002086:	f00c feef 	bl	800ee68 <HAL_GPIO_ReadPin>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f4      	beq.n	800207a <MENU_ChoiseFunction+0x396>
      }
   }
}
 8002090:	bf00      	nop
 8002092:	3768      	adds	r7, #104	; 0x68
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	48000400 	.word	0x48000400
 800209c:	200002a4 	.word	0x200002a4
 80020a0:	40000c00 	.word	0x40000c00
 80020a4:	aaaaaaab 	.word	0xaaaaaaab

080020a8 <MENU_RunningFunction>:
static void MENU_RunningFunction(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b0b2      	sub	sp, #200	; 0xc8
 80020ac:	af02      	add	r7, sp, #8
   char Temp[100];
   ChartDateAndType_TypeDef QueueChartData = { 0 };
 80020ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	809a      	strh	r2, [r3, #4]
   switch(Menu.ChoiseCnt)
 80020b8:	4bab      	ldr	r3, [pc, #684]	; (8002368 <MENU_RunningFunction+0x2c0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b05      	cmp	r3, #5
 80020be:	f201 850b 	bhi.w	8003ad8 <MENU_RunningFunction+0x1a30>
 80020c2:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <MENU_RunningFunction+0x20>)
 80020c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c8:	080020e1 	.word	0x080020e1
 80020cc:	080024d1 	.word	0x080024d1
 80020d0:	080028c7 	.word	0x080028c7
 80020d4:	08003465 	.word	0x08003465
 80020d8:	08003709 	.word	0x08003709
 80020dc:	08003905 	.word	0x08003905
   {
      case MENU_CHOISE_TIME:
      {
         RTC_TimeTypeDef RtcTime;
         RTC_DateTypeDef RtcDate;
         osMutexAcquire(RTCMutexHandle, osWaitForever);
 80020e0:	4ba2      	ldr	r3, [pc, #648]	; (800236c <MENU_RunningFunction+0x2c4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	4618      	mov	r0, r3
 80020ea:	f013 fe5d 	bl	8015da8 <osMutexAcquire>
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80020ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020f2:	2200      	movs	r2, #0
 80020f4:	4619      	mov	r1, r3
 80020f6:	489e      	ldr	r0, [pc, #632]	; (8002370 <MENU_RunningFunction+0x2c8>)
 80020f8:	f00e fe24 	bl	8010d44 <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80020fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002100:	2200      	movs	r2, #0
 8002102:	4619      	mov	r1, r3
 8002104:	489a      	ldr	r0, [pc, #616]	; (8002370 <MENU_RunningFunction+0x2c8>)
 8002106:	f00e ff07 	bl	8010f18 <HAL_RTC_GetDate>
         osMutexRelease(RTCMutexHandle);
 800210a:	4b98      	ldr	r3, [pc, #608]	; (800236c <MENU_RunningFunction+0x2c4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f013 fe95 	bl	8015e3e <osMutexRelease>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002114:	4b97      	ldr	r3, [pc, #604]	; (8002374 <MENU_RunningFunction+0x2cc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	4618      	mov	r0, r3
 800211e:	f013 fe43 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002122:	4b95      	ldr	r3, [pc, #596]	; (8002378 <MENU_RunningFunction+0x2d0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f04f 31ff 	mov.w	r1, #4294967295
 800212a:	4618      	mov	r0, r3
 800212c:	f013 fe3c 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002130:	4b92      	ldr	r3, [pc, #584]	; (800237c <MENU_RunningFunction+0x2d4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	4618      	mov	r0, r3
 800213a:	f013 fe35 	bl	8015da8 <osMutexAcquire>
         ssd1306_clear();
 800213e:	f00b fa4f 	bl	800d5e0 <ssd1306_clear>
         sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8002142:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002146:	461a      	mov	r2, r3
 8002148:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800214c:	4619      	mov	r1, r3
 800214e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002152:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	460b      	mov	r3, r1
 800215a:	4989      	ldr	r1, [pc, #548]	; (8002380 <MENU_RunningFunction+0x2d8>)
 800215c:	f00a fd10 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002160:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002164:	2300      	movs	r3, #0
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	2300      	movs	r3, #0
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2301      	movs	r3, #1
 800216e:	2100      	movs	r1, #0
 8002170:	2000      	movs	r0, #0
 8002172:	f7ff f89f 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8002176:	f00b fa07 	bl	800d588 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 800217a:	4b80      	ldr	r3, [pc, #512]	; (800237c <MENU_RunningFunction+0x2d4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f013 fe5d 	bl	8015e3e <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8002184:	4b7c      	ldr	r3, [pc, #496]	; (8002378 <MENU_RunningFunction+0x2d0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f013 fe58 	bl	8015e3e <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 800218e:	4b79      	ldr	r3, [pc, #484]	; (8002374 <MENU_RunningFunction+0x2cc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f013 fe53 	bl	8015e3e <osMutexRelease>
         while(Menu.f == 0)
 8002198:	e193      	b.n	80024c2 <MENU_RunningFunction+0x41a>
         {
            if(Menu.ButtonCnt == 0)
 800219a:	4b73      	ldr	r3, [pc, #460]	; (8002368 <MENU_RunningFunction+0x2c0>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d16e      	bne.n	8002280 <MENU_RunningFunction+0x1d8>
            {
               RtcTime.Hours = (TIM5->CNT / 4) % 24;
 80021a2:	4b78      	ldr	r3, [pc, #480]	; (8002384 <MENU_RunningFunction+0x2dc>)
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	0899      	lsrs	r1, r3, #2
 80021a8:	4b77      	ldr	r3, [pc, #476]	; (8002388 <MENU_RunningFunction+0x2e0>)
 80021aa:	fba3 2301 	umull	r2, r3, r3, r1
 80021ae:	091a      	lsrs	r2, r3, #4
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	1aca      	subs	r2, r1, r3
 80021ba:	b2d3      	uxtb	r3, r2
 80021bc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80021c0:	4b6c      	ldr	r3, [pc, #432]	; (8002374 <MENU_RunningFunction+0x2cc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295
 80021c8:	4618      	mov	r0, r3
 80021ca:	f013 fded 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80021ce:	4b6a      	ldr	r3, [pc, #424]	; (8002378 <MENU_RunningFunction+0x2d0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f04f 31ff 	mov.w	r1, #4294967295
 80021d6:	4618      	mov	r0, r3
 80021d8:	f013 fde6 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80021dc:	4b67      	ldr	r3, [pc, #412]	; (800237c <MENU_RunningFunction+0x2d4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	4618      	mov	r0, r3
 80021e6:	f013 fddf 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 80021ea:	f00b f9f9 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80021ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80021f2:	461a      	mov	r2, r3
 80021f4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80021f8:	4619      	mov	r1, r3
 80021fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80021fe:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	460b      	mov	r3, r1
 8002206:	495e      	ldr	r1, [pc, #376]	; (8002380 <MENU_RunningFunction+0x2d8>)
 8002208:	f00a fcba 	bl	800cb80 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 800220c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002210:	2300      	movs	r3, #0
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	2300      	movs	r3, #0
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2301      	movs	r3, #1
 800221a:	2100      	movs	r1, #0
 800221c:	2000      	movs	r0, #0
 800221e:	f7ff f849 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002222:	f00b f9b1 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002226:	4b55      	ldr	r3, [pc, #340]	; (800237c <MENU_RunningFunction+0x2d4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f013 fe07 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002230:	4b51      	ldr	r3, [pc, #324]	; (8002378 <MENU_RunningFunction+0x2d0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f013 fe02 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 800223a:	4b4e      	ldr	r3, [pc, #312]	; (8002374 <MENU_RunningFunction+0x2cc>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f013 fdfd 	bl	8015e3e <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002244:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002248:	4850      	ldr	r0, [pc, #320]	; (800238c <MENU_RunningFunction+0x2e4>)
 800224a:	f00c fe0d 	bl	800ee68 <HAL_GPIO_ReadPin>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 8133 	bne.w	80024bc <MENU_RunningFunction+0x414>
               {
                  Menu.ButtonCnt++;
 8002256:	4b44      	ldr	r3, [pc, #272]	; (8002368 <MENU_RunningFunction+0x2c0>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	3301      	adds	r3, #1
 800225c:	4a42      	ldr	r2, [pc, #264]	; (8002368 <MENU_RunningFunction+0x2c0>)
 800225e:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002260:	4b48      	ldr	r3, [pc, #288]	; (8002384 <MENU_RunningFunction+0x2dc>)
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002266:	e002      	b.n	800226e <MENU_RunningFunction+0x1c6>
                  {
                     osDelay(100);
 8002268:	2064      	movs	r0, #100	; 0x64
 800226a:	f013 fb4f 	bl	801590c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800226e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002272:	4846      	ldr	r0, [pc, #280]	; (800238c <MENU_RunningFunction+0x2e4>)
 8002274:	f00c fdf8 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f4      	beq.n	8002268 <MENU_RunningFunction+0x1c0>
 800227e:	e11d      	b.n	80024bc <MENU_RunningFunction+0x414>
                  }
               }
            }
            else if(Menu.ButtonCnt == 1)
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <MENU_RunningFunction+0x2c0>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b01      	cmp	r3, #1
 8002286:	f040 8085 	bne.w	8002394 <MENU_RunningFunction+0x2ec>
            {
               RtcTime.Minutes = (TIM5->CNT / 4) % 60;
 800228a:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <MENU_RunningFunction+0x2dc>)
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	0899      	lsrs	r1, r3, #2
 8002290:	4b3f      	ldr	r3, [pc, #252]	; (8002390 <MENU_RunningFunction+0x2e8>)
 8002292:	fba3 2301 	umull	r2, r3, r3, r1
 8002296:	095a      	lsrs	r2, r3, #5
 8002298:	4613      	mov	r3, r2
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	1aca      	subs	r2, r1, r3
 80022a2:	b2d3      	uxtb	r3, r2
 80022a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80022a8:	4b32      	ldr	r3, [pc, #200]	; (8002374 <MENU_RunningFunction+0x2cc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	4618      	mov	r0, r3
 80022b2:	f013 fd79 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80022b6:	4b30      	ldr	r3, [pc, #192]	; (8002378 <MENU_RunningFunction+0x2d0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f04f 31ff 	mov.w	r1, #4294967295
 80022be:	4618      	mov	r0, r3
 80022c0:	f013 fd72 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80022c4:	4b2d      	ldr	r3, [pc, #180]	; (800237c <MENU_RunningFunction+0x2d4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	4618      	mov	r0, r3
 80022ce:	f013 fd6b 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 80022d2:	f00b f985 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80022d6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80022da:	461a      	mov	r2, r3
 80022dc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80022e0:	4619      	mov	r1, r3
 80022e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80022e6:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	460b      	mov	r3, r1
 80022ee:	4924      	ldr	r1, [pc, #144]	; (8002380 <MENU_RunningFunction+0x2d8>)
 80022f0:	f00a fc46 	bl	800cb80 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80022f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80022f8:	2300      	movs	r3, #0
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	2300      	movs	r3, #0
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2301      	movs	r3, #1
 8002302:	2100      	movs	r1, #0
 8002304:	2000      	movs	r0, #0
 8002306:	f7fe ffd5 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 800230a:	f00b f93d 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 800230e:	4b1b      	ldr	r3, [pc, #108]	; (800237c <MENU_RunningFunction+0x2d4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f013 fd93 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <MENU_RunningFunction+0x2d0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f013 fd8e 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <MENU_RunningFunction+0x2cc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f013 fd89 	bl	8015e3e <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800232c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002330:	4816      	ldr	r0, [pc, #88]	; (800238c <MENU_RunningFunction+0x2e4>)
 8002332:	f00c fd99 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	f040 80bf 	bne.w	80024bc <MENU_RunningFunction+0x414>
               {
                  Menu.ButtonCnt++;
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <MENU_RunningFunction+0x2c0>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	3301      	adds	r3, #1
 8002344:	4a08      	ldr	r2, [pc, #32]	; (8002368 <MENU_RunningFunction+0x2c0>)
 8002346:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MENU_RunningFunction+0x2dc>)
 800234a:	2200      	movs	r2, #0
 800234c:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800234e:	e002      	b.n	8002356 <MENU_RunningFunction+0x2ae>
                  {
                     osDelay(100);
 8002350:	2064      	movs	r0, #100	; 0x64
 8002352:	f013 fadb 	bl	801590c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002356:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800235a:	480c      	ldr	r0, [pc, #48]	; (800238c <MENU_RunningFunction+0x2e4>)
 800235c:	f00c fd84 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f4      	beq.n	8002350 <MENU_RunningFunction+0x2a8>
 8002366:	e0a9      	b.n	80024bc <MENU_RunningFunction+0x414>
 8002368:	200002a4 	.word	0x200002a4
 800236c:	200040bc 	.word	0x200040bc
 8002370:	200041d4 	.word	0x200041d4
 8002374:	200040a4 	.word	0x200040a4
 8002378:	200040a8 	.word	0x200040a8
 800237c:	200040ac 	.word	0x200040ac
 8002380:	0801ff44 	.word	0x0801ff44
 8002384:	40000c00 	.word	0x40000c00
 8002388:	aaaaaaab 	.word	0xaaaaaaab
 800238c:	48000400 	.word	0x48000400
 8002390:	88888889 	.word	0x88888889
                  }
               }
            }
            else
            {
               RtcTime.Seconds = (TIM5->CNT / 4) % 60;
 8002394:	4bb9      	ldr	r3, [pc, #740]	; (800267c <MENU_RunningFunction+0x5d4>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	0899      	lsrs	r1, r3, #2
 800239a:	4bb9      	ldr	r3, [pc, #740]	; (8002680 <MENU_RunningFunction+0x5d8>)
 800239c:	fba3 2301 	umull	r2, r3, r3, r1
 80023a0:	095a      	lsrs	r2, r3, #5
 80023a2:	4613      	mov	r3, r2
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	1aca      	subs	r2, r1, r3
 80023ac:	b2d3      	uxtb	r3, r2
 80023ae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80023b2:	4bb4      	ldr	r3, [pc, #720]	; (8002684 <MENU_RunningFunction+0x5dc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f04f 31ff 	mov.w	r1, #4294967295
 80023ba:	4618      	mov	r0, r3
 80023bc:	f013 fcf4 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80023c0:	4bb1      	ldr	r3, [pc, #708]	; (8002688 <MENU_RunningFunction+0x5e0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295
 80023c8:	4618      	mov	r0, r3
 80023ca:	f013 fced 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80023ce:	4baf      	ldr	r3, [pc, #700]	; (800268c <MENU_RunningFunction+0x5e4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f04f 31ff 	mov.w	r1, #4294967295
 80023d6:	4618      	mov	r0, r3
 80023d8:	f013 fce6 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 80023dc:	f00b f900 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80023e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80023e4:	461a      	mov	r2, r3
 80023e6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80023ea:	4619      	mov	r1, r3
 80023ec:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80023f0:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	460b      	mov	r3, r1
 80023f8:	49a5      	ldr	r1, [pc, #660]	; (8002690 <MENU_RunningFunction+0x5e8>)
 80023fa:	f00a fbc1 	bl	800cb80 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80023fe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002402:	2300      	movs	r3, #0
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	2300      	movs	r3, #0
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2301      	movs	r3, #1
 800240c:	2100      	movs	r1, #0
 800240e:	2000      	movs	r0, #0
 8002410:	f7fe ff50 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002414:	f00b f8b8 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002418:	4b9c      	ldr	r3, [pc, #624]	; (800268c <MENU_RunningFunction+0x5e4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f013 fd0e 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002422:	4b99      	ldr	r3, [pc, #612]	; (8002688 <MENU_RunningFunction+0x5e0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f013 fd09 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 800242c:	4b95      	ldr	r3, [pc, #596]	; (8002684 <MENU_RunningFunction+0x5dc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f013 fd04 	bl	8015e3e <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002436:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800243a:	4896      	ldr	r0, [pc, #600]	; (8002694 <MENU_RunningFunction+0x5ec>)
 800243c:	f00c fd14 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d13a      	bne.n	80024bc <MENU_RunningFunction+0x414>
               {
                  Menu.ButtonCnt++;
 8002446:	4b94      	ldr	r3, [pc, #592]	; (8002698 <MENU_RunningFunction+0x5f0>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	3301      	adds	r3, #1
 800244c:	4a92      	ldr	r2, [pc, #584]	; (8002698 <MENU_RunningFunction+0x5f0>)
 800244e:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002450:	4b8a      	ldr	r3, [pc, #552]	; (800267c <MENU_RunningFunction+0x5d4>)
 8002452:	2200      	movs	r2, #0
 8002454:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002456:	e002      	b.n	800245e <MENU_RunningFunction+0x3b6>
                  {
                     osDelay(100);
 8002458:	2064      	movs	r0, #100	; 0x64
 800245a:	f013 fa57 	bl	801590c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800245e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002462:	488c      	ldr	r0, [pc, #560]	; (8002694 <MENU_RunningFunction+0x5ec>)
 8002464:	f00c fd00 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f4      	beq.n	8002458 <MENU_RunningFunction+0x3b0>
                  }
                  Menu.ButtonCnt = 0;
 800246e:	4b8a      	ldr	r3, [pc, #552]	; (8002698 <MENU_RunningFunction+0x5f0>)
 8002470:	2200      	movs	r2, #0
 8002472:	605a      	str	r2, [r3, #4]
                  Menu.f         = 1;
 8002474:	4b88      	ldr	r3, [pc, #544]	; (8002698 <MENU_RunningFunction+0x5f0>)
 8002476:	2201      	movs	r2, #1
 8002478:	729a      	strb	r2, [r3, #10]
                  osMutexAcquire(RTCMutexHandle, osWaitForever);
 800247a:	4b88      	ldr	r3, [pc, #544]	; (800269c <MENU_RunningFunction+0x5f4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f04f 31ff 	mov.w	r1, #4294967295
 8002482:	4618      	mov	r0, r3
 8002484:	f013 fc90 	bl	8015da8 <osMutexAcquire>
                  RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002488:	2300      	movs	r3, #0
 800248a:	64bb      	str	r3, [r7, #72]	; 0x48
                  RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800248c:	2300      	movs	r3, #0
 800248e:	64fb      	str	r3, [r7, #76]	; 0x4c
                  RtcTime.TimeFormat=RTC_FORMAT_BIN;
 8002490:	2300      	movs	r3, #0
 8002492:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                  while(HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8002496:	e002      	b.n	800249e <MENU_RunningFunction+0x3f6>
                  {
                     osDelay(100);
 8002498:	2064      	movs	r0, #100	; 0x64
 800249a:	f013 fa37 	bl	801590c <osDelay>
                  while(HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 800249e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024a2:	2200      	movs	r2, #0
 80024a4:	4619      	mov	r1, r3
 80024a6:	487e      	ldr	r0, [pc, #504]	; (80026a0 <MENU_RunningFunction+0x5f8>)
 80024a8:	f00e fbac 	bl	8010c04 <HAL_RTC_SetTime>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f2      	bne.n	8002498 <MENU_RunningFunction+0x3f0>
                  }
                  osMutexRelease(RTCMutexHandle);
 80024b2:	4b7a      	ldr	r3, [pc, #488]	; (800269c <MENU_RunningFunction+0x5f4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f013 fcc1 	bl	8015e3e <osMutexRelease>
               }
            }
            osDelay(50);
 80024bc:	2032      	movs	r0, #50	; 0x32
 80024be:	f013 fa25 	bl	801590c <osDelay>
         while(Menu.f == 0)
 80024c2:	4b75      	ldr	r3, [pc, #468]	; (8002698 <MENU_RunningFunction+0x5f0>)
 80024c4:	7a9b      	ldrb	r3, [r3, #10]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f43f ae67 	beq.w	800219a <MENU_RunningFunction+0xf2>
         }
         break;
 80024cc:	f001 bb0b 	b.w	8003ae6 <MENU_RunningFunction+0x1a3e>
      }
      case MENU_CHOISE_DATE:
      {
         RTC_TimeTypeDef RtcTime;
         RTC_DateTypeDef RtcDate;
         osMutexAcquire(RTCMutexHandle, osWaitForever);
 80024d0:	4b72      	ldr	r3, [pc, #456]	; (800269c <MENU_RunningFunction+0x5f4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	4618      	mov	r0, r3
 80024da:	f013 fc65 	bl	8015da8 <osMutexAcquire>
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80024de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e2:	2200      	movs	r2, #0
 80024e4:	4619      	mov	r1, r3
 80024e6:	486e      	ldr	r0, [pc, #440]	; (80026a0 <MENU_RunningFunction+0x5f8>)
 80024e8:	f00e fc2c 	bl	8010d44 <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80024ec:	f107 0320 	add.w	r3, r7, #32
 80024f0:	2200      	movs	r2, #0
 80024f2:	4619      	mov	r1, r3
 80024f4:	486a      	ldr	r0, [pc, #424]	; (80026a0 <MENU_RunningFunction+0x5f8>)
 80024f6:	f00e fd0f 	bl	8010f18 <HAL_RTC_GetDate>
         osMutexRelease(RTCMutexHandle);
 80024fa:	4b68      	ldr	r3, [pc, #416]	; (800269c <MENU_RunningFunction+0x5f4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f013 fc9d 	bl	8015e3e <osMutexRelease>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002504:	4b5f      	ldr	r3, [pc, #380]	; (8002684 <MENU_RunningFunction+0x5dc>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f04f 31ff 	mov.w	r1, #4294967295
 800250c:	4618      	mov	r0, r3
 800250e:	f013 fc4b 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002512:	4b5d      	ldr	r3, [pc, #372]	; (8002688 <MENU_RunningFunction+0x5e0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f04f 31ff 	mov.w	r1, #4294967295
 800251a:	4618      	mov	r0, r3
 800251c:	f013 fc44 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002520:	4b5a      	ldr	r3, [pc, #360]	; (800268c <MENU_RunningFunction+0x5e4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	4618      	mov	r0, r3
 800252a:	f013 fc3d 	bl	8015da8 <osMutexAcquire>
         ssd1306_clear();
 800252e:	f00b f857 	bl	800d5e0 <ssd1306_clear>
         sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002532:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002536:	461a      	mov	r2, r3
 8002538:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800253c:	4619      	mov	r1, r3
 800253e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002542:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	460b      	mov	r3, r1
 800254a:	4956      	ldr	r1, [pc, #344]	; (80026a4 <MENU_RunningFunction+0x5fc>)
 800254c:	f00a fb18 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002550:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002554:	2300      	movs	r3, #0
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	2300      	movs	r3, #0
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2301      	movs	r3, #1
 800255e:	2100      	movs	r1, #0
 8002560:	2000      	movs	r0, #0
 8002562:	f7fe fea7 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8002566:	f00b f80f 	bl	800d588 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 800256a:	4b48      	ldr	r3, [pc, #288]	; (800268c <MENU_RunningFunction+0x5e4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f013 fc65 	bl	8015e3e <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8002574:	4b44      	ldr	r3, [pc, #272]	; (8002688 <MENU_RunningFunction+0x5e0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f013 fc60 	bl	8015e3e <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 800257e:	4b41      	ldr	r3, [pc, #260]	; (8002684 <MENU_RunningFunction+0x5dc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f013 fc5b 	bl	8015e3e <osMutexRelease>
         while(Menu.f == 0)
 8002588:	e196      	b.n	80028b8 <MENU_RunningFunction+0x810>
         {
            if(Menu.ButtonCnt == 0)
 800258a:	4b43      	ldr	r3, [pc, #268]	; (8002698 <MENU_RunningFunction+0x5f0>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 808c 	bne.w	80026ac <MENU_RunningFunction+0x604>
            {
               RtcDate.Date = (TIM5->CNT / 4) % 31 + 1;
 8002594:	4b39      	ldr	r3, [pc, #228]	; (800267c <MENU_RunningFunction+0x5d4>)
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	089a      	lsrs	r2, r3, #2
 800259a:	4b43      	ldr	r3, [pc, #268]	; (80026a8 <MENU_RunningFunction+0x600>)
 800259c:	fba3 1302 	umull	r1, r3, r3, r2
 80025a0:	1ad1      	subs	r1, r2, r3
 80025a2:	0849      	lsrs	r1, r1, #1
 80025a4:	440b      	add	r3, r1
 80025a6:	0919      	lsrs	r1, r3, #4
 80025a8:	460b      	mov	r3, r1
 80025aa:	015b      	lsls	r3, r3, #5
 80025ac:	1a5b      	subs	r3, r3, r1
 80025ae:	1ad1      	subs	r1, r2, r3
 80025b0:	b2cb      	uxtb	r3, r1
 80025b2:	3301      	adds	r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80025ba:	4b32      	ldr	r3, [pc, #200]	; (8002684 <MENU_RunningFunction+0x5dc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f04f 31ff 	mov.w	r1, #4294967295
 80025c2:	4618      	mov	r0, r3
 80025c4:	f013 fbf0 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80025c8:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <MENU_RunningFunction+0x5e0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	4618      	mov	r0, r3
 80025d2:	f013 fbe9 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80025d6:	4b2d      	ldr	r3, [pc, #180]	; (800268c <MENU_RunningFunction+0x5e4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f04f 31ff 	mov.w	r1, #4294967295
 80025de:	4618      	mov	r0, r3
 80025e0:	f013 fbe2 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 80025e4:	f00a fffc 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 80025e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80025ec:	461a      	mov	r2, r3
 80025ee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80025f2:	4619      	mov	r1, r3
 80025f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025f8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	460b      	mov	r3, r1
 8002600:	4928      	ldr	r1, [pc, #160]	; (80026a4 <MENU_RunningFunction+0x5fc>)
 8002602:	f00a fabd 	bl	800cb80 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002606:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800260a:	2300      	movs	r3, #0
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	2300      	movs	r3, #0
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2301      	movs	r3, #1
 8002614:	2100      	movs	r1, #0
 8002616:	2000      	movs	r0, #0
 8002618:	f7fe fe4c 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 800261c:	f00a ffb4 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <MENU_RunningFunction+0x5e4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f013 fc0a 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <MENU_RunningFunction+0x5e0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f013 fc05 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002634:	4b13      	ldr	r3, [pc, #76]	; (8002684 <MENU_RunningFunction+0x5dc>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f013 fc00 	bl	8015e3e <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800263e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002642:	4814      	ldr	r0, [pc, #80]	; (8002694 <MENU_RunningFunction+0x5ec>)
 8002644:	f00c fc10 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 8131 	bne.w	80028b2 <MENU_RunningFunction+0x80a>
               {
                  Menu.ButtonCnt++;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <MENU_RunningFunction+0x5f0>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	3301      	adds	r3, #1
 8002656:	4a10      	ldr	r2, [pc, #64]	; (8002698 <MENU_RunningFunction+0x5f0>)
 8002658:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <MENU_RunningFunction+0x5d4>)
 800265c:	2200      	movs	r2, #0
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002660:	e002      	b.n	8002668 <MENU_RunningFunction+0x5c0>
                  {
                     osDelay(100);
 8002662:	2064      	movs	r0, #100	; 0x64
 8002664:	f013 f952 	bl	801590c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002668:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800266c:	4809      	ldr	r0, [pc, #36]	; (8002694 <MENU_RunningFunction+0x5ec>)
 800266e:	f00c fbfb 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f4      	beq.n	8002662 <MENU_RunningFunction+0x5ba>
 8002678:	e11b      	b.n	80028b2 <MENU_RunningFunction+0x80a>
 800267a:	bf00      	nop
 800267c:	40000c00 	.word	0x40000c00
 8002680:	88888889 	.word	0x88888889
 8002684:	200040a4 	.word	0x200040a4
 8002688:	200040a8 	.word	0x200040a8
 800268c:	200040ac 	.word	0x200040ac
 8002690:	0801ff44 	.word	0x0801ff44
 8002694:	48000400 	.word	0x48000400
 8002698:	200002a4 	.word	0x200002a4
 800269c:	200040bc 	.word	0x200040bc
 80026a0:	200041d4 	.word	0x200041d4
 80026a4:	0801ff54 	.word	0x0801ff54
 80026a8:	08421085 	.word	0x08421085
                  }
               }
            }
            else if(Menu.ButtonCnt == 1)
 80026ac:	4bb4      	ldr	r3, [pc, #720]	; (8002980 <MENU_RunningFunction+0x8d8>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d170      	bne.n	8002796 <MENU_RunningFunction+0x6ee>
            {
               RtcDate.Month = (TIM5->CNT / 4) % 12 + 1;
 80026b4:	4bb3      	ldr	r3, [pc, #716]	; (8002984 <MENU_RunningFunction+0x8dc>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	0899      	lsrs	r1, r3, #2
 80026ba:	4bb3      	ldr	r3, [pc, #716]	; (8002988 <MENU_RunningFunction+0x8e0>)
 80026bc:	fba3 2301 	umull	r2, r3, r3, r1
 80026c0:	08da      	lsrs	r2, r3, #3
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	1aca      	subs	r2, r1, r3
 80026cc:	b2d3      	uxtb	r3, r2
 80026ce:	3301      	adds	r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80026d6:	4bad      	ldr	r3, [pc, #692]	; (800298c <MENU_RunningFunction+0x8e4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f04f 31ff 	mov.w	r1, #4294967295
 80026de:	4618      	mov	r0, r3
 80026e0:	f013 fb62 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80026e4:	4baa      	ldr	r3, [pc, #680]	; (8002990 <MENU_RunningFunction+0x8e8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ec:	4618      	mov	r0, r3
 80026ee:	f013 fb5b 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80026f2:	4ba8      	ldr	r3, [pc, #672]	; (8002994 <MENU_RunningFunction+0x8ec>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f04f 31ff 	mov.w	r1, #4294967295
 80026fa:	4618      	mov	r0, r3
 80026fc:	f013 fb54 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 8002700:	f00a ff6e 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002704:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002708:	461a      	mov	r2, r3
 800270a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800270e:	4619      	mov	r1, r3
 8002710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002714:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	460b      	mov	r3, r1
 800271c:	499e      	ldr	r1, [pc, #632]	; (8002998 <MENU_RunningFunction+0x8f0>)
 800271e:	f00a fa2f 	bl	800cb80 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002722:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002726:	2300      	movs	r3, #0
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	2300      	movs	r3, #0
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2301      	movs	r3, #1
 8002730:	2100      	movs	r1, #0
 8002732:	2000      	movs	r0, #0
 8002734:	f7fe fdbe 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002738:	f00a ff26 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 800273c:	4b95      	ldr	r3, [pc, #596]	; (8002994 <MENU_RunningFunction+0x8ec>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f013 fb7c 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002746:	4b92      	ldr	r3, [pc, #584]	; (8002990 <MENU_RunningFunction+0x8e8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f013 fb77 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002750:	4b8e      	ldr	r3, [pc, #568]	; (800298c <MENU_RunningFunction+0x8e4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f013 fb72 	bl	8015e3e <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800275a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800275e:	488f      	ldr	r0, [pc, #572]	; (800299c <MENU_RunningFunction+0x8f4>)
 8002760:	f00c fb82 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 80a3 	bne.w	80028b2 <MENU_RunningFunction+0x80a>
               {
                  Menu.ButtonCnt++;
 800276c:	4b84      	ldr	r3, [pc, #528]	; (8002980 <MENU_RunningFunction+0x8d8>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	3301      	adds	r3, #1
 8002772:	4a83      	ldr	r2, [pc, #524]	; (8002980 <MENU_RunningFunction+0x8d8>)
 8002774:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002776:	4b83      	ldr	r3, [pc, #524]	; (8002984 <MENU_RunningFunction+0x8dc>)
 8002778:	2200      	movs	r2, #0
 800277a:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800277c:	e002      	b.n	8002784 <MENU_RunningFunction+0x6dc>
                  {
                     osDelay(100);
 800277e:	2064      	movs	r0, #100	; 0x64
 8002780:	f013 f8c4 	bl	801590c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002784:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002788:	4884      	ldr	r0, [pc, #528]	; (800299c <MENU_RunningFunction+0x8f4>)
 800278a:	f00c fb6d 	bl	800ee68 <HAL_GPIO_ReadPin>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f4      	beq.n	800277e <MENU_RunningFunction+0x6d6>
 8002794:	e08d      	b.n	80028b2 <MENU_RunningFunction+0x80a>
                  }
               }
            }
            else
            {
               RtcDate.Year = (TIM5->CNT / 4) % 99;
 8002796:	4b7b      	ldr	r3, [pc, #492]	; (8002984 <MENU_RunningFunction+0x8dc>)
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	0899      	lsrs	r1, r3, #2
 800279c:	4b80      	ldr	r3, [pc, #512]	; (80029a0 <MENU_RunningFunction+0x8f8>)
 800279e:	fba3 2301 	umull	r2, r3, r3, r1
 80027a2:	099a      	lsrs	r2, r3, #6
 80027a4:	4613      	mov	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	4413      	add	r3, r2
 80027ae:	1aca      	subs	r2, r1, r3
 80027b0:	b2d3      	uxtb	r3, r2
 80027b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80027b6:	4b75      	ldr	r3, [pc, #468]	; (800298c <MENU_RunningFunction+0x8e4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f04f 31ff 	mov.w	r1, #4294967295
 80027be:	4618      	mov	r0, r3
 80027c0:	f013 faf2 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80027c4:	4b72      	ldr	r3, [pc, #456]	; (8002990 <MENU_RunningFunction+0x8e8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295
 80027cc:	4618      	mov	r0, r3
 80027ce:	f013 faeb 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80027d2:	4b70      	ldr	r3, [pc, #448]	; (8002994 <MENU_RunningFunction+0x8ec>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f04f 31ff 	mov.w	r1, #4294967295
 80027da:	4618      	mov	r0, r3
 80027dc:	f013 fae4 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 80027e0:	f00a fefe 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 80027e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80027e8:	461a      	mov	r2, r3
 80027ea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80027ee:	4619      	mov	r1, r3
 80027f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027f4:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	460b      	mov	r3, r1
 80027fc:	4966      	ldr	r1, [pc, #408]	; (8002998 <MENU_RunningFunction+0x8f0>)
 80027fe:	f00a f9bf 	bl	800cb80 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002802:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002806:	2300      	movs	r3, #0
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	2300      	movs	r3, #0
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2301      	movs	r3, #1
 8002810:	2100      	movs	r1, #0
 8002812:	2000      	movs	r0, #0
 8002814:	f7fe fd4e 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002818:	f00a feb6 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 800281c:	4b5d      	ldr	r3, [pc, #372]	; (8002994 <MENU_RunningFunction+0x8ec>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f013 fb0c 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002826:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <MENU_RunningFunction+0x8e8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f013 fb07 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002830:	4b56      	ldr	r3, [pc, #344]	; (800298c <MENU_RunningFunction+0x8e4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f013 fb02 	bl	8015e3e <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800283a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800283e:	4857      	ldr	r0, [pc, #348]	; (800299c <MENU_RunningFunction+0x8f4>)
 8002840:	f00c fb12 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d133      	bne.n	80028b2 <MENU_RunningFunction+0x80a>
               {
                  Menu.ButtonCnt++;
 800284a:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <MENU_RunningFunction+0x8d8>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	3301      	adds	r3, #1
 8002850:	4a4b      	ldr	r2, [pc, #300]	; (8002980 <MENU_RunningFunction+0x8d8>)
 8002852:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002854:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <MENU_RunningFunction+0x8dc>)
 8002856:	2200      	movs	r2, #0
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800285a:	e002      	b.n	8002862 <MENU_RunningFunction+0x7ba>
                  {
                     osDelay(100);
 800285c:	2064      	movs	r0, #100	; 0x64
 800285e:	f013 f855 	bl	801590c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002862:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002866:	484d      	ldr	r0, [pc, #308]	; (800299c <MENU_RunningFunction+0x8f4>)
 8002868:	f00c fafe 	bl	800ee68 <HAL_GPIO_ReadPin>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f4      	beq.n	800285c <MENU_RunningFunction+0x7b4>
                  }
                  Menu.ButtonCnt = 0;
 8002872:	4b43      	ldr	r3, [pc, #268]	; (8002980 <MENU_RunningFunction+0x8d8>)
 8002874:	2200      	movs	r2, #0
 8002876:	605a      	str	r2, [r3, #4]
                  Menu.f         = 1;
 8002878:	4b41      	ldr	r3, [pc, #260]	; (8002980 <MENU_RunningFunction+0x8d8>)
 800287a:	2201      	movs	r2, #1
 800287c:	729a      	strb	r2, [r3, #10]
                  osMutexAcquire(RTCMutexHandle, osWaitForever);
 800287e:	4b49      	ldr	r3, [pc, #292]	; (80029a4 <MENU_RunningFunction+0x8fc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f04f 31ff 	mov.w	r1, #4294967295
 8002886:	4618      	mov	r0, r3
 8002888:	f013 fa8e 	bl	8015da8 <osMutexAcquire>
                  while(HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 800288c:	e002      	b.n	8002894 <MENU_RunningFunction+0x7ec>
                  {
                     osDelay(100);
 800288e:	2064      	movs	r0, #100	; 0x64
 8002890:	f013 f83c 	bl	801590c <osDelay>
                  while(HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 8002894:	f107 0320 	add.w	r3, r7, #32
 8002898:	2200      	movs	r2, #0
 800289a:	4619      	mov	r1, r3
 800289c:	4842      	ldr	r0, [pc, #264]	; (80029a8 <MENU_RunningFunction+0x900>)
 800289e:	f00e fab3 	bl	8010e08 <HAL_RTC_SetDate>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f2      	bne.n	800288e <MENU_RunningFunction+0x7e6>
                  }
                  osMutexRelease(RTCMutexHandle);
 80028a8:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <MENU_RunningFunction+0x8fc>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f013 fac6 	bl	8015e3e <osMutexRelease>
               }
            }
            osDelay(50);
 80028b2:	2032      	movs	r0, #50	; 0x32
 80028b4:	f013 f82a 	bl	801590c <osDelay>
         while(Menu.f == 0)
 80028b8:	4b31      	ldr	r3, [pc, #196]	; (8002980 <MENU_RunningFunction+0x8d8>)
 80028ba:	7a9b      	ldrb	r3, [r3, #10]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f43f ae64 	beq.w	800258a <MENU_RunningFunction+0x4e2>
         }
         break;
 80028c2:	f001 b910 	b.w	8003ae6 <MENU_RunningFunction+0x1a3e>
      }
      case MENU_CHOISE_CHART:
      {
         RTC_TimeTypeDef RtcTime;
         RTC_DateTypeDef RtcDate;
         osMutexAcquire(RTCMutexHandle, osWaitForever);
 80028c6:	4b37      	ldr	r3, [pc, #220]	; (80029a4 <MENU_RunningFunction+0x8fc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f04f 31ff 	mov.w	r1, #4294967295
 80028ce:	4618      	mov	r0, r3
 80028d0:	f013 fa6a 	bl	8015da8 <osMutexAcquire>
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80028d4:	f107 030c 	add.w	r3, r7, #12
 80028d8:	2200      	movs	r2, #0
 80028da:	4619      	mov	r1, r3
 80028dc:	4832      	ldr	r0, [pc, #200]	; (80029a8 <MENU_RunningFunction+0x900>)
 80028de:	f00e fa31 	bl	8010d44 <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	2200      	movs	r2, #0
 80028e8:	4619      	mov	r1, r3
 80028ea:	482f      	ldr	r0, [pc, #188]	; (80029a8 <MENU_RunningFunction+0x900>)
 80028ec:	f00e fb14 	bl	8010f18 <HAL_RTC_GetDate>
         osMutexRelease(RTCMutexHandle);
 80028f0:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <MENU_RunningFunction+0x8fc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f013 faa2 	bl	8015e3e <osMutexRelease>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80028fa:	4b24      	ldr	r3, [pc, #144]	; (800298c <MENU_RunningFunction+0x8e4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002902:	4618      	mov	r0, r3
 8002904:	f013 fa50 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002908:	4b21      	ldr	r3, [pc, #132]	; (8002990 <MENU_RunningFunction+0x8e8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f04f 31ff 	mov.w	r1, #4294967295
 8002910:	4618      	mov	r0, r3
 8002912:	f013 fa49 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002916:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <MENU_RunningFunction+0x8ec>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f04f 31ff 	mov.w	r1, #4294967295
 800291e:	4618      	mov	r0, r3
 8002920:	f013 fa42 	bl	8015da8 <osMutexAcquire>
         ssd1306_clear();
 8002924:	f00a fe5c 	bl	800d5e0 <ssd1306_clear>
         sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002928:	7abb      	ldrb	r3, [r7, #10]
 800292a:	461a      	mov	r2, r3
 800292c:	7a7b      	ldrb	r3, [r7, #9]
 800292e:	4619      	mov	r1, r3
 8002930:	7afb      	ldrb	r3, [r7, #11]
 8002932:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	460b      	mov	r3, r1
 800293a:	4917      	ldr	r1, [pc, #92]	; (8002998 <MENU_RunningFunction+0x8f0>)
 800293c:	f00a f920 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002940:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002944:	2300      	movs	r3, #0
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	2300      	movs	r3, #0
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2301      	movs	r3, #1
 800294e:	2100      	movs	r1, #0
 8002950:	2000      	movs	r0, #0
 8002952:	f7fe fcaf 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8002956:	f00a fe17 	bl	800d588 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <MENU_RunningFunction+0x8ec>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f013 fa6d 	bl	8015e3e <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <MENU_RunningFunction+0x8e8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f013 fa68 	bl	8015e3e <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <MENU_RunningFunction+0x8e4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f013 fa63 	bl	8015e3e <osMutexRelease>
         Menu.f = 0;
 8002978:	4b01      	ldr	r3, [pc, #4]	; (8002980 <MENU_RunningFunction+0x8d8>)
 800297a:	2200      	movs	r2, #0
 800297c:	729a      	strb	r2, [r3, #10]
         while(Menu.f == 0)
 800297e:	e18b      	b.n	8002c98 <MENU_RunningFunction+0xbf0>
 8002980:	200002a4 	.word	0x200002a4
 8002984:	40000c00 	.word	0x40000c00
 8002988:	aaaaaaab 	.word	0xaaaaaaab
 800298c:	200040a4 	.word	0x200040a4
 8002990:	200040a8 	.word	0x200040a8
 8002994:	200040ac 	.word	0x200040ac
 8002998:	0801ff54 	.word	0x0801ff54
 800299c:	48000400 	.word	0x48000400
 80029a0:	a57eb503 	.word	0xa57eb503
 80029a4:	200040bc 	.word	0x200040bc
 80029a8:	200041d4 	.word	0x200041d4
         {
            if(Menu.ButtonCnt == 0)
 80029ac:	4ba1      	ldr	r3, [pc, #644]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d16e      	bne.n	8002a92 <MENU_RunningFunction+0x9ea>
            {
               RtcDate.Date = (TIM5->CNT / 4) % 31 + 1;
 80029b4:	4ba0      	ldr	r3, [pc, #640]	; (8002c38 <MENU_RunningFunction+0xb90>)
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	089a      	lsrs	r2, r3, #2
 80029ba:	4ba0      	ldr	r3, [pc, #640]	; (8002c3c <MENU_RunningFunction+0xb94>)
 80029bc:	fba3 1302 	umull	r1, r3, r3, r2
 80029c0:	1ad1      	subs	r1, r2, r3
 80029c2:	0849      	lsrs	r1, r1, #1
 80029c4:	440b      	add	r3, r1
 80029c6:	0919      	lsrs	r1, r3, #4
 80029c8:	460b      	mov	r3, r1
 80029ca:	015b      	lsls	r3, r3, #5
 80029cc:	1a5b      	subs	r3, r3, r1
 80029ce:	1ad1      	subs	r1, r2, r3
 80029d0:	b2cb      	uxtb	r3, r1
 80029d2:	3301      	adds	r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	72bb      	strb	r3, [r7, #10]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80029d8:	4b99      	ldr	r3, [pc, #612]	; (8002c40 <MENU_RunningFunction+0xb98>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f04f 31ff 	mov.w	r1, #4294967295
 80029e0:	4618      	mov	r0, r3
 80029e2:	f013 f9e1 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80029e6:	4b97      	ldr	r3, [pc, #604]	; (8002c44 <MENU_RunningFunction+0xb9c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f04f 31ff 	mov.w	r1, #4294967295
 80029ee:	4618      	mov	r0, r3
 80029f0:	f013 f9da 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80029f4:	4b94      	ldr	r3, [pc, #592]	; (8002c48 <MENU_RunningFunction+0xba0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f04f 31ff 	mov.w	r1, #4294967295
 80029fc:	4618      	mov	r0, r3
 80029fe:	f013 f9d3 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 8002a02:	f00a fded 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002a06:	7abb      	ldrb	r3, [r7, #10]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	7a7b      	ldrb	r3, [r7, #9]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	7afb      	ldrb	r3, [r7, #11]
 8002a10:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	460b      	mov	r3, r1
 8002a18:	498c      	ldr	r1, [pc, #560]	; (8002c4c <MENU_RunningFunction+0xba4>)
 8002a1a:	f00a f8b1 	bl	800cb80 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002a1e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002a22:	2300      	movs	r3, #0
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	2300      	movs	r3, #0
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7fe fc40 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002a34:	f00a fda8 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002a38:	4b83      	ldr	r3, [pc, #524]	; (8002c48 <MENU_RunningFunction+0xba0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f013 f9fe 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002a42:	4b80      	ldr	r3, [pc, #512]	; (8002c44 <MENU_RunningFunction+0xb9c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f013 f9f9 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002a4c:	4b7c      	ldr	r3, [pc, #496]	; (8002c40 <MENU_RunningFunction+0xb98>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f013 f9f4 	bl	8015e3e <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002a56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a5a:	487d      	ldr	r0, [pc, #500]	; (8002c50 <MENU_RunningFunction+0xba8>)
 8002a5c:	f00c fa04 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f040 8115 	bne.w	8002c92 <MENU_RunningFunction+0xbea>
               {
                  Menu.ButtonCnt++;
 8002a68:	4b72      	ldr	r3, [pc, #456]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	4a71      	ldr	r2, [pc, #452]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 8002a70:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002a72:	4b71      	ldr	r3, [pc, #452]	; (8002c38 <MENU_RunningFunction+0xb90>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002a78:	e002      	b.n	8002a80 <MENU_RunningFunction+0x9d8>
                  {
                     osDelay(100);
 8002a7a:	2064      	movs	r0, #100	; 0x64
 8002a7c:	f012 ff46 	bl	801590c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a84:	4872      	ldr	r0, [pc, #456]	; (8002c50 <MENU_RunningFunction+0xba8>)
 8002a86:	f00c f9ef 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f4      	beq.n	8002a7a <MENU_RunningFunction+0x9d2>
 8002a90:	e0ff      	b.n	8002c92 <MENU_RunningFunction+0xbea>
                  }
               }
            }
            else if(Menu.ButtonCnt == 1)
 8002a92:	4b68      	ldr	r3, [pc, #416]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d16c      	bne.n	8002b74 <MENU_RunningFunction+0xacc>
            {
               RtcDate.Month = (TIM5->CNT / 4) % 12 + 1;
 8002a9a:	4b67      	ldr	r3, [pc, #412]	; (8002c38 <MENU_RunningFunction+0xb90>)
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	0899      	lsrs	r1, r3, #2
 8002aa0:	4b6c      	ldr	r3, [pc, #432]	; (8002c54 <MENU_RunningFunction+0xbac>)
 8002aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8002aa6:	08da      	lsrs	r2, r3, #3
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	1aca      	subs	r2, r1, r3
 8002ab2:	b2d3      	uxtb	r3, r2
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	727b      	strb	r3, [r7, #9]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002aba:	4b61      	ldr	r3, [pc, #388]	; (8002c40 <MENU_RunningFunction+0xb98>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f013 f970 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002ac8:	4b5e      	ldr	r3, [pc, #376]	; (8002c44 <MENU_RunningFunction+0xb9c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f013 f969 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002ad6:	4b5c      	ldr	r3, [pc, #368]	; (8002c48 <MENU_RunningFunction+0xba0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f04f 31ff 	mov.w	r1, #4294967295
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f013 f962 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 8002ae4:	f00a fd7c 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002ae8:	7abb      	ldrb	r3, [r7, #10]
 8002aea:	461a      	mov	r2, r3
 8002aec:	7a7b      	ldrb	r3, [r7, #9]
 8002aee:	4619      	mov	r1, r3
 8002af0:	7afb      	ldrb	r3, [r7, #11]
 8002af2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	460b      	mov	r3, r1
 8002afa:	4954      	ldr	r1, [pc, #336]	; (8002c4c <MENU_RunningFunction+0xba4>)
 8002afc:	f00a f840 	bl	800cb80 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002b00:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002b04:	2300      	movs	r3, #0
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	2100      	movs	r1, #0
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7fe fbcf 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002b16:	f00a fd37 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002b1a:	4b4b      	ldr	r3, [pc, #300]	; (8002c48 <MENU_RunningFunction+0xba0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f013 f98d 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002b24:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <MENU_RunningFunction+0xb9c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f013 f988 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002b2e:	4b44      	ldr	r3, [pc, #272]	; (8002c40 <MENU_RunningFunction+0xb98>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f013 f983 	bl	8015e3e <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002b38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b3c:	4844      	ldr	r0, [pc, #272]	; (8002c50 <MENU_RunningFunction+0xba8>)
 8002b3e:	f00c f993 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f040 80a4 	bne.w	8002c92 <MENU_RunningFunction+0xbea>
               {
                  Menu.ButtonCnt++;
 8002b4a:	4b3a      	ldr	r3, [pc, #232]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	4a38      	ldr	r2, [pc, #224]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 8002b52:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002b54:	4b38      	ldr	r3, [pc, #224]	; (8002c38 <MENU_RunningFunction+0xb90>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002b5a:	e002      	b.n	8002b62 <MENU_RunningFunction+0xaba>
                  {
                     osDelay(100);
 8002b5c:	2064      	movs	r0, #100	; 0x64
 8002b5e:	f012 fed5 	bl	801590c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002b62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b66:	483a      	ldr	r0, [pc, #232]	; (8002c50 <MENU_RunningFunction+0xba8>)
 8002b68:	f00c f97e 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f4      	beq.n	8002b5c <MENU_RunningFunction+0xab4>
 8002b72:	e08e      	b.n	8002c92 <MENU_RunningFunction+0xbea>
                  }
               }
            }
            else
            {
               RtcDate.Year = (TIM5->CNT / 4) % 99;
 8002b74:	4b30      	ldr	r3, [pc, #192]	; (8002c38 <MENU_RunningFunction+0xb90>)
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	0899      	lsrs	r1, r3, #2
 8002b7a:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <MENU_RunningFunction+0xbb0>)
 8002b7c:	fba3 2301 	umull	r2, r3, r3, r1
 8002b80:	099a      	lsrs	r2, r3, #6
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	4413      	add	r3, r2
 8002b8c:	1aca      	subs	r2, r1, r3
 8002b8e:	b2d3      	uxtb	r3, r2
 8002b90:	72fb      	strb	r3, [r7, #11]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002b92:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <MENU_RunningFunction+0xb98>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f04f 31ff 	mov.w	r1, #4294967295
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f013 f904 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002ba0:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <MENU_RunningFunction+0xb9c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f013 f8fd 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <MENU_RunningFunction+0xba0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f013 f8f6 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 8002bbc:	f00a fd10 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002bc0:	7abb      	ldrb	r3, [r7, #10]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	7a7b      	ldrb	r3, [r7, #9]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	7afb      	ldrb	r3, [r7, #11]
 8002bca:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	491e      	ldr	r1, [pc, #120]	; (8002c4c <MENU_RunningFunction+0xba4>)
 8002bd4:	f009 ffd4 	bl	800cb80 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002bd8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002bdc:	2300      	movs	r3, #0
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	2300      	movs	r3, #0
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2301      	movs	r3, #1
 8002be6:	2100      	movs	r1, #0
 8002be8:	2000      	movs	r0, #0
 8002bea:	f7fe fb63 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002bee:	f00a fccb 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <MENU_RunningFunction+0xba0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f013 f921 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002bfc:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <MENU_RunningFunction+0xb9c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f013 f91c 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002c06:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <MENU_RunningFunction+0xb98>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f013 f917 	bl	8015e3e <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002c10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c14:	480e      	ldr	r0, [pc, #56]	; (8002c50 <MENU_RunningFunction+0xba8>)
 8002c16:	f00c f927 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d138      	bne.n	8002c92 <MENU_RunningFunction+0xbea>
               {
                  Menu.ButtonCnt++;
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	3301      	adds	r3, #1
 8002c26:	4a03      	ldr	r2, [pc, #12]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 8002c28:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002c2a:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <MENU_RunningFunction+0xb90>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002c30:	e017      	b.n	8002c62 <MENU_RunningFunction+0xbba>
 8002c32:	bf00      	nop
 8002c34:	200002a4 	.word	0x200002a4
 8002c38:	40000c00 	.word	0x40000c00
 8002c3c:	08421085 	.word	0x08421085
 8002c40:	200040a4 	.word	0x200040a4
 8002c44:	200040a8 	.word	0x200040a8
 8002c48:	200040ac 	.word	0x200040ac
 8002c4c:	0801ff54 	.word	0x0801ff54
 8002c50:	48000400 	.word	0x48000400
 8002c54:	aaaaaaab 	.word	0xaaaaaaab
 8002c58:	a57eb503 	.word	0xa57eb503
                  {
                     osDelay(100);
 8002c5c:	2064      	movs	r0, #100	; 0x64
 8002c5e:	f012 fe55 	bl	801590c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002c62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c66:	48c5      	ldr	r0, [pc, #788]	; (8002f7c <MENU_RunningFunction+0xed4>)
 8002c68:	f00c f8fe 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f4      	beq.n	8002c5c <MENU_RunningFunction+0xbb4>
                  }
                  Menu.ButtonCnt       = 0;
 8002c72:	4bc3      	ldr	r3, [pc, #780]	; (8002f80 <MENU_RunningFunction+0xed8>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
                  Menu.f               = 1;
 8002c78:	4bc1      	ldr	r3, [pc, #772]	; (8002f80 <MENU_RunningFunction+0xed8>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	729a      	strb	r2, [r3, #10]
                  QueueChartData.Date  = RtcDate.Date;
 8002c7e:	7abb      	ldrb	r3, [r7, #10]
 8002c80:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                  QueueChartData.Month = RtcDate.Month;
 8002c84:	7a7b      	ldrb	r3, [r7, #9]
 8002c86:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
                  QueueChartData.Year  = RtcDate.Year;
 8002c8a:	7afb      	ldrb	r3, [r7, #11]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
               }
            }
            osDelay(50);
 8002c92:	2032      	movs	r0, #50	; 0x32
 8002c94:	f012 fe3a 	bl	801590c <osDelay>
         while(Menu.f == 0)
 8002c98:	4bb9      	ldr	r3, [pc, #740]	; (8002f80 <MENU_RunningFunction+0xed8>)
 8002c9a:	7a9b      	ldrb	r3, [r3, #10]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f43f ae85 	beq.w	80029ac <MENU_RunningFunction+0x904>
         }

         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002ca2:	4bb8      	ldr	r3, [pc, #736]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8002caa:	4618      	mov	r0, r3
 8002cac:	f013 f87c 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002cb0:	4bb5      	ldr	r3, [pc, #724]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f013 f875 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002cbe:	4bb3      	ldr	r3, [pc, #716]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f013 f86e 	bl	8015da8 <osMutexAcquire>
         ssd1306_clear();
 8002ccc:	f00a fc88 	bl	800d5e0 <ssd1306_clear>
         sprintf(Temp, "Dokonaj Wyboru");
 8002cd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cd4:	49ae      	ldr	r1, [pc, #696]	; (8002f90 <MENU_RunningFunction+0xee8>)
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f009 ff52 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002cdc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9301      	str	r3, [sp, #4]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	2301      	movs	r3, #1
 8002cea:	2100      	movs	r1, #0
 8002cec:	2000      	movs	r0, #0
 8002cee:	f7fe fae1 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8002cf2:	f00a fc49 	bl	800d588 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8002cf6:	4ba5      	ldr	r3, [pc, #660]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f013 f89f 	bl	8015e3e <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8002d00:	4ba1      	ldr	r3, [pc, #644]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f013 f89a 	bl	8015e3e <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8002d0a:	4b9e      	ldr	r3, [pc, #632]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f013 f895 	bl	8015e3e <osMutexRelease>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8002d14:	e002      	b.n	8002d1c <MENU_RunningFunction+0xc74>
         {
            osDelay(100);
 8002d16:	2064      	movs	r0, #100	; 0x64
 8002d18:	f012 fdf8 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8002d1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d20:	4896      	ldr	r0, [pc, #600]	; (8002f7c <MENU_RunningFunction+0xed4>)
 8002d22:	f00c f8a1 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d0f4      	beq.n	8002d16 <MENU_RunningFunction+0xc6e>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002d2c:	e002      	b.n	8002d34 <MENU_RunningFunction+0xc8c>
         {
            osDelay(100);
 8002d2e:	2064      	movs	r0, #100	; 0x64
 8002d30:	f012 fdec 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002d34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d38:	4890      	ldr	r0, [pc, #576]	; (8002f7c <MENU_RunningFunction+0xed4>)
 8002d3a:	f00c f895 	bl	800ee68 <HAL_GPIO_ReadPin>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f4      	beq.n	8002d2e <MENU_RunningFunction+0xc86>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8002d44:	e262      	b.n	800320c <MENU_RunningFunction+0x1164>
         {
            osDelay(100);
 8002d46:	2064      	movs	r0, #100	; 0x64
 8002d48:	f012 fde0 	bl	801590c <osDelay>
            switch((TIM5->CNT / 4) % 9)
 8002d4c:	4b91      	ldr	r3, [pc, #580]	; (8002f94 <MENU_RunningFunction+0xeec>)
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	0899      	lsrs	r1, r3, #2
 8002d52:	4b91      	ldr	r3, [pc, #580]	; (8002f98 <MENU_RunningFunction+0xef0>)
 8002d54:	fba3 2301 	umull	r2, r3, r3, r1
 8002d58:	085a      	lsrs	r2, r3, #1
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4413      	add	r3, r2
 8002d60:	1aca      	subs	r2, r1, r3
 8002d62:	2a08      	cmp	r2, #8
 8002d64:	f200 8252 	bhi.w	800320c <MENU_RunningFunction+0x1164>
 8002d68:	a301      	add	r3, pc, #4	; (adr r3, 8002d70 <MENU_RunningFunction+0xcc8>)
 8002d6a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002d95 	.word	0x08002d95
 8002d74:	08002e0f 	.word	0x08002e0f
 8002d78:	08002e89 	.word	0x08002e89
 8002d7c:	08002f03 	.word	0x08002f03
 8002d80:	08002fad 	.word	0x08002fad
 8002d84:	08003027 	.word	0x08003027
 8002d88:	080030a1 	.word	0x080030a1
 8002d8c:	0800311b 	.word	0x0800311b
 8002d90:	08003195 	.word	0x08003195
            {
               case INTERNAL_PM1:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002d94:	4b7b      	ldr	r3, [pc, #492]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f04f 31ff 	mov.w	r1, #4294967295
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f013 f803 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002da2:	4b79      	ldr	r3, [pc, #484]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f04f 31ff 	mov.w	r1, #4294967295
 8002daa:	4618      	mov	r0, r3
 8002dac:	f012 fffc 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002db0:	4b76      	ldr	r3, [pc, #472]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295
 8002db8:	4618      	mov	r0, r3
 8002dba:	f012 fff5 	bl	8015da8 <osMutexAcquire>
                  ssd1306_clear();
 8002dbe:	f00a fc0f 	bl	800d5e0 <ssd1306_clear>
                  sprintf(Temp, "INTERNAL_PM1");
 8002dc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002dc6:	4975      	ldr	r1, [pc, #468]	; (8002f9c <MENU_RunningFunction+0xef4>)
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f009 fed9 	bl	800cb80 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002dce:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2301      	movs	r3, #1
 8002ddc:	2100      	movs	r1, #0
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7fe fa68 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002de4:	f00a fbd0 	bl	800d588 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002de8:	4b68      	ldr	r3, [pc, #416]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f013 f826 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002df2:	4b65      	ldr	r3, [pc, #404]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f013 f821 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002dfc:	4b61      	ldr	r3, [pc, #388]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f013 f81c 	bl	8015e3e <osMutexRelease>
                  QueueChartData.ChartType = INTERNAL_PM1;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 8002e0c:	e1fe      	b.n	800320c <MENU_RunningFunction+0x1164>
               }
               case INTERNAL_PM25:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002e0e:	4b5d      	ldr	r3, [pc, #372]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f04f 31ff 	mov.w	r1, #4294967295
 8002e16:	4618      	mov	r0, r3
 8002e18:	f012 ffc6 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002e1c:	4b5a      	ldr	r3, [pc, #360]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f04f 31ff 	mov.w	r1, #4294967295
 8002e24:	4618      	mov	r0, r3
 8002e26:	f012 ffbf 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002e2a:	4b58      	ldr	r3, [pc, #352]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8002e32:	4618      	mov	r0, r3
 8002e34:	f012 ffb8 	bl	8015da8 <osMutexAcquire>
                  ssd1306_clear();
 8002e38:	f00a fbd2 	bl	800d5e0 <ssd1306_clear>
                  sprintf(Temp, "INTERNAL_PM25");
 8002e3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e40:	4957      	ldr	r1, [pc, #348]	; (8002fa0 <MENU_RunningFunction+0xef8>)
 8002e42:	4618      	mov	r0, r3
 8002e44:	f009 fe9c 	bl	800cb80 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002e48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	2300      	movs	r3, #0
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2301      	movs	r3, #1
 8002e56:	2100      	movs	r1, #0
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7fe fa2b 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002e5e:	f00a fb93 	bl	800d588 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002e62:	4b4a      	ldr	r3, [pc, #296]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f012 ffe9 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002e6c:	4b46      	ldr	r3, [pc, #280]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f012 ffe4 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002e76:	4b43      	ldr	r3, [pc, #268]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f012 ffdf 	bl	8015e3e <osMutexRelease>
                  QueueChartData.ChartType = INTERNAL_PM25;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 8002e86:	e1c1      	b.n	800320c <MENU_RunningFunction+0x1164>
               }
               case INTERNAL_PM10:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002e88:	4b3e      	ldr	r3, [pc, #248]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e90:	4618      	mov	r0, r3
 8002e92:	f012 ff89 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002e96:	4b3c      	ldr	r3, [pc, #240]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f04f 31ff 	mov.w	r1, #4294967295
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f012 ff82 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002ea4:	4b39      	ldr	r3, [pc, #228]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eac:	4618      	mov	r0, r3
 8002eae:	f012 ff7b 	bl	8015da8 <osMutexAcquire>
                  ssd1306_clear();
 8002eb2:	f00a fb95 	bl	800d5e0 <ssd1306_clear>
                  sprintf(Temp, "INTERNAL_PM10");
 8002eb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002eba:	493a      	ldr	r1, [pc, #232]	; (8002fa4 <MENU_RunningFunction+0xefc>)
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f009 fe5f 	bl	800cb80 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002ec2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2301      	movs	r3, #1
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7fe f9ee 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002ed8:	f00a fb56 	bl	800d588 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002edc:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f012 ffac 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002ee6:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f012 ffa7 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002ef0:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f012 ffa2 	bl	8015e3e <osMutexRelease>
                  QueueChartData.ChartType = INTERNAL_PM10;
 8002efa:	2302      	movs	r3, #2
 8002efc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 8002f00:	e184      	b.n	800320c <MENU_RunningFunction+0x1164>
               }
               case EXTERNAL_PM1:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f04f 31ff 	mov.w	r1, #4294967295
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f012 ff4c 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002f10:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f04f 31ff 	mov.w	r1, #4294967295
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f012 ff45 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f04f 31ff 	mov.w	r1, #4294967295
 8002f26:	4618      	mov	r0, r3
 8002f28:	f012 ff3e 	bl	8015da8 <osMutexAcquire>
                  ssd1306_clear();
 8002f2c:	f00a fb58 	bl	800d5e0 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_PM1");
 8002f30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f34:	491c      	ldr	r1, [pc, #112]	; (8002fa8 <MENU_RunningFunction+0xf00>)
 8002f36:	4618      	mov	r0, r3
 8002f38:	f009 fe22 	bl	800cb80 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002f3c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002f40:	2300      	movs	r3, #0
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	2300      	movs	r3, #0
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2301      	movs	r3, #1
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7fe f9b1 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002f52:	f00a fb19 	bl	800d588 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002f56:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f012 ff6f 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f012 ff6a 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f012 ff65 	bl	8015e3e <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_PM1;
 8002f74:	2303      	movs	r3, #3
 8002f76:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 8002f7a:	e147      	b.n	800320c <MENU_RunningFunction+0x1164>
 8002f7c:	48000400 	.word	0x48000400
 8002f80:	200002a4 	.word	0x200002a4
 8002f84:	200040a4 	.word	0x200040a4
 8002f88:	200040a8 	.word	0x200040a8
 8002f8c:	200040ac 	.word	0x200040ac
 8002f90:	0801ff68 	.word	0x0801ff68
 8002f94:	40000c00 	.word	0x40000c00
 8002f98:	38e38e39 	.word	0x38e38e39
 8002f9c:	0801ff78 	.word	0x0801ff78
 8002fa0:	0801ff88 	.word	0x0801ff88
 8002fa4:	0801ff98 	.word	0x0801ff98
 8002fa8:	0801ffa8 	.word	0x0801ffa8
               }
               case EXTERNAL_PM25:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002fac:	4ba5      	ldr	r3, [pc, #660]	; (8003244 <MENU_RunningFunction+0x119c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f012 fef7 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002fba:	4ba3      	ldr	r3, [pc, #652]	; (8003248 <MENU_RunningFunction+0x11a0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f012 fef0 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002fc8:	4ba0      	ldr	r3, [pc, #640]	; (800324c <MENU_RunningFunction+0x11a4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f012 fee9 	bl	8015da8 <osMutexAcquire>
                  ssd1306_clear();
 8002fd6:	f00a fb03 	bl	800d5e0 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_PM25");
 8002fda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fde:	499c      	ldr	r1, [pc, #624]	; (8003250 <MENU_RunningFunction+0x11a8>)
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f009 fdcd 	bl	800cb80 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002fe6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002fea:	2300      	movs	r3, #0
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f7fe f95c 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002ffc:	f00a fac4 	bl	800d588 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8003000:	4b92      	ldr	r3, [pc, #584]	; (800324c <MENU_RunningFunction+0x11a4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f012 ff1a 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 800300a:	4b8f      	ldr	r3, [pc, #572]	; (8003248 <MENU_RunningFunction+0x11a0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f012 ff15 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8003014:	4b8b      	ldr	r3, [pc, #556]	; (8003244 <MENU_RunningFunction+0x119c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f012 ff10 	bl	8015e3e <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_PM25;
 800301e:	2304      	movs	r3, #4
 8003020:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 8003024:	e0f2      	b.n	800320c <MENU_RunningFunction+0x1164>
               }
               case EXTERNAL_PM10:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8003026:	4b87      	ldr	r3, [pc, #540]	; (8003244 <MENU_RunningFunction+0x119c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f04f 31ff 	mov.w	r1, #4294967295
 800302e:	4618      	mov	r0, r3
 8003030:	f012 feba 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8003034:	4b84      	ldr	r3, [pc, #528]	; (8003248 <MENU_RunningFunction+0x11a0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f04f 31ff 	mov.w	r1, #4294967295
 800303c:	4618      	mov	r0, r3
 800303e:	f012 feb3 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003042:	4b82      	ldr	r3, [pc, #520]	; (800324c <MENU_RunningFunction+0x11a4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f04f 31ff 	mov.w	r1, #4294967295
 800304a:	4618      	mov	r0, r3
 800304c:	f012 feac 	bl	8015da8 <osMutexAcquire>
                  ssd1306_clear();
 8003050:	f00a fac6 	bl	800d5e0 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_PM10");
 8003054:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003058:	497e      	ldr	r1, [pc, #504]	; (8003254 <MENU_RunningFunction+0x11ac>)
 800305a:	4618      	mov	r0, r3
 800305c:	f009 fd90 	bl	800cb80 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8003060:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003064:	2300      	movs	r3, #0
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	2300      	movs	r3, #0
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2301      	movs	r3, #1
 800306e:	2100      	movs	r1, #0
 8003070:	2000      	movs	r0, #0
 8003072:	f7fe f91f 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8003076:	f00a fa87 	bl	800d588 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 800307a:	4b74      	ldr	r3, [pc, #464]	; (800324c <MENU_RunningFunction+0x11a4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f012 fedd 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8003084:	4b70      	ldr	r3, [pc, #448]	; (8003248 <MENU_RunningFunction+0x11a0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f012 fed8 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 800308e:	4b6d      	ldr	r3, [pc, #436]	; (8003244 <MENU_RunningFunction+0x119c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f012 fed3 	bl	8015e3e <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_PM10;
 8003098:	2305      	movs	r3, #5
 800309a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 800309e:	e0b5      	b.n	800320c <MENU_RunningFunction+0x1164>
               }
               case PRESSURE:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80030a0:	4b68      	ldr	r3, [pc, #416]	; (8003244 <MENU_RunningFunction+0x119c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f04f 31ff 	mov.w	r1, #4294967295
 80030a8:	4618      	mov	r0, r3
 80030aa:	f012 fe7d 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80030ae:	4b66      	ldr	r3, [pc, #408]	; (8003248 <MENU_RunningFunction+0x11a0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f04f 31ff 	mov.w	r1, #4294967295
 80030b6:	4618      	mov	r0, r3
 80030b8:	f012 fe76 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80030bc:	4b63      	ldr	r3, [pc, #396]	; (800324c <MENU_RunningFunction+0x11a4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295
 80030c4:	4618      	mov	r0, r3
 80030c6:	f012 fe6f 	bl	8015da8 <osMutexAcquire>
                  ssd1306_clear();
 80030ca:	f00a fa89 	bl	800d5e0 <ssd1306_clear>
                  sprintf(Temp, "PRESSURE");
 80030ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030d2:	4961      	ldr	r1, [pc, #388]	; (8003258 <MENU_RunningFunction+0x11b0>)
 80030d4:	4618      	mov	r0, r3
 80030d6:	f009 fd53 	bl	800cb80 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80030da:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80030de:	2300      	movs	r3, #0
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	2300      	movs	r3, #0
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	2301      	movs	r3, #1
 80030e8:	2100      	movs	r1, #0
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fe f8e2 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 80030f0:	f00a fa4a 	bl	800d588 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 80030f4:	4b55      	ldr	r3, [pc, #340]	; (800324c <MENU_RunningFunction+0x11a4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f012 fea0 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 80030fe:	4b52      	ldr	r3, [pc, #328]	; (8003248 <MENU_RunningFunction+0x11a0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f012 fe9b 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8003108:	4b4e      	ldr	r3, [pc, #312]	; (8003244 <MENU_RunningFunction+0x119c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f012 fe96 	bl	8015e3e <osMutexRelease>
                  QueueChartData.ChartType = PRESSURE;
 8003112:	2306      	movs	r3, #6
 8003114:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 8003118:	e078      	b.n	800320c <MENU_RunningFunction+0x1164>
               }
               case EXTERNAL_TEMPERATURE:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800311a:	4b4a      	ldr	r3, [pc, #296]	; (8003244 <MENU_RunningFunction+0x119c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f04f 31ff 	mov.w	r1, #4294967295
 8003122:	4618      	mov	r0, r3
 8003124:	f012 fe40 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8003128:	4b47      	ldr	r3, [pc, #284]	; (8003248 <MENU_RunningFunction+0x11a0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	4618      	mov	r0, r3
 8003132:	f012 fe39 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003136:	4b45      	ldr	r3, [pc, #276]	; (800324c <MENU_RunningFunction+0x11a4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f04f 31ff 	mov.w	r1, #4294967295
 800313e:	4618      	mov	r0, r3
 8003140:	f012 fe32 	bl	8015da8 <osMutexAcquire>
                  ssd1306_clear();
 8003144:	f00a fa4c 	bl	800d5e0 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_TEMPERATURE");
 8003148:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800314c:	4943      	ldr	r1, [pc, #268]	; (800325c <MENU_RunningFunction+0x11b4>)
 800314e:	4618      	mov	r0, r3
 8003150:	f009 fd16 	bl	800cb80 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8003154:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003158:	2300      	movs	r3, #0
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	2300      	movs	r3, #0
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2301      	movs	r3, #1
 8003162:	2100      	movs	r1, #0
 8003164:	2000      	movs	r0, #0
 8003166:	f7fe f8a5 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 800316a:	f00a fa0d 	bl	800d588 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 800316e:	4b37      	ldr	r3, [pc, #220]	; (800324c <MENU_RunningFunction+0x11a4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f012 fe63 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8003178:	4b33      	ldr	r3, [pc, #204]	; (8003248 <MENU_RunningFunction+0x11a0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f012 fe5e 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8003182:	4b30      	ldr	r3, [pc, #192]	; (8003244 <MENU_RunningFunction+0x119c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f012 fe59 	bl	8015e3e <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_TEMPERATURE;
 800318c:	2307      	movs	r3, #7
 800318e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 8003192:	e03b      	b.n	800320c <MENU_RunningFunction+0x1164>
               }
               case EXTERNAL_HUMIDITY:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8003194:	4b2b      	ldr	r3, [pc, #172]	; (8003244 <MENU_RunningFunction+0x119c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f04f 31ff 	mov.w	r1, #4294967295
 800319c:	4618      	mov	r0, r3
 800319e:	f012 fe03 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80031a2:	4b29      	ldr	r3, [pc, #164]	; (8003248 <MENU_RunningFunction+0x11a0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f04f 31ff 	mov.w	r1, #4294967295
 80031aa:	4618      	mov	r0, r3
 80031ac:	f012 fdfc 	bl	8015da8 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80031b0:	4b26      	ldr	r3, [pc, #152]	; (800324c <MENU_RunningFunction+0x11a4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f04f 31ff 	mov.w	r1, #4294967295
 80031b8:	4618      	mov	r0, r3
 80031ba:	f012 fdf5 	bl	8015da8 <osMutexAcquire>
                  ssd1306_clear();
 80031be:	f00a fa0f 	bl	800d5e0 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_HUMIDITY");
 80031c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031c6:	4926      	ldr	r1, [pc, #152]	; (8003260 <MENU_RunningFunction+0x11b8>)
 80031c8:	4618      	mov	r0, r3
 80031ca:	f009 fcd9 	bl	800cb80 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80031ce:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80031d2:	2300      	movs	r3, #0
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	2300      	movs	r3, #0
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2301      	movs	r3, #1
 80031dc:	2100      	movs	r1, #0
 80031de:	2000      	movs	r0, #0
 80031e0:	f7fe f868 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 80031e4:	f00a f9d0 	bl	800d588 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 80031e8:	4b18      	ldr	r3, [pc, #96]	; (800324c <MENU_RunningFunction+0x11a4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f012 fe26 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 80031f2:	4b15      	ldr	r3, [pc, #84]	; (8003248 <MENU_RunningFunction+0x11a0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f012 fe21 	bl	8015e3e <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <MENU_RunningFunction+0x119c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f012 fe1c 	bl	8015e3e <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_HUMIDITY;
 8003206:	2308      	movs	r3, #8
 8003208:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800320c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003210:	4814      	ldr	r0, [pc, #80]	; (8003264 <MENU_RunningFunction+0x11bc>)
 8003212:	f00b fe29 	bl	800ee68 <HAL_GPIO_ReadPin>
 8003216:	4603      	mov	r3, r0
 8003218:	2b01      	cmp	r3, #1
 800321a:	f43f ad94 	beq.w	8002d46 <MENU_RunningFunction+0xc9e>
               }
            }
         }
         osDelay(50);
 800321e:	2032      	movs	r0, #50	; 0x32
 8003220:	f012 fb74 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003224:	e002      	b.n	800322c <MENU_RunningFunction+0x1184>
         {
            osDelay(100);
 8003226:	2064      	movs	r0, #100	; 0x64
 8003228:	f012 fb70 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800322c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003230:	480c      	ldr	r0, [pc, #48]	; (8003264 <MENU_RunningFunction+0x11bc>)
 8003232:	f00b fe19 	bl	800ee68 <HAL_GPIO_ReadPin>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f4      	beq.n	8003226 <MENU_RunningFunction+0x117e>
         }
         TIM5->CNT = 0;
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <MENU_RunningFunction+0x11c0>)
 800323e:	2200      	movs	r2, #0
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8003242:	e0e8      	b.n	8003416 <MENU_RunningFunction+0x136e>
 8003244:	200040a4 	.word	0x200040a4
 8003248:	200040a8 	.word	0x200040a8
 800324c:	200040ac 	.word	0x200040ac
 8003250:	0801ffb8 	.word	0x0801ffb8
 8003254:	0801ffc8 	.word	0x0801ffc8
 8003258:	0801ffd8 	.word	0x0801ffd8
 800325c:	0801ffe4 	.word	0x0801ffe4
 8003260:	0801fffc 	.word	0x0801fffc
 8003264:	48000400 	.word	0x48000400
 8003268:	40000c00 	.word	0x40000c00
         {
            if((TIM5->CNT / 4) % 2 == 0)
 800326c:	4bb6      	ldr	r3, [pc, #728]	; (8003548 <MENU_RunningFunction+0x14a0>)
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d165      	bne.n	8003346 <MENU_RunningFunction+0x129e>
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800327a:	4bb4      	ldr	r3, [pc, #720]	; (800354c <MENU_RunningFunction+0x14a4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f04f 31ff 	mov.w	r1, #4294967295
 8003282:	4618      	mov	r0, r3
 8003284:	f012 fd90 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8003288:	4bb1      	ldr	r3, [pc, #708]	; (8003550 <MENU_RunningFunction+0x14a8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f04f 31ff 	mov.w	r1, #4294967295
 8003290:	4618      	mov	r0, r3
 8003292:	f012 fd89 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003296:	4baf      	ldr	r3, [pc, #700]	; (8003554 <MENU_RunningFunction+0x14ac>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f04f 31ff 	mov.w	r1, #4294967295
 800329e:	4618      	mov	r0, r3
 80032a0:	f012 fd82 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 80032a4:	f00a f99c 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "WYMAGA POTWIERDZENIA");
 80032a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032ac:	49aa      	ldr	r1, [pc, #680]	; (8003558 <MENU_RunningFunction+0x14b0>)
 80032ae:	4618      	mov	r0, r3
 80032b0:	f009 fc66 	bl	800cb80 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80032b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80032b8:	2300      	movs	r3, #0
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	2300      	movs	r3, #0
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	2301      	movs	r3, #1
 80032c2:	2100      	movs	r1, #0
 80032c4:	2000      	movs	r0, #0
 80032c6:	f7fd fff5 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "NIE");
 80032ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032ce:	49a3      	ldr	r1, [pc, #652]	; (800355c <MENU_RunningFunction+0x14b4>)
 80032d0:	4618      	mov	r0, r3
 80032d2:	f009 fc55 	bl	800cb80 <sprintf_>
               GFX_DrawFillRectangle(5, 25, 25, 18, WHITE, OLED);
 80032d6:	2300      	movs	r3, #0
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	2301      	movs	r3, #1
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2312      	movs	r3, #18
 80032e0:	2219      	movs	r2, #25
 80032e2:	2119      	movs	r1, #25
 80032e4:	2005      	movs	r0, #5
 80032e6:	f7fe f956 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(10, 30, Temp, BLACK, 1, OLED);
 80032ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80032ee:	2300      	movs	r3, #0
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	2301      	movs	r3, #1
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	2300      	movs	r3, #0
 80032f8:	211e      	movs	r1, #30
 80032fa:	200a      	movs	r0, #10
 80032fc:	f7fd ffda 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 8003300:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003304:	4996      	ldr	r1, [pc, #600]	; (8003560 <MENU_RunningFunction+0x14b8>)
 8003306:	4618      	mov	r0, r3
 8003308:	f009 fc3a 	bl	800cb80 <sprintf_>
               GFX_DrawString(100, 30, Temp, WHITE, 0, OLED);
 800330c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003310:	2300      	movs	r3, #0
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	2300      	movs	r3, #0
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	2301      	movs	r3, #1
 800331a:	211e      	movs	r1, #30
 800331c:	2064      	movs	r0, #100	; 0x64
 800331e:	f7fd ffc9 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8003322:	f00a f931 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8003326:	4b8b      	ldr	r3, [pc, #556]	; (8003554 <MENU_RunningFunction+0x14ac>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f012 fd87 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8003330:	4b87      	ldr	r3, [pc, #540]	; (8003550 <MENU_RunningFunction+0x14a8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f012 fd82 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 800333a:	4b84      	ldr	r3, [pc, #528]	; (800354c <MENU_RunningFunction+0x14a4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f012 fd7d 	bl	8015e3e <osMutexRelease>
 8003344:	e064      	b.n	8003410 <MENU_RunningFunction+0x1368>
            }
            else
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8003346:	4b81      	ldr	r3, [pc, #516]	; (800354c <MENU_RunningFunction+0x14a4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f04f 31ff 	mov.w	r1, #4294967295
 800334e:	4618      	mov	r0, r3
 8003350:	f012 fd2a 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8003354:	4b7e      	ldr	r3, [pc, #504]	; (8003550 <MENU_RunningFunction+0x14a8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f04f 31ff 	mov.w	r1, #4294967295
 800335c:	4618      	mov	r0, r3
 800335e:	f012 fd23 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003362:	4b7c      	ldr	r3, [pc, #496]	; (8003554 <MENU_RunningFunction+0x14ac>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f04f 31ff 	mov.w	r1, #4294967295
 800336a:	4618      	mov	r0, r3
 800336c:	f012 fd1c 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 8003370:	f00a f936 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "WYMAGA POTWIERDZENIA");
 8003374:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003378:	4977      	ldr	r1, [pc, #476]	; (8003558 <MENU_RunningFunction+0x14b0>)
 800337a:	4618      	mov	r0, r3
 800337c:	f009 fc00 	bl	800cb80 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8003380:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003384:	2300      	movs	r3, #0
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	2300      	movs	r3, #0
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2301      	movs	r3, #1
 800338e:	2100      	movs	r1, #0
 8003390:	2000      	movs	r0, #0
 8003392:	f7fd ff8f 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "NIE");
 8003396:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800339a:	4970      	ldr	r1, [pc, #448]	; (800355c <MENU_RunningFunction+0x14b4>)
 800339c:	4618      	mov	r0, r3
 800339e:	f009 fbef 	bl	800cb80 <sprintf_>
               GFX_DrawString(10, 30, Temp, WHITE, 0, OLED);
 80033a2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80033a6:	2300      	movs	r3, #0
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	2300      	movs	r3, #0
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	2301      	movs	r3, #1
 80033b0:	211e      	movs	r1, #30
 80033b2:	200a      	movs	r0, #10
 80033b4:	f7fd ff7e 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 80033b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033bc:	4968      	ldr	r1, [pc, #416]	; (8003560 <MENU_RunningFunction+0x14b8>)
 80033be:	4618      	mov	r0, r3
 80033c0:	f009 fbde 	bl	800cb80 <sprintf_>
               GFX_DrawFillRectangle(95, 25, 25, 18, WHITE, OLED);
 80033c4:	2300      	movs	r3, #0
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	2301      	movs	r3, #1
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	2312      	movs	r3, #18
 80033ce:	2219      	movs	r2, #25
 80033d0:	2119      	movs	r1, #25
 80033d2:	205f      	movs	r0, #95	; 0x5f
 80033d4:	f7fe f8df 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(100, 30, Temp, BLACK, 1, OLED);
 80033d8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80033dc:	2300      	movs	r3, #0
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	2301      	movs	r3, #1
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	2300      	movs	r3, #0
 80033e6:	211e      	movs	r1, #30
 80033e8:	2064      	movs	r0, #100	; 0x64
 80033ea:	f7fd ff63 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 80033ee:	f00a f8cb 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 80033f2:	4b58      	ldr	r3, [pc, #352]	; (8003554 <MENU_RunningFunction+0x14ac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f012 fd21 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 80033fc:	4b54      	ldr	r3, [pc, #336]	; (8003550 <MENU_RunningFunction+0x14a8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f012 fd1c 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8003406:	4b51      	ldr	r3, [pc, #324]	; (800354c <MENU_RunningFunction+0x14a4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f012 fd17 	bl	8015e3e <osMutexRelease>
            }
            osDelay(100);
 8003410:	2064      	movs	r0, #100	; 0x64
 8003412:	f012 fa7b 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8003416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800341a:	4852      	ldr	r0, [pc, #328]	; (8003564 <MENU_RunningFunction+0x14bc>)
 800341c:	f00b fd24 	bl	800ee68 <HAL_GPIO_ReadPin>
 8003420:	4603      	mov	r3, r0
 8003422:	2b01      	cmp	r3, #1
 8003424:	f43f af22 	beq.w	800326c <MENU_RunningFunction+0x11c4>
         }

         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003428:	e002      	b.n	8003430 <MENU_RunningFunction+0x1388>
         {
            osDelay(100);
 800342a:	2064      	movs	r0, #100	; 0x64
 800342c:	f012 fa6e 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003434:	484b      	ldr	r0, [pc, #300]	; (8003564 <MENU_RunningFunction+0x14bc>)
 8003436:	f00b fd17 	bl	800ee68 <HAL_GPIO_ReadPin>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f4      	beq.n	800342a <MENU_RunningFunction+0x1382>
         }
         if((TIM5->CNT / 4) % 2 == 1)
 8003440:	4b41      	ldr	r3, [pc, #260]	; (8003548 <MENU_RunningFunction+0x14a0>)
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	f040 8346 	bne.w	8003adc <MENU_RunningFunction+0x1a34>
         {
            osMessageQueuePut(ChartQueueHandle, &QueueChartData, 0, osWaitForever);
 8003450:	4b45      	ldr	r3, [pc, #276]	; (8003568 <MENU_RunningFunction+0x14c0>)
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003458:	f04f 33ff 	mov.w	r3, #4294967295
 800345c:	2200      	movs	r2, #0
 800345e:	f012 fd9f 	bl	8015fa0 <osMessageQueuePut>
         }
         break;
 8003462:	e33b      	b.n	8003adc <MENU_RunningFunction+0x1a34>
      }

      case MENU_CHOISE_CLEAR_EXTERNAL_MEMORY:
      {
         TIM5->CNT = 0;
 8003464:	4b38      	ldr	r3, [pc, #224]	; (8003548 <MENU_RunningFunction+0x14a0>)
 8003466:	2200      	movs	r2, #0
 8003468:	625a      	str	r2, [r3, #36]	; 0x24
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800346a:	e0e7      	b.n	800363c <MENU_RunningFunction+0x1594>
         {
            if((TIM5->CNT / 4) % 2 == 0)
 800346c:	4b36      	ldr	r3, [pc, #216]	; (8003548 <MENU_RunningFunction+0x14a0>)
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	089b      	lsrs	r3, r3, #2
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d178      	bne.n	800356c <MENU_RunningFunction+0x14c4>
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800347a:	4b34      	ldr	r3, [pc, #208]	; (800354c <MENU_RunningFunction+0x14a4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f04f 31ff 	mov.w	r1, #4294967295
 8003482:	4618      	mov	r0, r3
 8003484:	f012 fc90 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8003488:	4b31      	ldr	r3, [pc, #196]	; (8003550 <MENU_RunningFunction+0x14a8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f04f 31ff 	mov.w	r1, #4294967295
 8003490:	4618      	mov	r0, r3
 8003492:	f012 fc89 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003496:	4b2f      	ldr	r3, [pc, #188]	; (8003554 <MENU_RunningFunction+0x14ac>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f04f 31ff 	mov.w	r1, #4294967295
 800349e:	4618      	mov	r0, r3
 80034a0:	f012 fc82 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 80034a4:	f00a f89c 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "WYMAGA POTWIERDZENIA");
 80034a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034ac:	492a      	ldr	r1, [pc, #168]	; (8003558 <MENU_RunningFunction+0x14b0>)
 80034ae:	4618      	mov	r0, r3
 80034b0:	f009 fb66 	bl	800cb80 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80034b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80034b8:	2300      	movs	r3, #0
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2300      	movs	r3, #0
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2301      	movs	r3, #1
 80034c2:	2100      	movs	r1, #0
 80034c4:	2000      	movs	r0, #0
 80034c6:	f7fd fef5 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "NIE");
 80034ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034ce:	4923      	ldr	r1, [pc, #140]	; (800355c <MENU_RunningFunction+0x14b4>)
 80034d0:	4618      	mov	r0, r3
 80034d2:	f009 fb55 	bl	800cb80 <sprintf_>
               GFX_DrawFillRectangle(5, 25, 25, 18, WHITE, OLED);
 80034d6:	2300      	movs	r3, #0
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	2301      	movs	r3, #1
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2312      	movs	r3, #18
 80034e0:	2219      	movs	r2, #25
 80034e2:	2119      	movs	r1, #25
 80034e4:	2005      	movs	r0, #5
 80034e6:	f7fe f856 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(10, 30, Temp, BLACK, 1, OLED);
 80034ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80034ee:	2300      	movs	r3, #0
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	2301      	movs	r3, #1
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	2300      	movs	r3, #0
 80034f8:	211e      	movs	r1, #30
 80034fa:	200a      	movs	r0, #10
 80034fc:	f7fd feda 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 8003500:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003504:	4916      	ldr	r1, [pc, #88]	; (8003560 <MENU_RunningFunction+0x14b8>)
 8003506:	4618      	mov	r0, r3
 8003508:	f009 fb3a 	bl	800cb80 <sprintf_>
               GFX_DrawString(100, 30, Temp, WHITE, 0, OLED);
 800350c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003510:	2300      	movs	r3, #0
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	2300      	movs	r3, #0
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	2301      	movs	r3, #1
 800351a:	211e      	movs	r1, #30
 800351c:	2064      	movs	r0, #100	; 0x64
 800351e:	f7fd fec9 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8003522:	f00a f831 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8003526:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <MENU_RunningFunction+0x14ac>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f012 fc87 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8003530:	4b07      	ldr	r3, [pc, #28]	; (8003550 <MENU_RunningFunction+0x14a8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f012 fc82 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 800353a:	4b04      	ldr	r3, [pc, #16]	; (800354c <MENU_RunningFunction+0x14a4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f012 fc7d 	bl	8015e3e <osMutexRelease>
 8003544:	e077      	b.n	8003636 <MENU_RunningFunction+0x158e>
 8003546:	bf00      	nop
 8003548:	40000c00 	.word	0x40000c00
 800354c:	200040a4 	.word	0x200040a4
 8003550:	200040a8 	.word	0x200040a8
 8003554:	200040ac 	.word	0x200040ac
 8003558:	0801ff00 	.word	0x0801ff00
 800355c:	08020010 	.word	0x08020010
 8003560:	08020014 	.word	0x08020014
 8003564:	48000400 	.word	0x48000400
 8003568:	20004080 	.word	0x20004080
            }
            else
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800356c:	4bc7      	ldr	r3, [pc, #796]	; (800388c <MENU_RunningFunction+0x17e4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f04f 31ff 	mov.w	r1, #4294967295
 8003574:	4618      	mov	r0, r3
 8003576:	f012 fc17 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800357a:	4bc5      	ldr	r3, [pc, #788]	; (8003890 <MENU_RunningFunction+0x17e8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f04f 31ff 	mov.w	r1, #4294967295
 8003582:	4618      	mov	r0, r3
 8003584:	f012 fc10 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003588:	4bc2      	ldr	r3, [pc, #776]	; (8003894 <MENU_RunningFunction+0x17ec>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f04f 31ff 	mov.w	r1, #4294967295
 8003590:	4618      	mov	r0, r3
 8003592:	f012 fc09 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 8003596:	f00a f823 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "WYMAGA POTWIERDZENIA");
 800359a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800359e:	49be      	ldr	r1, [pc, #760]	; (8003898 <MENU_RunningFunction+0x17f0>)
 80035a0:	4618      	mov	r0, r3
 80035a2:	f009 faed 	bl	800cb80 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80035a6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80035aa:	2300      	movs	r3, #0
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	2300      	movs	r3, #0
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	2301      	movs	r3, #1
 80035b4:	2100      	movs	r1, #0
 80035b6:	2000      	movs	r0, #0
 80035b8:	f7fd fe7c 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "NIE");
 80035bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035c0:	49b6      	ldr	r1, [pc, #728]	; (800389c <MENU_RunningFunction+0x17f4>)
 80035c2:	4618      	mov	r0, r3
 80035c4:	f009 fadc 	bl	800cb80 <sprintf_>
               GFX_DrawString(10, 30, Temp, WHITE, 0, OLED);
 80035c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80035cc:	2300      	movs	r3, #0
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	2300      	movs	r3, #0
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2301      	movs	r3, #1
 80035d6:	211e      	movs	r1, #30
 80035d8:	200a      	movs	r0, #10
 80035da:	f7fd fe6b 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 80035de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035e2:	49af      	ldr	r1, [pc, #700]	; (80038a0 <MENU_RunningFunction+0x17f8>)
 80035e4:	4618      	mov	r0, r3
 80035e6:	f009 facb 	bl	800cb80 <sprintf_>
               GFX_DrawFillRectangle(95, 25, 25, 18, WHITE, OLED);
 80035ea:	2300      	movs	r3, #0
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	2301      	movs	r3, #1
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	2312      	movs	r3, #18
 80035f4:	2219      	movs	r2, #25
 80035f6:	2119      	movs	r1, #25
 80035f8:	205f      	movs	r0, #95	; 0x5f
 80035fa:	f7fd ffcc 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(100, 30, Temp, BLACK, 1, OLED);
 80035fe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003602:	2300      	movs	r3, #0
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	2301      	movs	r3, #1
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	2300      	movs	r3, #0
 800360c:	211e      	movs	r1, #30
 800360e:	2064      	movs	r0, #100	; 0x64
 8003610:	f7fd fe50 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8003614:	f009 ffb8 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8003618:	4b9e      	ldr	r3, [pc, #632]	; (8003894 <MENU_RunningFunction+0x17ec>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f012 fc0e 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8003622:	4b9b      	ldr	r3, [pc, #620]	; (8003890 <MENU_RunningFunction+0x17e8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f012 fc09 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 800362c:	4b97      	ldr	r3, [pc, #604]	; (800388c <MENU_RunningFunction+0x17e4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f012 fc04 	bl	8015e3e <osMutexRelease>
            }
            osDelay(100);
 8003636:	2064      	movs	r0, #100	; 0x64
 8003638:	f012 f968 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800363c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003640:	4898      	ldr	r0, [pc, #608]	; (80038a4 <MENU_RunningFunction+0x17fc>)
 8003642:	f00b fc11 	bl	800ee68 <HAL_GPIO_ReadPin>
 8003646:	4603      	mov	r3, r0
 8003648:	2b01      	cmp	r3, #1
 800364a:	f43f af0f 	beq.w	800346c <MENU_RunningFunction+0x13c4>
         }

         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800364e:	e002      	b.n	8003656 <MENU_RunningFunction+0x15ae>
         {
            osDelay(100);
 8003650:	2064      	movs	r0, #100	; 0x64
 8003652:	f012 f95b 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800365a:	4892      	ldr	r0, [pc, #584]	; (80038a4 <MENU_RunningFunction+0x17fc>)
 800365c:	f00b fc04 	bl	800ee68 <HAL_GPIO_ReadPin>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f4      	beq.n	8003650 <MENU_RunningFunction+0x15a8>
         }
         if((TIM5->CNT / 4) % 2 == 1)
 8003666:	4b90      	ldr	r3, [pc, #576]	; (80038a8 <MENU_RunningFunction+0x1800>)
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	089b      	lsrs	r3, r3, #2
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	f040 8235 	bne.w	8003ae0 <MENU_RunningFunction+0x1a38>
         {
            osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8003676:	4b85      	ldr	r3, [pc, #532]	; (800388c <MENU_RunningFunction+0x17e4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f04f 31ff 	mov.w	r1, #4294967295
 800367e:	4618      	mov	r0, r3
 8003680:	f012 fb92 	bl	8015da8 <osMutexAcquire>
            osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8003684:	4b82      	ldr	r3, [pc, #520]	; (8003890 <MENU_RunningFunction+0x17e8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f04f 31ff 	mov.w	r1, #4294967295
 800368c:	4618      	mov	r0, r3
 800368e:	f012 fb8b 	bl	8015da8 <osMutexAcquire>
            osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003692:	4b80      	ldr	r3, [pc, #512]	; (8003894 <MENU_RunningFunction+0x17ec>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f04f 31ff 	mov.w	r1, #4294967295
 800369a:	4618      	mov	r0, r3
 800369c:	f012 fb84 	bl	8015da8 <osMutexAcquire>
            ssd1306_clear();
 80036a0:	f009 ff9e 	bl	800d5e0 <ssd1306_clear>
            sprintf(Temp, "CZYSZCZENIE!!!");
 80036a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036a8:	4980      	ldr	r1, [pc, #512]	; (80038ac <MENU_RunningFunction+0x1804>)
 80036aa:	4618      	mov	r0, r3
 80036ac:	f009 fa68 	bl	800cb80 <sprintf_>
            GFX_DrawString(0, 0, Temp, BLACK, 1, OLED);
 80036b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80036b4:	2300      	movs	r3, #0
 80036b6:	9301      	str	r3, [sp, #4]
 80036b8:	2301      	movs	r3, #1
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	2300      	movs	r3, #0
 80036be:	2100      	movs	r1, #0
 80036c0:	2000      	movs	r0, #0
 80036c2:	f7fd fdf7 	bl	80012b4 <GFX_DrawString>
            ssd1306_display();
 80036c6:	f009 ff5f 	bl	800d588 <ssd1306_display>
            taskENTER_CRITICAL();
 80036ca:	f015 fe13 	bl	80192f4 <vPortEnterCritical>
            fram_ChipErase(&Fram);
 80036ce:	4878      	ldr	r0, [pc, #480]	; (80038b0 <MENU_RunningFunction+0x1808>)
 80036d0:	f001 fe07 	bl	80052e2 <fram_ChipErase>
            HAL_IWDG_Refresh(&hiwdg);
 80036d4:	4877      	ldr	r0, [pc, #476]	; (80038b4 <MENU_RunningFunction+0x180c>)
 80036d6:	f00b fc60 	bl	800ef9a <HAL_IWDG_Refresh>
            flash_ChipErase(&Flash);
 80036da:	4877      	ldr	r0, [pc, #476]	; (80038b8 <MENU_RunningFunction+0x1810>)
 80036dc:	f001 fd22 	bl	8005124 <flash_ChipErase>
            taskEXIT_CRITICAL();
 80036e0:	f015 fe38 	bl	8019354 <vPortExitCritical>
            HAL_NVIC_SystemReset();
 80036e4:	f00a feed 	bl	800e4c2 <HAL_NVIC_SystemReset>
            osMutexRelease(SPI1MutexHandle);
 80036e8:	4b6a      	ldr	r3, [pc, #424]	; (8003894 <MENU_RunningFunction+0x17ec>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f012 fba6 	bl	8015e3e <osMutexRelease>
            osMutexRelease(SSD1306MutexHandle);
 80036f2:	4b67      	ldr	r3, [pc, #412]	; (8003890 <MENU_RunningFunction+0x17e8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f012 fba1 	bl	8015e3e <osMutexRelease>
            osMutexRelease(ScreensDcMutexHandle);
 80036fc:	4b63      	ldr	r3, [pc, #396]	; (800388c <MENU_RunningFunction+0x17e4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f012 fb9c 	bl	8015e3e <osMutexRelease>
         }
         break;
 8003706:	e1eb      	b.n	8003ae0 <MENU_RunningFunction+0x1a38>
      }
      case MENU_CHOISE_DARK_MODE:
      {
         TIM5->CNT = 0;
 8003708:	4b67      	ldr	r3, [pc, #412]	; (80038a8 <MENU_RunningFunction+0x1800>)
 800370a:	2200      	movs	r2, #0
 800370c:	625a      	str	r2, [r3, #36]	; 0x24
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800370e:	e0b2      	b.n	8003876 <MENU_RunningFunction+0x17ce>
         {
            if((TIM5->CNT / 4) % 2 == 0)
 8003710:	4b65      	ldr	r3, [pc, #404]	; (80038a8 <MENU_RunningFunction+0x1800>)
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d154      	bne.n	80037c8 <MENU_RunningFunction+0x1720>
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800371e:	4b5b      	ldr	r3, [pc, #364]	; (800388c <MENU_RunningFunction+0x17e4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f04f 31ff 	mov.w	r1, #4294967295
 8003726:	4618      	mov	r0, r3
 8003728:	f012 fb3e 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800372c:	4b58      	ldr	r3, [pc, #352]	; (8003890 <MENU_RunningFunction+0x17e8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f04f 31ff 	mov.w	r1, #4294967295
 8003734:	4618      	mov	r0, r3
 8003736:	f012 fb37 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800373a:	4b56      	ldr	r3, [pc, #344]	; (8003894 <MENU_RunningFunction+0x17ec>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f04f 31ff 	mov.w	r1, #4294967295
 8003742:	4618      	mov	r0, r3
 8003744:	f012 fb30 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 8003748:	f009 ff4a 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "OFF");
 800374c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003750:	495a      	ldr	r1, [pc, #360]	; (80038bc <MENU_RunningFunction+0x1814>)
 8003752:	4618      	mov	r0, r3
 8003754:	f009 fa14 	bl	800cb80 <sprintf_>
               GFX_DrawFillRectangle(5, 25, 25, 18, WHITE, OLED);
 8003758:	2300      	movs	r3, #0
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	2301      	movs	r3, #1
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2312      	movs	r3, #18
 8003762:	2219      	movs	r2, #25
 8003764:	2119      	movs	r1, #25
 8003766:	2005      	movs	r0, #5
 8003768:	f7fd ff15 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(10, 30, Temp, BLACK, 1, OLED);
 800376c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003770:	2300      	movs	r3, #0
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	2301      	movs	r3, #1
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	2300      	movs	r3, #0
 800377a:	211e      	movs	r1, #30
 800377c:	200a      	movs	r0, #10
 800377e:	f7fd fd99 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "ON");
 8003782:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003786:	494e      	ldr	r1, [pc, #312]	; (80038c0 <MENU_RunningFunction+0x1818>)
 8003788:	4618      	mov	r0, r3
 800378a:	f009 f9f9 	bl	800cb80 <sprintf_>
               GFX_DrawString(100, 30, Temp, WHITE, 0, OLED);
 800378e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003792:	2300      	movs	r3, #0
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	2300      	movs	r3, #0
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	2301      	movs	r3, #1
 800379c:	211e      	movs	r1, #30
 800379e:	2064      	movs	r0, #100	; 0x64
 80037a0:	f7fd fd88 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 80037a4:	f009 fef0 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 80037a8:	4b3a      	ldr	r3, [pc, #232]	; (8003894 <MENU_RunningFunction+0x17ec>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f012 fb46 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 80037b2:	4b37      	ldr	r3, [pc, #220]	; (8003890 <MENU_RunningFunction+0x17e8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f012 fb41 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 80037bc:	4b33      	ldr	r3, [pc, #204]	; (800388c <MENU_RunningFunction+0x17e4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f012 fb3c 	bl	8015e3e <osMutexRelease>
 80037c6:	e053      	b.n	8003870 <MENU_RunningFunction+0x17c8>
            }
            else
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80037c8:	4b30      	ldr	r3, [pc, #192]	; (800388c <MENU_RunningFunction+0x17e4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f04f 31ff 	mov.w	r1, #4294967295
 80037d0:	4618      	mov	r0, r3
 80037d2:	f012 fae9 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80037d6:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <MENU_RunningFunction+0x17e8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f04f 31ff 	mov.w	r1, #4294967295
 80037de:	4618      	mov	r0, r3
 80037e0:	f012 fae2 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80037e4:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <MENU_RunningFunction+0x17ec>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f04f 31ff 	mov.w	r1, #4294967295
 80037ec:	4618      	mov	r0, r3
 80037ee:	f012 fadb 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 80037f2:	f009 fef5 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "OFF");
 80037f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80037fa:	4930      	ldr	r1, [pc, #192]	; (80038bc <MENU_RunningFunction+0x1814>)
 80037fc:	4618      	mov	r0, r3
 80037fe:	f009 f9bf 	bl	800cb80 <sprintf_>
               GFX_DrawString(10, 30, Temp, WHITE, 0, OLED);
 8003802:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003806:	2300      	movs	r3, #0
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2300      	movs	r3, #0
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2301      	movs	r3, #1
 8003810:	211e      	movs	r1, #30
 8003812:	200a      	movs	r0, #10
 8003814:	f7fd fd4e 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "ON");
 8003818:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800381c:	4928      	ldr	r1, [pc, #160]	; (80038c0 <MENU_RunningFunction+0x1818>)
 800381e:	4618      	mov	r0, r3
 8003820:	f009 f9ae 	bl	800cb80 <sprintf_>
               GFX_DrawFillRectangle(95, 25, 25, 18, WHITE, OLED);
 8003824:	2300      	movs	r3, #0
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	2301      	movs	r3, #1
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2312      	movs	r3, #18
 800382e:	2219      	movs	r2, #25
 8003830:	2119      	movs	r1, #25
 8003832:	205f      	movs	r0, #95	; 0x5f
 8003834:	f7fd feaf 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(100, 30, Temp, BLACK, 1, OLED);
 8003838:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800383c:	2300      	movs	r3, #0
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	2301      	movs	r3, #1
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2300      	movs	r3, #0
 8003846:	211e      	movs	r1, #30
 8003848:	2064      	movs	r0, #100	; 0x64
 800384a:	f7fd fd33 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 800384e:	f009 fe9b 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <MENU_RunningFunction+0x17ec>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f012 faf1 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <MENU_RunningFunction+0x17e8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f012 faec 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8003866:	4b09      	ldr	r3, [pc, #36]	; (800388c <MENU_RunningFunction+0x17e4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f012 fae7 	bl	8015e3e <osMutexRelease>
            }
            osDelay(100);
 8003870:	2064      	movs	r0, #100	; 0x64
 8003872:	f012 f84b 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8003876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800387a:	480a      	ldr	r0, [pc, #40]	; (80038a4 <MENU_RunningFunction+0x17fc>)
 800387c:	f00b faf4 	bl	800ee68 <HAL_GPIO_ReadPin>
 8003880:	4603      	mov	r3, r0
 8003882:	2b01      	cmp	r3, #1
 8003884:	f43f af44 	beq.w	8003710 <MENU_RunningFunction+0x1668>
         }

         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003888:	e01f      	b.n	80038ca <MENU_RunningFunction+0x1822>
 800388a:	bf00      	nop
 800388c:	200040a4 	.word	0x200040a4
 8003890:	200040a8 	.word	0x200040a8
 8003894:	200040ac 	.word	0x200040ac
 8003898:	0801ff00 	.word	0x0801ff00
 800389c:	08020010 	.word	0x08020010
 80038a0:	08020014 	.word	0x08020014
 80038a4:	48000400 	.word	0x48000400
 80038a8:	40000c00 	.word	0x40000c00
 80038ac:	08020018 	.word	0x08020018
 80038b0:	20003fbc 	.word	0x20003fbc
 80038b4:	200040c8 	.word	0x200040c8
 80038b8:	20003fac 	.word	0x20003fac
 80038bc:	08020028 	.word	0x08020028
 80038c0:	0802002c 	.word	0x0802002c
         {
            osDelay(100);
 80038c4:	2064      	movs	r0, #100	; 0x64
 80038c6:	f012 f821 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80038ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80038ce:	4889      	ldr	r0, [pc, #548]	; (8003af4 <MENU_RunningFunction+0x1a4c>)
 80038d0:	f00b faca 	bl	800ee68 <HAL_GPIO_ReadPin>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f4      	beq.n	80038c4 <MENU_RunningFunction+0x181c>
         }
         if((TIM5->CNT / 4) % 2 == 1)
 80038da:	4b87      	ldr	r3, [pc, #540]	; (8003af8 <MENU_RunningFunction+0x1a50>)
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d106      	bne.n	80038f6 <MENU_RunningFunction+0x184e>
         {
            osEventFlagsSet(C3V1FlagsHandle, E_PAPIER_DARK_MODE);
 80038e8:	4b84      	ldr	r3, [pc, #528]	; (8003afc <MENU_RunningFunction+0x1a54>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2140      	movs	r1, #64	; 0x40
 80038ee:	4618      	mov	r0, r3
 80038f0:	f012 f8f8 	bl	8015ae4 <osEventFlagsSet>
         }
         else
         {
            osEventFlagsClear(C3V1FlagsHandle, E_PAPIER_DARK_MODE);
         }
         break;
 80038f4:	e0f7      	b.n	8003ae6 <MENU_RunningFunction+0x1a3e>
            osEventFlagsClear(C3V1FlagsHandle, E_PAPIER_DARK_MODE);
 80038f6:	4b81      	ldr	r3, [pc, #516]	; (8003afc <MENU_RunningFunction+0x1a54>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2140      	movs	r1, #64	; 0x40
 80038fc:	4618      	mov	r0, r3
 80038fe:	f012 f935 	bl	8015b6c <osEventFlagsClear>
         break;
 8003902:	e0f0      	b.n	8003ae6 <MENU_RunningFunction+0x1a3e>
      }
      case MENU_CHOISE_SEND_MESURMENT_COMMAND:
      {
         TIM5->CNT                     = 0;
 8003904:	4b7c      	ldr	r3, [pc, #496]	; (8003af8 <MENU_RunningFunction+0x1a50>)
 8003906:	2200      	movs	r2, #0
 8003908:	625a      	str	r2, [r3, #36]	; 0x24
         RfpMessage_TypeDef RfpMessage = { 0 };
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
         uint8_t Command               = RFP_START_MEASURMENT;
 800390e:	2302      	movs	r3, #2
 8003910:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8003914:	e0b2      	b.n	8003a7c <MENU_RunningFunction+0x19d4>
         {
            if((TIM5->CNT / 4) % 2 == 0)
 8003916:	4b78      	ldr	r3, [pc, #480]	; (8003af8 <MENU_RunningFunction+0x1a50>)
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	089b      	lsrs	r3, r3, #2
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d154      	bne.n	80039ce <MENU_RunningFunction+0x1926>
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8003924:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <MENU_RunningFunction+0x1a58>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f04f 31ff 	mov.w	r1, #4294967295
 800392c:	4618      	mov	r0, r3
 800392e:	f012 fa3b 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8003932:	4b74      	ldr	r3, [pc, #464]	; (8003b04 <MENU_RunningFunction+0x1a5c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f04f 31ff 	mov.w	r1, #4294967295
 800393a:	4618      	mov	r0, r3
 800393c:	f012 fa34 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003940:	4b71      	ldr	r3, [pc, #452]	; (8003b08 <MENU_RunningFunction+0x1a60>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f04f 31ff 	mov.w	r1, #4294967295
 8003948:	4618      	mov	r0, r3
 800394a:	f012 fa2d 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 800394e:	f009 fe47 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "NIE");
 8003952:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003956:	496d      	ldr	r1, [pc, #436]	; (8003b0c <MENU_RunningFunction+0x1a64>)
 8003958:	4618      	mov	r0, r3
 800395a:	f009 f911 	bl	800cb80 <sprintf_>
               GFX_DrawFillRectangle(5, 25, 25, 18, WHITE, OLED);
 800395e:	2300      	movs	r3, #0
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	2301      	movs	r3, #1
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	2312      	movs	r3, #18
 8003968:	2219      	movs	r2, #25
 800396a:	2119      	movs	r1, #25
 800396c:	2005      	movs	r0, #5
 800396e:	f7fd fe12 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(10, 30, Temp, BLACK, 1, OLED);
 8003972:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003976:	2300      	movs	r3, #0
 8003978:	9301      	str	r3, [sp, #4]
 800397a:	2301      	movs	r3, #1
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	2300      	movs	r3, #0
 8003980:	211e      	movs	r1, #30
 8003982:	200a      	movs	r0, #10
 8003984:	f7fd fc96 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 8003988:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800398c:	4960      	ldr	r1, [pc, #384]	; (8003b10 <MENU_RunningFunction+0x1a68>)
 800398e:	4618      	mov	r0, r3
 8003990:	f009 f8f6 	bl	800cb80 <sprintf_>
               GFX_DrawString(100, 30, Temp, WHITE, 0, OLED);
 8003994:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003998:	2300      	movs	r3, #0
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	2300      	movs	r3, #0
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	2301      	movs	r3, #1
 80039a2:	211e      	movs	r1, #30
 80039a4:	2064      	movs	r0, #100	; 0x64
 80039a6:	f7fd fc85 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 80039aa:	f009 fded 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 80039ae:	4b56      	ldr	r3, [pc, #344]	; (8003b08 <MENU_RunningFunction+0x1a60>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f012 fa43 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 80039b8:	4b52      	ldr	r3, [pc, #328]	; (8003b04 <MENU_RunningFunction+0x1a5c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f012 fa3e 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 80039c2:	4b4f      	ldr	r3, [pc, #316]	; (8003b00 <MENU_RunningFunction+0x1a58>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f012 fa39 	bl	8015e3e <osMutexRelease>
 80039cc:	e053      	b.n	8003a76 <MENU_RunningFunction+0x19ce>
            }
            else
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80039ce:	4b4c      	ldr	r3, [pc, #304]	; (8003b00 <MENU_RunningFunction+0x1a58>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f04f 31ff 	mov.w	r1, #4294967295
 80039d6:	4618      	mov	r0, r3
 80039d8:	f012 f9e6 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80039dc:	4b49      	ldr	r3, [pc, #292]	; (8003b04 <MENU_RunningFunction+0x1a5c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f04f 31ff 	mov.w	r1, #4294967295
 80039e4:	4618      	mov	r0, r3
 80039e6:	f012 f9df 	bl	8015da8 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80039ea:	4b47      	ldr	r3, [pc, #284]	; (8003b08 <MENU_RunningFunction+0x1a60>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f04f 31ff 	mov.w	r1, #4294967295
 80039f2:	4618      	mov	r0, r3
 80039f4:	f012 f9d8 	bl	8015da8 <osMutexAcquire>
               ssd1306_clear();
 80039f8:	f009 fdf2 	bl	800d5e0 <ssd1306_clear>
               sprintf(Temp, "NIE");
 80039fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a00:	4942      	ldr	r1, [pc, #264]	; (8003b0c <MENU_RunningFunction+0x1a64>)
 8003a02:	4618      	mov	r0, r3
 8003a04:	f009 f8bc 	bl	800cb80 <sprintf_>
               GFX_DrawString(10, 30, Temp, WHITE, 0, OLED);
 8003a08:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	2300      	movs	r3, #0
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	2301      	movs	r3, #1
 8003a16:	211e      	movs	r1, #30
 8003a18:	200a      	movs	r0, #10
 8003a1a:	f7fd fc4b 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 8003a1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a22:	493b      	ldr	r1, [pc, #236]	; (8003b10 <MENU_RunningFunction+0x1a68>)
 8003a24:	4618      	mov	r0, r3
 8003a26:	f009 f8ab 	bl	800cb80 <sprintf_>
               GFX_DrawFillRectangle(95, 25, 25, 18, WHITE, OLED);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	2301      	movs	r3, #1
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2312      	movs	r3, #18
 8003a34:	2219      	movs	r2, #25
 8003a36:	2119      	movs	r1, #25
 8003a38:	205f      	movs	r0, #95	; 0x5f
 8003a3a:	f7fd fdac 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(100, 30, Temp, BLACK, 1, OLED);
 8003a3e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003a42:	2300      	movs	r3, #0
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	2301      	movs	r3, #1
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	211e      	movs	r1, #30
 8003a4e:	2064      	movs	r0, #100	; 0x64
 8003a50:	f7fd fc30 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8003a54:	f009 fd98 	bl	800d588 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <MENU_RunningFunction+0x1a60>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f012 f9ee 	bl	8015e3e <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8003a62:	4b28      	ldr	r3, [pc, #160]	; (8003b04 <MENU_RunningFunction+0x1a5c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f012 f9e9 	bl	8015e3e <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8003a6c:	4b24      	ldr	r3, [pc, #144]	; (8003b00 <MENU_RunningFunction+0x1a58>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f012 f9e4 	bl	8015e3e <osMutexRelease>
            }
            osDelay(100);
 8003a76:	2064      	movs	r0, #100	; 0x64
 8003a78:	f011 ff48 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8003a7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a80:	481c      	ldr	r0, [pc, #112]	; (8003af4 <MENU_RunningFunction+0x1a4c>)
 8003a82:	f00b f9f1 	bl	800ee68 <HAL_GPIO_ReadPin>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	f43f af44 	beq.w	8003916 <MENU_RunningFunction+0x186e>
         }

         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003a8e:	e002      	b.n	8003a96 <MENU_RunningFunction+0x19ee>
         {
            osDelay(100);
 8003a90:	2064      	movs	r0, #100	; 0x64
 8003a92:	f011 ff3b 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003a96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a9a:	4816      	ldr	r0, [pc, #88]	; (8003af4 <MENU_RunningFunction+0x1a4c>)
 8003a9c:	f00b f9e4 	bl	800ee68 <HAL_GPIO_ReadPin>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f4      	beq.n	8003a90 <MENU_RunningFunction+0x19e8>
         }
         if((TIM5->CNT / 4) % 2 == 1)
 8003aa6:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <MENU_RunningFunction+0x1a50>)
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	089b      	lsrs	r3, r3, #2
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d117      	bne.n	8003ae4 <MENU_RunningFunction+0x1a3c>
         {
            RfpMessage.AdditionalData = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	80fb      	strh	r3, [r7, #6]
            RfpMessage.Data           = Command;
 8003ab8:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8003abc:	717b      	strb	r3, [r7, #5]
            RfpMessage.MessageType    = RFP_COMMAND;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	713b      	strb	r3, [r7, #4]
            PMS_ExitSleepMode();
 8003ac2:	f000 f86b 	bl	8003b9c <PMS_ExitSleepMode>
            osMessageQueuePut(RfpMessageQueueHandle, &RfpMessage, 0, osWaitForever);
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <MENU_RunningFunction+0x1a6c>)
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	1d39      	adds	r1, r7, #4
 8003acc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f012 fa65 	bl	8015fa0 <osMessageQueuePut>
         }
         break;
 8003ad6:	e005      	b.n	8003ae4 <MENU_RunningFunction+0x1a3c>
      }
      default:
      {
         break;
 8003ad8:	bf00      	nop
 8003ada:	e004      	b.n	8003ae6 <MENU_RunningFunction+0x1a3e>
         break;
 8003adc:	bf00      	nop
 8003ade:	e002      	b.n	8003ae6 <MENU_RunningFunction+0x1a3e>
         break;
 8003ae0:	bf00      	nop
 8003ae2:	e000      	b.n	8003ae6 <MENU_RunningFunction+0x1a3e>
         break;
 8003ae4:	bf00      	nop
      }
   }

   Menu.NewEvent = MENU_EVENT_END;
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <MENU_RunningFunction+0x1a70>)
 8003ae8:	2203      	movs	r2, #3
 8003aea:	725a      	strb	r2, [r3, #9]
}
 8003aec:	bf00      	nop
 8003aee:	37c0      	adds	r7, #192	; 0xc0
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	48000400 	.word	0x48000400
 8003af8:	40000c00 	.word	0x40000c00
 8003afc:	200040c4 	.word	0x200040c4
 8003b00:	200040a4 	.word	0x200040a4
 8003b04:	200040a8 	.word	0x200040a8
 8003b08:	200040ac 	.word	0x200040ac
 8003b0c:	08020010 	.word	0x08020010
 8003b10:	08020014 	.word	0x08020014
 8003b14:	20004088 	.word	0x20004088
 8003b18:	200002a4 	.word	0x200002a4

08003b1c <MENU_EndFunction>:

static void MENU_EndFunction(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
   Menu.ButtonCnt = 0;
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <MENU_EndFunction+0x30>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	605a      	str	r2, [r3, #4]
   Menu.ChoiseCnt = 0;
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <MENU_EndFunction+0x30>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
   Menu.NewEvent  = MENU_EVENT_NOTHING;
 8003b2c:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <MENU_EndFunction+0x30>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	725a      	strb	r2, [r3, #9]
   Menu.f         = 0;
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <MENU_EndFunction+0x30>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	729a      	strb	r2, [r3, #10]
   TIM5->CNT      = 0;
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <MENU_EndFunction+0x34>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
   osMutexRelease(MenuMutexHandle);
 8003b3e:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <MENU_EndFunction+0x38>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f012 f97b 	bl	8015e3e <osMutexRelease>
}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	200002a4 	.word	0x200002a4
 8003b50:	40000c00 	.word	0x40000c00
 8003b54:	200040b8 	.word	0x200040b8

08003b58 <PMS_Reset>:
#include "PMS.h"
#include "cmsis_os.h"
#include "main.h"
#include "usart.h"
void PMS_Reset(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(PMS3003_RST_GPIO_Port, PMS3003_RST_Pin, 0);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b66:	f00b f997 	bl	800ee98 <HAL_GPIO_WritePin>
   osDelay(1000);
 8003b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b6e:	f011 fecd 	bl	801590c <osDelay>
   HAL_GPIO_WritePin(PMS3003_RST_GPIO_Port, PMS3003_RST_Pin, 1);
 8003b72:	2201      	movs	r2, #1
 8003b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b7c:	f00b f98c 	bl	800ee98 <HAL_GPIO_WritePin>
}
 8003b80:	bf00      	nop
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <PMS_EnterSleepMode>:
{
   HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Data, Length);
}
#endif
void PMS_EnterSleepMode(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(PMS3003_SET_GPIO_Port, PMS3003_SET_Pin, 0);
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b8e:	4802      	ldr	r0, [pc, #8]	; (8003b98 <PMS_EnterSleepMode+0x14>)
 8003b90:	f00b f982 	bl	800ee98 <HAL_GPIO_WritePin>
}
 8003b94:	bf00      	nop
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	48000400 	.word	0x48000400

08003b9c <PMS_ExitSleepMode>:
void PMS_ExitSleepMode(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(PMS3003_SET_GPIO_Port, PMS3003_SET_Pin, 1);
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ba6:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <PMS_ExitSleepMode+0x14>)
 8003ba8:	f00b f976 	bl	800ee98 <HAL_GPIO_WritePin>
}
 8003bac:	bf00      	nop
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	48000400 	.word	0x48000400

08003bb4 <WS2812_SetPixel>:

#include "WS2812b.h"
#include "tim.h"
uint16_t WsBuffer[11 * 24] = { 0 };
void WS2812_SetPixel(uint8_t r, uint8_t g, uint8_t b)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	71fb      	strb	r3, [r7, #7]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	71bb      	strb	r3, [r7, #6]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	717b      	strb	r3, [r7, #5]

   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8003bc6:	2307      	movs	r3, #7
 8003bc8:	75fb      	strb	r3, [r7, #23]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	75bb      	strb	r3, [r7, #22]
 8003bce:	e023      	b.n	8003c18 <WS2812_SetPixel+0x64>
   {

      if((r & (1 << k)) == 0)
 8003bd0:	79fa      	ldrb	r2, [r7, #7]
 8003bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bd6:	fa42 f303 	asr.w	r3, r2, r3
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d107      	bne.n	8003bf2 <WS2812_SetPixel+0x3e>
         WsBuffer[10 * 24 + i] = zero;
 8003be2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003be6:	33f0      	adds	r3, #240	; 0xf0
 8003be8:	4a4e      	ldr	r2, [pc, #312]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003bea:	2135      	movs	r1, #53	; 0x35
 8003bec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003bf0:	e006      	b.n	8003c00 <WS2812_SetPixel+0x4c>
      else
         WsBuffer[10 * 24 + i] = one;
 8003bf2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bf6:	33f0      	adds	r3, #240	; 0xf0
 8003bf8:	4a4a      	ldr	r2, [pc, #296]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003bfa:	2160      	movs	r1, #96	; 0x60
 8003bfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8003c00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	75fb      	strb	r3, [r7, #23]
 8003c0c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	75bb      	strb	r3, [r7, #22]
 8003c18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	dad7      	bge.n	8003bd0 <WS2812_SetPixel+0x1c>
   }
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8003c20:	2307      	movs	r3, #7
 8003c22:	757b      	strb	r3, [r7, #21]
 8003c24:	2300      	movs	r3, #0
 8003c26:	753b      	strb	r3, [r7, #20]
 8003c28:	e023      	b.n	8003c72 <WS2812_SetPixel+0xbe>
   {

      if((g & (1 << k)) == 0)
 8003c2a:	79ba      	ldrb	r2, [r7, #6]
 8003c2c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003c30:	fa42 f303 	asr.w	r3, r2, r3
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d107      	bne.n	8003c4c <WS2812_SetPixel+0x98>
         WsBuffer[10 * 24 + i + 8] = zero;
 8003c3c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003c40:	33f8      	adds	r3, #248	; 0xf8
 8003c42:	4a38      	ldr	r2, [pc, #224]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003c44:	2135      	movs	r1, #53	; 0x35
 8003c46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003c4a:	e006      	b.n	8003c5a <WS2812_SetPixel+0xa6>
      else
         WsBuffer[10 * 24 + i + 8] = one;
 8003c4c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003c50:	33f8      	adds	r3, #248	; 0xf8
 8003c52:	4a34      	ldr	r2, [pc, #208]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003c54:	2160      	movs	r1, #96	; 0x60
 8003c56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8003c5a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	757b      	strb	r3, [r7, #21]
 8003c66:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	753b      	strb	r3, [r7, #20]
 8003c72:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	dad7      	bge.n	8003c2a <WS2812_SetPixel+0x76>
   }
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8003c7a:	2307      	movs	r3, #7
 8003c7c:	74fb      	strb	r3, [r7, #19]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	74bb      	strb	r3, [r7, #18]
 8003c82:	e025      	b.n	8003cd0 <WS2812_SetPixel+0x11c>
   {

      if((b & (1 << k)) == 0)
 8003c84:	797a      	ldrb	r2, [r7, #5]
 8003c86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003c8a:	fa42 f303 	asr.w	r3, r2, r3
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d108      	bne.n	8003ca8 <WS2812_SetPixel+0xf4>
         WsBuffer[10 * 24 + i + 16] = zero;
 8003c96:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003c9a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c9e:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003ca0:	2135      	movs	r1, #53	; 0x35
 8003ca2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003ca6:	e007      	b.n	8003cb8 <WS2812_SetPixel+0x104>
      else
         WsBuffer[10 * 24 + i + 16] = one;
 8003ca8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003cac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003cb0:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003cb2:	2160      	movs	r1, #96	; 0x60
 8003cb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8003cb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	74fb      	strb	r3, [r7, #19]
 8003cc4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	74bb      	strb	r3, [r7, #18]
 8003cd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	dad5      	bge.n	8003c84 <WS2812_SetPixel+0xd0>
   }
   for(int i = 0; i < 240; i++)
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	e007      	b.n	8003cee <WS2812_SetPixel+0x13a>
   {
      WsBuffer[i] = 0;
 8003cde:	4a11      	ldr	r2, [pc, #68]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int i = 0; i < 240; i++)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3301      	adds	r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2bef      	cmp	r3, #239	; 0xef
 8003cf2:	ddf4      	ble.n	8003cde <WS2812_SetPixel+0x12a>
   }
   HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, WsBuffer, 11 * 24);
 8003cf4:	f44f 7384 	mov.w	r3, #264	; 0x108
 8003cf8:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	480a      	ldr	r0, [pc, #40]	; (8003d28 <WS2812_SetPixel+0x174>)
 8003cfe:	f00e fa67 	bl	80121d0 <HAL_TIM_PWM_Start_DMA>
   while(HAL_DMA_STATE_READY != HAL_DMA_GetState(htim1.hdma[1]))
 8003d02:	bf00      	nop
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <WS2812_SetPixel+0x174>)
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f00a fe6c 	bl	800e9e6 <HAL_DMA_GetState>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d1f7      	bne.n	8003d04 <WS2812_SetPixel+0x150>
   {
   }
   HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8003d14:	2100      	movs	r1, #0
 8003d16:	4804      	ldr	r0, [pc, #16]	; (8003d28 <WS2812_SetPixel+0x174>)
 8003d18:	f00e fc7a 	bl	8012610 <HAL_TIM_PWM_Stop_DMA>
}
 8003d1c:	bf00      	nop
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	200002b0 	.word	0x200002b0
 8003d28:	200046c0 	.word	0x200046c0

08003d2c <BME280_CsLow>:
#include "main.h"

#include "bme280_spi.h"

void BME280_CsLow(BME280_t *bme)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(bme->bme280_CsPort, bme->bme280_CsPin, 0);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6858      	ldr	r0, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f00b f8aa 	bl	800ee98 <HAL_GPIO_WritePin>
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <BME280_CsHigh>:
void BME280_CsHigh(BME280_t *bme)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(bme->bme280_CsPort, bme->bme280_CsPin, 1);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6858      	ldr	r0, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f00b f89a 	bl	800ee98 <HAL_GPIO_WritePin>
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <BME280_Read8>:
uint8_t BME280_Read8(BME280_t *bme, uint8_t addr)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
   addr |= 128;
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	70fb      	strb	r3, [r7, #3]
   uint8_t data;
   BME280_CsLow(bme);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ffd2 	bl	8003d2c <BME280_CsLow>
   HAL_SPI_Transmit(bme->bme_spi, &addr, 1, BME_MAX_TIMEOUT);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	1cf9      	adds	r1, r7, #3
 8003d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d92:	2201      	movs	r2, #1
 8003d94:	f00d fa85 	bl	80112a2 <HAL_SPI_Transmit>
   HAL_SPI_Receive(bme->bme_spi, &data, 1, BME_MAX_TIMEOUT);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	f107 010f 	add.w	r1, r7, #15
 8003da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003da4:	2201      	movs	r2, #1
 8003da6:	f00d fbea 	bl	801157e <HAL_SPI_Receive>
   BME280_CsHigh(bme);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff ffce 	bl	8003d4c <BME280_CsHigh>
   return data;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <BME280_Write8>:
void BME280_Write8(BME280_t *bme, uint8_t addr, uint8_t data)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	70fb      	strb	r3, [r7, #3]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	70bb      	strb	r3, [r7, #2]
   BME280_CsLow(bme);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ffae 	bl	8003d2c <BME280_CsLow>
   addr &= 127;
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd6:	70fb      	strb	r3, [r7, #3]
   uint8_t Data_ToSend[2];
   Data_ToSend[0] = addr;
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	733b      	strb	r3, [r7, #12]
   Data_ToSend[1] = data;
 8003ddc:	78bb      	ldrb	r3, [r7, #2]
 8003dde:	737b      	strb	r3, [r7, #13]
   HAL_SPI_Transmit(bme->bme_spi, Data_ToSend, 2, BME_MAX_TIMEOUT);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	f107 010c 	add.w	r1, r7, #12
 8003de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dec:	2202      	movs	r2, #2
 8003dee:	f00d fa58 	bl	80112a2 <HAL_SPI_Transmit>
   BME280_CsHigh(bme);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff ffaa 	bl	8003d4c <BME280_CsHigh>
}
 8003df8:	bf00      	nop
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <BME280_Read16LE>:
static uint16_t BME280_Read16LE(BME280_t *bme, uint8_t address)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	70fb      	strb	r3, [r7, #3]
   uint8_t data[2];
   data[0] = BME280_Read8(bme, address);
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ffab 	bl	8003d6c <BME280_Read8>
 8003e16:	4603      	mov	r3, r0
 8003e18:	733b      	strb	r3, [r7, #12]
   data[1] = BME280_Read8(bme, address + 1);
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff ffa2 	bl	8003d6c <BME280_Read8>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	737b      	strb	r3, [r7, #13]
   return ((data[1] << 8) | data[0]);
 8003e2c:	7b7b      	ldrb	r3, [r7, #13]
 8003e2e:	021b      	lsls	r3, r3, #8
 8003e30:	b21a      	sxth	r2, r3
 8003e32:	7b3b      	ldrb	r3, [r7, #12]
 8003e34:	b21b      	sxth	r3, r3
 8003e36:	4313      	orrs	r3, r2
 8003e38:	b21b      	sxth	r3, r3
 8003e3a:	b29b      	uxth	r3, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <BME280_Read16>:
static uint16_t BME280_Read16(BME280_t *bme, uint8_t address)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	70fb      	strb	r3, [r7, #3]
   uint8_t data[2];
   data[0] = BME280_Read8(bme, address);
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	4619      	mov	r1, r3
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ff89 	bl	8003d6c <BME280_Read8>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	733b      	strb	r3, [r7, #12]
   data[1] = BME280_Read8(bme, address + 1);
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	3301      	adds	r3, #1
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	4619      	mov	r1, r3
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ff80 	bl	8003d6c <BME280_Read8>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	737b      	strb	r3, [r7, #13]
   return ((data[0] << 8) | data[1]);
 8003e70:	7b3b      	ldrb	r3, [r7, #12]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	b21a      	sxth	r2, r3
 8003e76:	7b7b      	ldrb	r3, [r7, #13]
 8003e78:	b21b      	sxth	r3, r3
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	b21b      	sxth	r3, r3
 8003e7e:	b29b      	uxth	r3, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <BME280_Read24>:
uint32_t BME280_Read24(BME280_t *bme, uint8_t addr)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	70fb      	strb	r3, [r7, #3]
   addr |= 128;
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	70fb      	strb	r3, [r7, #3]
   uint8_t data[3];
   BME280_CsLow(bme);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff ff44 	bl	8003d2c <BME280_CsLow>
   HAL_SPI_Transmit(bme->bme_spi, &addr, 1, BME_MAX_TIMEOUT);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	1cf9      	adds	r1, r7, #3
 8003eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f00d f9f7 	bl	80112a2 <HAL_SPI_Transmit>
   HAL_SPI_Receive(bme->bme_spi, data, 3, BME_MAX_TIMEOUT);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	f107 010c 	add.w	r1, r7, #12
 8003ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	f00d fb5c 	bl	801157e <HAL_SPI_Receive>
   BME280_CsHigh(bme);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff ff40 	bl	8003d4c <BME280_CsHigh>
   return ((data[0] << 16) | (data[1] << 8) | data[2]);
 8003ecc:	7b3b      	ldrb	r3, [r7, #12]
 8003ece:	041a      	lsls	r2, r3, #16
 8003ed0:	7b7b      	ldrb	r3, [r7, #13]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	7bba      	ldrb	r2, [r7, #14]
 8003ed8:	4313      	orrs	r3, r2
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <BME280_Read_temp>:
static float BME280_Read_temp(BME280_t *bme)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
   int32_t var1, var2;
   int32_t adc_T = BME280_Read24(bme, BME280_TEMPDATA);
 8003eec:	21fa      	movs	r1, #250	; 0xfa
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff ffca 	bl	8003e88 <BME280_Read24>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	617b      	str	r3, [r7, #20]
   if(adc_T == 0x800000)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003efe:	d102      	bne.n	8003f06 <BME280_Read_temp+0x22>
      return -99;
 8003f00:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003f8c <BME280_Read_temp+0xa8>
 8003f04:	e03b      	b.n	8003f7e <BME280_Read_temp+0x9a>

   adc_T >>= 4;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	111b      	asrs	r3, r3, #4
 8003f0a:	617b      	str	r3, [r7, #20]

   var1 = ((((adc_T >> 3) - ((int32_t)bme->t1 << 1))) * ((int32_t)bme->t2)) >> 11;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	10da      	asrs	r2, r3, #3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	12db      	asrs	r3, r3, #11
 8003f24:	613b      	str	r3, [r7, #16]

   var2 = (((((adc_T >> 4) - ((int32_t)bme->t1)) * ((adc_T >> 4) - ((int32_t)bme->t1))) >> 12) * ((int32_t)bme->t3)) >> 14;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	111b      	asrs	r3, r3, #4
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	1112      	asrs	r2, r2, #4
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 8003f38:	1a52      	subs	r2, r2, r1
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	131b      	asrs	r3, r3, #12
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	139b      	asrs	r3, r3, #14
 8003f4c:	60fb      	str	r3, [r7, #12]

   bme->t_fine = var1 + var2;
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	441a      	add	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c

   float T = (bme->t_fine * 5 + 128) >> 8;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	3380      	adds	r3, #128	; 0x80
 8003f64:	121b      	asrs	r3, r3, #8
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f6e:	edc7 7a02 	vstr	s15, [r7, #8]
   return T / 100;
 8003f72:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f76:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003f90 <BME280_Read_temp+0xac>
 8003f7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13

   return -99;
}
 8003f7e:	eef0 7a47 	vmov.f32	s15, s14
 8003f82:	eeb0 0a67 	vmov.f32	s0, s15
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	c2c60000 	.word	0xc2c60000
 8003f90:	42c80000 	.word	0x42c80000

08003f94 <BME280_Read_hum>:
static float BME280_Read_hum(BME280_t *bme)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

   int32_t adc_H = BME280_Read16(bme, BME280_HUMIDDATA);
 8003f9c:	21fd      	movs	r1, #253	; 0xfd
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff ff50 	bl	8003e44 <BME280_Read16>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	617b      	str	r3, [r7, #20]
   if(adc_H == 0x8000) // value in case humidity measurement was disabled
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fae:	d102      	bne.n	8003fb6 <BME280_Read_hum+0x22>
      return -99;      // error
 8003fb0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004084 <BME280_Read_hum+0xf0>
 8003fb4:	e05f      	b.n	8004076 <BME280_Read_hum+0xe2>
   int32_t v_x1_u32r;

   v_x1_u32r = (bme->t_fine - ((int32_t)76800));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8003fbe:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (((((adc_H << 14) - (((int32_t)bme->h4) << 20) - (((int32_t)bme->h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	039a      	lsls	r2, r3, #14
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003fca:	051b      	lsls	r3, r3, #20
 8003fcc:	1ad2      	subs	r2, r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003fe2:	13db      	asrs	r3, r3, #15
                * (((((((v_x1_u32r * ((int32_t)bme->h6)) >> 10) * (((v_x1_u32r * ((int32_t)bme->h3)) >> 11) + ((int32_t)32768))) >> 10)
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8003fea:	4611      	mov	r1, r2
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	fb01 f202 	mul.w	r2, r1, r2
 8003ff2:	1292      	asrs	r2, r2, #10
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	7a49      	ldrb	r1, [r1, #9]
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	6939      	ldr	r1, [r7, #16]
 8003ffc:	fb00 f101 	mul.w	r1, r0, r1
 8004000:	12c9      	asrs	r1, r1, #11
 8004002:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8004006:	fb01 f202 	mul.w	r2, r1, r2
 800400a:	1292      	asrs	r2, r2, #10
                     + ((int32_t)2097152))
 800400c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                        * ((int32_t)bme->h2)
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	f9b1 1020 	ldrsh.w	r1, [r1, #32]
 8004016:	fb01 f202 	mul.w	r2, r1, r2
                    + 8192)
 800401a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
                   >> 14));
 800401e:	1392      	asrs	r2, r2, #14
   v_x1_u32r = (((((adc_H << 14) - (((int32_t)bme->h4) << 20) - (((int32_t)bme->h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15)
 8004020:	fb02 f303 	mul.w	r3, r2, r3
 8004024:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((int32_t)bme->h1)) >> 4));
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	13db      	asrs	r3, r3, #15
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	13d2      	asrs	r2, r2, #15
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	11db      	asrs	r3, r3, #7
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	7a12      	ldrb	r2, [r2, #8]
 8004038:	fb02 f303 	mul.w	r3, r2, r3
 800403c:	111b      	asrs	r3, r3, #4
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800404a:	613b      	str	r3, [r7, #16]
   v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8004052:	bfa8      	it	ge
 8004054:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8004058:	613b      	str	r3, [r7, #16]
   float h   = (v_x1_u32r >> 12);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	131b      	asrs	r3, r3, #12
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004066:	edc7 7a03 	vstr	s15, [r7, #12]
   return h / 1024.0;
 800406a:	edd7 7a03 	vldr	s15, [r7, #12]
 800406e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004088 <BME280_Read_hum+0xf4>
 8004072:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8004076:	eef0 7a47 	vmov.f32	s15, s14
 800407a:	eeb0 0a67 	vmov.f32	s0, s15
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	c2c60000 	.word	0xc2c60000
 8004088:	44800000 	.word	0x44800000

0800408c <BME280_Read_press>:
static float BME280_Read_press(BME280_t *bme)
{
 800408c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004090:	b0cc      	sub	sp, #304	; 0x130
 8004092:	af00      	add	r7, sp, #0
 8004094:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
   int64_t var1, var2, p;

   // Must be done first to get the t_fine variable set up

   int32_t adc_P = BME280_Read24(bme, BME280_PRESSUREDATA);
 8004098:	21f7      	movs	r1, #247	; 0xf7
 800409a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800409e:	f7ff fef3 	bl	8003e88 <BME280_Read24>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   adc_P >>= 4;
 80040a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040ac:	111b      	asrs	r3, r3, #4
 80040ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

   var1 = ((int64_t)bme->t_fine) - 128000;
 80040b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	17da      	asrs	r2, r3, #31
 80040ba:	4698      	mov	r8, r3
 80040bc:	4691      	mov	r9, r2
 80040be:	f5b8 33fa 	subs.w	r3, r8, #128000	; 0x1f400
 80040c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040c4:	f149 33ff 	adc.w	r3, r9, #4294967295
 80040c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040ce:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
   var2 = var1 * var1 * (int64_t)bme->p6;
 80040d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80040d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040da:	fb03 f102 	mul.w	r1, r3, r2
 80040de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80040e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	18ca      	adds	r2, r1, r3
 80040ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040f0:	fba3 4503 	umull	r4, r5, r3, r3
 80040f4:	1953      	adds	r3, r2, r5
 80040f6:	461d      	mov	r5, r3
 80040f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040fc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004100:	b21b      	sxth	r3, r3
 8004102:	17da      	asrs	r2, r3, #31
 8004104:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004108:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800410c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004110:	4603      	mov	r3, r0
 8004112:	fb03 f205 	mul.w	r2, r3, r5
 8004116:	460b      	mov	r3, r1
 8004118:	fb04 f303 	mul.w	r3, r4, r3
 800411c:	4413      	add	r3, r2
 800411e:	4602      	mov	r2, r0
 8004120:	fba4 ab02 	umull	sl, fp, r4, r2
 8004124:	445b      	add	r3, fp
 8004126:	469b      	mov	fp, r3
 8004128:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
 800412c:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
   var2 = var2 + ((var1 * (int64_t)bme->p5) << 17);
 8004130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004134:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004138:	b21b      	sxth	r3, r3
 800413a:	17da      	asrs	r2, r3, #31
 800413c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004140:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004144:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004148:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800414c:	462a      	mov	r2, r5
 800414e:	fb02 f203 	mul.w	r2, r2, r3
 8004152:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004156:	4621      	mov	r1, r4
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	441a      	add	r2, r3
 800415e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004162:	4621      	mov	r1, r4
 8004164:	fba3 1301 	umull	r1, r3, r3, r1
 8004168:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800416c:	460b      	mov	r3, r1
 800416e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004176:	18d3      	adds	r3, r2, r3
 8004178:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800417c:	f04f 0000 	mov.w	r0, #0
 8004180:	f04f 0100 	mov.w	r1, #0
 8004184:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8004188:	462b      	mov	r3, r5
 800418a:	0459      	lsls	r1, r3, #17
 800418c:	4623      	mov	r3, r4
 800418e:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8004192:	4623      	mov	r3, r4
 8004194:	0458      	lsls	r0, r3, #17
 8004196:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800419a:	1814      	adds	r4, r2, r0
 800419c:	643c      	str	r4, [r7, #64]	; 0x40
 800419e:	414b      	adcs	r3, r1
 80041a0:	647b      	str	r3, [r7, #68]	; 0x44
 80041a2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80041a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
   var2 = var2 + (((int64_t)bme->p4) << 35);
 80041aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ae:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80041b2:	b21b      	sxth	r3, r3
 80041b4:	17da      	asrs	r2, r3, #31
 80041b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041ba:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80041be:	f04f 0000 	mov.w	r0, #0
 80041c2:	f04f 0100 	mov.w	r1, #0
 80041c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041ca:	00d9      	lsls	r1, r3, #3
 80041cc:	2000      	movs	r0, #0
 80041ce:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80041d2:	1814      	adds	r4, r2, r0
 80041d4:	63bc      	str	r4, [r7, #56]	; 0x38
 80041d6:	414b      	adcs	r3, r1
 80041d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041da:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80041de:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
   var1 = ((var1 * var1 * (int64_t)bme->p3) >> 8) + ((var1 * (int64_t)bme->p2) << 12);
 80041e2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80041e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041ea:	fb03 f102 	mul.w	r1, r3, r2
 80041ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80041f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041f6:	fb02 f303 	mul.w	r3, r2, r3
 80041fa:	18ca      	adds	r2, r1, r3
 80041fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004200:	fba3 1303 	umull	r1, r3, r3, r3
 8004204:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004208:	460b      	mov	r3, r1
 800420a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800420e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004212:	18d3      	adds	r3, r2, r3
 8004214:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800421c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004220:	b21b      	sxth	r3, r3
 8004222:	17da      	asrs	r2, r3, #31
 8004224:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004228:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800422c:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8004230:	462b      	mov	r3, r5
 8004232:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004236:	4642      	mov	r2, r8
 8004238:	fb02 f203 	mul.w	r2, r2, r3
 800423c:	464b      	mov	r3, r9
 800423e:	4621      	mov	r1, r4
 8004240:	fb01 f303 	mul.w	r3, r1, r3
 8004244:	4413      	add	r3, r2
 8004246:	4622      	mov	r2, r4
 8004248:	4641      	mov	r1, r8
 800424a:	fba2 1201 	umull	r1, r2, r2, r1
 800424e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004252:	460a      	mov	r2, r1
 8004254:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8004258:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800425c:	4413      	add	r3, r2
 800425e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004262:	f04f 0000 	mov.w	r0, #0
 8004266:	f04f 0100 	mov.w	r1, #0
 800426a:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800426e:	4623      	mov	r3, r4
 8004270:	0a18      	lsrs	r0, r3, #8
 8004272:	462b      	mov	r3, r5
 8004274:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004278:	462b      	mov	r3, r5
 800427a:	1219      	asrs	r1, r3, #8
 800427c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004280:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004284:	b21b      	sxth	r3, r3
 8004286:	17da      	asrs	r2, r3, #31
 8004288:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800428c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004290:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004294:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004298:	464a      	mov	r2, r9
 800429a:	fb02 f203 	mul.w	r2, r2, r3
 800429e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80042a2:	4644      	mov	r4, r8
 80042a4:	fb04 f303 	mul.w	r3, r4, r3
 80042a8:	441a      	add	r2, r3
 80042aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80042ae:	4644      	mov	r4, r8
 80042b0:	fba3 4304 	umull	r4, r3, r3, r4
 80042b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042b8:	4623      	mov	r3, r4
 80042ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042c2:	18d3      	adds	r3, r2, r3
 80042c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80042d4:	464c      	mov	r4, r9
 80042d6:	0323      	lsls	r3, r4, #12
 80042d8:	4644      	mov	r4, r8
 80042da:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80042de:	4644      	mov	r4, r8
 80042e0:	0322      	lsls	r2, r4, #12
 80042e2:	1884      	adds	r4, r0, r2
 80042e4:	633c      	str	r4, [r7, #48]	; 0x30
 80042e6:	eb41 0303 	adc.w	r3, r1, r3
 80042ea:	637b      	str	r3, [r7, #52]	; 0x34
 80042ec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80042f0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
   var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bme->p1) >> 33;
 80042f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80042f8:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80042fc:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8004300:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8004304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430a:	b29b      	uxth	r3, r3
 800430c:	2200      	movs	r2, #0
 800430e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004312:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004316:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800431a:	462b      	mov	r3, r5
 800431c:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004320:	4642      	mov	r2, r8
 8004322:	fb02 f203 	mul.w	r2, r2, r3
 8004326:	464b      	mov	r3, r9
 8004328:	4621      	mov	r1, r4
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	4413      	add	r3, r2
 8004330:	4622      	mov	r2, r4
 8004332:	4641      	mov	r1, r8
 8004334:	fba2 1201 	umull	r1, r2, r2, r1
 8004338:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800433c:	460a      	mov	r2, r1
 800433e:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8004342:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004346:	4413      	add	r3, r2
 8004348:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004358:	4629      	mov	r1, r5
 800435a:	104a      	asrs	r2, r1, #1
 800435c:	4629      	mov	r1, r5
 800435e:	17cb      	asrs	r3, r1, #31
 8004360:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

   if(var1 == 0)
 8004364:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8004368:	4313      	orrs	r3, r2
 800436a:	d102      	bne.n	8004372 <BME280_Read_press+0x2e6>
   {
      return 0; // avoid exception caused by division by zero
 800436c:	eddf 7aae 	vldr	s15, [pc, #696]	; 8004628 <BME280_Read_press+0x59c>
 8004370:	e152      	b.n	8004618 <BME280_Read_press+0x58c>
   }
   p    = 1048576 - adc_P;
 8004372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004376:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800437a:	17da      	asrs	r2, r3, #31
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
 800437e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004380:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004384:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
   p    = (((p << 31) - var2) * 3125) / var1;
 8004388:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800438c:	105b      	asrs	r3, r3, #1
 800438e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004392:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004396:	07db      	lsls	r3, r3, #31
 8004398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800439c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80043a0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80043a4:	4621      	mov	r1, r4
 80043a6:	1a89      	subs	r1, r1, r2
 80043a8:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80043ac:	4629      	mov	r1, r5
 80043ae:	eb61 0303 	sbc.w	r3, r1, r3
 80043b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043b6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80043ba:	4622      	mov	r2, r4
 80043bc:	462b      	mov	r3, r5
 80043be:	1891      	adds	r1, r2, r2
 80043c0:	6239      	str	r1, [r7, #32]
 80043c2:	415b      	adcs	r3, r3
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
 80043c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043ca:	4621      	mov	r1, r4
 80043cc:	1851      	adds	r1, r2, r1
 80043ce:	61b9      	str	r1, [r7, #24]
 80043d0:	4629      	mov	r1, r5
 80043d2:	414b      	adcs	r3, r1
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80043e2:	4649      	mov	r1, r9
 80043e4:	018b      	lsls	r3, r1, #6
 80043e6:	4641      	mov	r1, r8
 80043e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ec:	4641      	mov	r1, r8
 80043ee:	018a      	lsls	r2, r1, #6
 80043f0:	4641      	mov	r1, r8
 80043f2:	1889      	adds	r1, r1, r2
 80043f4:	6139      	str	r1, [r7, #16]
 80043f6:	4649      	mov	r1, r9
 80043f8:	eb43 0101 	adc.w	r1, r3, r1
 80043fc:	6179      	str	r1, [r7, #20]
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800440a:	4649      	mov	r1, r9
 800440c:	008b      	lsls	r3, r1, #2
 800440e:	4641      	mov	r1, r8
 8004410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004414:	4641      	mov	r1, r8
 8004416:	008a      	lsls	r2, r1, #2
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	4603      	mov	r3, r0
 800441e:	4622      	mov	r2, r4
 8004420:	189b      	adds	r3, r3, r2
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	460b      	mov	r3, r1
 8004426:	462a      	mov	r2, r5
 8004428:	eb42 0303 	adc.w	r3, r2, r3
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800443a:	4649      	mov	r1, r9
 800443c:	008b      	lsls	r3, r1, #2
 800443e:	4641      	mov	r1, r8
 8004440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004444:	4641      	mov	r1, r8
 8004446:	008a      	lsls	r2, r1, #2
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	4603      	mov	r3, r0
 800444e:	4622      	mov	r2, r4
 8004450:	189b      	adds	r3, r3, r2
 8004452:	67bb      	str	r3, [r7, #120]	; 0x78
 8004454:	462b      	mov	r3, r5
 8004456:	460a      	mov	r2, r1
 8004458:	eb42 0303 	adc.w	r3, r2, r3
 800445c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800445e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8004462:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004466:	f7fc fc27 	bl	8000cb8 <__aeabi_ldivmod>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
   var1 = (((int64_t)bme->p9) * (p >> 13) * (p >> 13)) >> 25;
 8004472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004476:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800447a:	b21b      	sxth	r3, r3
 800447c:	17da      	asrs	r2, r3, #31
 800447e:	673b      	str	r3, [r7, #112]	; 0x70
 8004480:	677a      	str	r2, [r7, #116]	; 0x74
 8004482:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004486:	f04f 0000 	mov.w	r0, #0
 800448a:	f04f 0100 	mov.w	r1, #0
 800448e:	0b50      	lsrs	r0, r2, #13
 8004490:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004494:	1359      	asrs	r1, r3, #13
 8004496:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800449a:	462b      	mov	r3, r5
 800449c:	fb00 f203 	mul.w	r2, r0, r3
 80044a0:	4623      	mov	r3, r4
 80044a2:	fb03 f301 	mul.w	r3, r3, r1
 80044a6:	4413      	add	r3, r2
 80044a8:	4622      	mov	r2, r4
 80044aa:	fba2 1200 	umull	r1, r2, r2, r0
 80044ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044b2:	460a      	mov	r2, r1
 80044b4:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80044b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80044bc:	4413      	add	r3, r2
 80044be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80044c2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80044c6:	f04f 0000 	mov.w	r0, #0
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	0b50      	lsrs	r0, r2, #13
 80044d0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80044d4:	1359      	asrs	r1, r3, #13
 80044d6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80044da:	462b      	mov	r3, r5
 80044dc:	fb00 f203 	mul.w	r2, r0, r3
 80044e0:	4623      	mov	r3, r4
 80044e2:	fb03 f301 	mul.w	r3, r3, r1
 80044e6:	4413      	add	r3, r2
 80044e8:	4622      	mov	r2, r4
 80044ea:	fba2 1200 	umull	r1, r2, r2, r0
 80044ee:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044f2:	460a      	mov	r2, r1
 80044f4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80044f8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80044fc:	4413      	add	r3, r2
 80044fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800450e:	4621      	mov	r1, r4
 8004510:	0e4a      	lsrs	r2, r1, #25
 8004512:	4629      	mov	r1, r5
 8004514:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8004518:	4629      	mov	r1, r5
 800451a:	164b      	asrs	r3, r1, #25
 800451c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
   var2 = (((int64_t)bme->p8) * p) >> 19;
 8004520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004524:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004528:	b21b      	sxth	r3, r3
 800452a:	17da      	asrs	r2, r3, #31
 800452c:	66bb      	str	r3, [r7, #104]	; 0x68
 800452e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004530:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004534:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8004538:	462a      	mov	r2, r5
 800453a:	fb02 f203 	mul.w	r2, r2, r3
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004542:	4621      	mov	r1, r4
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	4413      	add	r3, r2
 800454a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800454e:	4621      	mov	r1, r4
 8004550:	fba2 1201 	umull	r1, r2, r2, r1
 8004554:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004558:	460a      	mov	r2, r1
 800455a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800455e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004562:	4413      	add	r3, r2
 8004564:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8004574:	4621      	mov	r1, r4
 8004576:	0cca      	lsrs	r2, r1, #19
 8004578:	4629      	mov	r1, r5
 800457a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800457e:	4629      	mov	r1, r5
 8004580:	14cb      	asrs	r3, r1, #19
 8004582:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

   p = ((p + var1 + var2) >> 8) + (((int64_t)bme->p7) << 4);
 8004586:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800458a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800458e:	1884      	adds	r4, r0, r2
 8004590:	663c      	str	r4, [r7, #96]	; 0x60
 8004592:	eb41 0303 	adc.w	r3, r1, r3
 8004596:	667b      	str	r3, [r7, #100]	; 0x64
 8004598:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800459c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80045a0:	4621      	mov	r1, r4
 80045a2:	1889      	adds	r1, r1, r2
 80045a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80045a6:	4629      	mov	r1, r5
 80045a8:	eb43 0101 	adc.w	r1, r3, r1
 80045ac:	65f9      	str	r1, [r7, #92]	; 0x5c
 80045ae:	f04f 0000 	mov.w	r0, #0
 80045b2:	f04f 0100 	mov.w	r1, #0
 80045b6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80045ba:	4623      	mov	r3, r4
 80045bc:	0a18      	lsrs	r0, r3, #8
 80045be:	462b      	mov	r3, r5
 80045c0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80045c4:	462b      	mov	r3, r5
 80045c6:	1219      	asrs	r1, r3, #8
 80045c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045cc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80045d0:	b21b      	sxth	r3, r3
 80045d2:	17da      	asrs	r2, r3, #31
 80045d4:	653b      	str	r3, [r7, #80]	; 0x50
 80045d6:	657a      	str	r2, [r7, #84]	; 0x54
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80045e4:	464c      	mov	r4, r9
 80045e6:	0123      	lsls	r3, r4, #4
 80045e8:	4644      	mov	r4, r8
 80045ea:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80045ee:	4644      	mov	r4, r8
 80045f0:	0122      	lsls	r2, r4, #4
 80045f2:	1884      	adds	r4, r0, r2
 80045f4:	603c      	str	r4, [r7, #0]
 80045f6:	eb41 0303 	adc.w	r3, r1, r3
 80045fa:	607b      	str	r3, [r7, #4]
 80045fc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004600:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
   return (int32_t)p / 256;
 8004604:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004608:	2b00      	cmp	r3, #0
 800460a:	da00      	bge.n	800460e <BME280_Read_press+0x582>
 800460c:	33ff      	adds	r3, #255	; 0xff
 800460e:	121b      	asrs	r3, r3, #8
 8004610:	ee07 3a90 	vmov	s15, r3
 8004614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8004618:	eeb0 0a67 	vmov.f32	s0, s15
 800461c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004620:	46bd      	mov	sp, r7
 8004622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004626:	bf00      	nop
 8004628:	00000000 	.word	0x00000000

0800462c <BME280_ReadAll>:
void BME280_ReadAll(BME280_t *bme, float *T, float *P, float *H)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
   *T = BME280_Read_temp(bme);
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7ff fc52 	bl	8003ee4 <BME280_Read_temp>
 8004640:	eef0 7a40 	vmov.f32	s15, s0
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	edc3 7a00 	vstr	s15, [r3]
   *P = BME280_Read_press(bme) / 100;
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7ff fd1e 	bl	800408c <BME280_Read_press>
 8004650:	eeb0 7a40 	vmov.f32	s14, s0
 8004654:	eddf 6a09 	vldr	s13, [pc, #36]	; 800467c <BME280_ReadAll+0x50>
 8004658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	edc3 7a00 	vstr	s15, [r3]
   *H = BME280_Read_hum(bme);
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7ff fc96 	bl	8003f94 <BME280_Read_hum>
 8004668:	eef0 7a40 	vmov.f32	s15, s0
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	edc3 7a00 	vstr	s15, [r3]
}
 8004672:	bf00      	nop
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	42c80000 	.word	0x42c80000

08004680 <BME280_Init>:
void BME280_Init(BME280_t *bme, SPI_HandleTypeDef *spi, GPIO_TypeDef *CsPort, uint16_t CsPin)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	807b      	strh	r3, [r7, #2]
   bme->bme_spi       = spi;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	601a      	str	r2, [r3, #0]
   bme->bme280_CsPort = CsPort;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	605a      	str	r2, [r3, #4]
   bme->bme280_CsPin  = CsPin;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	887a      	ldrh	r2, [r7, #2]
 800469e:	855a      	strh	r2, [r3, #42]	; 0x2a
   bme->t1            = BME280_Read16LE(bme, BME280_DIG_T1);
 80046a0:	2188      	movs	r1, #136	; 0x88
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff fbac 	bl	8003e00 <BME280_Read16LE>
 80046a8:	4603      	mov	r3, r0
 80046aa:	461a      	mov	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	84da      	strh	r2, [r3, #38]	; 0x26
   bme->t2            = BME280_Read16LE(bme, BME280_DIG_T2);
 80046b0:	218a      	movs	r1, #138	; 0x8a
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff fba4 	bl	8003e00 <BME280_Read16LE>
 80046b8:	4603      	mov	r3, r0
 80046ba:	b21a      	sxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	819a      	strh	r2, [r3, #12]
   bme->t3            = BME280_Read16LE(bme, BME280_DIG_T3);
 80046c0:	218c      	movs	r1, #140	; 0x8c
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff fb9c 	bl	8003e00 <BME280_Read16LE>
 80046c8:	4603      	mov	r3, r0
 80046ca:	b21a      	sxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	81da      	strh	r2, [r3, #14]

   bme->p1 = BME280_Read16LE(bme, BME280_DIG_P1);
 80046d0:	218e      	movs	r1, #142	; 0x8e
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f7ff fb94 	bl	8003e00 <BME280_Read16LE>
 80046d8:	4603      	mov	r3, r0
 80046da:	461a      	mov	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	851a      	strh	r2, [r3, #40]	; 0x28
   bme->p2 = BME280_Read16LE(bme, BME280_DIG_P2);
 80046e0:	2190      	movs	r1, #144	; 0x90
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7ff fb8c 	bl	8003e00 <BME280_Read16LE>
 80046e8:	4603      	mov	r3, r0
 80046ea:	b21a      	sxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	821a      	strh	r2, [r3, #16]
   bme->p3 = BME280_Read16LE(bme, BME280_DIG_P3);
 80046f0:	2192      	movs	r1, #146	; 0x92
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7ff fb84 	bl	8003e00 <BME280_Read16LE>
 80046f8:	4603      	mov	r3, r0
 80046fa:	b21a      	sxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	825a      	strh	r2, [r3, #18]
   bme->p4 = BME280_Read16LE(bme, BME280_DIG_P4);
 8004700:	2194      	movs	r1, #148	; 0x94
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7ff fb7c 	bl	8003e00 <BME280_Read16LE>
 8004708:	4603      	mov	r3, r0
 800470a:	b21a      	sxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	829a      	strh	r2, [r3, #20]
   bme->p5 = BME280_Read16LE(bme, BME280_DIG_P5);
 8004710:	2196      	movs	r1, #150	; 0x96
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff fb74 	bl	8003e00 <BME280_Read16LE>
 8004718:	4603      	mov	r3, r0
 800471a:	b21a      	sxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	82da      	strh	r2, [r3, #22]
   bme->p6 = BME280_Read16LE(bme, BME280_DIG_P6);
 8004720:	2198      	movs	r1, #152	; 0x98
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7ff fb6c 	bl	8003e00 <BME280_Read16LE>
 8004728:	4603      	mov	r3, r0
 800472a:	b21a      	sxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	831a      	strh	r2, [r3, #24]
   bme->p7 = BME280_Read16LE(bme, BME280_DIG_P7);
 8004730:	219a      	movs	r1, #154	; 0x9a
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7ff fb64 	bl	8003e00 <BME280_Read16LE>
 8004738:	4603      	mov	r3, r0
 800473a:	b21a      	sxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	835a      	strh	r2, [r3, #26]
   bme->p8 = BME280_Read16LE(bme, BME280_DIG_P8);
 8004740:	219c      	movs	r1, #156	; 0x9c
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff fb5c 	bl	8003e00 <BME280_Read16LE>
 8004748:	4603      	mov	r3, r0
 800474a:	b21a      	sxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	839a      	strh	r2, [r3, #28]
   bme->p9 = BME280_Read16LE(bme, BME280_DIG_P9);
 8004750:	219e      	movs	r1, #158	; 0x9e
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f7ff fb54 	bl	8003e00 <BME280_Read16LE>
 8004758:	4603      	mov	r3, r0
 800475a:	b21a      	sxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	83da      	strh	r2, [r3, #30]

   bme->h1 = BME280_Read8(bme, BME280_DIG_H1);
 8004760:	21a1      	movs	r1, #161	; 0xa1
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff fb02 	bl	8003d6c <BME280_Read8>
 8004768:	4603      	mov	r3, r0
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	721a      	strb	r2, [r3, #8]
   bme->h2 = BME280_Read16LE(bme, BME280_DIG_H2);
 8004770:	21e1      	movs	r1, #225	; 0xe1
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f7ff fb44 	bl	8003e00 <BME280_Read16LE>
 8004778:	4603      	mov	r3, r0
 800477a:	b21a      	sxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	841a      	strh	r2, [r3, #32]
   bme->h3 = BME280_Read8(bme, BME280_DIG_H3);
 8004780:	21e3      	movs	r1, #227	; 0xe3
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7ff faf2 	bl	8003d6c <BME280_Read8>
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	725a      	strb	r2, [r3, #9]
   bme->h4 = ((BME280_Read8(bme, BME280_DIG_H4) << 4) | (BME280_Read8(bme, BME280_DIG_H4 + 1) & 0xF));
 8004790:	21e4      	movs	r1, #228	; 0xe4
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7ff faea 	bl	8003d6c <BME280_Read8>
 8004798:	4603      	mov	r3, r0
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	b21c      	sxth	r4, r3
 800479e:	21e5      	movs	r1, #229	; 0xe5
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f7ff fae3 	bl	8003d6c <BME280_Read8>
 80047a6:	4603      	mov	r3, r0
 80047a8:	b21b      	sxth	r3, r3
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	b21b      	sxth	r3, r3
 80047b0:	4323      	orrs	r3, r4
 80047b2:	b21a      	sxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	845a      	strh	r2, [r3, #34]	; 0x22
   bme->h5 = ((BME280_Read8(bme, BME280_DIG_H5 + 1) << 4) | (BME280_Read8(bme, BME280_DIG_H5) >> 4));
 80047b8:	21e6      	movs	r1, #230	; 0xe6
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f7ff fad6 	bl	8003d6c <BME280_Read8>
 80047c0:	4603      	mov	r3, r0
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	b21c      	sxth	r4, r3
 80047c6:	21e5      	movs	r1, #229	; 0xe5
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f7ff facf 	bl	8003d6c <BME280_Read8>
 80047ce:	4603      	mov	r3, r0
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	b21b      	sxth	r3, r3
 80047d6:	4323      	orrs	r3, r4
 80047d8:	b21a      	sxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	849a      	strh	r2, [r3, #36]	; 0x24
   bme->h6 = (int8_t)BME280_Read8(bme, BME280_DIG_H6);
 80047de:	21e7      	movs	r1, #231	; 0xe7
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f7ff fac3 	bl	8003d6c <BME280_Read8>
 80047e6:	4603      	mov	r3, r0
 80047e8:	b25a      	sxtb	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	729a      	strb	r2, [r3, #10]
   BME280_Write8(bme, BME280_HUM_CONTROL, 0b00000100);
 80047ee:	2204      	movs	r2, #4
 80047f0:	21f2      	movs	r1, #242	; 0xf2
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff fae1 	bl	8003dba <BME280_Write8>
   BME280_Write8(bme, BME280_CONTROL, 0b10110111);
 80047f8:	22b7      	movs	r2, #183	; 0xb7
 80047fa:	21f4      	movs	r1, #244	; 0xf4
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f7ff fadc 	bl	8003dba <BME280_Write8>
   BME280_Write8(bme, BME280_CONFIG, 0b00000000);
 8004802:	2200      	movs	r2, #0
 8004804:	21f5      	movs	r1, #245	; 0xf5
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff fad7 	bl	8003dba <BME280_Write8>
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	bd90      	pop	{r4, r7, pc}

08004814 <Crc>:
#include "cmsis_os.h"
#include "main.h"
int RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
int k              = 0;
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
   taskENTER_CRITICAL();
 8004820:	f014 fd68 	bl	80192f4 <vPortEnterCritical>
   PreviuseCRC ^= data[0];
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4053      	eors	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8004830:	2301      	movs	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e032      	b.n	800489c <Crc+0x88>
   {
      uint32_t temp = data[i];
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	4413      	add	r3, r2
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	613b      	str	r3, [r7, #16]
      if(temp == 0x00000000)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d115      	bne.n	8004872 <Crc+0x5e>
      {
         temp = RandomNumber[k % 12];
 8004846:	4b1c      	ldr	r3, [pc, #112]	; (80048b8 <Crc+0xa4>)
 8004848:	6819      	ldr	r1, [r3, #0]
 800484a:	4b1c      	ldr	r3, [pc, #112]	; (80048bc <Crc+0xa8>)
 800484c:	fb83 2301 	smull	r2, r3, r3, r1
 8004850:	105a      	asrs	r2, r3, #1
 8004852:	17cb      	asrs	r3, r1, #31
 8004854:	1ad2      	subs	r2, r2, r3
 8004856:	4613      	mov	r3, r2
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	1aca      	subs	r2, r1, r3
 8004860:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <Crc+0xac>)
 8004862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004866:	613b      	str	r3, [r7, #16]
         k++;
 8004868:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <Crc+0xa4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	4a12      	ldr	r2, [pc, #72]	; (80048b8 <Crc+0xa4>)
 8004870:	6013      	str	r3, [r2, #0]
      }
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4053      	eors	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
      if(PreviuseCRC & 0x80000000)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	da03      	bge.n	8004890 <Crc+0x7c>
      {
         PreviuseCRC ^= 0xABC245C2;
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <Crc+0xb0>)
 800488c:	4053      	eors	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
      }
      PreviuseCRC <<= 1;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	3301      	adds	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d3c8      	bcc.n	8004836 <Crc+0x22>
   }
   k = 0;
 80048a4:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <Crc+0xa4>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
   taskEXIT_CRITICAL();
 80048aa:	f014 fd53 	bl	8019354 <vPortExitCritical>
   return PreviuseCRC;
 80048ae:	68fb      	ldr	r3, [r7, #12]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	200004c0 	.word	0x200004c0
 80048bc:	2aaaaaab 	.word	0x2aaaaaab
 80048c0:	20000024 	.word	0x20000024
 80048c4:	abc245c2 	.word	0xabc245c2

080048c8 <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
   uint8_t temp = 1;
 80048d4:	2301      	movs	r3, #1
 80048d6:	75fb      	strb	r3, [r7, #23]
   for(int i = 0; i < DataLength; i++)
 80048d8:	2300      	movs	r3, #0
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	e03b      	b.n	8004956 <RepareMessage+0x8e>
   {
      for(int j = 0; j < 8; j++)
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	e032      	b.n	800494a <RepareMessage+0x82>
      {
         data[i] ^= (temp << j);
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	4413      	add	r3, r2
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	b25a      	sxtb	r2, r3
 80048ee:	7df9      	ldrb	r1, [r7, #23]
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	fa01 f303 	lsl.w	r3, r1, r3
 80048f6:	b25b      	sxtb	r3, r3
 80048f8:	4053      	eors	r3, r2
 80048fa:	b259      	sxtb	r1, r3
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	4413      	add	r3, r2
 8004902:	b2ca      	uxtb	r2, r1
 8004904:	701a      	strb	r2, [r3, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3b04      	subs	r3, #4
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	4619      	mov	r1, r3
 800490e:	f04f 30ff 	mov.w	r0, #4294967295
 8004912:	f7ff ff7f 	bl	8004814 <Crc>
 8004916:	4602      	mov	r2, r0
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4293      	cmp	r3, r2
 800491c:	d101      	bne.n	8004922 <RepareMessage+0x5a>
         {
            return CRC_OK;
 800491e:	2301      	movs	r3, #1
 8004920:	e01e      	b.n	8004960 <RepareMessage+0x98>
         }
         else
         {
            data[i] ^= (temp << j);
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	4413      	add	r3, r2
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	b25a      	sxtb	r2, r3
 800492c:	7df9      	ldrb	r1, [r7, #23]
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	fa01 f303 	lsl.w	r3, r1, r3
 8004934:	b25b      	sxtb	r3, r3
 8004936:	4053      	eors	r3, r2
 8004938:	b259      	sxtb	r1, r3
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	4413      	add	r3, r2
 8004940:	b2ca      	uxtb	r2, r1
 8004942:	701a      	strb	r2, [r3, #0]
      for(int j = 0; j < 8; j++)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	3301      	adds	r3, #1
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b07      	cmp	r3, #7
 800494e:	ddc9      	ble.n	80048e4 <RepareMessage+0x1c>
   for(int i = 0; i < DataLength; i++)
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	3301      	adds	r3, #1
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	429a      	cmp	r2, r3
 800495c:	d8bf      	bhi.n	80048de <RepareMessage+0x16>
         }
      }
   }
   return CRC_ERROR;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3720      	adds	r7, #32
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800496e:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <MX_DMA_Init+0x44>)
 8004970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004972:	4a0e      	ldr	r2, [pc, #56]	; (80049ac <MX_DMA_Init+0x44>)
 8004974:	f043 0304 	orr.w	r3, r3, #4
 8004978:	6493      	str	r3, [r2, #72]	; 0x48
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <MX_DMA_Init+0x44>)
 800497c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	607b      	str	r3, [r7, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004986:	4b09      	ldr	r3, [pc, #36]	; (80049ac <MX_DMA_Init+0x44>)
 8004988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498a:	4a08      	ldr	r2, [pc, #32]	; (80049ac <MX_DMA_Init+0x44>)
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	6493      	str	r3, [r2, #72]	; 0x48
 8004992:	4b06      	ldr	r3, [pc, #24]	; (80049ac <MX_DMA_Init+0x44>)
 8004994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	683b      	ldr	r3, [r7, #0]

}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000

080049b0 <e_papier_reset>:
const unsigned char lut_bb[] = {
   0x80, 0x17, 0x00, 0x00, 0x00, 0x02, 0x90, 0x17, 0x17, 0x00, 0x00, 0x02, 0x80, 0x0A, 0x01, 0x00, 0x00, 0x01, 0x50, 0x0E, 0x0E,
   0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
void e_papier_reset(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 80049b4:	2201      	movs	r2, #1
 80049b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049ba:	480d      	ldr	r0, [pc, #52]	; (80049f0 <e_papier_reset+0x40>)
 80049bc:	f00a fa6c 	bl	800ee98 <HAL_GPIO_WritePin>
   osDelay(200);
 80049c0:	20c8      	movs	r0, #200	; 0xc8
 80049c2:	f010 ffa3 	bl	801590c <osDelay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 0);
 80049c6:	2200      	movs	r2, #0
 80049c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049cc:	4808      	ldr	r0, [pc, #32]	; (80049f0 <e_papier_reset+0x40>)
 80049ce:	f00a fa63 	bl	800ee98 <HAL_GPIO_WritePin>
   osDelay(200);
 80049d2:	20c8      	movs	r0, #200	; 0xc8
 80049d4:	f010 ff9a 	bl	801590c <osDelay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 80049d8:	2201      	movs	r2, #1
 80049da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049de:	4804      	ldr	r0, [pc, #16]	; (80049f0 <e_papier_reset+0x40>)
 80049e0:	f00a fa5a 	bl	800ee98 <HAL_GPIO_WritePin>
   osDelay(200);
 80049e4:	20c8      	movs	r0, #200	; 0xc8
 80049e6:	f010 ff91 	bl	801590c <osDelay>
}
 80049ea:	bf00      	nop
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	48000400 	.word	0x48000400

080049f4 <e_papier_send_command>:
void e_papier_send_command(uint8_t command)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 0);
 80049fe:	2200      	movs	r2, #0
 8004a00:	2101      	movs	r1, #1
 8004a02:	480c      	ldr	r0, [pc, #48]	; (8004a34 <e_papier_send_command+0x40>)
 8004a04:	f00a fa48 	bl	800ee98 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	4809      	ldr	r0, [pc, #36]	; (8004a34 <e_papier_send_command+0x40>)
 8004a0e:	f00a fa43 	bl	800ee98 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &command, 1, 1000);
 8004a12:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <e_papier_send_command+0x44>)
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	1df9      	adds	r1, r7, #7
 8004a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f00c fc40 	bl	80112a2 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 8004a22:	2201      	movs	r2, #1
 8004a24:	2102      	movs	r1, #2
 8004a26:	4803      	ldr	r0, [pc, #12]	; (8004a34 <e_papier_send_command+0x40>)
 8004a28:	f00a fa36 	bl	800ee98 <HAL_GPIO_WritePin>
}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	48000400 	.word	0x48000400
 8004a38:	200004c4 	.word	0x200004c4

08004a3c <e_papier_send_data>:
void e_papier_send_data(uint8_t data)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 1);
 8004a46:	2201      	movs	r2, #1
 8004a48:	2101      	movs	r1, #1
 8004a4a:	480c      	ldr	r0, [pc, #48]	; (8004a7c <e_papier_send_data+0x40>)
 8004a4c:	f00a fa24 	bl	800ee98 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8004a50:	2200      	movs	r2, #0
 8004a52:	2102      	movs	r1, #2
 8004a54:	4809      	ldr	r0, [pc, #36]	; (8004a7c <e_papier_send_data+0x40>)
 8004a56:	f00a fa1f 	bl	800ee98 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &data, 1, 1000);
 8004a5a:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <e_papier_send_data+0x44>)
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	1df9      	adds	r1, r7, #7
 8004a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a64:	2201      	movs	r2, #1
 8004a66:	f00c fc1c 	bl	80112a2 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	4803      	ldr	r0, [pc, #12]	; (8004a7c <e_papier_send_data+0x40>)
 8004a70:	f00a fa12 	bl	800ee98 <HAL_GPIO_WritePin>
}
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	48000400 	.word	0x48000400
 8004a80:	200004c4 	.word	0x200004c4

08004a84 <e_papier_wait_until_idle>:
void e_papier_wait_until_idle(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8004a88:	e002      	b.n	8004a90 <e_papier_wait_until_idle+0xc>
   {
      osDelay(100);
 8004a8a:	2064      	movs	r0, #100	; 0x64
 8004a8c:	f010 ff3e 	bl	801590c <osDelay>
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8004a90:	2104      	movs	r1, #4
 8004a92:	4804      	ldr	r0, [pc, #16]	; (8004aa4 <e_papier_wait_until_idle+0x20>)
 8004a94:	f00a f9e8 	bl	800ee68 <HAL_GPIO_ReadPin>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f5      	beq.n	8004a8a <e_papier_wait_until_idle+0x6>
   }
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	48000400 	.word	0x48000400

08004aa8 <e_papier_set_pixel>:
void e_papier_set_pixel(uint16_t x, uint16_t y, color_t color)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	80fb      	strh	r3, [r7, #6]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	80bb      	strh	r3, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	70fb      	strb	r3, [r7, #3]
   if(x >= EPD_WIDTH || x < 0 || y >= EPD_HEIGHT || y < 0)
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004ac0:	d247      	bcs.n	8004b52 <e_papier_set_pixel+0xaa>
 8004ac2:	88bb      	ldrh	r3, [r7, #4]
 8004ac4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004ac8:	d243      	bcs.n	8004b52 <e_papier_set_pixel+0xaa>
   {
      return;
   }
   if(color == WHITE)
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d120      	bne.n	8004b12 <e_papier_set_pixel+0x6a>
   {
      BufferEpapier[x / 8 + y * EPD_WIDTH / 8] |= (0x80 > (x % 8));
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	08db      	lsrs	r3, r3, #3
 8004ad4:	b299      	uxth	r1, r3
 8004ad6:	4608      	mov	r0, r1
 8004ad8:	88bb      	ldrh	r3, [r7, #4]
 8004ada:	2232      	movs	r2, #50	; 0x32
 8004adc:	fb02 f303 	mul.w	r3, r2, r3
 8004ae0:	4403      	add	r3, r0
 8004ae2:	4a1f      	ldr	r2, [pc, #124]	; (8004b60 <e_papier_set_pixel+0xb8>)
 8004ae4:	5cd3      	ldrb	r3, [r2, r3]
 8004ae6:	b25a      	sxtb	r2, r3
 8004ae8:	88fb      	ldrh	r3, [r7, #6]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b7f      	cmp	r3, #127	; 0x7f
 8004af2:	bf94      	ite	ls
 8004af4:	2301      	movls	r3, #1
 8004af6:	2300      	movhi	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	b25b      	sxtb	r3, r3
 8004afc:	4313      	orrs	r3, r2
 8004afe:	b258      	sxtb	r0, r3
 8004b00:	88bb      	ldrh	r3, [r7, #4]
 8004b02:	2232      	movs	r2, #50	; 0x32
 8004b04:	fb02 f303 	mul.w	r3, r2, r3
 8004b08:	440b      	add	r3, r1
 8004b0a:	b2c1      	uxtb	r1, r0
 8004b0c:	4a14      	ldr	r2, [pc, #80]	; (8004b60 <e_papier_set_pixel+0xb8>)
 8004b0e:	54d1      	strb	r1, [r2, r3]
 8004b10:	e020      	b.n	8004b54 <e_papier_set_pixel+0xac>
   }
   else
   {
      BufferEpapier[x / 8 + y * EPD_WIDTH / 8] &= ~(0x80 >> (x % 8));
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	08db      	lsrs	r3, r3, #3
 8004b16:	b298      	uxth	r0, r3
 8004b18:	4601      	mov	r1, r0
 8004b1a:	88bb      	ldrh	r3, [r7, #4]
 8004b1c:	2232      	movs	r2, #50	; 0x32
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	440b      	add	r3, r1
 8004b24:	4a0e      	ldr	r2, [pc, #56]	; (8004b60 <e_papier_set_pixel+0xb8>)
 8004b26:	5cd3      	ldrb	r3, [r2, r3]
 8004b28:	b25a      	sxtb	r2, r3
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	2180      	movs	r1, #128	; 0x80
 8004b32:	fa41 f303 	asr.w	r3, r1, r3
 8004b36:	b25b      	sxtb	r3, r3
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	b25b      	sxtb	r3, r3
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	b259      	sxtb	r1, r3
 8004b40:	88bb      	ldrh	r3, [r7, #4]
 8004b42:	2232      	movs	r2, #50	; 0x32
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	4403      	add	r3, r0
 8004b4a:	b2c9      	uxtb	r1, r1
 8004b4c:	4a04      	ldr	r2, [pc, #16]	; (8004b60 <e_papier_set_pixel+0xb8>)
 8004b4e:	54d1      	strb	r1, [r2, r3]
 8004b50:	e000      	b.n	8004b54 <e_papier_set_pixel+0xac>
      return;
 8004b52:	bf00      	nop
   }
}
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	200004c8 	.word	0x200004c8

08004b64 <e_papier_set_lut>:
void e_papier_set_lut(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
   uint16_t count;
   e_papier_send_command(LUT_FOR_VCOM); // g vcom
 8004b6a:	2020      	movs	r0, #32
 8004b6c:	f7ff ff42 	bl	80049f4 <e_papier_send_command>
   for(count = 0; count < 44; count++)
 8004b70:	2300      	movs	r3, #0
 8004b72:	80fb      	strh	r3, [r7, #6]
 8004b74:	e008      	b.n	8004b88 <e_papier_set_lut+0x24>
   {
      e_papier_send_data(lut_vcom0[count]);
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	4a2b      	ldr	r2, [pc, #172]	; (8004c28 <e_papier_set_lut+0xc4>)
 8004b7a:	5cd3      	ldrb	r3, [r2, r3]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff ff5d 	bl	8004a3c <e_papier_send_data>
   for(count = 0; count < 44; count++)
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	3301      	adds	r3, #1
 8004b86:	80fb      	strh	r3, [r7, #6]
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	2b2b      	cmp	r3, #43	; 0x2b
 8004b8c:	d9f3      	bls.n	8004b76 <e_papier_set_lut+0x12>
   }

   e_papier_send_command(LUT_WHITE_TO_WHITE);
 8004b8e:	2021      	movs	r0, #33	; 0x21
 8004b90:	f7ff ff30 	bl	80049f4 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8004b94:	2300      	movs	r3, #0
 8004b96:	80fb      	strh	r3, [r7, #6]
 8004b98:	e008      	b.n	8004bac <e_papier_set_lut+0x48>
   {
      e_papier_send_data(lut_ww[count]);
 8004b9a:	88fb      	ldrh	r3, [r7, #6]
 8004b9c:	4a23      	ldr	r2, [pc, #140]	; (8004c2c <e_papier_set_lut+0xc8>)
 8004b9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff ff4b 	bl	8004a3c <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8004ba6:	88fb      	ldrh	r3, [r7, #6]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	80fb      	strh	r3, [r7, #6]
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	2b29      	cmp	r3, #41	; 0x29
 8004bb0:	d9f3      	bls.n	8004b9a <e_papier_set_lut+0x36>
   }

   e_papier_send_command(LUT_BLACK_TO_WHITE);
 8004bb2:	2022      	movs	r0, #34	; 0x22
 8004bb4:	f7ff ff1e 	bl	80049f4 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	80fb      	strh	r3, [r7, #6]
 8004bbc:	e008      	b.n	8004bd0 <e_papier_set_lut+0x6c>
   {
      e_papier_send_data(lut_bw[count]);
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	4a1b      	ldr	r2, [pc, #108]	; (8004c30 <e_papier_set_lut+0xcc>)
 8004bc2:	5cd3      	ldrb	r3, [r2, r3]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff ff39 	bl	8004a3c <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	80fb      	strh	r3, [r7, #6]
 8004bd0:	88fb      	ldrh	r3, [r7, #6]
 8004bd2:	2b29      	cmp	r3, #41	; 0x29
 8004bd4:	d9f3      	bls.n	8004bbe <e_papier_set_lut+0x5a>
   }

   e_papier_send_command(LUT_WHITE_TO_BLACK);
 8004bd6:	2023      	movs	r0, #35	; 0x23
 8004bd8:	f7ff ff0c 	bl	80049f4 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8004bdc:	2300      	movs	r3, #0
 8004bde:	80fb      	strh	r3, [r7, #6]
 8004be0:	e008      	b.n	8004bf4 <e_papier_set_lut+0x90>
   {
      e_papier_send_data(lut_wb[count]);
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <e_papier_set_lut+0xd0>)
 8004be6:	5cd3      	ldrb	r3, [r2, r3]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff ff27 	bl	8004a3c <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	80fb      	strh	r3, [r7, #6]
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	2b29      	cmp	r3, #41	; 0x29
 8004bf8:	d9f3      	bls.n	8004be2 <e_papier_set_lut+0x7e>
   }

   e_papier_send_command(LUT_BLACK_TO_BLACK);
 8004bfa:	2024      	movs	r0, #36	; 0x24
 8004bfc:	f7ff fefa 	bl	80049f4 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8004c00:	2300      	movs	r3, #0
 8004c02:	80fb      	strh	r3, [r7, #6]
 8004c04:	e008      	b.n	8004c18 <e_papier_set_lut+0xb4>
   {
      e_papier_send_data(lut_bb[count]);
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	4a0b      	ldr	r2, [pc, #44]	; (8004c38 <e_papier_set_lut+0xd4>)
 8004c0a:	5cd3      	ldrb	r3, [r2, r3]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff ff15 	bl	8004a3c <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	3301      	adds	r3, #1
 8004c16:	80fb      	strh	r3, [r7, #6]
 8004c18:	88fb      	ldrh	r3, [r7, #6]
 8004c1a:	2b29      	cmp	r3, #41	; 0x29
 8004c1c:	d9f3      	bls.n	8004c06 <e_papier_set_lut+0xa2>
   }
}
 8004c1e:	bf00      	nop
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	08024d4c 	.word	0x08024d4c
 8004c2c:	08024d78 	.word	0x08024d78
 8004c30:	08024da4 	.word	0x08024da4
 8004c34:	08024dd0 	.word	0x08024dd0
 8004c38:	08024dfc 	.word	0x08024dfc

08004c3c <e_papier_turn_on_display>:
      }
   }
   // e_papier_wait_until_idle();
}
void e_papier_turn_on_display(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
   e_papier_send_command(DISPLAY_REFRESH);
 8004c40:	2012      	movs	r0, #18
 8004c42:	f7ff fed7 	bl	80049f4 <e_papier_send_command>
   e_papier_wait_until_idle();
 8004c46:	f7ff ff1d 	bl	8004a84 <e_papier_wait_until_idle>
}
 8004c4a:	bf00      	nop
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <e_papier_display>:
void e_papier_display(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
   uint16_t Width, Height;
   Width  = (EPD_WIDTH % 8 == 0) ? (EPD_WIDTH / 8) : (EPD_WIDTH / 8 + 1);
 8004c56:	2332      	movs	r3, #50	; 0x32
 8004c58:	807b      	strh	r3, [r7, #2]
   Height = EPD_HEIGHT;
 8004c5a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004c5e:	803b      	strh	r3, [r7, #0]
   if(osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DARK_MODE, osFlagsWaitAny | osFlagsNoClear, 1) != osFlagsErrorTimeout)
 8004c60:	4b32      	ldr	r3, [pc, #200]	; (8004d2c <e_papier_display+0xdc>)
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	2301      	movs	r3, #1
 8004c66:	2202      	movs	r2, #2
 8004c68:	2140      	movs	r1, #64	; 0x40
 8004c6a:	f010 ffb1 	bl	8015bd0 <osEventFlagsWait>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f113 0f02 	cmn.w	r3, #2
 8004c74:	d015      	beq.n	8004ca2 <e_papier_display+0x52>
   {
      for(int i = 0; i < sizeof(BufferEpapier); i++)
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	e00d      	b.n	8004c98 <e_papier_display+0x48>
      {
         BufferEpapier[i] = ~BufferEpapier[i];
 8004c7c:	4a2c      	ldr	r2, [pc, #176]	; (8004d30 <e_papier_display+0xe0>)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	43db      	mvns	r3, r3
 8004c86:	b2d9      	uxtb	r1, r3
 8004c88:	4a29      	ldr	r2, [pc, #164]	; (8004d30 <e_papier_display+0xe0>)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	460a      	mov	r2, r1
 8004c90:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i < sizeof(BufferEpapier); i++)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3301      	adds	r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f643 2297 	movw	r2, #14999	; 0x3a97
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d9ec      	bls.n	8004c7c <e_papier_display+0x2c>
      }
   }
   e_papier_send_command(DATA_START_TRANSMISSION_1);
 8004ca2:	2010      	movs	r0, #16
 8004ca4:	f7ff fea6 	bl	80049f4 <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 8004ca8:	2300      	movs	r3, #0
 8004caa:	817b      	strh	r3, [r7, #10]
 8004cac:	e00f      	b.n	8004cce <e_papier_display+0x7e>
   {
      for(uint16_t i = 0; i < Width; i++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	813b      	strh	r3, [r7, #8]
 8004cb2:	e005      	b.n	8004cc0 <e_papier_display+0x70>
      {
         e_papier_send_data(0XFF);
 8004cb4:	20ff      	movs	r0, #255	; 0xff
 8004cb6:	f7ff fec1 	bl	8004a3c <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 8004cba:	893b      	ldrh	r3, [r7, #8]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	813b      	strh	r3, [r7, #8]
 8004cc0:	893a      	ldrh	r2, [r7, #8]
 8004cc2:	887b      	ldrh	r3, [r7, #2]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d3f5      	bcc.n	8004cb4 <e_papier_display+0x64>
   for(uint16_t j = 0; j < Height; j++)
 8004cc8:	897b      	ldrh	r3, [r7, #10]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	817b      	strh	r3, [r7, #10]
 8004cce:	897a      	ldrh	r2, [r7, #10]
 8004cd0:	883b      	ldrh	r3, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d3eb      	bcc.n	8004cae <e_papier_display+0x5e>
      }
   }
   e_papier_send_command(DATA_START_TRANSMISSION_2);
 8004cd6:	2013      	movs	r0, #19
 8004cd8:	f7ff fe8c 	bl	80049f4 <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	80fb      	strh	r3, [r7, #6]
 8004ce0:	e017      	b.n	8004d12 <e_papier_display+0xc2>
   {
      for(uint16_t i = 0; i < Width; i++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	80bb      	strh	r3, [r7, #4]
 8004ce6:	e00d      	b.n	8004d04 <e_papier_display+0xb4>
      {
         e_papier_send_data(BufferEpapier[i + j * Width]);
 8004ce8:	88ba      	ldrh	r2, [r7, #4]
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	8879      	ldrh	r1, [r7, #2]
 8004cee:	fb01 f303 	mul.w	r3, r1, r3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	4a0e      	ldr	r2, [pc, #56]	; (8004d30 <e_papier_display+0xe0>)
 8004cf6:	5cd3      	ldrb	r3, [r2, r3]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff fe9f 	bl	8004a3c <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 8004cfe:	88bb      	ldrh	r3, [r7, #4]
 8004d00:	3301      	adds	r3, #1
 8004d02:	80bb      	strh	r3, [r7, #4]
 8004d04:	88ba      	ldrh	r2, [r7, #4]
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d3ed      	bcc.n	8004ce8 <e_papier_display+0x98>
   for(uint16_t j = 0; j < Height; j++)
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	80fb      	strh	r3, [r7, #6]
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	883b      	ldrh	r3, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d3e3      	bcc.n	8004ce2 <e_papier_display+0x92>
      }
   }
   e_papier_turn_on_display();
 8004d1a:	f7ff ff8f 	bl	8004c3c <e_papier_turn_on_display>
   e_papier_wait_until_idle();
 8004d1e:	f7ff feb1 	bl	8004a84 <e_papier_wait_until_idle>
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	200040c4 	.word	0x200040c4
 8004d30:	200004c8 	.word	0x200004c8

08004d34 <e_papier_clear>:
void e_papier_clear()
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
   memset(BufferEpapier, 0xff, EPD_HEIGHT * EPD_WIDTH / 8);
 8004d38:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004d3c:	21ff      	movs	r1, #255	; 0xff
 8004d3e:	4802      	ldr	r0, [pc, #8]	; (8004d48 <e_papier_clear+0x14>)
 8004d40:	f014 fe1e 	bl	8019980 <memset>
}
 8004d44:	bf00      	nop
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	200004c8 	.word	0x200004c8

08004d4c <e_papier_init>:
void e_papier_init(SPI_HandleTypeDef *spi)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
   e_papier_spi = spi;
 8004d54:	4a2b      	ldr	r2, [pc, #172]	; (8004e04 <e_papier_init+0xb8>)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6013      	str	r3, [r2, #0]
   e_papier_reset();
 8004d5a:	f7ff fe29 	bl	80049b0 <e_papier_reset>

   e_papier_send_command(POWER_SETTING); // POWER SETTING
 8004d5e:	2001      	movs	r0, #1
 8004d60:	f7ff fe48 	bl	80049f4 <e_papier_send_command>
   e_papier_send_data(0x03);
 8004d64:	2003      	movs	r0, #3
 8004d66:	f7ff fe69 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x00);
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	f7ff fe66 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x2b);
 8004d70:	202b      	movs	r0, #43	; 0x2b
 8004d72:	f7ff fe63 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x2b);
 8004d76:	202b      	movs	r0, #43	; 0x2b
 8004d78:	f7ff fe60 	bl	8004a3c <e_papier_send_data>

   e_papier_send_command(BOOSTER_SOFT_START); // boost soft start
 8004d7c:	2006      	movs	r0, #6
 8004d7e:	f7ff fe39 	bl	80049f4 <e_papier_send_command>
   e_papier_send_data(0x17);                  // A
 8004d82:	2017      	movs	r0, #23
 8004d84:	f7ff fe5a 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x17);                  // B
 8004d88:	2017      	movs	r0, #23
 8004d8a:	f7ff fe57 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x17);                  // C
 8004d8e:	2017      	movs	r0, #23
 8004d90:	f7ff fe54 	bl	8004a3c <e_papier_send_data>

   e_papier_send_command(POWER_ON);
 8004d94:	2004      	movs	r0, #4
 8004d96:	f7ff fe2d 	bl	80049f4 <e_papier_send_command>
   e_papier_wait_until_idle();
 8004d9a:	f7ff fe73 	bl	8004a84 <e_papier_wait_until_idle>

   e_papier_send_command(PANEL_SETTING); // panel setting
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f7ff fe28 	bl	80049f4 <e_papier_send_command>
   e_papier_send_data(0xbf);             // KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 8004da4:	20bf      	movs	r0, #191	; 0xbf
 8004da6:	f7ff fe49 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x0d);
 8004daa:	200d      	movs	r0, #13
 8004dac:	f7ff fe46 	bl	8004a3c <e_papier_send_data>

   e_papier_send_command(PLL_CONTROL); // PLL setting
 8004db0:	2030      	movs	r0, #48	; 0x30
 8004db2:	f7ff fe1f 	bl	80049f4 <e_papier_send_command>
   e_papier_send_data(0x3C);           // 3A 100HZ   29 150Hz 39 200HZ	31 171HZ
 8004db6:	203c      	movs	r0, #60	; 0x3c
 8004db8:	f7ff fe40 	bl	8004a3c <e_papier_send_data>

   e_papier_send_command(0x61); // resolution setting
 8004dbc:	2061      	movs	r0, #97	; 0x61
 8004dbe:	f7ff fe19 	bl	80049f4 <e_papier_send_command>
   e_papier_send_data(0x01);
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	f7ff fe3a 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x90); // 128
 8004dc8:	2090      	movs	r0, #144	; 0x90
 8004dca:	f7ff fe37 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x01); //
 8004dce:	2001      	movs	r0, #1
 8004dd0:	f7ff fe34 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x2c);
 8004dd4:	202c      	movs	r0, #44	; 0x2c
 8004dd6:	f7ff fe31 	bl	8004a3c <e_papier_send_data>

   e_papier_send_command(0x82); // vcom_DC setting
 8004dda:	2082      	movs	r0, #130	; 0x82
 8004ddc:	f7ff fe0a 	bl	80049f4 <e_papier_send_command>
   e_papier_send_data(0x28);
 8004de0:	2028      	movs	r0, #40	; 0x28
 8004de2:	f7ff fe2b 	bl	8004a3c <e_papier_send_data>

   e_papier_send_command(0X50); // VCOM AND DATA INTERVAL SETTING
 8004de6:	2050      	movs	r0, #80	; 0x50
 8004de8:	f7ff fe04 	bl	80049f4 <e_papier_send_command>
   e_papier_send_data(0x97);    // 97white border 77black border		VBDF 17|D7 VBDW 97 VBDB 57		VBDF F7 VBDW 77 VBDB 37  VBDR B7
 8004dec:	2097      	movs	r0, #151	; 0x97
 8004dee:	f7ff fe25 	bl	8004a3c <e_papier_send_data>

   e_papier_set_lut();
 8004df2:	f7ff feb7 	bl	8004b64 <e_papier_set_lut>
   e_papier_clear();
 8004df6:	f7ff ff9d 	bl	8004d34 <e_papier_clear>
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	200004c4 	.word	0x200004c4

08004e08 <flash_CsLow>:

#include "flash_spi.h"

#include "cmsis_os.h"
void flash_CsLow(flash_t *flash)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 0);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68d8      	ldr	r0, [r3, #12]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	891b      	ldrh	r3, [r3, #8]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f00a f83c 	bl	800ee98 <HAL_GPIO_WritePin>
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <flash_CsHigh>:
void flash_CsHigh(flash_t *flash)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 1);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68d8      	ldr	r0, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	891b      	ldrh	r3, [r3, #8]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f00a f82c 	bl	800ee98 <HAL_GPIO_WritePin>
}
 8004e40:	bf00      	nop
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <flash_WriteCommand>:
void flash_WriteCommand(flash_t *flash, uint8_t *command, uint8_t size)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	4613      	mov	r3, r2
 8004e54:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Transmit(flash->flash_spi, command, size, 1000);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	f00c fa1d 	bl	80112a2 <HAL_SPI_Transmit>
}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <flash_ReadCommand>:
void flash_ReadCommand(flash_t *flash, uint8_t *command, uint8_t size)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Receive(flash->flash_spi, command, size, 1000);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	f00c fb77 	bl	801157e <HAL_SPI_Receive>
}
 8004e90:	bf00      	nop
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <flash_WriteData>:
void flash_WriteData(flash_t *flash, uint8_t *data, uint32_t size)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
   HAL_SPI_Transmit(flash->flash_spi, data, size, 1000);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004eb0:	68b9      	ldr	r1, [r7, #8]
 8004eb2:	f00c f9f6 	bl	80112a2 <HAL_SPI_Transmit>
}
 8004eb6:	bf00      	nop
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <flash_ReadData>:
void flash_ReadData(flash_t *flash, uint8_t *data, uint32_t size)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	607a      	str	r2, [r7, #4]
   HAL_SPI_Receive(flash->flash_spi, data, size, 1000);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	f00c fb51 	bl	801157e <HAL_SPI_Receive>
}
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <flash_ReadSR1>:
uint8_t flash_ReadSR1(flash_t *flash)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
   flash_CsLow(flash);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff ff8b 	bl	8004e08 <flash_CsLow>
   uint8_t command = READ_SR1;
 8004ef2:	2305      	movs	r3, #5
 8004ef4:	73fb      	strb	r3, [r7, #15]
   flash_WriteCommand(flash, &command, 1);
 8004ef6:	f107 030f 	add.w	r3, r7, #15
 8004efa:	2201      	movs	r2, #1
 8004efc:	4619      	mov	r1, r3
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff ffa2 	bl	8004e48 <flash_WriteCommand>
   flash_ReadCommand(flash, &command, 1);
 8004f04:	f107 030f 	add.w	r3, r7, #15
 8004f08:	2201      	movs	r2, #1
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff ffaf 	bl	8004e70 <flash_ReadCommand>
   flash_CsHigh(flash);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff ff88 	bl	8004e28 <flash_CsHigh>
   return command;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <flash_Reset>:
   flash_ReadCommand(flash, &command, 1);
   flash_CsHigh(flash);
   return command;
}
void flash_Reset(flash_t *flash)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
   uint8_t command = ENABLE_RESET;
 8004f2a:	2366      	movs	r3, #102	; 0x66
 8004f2c:	73fb      	strb	r3, [r7, #15]
   flash_CsLow(flash);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff ff6a 	bl	8004e08 <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8004f34:	f107 030f 	add.w	r3, r7, #15
 8004f38:	2201      	movs	r2, #1
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ff83 	bl	8004e48 <flash_WriteCommand>
   flash_CsHigh(flash);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff ff70 	bl	8004e28 <flash_CsHigh>
   command = RESET;
 8004f48:	2399      	movs	r3, #153	; 0x99
 8004f4a:	73fb      	strb	r3, [r7, #15]
   flash_CsLow(flash);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ff5b 	bl	8004e08 <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8004f52:	f107 030f 	add.w	r3, r7, #15
 8004f56:	2201      	movs	r2, #1
 8004f58:	4619      	mov	r1, r3
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff ff74 	bl	8004e48 <flash_WriteCommand>
   flash_CsHigh(flash);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff ff61 	bl	8004e28 <flash_CsHigh>
}
 8004f66:	bf00      	nop
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <flash_SetWELBit>:
void flash_SetWELBit(flash_t *flash)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
   flash_CsLow(flash);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff ff46 	bl	8004e08 <flash_CsLow>
   uint8_t command = WRITE_ENABLE;
 8004f7c:	2306      	movs	r3, #6
 8004f7e:	73fb      	strb	r3, [r7, #15]
   flash_WriteCommand(flash, &command, 1);
 8004f80:	f107 030f 	add.w	r3, r7, #15
 8004f84:	2201      	movs	r2, #1
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff ff5d 	bl	8004e48 <flash_WriteCommand>
   flash_CsHigh(flash);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff ff4a 	bl	8004e28 <flash_CsHigh>
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <flash_ReadID>:
void flash_ReadID(flash_t *flash)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
   uint8_t id[3], command = JEDEC_ID;
 8004fa4:	239f      	movs	r3, #159	; 0x9f
 8004fa6:	72fb      	strb	r3, [r7, #11]
   flash_CsLow(flash);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff ff2d 	bl	8004e08 <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8004fae:	f107 030b 	add.w	r3, r7, #11
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff ff46 	bl	8004e48 <flash_WriteCommand>
   flash_ReadCommand(flash, id, 3);
 8004fbc:	f107 030c 	add.w	r3, r7, #12
 8004fc0:	2203      	movs	r2, #3
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff ff53 	bl	8004e70 <flash_ReadCommand>
   flash_CsHigh(flash);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ff2c 	bl	8004e28 <flash_CsHigh>
   flash->id = ((id[0] << 16) | (id[1] << 8) | id[2]);
 8004fd0:	7b3b      	ldrb	r3, [r7, #12]
 8004fd2:	041a      	lsls	r2, r3, #16
 8004fd4:	7b7b      	ldrb	r3, [r7, #13]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	7bba      	ldrb	r2, [r7, #14]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	461a      	mov	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	605a      	str	r2, [r3, #4]
}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <flash_WaitForEndProcess>:
void flash_WaitForEndProcess(flash_t *flash)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
   while((flash_ReadSR1(flash) & BUSY_FLAG))
 8004ff4:	e002      	b.n	8004ffc <flash_WaitForEndProcess+0x10>
   {
      osDelay(5);
 8004ff6:	2005      	movs	r0, #5
 8004ff8:	f010 fc88 	bl	801590c <osDelay>
   while((flash_ReadSR1(flash) & BUSY_FLAG))
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff ff71 	bl	8004ee4 <flash_ReadSR1>
 8005002:	4603      	mov	r3, r0
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f4      	bne.n	8004ff6 <flash_WaitForEndProcess+0xa>
   }
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <flash_SetWELBit_and_WaitForEndProcess>:
void flash_SetWELBit_and_WaitForEndProcess(flash_t *flash)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
   while(!(flash_ReadSR1(flash) & WEL_BIT))
 800501e:	e005      	b.n	800502c <flash_SetWELBit_and_WaitForEndProcess+0x16>
   {
      flash_SetWELBit(flash);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ffa4 	bl	8004f6e <flash_SetWELBit>
      osDelay(5);
 8005026:	2005      	movs	r0, #5
 8005028:	f010 fc70 	bl	801590c <osDelay>
   while(!(flash_ReadSR1(flash) & WEL_BIT))
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7ff ff59 	bl	8004ee4 <flash_ReadSR1>
 8005032:	4603      	mov	r3, r0
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f1      	beq.n	8005020 <flash_SetWELBit_and_WaitForEndProcess+0xa>
   }
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <flash_WritePage>:
   flash_CsHigh(flash);
   flash_WaitForEndProcess(flash);
   flash_WaitForEndProcess(flash);
}
void flash_WritePage(flash_t *flash, uint32_t page_addr, uint8_t *data)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b086      	sub	sp, #24
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
   uint8_t dataToSend[4];
   flash_WaitForEndProcess(flash);
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff ffca 	bl	8004fec <flash_WaitForEndProcess>
   flash_SetWELBit_and_WaitForEndProcess(flash);
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff ffdc 	bl	8005016 <flash_SetWELBit_and_WaitForEndProcess>
   page_addr *= PAGE_SIZE;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	021b      	lsls	r3, r3, #8
 8005062:	60bb      	str	r3, [r7, #8]
   dataToSend[0] = PAGE_PROGRAM;
 8005064:	2302      	movs	r3, #2
 8005066:	753b      	strb	r3, [r7, #20]
   dataToSend[1] = (page_addr >> 16) & 0xff;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	0c1b      	lsrs	r3, r3, #16
 800506c:	b2db      	uxtb	r3, r3
 800506e:	757b      	strb	r3, [r7, #21]
   dataToSend[2] = (page_addr >> 8) & 0xff;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	0a1b      	lsrs	r3, r3, #8
 8005074:	b2db      	uxtb	r3, r3
 8005076:	75bb      	strb	r3, [r7, #22]
   dataToSend[3] = page_addr & 0xff;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	75fb      	strb	r3, [r7, #23]
   flash_CsLow(flash);
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff fec2 	bl	8004e08 <flash_CsLow>
   flash_WriteCommand(flash, dataToSend, 4);
 8005084:	f107 0314 	add.w	r3, r7, #20
 8005088:	2204      	movs	r2, #4
 800508a:	4619      	mov	r1, r3
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7ff fedb 	bl	8004e48 <flash_WriteCommand>
   flash_WriteData(flash, data, PAGE_SIZE);
 8005092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7ff fefd 	bl	8004e98 <flash_WriteData>
   flash_CsHigh(flash);
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f7ff fec2 	bl	8004e28 <flash_CsHigh>
   flash_WaitForEndProcess(flash);
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7ff ffa1 	bl	8004fec <flash_WaitForEndProcess>
}
 80050aa:	bf00      	nop
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <flash_ReadPage>:
void flash_ReadPage(flash_t *flash, uint32_t page_addr, uint8_t *data)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b086      	sub	sp, #24
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	607a      	str	r2, [r7, #4]
   uint8_t dataToSend[4];
   page_addr *= PAGE_SIZE;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	60bb      	str	r3, [r7, #8]
   flash_WaitForEndProcess(flash);
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff ff91 	bl	8004fec <flash_WaitForEndProcess>
   flash_SetWELBit_and_WaitForEndProcess(flash);
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff ffa3 	bl	8005016 <flash_SetWELBit_and_WaitForEndProcess>
   dataToSend[0] = READ_DATA;
 80050d0:	2303      	movs	r3, #3
 80050d2:	753b      	strb	r3, [r7, #20]
   dataToSend[1] = (page_addr >> 16) & 0xff;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	0c1b      	lsrs	r3, r3, #16
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	757b      	strb	r3, [r7, #21]
   dataToSend[2] = (page_addr >> 8) & 0xff;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	75bb      	strb	r3, [r7, #22]
   dataToSend[3] = page_addr & 0xff;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	75fb      	strb	r3, [r7, #23]
   flash_CsLow(flash);
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff fe8c 	bl	8004e08 <flash_CsLow>
   flash_WriteCommand(flash, dataToSend, 4);
 80050f0:	f107 0314 	add.w	r3, r7, #20
 80050f4:	2204      	movs	r2, #4
 80050f6:	4619      	mov	r1, r3
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff fea5 	bl	8004e48 <flash_WriteCommand>
   flash_ReadData(flash, data, PAGE_SIZE);
 80050fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff feda 	bl	8004ebe <flash_ReadData>
   flash_CsHigh(flash);
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f7ff fe8c 	bl	8004e28 <flash_CsHigh>
   flash_WaitForEndProcess(flash);
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7ff ff6b 	bl	8004fec <flash_WaitForEndProcess>
   flash_WaitForEndProcess(flash);
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff ff68 	bl	8004fec <flash_WaitForEndProcess>
}
 800511c:	bf00      	nop
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <flash_ChipErase>:
   flash_WriteCommand(flash, dataToSend, 4);
   flash_CsHigh(flash);
   flash_WaitForEndProcess(flash);
}
void flash_ChipErase(flash_t *flash)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
   uint8_t Temp = CHIP_ERASE;
 800512c:	23c7      	movs	r3, #199	; 0xc7
 800512e:	73fb      	strb	r3, [r7, #15]
   flash_WaitForEndProcess(flash);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff ff5b 	bl	8004fec <flash_WaitForEndProcess>
   flash_SetWELBit_and_WaitForEndProcess(flash);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff ff6d 	bl	8005016 <flash_SetWELBit_and_WaitForEndProcess>
   flash_CsLow(flash);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff fe63 	bl	8004e08 <flash_CsLow>
   flash_WriteCommand(flash, &Temp, 1);
 8005142:	f107 030f 	add.w	r3, r7, #15
 8005146:	2201      	movs	r2, #1
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff fe7c 	bl	8004e48 <flash_WriteCommand>
   flash_CsHigh(flash);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff fe69 	bl	8004e28 <flash_CsHigh>
   flash_WaitForEndProcess(flash);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff ff48 	bl	8004fec <flash_WaitForEndProcess>
}
 800515c:	bf00      	nop
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <flash_Init>:
void flash_Init(flash_t *flash, SPI_HandleTypeDef *spi, GPIO_TypeDef *cs_port, uint16_t cs_pin)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	807b      	strh	r3, [r7, #2]
   flash->flash_spi    = spi;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	601a      	str	r2, [r3, #0]
   flash->flash_CsPort = cs_port;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	60da      	str	r2, [r3, #12]
   flash->flash_CsPin  = cs_pin;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	887a      	ldrh	r2, [r7, #2]
 8005182:	811a      	strh	r2, [r3, #8]
   flash_Reset(flash);
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f7ff fecc 	bl	8004f22 <flash_Reset>
   flash_ReadID(flash);
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f7ff ff06 	bl	8004f9c <flash_ReadID>
}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <fram_CsLow>:
#include "fram.h"
#include "gpio.h"
#include "iwdg.h"
#include "spi.h"
void fram_CsLow(fram_t *fram)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 0);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6898      	ldr	r0, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8a5b      	ldrh	r3, [r3, #18]
 80051a8:	2200      	movs	r2, #0
 80051aa:	4619      	mov	r1, r3
 80051ac:	f009 fe74 	bl	800ee98 <HAL_GPIO_WritePin>
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <fram_CsHigh>:
void fram_CsHigh(fram_t *fram)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6898      	ldr	r0, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8a5b      	ldrh	r3, [r3, #18]
 80051c8:	2201      	movs	r2, #1
 80051ca:	4619      	mov	r1, r3
 80051cc:	f009 fe64 	bl	800ee98 <HAL_GPIO_WritePin>
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <fram_SetWELBit>:
void fram_SetWELBit(fram_t *fram)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
   uint8_t com = WREN;
 80051e0:	2306      	movs	r3, #6
 80051e2:	73fb      	strb	r3, [r7, #15]
   fram_CsLow(fram);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff ffd7 	bl	8005198 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	f107 010f 	add.w	r1, r7, #15
 80051f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051f6:	2201      	movs	r2, #1
 80051f8:	f00c f853 	bl	80112a2 <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff ffdb 	bl	80051b8 <fram_CsHigh>
   HAL_IWDG_Refresh(&hiwdg);
 8005202:	4805      	ldr	r0, [pc, #20]	; (8005218 <fram_SetWELBit+0x40>)
 8005204:	f009 fec9 	bl	800ef9a <HAL_IWDG_Refresh>
   osDelay(100);
 8005208:	2064      	movs	r0, #100	; 0x64
 800520a:	f010 fb7f 	bl	801590c <osDelay>
}
 800520e:	bf00      	nop
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	200040c8 	.word	0x200040c8

0800521c <fram_SetProtectedBlocs>:
void fram_SetProtectedBlocs(fram_t *fram, uint8_t blocs)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	70fb      	strb	r3, [r7, #3]
   if(blocs > 3)
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	2b03      	cmp	r3, #3
 800522c:	d901      	bls.n	8005232 <fram_SetProtectedBlocs+0x16>
   {
      blocs = 3;
 800522e:	2303      	movs	r3, #3
 8005230:	70fb      	strb	r3, [r7, #3]
   }
   uint8_t data[2];
   data[0] = WRSR;
 8005232:	2301      	movs	r3, #1
 8005234:	733b      	strb	r3, [r7, #12]
   data[1] = (blocs << 2);
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	b2db      	uxtb	r3, r3
 800523c:	737b      	strb	r3, [r7, #13]
   fram_SetWELBit(fram);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff ffca 	bl	80051d8 <fram_SetWELBit>
   fram_CsLow(fram);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff ffa7 	bl	8005198 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 2, 1000);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	f107 010c 	add.w	r1, r7, #12
 8005252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005256:	2202      	movs	r2, #2
 8005258:	f00c f823 	bl	80112a2 <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff ffab 	bl	80051b8 <fram_CsHigh>
}
 8005262:	bf00      	nop
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <fram_Read32>:
uint32_t fram_Read32(fram_t *fram, uint32_t Address)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
   uint8_t Temp[4];
   fram_Read(fram, Address, Temp, 4);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	b299      	uxth	r1, r3
 8005278:	f107 020c 	add.w	r2, r7, #12
 800527c:	2304      	movs	r3, #4
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f8c4 	bl	800540c <fram_Read>
   return ((Temp[0] << 24) | (Temp[1] << 16) | (Temp[2] << 8) | Temp[3]);
 8005284:	7b3b      	ldrb	r3, [r7, #12]
 8005286:	061a      	lsls	r2, r3, #24
 8005288:	7b7b      	ldrb	r3, [r7, #13]
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	431a      	orrs	r2, r3
 800528e:	7bbb      	ldrb	r3, [r7, #14]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	4313      	orrs	r3, r2
 8005294:	7bfa      	ldrb	r2, [r7, #15]
 8005296:	4313      	orrs	r3, r2
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <fram_Write32>:
void fram_Write32(fram_t *fram, uint32_t Address, uint32_t Data)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
   uint8_t Temp[4];
   Temp[0] = ((Data >> 24) & 0xff);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	0e1b      	lsrs	r3, r3, #24
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	753b      	strb	r3, [r7, #20]
   Temp[1] = ((Data >> 16) & 0xff);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	0c1b      	lsrs	r3, r3, #16
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	757b      	strb	r3, [r7, #21]
   Temp[2] = ((Data >> 8) & 0xff);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	0a1b      	lsrs	r3, r3, #8
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	75bb      	strb	r3, [r7, #22]
   Temp[3] = ((Data >> 0) & 0xff);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	75fb      	strb	r3, [r7, #23]
   fram_Write(fram, Address, Temp, 4);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	b299      	uxth	r1, r3
 80052ce:	f107 0214 	add.w	r2, r7, #20
 80052d2:	2304      	movs	r3, #4
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f86a 	bl	80053ae <fram_Write>
}
 80052da:	bf00      	nop
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <fram_ChipErase>:
void fram_ChipErase(fram_t *fram)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
   uint8_t Temp = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	72fb      	strb	r3, [r7, #11]
   for(int i = 0; i < 8 * 1024; i++)
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e00a      	b.n	800530a <fram_ChipErase+0x28>
   {
      fram_Write(fram, i, &Temp, 1);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	b299      	uxth	r1, r3
 80052f8:	f107 020b 	add.w	r2, r7, #11
 80052fc:	2301      	movs	r3, #1
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f855 	bl	80053ae <fram_Write>
   for(int i = 0; i < 8 * 1024; i++)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3301      	adds	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005310:	dbf0      	blt.n	80052f4 <fram_ChipErase+0x12>
   }
}
 8005312:	bf00      	nop
 8005314:	bf00      	nop
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <fram_Increment32>:
FramStatus_TypeDef fram_Increment32(fram_t *fram, uint32_t Address)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
   uint32_t Temp = 0, Confirm = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	2300      	movs	r3, #0
 800532c:	60bb      	str	r3, [r7, #8]
   Temp = fram_Read32(fram, Address);
 800532e:	6839      	ldr	r1, [r7, #0]
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff ff9a 	bl	800526a <fram_Read32>
 8005336:	60f8      	str	r0, [r7, #12]
   Temp++;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3301      	adds	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
   fram_Write32(fram, Address, Temp);
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff ffac 	bl	80052a0 <fram_Write32>
   Confirm = fram_Read32(fram, Address);
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff ff8d 	bl	800526a <fram_Read32>
 8005350:	60b8      	str	r0, [r7, #8]
   if(Temp == Confirm)
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	429a      	cmp	r2, r3
 8005358:	d101      	bne.n	800535e <fram_Increment32+0x42>
   {
      return FRAM_OK;
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <fram_Increment32+0x44>
   }
   else
   {
      return FRAM_ERROR;
 800535e:	2300      	movs	r3, #0
   }
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <fram_ReadSreg>:
uint8_t fram_ReadSreg(fram_t *fram)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
   fram_CsLow(fram);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff ff11 	bl	8005198 <fram_CsLow>
   uint8_t _sreg;
   uint8_t com = RDSR;
 8005376:	2305      	movs	r3, #5
 8005378:	73bb      	strb	r3, [r7, #14]
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6818      	ldr	r0, [r3, #0]
 800537e:	f107 010e 	add.w	r1, r7, #14
 8005382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005386:	2201      	movs	r2, #1
 8005388:	f00b ff8b 	bl	80112a2 <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, &_sreg, 1, 1000);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	f107 010f 	add.w	r1, r7, #15
 8005394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005398:	2201      	movs	r2, #1
 800539a:	f00c f8f0 	bl	801157e <HAL_SPI_Receive>
   fram_CsHigh(fram);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff ff0a 	bl	80051b8 <fram_CsHigh>
   return _sreg;
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <fram_Write>:
void fram_Write(fram_t *fram, uint16_t addr, uint8_t *buff, uint16_t length)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b086      	sub	sp, #24
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	461a      	mov	r2, r3
 80053ba:	460b      	mov	r3, r1
 80053bc:	817b      	strh	r3, [r7, #10]
 80053be:	4613      	mov	r3, r2
 80053c0:	813b      	strh	r3, [r7, #8]
   fram_SetWELBit(fram);
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f7ff ff08 	bl	80051d8 <fram_SetWELBit>
   uint8_t data[3];
   data[0] = WRITE;
 80053c8:	2302      	movs	r3, #2
 80053ca:	753b      	strb	r3, [r7, #20]
   data[1] = (addr & 0xff) >> 8;
 80053cc:	2300      	movs	r3, #0
 80053ce:	757b      	strb	r3, [r7, #21]
   data[2] = addr & 0xff;
 80053d0:	897b      	ldrh	r3, [r7, #10]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	75bb      	strb	r3, [r7, #22]
   fram_CsLow(fram);
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f7ff fede 	bl	8005198 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	f107 0114 	add.w	r1, r7, #20
 80053e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053e8:	2203      	movs	r2, #3
 80053ea:	f00b ff5a 	bl	80112a2 <HAL_SPI_Transmit>
   HAL_SPI_Transmit(fram->fram_spi, buff, length, 1000);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	893a      	ldrh	r2, [r7, #8]
 80053f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	f00b ff52 	bl	80112a2 <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7ff feda 	bl	80051b8 <fram_CsHigh>
}
 8005404:	bf00      	nop
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <fram_Read>:
void fram_Read(fram_t *fram, uint16_t addr, uint8_t *buff, uint16_t length)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	607a      	str	r2, [r7, #4]
 8005416:	461a      	mov	r2, r3
 8005418:	460b      	mov	r3, r1
 800541a:	817b      	strh	r3, [r7, #10]
 800541c:	4613      	mov	r3, r2
 800541e:	813b      	strh	r3, [r7, #8]
   fram_SetWELBit(fram);
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f7ff fed9 	bl	80051d8 <fram_SetWELBit>
   uint8_t data[3];
   data[0] = READ;
 8005426:	2303      	movs	r3, #3
 8005428:	753b      	strb	r3, [r7, #20]
   data[1] = (addr & 0xff) >> 8;
 800542a:	2300      	movs	r3, #0
 800542c:	757b      	strb	r3, [r7, #21]
   data[2] = addr & 0xff;
 800542e:	897b      	ldrh	r3, [r7, #10]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	75bb      	strb	r3, [r7, #22]
   fram_CsLow(fram);
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f7ff feaf 	bl	8005198 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	f107 0114 	add.w	r1, r7, #20
 8005442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005446:	2203      	movs	r2, #3
 8005448:	f00b ff2b 	bl	80112a2 <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, buff, length, 1000);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	893a      	ldrh	r2, [r7, #8]
 8005452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	f00c f891 	bl	801157e <HAL_SPI_Receive>
   fram_CsHigh(fram);
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff feab 	bl	80051b8 <fram_CsHigh>
}
 8005462:	bf00      	nop
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <fram_ReadID>:
uint32_t fram_ReadID(fram_t *fram)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
   uint8_t com, id[4];
   com = RDID;
 8005472:	239f      	movs	r3, #159	; 0x9f
 8005474:	73fb      	strb	r3, [r7, #15]
   fram_CsLow(fram);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff fe8e 	bl	8005198 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	f107 010f 	add.w	r1, r7, #15
 8005484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005488:	2201      	movs	r2, #1
 800548a:	f00b ff0a 	bl	80112a2 <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, id, 4, 1000);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	f107 0108 	add.w	r1, r7, #8
 8005496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800549a:	2204      	movs	r2, #4
 800549c:	f00c f86f 	bl	801157e <HAL_SPI_Receive>
   fram_CsHigh(fram);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff fe89 	bl	80051b8 <fram_CsHigh>
   return ((id[0] << 24) | (id[1] << 16) | (id[2] << 8) | id[3]);
 80054a6:	7a3b      	ldrb	r3, [r7, #8]
 80054a8:	061a      	lsls	r2, r3, #24
 80054aa:	7a7b      	ldrb	r3, [r7, #9]
 80054ac:	041b      	lsls	r3, r3, #16
 80054ae:	431a      	orrs	r2, r3
 80054b0:	7abb      	ldrb	r3, [r7, #10]
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	4313      	orrs	r3, r2
 80054b6:	7afa      	ldrb	r2, [r7, #11]
 80054b8:	4313      	orrs	r3, r2
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <fram_Init>:
void fram_Init(fram_t *fram, SPI_HandleTypeDef *spi, GPIO_TypeDef *_hold_port, GPIO_TypeDef *_cs_port, GPIO_TypeDef *_wp_port, uint16_t _hold_pin,
               uint16_t _cs_pin, uint16_t _wp_pin)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	607a      	str	r2, [r7, #4]
 80054ce:	603b      	str	r3, [r7, #0]
   fram->fram_spi  = spi;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	601a      	str	r2, [r3, #0]
   fram->hold_port = _hold_port;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	605a      	str	r2, [r3, #4]
   fram->hold_pin  = _hold_pin;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8bba      	ldrh	r2, [r7, #28]
 80054e0:	821a      	strh	r2, [r3, #16]
   fram->cs_port   = _cs_port;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	609a      	str	r2, [r3, #8]
   fram->cs_pin    = _cs_pin;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8c3a      	ldrh	r2, [r7, #32]
 80054ec:	825a      	strh	r2, [r3, #18]
   fram->wp_port   = _wp_port;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	60da      	str	r2, [r3, #12]
   fram->wp_pin    = _wp_pin;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054f8:	829a      	strh	r2, [r3, #20]
   HAL_GPIO_WritePin(fram->hold_port, fram->hold_pin, 1);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6858      	ldr	r0, [r3, #4]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8a1b      	ldrh	r3, [r3, #16]
 8005502:	2201      	movs	r2, #1
 8005504:	4619      	mov	r1, r3
 8005506:	f009 fcc7 	bl	800ee98 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(fram->wp_port, fram->wp_pin, 1);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	68d8      	ldr	r0, [r3, #12]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8a9b      	ldrh	r3, [r3, #20]
 8005512:	2201      	movs	r2, #1
 8005514:	4619      	mov	r1, r3
 8005516:	f009 fcbf 	bl	800ee98 <HAL_GPIO_WritePin>
   fram_SetProtectedBlocs(fram, 0);
 800551a:	2100      	movs	r1, #0
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7ff fe7d 	bl	800521c <fram_SetProtectedBlocs>
   fram->sreg   = fram_ReadSreg(fram);
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f7ff ff20 	bl	8005368 <fram_ReadSreg>
 8005528:	4603      	mov	r3, r0
 800552a:	461a      	mov	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	759a      	strb	r2, [r3, #22]
   fram->framID = fram_ReadID(fram);
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7ff ff9a 	bl	800546a <fram_ReadID>
 8005536:	4602      	mov	r2, r0
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	619a      	str	r2, [r3, #24]
}
 800553c:	bf00      	nop
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */
   /* Create the mutex(es) */
   /* creation of ScreensDcMutex */
   ScreensDcMutexHandle = osMutexNew(&ScreensDcMutex_attributes);
 8005548:	4880      	ldr	r0, [pc, #512]	; (800574c <MX_FREERTOS_Init+0x208>)
 800554a:	f010 fba7 	bl	8015c9c <osMutexNew>
 800554e:	4603      	mov	r3, r0
 8005550:	4a7f      	ldr	r2, [pc, #508]	; (8005750 <MX_FREERTOS_Init+0x20c>)
 8005552:	6013      	str	r3, [r2, #0]

   /* creation of SSD1306Mutex */
   SSD1306MutexHandle = osMutexNew(&SSD1306Mutex_attributes);
 8005554:	487f      	ldr	r0, [pc, #508]	; (8005754 <MX_FREERTOS_Init+0x210>)
 8005556:	f010 fba1 	bl	8015c9c <osMutexNew>
 800555a:	4603      	mov	r3, r0
 800555c:	4a7e      	ldr	r2, [pc, #504]	; (8005758 <MX_FREERTOS_Init+0x214>)
 800555e:	6013      	str	r3, [r2, #0]

   /* creation of SPI1Mutex */
   SPI1MutexHandle = osMutexNew(&SPI1Mutex_attributes);
 8005560:	487e      	ldr	r0, [pc, #504]	; (800575c <MX_FREERTOS_Init+0x218>)
 8005562:	f010 fb9b 	bl	8015c9c <osMutexNew>
 8005566:	4603      	mov	r3, r0
 8005568:	4a7d      	ldr	r2, [pc, #500]	; (8005760 <MX_FREERTOS_Init+0x21c>)
 800556a:	6013      	str	r3, [r2, #0]

   /* creation of E_PAPIERMutex */
   E_PAPIERMutexHandle = osMutexNew(&E_PAPIERMutex_attributes);
 800556c:	487d      	ldr	r0, [pc, #500]	; (8005764 <MX_FREERTOS_Init+0x220>)
 800556e:	f010 fb95 	bl	8015c9c <osMutexNew>
 8005572:	4603      	mov	r3, r0
 8005574:	4a7c      	ldr	r2, [pc, #496]	; (8005768 <MX_FREERTOS_Init+0x224>)
 8005576:	6013      	str	r3, [r2, #0]

   /* creation of BME280Mutex */
   BME280MutexHandle = osMutexNew(&BME280Mutex_attributes);
 8005578:	487c      	ldr	r0, [pc, #496]	; (800576c <MX_FREERTOS_Init+0x228>)
 800557a:	f010 fb8f 	bl	8015c9c <osMutexNew>
 800557e:	4603      	mov	r3, r0
 8005580:	4a7b      	ldr	r2, [pc, #492]	; (8005770 <MX_FREERTOS_Init+0x22c>)
 8005582:	6013      	str	r3, [r2, #0]

   /* creation of MenuMutex */
   MenuMutexHandle = osMutexNew(&MenuMutex_attributes);
 8005584:	487b      	ldr	r0, [pc, #492]	; (8005774 <MX_FREERTOS_Init+0x230>)
 8005586:	f010 fb89 	bl	8015c9c <osMutexNew>
 800558a:	4603      	mov	r3, r0
 800558c:	4a7a      	ldr	r2, [pc, #488]	; (8005778 <MX_FREERTOS_Init+0x234>)
 800558e:	6013      	str	r3, [r2, #0]

   /* creation of RTCMutex */
   RTCMutexHandle = osMutexNew(&RTCMutex_attributes);
 8005590:	487a      	ldr	r0, [pc, #488]	; (800577c <MX_FREERTOS_Init+0x238>)
 8005592:	f010 fb83 	bl	8015c9c <osMutexNew>
 8005596:	4603      	mov	r3, r0
 8005598:	4a79      	ldr	r2, [pc, #484]	; (8005780 <MX_FREERTOS_Init+0x23c>)
 800559a:	6013      	str	r3, [r2, #0]

   /* creation of EncoderMutex */
   EncoderMutexHandle = osMutexNew(&EncoderMutex_attributes);
 800559c:	4879      	ldr	r0, [pc, #484]	; (8005784 <MX_FREERTOS_Init+0x240>)
 800559e:	f010 fb7d 	bl	8015c9c <osMutexNew>
 80055a2:	4603      	mov	r3, r0
 80055a4:	4a78      	ldr	r2, [pc, #480]	; (8005788 <MX_FREERTOS_Init+0x244>)
 80055a6:	6013      	str	r3, [r2, #0]
   /* add semaphores, ... */
   /* USER CODE END RTOS_SEMAPHORES */

   /* Create the timer(s) */
   /* creation of MenuTimer */
   MenuTimerHandle = osTimerNew(MenuTimerCallback, osTimerOnce, NULL, &MenuTimer_attributes);
 80055a8:	4b78      	ldr	r3, [pc, #480]	; (800578c <MX_FREERTOS_Init+0x248>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	2100      	movs	r1, #0
 80055ae:	4878      	ldr	r0, [pc, #480]	; (8005790 <MX_FREERTOS_Init+0x24c>)
 80055b0:	f010 f9dc 	bl	801596c <osTimerNew>
 80055b4:	4603      	mov	r3, r0
 80055b6:	4a77      	ldr	r2, [pc, #476]	; (8005794 <MX_FREERTOS_Init+0x250>)
 80055b8:	6013      	str	r3, [r2, #0]
   /* start timers, add new ones, ... */
   /* USER CODE END RTOS_TIMERS */

   /* Create the queue(s) */
   /* creation of MeasurmentQueue */
   MeasurmentQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &MeasurmentQueue_attributes);
 80055ba:	4a77      	ldr	r2, [pc, #476]	; (8005798 <MX_FREERTOS_Init+0x254>)
 80055bc:	2130      	movs	r1, #48	; 0x30
 80055be:	2010      	movs	r0, #16
 80055c0:	f010 fc7a 	bl	8015eb8 <osMessageQueueNew>
 80055c4:	4603      	mov	r3, r0
 80055c6:	4a75      	ldr	r2, [pc, #468]	; (800579c <MX_FREERTOS_Init+0x258>)
 80055c8:	6013      	str	r3, [r2, #0]

   /* creation of MoonPhaseQueue */
   MoonPhaseQueueHandle = osMessageQueueNew(16, sizeof(double), &MoonPhaseQueue_attributes);
 80055ca:	4a75      	ldr	r2, [pc, #468]	; (80057a0 <MX_FREERTOS_Init+0x25c>)
 80055cc:	2108      	movs	r1, #8
 80055ce:	2010      	movs	r0, #16
 80055d0:	f010 fc72 	bl	8015eb8 <osMessageQueueNew>
 80055d4:	4603      	mov	r3, r0
 80055d6:	4a73      	ldr	r2, [pc, #460]	; (80057a4 <MX_FREERTOS_Init+0x260>)
 80055d8:	6013      	str	r3, [r2, #0]

   /* creation of ChartQueue */
   ChartQueueHandle = osMessageQueueNew(16, sizeof(ChartDateAndType_TypeDef), &ChartQueue_attributes);
 80055da:	4a73      	ldr	r2, [pc, #460]	; (80057a8 <MX_FREERTOS_Init+0x264>)
 80055dc:	2106      	movs	r1, #6
 80055de:	2010      	movs	r0, #16
 80055e0:	f010 fc6a 	bl	8015eb8 <osMessageQueueNew>
 80055e4:	4603      	mov	r3, r0
 80055e6:	4a71      	ldr	r2, [pc, #452]	; (80057ac <MX_FREERTOS_Init+0x268>)
 80055e8:	6013      	str	r3, [r2, #0]

   /* creation of DataToSaveQueue */
   DataToSaveQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &DataToSaveQueue_attributes);
 80055ea:	4a71      	ldr	r2, [pc, #452]	; (80057b0 <MX_FREERTOS_Init+0x26c>)
 80055ec:	2130      	movs	r1, #48	; 0x30
 80055ee:	2010      	movs	r0, #16
 80055f0:	f010 fc62 	bl	8015eb8 <osMessageQueueNew>
 80055f4:	4603      	mov	r3, r0
 80055f6:	4a6f      	ldr	r2, [pc, #444]	; (80057b4 <MX_FREERTOS_Init+0x270>)
 80055f8:	6013      	str	r3, [r2, #0]

   /* creation of RfpMessageQueue */
   RfpMessageQueueHandle = osMessageQueueNew(16, sizeof(RfpMessage_TypeDef), &RfpMessageQueue_attributes);
 80055fa:	4a6f      	ldr	r2, [pc, #444]	; (80057b8 <MX_FREERTOS_Init+0x274>)
 80055fc:	2104      	movs	r1, #4
 80055fe:	2010      	movs	r0, #16
 8005600:	f010 fc5a 	bl	8015eb8 <osMessageQueueNew>
 8005604:	4603      	mov	r3, r0
 8005606:	4a6d      	ldr	r2, [pc, #436]	; (80057bc <MX_FREERTOS_Init+0x278>)
 8005608:	6013      	str	r3, [r2, #0]

   /* creation of ExternalMeasurmentQueue */
   ExternalMeasurmentQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &ExternalMeasurmentQueue_attributes);
 800560a:	4a6d      	ldr	r2, [pc, #436]	; (80057c0 <MX_FREERTOS_Init+0x27c>)
 800560c:	2130      	movs	r1, #48	; 0x30
 800560e:	2010      	movs	r0, #16
 8005610:	f010 fc52 	bl	8015eb8 <osMessageQueueNew>
 8005614:	4603      	mov	r3, r0
 8005616:	4a6b      	ldr	r2, [pc, #428]	; (80057c4 <MX_FREERTOS_Init+0x280>)
 8005618:	6013      	str	r3, [r2, #0]

   /* creation of SunriseQueue */
   SunriseQueueHandle = osMessageQueueNew(16, sizeof(Sunrise_TypeDef), &SunriseQueue_attributes);
 800561a:	4a6b      	ldr	r2, [pc, #428]	; (80057c8 <MX_FREERTOS_Init+0x284>)
 800561c:	2118      	movs	r1, #24
 800561e:	2010      	movs	r0, #16
 8005620:	f010 fc4a 	bl	8015eb8 <osMessageQueueNew>
 8005624:	4603      	mov	r3, r0
 8005626:	4a69      	ldr	r2, [pc, #420]	; (80057cc <MX_FREERTOS_Init+0x288>)
 8005628:	6013      	str	r3, [r2, #0]

   /* creation of WS2812Queue */
   WS2812QueueHandle = osMessageQueueNew(16, sizeof(Sunrise_TypeDef), &WS2812Queue_attributes);
 800562a:	4a69      	ldr	r2, [pc, #420]	; (80057d0 <MX_FREERTOS_Init+0x28c>)
 800562c:	2118      	movs	r1, #24
 800562e:	2010      	movs	r0, #16
 8005630:	f010 fc42 	bl	8015eb8 <osMessageQueueNew>
 8005634:	4603      	mov	r3, r0
 8005636:	4a67      	ldr	r2, [pc, #412]	; (80057d4 <MX_FREERTOS_Init+0x290>)
 8005638:	6013      	str	r3, [r2, #0]

   /* creation of WS2812bMeasurmentQueue */
   WS2812bMeasurmentQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &WS2812bMeasurmentQueue_attributes);
 800563a:	4a67      	ldr	r2, [pc, #412]	; (80057d8 <MX_FREERTOS_Init+0x294>)
 800563c:	2130      	movs	r1, #48	; 0x30
 800563e:	2010      	movs	r0, #16
 8005640:	f010 fc3a 	bl	8015eb8 <osMessageQueueNew>
 8005644:	4603      	mov	r3, r0
 8005646:	4a65      	ldr	r2, [pc, #404]	; (80057dc <MX_FREERTOS_Init+0x298>)
 8005648:	6013      	str	r3, [r2, #0]

   /* creation of TimeBreakMeasurmentQueue */
   TimeBreakMeasurmentQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &TimeBreakMeasurmentQueue_attributes);
 800564a:	4a65      	ldr	r2, [pc, #404]	; (80057e0 <MX_FREERTOS_Init+0x29c>)
 800564c:	2130      	movs	r1, #48	; 0x30
 800564e:	2010      	movs	r0, #16
 8005650:	f010 fc32 	bl	8015eb8 <osMessageQueueNew>
 8005654:	4603      	mov	r3, r0
 8005656:	4a63      	ldr	r2, [pc, #396]	; (80057e4 <MX_FREERTOS_Init+0x2a0>)
 8005658:	6013      	str	r3, [r2, #0]
   /* add queues, ... */
   /* USER CODE END RTOS_QUEUES */

   /* Create the thread(s) */
   /* creation of defaultTask */
   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800565a:	4a63      	ldr	r2, [pc, #396]	; (80057e8 <MX_FREERTOS_Init+0x2a4>)
 800565c:	2100      	movs	r1, #0
 800565e:	4863      	ldr	r0, [pc, #396]	; (80057ec <MX_FREERTOS_Init+0x2a8>)
 8005660:	f010 f8c2 	bl	80157e8 <osThreadNew>
 8005664:	4603      	mov	r3, r0
 8005666:	4a62      	ldr	r2, [pc, #392]	; (80057f0 <MX_FREERTOS_Init+0x2ac>)
 8005668:	6013      	str	r3, [r2, #0]

   /* creation of InitAndTimeTask */
   InitAndTimeTaskHandle = osThreadNew(StartInitAndTimeTask, NULL, &InitAndTimeTask_attributes);
 800566a:	4a62      	ldr	r2, [pc, #392]	; (80057f4 <MX_FREERTOS_Init+0x2b0>)
 800566c:	2100      	movs	r1, #0
 800566e:	4862      	ldr	r0, [pc, #392]	; (80057f8 <MX_FREERTOS_Init+0x2b4>)
 8005670:	f010 f8ba 	bl	80157e8 <osThreadNew>
 8005674:	4603      	mov	r3, r0
 8005676:	4a61      	ldr	r2, [pc, #388]	; (80057fc <MX_FREERTOS_Init+0x2b8>)
 8005678:	6013      	str	r3, [r2, #0]

   /* creation of RfpTask */
   RfpTaskHandle = osThreadNew(StartRfpTask, NULL, &RfpTask_attributes);
 800567a:	4a61      	ldr	r2, [pc, #388]	; (8005800 <MX_FREERTOS_Init+0x2bc>)
 800567c:	2100      	movs	r1, #0
 800567e:	4861      	ldr	r0, [pc, #388]	; (8005804 <MX_FREERTOS_Init+0x2c0>)
 8005680:	f010 f8b2 	bl	80157e8 <osThreadNew>
 8005684:	4603      	mov	r3, r0
 8005686:	4a60      	ldr	r2, [pc, #384]	; (8005808 <MX_FREERTOS_Init+0x2c4>)
 8005688:	6013      	str	r3, [r2, #0]

   /* creation of MeasurmentTask */
   MeasurmentTaskHandle = osThreadNew(StartMeasurmentTask, NULL, &MeasurmentTask_attributes);
 800568a:	4a60      	ldr	r2, [pc, #384]	; (800580c <MX_FREERTOS_Init+0x2c8>)
 800568c:	2100      	movs	r1, #0
 800568e:	4860      	ldr	r0, [pc, #384]	; (8005810 <MX_FREERTOS_Init+0x2cc>)
 8005690:	f010 f8aa 	bl	80157e8 <osThreadNew>
 8005694:	4603      	mov	r3, r0
 8005696:	4a5f      	ldr	r2, [pc, #380]	; (8005814 <MX_FREERTOS_Init+0x2d0>)
 8005698:	6013      	str	r3, [r2, #0]

   /* creation of InternalMeasurmentTask */
   InternalMeasurmentTaskHandle = osThreadNew(StartInternalMeasurmentTask, NULL, &InternalMeasurmentTask_attributes);
 800569a:	4a5f      	ldr	r2, [pc, #380]	; (8005818 <MX_FREERTOS_Init+0x2d4>)
 800569c:	2100      	movs	r1, #0
 800569e:	485f      	ldr	r0, [pc, #380]	; (800581c <MX_FREERTOS_Init+0x2d8>)
 80056a0:	f010 f8a2 	bl	80157e8 <osThreadNew>
 80056a4:	4603      	mov	r3, r0
 80056a6:	4a5e      	ldr	r2, [pc, #376]	; (8005820 <MX_FREERTOS_Init+0x2dc>)
 80056a8:	6013      	str	r3, [r2, #0]

   /* creation of MoonPhaseTask */
   MoonPhaseTaskHandle = osThreadNew(StartMoonPhaseTask, NULL, &MoonPhaseTask_attributes);
 80056aa:	4a5e      	ldr	r2, [pc, #376]	; (8005824 <MX_FREERTOS_Init+0x2e0>)
 80056ac:	2100      	movs	r1, #0
 80056ae:	485e      	ldr	r0, [pc, #376]	; (8005828 <MX_FREERTOS_Init+0x2e4>)
 80056b0:	f010 f89a 	bl	80157e8 <osThreadNew>
 80056b4:	4603      	mov	r3, r0
 80056b6:	4a5d      	ldr	r2, [pc, #372]	; (800582c <MX_FREERTOS_Init+0x2e8>)
 80056b8:	6013      	str	r3, [r2, #0]

   /* creation of E_PapierDrawingTask */
   E_PapierDrawingTaskHandle = osThreadNew(StartE_PapierDrawingTask, NULL, &E_PapierDrawingTask_attributes);
 80056ba:	4a5d      	ldr	r2, [pc, #372]	; (8005830 <MX_FREERTOS_Init+0x2ec>)
 80056bc:	2100      	movs	r1, #0
 80056be:	485d      	ldr	r0, [pc, #372]	; (8005834 <MX_FREERTOS_Init+0x2f0>)
 80056c0:	f010 f892 	bl	80157e8 <osThreadNew>
 80056c4:	4603      	mov	r3, r0
 80056c6:	4a5c      	ldr	r2, [pc, #368]	; (8005838 <MX_FREERTOS_Init+0x2f4>)
 80056c8:	6013      	str	r3, [r2, #0]

   /* creation of E_PapierDisplayTask */
   E_PapierDisplayTaskHandle = osThreadNew(StartE_PapierDisplayTask, NULL, &E_PapierDisplayTask_attributes);
 80056ca:	4a5c      	ldr	r2, [pc, #368]	; (800583c <MX_FREERTOS_Init+0x2f8>)
 80056cc:	2100      	movs	r1, #0
 80056ce:	485c      	ldr	r0, [pc, #368]	; (8005840 <MX_FREERTOS_Init+0x2fc>)
 80056d0:	f010 f88a 	bl	80157e8 <osThreadNew>
 80056d4:	4603      	mov	r3, r0
 80056d6:	4a5b      	ldr	r2, [pc, #364]	; (8005844 <MX_FREERTOS_Init+0x300>)
 80056d8:	6013      	str	r3, [r2, #0]

   /* creation of MenuTask */
   MenuTaskHandle = osThreadNew(StartMenuTask, NULL, &MenuTask_attributes);
 80056da:	4a5b      	ldr	r2, [pc, #364]	; (8005848 <MX_FREERTOS_Init+0x304>)
 80056dc:	2100      	movs	r1, #0
 80056de:	485b      	ldr	r0, [pc, #364]	; (800584c <MX_FREERTOS_Init+0x308>)
 80056e0:	f010 f882 	bl	80157e8 <osThreadNew>
 80056e4:	4603      	mov	r3, r0
 80056e6:	4a5a      	ldr	r2, [pc, #360]	; (8005850 <MX_FREERTOS_Init+0x30c>)
 80056e8:	6013      	str	r3, [r2, #0]

   /* creation of SaveMemoryTask */
   SaveMemoryTaskHandle = osThreadNew(StartSaveMemoryTask, NULL, &SaveMemoryTask_attributes);
 80056ea:	4a5a      	ldr	r2, [pc, #360]	; (8005854 <MX_FREERTOS_Init+0x310>)
 80056ec:	2100      	movs	r1, #0
 80056ee:	485a      	ldr	r0, [pc, #360]	; (8005858 <MX_FREERTOS_Init+0x314>)
 80056f0:	f010 f87a 	bl	80157e8 <osThreadNew>
 80056f4:	4603      	mov	r3, r0
 80056f6:	4a59      	ldr	r2, [pc, #356]	; (800585c <MX_FREERTOS_Init+0x318>)
 80056f8:	6013      	str	r3, [r2, #0]

   /* creation of ChartTask */
   ChartTaskHandle = osThreadNew(StartChartTask, NULL, &ChartTask_attributes);
 80056fa:	4a59      	ldr	r2, [pc, #356]	; (8005860 <MX_FREERTOS_Init+0x31c>)
 80056fc:	2100      	movs	r1, #0
 80056fe:	4859      	ldr	r0, [pc, #356]	; (8005864 <MX_FREERTOS_Init+0x320>)
 8005700:	f010 f872 	bl	80157e8 <osThreadNew>
 8005704:	4603      	mov	r3, r0
 8005706:	4a58      	ldr	r2, [pc, #352]	; (8005868 <MX_FREERTOS_Init+0x324>)
 8005708:	6013      	str	r3, [r2, #0]

   /* creation of RfpMessageTask */
   RfpMessageTaskHandle = osThreadNew(StartRfpMessageTask, NULL, &RfpMessageTask_attributes);
 800570a:	4a58      	ldr	r2, [pc, #352]	; (800586c <MX_FREERTOS_Init+0x328>)
 800570c:	2100      	movs	r1, #0
 800570e:	4858      	ldr	r0, [pc, #352]	; (8005870 <MX_FREERTOS_Init+0x32c>)
 8005710:	f010 f86a 	bl	80157e8 <osThreadNew>
 8005714:	4603      	mov	r3, r0
 8005716:	4a57      	ldr	r2, [pc, #348]	; (8005874 <MX_FREERTOS_Init+0x330>)
 8005718:	6013      	str	r3, [r2, #0]

   /* creation of SunriseAndSunsetTask */
   SunriseAndSunsetTaskHandle = osThreadNew(StartSunriseAndSunsetTask, NULL, &SunriseAndSunsetTask_attributes);
 800571a:	4a57      	ldr	r2, [pc, #348]	; (8005878 <MX_FREERTOS_Init+0x334>)
 800571c:	2100      	movs	r1, #0
 800571e:	4857      	ldr	r0, [pc, #348]	; (800587c <MX_FREERTOS_Init+0x338>)
 8005720:	f010 f862 	bl	80157e8 <osThreadNew>
 8005724:	4603      	mov	r3, r0
 8005726:	4a56      	ldr	r2, [pc, #344]	; (8005880 <MX_FREERTOS_Init+0x33c>)
 8005728:	6013      	str	r3, [r2, #0]

   /* creation of WS2812Task */
   WS2812TaskHandle = osThreadNew(StartWS2812Task, NULL, &WS2812Task_attributes);
 800572a:	4a56      	ldr	r2, [pc, #344]	; (8005884 <MX_FREERTOS_Init+0x340>)
 800572c:	2100      	movs	r1, #0
 800572e:	4856      	ldr	r0, [pc, #344]	; (8005888 <MX_FREERTOS_Init+0x344>)
 8005730:	f010 f85a 	bl	80157e8 <osThreadNew>
 8005734:	4603      	mov	r3, r0
 8005736:	4a55      	ldr	r2, [pc, #340]	; (800588c <MX_FREERTOS_Init+0x348>)
 8005738:	6013      	str	r3, [r2, #0]
   /* USER CODE BEGIN RTOS_THREADS */
   /* add threads, ... */
   /* USER CODE END RTOS_THREADS */

   /* creation of C3V1Flags */
   C3V1FlagsHandle = osEventFlagsNew(&C3V1Flags_attributes);
 800573a:	4855      	ldr	r0, [pc, #340]	; (8005890 <MX_FREERTOS_Init+0x34c>)
 800573c:	f010 f992 	bl	8015a64 <osEventFlagsNew>
 8005740:	4603      	mov	r3, r0
 8005742:	4a54      	ldr	r2, [pc, #336]	; (8005894 <MX_FREERTOS_Init+0x350>)
 8005744:	6013      	str	r3, [r2, #0]

   /* USER CODE BEGIN RTOS_EVENTS */
   /* add events, ... */
   /* USER CODE END RTOS_EVENTS */
}
 8005746:	bf00      	nop
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	08025300 	.word	0x08025300
 8005750:	200040a4 	.word	0x200040a4
 8005754:	08025310 	.word	0x08025310
 8005758:	200040a8 	.word	0x200040a8
 800575c:	08025320 	.word	0x08025320
 8005760:	200040ac 	.word	0x200040ac
 8005764:	08025330 	.word	0x08025330
 8005768:	200040b0 	.word	0x200040b0
 800576c:	08025340 	.word	0x08025340
 8005770:	200040b4 	.word	0x200040b4
 8005774:	08025350 	.word	0x08025350
 8005778:	200040b8 	.word	0x200040b8
 800577c:	08025360 	.word	0x08025360
 8005780:	200040bc 	.word	0x200040bc
 8005784:	08025370 	.word	0x08025370
 8005788:	200040c0 	.word	0x200040c0
 800578c:	080252f0 	.word	0x080252f0
 8005790:	08009601 	.word	0x08009601
 8005794:	200040a0 	.word	0x200040a0
 8005798:	08025200 	.word	0x08025200
 800579c:	20004078 	.word	0x20004078
 80057a0:	08025218 	.word	0x08025218
 80057a4:	2000407c 	.word	0x2000407c
 80057a8:	08025230 	.word	0x08025230
 80057ac:	20004080 	.word	0x20004080
 80057b0:	08025248 	.word	0x08025248
 80057b4:	20004084 	.word	0x20004084
 80057b8:	08025260 	.word	0x08025260
 80057bc:	20004088 	.word	0x20004088
 80057c0:	08025278 	.word	0x08025278
 80057c4:	2000408c 	.word	0x2000408c
 80057c8:	08025290 	.word	0x08025290
 80057cc:	20004090 	.word	0x20004090
 80057d0:	080252a8 	.word	0x080252a8
 80057d4:	20004094 	.word	0x20004094
 80057d8:	080252c0 	.word	0x080252c0
 80057dc:	20004098 	.word	0x20004098
 80057e0:	080252d8 	.word	0x080252d8
 80057e4:	2000409c 	.word	0x2000409c
 80057e8:	08025008 	.word	0x08025008
 80057ec:	08005899 	.word	0x08005899
 80057f0:	20004040 	.word	0x20004040
 80057f4:	0802502c 	.word	0x0802502c
 80057f8:	080058c1 	.word	0x080058c1
 80057fc:	20004044 	.word	0x20004044
 8005800:	08025050 	.word	0x08025050
 8005804:	08005c41 	.word	0x08005c41
 8005808:	20004048 	.word	0x20004048
 800580c:	08025074 	.word	0x08025074
 8005810:	08005c75 	.word	0x08005c75
 8005814:	2000404c 	.word	0x2000404c
 8005818:	08025098 	.word	0x08025098
 800581c:	08005dbd 	.word	0x08005dbd
 8005820:	20004050 	.word	0x20004050
 8005824:	080250bc 	.word	0x080250bc
 8005828:	08005f51 	.word	0x08005f51
 800582c:	20004054 	.word	0x20004054
 8005830:	080250e0 	.word	0x080250e0
 8005834:	08006291 	.word	0x08006291
 8005838:	20004058 	.word	0x20004058
 800583c:	08025104 	.word	0x08025104
 8005840:	08006ea5 	.word	0x08006ea5
 8005844:	2000405c 	.word	0x2000405c
 8005848:	08025128 	.word	0x08025128
 800584c:	08006f35 	.word	0x08006f35
 8005850:	20004060 	.word	0x20004060
 8005854:	0802514c 	.word	0x0802514c
 8005858:	08006f79 	.word	0x08006f79
 800585c:	20004064 	.word	0x20004064
 8005860:	08025170 	.word	0x08025170
 8005864:	08007721 	.word	0x08007721
 8005868:	20004068 	.word	0x20004068
 800586c:	08025194 	.word	0x08025194
 8005870:	0800927d 	.word	0x0800927d
 8005874:	2000406c 	.word	0x2000406c
 8005878:	080251b8 	.word	0x080251b8
 800587c:	08009315 	.word	0x08009315
 8005880:	20004070 	.word	0x20004070
 8005884:	080251dc 	.word	0x080251dc
 8005888:	08009431 	.word	0x08009431
 800588c:	20004074 	.word	0x20004074
 8005890:	08025380 	.word	0x08025380
 8005894:	200040c4 	.word	0x200040c4

08005898 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartDefaultTask */
   /* Infinite loop */
   for(;;)
   {
      HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 80058a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058a4:	4804      	ldr	r0, [pc, #16]	; (80058b8 <StartDefaultTask+0x20>)
 80058a6:	f009 fb0f 	bl	800eec8 <HAL_GPIO_TogglePin>
      HAL_IWDG_Refresh(&hiwdg);
 80058aa:	4804      	ldr	r0, [pc, #16]	; (80058bc <StartDefaultTask+0x24>)
 80058ac:	f009 fb75 	bl	800ef9a <HAL_IWDG_Refresh>
      osDelay(100);
 80058b0:	2064      	movs	r0, #100	; 0x64
 80058b2:	f010 f82b 	bl	801590c <osDelay>
      HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 80058b6:	e7f3      	b.n	80058a0 <StartDefaultTask+0x8>
 80058b8:	48000400 	.word	0x48000400
 80058bc:	200040c8 	.word	0x200040c8

080058c0 <StartInitAndTimeTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInitAndTimeTask */
void StartInitAndTimeTask(void *argument)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b0a6      	sub	sp, #152	; 0x98
 80058c4:	af04      	add	r7, sp, #16
 80058c6:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartInitAndTimeTask */
   RFP_Init(&Rfp, RFP_IDWS);
 80058c8:	2103      	movs	r1, #3
 80058ca:	48bf      	ldr	r0, [pc, #764]	; (8005bc8 <StartInitAndTimeTask+0x308>)
 80058cc:	f007 f990 	bl	800cbf0 <RFP_Init>
   e_papier_init(&hspi1);
 80058d0:	48be      	ldr	r0, [pc, #760]	; (8005bcc <StartInitAndTimeTask+0x30c>)
 80058d2:	f7ff fa3b 	bl	8004d4c <e_papier_init>
   ssd1306_init(&hspi1);
 80058d6:	48bd      	ldr	r0, [pc, #756]	; (8005bcc <StartInitAndTimeTask+0x30c>)
 80058d8:	f007 fe8e 	bl	800d5f8 <ssd1306_init>
   taskENTER_CRITICAL();
 80058dc:	f013 fd0a 	bl	80192f4 <vPortEnterCritical>
   BME280_Init(&Bme, &hspi1, BME280_CS_GPIO_Port, BME280_CS_Pin);
 80058e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058e4:	4aba      	ldr	r2, [pc, #744]	; (8005bd0 <StartInitAndTimeTask+0x310>)
 80058e6:	49b9      	ldr	r1, [pc, #740]	; (8005bcc <StartInitAndTimeTask+0x30c>)
 80058e8:	48ba      	ldr	r0, [pc, #744]	; (8005bd4 <StartInitAndTimeTask+0x314>)
 80058ea:	f7fe fec9 	bl	8004680 <BME280_Init>
   GFX_SetFont(font_8x5);
 80058ee:	48ba      	ldr	r0, [pc, #744]	; (8005bd8 <StartInitAndTimeTask+0x318>)
 80058f0:	f7fb fc12 	bl	8001118 <GFX_SetFont>
   RFP_RegisterDataFunction(RFP_DataFunction);
 80058f4:	48b9      	ldr	r0, [pc, #740]	; (8005bdc <StartInitAndTimeTask+0x31c>)
 80058f6:	f007 f9fb 	bl	800ccf0 <RFP_RegisterDataFunction>
   MENU_Init();
 80058fa:	f7fc f9a7 	bl	8001c4c <MENU_Init>
   fram_Init(&Fram, &hspi1, FRAM_HOLD_GPIO_Port, FRAM_CS_GPIO_Port, FRAM_WP_GPIO_Port, FRAM_HOLD_Pin, FRAM_CS_Pin, FRAM_WP_Pin);
 80058fe:	2380      	movs	r3, #128	; 0x80
 8005900:	9303      	str	r3, [sp, #12]
 8005902:	2340      	movs	r3, #64	; 0x40
 8005904:	9302      	str	r3, [sp, #8]
 8005906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800590a:	9301      	str	r3, [sp, #4]
 800590c:	4bb0      	ldr	r3, [pc, #704]	; (8005bd0 <StartInitAndTimeTask+0x310>)
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	4baf      	ldr	r3, [pc, #700]	; (8005bd0 <StartInitAndTimeTask+0x310>)
 8005912:	4aaf      	ldr	r2, [pc, #700]	; (8005bd0 <StartInitAndTimeTask+0x310>)
 8005914:	49ad      	ldr	r1, [pc, #692]	; (8005bcc <StartInitAndTimeTask+0x30c>)
 8005916:	48b2      	ldr	r0, [pc, #712]	; (8005be0 <StartInitAndTimeTask+0x320>)
 8005918:	f7ff fdd3 	bl	80054c2 <fram_Init>
   flash_Init(&Flash, &hspi1, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 800591c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005920:	4aab      	ldr	r2, [pc, #684]	; (8005bd0 <StartInitAndTimeTask+0x310>)
 8005922:	49aa      	ldr	r1, [pc, #680]	; (8005bcc <StartInitAndTimeTask+0x30c>)
 8005924:	48af      	ldr	r0, [pc, #700]	; (8005be4 <StartInitAndTimeTask+0x324>)
 8005926:	f7ff fc1d 	bl	8005164 <flash_Init>
   //   fram_ChipErase(&Fram);
   //   HAL_IWDG_Refresh(&hiwdg);
   //   flash_ChipErase(&Flash);
   EF_SetFont(&timesNewRoman_12ptFontInfo);
 800592a:	48af      	ldr	r0, [pc, #700]	; (8005be8 <StartInitAndTimeTask+0x328>)
 800592c:	f7fb fe5a 	bl	80015e4 <EF_SetFont>
   EF_PutString((uint8_t *)"WITAJ W PROJEKCIE INŻYNIERSKIM", 0, 0, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005930:	2301      	movs	r3, #1
 8005932:	9302      	str	r3, [sp, #8]
 8005934:	2301      	movs	r3, #1
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	2300      	movs	r3, #0
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	2300      	movs	r3, #0
 800593e:	2200      	movs	r2, #0
 8005940:	2100      	movs	r1, #0
 8005942:	48aa      	ldr	r0, [pc, #680]	; (8005bec <StartInitAndTimeTask+0x32c>)
 8005944:	f7fc f868 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"NA TEN MOMENT TRWA INICJALIZACJA", 0, 20, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005948:	2301      	movs	r3, #1
 800594a:	9302      	str	r3, [sp, #8]
 800594c:	2301      	movs	r3, #1
 800594e:	9301      	str	r3, [sp, #4]
 8005950:	2300      	movs	r3, #0
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	2300      	movs	r3, #0
 8005956:	2214      	movs	r2, #20
 8005958:	2100      	movs	r1, #0
 800595a:	48a5      	ldr	r0, [pc, #660]	; (8005bf0 <StartInitAndTimeTask+0x330>)
 800595c:	f7fc f85c 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"ZA OKOŁO 2 MINUTY POJAWIĄ SIĘ WINIKI", 0, 40, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005960:	2301      	movs	r3, #1
 8005962:	9302      	str	r3, [sp, #8]
 8005964:	2301      	movs	r3, #1
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	2300      	movs	r3, #0
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	2300      	movs	r3, #0
 800596e:	2228      	movs	r2, #40	; 0x28
 8005970:	2100      	movs	r1, #0
 8005972:	48a0      	ldr	r0, [pc, #640]	; (8005bf4 <StartInitAndTimeTask+0x334>)
 8005974:	f7fc f850 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"SPRAWDŹ ZIELONĄ DIDE!", 0, 80, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005978:	2301      	movs	r3, #1
 800597a:	9302      	str	r3, [sp, #8]
 800597c:	2301      	movs	r3, #1
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	2300      	movs	r3, #0
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	2300      	movs	r3, #0
 8005986:	2250      	movs	r2, #80	; 0x50
 8005988:	2100      	movs	r1, #0
 800598a:	489b      	ldr	r0, [pc, #620]	; (8005bf8 <StartInitAndTimeTask+0x338>)
 800598c:	f7fc f844 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"JEŻELI MIGA TO WSZYSTKO DOBRZE", 0, 100, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005990:	2301      	movs	r3, #1
 8005992:	9302      	str	r3, [sp, #8]
 8005994:	2301      	movs	r3, #1
 8005996:	9301      	str	r3, [sp, #4]
 8005998:	2300      	movs	r3, #0
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	2300      	movs	r3, #0
 800599e:	2264      	movs	r2, #100	; 0x64
 80059a0:	2100      	movs	r1, #0
 80059a2:	4896      	ldr	r0, [pc, #600]	; (8005bfc <StartInitAndTimeTask+0x33c>)
 80059a4:	f7fc f838 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"JEŻELI NIE TO NALEŻY WCISĄĆ RESET", 0, 120, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80059a8:	2301      	movs	r3, #1
 80059aa:	9302      	str	r3, [sp, #8]
 80059ac:	2301      	movs	r3, #1
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	2300      	movs	r3, #0
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	2278      	movs	r2, #120	; 0x78
 80059b8:	2100      	movs	r1, #0
 80059ba:	4891      	ldr	r0, [pc, #580]	; (8005c00 <StartInitAndTimeTask+0x340>)
 80059bc:	f7fc f82c 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"FIRMWARE VERSION: 3.2", 0, 260, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80059c0:	2301      	movs	r3, #1
 80059c2:	9302      	str	r3, [sp, #8]
 80059c4:	2301      	movs	r3, #1
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	2300      	movs	r3, #0
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	2300      	movs	r3, #0
 80059ce:	f44f 7282 	mov.w	r2, #260	; 0x104
 80059d2:	2100      	movs	r1, #0
 80059d4:	488b      	ldr	r0, [pc, #556]	; (8005c04 <StartInitAndTimeTask+0x344>)
 80059d6:	f7fc f81f 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"HARDWARE VERSION: 1.2", 0, 280, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80059da:	2301      	movs	r3, #1
 80059dc:	9302      	str	r3, [sp, #8]
 80059de:	2301      	movs	r3, #1
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	2300      	movs	r3, #0
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	2300      	movs	r3, #0
 80059e8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80059ec:	2100      	movs	r1, #0
 80059ee:	4886      	ldr	r0, [pc, #536]	; (8005c08 <StartInitAndTimeTask+0x348>)
 80059f0:	f7fc f812 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"AUTOR: MARCIN WOJEWODZIC", 0, 220, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80059f4:	2301      	movs	r3, #1
 80059f6:	9302      	str	r3, [sp, #8]
 80059f8:	2301      	movs	r3, #1
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	2300      	movs	r3, #0
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	2300      	movs	r3, #0
 8005a02:	22dc      	movs	r2, #220	; 0xdc
 8005a04:	2100      	movs	r1, #0
 8005a06:	4881      	ldr	r0, [pc, #516]	; (8005c0c <StartInitAndTimeTask+0x34c>)
 8005a08:	f7fc f806 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"PROMOTOR: Dr Inż. MARCIN RODZIEWICZ", 0, 240, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	9302      	str	r3, [sp, #8]
 8005a10:	2301      	movs	r3, #1
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	2300      	movs	r3, #0
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	22f0      	movs	r2, #240	; 0xf0
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	487c      	ldr	r0, [pc, #496]	; (8005c10 <StartInitAndTimeTask+0x350>)
 8005a20:	f7fb fffa 	bl	8001a18 <EF_PutString>
   e_papier_display();
 8005a24:	f7ff f914 	bl	8004c50 <e_papier_display>
   taskEXIT_CRITICAL();
 8005a28:	f013 fc94 	bl	8019354 <vPortExitCritical>
   PMS_Reset();
 8005a2c:	f7fe f894 	bl	8003b58 <PMS_Reset>
   PMS_EnterSleepMode();
 8005a30:	f7fe f8a8 	bl	8003b84 <PMS_EnterSleepMode>
   osEventFlagsSet(C3V1FlagsHandle, INITIALIZE_ALL_FLAG);
 8005a34:	4b77      	ldr	r3, [pc, #476]	; (8005c14 <StartInitAndTimeTask+0x354>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2102      	movs	r1, #2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f010 f852 	bl	8015ae4 <osEventFlagsSet>
   RTC_TimeTypeDef RtcTime;
   RTC_DateTypeDef RtcDate;
   RTC_DateTypeDef ActualRtcDate = { 0 };
 8005a40:	2300      	movs	r3, #0
 8005a42:	66fb      	str	r3, [r7, #108]	; 0x6c
   char data[100];
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005a44:	4b73      	ldr	r3, [pc, #460]	; (8005c14 <StartInitAndTimeTask+0x354>)
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	2102      	movs	r1, #2
 8005a50:	f010 f8be 	bl	8015bd0 <osEventFlagsWait>
      osMutexAcquire(MenuMutexHandle, osWaitForever);
 8005a54:	4b70      	ldr	r3, [pc, #448]	; (8005c18 <StartInitAndTimeTask+0x358>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f04f 31ff 	mov.w	r1, #4294967295
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f010 f9a3 	bl	8015da8 <osMutexAcquire>
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8005a62:	4b6e      	ldr	r3, [pc, #440]	; (8005c1c <StartInitAndTimeTask+0x35c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f04f 31ff 	mov.w	r1, #4294967295
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f010 f99c 	bl	8015da8 <osMutexAcquire>
      osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8005a70:	4b6b      	ldr	r3, [pc, #428]	; (8005c20 <StartInitAndTimeTask+0x360>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f04f 31ff 	mov.w	r1, #4294967295
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f010 f995 	bl	8015da8 <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8005a7e:	4b69      	ldr	r3, [pc, #420]	; (8005c24 <StartInitAndTimeTask+0x364>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f04f 31ff 	mov.w	r1, #4294967295
 8005a86:	4618      	mov	r0, r3
 8005a88:	f010 f98e 	bl	8015da8 <osMutexAcquire>
      ssd1306_clear();
 8005a8c:	f007 fda8 	bl	800d5e0 <ssd1306_clear>
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 8005a90:	4b65      	ldr	r3, [pc, #404]	; (8005c28 <StartInitAndTimeTask+0x368>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f04f 31ff 	mov.w	r1, #4294967295
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f010 f985 	bl	8015da8 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8005a9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4861      	ldr	r0, [pc, #388]	; (8005c2c <StartInitAndTimeTask+0x36c>)
 8005aa8:	f00b f94c 	bl	8010d44 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8005aac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	485d      	ldr	r0, [pc, #372]	; (8005c2c <StartInitAndTimeTask+0x36c>)
 8005ab6:	f00b fa2f 	bl	8010f18 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 8005aba:	4b5b      	ldr	r3, [pc, #364]	; (8005c28 <StartInitAndTimeTask+0x368>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f010 f9bd 	bl	8015e3e <osMutexRelease>
      sprintf(data, "%d : %d", RtcTime.Hours, RtcTime.Minutes);
 8005ac4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8005ace:	f107 0008 	add.w	r0, r7, #8
 8005ad2:	4957      	ldr	r1, [pc, #348]	; (8005c30 <StartInitAndTimeTask+0x370>)
 8005ad4:	f007 f854 	bl	800cb80 <sprintf_>
      EF_SetFont(&timesNewRoman_22ptFontInfo);
 8005ad8:	4856      	ldr	r0, [pc, #344]	; (8005c34 <StartInitAndTimeTask+0x374>)
 8005ada:	f7fb fd83 	bl	80015e4 <EF_SetFont>
      if(RtcTime.Hours > 10)
 8005ade:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8005ae2:	2b0a      	cmp	r3, #10
 8005ae4:	d90d      	bls.n	8005b02 <StartInitAndTimeTask+0x242>
      {
         EF_PutString((uint8_t *)data, 23, 0, WHITE, BG_TRANSPARENT, BLACK, OLED);
 8005ae6:	f107 0008 	add.w	r0, r7, #8
 8005aea:	2300      	movs	r3, #0
 8005aec:	9302      	str	r3, [sp, #8]
 8005aee:	2300      	movs	r3, #0
 8005af0:	9301      	str	r3, [sp, #4]
 8005af2:	2300      	movs	r3, #0
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	2301      	movs	r3, #1
 8005af8:	2200      	movs	r2, #0
 8005afa:	2117      	movs	r1, #23
 8005afc:	f7fb ff8c 	bl	8001a18 <EF_PutString>
 8005b00:	e00c      	b.n	8005b1c <StartInitAndTimeTask+0x25c>
      }
      else
      {
         EF_PutString((uint8_t *)data, 38, 0, WHITE, BG_TRANSPARENT, BLACK, OLED);
 8005b02:	f107 0008 	add.w	r0, r7, #8
 8005b06:	2300      	movs	r3, #0
 8005b08:	9302      	str	r3, [sp, #8]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	2301      	movs	r3, #1
 8005b14:	2200      	movs	r2, #0
 8005b16:	2126      	movs	r1, #38	; 0x26
 8005b18:	f7fb ff7e 	bl	8001a18 <EF_PutString>
      }
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8005b1c:	4846      	ldr	r0, [pc, #280]	; (8005c38 <StartInitAndTimeTask+0x378>)
 8005b1e:	f7fb fd61 	bl	80015e4 <EF_SetFont>
      sprintf(data, "%d : %d : 20%d", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8005b22:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8005b26:	461a      	mov	r2, r3
 8005b28:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8005b32:	f107 0008 	add.w	r0, r7, #8
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4940      	ldr	r1, [pc, #256]	; (8005c3c <StartInitAndTimeTask+0x37c>)
 8005b3c:	f007 f820 	bl	800cb80 <sprintf_>
      EF_PutString((uint8_t *)data, 10, 30, WHITE, BG_TRANSPARENT, BLACK, OLED);
 8005b40:	f107 0008 	add.w	r0, r7, #8
 8005b44:	2300      	movs	r3, #0
 8005b46:	9302      	str	r3, [sp, #8]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	2301      	movs	r3, #1
 8005b52:	221e      	movs	r2, #30
 8005b54:	210a      	movs	r1, #10
 8005b56:	f7fb ff5f 	bl	8001a18 <EF_PutString>
      ;
      ssd1306_display();
 8005b5a:	f007 fd15 	bl	800d588 <ssd1306_display>
      osMutexRelease(SPI1MutexHandle);
 8005b5e:	4b31      	ldr	r3, [pc, #196]	; (8005c24 <StartInitAndTimeTask+0x364>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f010 f96b 	bl	8015e3e <osMutexRelease>
      osMutexRelease(SSD1306MutexHandle);
 8005b68:	4b2d      	ldr	r3, [pc, #180]	; (8005c20 <StartInitAndTimeTask+0x360>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f010 f966 	bl	8015e3e <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 8005b72:	4b2a      	ldr	r3, [pc, #168]	; (8005c1c <StartInitAndTimeTask+0x35c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f010 f961 	bl	8015e3e <osMutexRelease>
      osMutexRelease(MenuMutexHandle);
 8005b7c:	4b26      	ldr	r3, [pc, #152]	; (8005c18 <StartInitAndTimeTask+0x358>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f010 f95c 	bl	8015e3e <osMutexRelease>
      if(ActualRtcDate.Date != RtcDate.Date)
 8005b86:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8005b8a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d015      	beq.n	8005bbe <StartInitAndTimeTask+0x2fe>
      {
         ActualRtcDate.Date = RtcDate.Date;
 8005b92:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8005b96:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
         osEventFlagsSet(C3V1FlagsHandle, MOON_PHASE_FLAG);
 8005b9a:	4b1e      	ldr	r3, [pc, #120]	; (8005c14 <StartInitAndTimeTask+0x354>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2110      	movs	r1, #16
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f00f ff9f 	bl	8015ae4 <osEventFlagsSet>
         osEventFlagsSet(C3V1FlagsHandle, NEW_DAY_TO_SAVE);
 8005ba6:	4b1b      	ldr	r3, [pc, #108]	; (8005c14 <StartInitAndTimeTask+0x354>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2120      	movs	r1, #32
 8005bac:	4618      	mov	r0, r3
 8005bae:	f00f ff99 	bl	8015ae4 <osEventFlagsSet>
         osEventFlagsSet(C3V1FlagsHandle, NEW_DAY_FLAG);
 8005bb2:	4b18      	ldr	r3, [pc, #96]	; (8005c14 <StartInitAndTimeTask+0x354>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2180      	movs	r1, #128	; 0x80
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f00f ff93 	bl	8015ae4 <osEventFlagsSet>
      }
      osDelay(1000);
 8005bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bc2:	f00f fea3 	bl	801590c <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005bc6:	e73d      	b.n	8005a44 <StartInitAndTimeTask+0x184>
 8005bc8:	20003f60 	.word	0x20003f60
 8005bcc:	20004208 	.word	0x20004208
 8005bd0:	48000400 	.word	0x48000400
 8005bd4:	20003f7c 	.word	0x20003f7c
 8005bd8:	08024e28 	.word	0x08024e28
 8005bdc:	08009761 	.word	0x08009761
 8005be0:	20003fbc 	.word	0x20003fbc
 8005be4:	20003fac 	.word	0x20003fac
 8005be8:	08021adc 	.word	0x08021adc
 8005bec:	0802024c 	.word	0x0802024c
 8005bf0:	0802026c 	.word	0x0802026c
 8005bf4:	08020290 	.word	0x08020290
 8005bf8:	080202b8 	.word	0x080202b8
 8005bfc:	080202d0 	.word	0x080202d0
 8005c00:	080202f0 	.word	0x080202f0
 8005c04:	08020318 	.word	0x08020318
 8005c08:	08020330 	.word	0x08020330
 8005c0c:	08020348 	.word	0x08020348
 8005c10:	08020364 	.word	0x08020364
 8005c14:	200040c4 	.word	0x200040c4
 8005c18:	200040b8 	.word	0x200040b8
 8005c1c:	200040a4 	.word	0x200040a4
 8005c20:	200040a8 	.word	0x200040a8
 8005c24:	200040ac 	.word	0x200040ac
 8005c28:	200040bc 	.word	0x200040bc
 8005c2c:	200041d4 	.word	0x200041d4
 8005c30:	0802038c 	.word	0x0802038c
 8005c34:	08024d40 	.word	0x08024d40
 8005c38:	08022de8 	.word	0x08022de8
 8005c3c:	08020394 	.word	0x08020394

08005c40 <StartRfpTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfpTask */
void StartRfpTask(void *argument)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartRfpTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005c48:	4b08      	ldr	r3, [pc, #32]	; (8005c6c <StartRfpTask+0x2c>)
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c50:	2202      	movs	r2, #2
 8005c52:	2102      	movs	r1, #2
 8005c54:	f00f ffbc 	bl	8015bd0 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      if(Rfp.Initialize == RFP_INITIALIZE)
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <StartRfpTask+0x30>)
 8005c5a:	78db      	ldrb	r3, [r3, #3]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <StartRfpTask+0x24>
      {
         RFP_Handle();
 8005c60:	f006 ffaa 	bl	800cbb8 <RFP_Handle>
      }
      osDelay(10);
 8005c64:	200a      	movs	r0, #10
 8005c66:	f00f fe51 	bl	801590c <osDelay>
      if(Rfp.Initialize == RFP_INITIALIZE)
 8005c6a:	e7f5      	b.n	8005c58 <StartRfpTask+0x18>
 8005c6c:	200040c4 	.word	0x200040c4
 8005c70:	20003f60 	.word	0x20003f60

08005c74 <StartMeasurmentTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasurmentTask */
void StartMeasurmentTask(void *argument)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b092      	sub	sp, #72	; 0x48
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMeasurmentTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005c7c:	4b46      	ldr	r3, [pc, #280]	; (8005d98 <StartMeasurmentTask+0x124>)
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	f04f 33ff 	mov.w	r3, #4294967295
 8005c84:	2202      	movs	r2, #2
 8005c86:	2102      	movs	r1, #2
 8005c88:	f00f ffa2 	bl	8015bd0 <osEventFlagsWait>
   uint32_t Time                 = 1200000;
 8005c8c:	4b43      	ldr	r3, [pc, #268]	; (8005d9c <StartMeasurmentTask+0x128>)
 8005c8e:	647b      	str	r3, [r7, #68]	; 0x44
   uint8_t Command               = RFP_START_MEASURMENT;
 8005c90:	2302      	movs	r3, #2
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
   RfpMessage_TypeDef RfpMessage = { 0 };
 8005c96:	2300      	movs	r3, #0
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
   MV_TypeDef _Mv                = { 0 };
 8005c9a:	f107 030c 	add.w	r3, r7, #12
 8005c9e:	2230      	movs	r2, #48	; 0x30
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f013 fe6c 	bl	8019980 <memset>
   /* Infinite loop */
   for(;;)
   {
      RfpMessage.AdditionalData = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	87fb      	strh	r3, [r7, #62]	; 0x3e
      RfpMessage.Data           = Command;
 8005cac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005cb0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
      RfpMessage.MessageType    = RFP_COMMAND;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
      osMessageQueuePut(RfpMessageQueueHandle, &RfpMessage, 0, osWaitForever);
 8005cba:	4b39      	ldr	r3, [pc, #228]	; (8005da0 <StartMeasurmentTask+0x12c>)
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f010 f96a 	bl	8015fa0 <osMessageQueuePut>
      PMSFlag = 0;
 8005ccc:	4b35      	ldr	r3, [pc, #212]	; (8005da4 <StartMeasurmentTask+0x130>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
      PMS_ExitSleepMode();
 8005cd2:	f7fd ff63 	bl	8003b9c <PMS_ExitSleepMode>
      osEventFlagsWait(C3V1FlagsHandle, SEND_MEASURMENT_COMMAND_FLAG, osFlagsWaitAny, osWaitForever);
 8005cd6:	4b30      	ldr	r3, [pc, #192]	; (8005d98 <StartMeasurmentTask+0x124>)
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	f04f 33ff 	mov.w	r3, #4294967295
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	f00f ff75 	bl	8015bd0 <osEventFlagsWait>
      osMessageQueueGet(TimeBreakMeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8005ce6:	4b30      	ldr	r3, [pc, #192]	; (8005da8 <StartMeasurmentTask+0x134>)
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	f107 010c 	add.w	r1, r7, #12
 8005cee:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f010 f9b4 	bl	8016060 <osMessageQueueGet>
      if(!(_Mv.BatteryState & 0x01))
 8005cf8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d129      	bne.n	8005d58 <StartMeasurmentTask+0xe4>
      {
         Time -= 600000;
 8005d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d06:	f5a3 2312 	sub.w	r3, r3, #598016	; 0x92000
 8005d0a:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 8005d0e:	647b      	str	r3, [r7, #68]	; 0x44
         Time -= (100000 * _Mv.Brightness / 1000);
 8005d10:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d12:	461a      	mov	r2, r3
 8005d14:	2364      	movs	r3, #100	; 0x64
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d1e:	1a9b      	subs	r3, r3, r2
 8005d20:	647b      	str	r3, [r7, #68]	; 0x44
         Time -= (300000 * (_Mv.BatteryVoltage * 100) / 430);
 8005d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d24:	ee07 3a90 	vmov	s15, r3
 8005d28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005d30:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8005dac <StartMeasurmentTask+0x138>
 8005d34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005d38:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8005db0 <StartMeasurmentTask+0x13c>
 8005d3c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005d40:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8005db4 <StartMeasurmentTask+0x140>
 8005d44:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d50:	ee17 3a90 	vmov	r3, s15
 8005d54:	647b      	str	r3, [r7, #68]	; 0x44
 8005d56:	e019      	b.n	8005d8c <StartMeasurmentTask+0x118>
      }
      else
      {
         Time -= (750000 * (_Mv.BatteryVoltage * 100) / 430);
 8005d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d62:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005d66:	eddf 6a11 	vldr	s13, [pc, #68]	; 8005dac <StartMeasurmentTask+0x138>
 8005d6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005d6e:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005db8 <StartMeasurmentTask+0x144>
 8005d72:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005d76:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 8005db4 <StartMeasurmentTask+0x140>
 8005d7a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d86:	ee17 3a90 	vmov	r3, s15
 8005d8a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      osDelay(Time);
 8005d8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005d8e:	f00f fdbd 	bl	801590c <osDelay>
      Time = 1200000;
 8005d92:	4b02      	ldr	r3, [pc, #8]	; (8005d9c <StartMeasurmentTask+0x128>)
 8005d94:	647b      	str	r3, [r7, #68]	; 0x44
      RfpMessage.AdditionalData = 0;
 8005d96:	e787      	b.n	8005ca8 <StartMeasurmentTask+0x34>
 8005d98:	200040c4 	.word	0x200040c4
 8005d9c:	00124f80 	.word	0x00124f80
 8005da0:	20004088 	.word	0x20004088
 8005da4:	2000403c 	.word	0x2000403c
 8005da8:	2000409c 	.word	0x2000409c
 8005dac:	42c80000 	.word	0x42c80000
 8005db0:	48927c00 	.word	0x48927c00
 8005db4:	43d70000 	.word	0x43d70000
 8005db8:	49371b00 	.word	0x49371b00

08005dbc <StartInternalMeasurmentTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInternalMeasurmentTask */
void StartInternalMeasurmentTask(void *argument)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b090      	sub	sp, #64	; 0x40
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartInternalMeasurmentTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005dc4:	4b56      	ldr	r3, [pc, #344]	; (8005f20 <StartInternalMeasurmentTask+0x164>)
 8005dc6:	6818      	ldr	r0, [r3, #0]
 8005dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dcc:	2202      	movs	r2, #2
 8005dce:	2102      	movs	r1, #2
 8005dd0:	f00f fefe 	bl	8015bd0 <osEventFlagsWait>
   MV_TypeDef _Mv = { 0 };
 8005dd4:	f107 030c 	add.w	r3, r7, #12
 8005dd8:	2230      	movs	r2, #48	; 0x30
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f013 fdcf 	bl	8019980 <memset>
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(ExternalMeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8005de2:	4b50      	ldr	r3, [pc, #320]	; (8005f24 <StartInternalMeasurmentTask+0x168>)
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	f107 010c 	add.w	r1, r7, #12
 8005dea:	f04f 33ff 	mov.w	r3, #4294967295
 8005dee:	2200      	movs	r2, #0
 8005df0:	f010 f936 	bl	8016060 <osMessageQueueGet>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8005df4:	4b4c      	ldr	r3, [pc, #304]	; (8005f28 <StartInternalMeasurmentTask+0x16c>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f04f 31ff 	mov.w	r1, #4294967295
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f00f ffd3 	bl	8015da8 <osMutexAcquire>
      osMutexAcquire(BME280MutexHandle, osWaitForever);
 8005e02:	4b4a      	ldr	r3, [pc, #296]	; (8005f2c <StartInternalMeasurmentTask+0x170>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f04f 31ff 	mov.w	r1, #4294967295
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f00f ffcc 	bl	8015da8 <osMutexAcquire>
      HAL_UARTEx_ReceiveToIdle_DMA(&huart2, PMSData, 100);
 8005e10:	2264      	movs	r2, #100	; 0x64
 8005e12:	4947      	ldr	r1, [pc, #284]	; (8005f30 <StartInternalMeasurmentTask+0x174>)
 8005e14:	4847      	ldr	r0, [pc, #284]	; (8005f34 <StartInternalMeasurmentTask+0x178>)
 8005e16:	f00f fbaf 	bl	8015578 <HAL_UARTEx_ReceiveToIdle_DMA>
      uint32_t Time = HAL_GetTick();
 8005e1a:	f008 fa4d 	bl	800e2b8 <HAL_GetTick>
 8005e1e:	63f8      	str	r0, [r7, #60]	; 0x3c
      while(PMSFlag == 0)
 8005e20:	e00b      	b.n	8005e3a <StartInternalMeasurmentTask+0x7e>
      {
         osDelay(100);
 8005e22:	2064      	movs	r0, #100	; 0x64
 8005e24:	f00f fd72 	bl	801590c <osDelay>
         if(HAL_GetTick() - Time > 10000)
 8005e28:	f008 fa46 	bl	800e2b8 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d804      	bhi.n	8005e44 <StartInternalMeasurmentTask+0x88>
      while(PMSFlag == 0)
 8005e3a:	4b3f      	ldr	r3, [pc, #252]	; (8005f38 <StartInternalMeasurmentTask+0x17c>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0ef      	beq.n	8005e22 <StartInternalMeasurmentTask+0x66>
 8005e42:	e000      	b.n	8005e46 <StartInternalMeasurmentTask+0x8a>
         {
            break;
 8005e44:	bf00      	nop
         }
      }
      _Mv.InternalPM1  = ((PMSData[4] << 8) | PMSData[5]);
 8005e46:	4b3a      	ldr	r3, [pc, #232]	; (8005f30 <StartInternalMeasurmentTask+0x174>)
 8005e48:	791b      	ldrb	r3, [r3, #4]
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	b21a      	sxth	r2, r3
 8005e4e:	4b38      	ldr	r3, [pc, #224]	; (8005f30 <StartInternalMeasurmentTask+0x174>)
 8005e50:	795b      	ldrb	r3, [r3, #5]
 8005e52:	b21b      	sxth	r3, r3
 8005e54:	4313      	orrs	r3, r2
 8005e56:	b21b      	sxth	r3, r3
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	84fb      	strh	r3, [r7, #38]	; 0x26
      _Mv.InternalPM25 = ((PMSData[6] << 8) | PMSData[7]);
 8005e5c:	4b34      	ldr	r3, [pc, #208]	; (8005f30 <StartInternalMeasurmentTask+0x174>)
 8005e5e:	799b      	ldrb	r3, [r3, #6]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	b21a      	sxth	r2, r3
 8005e64:	4b32      	ldr	r3, [pc, #200]	; (8005f30 <StartInternalMeasurmentTask+0x174>)
 8005e66:	79db      	ldrb	r3, [r3, #7]
 8005e68:	b21b      	sxth	r3, r3
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	b21b      	sxth	r3, r3
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	853b      	strh	r3, [r7, #40]	; 0x28
      _Mv.InternalPM10 = ((PMSData[8] << 8) | PMSData[9]);
 8005e72:	4b2f      	ldr	r3, [pc, #188]	; (8005f30 <StartInternalMeasurmentTask+0x174>)
 8005e74:	7a1b      	ldrb	r3, [r3, #8]
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	b21a      	sxth	r2, r3
 8005e7a:	4b2d      	ldr	r3, [pc, #180]	; (8005f30 <StartInternalMeasurmentTask+0x174>)
 8005e7c:	7a5b      	ldrb	r3, [r3, #9]
 8005e7e:	b21b      	sxth	r3, r3
 8005e80:	4313      	orrs	r3, r2
 8005e82:	b21b      	sxth	r3, r3
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	857b      	strh	r3, [r7, #42]	; 0x2a
      PMS_EnterSleepMode();
 8005e88:	f7fd fe7c 	bl	8003b84 <PMS_EnterSleepMode>
      BME280_ReadAll(&Bme, &_Mv.InternalTemperature, &_Mv.Pressure, &_Mv.InternalHumidity);
 8005e8c:	f107 030c 	add.w	r3, r7, #12
 8005e90:	f103 000c 	add.w	r0, r3, #12
 8005e94:	f107 030c 	add.w	r3, r7, #12
 8005e98:	f103 0210 	add.w	r2, r3, #16
 8005e9c:	f107 030c 	add.w	r3, r7, #12
 8005ea0:	f103 0108 	add.w	r1, r3, #8
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	4825      	ldr	r0, [pc, #148]	; (8005f3c <StartInternalMeasurmentTask+0x180>)
 8005ea8:	f7fe fbc0 	bl	800462c <BME280_ReadAll>
      osMutexRelease(BME280MutexHandle);
 8005eac:	4b1f      	ldr	r3, [pc, #124]	; (8005f2c <StartInternalMeasurmentTask+0x170>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f00f ffc4 	bl	8015e3e <osMutexRelease>
      _Mv.Pressure += 10.0;
 8005eb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8005eba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005ebe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      osMutexRelease(SPI1MutexHandle);
 8005ec6:	4b18      	ldr	r3, [pc, #96]	; (8005f28 <StartInternalMeasurmentTask+0x16c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f00f ffb7 	bl	8015e3e <osMutexRelease>
      osMessageQueuePut(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8005ed0:	4b1b      	ldr	r3, [pc, #108]	; (8005f40 <StartInternalMeasurmentTask+0x184>)
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	f107 010c 	add.w	r1, r7, #12
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	2200      	movs	r2, #0
 8005ede:	f010 f85f 	bl	8015fa0 <osMessageQueuePut>
      osMessageQueuePut(DataToSaveQueueHandle, &_Mv, 0, osWaitForever);
 8005ee2:	4b18      	ldr	r3, [pc, #96]	; (8005f44 <StartInternalMeasurmentTask+0x188>)
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	f107 010c 	add.w	r1, r7, #12
 8005eea:	f04f 33ff 	mov.w	r3, #4294967295
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f010 f856 	bl	8015fa0 <osMessageQueuePut>
      osMessageQueuePut(WS2812bMeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8005ef4:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <StartInternalMeasurmentTask+0x18c>)
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	f107 010c 	add.w	r1, r7, #12
 8005efc:	f04f 33ff 	mov.w	r3, #4294967295
 8005f00:	2200      	movs	r2, #0
 8005f02:	f010 f84d 	bl	8015fa0 <osMessageQueuePut>
      osMessageQueuePut(TimeBreakMeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8005f06:	4b11      	ldr	r3, [pc, #68]	; (8005f4c <StartInternalMeasurmentTask+0x190>)
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	f107 010c 	add.w	r1, r7, #12
 8005f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f12:	2200      	movs	r2, #0
 8005f14:	f010 f844 	bl	8015fa0 <osMessageQueuePut>
      osDelay(1);
 8005f18:	2001      	movs	r0, #1
 8005f1a:	f00f fcf7 	bl	801590c <osDelay>
   {
 8005f1e:	e760      	b.n	8005de2 <StartInternalMeasurmentTask+0x26>
 8005f20:	200040c4 	.word	0x200040c4
 8005f24:	2000408c 	.word	0x2000408c
 8005f28:	200040ac 	.word	0x200040ac
 8005f2c:	200040b4 	.word	0x200040b4
 8005f30:	20003fd8 	.word	0x20003fd8
 8005f34:	20004894 	.word	0x20004894
 8005f38:	2000403c 	.word	0x2000403c
 8005f3c:	20003f7c 	.word	0x20003f7c
 8005f40:	20004078 	.word	0x20004078
 8005f44:	20004084 	.word	0x20004084
 8005f48:	20004098 	.word	0x20004098
 8005f4c:	2000409c 	.word	0x2000409c

08005f50 <StartMoonPhaseTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMoonPhaseTask */
void StartMoonPhaseTask(void *argument)
{
 8005f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f54:	ed2d 8b02 	vpush	{d8}
 8005f58:	b092      	sub	sp, #72	; 0x48
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMoonPhaseTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005f5e:	4bb4      	ldr	r3, [pc, #720]	; (8006230 <StartMoonPhaseTask+0x2e0>)
 8005f60:	6818      	ldr	r0, [r3, #0]
 8005f62:	f04f 33ff 	mov.w	r3, #4294967295
 8005f66:	2202      	movs	r2, #2
 8005f68:	2102      	movs	r1, #2
 8005f6a:	f00f fe31 	bl	8015bd0 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, MOON_PHASE_FLAG, osFlagsWaitAny, osWaitForever);
 8005f6e:	4bb0      	ldr	r3, [pc, #704]	; (8006230 <StartMoonPhaseTask+0x2e0>)
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295
 8005f76:	2200      	movs	r2, #0
 8005f78:	2110      	movs	r1, #16
 8005f7a:	f00f fe29 	bl	8015bd0 <osEventFlagsWait>
      RTC_TimeTypeDef RtcTime;
      RTC_DateTypeDef RtcDate;
      double PhaseMoon = 0.0, TempPhaseNew = 0, TempPhaseOld = 0;
 8005f7e:	f04f 0200 	mov.w	r2, #0
 8005f82:	f04f 0300 	mov.w	r3, #0
 8005f86:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      uint32_t Cnt          = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint8_t FullMoonPhase = 0, ThirdMoonPhase = 0, FirstMoonPhase = 0, NewMoonPhase = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fac:	2300      	movs	r3, #0
 8005fae:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 8005fbe:	4b9d      	ldr	r3, [pc, #628]	; (8006234 <StartMoonPhaseTask+0x2e4>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f04f 31ff 	mov.w	r1, #4294967295
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f00f feee 	bl	8015da8 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8005fcc:	f107 0314 	add.w	r3, r7, #20
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4898      	ldr	r0, [pc, #608]	; (8006238 <StartMoonPhaseTask+0x2e8>)
 8005fd6:	f00a feb5 	bl	8010d44 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8005fda:	f107 0310 	add.w	r3, r7, #16
 8005fde:	2200      	movs	r2, #0
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4895      	ldr	r0, [pc, #596]	; (8006238 <StartMoonPhaseTask+0x2e8>)
 8005fe4:	f00a ff98 	bl	8010f18 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 8005fe8:	4b92      	ldr	r3, [pc, #584]	; (8006234 <StartMoonPhaseTask+0x2e4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f00f ff26 	bl	8015e3e <osMutexRelease>
      TempPhaseNew = faza((RtcDate.Year + 2000), RtcDate.Month, RtcDate.Date, 0, 0, 0);
 8005ff2:	7cfb      	ldrb	r3, [r7, #19]
 8005ff4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fa faab 	bl	8000554 <__aeabi_i2d>
 8005ffe:	4604      	mov	r4, r0
 8006000:	460d      	mov	r5, r1
 8006002:	7c7b      	ldrb	r3, [r7, #17]
 8006004:	4618      	mov	r0, r3
 8006006:	f7fa fa95 	bl	8000534 <__aeabi_ui2d>
 800600a:	4680      	mov	r8, r0
 800600c:	4689      	mov	r9, r1
 800600e:	7cbb      	ldrb	r3, [r7, #18]
 8006010:	4618      	mov	r0, r3
 8006012:	f7fa fa8f 	bl	8000534 <__aeabi_ui2d>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8006218 <StartMoonPhaseTask+0x2c8>
 800601e:	ed9f 4b7e 	vldr	d4, [pc, #504]	; 8006218 <StartMoonPhaseTask+0x2c8>
 8006022:	ed9f 3b7d 	vldr	d3, [pc, #500]	; 8006218 <StartMoonPhaseTask+0x2c8>
 8006026:	ec43 2b12 	vmov	d2, r2, r3
 800602a:	ec49 8b11 	vmov	d1, r8, r9
 800602e:	ec45 4b10 	vmov	d0, r4, r5
 8006032:	f003 fcbd 	bl	80099b0 <faza>
 8006036:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
      TempPhaseOld = TempPhaseNew;
 800603a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800603e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for(int Hours = 0; Hours < 24; Hours++)
 8006042:	2300      	movs	r3, #0
 8006044:	637b      	str	r3, [r7, #52]	; 0x34
 8006046:	e0aa      	b.n	800619e <StartMoonPhaseTask+0x24e>
      {
         for(int Minutes = 0; Minutes < 60; Minutes++)
 8006048:	2300      	movs	r3, #0
 800604a:	633b      	str	r3, [r7, #48]	; 0x30
 800604c:	e0a0      	b.n	8006190 <StartMoonPhaseTask+0x240>
         {

            TempPhaseNew = faza((RtcDate.Year + 2000), RtcDate.Month, RtcDate.Date, Hours, Minutes, 0);
 800604e:	7cfb      	ldrb	r3, [r7, #19]
 8006050:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006054:	4618      	mov	r0, r3
 8006056:	f7fa fa7d 	bl	8000554 <__aeabi_i2d>
 800605a:	4604      	mov	r4, r0
 800605c:	460d      	mov	r5, r1
 800605e:	7c7b      	ldrb	r3, [r7, #17]
 8006060:	4618      	mov	r0, r3
 8006062:	f7fa fa67 	bl	8000534 <__aeabi_ui2d>
 8006066:	4680      	mov	r8, r0
 8006068:	4689      	mov	r9, r1
 800606a:	7cbb      	ldrb	r3, [r7, #18]
 800606c:	4618      	mov	r0, r3
 800606e:	f7fa fa61 	bl	8000534 <__aeabi_ui2d>
 8006072:	4682      	mov	sl, r0
 8006074:	468b      	mov	fp, r1
 8006076:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006078:	f7fa fa6c 	bl	8000554 <__aeabi_i2d>
 800607c:	ec41 0b18 	vmov	d8, r0, r1
 8006080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006082:	f7fa fa67 	bl	8000554 <__aeabi_i2d>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8006218 <StartMoonPhaseTask+0x2c8>
 800608e:	ec43 2b14 	vmov	d4, r2, r3
 8006092:	eeb0 3a48 	vmov.f32	s6, s16
 8006096:	eef0 3a68 	vmov.f32	s7, s17
 800609a:	ec4b ab12 	vmov	d2, sl, fp
 800609e:	ec49 8b11 	vmov	d1, r8, r9
 80060a2:	ec45 4b10 	vmov	d0, r4, r5
 80060a6:	f003 fc83 	bl	80099b0 <faza>
 80060aa:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
            PhaseMoon += TempPhaseNew;
 80060ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060b6:	f7fa f901 	bl	80002bc <__adddf3>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	e9c7 2302 	strd	r2, r3, [r7, #8]
            if(TempPhaseNew > -50.5 && TempPhaseNew < -49.5)
 80060c2:	a357      	add	r3, pc, #348	; (adr r3, 8006220 <StartMoonPhaseTask+0x2d0>)
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060cc:	f7fa fd3c 	bl	8000b48 <__aeabi_dcmpgt>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00c      	beq.n	80060f0 <StartMoonPhaseTask+0x1a0>
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	4b58      	ldr	r3, [pc, #352]	; (800623c <StartMoonPhaseTask+0x2ec>)
 80060dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060e0:	f7fa fd14 	bl	8000b0c <__aeabi_dcmplt>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <StartMoonPhaseTask+0x1a0>
            {
               ThirdMoonPhase = 1;
 80060ea:	2301      	movs	r3, #1
 80060ec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            }
            if(TempPhaseNew > -0.5 && TempPhaseNew < 0.5)
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	4b52      	ldr	r3, [pc, #328]	; (8006240 <StartMoonPhaseTask+0x2f0>)
 80060f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060fa:	f7fa fd25 	bl	8000b48 <__aeabi_dcmpgt>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00c      	beq.n	800611e <StartMoonPhaseTask+0x1ce>
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	4b4e      	ldr	r3, [pc, #312]	; (8006244 <StartMoonPhaseTask+0x2f4>)
 800610a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800610e:	f7fa fcfd 	bl	8000b0c <__aeabi_dcmplt>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <StartMoonPhaseTask+0x1ce>
            {
               NewMoonPhase = 1;
 8006118:	2301      	movs	r3, #1
 800611a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            }
            if(TempPhaseNew > 49.5 && TempPhaseNew < 50.5)
 800611e:	a342      	add	r3, pc, #264	; (adr r3, 8006228 <StartMoonPhaseTask+0x2d8>)
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006128:	f7fa fd0e 	bl	8000b48 <__aeabi_dcmpgt>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00c      	beq.n	800614c <StartMoonPhaseTask+0x1fc>
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	4b44      	ldr	r3, [pc, #272]	; (8006248 <StartMoonPhaseTask+0x2f8>)
 8006138:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800613c:	f7fa fce6 	bl	8000b0c <__aeabi_dcmplt>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <StartMoonPhaseTask+0x1fc>
            {
               FirstMoonPhase = 1;
 8006146:	2301      	movs	r3, #1
 8006148:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            }
            if(TempPhaseNew < TempPhaseOld && FullMoonPhase == 0)
 800614c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006150:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006154:	f7fa fcda 	bl	8000b0c <__aeabi_dcmplt>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00b      	beq.n	8006176 <StartMoonPhaseTask+0x226>
 800615e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006162:	2b00      	cmp	r3, #0
 8006164:	d107      	bne.n	8006176 <StartMoonPhaseTask+0x226>
            {
               if(NewMoonPhase == 0)
 8006166:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800616a:	2b00      	cmp	r3, #0
 800616c:	d107      	bne.n	800617e <StartMoonPhaseTask+0x22e>
               {
                  FullMoonPhase = 1;
 800616e:	2301      	movs	r3, #1
 8006170:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
               if(NewMoonPhase == 0)
 8006174:	e003      	b.n	800617e <StartMoonPhaseTask+0x22e>
               }
            }
            else
            {
               TempPhaseOld = TempPhaseNew;
 8006176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800617a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
            }
            Cnt++;
 800617e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006180:	3301      	adds	r3, #1
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
            osDelay(5);
 8006184:	2005      	movs	r0, #5
 8006186:	f00f fbc1 	bl	801590c <osDelay>
         for(int Minutes = 0; Minutes < 60; Minutes++)
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	3301      	adds	r3, #1
 800618e:	633b      	str	r3, [r7, #48]	; 0x30
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	2b3b      	cmp	r3, #59	; 0x3b
 8006194:	f77f af5b 	ble.w	800604e <StartMoonPhaseTask+0xfe>
      for(int Hours = 0; Hours < 24; Hours++)
 8006198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619a:	3301      	adds	r3, #1
 800619c:	637b      	str	r3, [r7, #52]	; 0x34
 800619e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a0:	2b17      	cmp	r3, #23
 80061a2:	f77f af51 	ble.w	8006048 <StartMoonPhaseTask+0xf8>
         }
      }
      PhaseMoon /= (Cnt);
 80061a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80061ac:	f7fa f9c2 	bl	8000534 <__aeabi_ui2d>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4620      	mov	r0, r4
 80061b6:	4629      	mov	r1, r5
 80061b8:	f7fa fb60 	bl	800087c <__aeabi_ddiv>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      if(FullMoonPhase == 1)
 80061c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d108      	bne.n	80061de <StartMoonPhaseTask+0x28e>
      {
         FullMoonPhase = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
         PhaseMoon     = 100;
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	4b1d      	ldr	r3, [pc, #116]	; (800624c <StartMoonPhaseTask+0x2fc>)
 80061d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80061dc:	e046      	b.n	800626c <StartMoonPhaseTask+0x31c>
      }
      else if(ThirdMoonPhase == 1)
 80061de:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d108      	bne.n	80061f8 <StartMoonPhaseTask+0x2a8>
      {
         ThirdMoonPhase = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
         PhaseMoon      = -50;
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	4b17      	ldr	r3, [pc, #92]	; (8006250 <StartMoonPhaseTask+0x300>)
 80061f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80061f6:	e039      	b.n	800626c <StartMoonPhaseTask+0x31c>
      }
      else if(NewMoonPhase == 1)
 80061f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d129      	bne.n	8006254 <StartMoonPhaseTask+0x304>
      {
         NewMoonPhase = 0;
 8006200:	2300      	movs	r3, #0
 8006202:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
         PhaseMoon    = 0;
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8006212:	e02b      	b.n	800626c <StartMoonPhaseTask+0x31c>
 8006214:	f3af 8000 	nop.w
	...
 8006224:	c0494000 	.word	0xc0494000
 8006228:	00000000 	.word	0x00000000
 800622c:	4048c000 	.word	0x4048c000
 8006230:	200040c4 	.word	0x200040c4
 8006234:	200040bc 	.word	0x200040bc
 8006238:	200041d4 	.word	0x200041d4
 800623c:	c048c000 	.word	0xc048c000
 8006240:	bfe00000 	.word	0xbfe00000
 8006244:	3fe00000 	.word	0x3fe00000
 8006248:	40494000 	.word	0x40494000
 800624c:	40590000 	.word	0x40590000
 8006250:	c0490000 	.word	0xc0490000
      }
      else if(FirstMoonPhase == 1)
 8006254:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8006258:	2b01      	cmp	r3, #1
 800625a:	d107      	bne.n	800626c <StartMoonPhaseTask+0x31c>
      {
         FirstMoonPhase = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
         PhaseMoon      = 50;
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	4b08      	ldr	r3, [pc, #32]	; (8006288 <StartMoonPhaseTask+0x338>)
 8006268:	e9c7 2302 	strd	r2, r3, [r7, #8]
      }
      osMessageQueuePut(MoonPhaseQueueHandle, &PhaseMoon, 0, osWaitForever);
 800626c:	4b07      	ldr	r3, [pc, #28]	; (800628c <StartMoonPhaseTask+0x33c>)
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	f107 0108 	add.w	r1, r7, #8
 8006274:	f04f 33ff 	mov.w	r3, #4294967295
 8006278:	2200      	movs	r2, #0
 800627a:	f00f fe91 	bl	8015fa0 <osMessageQueuePut>
      osDelay(1);
 800627e:	2001      	movs	r0, #1
 8006280:	f00f fb44 	bl	801590c <osDelay>
   {
 8006284:	e673      	b.n	8005f6e <StartMoonPhaseTask+0x1e>
 8006286:	bf00      	nop
 8006288:	40490000 	.word	0x40490000
 800628c:	2000407c 	.word	0x2000407c

08006290 <StartE_PapierDrawingTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartE_PapierDrawingTask */
void StartE_PapierDrawingTask(void *argument)
{
 8006290:	b5b0      	push	{r4, r5, r7, lr}
 8006292:	b0c0      	sub	sp, #256	; 0x100
 8006294:	af04      	add	r7, sp, #16
 8006296:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartE_PapierDrawingTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8006298:	4b19      	ldr	r3, [pc, #100]	; (8006300 <StartE_PapierDrawingTask+0x70>)
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	f04f 33ff 	mov.w	r3, #4294967295
 80062a0:	2202      	movs	r2, #2
 80062a2:	2102      	movs	r1, #2
 80062a4:	f00f fc94 	bl	8015bd0 <osEventFlagsWait>
   RTC_TimeTypeDef RtcTime;
   RTC_DateTypeDef RtcDate;
   MV_TypeDef _Mv          = { 0 };
 80062a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80062ac:	2230      	movs	r2, #48	; 0x30
 80062ae:	2100      	movs	r1, #0
 80062b0:	4618      	mov	r0, r3
 80062b2:	f013 fb65 	bl	8019980 <memset>
   double _MoonPhase       = 0;
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
   Sunrise_TypeDef Sunrise = { 0 };
 80062c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	605a      	str	r2, [r3, #4]
 80062cc:	609a      	str	r2, [r3, #8]
 80062ce:	60da      	str	r2, [r3, #12]
 80062d0:	611a      	str	r2, [r3, #16]
 80062d2:	615a      	str	r2, [r3, #20]
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 80062d4:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <StartE_PapierDrawingTask+0x74>)
 80062d6:	6818      	ldr	r0, [r3, #0]
 80062d8:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80062dc:	f04f 33ff 	mov.w	r3, #4294967295
 80062e0:	2200      	movs	r2, #0
 80062e2:	f00f febd 	bl	8016060 <osMessageQueueGet>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 80062e6:	4b08      	ldr	r3, [pc, #32]	; (8006308 <StartE_PapierDrawingTask+0x78>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f04f 31ff 	mov.w	r1, #4294967295
 80062ee:	4618      	mov	r0, r3
 80062f0:	f00f fd5a 	bl	8015da8 <osMutexAcquire>
      e_papier_clear();
 80062f4:	f7fe fd1e 	bl	8004d34 <e_papier_clear>
      for(int i = 1; i < 3; i++)
 80062f8:	2301      	movs	r3, #1
 80062fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062fe:	e01d      	b.n	800633c <StartE_PapierDrawingTask+0xac>
 8006300:	200040c4 	.word	0x200040c4
 8006304:	20004078 	.word	0x20004078
 8006308:	200040b0 	.word	0x200040b0
      {
         GFX_DrawLine(150 * i, 0, 150 * i, 300, BLACK, E_PAPIER);
 800630c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006310:	2296      	movs	r2, #150	; 0x96
 8006312:	fb02 f003 	mul.w	r0, r2, r3
 8006316:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800631a:	2296      	movs	r2, #150	; 0x96
 800631c:	fb03 f202 	mul.w	r2, r3, r2
 8006320:	2301      	movs	r3, #1
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	2300      	movs	r3, #0
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800632c:	2100      	movs	r1, #0
 800632e:	f7fb f8e1 	bl	80014f4 <GFX_DrawLine>
      for(int i = 1; i < 3; i++)
 8006332:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006336:	3301      	adds	r3, #1
 8006338:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800633c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006340:	2b02      	cmp	r3, #2
 8006342:	dde3      	ble.n	800630c <StartE_PapierDrawingTask+0x7c>
      }
      GFX_DrawLine(0, 40, 400, 40, BLACK, E_PAPIER);
 8006344:	2301      	movs	r3, #1
 8006346:	9301      	str	r3, [sp, #4]
 8006348:	2300      	movs	r3, #0
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	2328      	movs	r3, #40	; 0x28
 800634e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006352:	2128      	movs	r1, #40	; 0x28
 8006354:	2000      	movs	r0, #0
 8006356:	f7fb f8cd 	bl	80014f4 <GFX_DrawLine>
      char mes[100];
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 800635a:	4bc8      	ldr	r3, [pc, #800]	; (800667c <StartE_PapierDrawingTask+0x3ec>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f04f 31ff 	mov.w	r1, #4294967295
 8006362:	4618      	mov	r0, r3
 8006364:	f00f fd20 	bl	8015da8 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8006368:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800636c:	2200      	movs	r2, #0
 800636e:	4619      	mov	r1, r3
 8006370:	48c3      	ldr	r0, [pc, #780]	; (8006680 <StartE_PapierDrawingTask+0x3f0>)
 8006372:	f00a fce7 	bl	8010d44 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8006376:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800637a:	2200      	movs	r2, #0
 800637c:	4619      	mov	r1, r3
 800637e:	48c0      	ldr	r0, [pc, #768]	; (8006680 <StartE_PapierDrawingTask+0x3f0>)
 8006380:	f00a fdca 	bl	8010f18 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 8006384:	4bbd      	ldr	r3, [pc, #756]	; (800667c <StartE_PapierDrawingTask+0x3ec>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4618      	mov	r0, r3
 800638a:	f00f fd58 	bl	8015e3e <osMutexRelease>
      osMessageQueueGet(MoonPhaseQueueHandle, &_MoonPhase, 0, 0);
 800638e:	4bbd      	ldr	r3, [pc, #756]	; (8006684 <StartE_PapierDrawingTask+0x3f4>)
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8006396:	2300      	movs	r3, #0
 8006398:	2200      	movs	r2, #0
 800639a:	f00f fe61 	bl	8016060 <osMessageQueueGet>
      EF_SetFont(&timesNewRoman_12ptFontInfo);
 800639e:	48ba      	ldr	r0, [pc, #744]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 80063a0:	f7fb f920 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"WARUNKI ", 0, 0, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80063a4:	2301      	movs	r3, #1
 80063a6:	9302      	str	r3, [sp, #8]
 80063a8:	2301      	movs	r3, #1
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	2300      	movs	r3, #0
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	2300      	movs	r3, #0
 80063b2:	2200      	movs	r2, #0
 80063b4:	2100      	movs	r1, #0
 80063b6:	48b5      	ldr	r0, [pc, #724]	; (800668c <StartE_PapierDrawingTask+0x3fc>)
 80063b8:	f7fb fb2e 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"ZEWNĘTRZNE", 0, 20, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80063bc:	2301      	movs	r3, #1
 80063be:	9302      	str	r3, [sp, #8]
 80063c0:	2301      	movs	r3, #1
 80063c2:	9301      	str	r3, [sp, #4]
 80063c4:	2300      	movs	r3, #0
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	2300      	movs	r3, #0
 80063ca:	2214      	movs	r2, #20
 80063cc:	2100      	movs	r1, #0
 80063ce:	48b0      	ldr	r0, [pc, #704]	; (8006690 <StartE_PapierDrawingTask+0x400>)
 80063d0:	f7fb fb22 	bl	8001a18 <EF_PutString>

      EF_PutString((uint8_t *)"PM 1.0", 0, 40, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80063d4:	2301      	movs	r3, #1
 80063d6:	9302      	str	r3, [sp, #8]
 80063d8:	2301      	movs	r3, #1
 80063da:	9301      	str	r3, [sp, #4]
 80063dc:	2300      	movs	r3, #0
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	2300      	movs	r3, #0
 80063e2:	2228      	movs	r2, #40	; 0x28
 80063e4:	2100      	movs	r1, #0
 80063e6:	48ab      	ldr	r0, [pc, #684]	; (8006694 <StartE_PapierDrawingTask+0x404>)
 80063e8:	f7fb fb16 	bl	8001a18 <EF_PutString>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 80063ec:	48aa      	ldr	r0, [pc, #680]	; (8006698 <StartE_PapierDrawingTask+0x408>)
 80063ee:	f7fb f8f9 	bl	80015e4 <EF_SetFont>
      sprintf(mes, "%d ug/m3", _Mv.ExtPM1);
 80063f2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80063f6:	461a      	mov	r2, r3
 80063f8:	f107 030c 	add.w	r3, r7, #12
 80063fc:	49a7      	ldr	r1, [pc, #668]	; (800669c <StartE_PapierDrawingTask+0x40c>)
 80063fe:	4618      	mov	r0, r3
 8006400:	f006 fbbe 	bl	800cb80 <sprintf_>
      EF_PutString((uint8_t *)mes, 0, 55, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006404:	f107 000c 	add.w	r0, r7, #12
 8006408:	2301      	movs	r3, #1
 800640a:	9302      	str	r3, [sp, #8]
 800640c:	2301      	movs	r3, #1
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	2300      	movs	r3, #0
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	2300      	movs	r3, #0
 8006416:	2237      	movs	r2, #55	; 0x37
 8006418:	2100      	movs	r1, #0
 800641a:	f7fb fafd 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 800641e:	489a      	ldr	r0, [pc, #616]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 8006420:	f7fb f8e0 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"PM 2.5", 0, 80, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006424:	2301      	movs	r3, #1
 8006426:	9302      	str	r3, [sp, #8]
 8006428:	2301      	movs	r3, #1
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	2300      	movs	r3, #0
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	2300      	movs	r3, #0
 8006432:	2250      	movs	r2, #80	; 0x50
 8006434:	2100      	movs	r1, #0
 8006436:	489a      	ldr	r0, [pc, #616]	; (80066a0 <StartE_PapierDrawingTask+0x410>)
 8006438:	f7fb faee 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d ug/m3", _Mv.ExtPM25);
 800643c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006440:	461a      	mov	r2, r3
 8006442:	f107 030c 	add.w	r3, r7, #12
 8006446:	4995      	ldr	r1, [pc, #596]	; (800669c <StartE_PapierDrawingTask+0x40c>)
 8006448:	4618      	mov	r0, r3
 800644a:	f006 fb99 	bl	800cb80 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 800644e:	4892      	ldr	r0, [pc, #584]	; (8006698 <StartE_PapierDrawingTask+0x408>)
 8006450:	f7fb f8c8 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 0, 95, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006454:	f107 000c 	add.w	r0, r7, #12
 8006458:	2301      	movs	r3, #1
 800645a:	9302      	str	r3, [sp, #8]
 800645c:	2301      	movs	r3, #1
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	2300      	movs	r3, #0
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	2300      	movs	r3, #0
 8006466:	225f      	movs	r2, #95	; 0x5f
 8006468:	2100      	movs	r1, #0
 800646a:	f7fb fad5 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 800646e:	4886      	ldr	r0, [pc, #536]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 8006470:	f7fb f8b8 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"PM 10.0", 0, 120, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006474:	2301      	movs	r3, #1
 8006476:	9302      	str	r3, [sp, #8]
 8006478:	2301      	movs	r3, #1
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	2300      	movs	r3, #0
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	2300      	movs	r3, #0
 8006482:	2278      	movs	r2, #120	; 0x78
 8006484:	2100      	movs	r1, #0
 8006486:	4887      	ldr	r0, [pc, #540]	; (80066a4 <StartE_PapierDrawingTask+0x414>)
 8006488:	f7fb fac6 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d ug/m3", _Mv.ExtPM10);
 800648c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8006490:	461a      	mov	r2, r3
 8006492:	f107 030c 	add.w	r3, r7, #12
 8006496:	4981      	ldr	r1, [pc, #516]	; (800669c <StartE_PapierDrawingTask+0x40c>)
 8006498:	4618      	mov	r0, r3
 800649a:	f006 fb71 	bl	800cb80 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 800649e:	487e      	ldr	r0, [pc, #504]	; (8006698 <StartE_PapierDrawingTask+0x408>)
 80064a0:	f7fb f8a0 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 0, 135, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80064a4:	f107 000c 	add.w	r0, r7, #12
 80064a8:	2301      	movs	r3, #1
 80064aa:	9302      	str	r3, [sp, #8]
 80064ac:	2301      	movs	r3, #1
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	2300      	movs	r3, #0
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	2300      	movs	r3, #0
 80064b6:	2287      	movs	r2, #135	; 0x87
 80064b8:	2100      	movs	r1, #0
 80064ba:	f7fb faad 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 80064be:	4872      	ldr	r0, [pc, #456]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 80064c0:	f7fb f890 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"TEMPERATURA", 0, 160, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80064c4:	2301      	movs	r3, #1
 80064c6:	9302      	str	r3, [sp, #8]
 80064c8:	2301      	movs	r3, #1
 80064ca:	9301      	str	r3, [sp, #4]
 80064cc:	2300      	movs	r3, #0
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	2300      	movs	r3, #0
 80064d2:	22a0      	movs	r2, #160	; 0xa0
 80064d4:	2100      	movs	r1, #0
 80064d6:	4874      	ldr	r0, [pc, #464]	; (80066a8 <StartE_PapierDrawingTask+0x418>)
 80064d8:	f7fb fa9e 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f T", _Mv.ExtTemperature);
 80064dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fa f849 	bl	8000578 <__aeabi_f2d>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	f107 000c 	add.w	r0, r7, #12
 80064ee:	496f      	ldr	r1, [pc, #444]	; (80066ac <StartE_PapierDrawingTask+0x41c>)
 80064f0:	f006 fb46 	bl	800cb80 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 80064f4:	4868      	ldr	r0, [pc, #416]	; (8006698 <StartE_PapierDrawingTask+0x408>)
 80064f6:	f7fb f875 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 0, 175, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80064fa:	f107 000c 	add.w	r0, r7, #12
 80064fe:	2301      	movs	r3, #1
 8006500:	9302      	str	r3, [sp, #8]
 8006502:	2301      	movs	r3, #1
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	2300      	movs	r3, #0
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	2300      	movs	r3, #0
 800650c:	22af      	movs	r2, #175	; 0xaf
 800650e:	2100      	movs	r1, #0
 8006510:	f7fb fa82 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 8006514:	485c      	ldr	r0, [pc, #368]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 8006516:	f7fb f865 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"WILGOTNOŚĆ", 0, 200, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 800651a:	2301      	movs	r3, #1
 800651c:	9302      	str	r3, [sp, #8]
 800651e:	2301      	movs	r3, #1
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	2300      	movs	r3, #0
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	2300      	movs	r3, #0
 8006528:	22c8      	movs	r2, #200	; 0xc8
 800652a:	2100      	movs	r1, #0
 800652c:	4860      	ldr	r0, [pc, #384]	; (80066b0 <StartE_PapierDrawingTask+0x420>)
 800652e:	f7fb fa73 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f %%", _Mv.ExtHumidity);
 8006532:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006536:	4618      	mov	r0, r3
 8006538:	f7fa f81e 	bl	8000578 <__aeabi_f2d>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	f107 000c 	add.w	r0, r7, #12
 8006544:	495b      	ldr	r1, [pc, #364]	; (80066b4 <StartE_PapierDrawingTask+0x424>)
 8006546:	f006 fb1b 	bl	800cb80 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 800654a:	4853      	ldr	r0, [pc, #332]	; (8006698 <StartE_PapierDrawingTask+0x408>)
 800654c:	f7fb f84a 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 0, 215, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006550:	f107 000c 	add.w	r0, r7, #12
 8006554:	2301      	movs	r3, #1
 8006556:	9302      	str	r3, [sp, #8]
 8006558:	2301      	movs	r3, #1
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	2300      	movs	r3, #0
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	2300      	movs	r3, #0
 8006562:	22d7      	movs	r2, #215	; 0xd7
 8006564:	2100      	movs	r1, #0
 8006566:	f7fb fa57 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 800656a:	4847      	ldr	r0, [pc, #284]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 800656c:	f7fb f83a 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"NAPIĘCIE", 0, 240, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006570:	2301      	movs	r3, #1
 8006572:	9302      	str	r3, [sp, #8]
 8006574:	2301      	movs	r3, #1
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	2300      	movs	r3, #0
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	2300      	movs	r3, #0
 800657e:	22f0      	movs	r2, #240	; 0xf0
 8006580:	2100      	movs	r1, #0
 8006582:	484d      	ldr	r0, [pc, #308]	; (80066b8 <StartE_PapierDrawingTask+0x428>)
 8006584:	f7fb fa48 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"BATERII", 0, 255, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006588:	2301      	movs	r3, #1
 800658a:	9302      	str	r3, [sp, #8]
 800658c:	2301      	movs	r3, #1
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	2300      	movs	r3, #0
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	2300      	movs	r3, #0
 8006596:	22ff      	movs	r2, #255	; 0xff
 8006598:	2100      	movs	r1, #0
 800659a:	4848      	ldr	r0, [pc, #288]	; (80066bc <StartE_PapierDrawingTask+0x42c>)
 800659c:	f7fb fa3c 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2fV", _Mv.BatteryVoltage);
 80065a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7f9 ffe7 	bl	8000578 <__aeabi_f2d>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	f107 000c 	add.w	r0, r7, #12
 80065b2:	4943      	ldr	r1, [pc, #268]	; (80066c0 <StartE_PapierDrawingTask+0x430>)
 80065b4:	f006 fae4 	bl	800cb80 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 80065b8:	4837      	ldr	r0, [pc, #220]	; (8006698 <StartE_PapierDrawingTask+0x408>)
 80065ba:	f7fb f813 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 0, 270, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80065be:	f107 000c 	add.w	r0, r7, #12
 80065c2:	2301      	movs	r3, #1
 80065c4:	9302      	str	r3, [sp, #8]
 80065c6:	2301      	movs	r3, #1
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	2300      	movs	r3, #0
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	2300      	movs	r3, #0
 80065d0:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80065d4:	2100      	movs	r1, #0
 80065d6:	f7fb fa1f 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 80065da:	482b      	ldr	r0, [pc, #172]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 80065dc:	f7fb f802 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"WARUNKI ", 152, 0, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80065e0:	2301      	movs	r3, #1
 80065e2:	9302      	str	r3, [sp, #8]
 80065e4:	2301      	movs	r3, #1
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	2300      	movs	r3, #0
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	2300      	movs	r3, #0
 80065ee:	2200      	movs	r2, #0
 80065f0:	2198      	movs	r1, #152	; 0x98
 80065f2:	4826      	ldr	r0, [pc, #152]	; (800668c <StartE_PapierDrawingTask+0x3fc>)
 80065f4:	f7fb fa10 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"WEWNĘTRZNE", 152, 20, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80065f8:	2301      	movs	r3, #1
 80065fa:	9302      	str	r3, [sp, #8]
 80065fc:	2301      	movs	r3, #1
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	2300      	movs	r3, #0
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	2300      	movs	r3, #0
 8006606:	2214      	movs	r2, #20
 8006608:	2198      	movs	r1, #152	; 0x98
 800660a:	482e      	ldr	r0, [pc, #184]	; (80066c4 <StartE_PapierDrawingTask+0x434>)
 800660c:	f7fb fa04 	bl	8001a18 <EF_PutString>

      EF_PutString((uint8_t *)"PM 1.0", 152, 40, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006610:	2301      	movs	r3, #1
 8006612:	9302      	str	r3, [sp, #8]
 8006614:	2301      	movs	r3, #1
 8006616:	9301      	str	r3, [sp, #4]
 8006618:	2300      	movs	r3, #0
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	2300      	movs	r3, #0
 800661e:	2228      	movs	r2, #40	; 0x28
 8006620:	2198      	movs	r1, #152	; 0x98
 8006622:	481c      	ldr	r0, [pc, #112]	; (8006694 <StartE_PapierDrawingTask+0x404>)
 8006624:	f7fb f9f8 	bl	8001a18 <EF_PutString>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8006628:	481b      	ldr	r0, [pc, #108]	; (8006698 <StartE_PapierDrawingTask+0x408>)
 800662a:	f7fa ffdb 	bl	80015e4 <EF_SetFont>
      sprintf(mes, "%d ug/m3", _Mv.InternalPM1);
 800662e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8006632:	461a      	mov	r2, r3
 8006634:	f107 030c 	add.w	r3, r7, #12
 8006638:	4918      	ldr	r1, [pc, #96]	; (800669c <StartE_PapierDrawingTask+0x40c>)
 800663a:	4618      	mov	r0, r3
 800663c:	f006 faa0 	bl	800cb80 <sprintf_>
      EF_PutString((uint8_t *)mes, 152, 55, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006640:	f107 000c 	add.w	r0, r7, #12
 8006644:	2301      	movs	r3, #1
 8006646:	9302      	str	r3, [sp, #8]
 8006648:	2301      	movs	r3, #1
 800664a:	9301      	str	r3, [sp, #4]
 800664c:	2300      	movs	r3, #0
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	2300      	movs	r3, #0
 8006652:	2237      	movs	r2, #55	; 0x37
 8006654:	2198      	movs	r1, #152	; 0x98
 8006656:	f7fb f9df 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 800665a:	480b      	ldr	r0, [pc, #44]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 800665c:	f7fa ffc2 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"PM 2.5", 152, 80, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006660:	2301      	movs	r3, #1
 8006662:	9302      	str	r3, [sp, #8]
 8006664:	2301      	movs	r3, #1
 8006666:	9301      	str	r3, [sp, #4]
 8006668:	2300      	movs	r3, #0
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	2300      	movs	r3, #0
 800666e:	2250      	movs	r2, #80	; 0x50
 8006670:	2198      	movs	r1, #152	; 0x98
 8006672:	480b      	ldr	r0, [pc, #44]	; (80066a0 <StartE_PapierDrawingTask+0x410>)
 8006674:	f7fb f9d0 	bl	8001a18 <EF_PutString>
 8006678:	e026      	b.n	80066c8 <StartE_PapierDrawingTask+0x438>
 800667a:	bf00      	nop
 800667c:	200040bc 	.word	0x200040bc
 8006680:	200041d4 	.word	0x200041d4
 8006684:	2000407c 	.word	0x2000407c
 8006688:	08021adc 	.word	0x08021adc
 800668c:	080203a4 	.word	0x080203a4
 8006690:	080203b0 	.word	0x080203b0
 8006694:	080203bc 	.word	0x080203bc
 8006698:	08022de8 	.word	0x08022de8
 800669c:	080203c4 	.word	0x080203c4
 80066a0:	080203d0 	.word	0x080203d0
 80066a4:	080203d8 	.word	0x080203d8
 80066a8:	080203e0 	.word	0x080203e0
 80066ac:	080203ec 	.word	0x080203ec
 80066b0:	080203f4 	.word	0x080203f4
 80066b4:	08020404 	.word	0x08020404
 80066b8:	08020410 	.word	0x08020410
 80066bc:	0802041c 	.word	0x0802041c
 80066c0:	08020424 	.word	0x08020424
 80066c4:	0802042c 	.word	0x0802042c
      sprintf(mes, "%d ug/m3", _Mv.InternalPM25);
 80066c8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80066cc:	461a      	mov	r2, r3
 80066ce:	f107 030c 	add.w	r3, r7, #12
 80066d2:	49ae      	ldr	r1, [pc, #696]	; (800698c <StartE_PapierDrawingTask+0x6fc>)
 80066d4:	4618      	mov	r0, r3
 80066d6:	f006 fa53 	bl	800cb80 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 80066da:	48ad      	ldr	r0, [pc, #692]	; (8006990 <StartE_PapierDrawingTask+0x700>)
 80066dc:	f7fa ff82 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 152, 95, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80066e0:	f107 000c 	add.w	r0, r7, #12
 80066e4:	2301      	movs	r3, #1
 80066e6:	9302      	str	r3, [sp, #8]
 80066e8:	2301      	movs	r3, #1
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	2300      	movs	r3, #0
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	2300      	movs	r3, #0
 80066f2:	225f      	movs	r2, #95	; 0x5f
 80066f4:	2198      	movs	r1, #152	; 0x98
 80066f6:	f7fb f98f 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 80066fa:	48a6      	ldr	r0, [pc, #664]	; (8006994 <StartE_PapierDrawingTask+0x704>)
 80066fc:	f7fa ff72 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"PM 10.0", 152, 120, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006700:	2301      	movs	r3, #1
 8006702:	9302      	str	r3, [sp, #8]
 8006704:	2301      	movs	r3, #1
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	2300      	movs	r3, #0
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	2300      	movs	r3, #0
 800670e:	2278      	movs	r2, #120	; 0x78
 8006710:	2198      	movs	r1, #152	; 0x98
 8006712:	48a1      	ldr	r0, [pc, #644]	; (8006998 <StartE_PapierDrawingTask+0x708>)
 8006714:	f7fb f980 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d ug/m3", _Mv.InternalPM10);
 8006718:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800671c:	461a      	mov	r2, r3
 800671e:	f107 030c 	add.w	r3, r7, #12
 8006722:	499a      	ldr	r1, [pc, #616]	; (800698c <StartE_PapierDrawingTask+0x6fc>)
 8006724:	4618      	mov	r0, r3
 8006726:	f006 fa2b 	bl	800cb80 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 800672a:	4899      	ldr	r0, [pc, #612]	; (8006990 <StartE_PapierDrawingTask+0x700>)
 800672c:	f7fa ff5a 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 152, 135, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006730:	f107 000c 	add.w	r0, r7, #12
 8006734:	2301      	movs	r3, #1
 8006736:	9302      	str	r3, [sp, #8]
 8006738:	2301      	movs	r3, #1
 800673a:	9301      	str	r3, [sp, #4]
 800673c:	2300      	movs	r3, #0
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	2300      	movs	r3, #0
 8006742:	2287      	movs	r2, #135	; 0x87
 8006744:	2198      	movs	r1, #152	; 0x98
 8006746:	f7fb f967 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 800674a:	4892      	ldr	r0, [pc, #584]	; (8006994 <StartE_PapierDrawingTask+0x704>)
 800674c:	f7fa ff4a 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"TEMPERATURA", 152, 160, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006750:	2301      	movs	r3, #1
 8006752:	9302      	str	r3, [sp, #8]
 8006754:	2301      	movs	r3, #1
 8006756:	9301      	str	r3, [sp, #4]
 8006758:	2300      	movs	r3, #0
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	2300      	movs	r3, #0
 800675e:	22a0      	movs	r2, #160	; 0xa0
 8006760:	2198      	movs	r1, #152	; 0x98
 8006762:	488e      	ldr	r0, [pc, #568]	; (800699c <StartE_PapierDrawingTask+0x70c>)
 8006764:	f7fb f958 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f T", _Mv.InternalTemperature);
 8006768:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800676c:	4618      	mov	r0, r3
 800676e:	f7f9 ff03 	bl	8000578 <__aeabi_f2d>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	f107 000c 	add.w	r0, r7, #12
 800677a:	4989      	ldr	r1, [pc, #548]	; (80069a0 <StartE_PapierDrawingTask+0x710>)
 800677c:	f006 fa00 	bl	800cb80 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8006780:	4883      	ldr	r0, [pc, #524]	; (8006990 <StartE_PapierDrawingTask+0x700>)
 8006782:	f7fa ff2f 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 152, 175, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006786:	f107 000c 	add.w	r0, r7, #12
 800678a:	2301      	movs	r3, #1
 800678c:	9302      	str	r3, [sp, #8]
 800678e:	2301      	movs	r3, #1
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	2300      	movs	r3, #0
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	2300      	movs	r3, #0
 8006798:	22af      	movs	r2, #175	; 0xaf
 800679a:	2198      	movs	r1, #152	; 0x98
 800679c:	f7fb f93c 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 80067a0:	487c      	ldr	r0, [pc, #496]	; (8006994 <StartE_PapierDrawingTask+0x704>)
 80067a2:	f7fa ff1f 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"WILGOTNOŚĆ", 152, 200, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80067a6:	2301      	movs	r3, #1
 80067a8:	9302      	str	r3, [sp, #8]
 80067aa:	2301      	movs	r3, #1
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	2300      	movs	r3, #0
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	2300      	movs	r3, #0
 80067b4:	22c8      	movs	r2, #200	; 0xc8
 80067b6:	2198      	movs	r1, #152	; 0x98
 80067b8:	487a      	ldr	r0, [pc, #488]	; (80069a4 <StartE_PapierDrawingTask+0x714>)
 80067ba:	f7fb f92d 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f %%", _Mv.InternalHumidity);
 80067be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7f9 fed8 	bl	8000578 <__aeabi_f2d>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	f107 000c 	add.w	r0, r7, #12
 80067d0:	4975      	ldr	r1, [pc, #468]	; (80069a8 <StartE_PapierDrawingTask+0x718>)
 80067d2:	f006 f9d5 	bl	800cb80 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 80067d6:	486e      	ldr	r0, [pc, #440]	; (8006990 <StartE_PapierDrawingTask+0x700>)
 80067d8:	f7fa ff04 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 152, 215, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80067dc:	f107 000c 	add.w	r0, r7, #12
 80067e0:	2301      	movs	r3, #1
 80067e2:	9302      	str	r3, [sp, #8]
 80067e4:	2301      	movs	r3, #1
 80067e6:	9301      	str	r3, [sp, #4]
 80067e8:	2300      	movs	r3, #0
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	2300      	movs	r3, #0
 80067ee:	22d7      	movs	r2, #215	; 0xd7
 80067f0:	2198      	movs	r1, #152	; 0x98
 80067f2:	f7fb f911 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 80067f6:	4867      	ldr	r0, [pc, #412]	; (8006994 <StartE_PapierDrawingTask+0x704>)
 80067f8:	f7fa fef4 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"CIŚNIENIE", 152, 240, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80067fc:	2301      	movs	r3, #1
 80067fe:	9302      	str	r3, [sp, #8]
 8006800:	2301      	movs	r3, #1
 8006802:	9301      	str	r3, [sp, #4]
 8006804:	2300      	movs	r3, #0
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	2300      	movs	r3, #0
 800680a:	22f0      	movs	r2, #240	; 0xf0
 800680c:	2198      	movs	r1, #152	; 0x98
 800680e:	4867      	ldr	r0, [pc, #412]	; (80069ac <StartE_PapierDrawingTask+0x71c>)
 8006810:	f7fb f902 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f hPa", _Mv.Pressure);
 8006814:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006818:	4618      	mov	r0, r3
 800681a:	f7f9 fead 	bl	8000578 <__aeabi_f2d>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	f107 000c 	add.w	r0, r7, #12
 8006826:	4962      	ldr	r1, [pc, #392]	; (80069b0 <StartE_PapierDrawingTask+0x720>)
 8006828:	f006 f9aa 	bl	800cb80 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 800682c:	4858      	ldr	r0, [pc, #352]	; (8006990 <StartE_PapierDrawingTask+0x700>)
 800682e:	f7fa fed9 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 152, 255, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006832:	f107 000c 	add.w	r0, r7, #12
 8006836:	2301      	movs	r3, #1
 8006838:	9302      	str	r3, [sp, #8]
 800683a:	2301      	movs	r3, #1
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	2300      	movs	r3, #0
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	22ff      	movs	r2, #255	; 0xff
 8006846:	2198      	movs	r1, #152	; 0x98
 8006848:	f7fb f8e6 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_10ptFontInfo);
 800684c:	4859      	ldr	r0, [pc, #356]	; (80069b4 <StartE_PapierDrawingTask+0x724>)
 800684e:	f7fa fec9 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"SEKCJA", 300, 0, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006852:	2301      	movs	r3, #1
 8006854:	9302      	str	r3, [sp, #8]
 8006856:	2301      	movs	r3, #1
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	2300      	movs	r3, #0
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	2300      	movs	r3, #0
 8006860:	2200      	movs	r2, #0
 8006862:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006866:	4854      	ldr	r0, [pc, #336]	; (80069b8 <StartE_PapierDrawingTask+0x728>)
 8006868:	f7fb f8d6 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"DODATKOWA", 300, 20, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 800686c:	2301      	movs	r3, #1
 800686e:	9302      	str	r3, [sp, #8]
 8006870:	2301      	movs	r3, #1
 8006872:	9301      	str	r3, [sp, #4]
 8006874:	2300      	movs	r3, #0
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	2300      	movs	r3, #0
 800687a:	2214      	movs	r2, #20
 800687c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006880:	484e      	ldr	r0, [pc, #312]	; (80069bc <StartE_PapierDrawingTask+0x72c>)
 8006882:	f7fb f8c9 	bl	8001a18 <EF_PutString>

      EF_PutString((uint8_t *)"FAZA", 300, 40, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006886:	2301      	movs	r3, #1
 8006888:	9302      	str	r3, [sp, #8]
 800688a:	2301      	movs	r3, #1
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	2300      	movs	r3, #0
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	2300      	movs	r3, #0
 8006894:	2228      	movs	r2, #40	; 0x28
 8006896:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800689a:	4849      	ldr	r0, [pc, #292]	; (80069c0 <StartE_PapierDrawingTask+0x730>)
 800689c:	f7fb f8bc 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"KSIĘŻYCA", 300, 52, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80068a0:	2301      	movs	r3, #1
 80068a2:	9302      	str	r3, [sp, #8]
 80068a4:	2301      	movs	r3, #1
 80068a6:	9301      	str	r3, [sp, #4]
 80068a8:	2300      	movs	r3, #0
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	2300      	movs	r3, #0
 80068ae:	2234      	movs	r2, #52	; 0x34
 80068b0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80068b4:	4843      	ldr	r0, [pc, #268]	; (80069c4 <StartE_PapierDrawingTask+0x734>)
 80068b6:	f7fb f8af 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f%%", _MoonPhase);
 80068ba:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80068be:	f107 000c 	add.w	r0, r7, #12
 80068c2:	4941      	ldr	r1, [pc, #260]	; (80069c8 <StartE_PapierDrawingTask+0x738>)
 80068c4:	f006 f95c 	bl	800cb80 <sprintf_>
      if(_MoonPhase == 100)
 80068c8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	4b3e      	ldr	r3, [pc, #248]	; (80069cc <StartE_PapierDrawingTask+0x73c>)
 80068d2:	f7fa f911 	bl	8000af8 <__aeabi_dcmpeq>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00d      	beq.n	80068f8 <StartE_PapierDrawingTask+0x668>
      {
         EF_PutString((uint8_t *)"PEŁNIA", 300, 64, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80068dc:	2301      	movs	r3, #1
 80068de:	9302      	str	r3, [sp, #8]
 80068e0:	2301      	movs	r3, #1
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	2300      	movs	r3, #0
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	2300      	movs	r3, #0
 80068ea:	2240      	movs	r2, #64	; 0x40
 80068ec:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80068f0:	4837      	ldr	r0, [pc, #220]	; (80069d0 <StartE_PapierDrawingTask+0x740>)
 80068f2:	f7fb f891 	bl	8001a18 <EF_PutString>
 80068f6:	e09e      	b.n	8006a36 <StartE_PapierDrawingTask+0x7a6>
      }
      else if(_MoonPhase == -50)
 80068f8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	4b34      	ldr	r3, [pc, #208]	; (80069d4 <StartE_PapierDrawingTask+0x744>)
 8006902:	f7fa f8f9 	bl	8000af8 <__aeabi_dcmpeq>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00d      	beq.n	8006928 <StartE_PapierDrawingTask+0x698>
      {
         EF_PutString((uint8_t *)"3 KWADRA", 300, 64, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 800690c:	2301      	movs	r3, #1
 800690e:	9302      	str	r3, [sp, #8]
 8006910:	2301      	movs	r3, #1
 8006912:	9301      	str	r3, [sp, #4]
 8006914:	2300      	movs	r3, #0
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	2300      	movs	r3, #0
 800691a:	2240      	movs	r2, #64	; 0x40
 800691c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006920:	482d      	ldr	r0, [pc, #180]	; (80069d8 <StartE_PapierDrawingTask+0x748>)
 8006922:	f7fb f879 	bl	8001a18 <EF_PutString>
 8006926:	e086      	b.n	8006a36 <StartE_PapierDrawingTask+0x7a6>
      }
      else if(_MoonPhase == 0)
 8006928:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	f04f 0300 	mov.w	r3, #0
 8006934:	f7fa f8e0 	bl	8000af8 <__aeabi_dcmpeq>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00d      	beq.n	800695a <StartE_PapierDrawingTask+0x6ca>
      {
         EF_PutString((uint8_t *)"NÓW", 300, 64, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 800693e:	2301      	movs	r3, #1
 8006940:	9302      	str	r3, [sp, #8]
 8006942:	2301      	movs	r3, #1
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	2300      	movs	r3, #0
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	2300      	movs	r3, #0
 800694c:	2240      	movs	r2, #64	; 0x40
 800694e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006952:	4822      	ldr	r0, [pc, #136]	; (80069dc <StartE_PapierDrawingTask+0x74c>)
 8006954:	f7fb f860 	bl	8001a18 <EF_PutString>
 8006958:	e06d      	b.n	8006a36 <StartE_PapierDrawingTask+0x7a6>
      }
      else if(_MoonPhase == 50)
 800695a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	4b1f      	ldr	r3, [pc, #124]	; (80069e0 <StartE_PapierDrawingTask+0x750>)
 8006964:	f7fa f8c8 	bl	8000af8 <__aeabi_dcmpeq>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d03c      	beq.n	80069e8 <StartE_PapierDrawingTask+0x758>
      {
         EF_PutString((uint8_t *)"1 KWADRA", 300, 64, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 800696e:	2301      	movs	r3, #1
 8006970:	9302      	str	r3, [sp, #8]
 8006972:	2301      	movs	r3, #1
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	2300      	movs	r3, #0
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	2300      	movs	r3, #0
 800697c:	2240      	movs	r2, #64	; 0x40
 800697e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006982:	4818      	ldr	r0, [pc, #96]	; (80069e4 <StartE_PapierDrawingTask+0x754>)
 8006984:	f7fb f848 	bl	8001a18 <EF_PutString>
 8006988:	e055      	b.n	8006a36 <StartE_PapierDrawingTask+0x7a6>
 800698a:	bf00      	nop
 800698c:	080203c4 	.word	0x080203c4
 8006990:	08022de8 	.word	0x08022de8
 8006994:	08021adc 	.word	0x08021adc
 8006998:	080203d8 	.word	0x080203d8
 800699c:	080203e0 	.word	0x080203e0
 80069a0:	080203ec 	.word	0x080203ec
 80069a4:	080203f4 	.word	0x080203f4
 80069a8:	08020404 	.word	0x08020404
 80069ac:	08020438 	.word	0x08020438
 80069b0:	08020444 	.word	0x08020444
 80069b4:	08020e84 	.word	0x08020e84
 80069b8:	08020450 	.word	0x08020450
 80069bc:	08020458 	.word	0x08020458
 80069c0:	08020464 	.word	0x08020464
 80069c4:	0802046c 	.word	0x0802046c
 80069c8:	08020478 	.word	0x08020478
 80069cc:	40590000 	.word	0x40590000
 80069d0:	08020480 	.word	0x08020480
 80069d4:	c0490000 	.word	0xc0490000
 80069d8:	08020488 	.word	0x08020488
 80069dc:	08020494 	.word	0x08020494
 80069e0:	40490000 	.word	0x40490000
 80069e4:	0802049c 	.word	0x0802049c
      }
      else
      {
         if(_MoonPhase < 0)
 80069e8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	f7fa f88a 	bl	8000b0c <__aeabi_dcmplt>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d006      	beq.n	8006a0c <StartE_PapierDrawingTask+0x77c>
         {
            _MoonPhase = -_MoonPhase;
 80069fe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006a02:	4614      	mov	r4, r2
 8006a04:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006a08:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
         }
         sprintf(mes, "%0.2f%%", _MoonPhase);
 8006a0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006a10:	f107 000c 	add.w	r0, r7, #12
 8006a14:	49da      	ldr	r1, [pc, #872]	; (8006d80 <StartE_PapierDrawingTask+0xaf0>)
 8006a16:	f006 f8b3 	bl	800cb80 <sprintf_>
         EF_PutString((uint8_t *)mes, 300, 64, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006a1a:	f107 000c 	add.w	r0, r7, #12
 8006a1e:	2301      	movs	r3, #1
 8006a20:	9302      	str	r3, [sp, #8]
 8006a22:	2301      	movs	r3, #1
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	2300      	movs	r3, #0
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2240      	movs	r2, #64	; 0x40
 8006a2e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006a32:	f7fa fff1 	bl	8001a18 <EF_PutString>
      }
      EF_PutString((uint8_t *)"CZAS", 300, 76, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006a36:	2301      	movs	r3, #1
 8006a38:	9302      	str	r3, [sp, #8]
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	2300      	movs	r3, #0
 8006a44:	224c      	movs	r2, #76	; 0x4c
 8006a46:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006a4a:	48ce      	ldr	r0, [pc, #824]	; (8006d84 <StartE_PapierDrawingTask+0xaf4>)
 8006a4c:	f7fa ffe4 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"NADEJŚCIA", 300, 88, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006a50:	2301      	movs	r3, #1
 8006a52:	9302      	str	r3, [sp, #8]
 8006a54:	2301      	movs	r3, #1
 8006a56:	9301      	str	r3, [sp, #4]
 8006a58:	2300      	movs	r3, #0
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	2258      	movs	r2, #88	; 0x58
 8006a60:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006a64:	48c8      	ldr	r0, [pc, #800]	; (8006d88 <StartE_PapierDrawingTask+0xaf8>)
 8006a66:	f7fa ffd7 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"DANYCH", 300, 100, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	9302      	str	r3, [sp, #8]
 8006a6e:	2301      	movs	r3, #1
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	2300      	movs	r3, #0
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	2300      	movs	r3, #0
 8006a78:	2264      	movs	r2, #100	; 0x64
 8006a7a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006a7e:	48c3      	ldr	r0, [pc, #780]	; (8006d8c <StartE_PapierDrawingTask+0xafc>)
 8006a80:	f7fa ffca 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d : %d : %d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8006a84:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8006a8e:	4619      	mov	r1, r3
 8006a90:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8006a94:	f107 000c 	add.w	r0, r7, #12
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	49bc      	ldr	r1, [pc, #752]	; (8006d90 <StartE_PapierDrawingTask+0xb00>)
 8006a9e:	f006 f86f 	bl	800cb80 <sprintf_>
      EF_PutString((uint8_t *)mes, 300, 112, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006aa2:	f107 000c 	add.w	r0, r7, #12
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	9302      	str	r3, [sp, #8]
 8006aaa:	2301      	movs	r3, #1
 8006aac:	9301      	str	r3, [sp, #4]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	2270      	movs	r2, #112	; 0x70
 8006ab6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006aba:	f7fa ffad 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d : %d : 20%d", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8006abe:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8006ac8:	4619      	mov	r1, r3
 8006aca:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006ace:	f107 000c 	add.w	r0, r7, #12
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	49af      	ldr	r1, [pc, #700]	; (8006d94 <StartE_PapierDrawingTask+0xb04>)
 8006ad8:	f006 f852 	bl	800cb80 <sprintf_>
      EF_PutString((uint8_t *)mes, 300, 124, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006adc:	f107 000c 	add.w	r0, r7, #12
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	9302      	str	r3, [sp, #8]
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	9301      	str	r3, [sp, #4]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	2300      	movs	r3, #0
 8006aee:	227c      	movs	r2, #124	; 0x7c
 8006af0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006af4:	f7fa ff90 	bl	8001a18 <EF_PutString>

      osMessageQueueGet(SunriseQueueHandle, &Sunrise, 0, 0);
 8006af8:	4ba7      	ldr	r3, [pc, #668]	; (8006d98 <StartE_PapierDrawingTask+0xb08>)
 8006afa:	6818      	ldr	r0, [r3, #0]
 8006afc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006b00:	2300      	movs	r3, #0
 8006b02:	2200      	movs	r2, #0
 8006b04:	f00f faac 	bl	8016060 <osMessageQueueGet>
      uint8_t TempHour     = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
      uint8_t TempMinute   = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
      uint8_t TempSecond   = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
      uint32_t TempSunrise = (Sunrise.Sunrise + 1.0) * 3600;
 8006b1a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	4b9e      	ldr	r3, [pc, #632]	; (8006d9c <StartE_PapierDrawingTask+0xb0c>)
 8006b24:	f7f9 fbca 	bl	80002bc <__adddf3>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4619      	mov	r1, r3
 8006b30:	a391      	add	r3, pc, #580	; (adr r3, 8006d78 <StartE_PapierDrawingTask+0xae8>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 fd77 	bl	8000628 <__aeabi_dmul>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4610      	mov	r0, r2
 8006b40:	4619      	mov	r1, r3
 8006b42:	f7fa f849 	bl	8000bd8 <__aeabi_d2uiz>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      TempHour             = (TempSunrise / 3600);
 8006b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b50:	4a93      	ldr	r2, [pc, #588]	; (8006da0 <StartE_PapierDrawingTask+0xb10>)
 8006b52:	fba2 2303 	umull	r2, r3, r2, r3
 8006b56:	0adb      	lsrs	r3, r3, #11
 8006b58:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
      TempSunrise -= (TempHour * 3600);
 8006b5c:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8006b60:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8006b64:	fb02 f303 	mul.w	r3, r2, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6e:	1a9b      	subs	r3, r3, r2
 8006b70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      TempMinute = (TempSunrise / 60);
 8006b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b78:	4a8a      	ldr	r2, [pc, #552]	; (8006da4 <StartE_PapierDrawingTask+0xb14>)
 8006b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
      TempSunrise -= (TempMinute * 60);
 8006b84:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 8006b88:	4613      	mov	r3, r2
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	1a9b      	subs	r3, r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	461a      	mov	r2, r3
 8006b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b96:	1a9b      	subs	r3, r3, r2
 8006b98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      TempSecond = TempSunrise;
 8006b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba0:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
      EF_PutString((uint8_t *)"WSCHÓD", 300, 136, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	9302      	str	r3, [sp, #8]
 8006ba8:	2301      	movs	r3, #1
 8006baa:	9301      	str	r3, [sp, #4]
 8006bac:	2300      	movs	r3, #0
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	2288      	movs	r2, #136	; 0x88
 8006bb4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006bb8:	487b      	ldr	r0, [pc, #492]	; (8006da8 <StartE_PapierDrawingTask+0xb18>)
 8006bba:	f7fa ff2d 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"SŁOŃCA", 300, 148, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	9302      	str	r3, [sp, #8]
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	9301      	str	r3, [sp, #4]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2294      	movs	r2, #148	; 0x94
 8006bce:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006bd2:	4876      	ldr	r0, [pc, #472]	; (8006dac <StartE_PapierDrawingTask+0xb1c>)
 8006bd4:	f7fa ff20 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d : %d : %d", TempHour, TempMinute, TempSecond);
 8006bd8:	f897 20eb 	ldrb.w	r2, [r7, #235]	; 0xeb
 8006bdc:	f897 10ea 	ldrb.w	r1, [r7, #234]	; 0xea
 8006be0:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8006be4:	f107 000c 	add.w	r0, r7, #12
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	460b      	mov	r3, r1
 8006bec:	4968      	ldr	r1, [pc, #416]	; (8006d90 <StartE_PapierDrawingTask+0xb00>)
 8006bee:	f005 ffc7 	bl	800cb80 <sprintf_>
      EF_PutString((uint8_t *)mes, 300, 160, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006bf2:	f107 000c 	add.w	r0, r7, #12
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	9302      	str	r3, [sp, #8]
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	2300      	movs	r3, #0
 8006c04:	22a0      	movs	r2, #160	; 0xa0
 8006c06:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006c0a:	f7fa ff05 	bl	8001a18 <EF_PutString>

      uint32_t TempSunset = (Sunrise.Sunset + 1.0) * 3600;
 8006c0e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006c12:	f04f 0200 	mov.w	r2, #0
 8006c16:	4b61      	ldr	r3, [pc, #388]	; (8006d9c <StartE_PapierDrawingTask+0xb0c>)
 8006c18:	f7f9 fb50 	bl	80002bc <__adddf3>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4610      	mov	r0, r2
 8006c22:	4619      	mov	r1, r3
 8006c24:	a354      	add	r3, pc, #336	; (adr r3, 8006d78 <StartE_PapierDrawingTask+0xae8>)
 8006c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2a:	f7f9 fcfd 	bl	8000628 <__aeabi_dmul>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	4610      	mov	r0, r2
 8006c34:	4619      	mov	r1, r3
 8006c36:	f7f9 ffcf 	bl	8000bd8 <__aeabi_d2uiz>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      TempHour            = (TempSunset / 3600);
 8006c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c44:	4a56      	ldr	r2, [pc, #344]	; (8006da0 <StartE_PapierDrawingTask+0xb10>)
 8006c46:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4a:	0adb      	lsrs	r3, r3, #11
 8006c4c:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
      TempSunset -= (TempHour * 3600);
 8006c50:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8006c54:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8006c58:	fb02 f303 	mul.w	r3, r2, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c62:	1a9b      	subs	r3, r3, r2
 8006c64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      TempMinute = (TempSunset / 60);
 8006c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c6c:	4a4d      	ldr	r2, [pc, #308]	; (8006da4 <StartE_PapierDrawingTask+0xb14>)
 8006c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
      TempSunset -= (TempMinute * 60);
 8006c78:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	1a9b      	subs	r3, r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	461a      	mov	r2, r3
 8006c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c8a:	1a9b      	subs	r3, r3, r2
 8006c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      TempSecond = TempSunset;
 8006c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c94:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
      EF_PutString((uint8_t *)"ZACHÓD", 300, 172, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006c98:	2301      	movs	r3, #1
 8006c9a:	9302      	str	r3, [sp, #8]
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	22ac      	movs	r2, #172	; 0xac
 8006ca8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006cac:	4840      	ldr	r0, [pc, #256]	; (8006db0 <StartE_PapierDrawingTask+0xb20>)
 8006cae:	f7fa feb3 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"SŁOŃCA", 300, 184, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	9302      	str	r3, [sp, #8]
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	9301      	str	r3, [sp, #4]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	22b8      	movs	r2, #184	; 0xb8
 8006cc2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006cc6:	4839      	ldr	r0, [pc, #228]	; (8006dac <StartE_PapierDrawingTask+0xb1c>)
 8006cc8:	f7fa fea6 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d : %d : %d", TempHour, TempMinute, TempSecond);
 8006ccc:	f897 20eb 	ldrb.w	r2, [r7, #235]	; 0xeb
 8006cd0:	f897 10ea 	ldrb.w	r1, [r7, #234]	; 0xea
 8006cd4:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8006cd8:	f107 000c 	add.w	r0, r7, #12
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	492b      	ldr	r1, [pc, #172]	; (8006d90 <StartE_PapierDrawingTask+0xb00>)
 8006ce2:	f005 ff4d 	bl	800cb80 <sprintf_>
      EF_PutString((uint8_t *)mes, 300, 196, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006ce6:	f107 000c 	add.w	r0, r7, #12
 8006cea:	2301      	movs	r3, #1
 8006cec:	9302      	str	r3, [sp, #8]
 8006cee:	2301      	movs	r3, #1
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	22c4      	movs	r2, #196	; 0xc4
 8006cfa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006cfe:	f7fa fe8b 	bl	8001a18 <EF_PutString>

      uint32_t TempSunup = (Sunrise.Sunup + 1.0) * 3600;
 8006d02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	4b24      	ldr	r3, [pc, #144]	; (8006d9c <StartE_PapierDrawingTask+0xb0c>)
 8006d0c:	f7f9 fad6 	bl	80002bc <__adddf3>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4610      	mov	r0, r2
 8006d16:	4619      	mov	r1, r3
 8006d18:	a317      	add	r3, pc, #92	; (adr r3, 8006d78 <StartE_PapierDrawingTask+0xae8>)
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	f7f9 fc83 	bl	8000628 <__aeabi_dmul>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4610      	mov	r0, r2
 8006d28:	4619      	mov	r1, r3
 8006d2a:	f7f9 ff55 	bl	8000bd8 <__aeabi_d2uiz>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      TempHour           = (TempSunup / 3600);
 8006d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d38:	4a19      	ldr	r2, [pc, #100]	; (8006da0 <StartE_PapierDrawingTask+0xb10>)
 8006d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3e:	0adb      	lsrs	r3, r3, #11
 8006d40:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
      TempSunup -= (TempHour * 3600);
 8006d44:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8006d48:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8006d4c:	fb02 f303 	mul.w	r3, r2, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d56:	1a9b      	subs	r3, r3, r2
 8006d58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      TempMinute = (TempSunup / 60);
 8006d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d60:	4a10      	ldr	r2, [pc, #64]	; (8006da4 <StartE_PapierDrawingTask+0xb14>)
 8006d62:	fba2 2303 	umull	r2, r3, r2, r3
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
      TempSunup -= (TempMinute * 60);
 8006d6c:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 8006d70:	e020      	b.n	8006db4 <StartE_PapierDrawingTask+0xb24>
 8006d72:	bf00      	nop
 8006d74:	f3af 8000 	nop.w
 8006d78:	00000000 	.word	0x00000000
 8006d7c:	40ac2000 	.word	0x40ac2000
 8006d80:	08020478 	.word	0x08020478
 8006d84:	080204a8 	.word	0x080204a8
 8006d88:	080204b0 	.word	0x080204b0
 8006d8c:	080204bc 	.word	0x080204bc
 8006d90:	080204c4 	.word	0x080204c4
 8006d94:	08020394 	.word	0x08020394
 8006d98:	20004090 	.word	0x20004090
 8006d9c:	3ff00000 	.word	0x3ff00000
 8006da0:	91a2b3c5 	.word	0x91a2b3c5
 8006da4:	88888889 	.word	0x88888889
 8006da8:	080204d4 	.word	0x080204d4
 8006dac:	080204dc 	.word	0x080204dc
 8006db0:	080204e8 	.word	0x080204e8
 8006db4:	4613      	mov	r3, r2
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	1a9b      	subs	r3, r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dc2:	1a9b      	subs	r3, r3, r2
 8006dc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      TempSecond = TempSunup;
 8006dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dcc:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
      EF_PutString((uint8_t *)"GÓROWANIE", 300, 208, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	9302      	str	r3, [sp, #8]
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	22d0      	movs	r2, #208	; 0xd0
 8006de0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006de4:	4829      	ldr	r0, [pc, #164]	; (8006e8c <StartE_PapierDrawingTask+0xbfc>)
 8006de6:	f7fa fe17 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"SŁOŃCA", 300, 220, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006dea:	2301      	movs	r3, #1
 8006dec:	9302      	str	r3, [sp, #8]
 8006dee:	2301      	movs	r3, #1
 8006df0:	9301      	str	r3, [sp, #4]
 8006df2:	2300      	movs	r3, #0
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	2300      	movs	r3, #0
 8006df8:	22dc      	movs	r2, #220	; 0xdc
 8006dfa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006dfe:	4824      	ldr	r0, [pc, #144]	; (8006e90 <StartE_PapierDrawingTask+0xc00>)
 8006e00:	f7fa fe0a 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d : %d : %d", TempHour, TempMinute, TempSecond);
 8006e04:	f897 20eb 	ldrb.w	r2, [r7, #235]	; 0xeb
 8006e08:	f897 10ea 	ldrb.w	r1, [r7, #234]	; 0xea
 8006e0c:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8006e10:	f107 000c 	add.w	r0, r7, #12
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	460b      	mov	r3, r1
 8006e18:	491e      	ldr	r1, [pc, #120]	; (8006e94 <StartE_PapierDrawingTask+0xc04>)
 8006e1a:	f005 feb1 	bl	800cb80 <sprintf_>
      EF_PutString((uint8_t *)mes, 300, 236, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006e1e:	f107 000c 	add.w	r0, r7, #12
 8006e22:	2301      	movs	r3, #1
 8006e24:	9302      	str	r3, [sp, #8]
 8006e26:	2301      	movs	r3, #1
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	22ec      	movs	r2, #236	; 0xec
 8006e32:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006e36:	f7fa fdef 	bl	8001a18 <EF_PutString>

      if(!(_Mv.BatteryState & 0x01))
 8006e3a:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10c      	bne.n	8006e60 <StartE_PapierDrawingTask+0xbd0>
      {
         EF_PutString((uint8_t *)"ŁADOWANIE", 300, 248, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006e46:	2301      	movs	r3, #1
 8006e48:	9302      	str	r3, [sp, #8]
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	2300      	movs	r3, #0
 8006e54:	22f8      	movs	r2, #248	; 0xf8
 8006e56:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006e5a:	480f      	ldr	r0, [pc, #60]	; (8006e98 <StartE_PapierDrawingTask+0xc08>)
 8006e5c:	f7fa fddc 	bl	8001a18 <EF_PutString>
      }
      osMutexRelease(E_PAPIERMutexHandle);
 8006e60:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <StartE_PapierDrawingTask+0xc0c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f00e ffea 	bl	8015e3e <osMutexRelease>
      osEventFlagsSet(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG);
 8006e6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ea0 <StartE_PapierDrawingTask+0xc10>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2108      	movs	r1, #8
 8006e70:	4618      	mov	r0, r3
 8006e72:	f00e fe37 	bl	8015ae4 <osEventFlagsSet>
      osEventFlagsSet(C3V1FlagsHandle, SEND_MEASURMENT_COMMAND_FLAG);
 8006e76:	4b0a      	ldr	r3, [pc, #40]	; (8006ea0 <StartE_PapierDrawingTask+0xc10>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f00e fe31 	bl	8015ae4 <osEventFlagsSet>

      osDelay(1);
 8006e82:	2001      	movs	r0, #1
 8006e84:	f00e fd42 	bl	801590c <osDelay>
   {
 8006e88:	f7ff ba24 	b.w	80062d4 <StartE_PapierDrawingTask+0x44>
 8006e8c:	080204f0 	.word	0x080204f0
 8006e90:	080204dc 	.word	0x080204dc
 8006e94:	080204c4 	.word	0x080204c4
 8006e98:	080204fc 	.word	0x080204fc
 8006e9c:	200040b0 	.word	0x200040b0
 8006ea0:	200040c4 	.word	0x200040c4

08006ea4 <StartE_PapierDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartE_PapierDisplayTask */
void StartE_PapierDisplayTask(void *argument)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartE_PapierDisplayTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8006eac:	4b1d      	ldr	r3, [pc, #116]	; (8006f24 <StartE_PapierDisplayTask+0x80>)
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	2102      	movs	r1, #2
 8006eb8:	f00e fe8a 	bl	8015bd0 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG, osFlagsWaitAny, osWaitForever);
 8006ebc:	4b19      	ldr	r3, [pc, #100]	; (8006f24 <StartE_PapierDisplayTask+0x80>)
 8006ebe:	6818      	ldr	r0, [r3, #0]
 8006ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2108      	movs	r1, #8
 8006ec8:	f00e fe82 	bl	8015bd0 <osEventFlagsWait>
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8006ecc:	4b16      	ldr	r3, [pc, #88]	; (8006f28 <StartE_PapierDisplayTask+0x84>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f00e ff67 	bl	8015da8 <osMutexAcquire>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8006eda:	4b14      	ldr	r3, [pc, #80]	; (8006f2c <StartE_PapierDisplayTask+0x88>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f04f 31ff 	mov.w	r1, #4294967295
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f00e ff60 	bl	8015da8 <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8006ee8:	4b11      	ldr	r3, [pc, #68]	; (8006f30 <StartE_PapierDisplayTask+0x8c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f04f 31ff 	mov.w	r1, #4294967295
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f00e ff59 	bl	8015da8 <osMutexAcquire>
      e_papier_display();
 8006ef6:	f7fd feab 	bl	8004c50 <e_papier_display>
      e_papier_clear();
 8006efa:	f7fd ff1b 	bl	8004d34 <e_papier_clear>
      osMutexRelease(SPI1MutexHandle);
 8006efe:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <StartE_PapierDisplayTask+0x8c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f00e ff9b 	bl	8015e3e <osMutexRelease>
      osMutexRelease(E_PAPIERMutexHandle);
 8006f08:	4b08      	ldr	r3, [pc, #32]	; (8006f2c <StartE_PapierDisplayTask+0x88>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f00e ff96 	bl	8015e3e <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 8006f12:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <StartE_PapierDisplayTask+0x84>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f00e ff91 	bl	8015e3e <osMutexRelease>
      osDelay(1);
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	f00e fcf5 	bl	801590c <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG, osFlagsWaitAny, osWaitForever);
 8006f22:	e7cb      	b.n	8006ebc <StartE_PapierDisplayTask+0x18>
 8006f24:	200040c4 	.word	0x200040c4
 8006f28:	200040a4 	.word	0x200040a4
 8006f2c:	200040b0 	.word	0x200040b0
 8006f30:	200040ac 	.word	0x200040ac

08006f34 <StartMenuTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMenuTask */
void StartMenuTask(void *argument)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMenuTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8006f3c:	4b0c      	ldr	r3, [pc, #48]	; (8006f70 <StartMenuTask+0x3c>)
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	f04f 33ff 	mov.w	r3, #4294967295
 8006f44:	2202      	movs	r2, #2
 8006f46:	2102      	movs	r1, #2
 8006f48:	f00e fe42 	bl	8015bd0 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osMutexAcquire(EncoderMutexHandle, osWaitForever);
 8006f4c:	4b09      	ldr	r3, [pc, #36]	; (8006f74 <StartMenuTask+0x40>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f04f 31ff 	mov.w	r1, #4294967295
 8006f54:	4618      	mov	r0, r3
 8006f56:	f00e ff27 	bl	8015da8 <osMutexAcquire>
      MENU_Handler();
 8006f5a:	f7fa fe81 	bl	8001c60 <MENU_Handler>
      osMutexRelease(EncoderMutexHandle);
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <StartMenuTask+0x40>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f00e ff6b 	bl	8015e3e <osMutexRelease>
      osDelay(10);
 8006f68:	200a      	movs	r0, #10
 8006f6a:	f00e fccf 	bl	801590c <osDelay>
      osMutexAcquire(EncoderMutexHandle, osWaitForever);
 8006f6e:	e7ed      	b.n	8006f4c <StartMenuTask+0x18>
 8006f70:	200040c4 	.word	0x200040c4
 8006f74:	200040c0 	.word	0x200040c0

08006f78 <StartSaveMemoryTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSaveMemoryTask */
void StartSaveMemoryTask(void *argument)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006f84:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006f88:	6018      	str	r0, [r3, #0]
   /* USER CODE BEGIN StartSaveMemoryTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8006f8a:	4b62      	ldr	r3, [pc, #392]	; (8007114 <StartSaveMemoryTask+0x19c>)
 8006f8c:	6818      	ldr	r0, [r3, #0]
 8006f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f92:	2202      	movs	r2, #2
 8006f94:	2102      	movs	r1, #2
 8006f96:	f00e fe1b 	bl	8015bd0 <osEventFlagsWait>
   osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_TO_SAVE, osFlagsWaitAny, osWaitForever);
 8006f9a:	4b5e      	ldr	r3, [pc, #376]	; (8007114 <StartSaveMemoryTask+0x19c>)
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2120      	movs	r1, #32
 8006fa6:	f00e fe13 	bl	8015bd0 <osEventFlagsWait>
   PageVariable_TypeDef Pv             = { 0 };
 8006faa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006fae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fb8:	461a      	mov	r2, r3
 8006fba:	2100      	movs	r1, #0
 8006fbc:	f012 fce0 	bl	8019980 <memset>
   MV_TypeDef _Mv                      = { 0 };
 8006fc0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006fc4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006fc8:	4618      	mov	r0, r3
 8006fca:	2330      	movs	r3, #48	; 0x30
 8006fcc:	461a      	mov	r2, r3
 8006fce:	2100      	movs	r1, #0
 8006fd0:	f012 fcd6 	bl	8019980 <memset>
   uint32_t Cnt                        = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
   RTC_TimeTypeDef RtcTime             = { 0 };
 8006fda:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006fde:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	6053      	str	r3, [r2, #4]
 8006fea:	6093      	str	r3, [r2, #8]
 8006fec:	60d3      	str	r3, [r2, #12]
 8006fee:	6113      	str	r3, [r2, #16]
   RTC_DateTypeDef RtcDate             = { 0 };
 8006ff0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006ff4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]
   PageVariable_TypeDef ConfirmPv      = { 0 };
 8006ffc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007000:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007004:	4618      	mov	r0, r3
 8007006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800700a:	461a      	mov	r2, r3
 800700c:	2100      	movs	r1, #0
 800700e:	f012 fcb7 	bl	8019980 <memset>
   FramDateChart_TypeDef FramDateChart = { 0 };
 8007012:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007016:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800701a:	461a      	mov	r2, r3
 800701c:	2300      	movs	r3, #0
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	6053      	str	r3, [r2, #4]
 8007022:	6093      	str	r3, [r2, #8]
 8007024:	60d3      	str	r3, [r2, #12]
   uint8_t FramDataChartExistFlag      = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
   osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800702c:	4b3a      	ldr	r3, [pc, #232]	; (8007118 <StartSaveMemoryTask+0x1a0>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f04f 31ff 	mov.w	r1, #4294967295
 8007034:	4618      	mov	r0, r3
 8007036:	f00e feb7 	bl	8015da8 <osMutexAcquire>
   uint32_t PageCnt          = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 800703a:	2100      	movs	r1, #0
 800703c:	4837      	ldr	r0, [pc, #220]	; (800711c <StartSaveMemoryTask+0x1a4>)
 800703e:	f7fe f914 	bl	800526a <fram_Read32>
 8007042:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
   uint32_t FramDateChartCnt = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 8007046:	2104      	movs	r1, #4
 8007048:	4834      	ldr	r0, [pc, #208]	; (800711c <StartSaveMemoryTask+0x1a4>)
 800704a:	f7fe f90e 	bl	800526a <fram_Read32>
 800704e:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
   osMutexRelease(SPI1MutexHandle);
 8007052:	4b31      	ldr	r3, [pc, #196]	; (8007118 <StartSaveMemoryTask+0x1a0>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f00e fef1 	bl	8015e3e <osMutexRelease>
   osMutexAcquire(RTCMutexHandle, osWaitForever);
 800705c:	4b30      	ldr	r3, [pc, #192]	; (8007120 <StartSaveMemoryTask+0x1a8>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f04f 31ff 	mov.w	r1, #4294967295
 8007064:	4618      	mov	r0, r3
 8007066:	f00e fe9f 	bl	8015da8 <osMutexAcquire>
   HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 800706a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800706e:	2200      	movs	r2, #0
 8007070:	4619      	mov	r1, r3
 8007072:	482c      	ldr	r0, [pc, #176]	; (8007124 <StartSaveMemoryTask+0x1ac>)
 8007074:	f009 fe66 	bl	8010d44 <HAL_RTC_GetTime>
   HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8007078:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800707c:	2200      	movs	r2, #0
 800707e:	4619      	mov	r1, r3
 8007080:	4828      	ldr	r0, [pc, #160]	; (8007124 <StartSaveMemoryTask+0x1ac>)
 8007082:	f009 ff49 	bl	8010f18 <HAL_RTC_GetDate>
   osMutexRelease(RTCMutexHandle);
 8007086:	4b26      	ldr	r3, [pc, #152]	; (8007120 <StartSaveMemoryTask+0x1a8>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4618      	mov	r0, r3
 800708c:	f00e fed7 	bl	8015e3e <osMutexRelease>

   for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8007090:	2308      	movs	r3, #8
 8007092:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8007096:	e04c      	b.n	8007132 <StartSaveMemoryTask+0x1ba>
   {
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8007098:	4b1f      	ldr	r3, [pc, #124]	; (8007118 <StartSaveMemoryTask+0x1a0>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f04f 31ff 	mov.w	r1, #4294967295
 80070a0:	4618      	mov	r0, r3
 80070a2:	f00e fe81 	bl	8015da8 <osMutexAcquire>
      fram_Read(&Fram, i, &FramDateChart, 12);
 80070a6:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80070aa:	b299      	uxth	r1, r3
 80070ac:	f107 020c 	add.w	r2, r7, #12
 80070b0:	230c      	movs	r3, #12
 80070b2:	481a      	ldr	r0, [pc, #104]	; (800711c <StartSaveMemoryTask+0x1a4>)
 80070b4:	f7fe f9aa 	bl	800540c <fram_Read>
      osMutexRelease(SPI1MutexHandle);
 80070b8:	4b17      	ldr	r3, [pc, #92]	; (8007118 <StartSaveMemoryTask+0x1a0>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	f00e febe 	bl	8015e3e <osMutexRelease>
      if(FramDateChart.Date == RtcDate.Date && FramDateChart.Month == RtcDate.Month && FramDateChart.Year == RtcDate.Year)
 80070c2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80070c6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80070ca:	781a      	ldrb	r2, [r3, #0]
 80070cc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80070d0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80070d4:	789b      	ldrb	r3, [r3, #2]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d126      	bne.n	8007128 <StartSaveMemoryTask+0x1b0>
 80070da:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80070de:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80070e2:	785a      	ldrb	r2, [r3, #1]
 80070e4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80070e8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80070ec:	785b      	ldrb	r3, [r3, #1]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d11a      	bne.n	8007128 <StartSaveMemoryTask+0x1b0>
 80070f2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80070f6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80070fa:	789a      	ldrb	r2, [r3, #2]
 80070fc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007100:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8007104:	78db      	ldrb	r3, [r3, #3]
 8007106:	429a      	cmp	r2, r3
 8007108:	d10e      	bne.n	8007128 <StartSaveMemoryTask+0x1b0>
      {
         FramDataChartExistFlag = 1;
 800710a:	2301      	movs	r3, #1
 800710c:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
         // FramDateChart.Length   = 0;
         // fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * sizeof(FramDateChart_TypeDef), &FramDateChart,
         // sizeof(FramDateChart_TypeDef));
         break;
 8007110:	e015      	b.n	800713e <StartSaveMemoryTask+0x1c6>
 8007112:	bf00      	nop
 8007114:	200040c4 	.word	0x200040c4
 8007118:	200040ac 	.word	0x200040ac
 800711c:	20003fbc 	.word	0x20003fbc
 8007120:	200040bc 	.word	0x200040bc
 8007124:	200041d4 	.word	0x200041d4
   for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8007128:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800712c:	330c      	adds	r3, #12
 800712e:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8007132:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8007136:	f241 7277 	movw	r2, #6007	; 0x1777
 800713a:	4293      	cmp	r3, r2
 800713c:	ddac      	ble.n	8007098 <StartSaveMemoryTask+0x120>
      }
   }
   if(FramDataChartExistFlag == 0)
 800713e:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 8007142:	2b00      	cmp	r3, #0
 8007144:	d157      	bne.n	80071f6 <StartSaveMemoryTask+0x27e>
   {
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8007146:	4ba7      	ldr	r3, [pc, #668]	; (80073e4 <StartSaveMemoryTask+0x46c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f04f 31ff 	mov.w	r1, #4294967295
 800714e:	4618      	mov	r0, r3
 8007150:	f00e fe2a 	bl	8015da8 <osMutexAcquire>
      fram_Increment32(&Fram, DATE_CHART_CNT_ADDR);
 8007154:	2104      	movs	r1, #4
 8007156:	48a4      	ldr	r0, [pc, #656]	; (80073e8 <StartSaveMemoryTask+0x470>)
 8007158:	f7fe f8e0 	bl	800531c <fram_Increment32>
      FramDateChart.Date           = RtcDate.Date;
 800715c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007160:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8007164:	789a      	ldrb	r2, [r3, #2]
 8007166:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800716a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800716e:	701a      	strb	r2, [r3, #0]
      FramDateChart.Month          = RtcDate.Month;
 8007170:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007174:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8007178:	785a      	ldrb	r2, [r3, #1]
 800717a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800717e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007182:	705a      	strb	r2, [r3, #1]
      FramDateChart.Year           = RtcDate.Year;
 8007184:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007188:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800718c:	78da      	ldrb	r2, [r3, #3]
 800718e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007192:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007196:	709a      	strb	r2, [r3, #2]
      FramDateChart.StartFlashPage = PageCnt;
 8007198:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800719c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80071a0:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80071a4:	605a      	str	r2, [r3, #4]
      FramDateChart.Length         = 0;
 80071a6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80071aa:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80071ae:	2200      	movs	r2, #0
 80071b0:	721a      	strb	r2, [r3, #8]
      FramDateChart.Crc            = CRC_INITIAL_VALUE;
 80071b2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80071b6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80071ba:	f04f 32ff 	mov.w	r2, #4294967295
 80071be:	60da      	str	r2, [r3, #12]
      FramDateChartCnt             = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 80071c0:	2104      	movs	r1, #4
 80071c2:	4889      	ldr	r0, [pc, #548]	; (80073e8 <StartSaveMemoryTask+0x470>)
 80071c4:	f7fe f851 	bl	800526a <fram_Read32>
 80071c8:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
      fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 80071cc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	461a      	mov	r2, r3
 80071d4:	0052      	lsls	r2, r2, #1
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3308      	adds	r3, #8
 80071de:	b299      	uxth	r1, r3
 80071e0:	f107 020c 	add.w	r2, r7, #12
 80071e4:	230c      	movs	r3, #12
 80071e6:	4880      	ldr	r0, [pc, #512]	; (80073e8 <StartSaveMemoryTask+0x470>)
 80071e8:	f7fe f8e1 	bl	80053ae <fram_Write>
      osMutexRelease(SPI1MutexHandle);
 80071ec:	4b7d      	ldr	r3, [pc, #500]	; (80073e4 <StartSaveMemoryTask+0x46c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f00e fe24 	bl	8015e3e <osMutexRelease>
   }

   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(DataToSaveQueueHandle, &_Mv, 0, osWaitForever);
 80071f6:	4b7d      	ldr	r3, [pc, #500]	; (80073ec <StartSaveMemoryTask+0x474>)
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80071fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007202:	2200      	movs	r2, #0
 8007204:	f00e ff2c 	bl	8016060 <osMessageQueueGet>
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 8007208:	4b79      	ldr	r3, [pc, #484]	; (80073f0 <StartSaveMemoryTask+0x478>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f04f 31ff 	mov.w	r1, #4294967295
 8007210:	4618      	mov	r0, r3
 8007212:	f00e fdc9 	bl	8015da8 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8007216:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800721a:	2200      	movs	r2, #0
 800721c:	4619      	mov	r1, r3
 800721e:	4875      	ldr	r0, [pc, #468]	; (80073f4 <StartSaveMemoryTask+0x47c>)
 8007220:	f009 fd90 	bl	8010d44 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8007224:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8007228:	2200      	movs	r2, #0
 800722a:	4619      	mov	r1, r3
 800722c:	4871      	ldr	r0, [pc, #452]	; (80073f4 <StartSaveMemoryTask+0x47c>)
 800722e:	f009 fe73 	bl	8010f18 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 8007232:	4b6f      	ldr	r3, [pc, #444]	; (80073f0 <StartSaveMemoryTask+0x478>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f00e fe01 	bl	8015e3e <osMutexRelease>
      if(osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_TO_SAVE, osFlagsWaitAny, 1) != osFlagsErrorTimeout)
 800723c:	4b6e      	ldr	r3, [pc, #440]	; (80073f8 <StartSaveMemoryTask+0x480>)
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	2301      	movs	r3, #1
 8007242:	2200      	movs	r2, #0
 8007244:	2120      	movs	r1, #32
 8007246:	f00e fcc3 	bl	8015bd0 <osEventFlagsWait>
 800724a:	4603      	mov	r3, r0
 800724c:	f113 0f02 	cmn.w	r3, #2
 8007250:	f000 80d6 	beq.w	8007400 <StartSaveMemoryTask+0x488>
      {
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8007254:	4b63      	ldr	r3, [pc, #396]	; (80073e4 <StartSaveMemoryTask+0x46c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f04f 31ff 	mov.w	r1, #4294967295
 800725c:	4618      	mov	r0, r3
 800725e:	f00e fda3 	bl	8015da8 <osMutexAcquire>
         PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8007262:	2100      	movs	r1, #0
 8007264:	4860      	ldr	r0, [pc, #384]	; (80073e8 <StartSaveMemoryTask+0x470>)
 8007266:	f7fe f800 	bl	800526a <fram_Read32>
 800726a:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
         flash_WritePage(&Flash, PageCnt, &Pv);
 800726e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007272:	461a      	mov	r2, r3
 8007274:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8007278:	4860      	ldr	r0, [pc, #384]	; (80073fc <StartSaveMemoryTask+0x484>)
 800727a:	f7fd fee4 	bl	8005046 <flash_WritePage>
         flash_ReadPage(&Flash, PageCnt, &ConfirmPv);
 800727e:	f107 031c 	add.w	r3, r7, #28
 8007282:	461a      	mov	r2, r3
 8007284:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8007288:	485c      	ldr	r0, [pc, #368]	; (80073fc <StartSaveMemoryTask+0x484>)
 800728a:	f7fd ff12 	bl	80050b2 <flash_ReadPage>
         if(Pv.PageCRC == ConfirmPv.PageCRC)
 800728e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007292:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007296:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800729a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800729e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80072a2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d147      	bne.n	800733a <StartSaveMemoryTask+0x3c2>
         {
            fram_Increment32(&Fram, LAST_PAGE_NUMBER_ADDR);
 80072aa:	2100      	movs	r1, #0
 80072ac:	484e      	ldr	r0, [pc, #312]	; (80073e8 <StartSaveMemoryTask+0x470>)
 80072ae:	f7fe f835 	bl	800531c <fram_Increment32>
            PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 80072b2:	2100      	movs	r1, #0
 80072b4:	484c      	ldr	r0, [pc, #304]	; (80073e8 <StartSaveMemoryTask+0x470>)
 80072b6:	f7fd ffd8 	bl	800526a <fram_Read32>
 80072ba:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
            FramDateChart.Length++;
 80072be:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80072c2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80072c6:	7a1b      	ldrb	r3, [r3, #8]
 80072c8:	3301      	adds	r3, #1
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80072d0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80072d4:	721a      	strb	r2, [r3, #8]
            FramDateChart.Crc = Crc(FramDateChart.Crc, 256, &Pv);
 80072d6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80072da:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80072e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fd fa93 	bl	8004814 <Crc>
 80072ee:	4602      	mov	r2, r0
 80072f0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80072f4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80072f8:	60da      	str	r2, [r3, #12]
            FramDateChartCnt  = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 80072fa:	2104      	movs	r1, #4
 80072fc:	483a      	ldr	r0, [pc, #232]	; (80073e8 <StartSaveMemoryTask+0x470>)
 80072fe:	f7fd ffb4 	bl	800526a <fram_Read32>
 8007302:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
            fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 8007306:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800730a:	b29b      	uxth	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	0052      	lsls	r2, r2, #1
 8007310:	4413      	add	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	b29b      	uxth	r3, r3
 8007316:	3308      	adds	r3, #8
 8007318:	b299      	uxth	r1, r3
 800731a:	f107 020c 	add.w	r2, r7, #12
 800731e:	230c      	movs	r3, #12
 8007320:	4831      	ldr	r0, [pc, #196]	; (80073e8 <StartSaveMemoryTask+0x470>)
 8007322:	f7fe f844 	bl	80053ae <fram_Write>
            Memory_ClearBuffer(&ConfirmPv);
 8007326:	f107 031c 	add.w	r3, r7, #28
 800732a:	4618      	mov	r0, r3
 800732c:	f002 f972 	bl	8009614 <Memory_ClearBuffer>
            Memory_ClearBuffer(&Pv);
 8007330:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007334:	4618      	mov	r0, r3
 8007336:	f002 f96d 	bl	8009614 <Memory_ClearBuffer>
         }
         fram_Increment32(&Fram, DATE_CHART_CNT_ADDR);
 800733a:	2104      	movs	r1, #4
 800733c:	482a      	ldr	r0, [pc, #168]	; (80073e8 <StartSaveMemoryTask+0x470>)
 800733e:	f7fd ffed 	bl	800531c <fram_Increment32>
         FramDateChart.Date           = RtcDate.Date;
 8007342:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007346:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800734a:	789a      	ldrb	r2, [r3, #2]
 800734c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007350:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007354:	701a      	strb	r2, [r3, #0]
         FramDateChart.Month          = RtcDate.Month;
 8007356:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800735a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800735e:	785a      	ldrb	r2, [r3, #1]
 8007360:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007364:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007368:	705a      	strb	r2, [r3, #1]
         FramDateChart.Year           = RtcDate.Year;
 800736a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800736e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8007372:	78da      	ldrb	r2, [r3, #3]
 8007374:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007378:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800737c:	709a      	strb	r2, [r3, #2]
         FramDateChart.StartFlashPage = PageCnt;
 800737e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007382:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007386:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800738a:	605a      	str	r2, [r3, #4]
         FramDateChart.Length         = 0;
 800738c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007390:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007394:	2200      	movs	r2, #0
 8007396:	721a      	strb	r2, [r3, #8]
         FramDateChart.Crc            = CRC_INITIAL_VALUE;
 8007398:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800739c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80073a0:	f04f 32ff 	mov.w	r2, #4294967295
 80073a4:	60da      	str	r2, [r3, #12]
         FramDateChartCnt             = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 80073a6:	2104      	movs	r1, #4
 80073a8:	480f      	ldr	r0, [pc, #60]	; (80073e8 <StartSaveMemoryTask+0x470>)
 80073aa:	f7fd ff5e 	bl	800526a <fram_Read32>
 80073ae:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
         fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 80073b2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	461a      	mov	r2, r3
 80073ba:	0052      	lsls	r2, r2, #1
 80073bc:	4413      	add	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	3308      	adds	r3, #8
 80073c4:	b299      	uxth	r1, r3
 80073c6:	f107 020c 	add.w	r2, r7, #12
 80073ca:	230c      	movs	r3, #12
 80073cc:	4806      	ldr	r0, [pc, #24]	; (80073e8 <StartSaveMemoryTask+0x470>)
 80073ce:	f7fd ffee 	bl	80053ae <fram_Write>
         Cnt = 0;
 80073d2:	2300      	movs	r3, #0
 80073d4:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
         osMutexRelease(SPI1MutexHandle);
 80073d8:	4b02      	ldr	r3, [pc, #8]	; (80073e4 <StartSaveMemoryTask+0x46c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4618      	mov	r0, r3
 80073de:	f00e fd2e 	bl	8015e3e <osMutexRelease>
 80073e2:	e00d      	b.n	8007400 <StartSaveMemoryTask+0x488>
 80073e4:	200040ac 	.word	0x200040ac
 80073e8:	20003fbc 	.word	0x20003fbc
 80073ec:	20004084 	.word	0x20004084
 80073f0:	200040bc 	.word	0x200040bc
 80073f4:	200041d4 	.word	0x200041d4
 80073f8:	200040c4 	.word	0x200040c4
 80073fc:	20003fac 	.word	0x20003fac
      }
      Pv.Record[Cnt].ExternalHumidity    = _Mv.ExtHumidity;
 8007400:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007404:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007408:	6859      	ldr	r1, [r3, #4]
 800740a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800740e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8007412:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8007416:	4613      	mov	r3, r2
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	1a9b      	subs	r3, r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4403      	add	r3, r0
 8007420:	3318      	adds	r3, #24
 8007422:	6019      	str	r1, [r3, #0]
      Pv.Record[Cnt].ExternalPM1         = _Mv.ExtPM1;
 8007424:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007428:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800742c:	8a98      	ldrh	r0, [r3, #20]
 800742e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007432:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8007436:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800743a:	4613      	mov	r3, r2
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	1a9b      	subs	r3, r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	440b      	add	r3, r1
 8007444:	330a      	adds	r3, #10
 8007446:	4602      	mov	r2, r0
 8007448:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].ExternalPM10        = _Mv.ExtPM10;
 800744a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800744e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007452:	8b18      	ldrh	r0, [r3, #24]
 8007454:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007458:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 800745c:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8007460:	4613      	mov	r3, r2
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	1a9b      	subs	r3, r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	440b      	add	r3, r1
 800746a:	330e      	adds	r3, #14
 800746c:	4602      	mov	r2, r0
 800746e:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].ExternalPM25        = _Mv.ExtPM25;
 8007470:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007474:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007478:	8ad8      	ldrh	r0, [r3, #22]
 800747a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800747e:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8007482:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8007486:	4613      	mov	r3, r2
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	1a9b      	subs	r3, r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	440b      	add	r3, r1
 8007490:	330c      	adds	r3, #12
 8007492:	4602      	mov	r2, r0
 8007494:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].ExternalTemperature = _Mv.ExtTemperature;
 8007496:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800749a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800749e:	6819      	ldr	r1, [r3, #0]
 80074a0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80074a4:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80074a8:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80074ac:	4613      	mov	r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	1a9b      	subs	r3, r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4403      	add	r3, r0
 80074b6:	3314      	adds	r3, #20
 80074b8:	6019      	str	r1, [r3, #0]
      Pv.Record[Cnt].Hour                = RtcTime.Hours;
 80074ba:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80074be:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80074c2:	7818      	ldrb	r0, [r3, #0]
 80074c4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80074c8:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80074cc:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80074d0:	4613      	mov	r3, r2
 80074d2:	00db      	lsls	r3, r3, #3
 80074d4:	1a9b      	subs	r3, r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	440b      	add	r3, r1
 80074da:	3303      	adds	r3, #3
 80074dc:	4602      	mov	r2, r0
 80074de:	701a      	strb	r2, [r3, #0]
      Pv.Record[Cnt].InternalPM1         = _Mv.InternalPM1;
 80074e0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80074e4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80074e8:	8b58      	ldrh	r0, [r3, #26]
 80074ea:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80074ee:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80074f2:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80074f6:	4613      	mov	r3, r2
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	1a9b      	subs	r3, r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	440b      	add	r3, r1
 8007500:	3304      	adds	r3, #4
 8007502:	4602      	mov	r2, r0
 8007504:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].InternalPM10        = _Mv.InternalPM10;
 8007506:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800750a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800750e:	8bd8      	ldrh	r0, [r3, #30]
 8007510:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007514:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8007518:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800751c:	4613      	mov	r3, r2
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	3308      	adds	r3, #8
 8007528:	4602      	mov	r2, r0
 800752a:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].InternalPM25        = _Mv.InternalPM25;
 800752c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007530:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007534:	8b98      	ldrh	r0, [r3, #28]
 8007536:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800753a:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 800753e:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8007542:	4613      	mov	r3, r2
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	1a9b      	subs	r3, r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	3306      	adds	r3, #6
 800754e:	4602      	mov	r2, r0
 8007550:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].Minute              = RtcTime.Minutes;
 8007552:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007556:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800755a:	7858      	ldrb	r0, [r3, #1]
 800755c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007560:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8007564:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8007568:	4613      	mov	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	1a9b      	subs	r3, r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	440b      	add	r3, r1
 8007572:	3302      	adds	r3, #2
 8007574:	4602      	mov	r2, r0
 8007576:	701a      	strb	r2, [r3, #0]
      Pv.Record[Cnt].Pressure            = _Mv.Pressure;
 8007578:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800757c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007580:	6919      	ldr	r1, [r3, #16]
 8007582:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007586:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800758a:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800758e:	4613      	mov	r3, r2
 8007590:	00db      	lsls	r3, r3, #3
 8007592:	1a9b      	subs	r3, r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4403      	add	r3, r0
 8007598:	3310      	adds	r3, #16
 800759a:	6019      	str	r1, [r3, #0]
      Pv.Record[Cnt].Reserved            = Cnt;
 800759c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80075a0:	b2d8      	uxtb	r0, r3
 80075a2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80075a6:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80075aa:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80075ae:	4613      	mov	r3, r2
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	1a9b      	subs	r3, r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	440b      	add	r3, r1
 80075b8:	4602      	mov	r2, r0
 80075ba:	701a      	strb	r2, [r3, #0]
      Pv.Record[Cnt].Second              = RtcTime.Seconds;
 80075bc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80075c0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80075c4:	7898      	ldrb	r0, [r3, #2]
 80075c6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80075ca:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80075ce:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80075d2:	4613      	mov	r3, r2
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	1a9b      	subs	r3, r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	440b      	add	r3, r1
 80075dc:	3301      	adds	r3, #1
 80075de:	4602      	mov	r2, r0
 80075e0:	701a      	strb	r2, [r3, #0]
      Cnt++;
 80075e2:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80075e6:	3301      	adds	r3, #1
 80075e8:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
      if(Cnt == 9)
 80075ec:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80075f0:	2b09      	cmp	r3, #9
 80075f2:	f040 808a 	bne.w	800770a <StartSaveMemoryTask+0x792>
      {
         Cnt        = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
         Pv.PageCRC = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 80075fc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007600:	461a      	mov	r2, r3
 8007602:	21fc      	movs	r1, #252	; 0xfc
 8007604:	f04f 30ff 	mov.w	r0, #4294967295
 8007608:	f7fd f904 	bl	8004814 <Crc>
 800760c:	4602      	mov	r2, r0
 800760e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007612:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007616:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800761a:	4b3e      	ldr	r3, [pc, #248]	; (8007714 <StartSaveMemoryTask+0x79c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f04f 31ff 	mov.w	r1, #4294967295
 8007622:	4618      	mov	r0, r3
 8007624:	f00e fbc0 	bl	8015da8 <osMutexAcquire>
         PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8007628:	2100      	movs	r1, #0
 800762a:	483b      	ldr	r0, [pc, #236]	; (8007718 <StartSaveMemoryTask+0x7a0>)
 800762c:	f7fd fe1d 	bl	800526a <fram_Read32>
 8007630:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
         flash_WritePage(&Flash, PageCnt, &Pv);
 8007634:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007638:	461a      	mov	r2, r3
 800763a:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 800763e:	4837      	ldr	r0, [pc, #220]	; (800771c <StartSaveMemoryTask+0x7a4>)
 8007640:	f7fd fd01 	bl	8005046 <flash_WritePage>
         flash_ReadPage(&Flash, PageCnt, &ConfirmPv);
 8007644:	f107 031c 	add.w	r3, r7, #28
 8007648:	461a      	mov	r2, r3
 800764a:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 800764e:	4833      	ldr	r0, [pc, #204]	; (800771c <StartSaveMemoryTask+0x7a4>)
 8007650:	f7fd fd2f 	bl	80050b2 <flash_ReadPage>
         if(Pv.PageCRC == ConfirmPv.PageCRC)
 8007654:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007658:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800765c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8007660:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007664:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007668:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800766c:	429a      	cmp	r2, r3
 800766e:	d147      	bne.n	8007700 <StartSaveMemoryTask+0x788>
         {
            fram_Increment32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8007670:	2100      	movs	r1, #0
 8007672:	4829      	ldr	r0, [pc, #164]	; (8007718 <StartSaveMemoryTask+0x7a0>)
 8007674:	f7fd fe52 	bl	800531c <fram_Increment32>
            PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8007678:	2100      	movs	r1, #0
 800767a:	4827      	ldr	r0, [pc, #156]	; (8007718 <StartSaveMemoryTask+0x7a0>)
 800767c:	f7fd fdf5 	bl	800526a <fram_Read32>
 8007680:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
            FramDateChart.Length++;
 8007684:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007688:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800768c:	7a1b      	ldrb	r3, [r3, #8]
 800768e:	3301      	adds	r3, #1
 8007690:	b2da      	uxtb	r2, r3
 8007692:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007696:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800769a:	721a      	strb	r2, [r3, #8]
            FramDateChart.Crc = Crc(FramDateChart.Crc, 256, &Pv);
 800769c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80076a0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80076aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fd f8b0 	bl	8004814 <Crc>
 80076b4:	4602      	mov	r2, r0
 80076b6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80076ba:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80076be:	60da      	str	r2, [r3, #12]
            FramDateChartCnt  = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 80076c0:	2104      	movs	r1, #4
 80076c2:	4815      	ldr	r0, [pc, #84]	; (8007718 <StartSaveMemoryTask+0x7a0>)
 80076c4:	f7fd fdd1 	bl	800526a <fram_Read32>
 80076c8:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
            fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 80076cc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	461a      	mov	r2, r3
 80076d4:	0052      	lsls	r2, r2, #1
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	b29b      	uxth	r3, r3
 80076dc:	3308      	adds	r3, #8
 80076de:	b299      	uxth	r1, r3
 80076e0:	f107 020c 	add.w	r2, r7, #12
 80076e4:	230c      	movs	r3, #12
 80076e6:	480c      	ldr	r0, [pc, #48]	; (8007718 <StartSaveMemoryTask+0x7a0>)
 80076e8:	f7fd fe61 	bl	80053ae <fram_Write>
            Memory_ClearBuffer(&ConfirmPv);
 80076ec:	f107 031c 	add.w	r3, r7, #28
 80076f0:	4618      	mov	r0, r3
 80076f2:	f001 ff8f 	bl	8009614 <Memory_ClearBuffer>
            Memory_ClearBuffer(&Pv);
 80076f6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 ff8a 	bl	8009614 <Memory_ClearBuffer>
         }
         osMutexRelease(SPI1MutexHandle);
 8007700:	4b04      	ldr	r3, [pc, #16]	; (8007714 <StartSaveMemoryTask+0x79c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f00e fb9a 	bl	8015e3e <osMutexRelease>
      }
      osDelay(1);
 800770a:	2001      	movs	r0, #1
 800770c:	f00e f8fe 	bl	801590c <osDelay>
      osMessageQueueGet(DataToSaveQueueHandle, &_Mv, 0, osWaitForever);
 8007710:	e571      	b.n	80071f6 <StartSaveMemoryTask+0x27e>
 8007712:	bf00      	nop
 8007714:	200040ac 	.word	0x200040ac
 8007718:	20003fbc 	.word	0x20003fbc
 800771c:	20003fac 	.word	0x20003fac

08007720 <StartChartTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartChartTask */
void StartChartTask(void *argument)
{
 8007720:	b5b0      	push	{r4, r5, r7, lr}
 8007722:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 8007726:	b082      	sub	sp, #8
 8007728:	af02      	add	r7, sp, #8
 800772a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800772e:	f843 0cfc 	str.w	r0, [r3, #-252]
   /* USER CODE BEGIN StartChartTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8007732:	4bc5      	ldr	r3, [pc, #788]	; (8007a48 <StartChartTask+0x328>)
 8007734:	6818      	ldr	r0, [r3, #0]
 8007736:	f04f 33ff 	mov.w	r3, #4294967295
 800773a:	2202      	movs	r2, #2
 800773c:	2102      	movs	r1, #2
 800773e:	f00e fa47 	bl	8015bd0 <osEventFlagsWait>
   ChartTypeVariable_TypeDef ChartVariable;
   uint8_t Hour[800]                   = { 0 };
 8007742:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007746:	2200      	movs	r2, #0
 8007748:	f843 2c20 	str.w	r2, [r3, #-32]
 800774c:	3b1c      	subs	r3, #28
 800774e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007752:	2100      	movs	r1, #0
 8007754:	4618      	mov	r0, r3
 8007756:	f012 f913 	bl	8019980 <memset>
   uint8_t Minute[800]                 = { 0 };
 800775a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800775e:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	3304      	adds	r3, #4
 8007768:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800776c:	2100      	movs	r1, #0
 800776e:	4618      	mov	r0, r3
 8007770:	f012 f906 	bl	8019980 <memset>
   ChartDateAndType_TypeDef Cda        = { 0 };
 8007774:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007778:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800777c:	2200      	movs	r2, #0
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	809a      	strh	r2, [r3, #4]
   uint8_t FramDataChartExistFlag      = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007788:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 800778c:	7013      	strb	r3, [r2, #0]
   FramDateChart_TypeDef FramDateChart = { 0 };
 800778e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007792:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007796:	461a      	mov	r2, r3
 8007798:	2300      	movs	r3, #0
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	6053      	str	r3, [r2, #4]
 800779e:	6093      	str	r3, [r2, #8]
 80077a0:	60d3      	str	r3, [r2, #12]
   PageVariable_TypeDef Pv             = { 0 };
 80077a2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80077a6:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 80077aa:	4618      	mov	r0, r3
 80077ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077b0:	461a      	mov	r2, r3
 80077b2:	2100      	movs	r1, #0
 80077b4:	f012 f8e4 	bl	8019980 <memset>
   uint16_t Y_Axis[800]                = { 0 };
 80077b8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80077bc:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 80077c0:	4618      	mov	r0, r3
 80077c2:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80077c6:	461a      	mov	r2, r3
 80077c8:	2100      	movs	r1, #0
 80077ca:	f012 f8d9 	bl	8019980 <memset>
   uint16_t X_Axis[800]                = { 0 };
 80077ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80077d2:	3bd8      	subs	r3, #216	; 0xd8
 80077d4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80077d8:	2100      	movs	r1, #0
 80077da:	4618      	mov	r0, r3
 80077dc:	f012 f8d0 	bl	8019980 <memset>
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(ChartQueueHandle, &Cda, 0, osWaitForever);
 80077e0:	4b9a      	ldr	r3, [pc, #616]	; (8007a4c <StartChartTask+0x32c>)
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	f507 615c 	add.w	r1, r7, #3520	; 0xdc0
 80077e8:	3908      	subs	r1, #8
 80077ea:	f04f 33ff 	mov.w	r3, #4294967295
 80077ee:	2200      	movs	r2, #0
 80077f0:	f00e fc36 	bl	8016060 <osMessageQueueGet>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 80077f4:	4b96      	ldr	r3, [pc, #600]	; (8007a50 <StartChartTask+0x330>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f04f 31ff 	mov.w	r1, #4294967295
 80077fc:	4618      	mov	r0, r3
 80077fe:	f00e fad3 	bl	8015da8 <osMutexAcquire>
      e_papier_clear();
 8007802:	f7fd fa97 	bl	8004d34 <e_papier_clear>
      GFX_DrawLine(63, 50, 63, 281, BLACK, E_PAPIER);
 8007806:	2301      	movs	r3, #1
 8007808:	9301      	str	r3, [sp, #4]
 800780a:	2300      	movs	r3, #0
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	f240 1319 	movw	r3, #281	; 0x119
 8007812:	223f      	movs	r2, #63	; 0x3f
 8007814:	2132      	movs	r1, #50	; 0x32
 8007816:	203f      	movs	r0, #63	; 0x3f
 8007818:	f7f9 fe6c 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 281, 399, 281, BLACK, E_PAPIER);
 800781c:	2301      	movs	r3, #1
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	2300      	movs	r3, #0
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	f240 1319 	movw	r3, #281	; 0x119
 8007828:	f240 128f 	movw	r2, #399	; 0x18f
 800782c:	f240 1119 	movw	r1, #281	; 0x119
 8007830:	2028      	movs	r0, #40	; 0x28
 8007832:	f7f9 fe5f 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 223, 399, 223, BLACK, E_PAPIER);
 8007836:	2301      	movs	r3, #1
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	2300      	movs	r3, #0
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	23df      	movs	r3, #223	; 0xdf
 8007840:	f240 128f 	movw	r2, #399	; 0x18f
 8007844:	21df      	movs	r1, #223	; 0xdf
 8007846:	2028      	movs	r0, #40	; 0x28
 8007848:	f7f9 fe54 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 165, 399, 165, BLACK, E_PAPIER);
 800784c:	2301      	movs	r3, #1
 800784e:	9301      	str	r3, [sp, #4]
 8007850:	2300      	movs	r3, #0
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	23a5      	movs	r3, #165	; 0xa5
 8007856:	f240 128f 	movw	r2, #399	; 0x18f
 800785a:	21a5      	movs	r1, #165	; 0xa5
 800785c:	2028      	movs	r0, #40	; 0x28
 800785e:	f7f9 fe49 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 108, 399, 108, BLACK, E_PAPIER);
 8007862:	2301      	movs	r3, #1
 8007864:	9301      	str	r3, [sp, #4]
 8007866:	2300      	movs	r3, #0
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	236c      	movs	r3, #108	; 0x6c
 800786c:	f240 128f 	movw	r2, #399	; 0x18f
 8007870:	216c      	movs	r1, #108	; 0x6c
 8007872:	2028      	movs	r0, #40	; 0x28
 8007874:	f7f9 fe3e 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 50, 399, 50, BLACK, E_PAPIER);
 8007878:	2301      	movs	r3, #1
 800787a:	9301      	str	r3, [sp, #4]
 800787c:	2300      	movs	r3, #0
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	2332      	movs	r3, #50	; 0x32
 8007882:	f240 128f 	movw	r2, #399	; 0x18f
 8007886:	2132      	movs	r1, #50	; 0x32
 8007888:	2028      	movs	r0, #40	; 0x28
 800788a:	f7f9 fe33 	bl	80014f4 <GFX_DrawLine>
      for(int i = 1; i < 24; i++)
 800788e:	2301      	movs	r3, #1
 8007890:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007894:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	e02a      	b.n	80078f2 <StartChartTask+0x1d2>
      {
         GFX_DrawLine(64 + i * 14, 281, 64 + i * 14, 270, BLACK, E_PAPIER);
 800789c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80078a0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	4613      	mov	r3, r2
 80078a8:	00db      	lsls	r3, r3, #3
 80078aa:	1a9b      	subs	r3, r3, r2
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80078b2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80078b6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	4613      	mov	r3, r2
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	1a9b      	subs	r3, r3, r2
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80078c8:	2301      	movs	r3, #1
 80078ca:	9301      	str	r3, [sp, #4]
 80078cc:	2300      	movs	r3, #0
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80078d4:	f240 1119 	movw	r1, #281	; 0x119
 80078d8:	f7f9 fe0c 	bl	80014f4 <GFX_DrawLine>
      for(int i = 1; i < 24; i++)
 80078dc:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80078e0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3301      	adds	r3, #1
 80078e8:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80078ec:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80078f6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b17      	cmp	r3, #23
 80078fe:	ddcd      	ble.n	800789c <StartChartTask+0x17c>
      }
      for(int i = 1; i < 24; i++)
 8007900:	2301      	movs	r3, #1
 8007902:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007906:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	e02d      	b.n	800796a <StartChartTask+0x24a>
      {
         char Temp[3];
         sprintf(Temp, "%d", i);
 800790e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007912:	3b1c      	subs	r3, #28
 8007914:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007918:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800791c:	6812      	ldr	r2, [r2, #0]
 800791e:	494d      	ldr	r1, [pc, #308]	; (8007a54 <StartChartTask+0x334>)
 8007920:	4618      	mov	r0, r3
 8007922:	f005 f92d 	bl	800cb80 <sprintf_>
         GFX_DrawString(64 + i * 14 - 5, 290, Temp, BLACK, 1, E_PAPIER);
 8007926:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800792a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	4613      	mov	r3, r2
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	1a9b      	subs	r3, r3, r2
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 800793c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007940:	3a1c      	subs	r2, #28
 8007942:	2301      	movs	r3, #1
 8007944:	9301      	str	r3, [sp, #4]
 8007946:	2301      	movs	r3, #1
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	2300      	movs	r3, #0
 800794c:	f44f 7191 	mov.w	r1, #290	; 0x122
 8007950:	f7f9 fcb0 	bl	80012b4 <GFX_DrawString>
      for(int i = 1; i < 24; i++)
 8007954:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007958:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3301      	adds	r3, #1
 8007960:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007964:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800796e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b17      	cmp	r3, #23
 8007976:	ddca      	ble.n	800790e <StartChartTask+0x1ee>
      }
      osMutexRelease(E_PAPIERMutexHandle);
 8007978:	4b35      	ldr	r3, [pc, #212]	; (8007a50 <StartChartTask+0x330>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4618      	mov	r0, r3
 800797e:	f00e fa5e 	bl	8015e3e <osMutexRelease>
      if(Cda.ChartType == PRESSURE || Cda.ChartType == EXTERNAL_TEMPERATURE || Cda.ChartType == EXTERNAL_HUMIDITY)
 8007982:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007986:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800798a:	791b      	ldrb	r3, [r3, #4]
 800798c:	2b06      	cmp	r3, #6
 800798e:	d00e      	beq.n	80079ae <StartChartTask+0x28e>
 8007990:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007994:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007998:	791b      	ldrb	r3, [r3, #4]
 800799a:	2b07      	cmp	r3, #7
 800799c:	d007      	beq.n	80079ae <StartChartTask+0x28e>
 800799e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80079a2:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80079a6:	791b      	ldrb	r3, [r3, #4]
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	f040 85dd 	bne.w	8008568 <StartChartTask+0xe48>
      {
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 80079ae:	2308      	movs	r3, #8
 80079b0:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80079b4:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	e05c      	b.n	8007a76 <StartChartTask+0x356>
         {
            osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80079bc:	4b26      	ldr	r3, [pc, #152]	; (8007a58 <StartChartTask+0x338>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f04f 31ff 	mov.w	r1, #4294967295
 80079c4:	4618      	mov	r0, r3
 80079c6:	f00e f9ef 	bl	8015da8 <osMutexAcquire>
            fram_Read(&Fram, i, &FramDateChart, 12);
 80079ca:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80079ce:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	b299      	uxth	r1, r3
 80079d6:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 80079da:	3a18      	subs	r2, #24
 80079dc:	230c      	movs	r3, #12
 80079de:	481f      	ldr	r0, [pc, #124]	; (8007a5c <StartChartTask+0x33c>)
 80079e0:	f7fd fd14 	bl	800540c <fram_Read>
            osMutexRelease(SPI1MutexHandle);
 80079e4:	4b1c      	ldr	r3, [pc, #112]	; (8007a58 <StartChartTask+0x338>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f00e fa28 	bl	8015e3e <osMutexRelease>
            if(FramDateChart.Date == Cda.Date && FramDateChart.Month == Cda.Month && FramDateChart.Year == Cda.Year)
 80079ee:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80079f2:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80079f6:	781a      	ldrb	r2, [r3, #0]
 80079f8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80079fc:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007a00:	78db      	ldrb	r3, [r3, #3]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d12c      	bne.n	8007a60 <StartChartTask+0x340>
 8007a06:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007a0a:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007a0e:	785a      	ldrb	r2, [r3, #1]
 8007a10:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007a14:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007a18:	789b      	ldrb	r3, [r3, #2]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d120      	bne.n	8007a60 <StartChartTask+0x340>
 8007a1e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007a22:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007a26:	789b      	ldrb	r3, [r3, #2]
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007a2e:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d113      	bne.n	8007a60 <StartChartTask+0x340>
            {
               FramDataChartExistFlag = 1;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007a3e:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8007a42:	7013      	strb	r3, [r2, #0]
               break;
 8007a44:	e020      	b.n	8007a88 <StartChartTask+0x368>
 8007a46:	bf00      	nop
 8007a48:	200040c4 	.word	0x200040c4
 8007a4c:	20004080 	.word	0x20004080
 8007a50:	200040b0 	.word	0x200040b0
 8007a54:	08020508 	.word	0x08020508
 8007a58:	200040ac 	.word	0x200040ac
 8007a5c:	20003fbc 	.word	0x20003fbc
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8007a60:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007a64:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	330c      	adds	r3, #12
 8007a6c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007a70:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007a7a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f241 7277 	movw	r2, #6007	; 0x1777
 8007a84:	4293      	cmp	r3, r2
 8007a86:	dd99      	ble.n	80079bc <StartChartTask+0x29c>
            }
         }
         if(FramDataChartExistFlag == 1)
 8007a88:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007a8c:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	f040 813d 	bne.w	8007d12 <StartChartTask+0x5f2>
         {
            FramDataChartExistFlag = 0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007a9e:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8007aa2:	7013      	strb	r3, [r2, #0]
            for(int i = 0; i < FramDateChart.Length; i++)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007aaa:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	e121      	b.n	8007cf6 <StartChartTask+0x5d6>
            {
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8007ab2:	4bc7      	ldr	r3, [pc, #796]	; (8007dd0 <StartChartTask+0x6b0>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8007aba:	4618      	mov	r0, r3
 8007abc:	f00e f974 	bl	8015da8 <osMutexAcquire>
               flash_ReadPage(&Flash, i + FramDateChart.StartFlashPage, &Pv);
 8007ac0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007ac4:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007ace:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	18d1      	adds	r1, r2, r3
 8007ad6:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8007ada:	3b18      	subs	r3, #24
 8007adc:	461a      	mov	r2, r3
 8007ade:	48bd      	ldr	r0, [pc, #756]	; (8007dd4 <StartChartTask+0x6b4>)
 8007ae0:	f7fd fae7 	bl	80050b2 <flash_ReadPage>
               osMutexRelease(SPI1MutexHandle);
 8007ae4:	4bba      	ldr	r3, [pc, #744]	; (8007dd0 <StartChartTask+0x6b0>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f00e f9a8 	bl	8015e3e <osMutexRelease>
               uint32_t TempCrc = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 8007aee:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8007af2:	3b18      	subs	r3, #24
 8007af4:	461a      	mov	r2, r3
 8007af6:	21fc      	movs	r1, #252	; 0xfc
 8007af8:	f04f 30ff 	mov.w	r0, #4294967295
 8007afc:	f7fc fe8a 	bl	8004814 <Crc>
 8007b00:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007b04:	f103 030c 	add.w	r3, r3, #12
 8007b08:	6018      	str	r0, [r3, #0]
               if(TempCrc == Pv.PageCRC)
 8007b0a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007b0e:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8007b12:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8007b16:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007b1a:	f102 020c 	add.w	r2, r2, #12
 8007b1e:	6812      	ldr	r2, [r2, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	f040 80dd 	bne.w	8007ce0 <StartChartTask+0x5c0>
               {
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8007b26:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007b2a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	4613      	mov	r3, r2
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	4413      	add	r3, r2
 8007b36:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007b3a:	f102 0208 	add.w	r2, r2, #8
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	2300      	movs	r3, #0
 8007b42:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007b46:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	e0c0      	b.n	8007cd0 <StartChartTask+0x5b0>
                  {
                     if(Cda.ChartType == PRESSURE)
 8007b4e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007b52:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007b56:	791b      	ldrb	r3, [r3, #4]
 8007b58:	2b06      	cmp	r3, #6
 8007b5a:	d122      	bne.n	8007ba2 <StartChartTask+0x482>
                     {
                        ChartVariable.FloatingPointType[j + k] = Pv.Record[k].Pressure;
 8007b5c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007b60:	f103 0308 	add.w	r3, r3, #8
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007b6a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	18d0      	adds	r0, r2, r3
 8007b72:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007b76:	f5a3 618b 	sub.w	r1, r3, #1112	; 0x458
 8007b7a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007b7e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	4613      	mov	r3, r2
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	1a9b      	subs	r3, r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	440b      	add	r3, r1
 8007b8e:	3310      	adds	r3, #16
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007b96:	f5a3 6150 	sub.w	r1, r3, #3328	; 0xd00
 8007b9a:	0083      	lsls	r3, r0, #2
 8007b9c:	440b      	add	r3, r1
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	e04b      	b.n	8007c3a <StartChartTask+0x51a>
                     }
                     else if(Cda.ChartType == EXTERNAL_TEMPERATURE)
 8007ba2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007ba6:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007baa:	791b      	ldrb	r3, [r3, #4]
 8007bac:	2b07      	cmp	r3, #7
 8007bae:	d122      	bne.n	8007bf6 <StartChartTask+0x4d6>
                     {
                        ChartVariable.FloatingPointType[j + k] = Pv.Record[k].ExternalTemperature;
 8007bb0:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007bb4:	f103 0308 	add.w	r3, r3, #8
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007bbe:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	18d0      	adds	r0, r2, r3
 8007bc6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007bca:	f5a3 618b 	sub.w	r1, r3, #1112	; 0x458
 8007bce:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007bd2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	00db      	lsls	r3, r3, #3
 8007bdc:	1a9b      	subs	r3, r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	440b      	add	r3, r1
 8007be2:	3314      	adds	r3, #20
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007bea:	f5a3 6150 	sub.w	r1, r3, #3328	; 0xd00
 8007bee:	0083      	lsls	r3, r0, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	e021      	b.n	8007c3a <StartChartTask+0x51a>
                     }
                     else
                     {
                        ChartVariable.FloatingPointType[j + k] = Pv.Record[k].ExternalHumidity;
 8007bf6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007bfa:	f103 0308 	add.w	r3, r3, #8
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007c04:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	18d0      	adds	r0, r2, r3
 8007c0c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007c10:	f5a3 618b 	sub.w	r1, r3, #1112	; 0x458
 8007c14:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007c18:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	00db      	lsls	r3, r3, #3
 8007c22:	1a9b      	subs	r3, r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	440b      	add	r3, r1
 8007c28:	3318      	adds	r3, #24
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007c30:	f5a3 6150 	sub.w	r1, r3, #3328	; 0xd00
 8007c34:	0083      	lsls	r3, r0, #2
 8007c36:	440b      	add	r3, r1
 8007c38:	601a      	str	r2, [r3, #0]
                     }
                     Minute[j + k] = Pv.Record[k].Minute;
 8007c3a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007c3e:	f103 0308 	add.w	r3, r3, #8
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007c48:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	18d1      	adds	r1, r2, r3
 8007c50:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007c54:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8007c58:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007c5c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	4613      	mov	r3, r2
 8007c64:	00db      	lsls	r3, r3, #3
 8007c66:	1a9b      	subs	r3, r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4403      	add	r3, r0
 8007c6c:	3302      	adds	r3, #2
 8007c6e:	781a      	ldrb	r2, [r3, #0]
 8007c70:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007c74:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8007c78:	545a      	strb	r2, [r3, r1]
                     Hour[j + k]   = Pv.Record[k].Hour;
 8007c7a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007c7e:	f103 0308 	add.w	r3, r3, #8
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007c88:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	18d1      	adds	r1, r2, r3
 8007c90:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007c94:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8007c98:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007c9c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	00db      	lsls	r3, r3, #3
 8007ca6:	1a9b      	subs	r3, r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4403      	add	r3, r0
 8007cac:	3303      	adds	r3, #3
 8007cae:	781a      	ldrb	r2, [r3, #0]
 8007cb0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007cb4:	440b      	add	r3, r1
 8007cb6:	f803 2c20 	strb.w	r2, [r3, #-32]
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8007cba:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007cbe:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007cca:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8007cce:	6013      	str	r3, [r2, #0]
 8007cd0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007cd4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	f77f af37 	ble.w	8007b4e <StartChartTask+0x42e>
            for(int i = 0; i < FramDateChart.Length; i++)
 8007ce0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007ce4:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3301      	adds	r3, #1
 8007cec:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007cf0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007cfa:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007cfe:	7a1b      	ldrb	r3, [r3, #8]
 8007d00:	461a      	mov	r2, r3
 8007d02:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007d06:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	f6ff aed0 	blt.w	8007ab2 <StartChartTask+0x392>
                  }
               }
            }
         }
         float _Max = 0, _Min = 10000000.0;
 8007d12:	f04f 0300 	mov.w	r3, #0
 8007d16:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007d1a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	4b2d      	ldr	r3, [pc, #180]	; (8007dd8 <StartChartTask+0x6b8>)
 8007d22:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007d26:	f102 0220 	add.w	r2, r2, #32
 8007d2a:	6013      	str	r3, [r2, #0]
         int a      = 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007d32:	f102 0204 	add.w	r2, r2, #4
 8007d36:	6013      	str	r3, [r2, #0]
         float _Avg = 0;
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007d40:	f102 021c 	add.w	r2, r2, #28
 8007d44:	6013      	str	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8007d46:	2300      	movs	r3, #0
 8007d48:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007d4c:	f102 0218 	add.w	r2, r2, #24
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	e025      	b.n	8007da0 <StartChartTask+0x680>
         {
            _Avg += ChartVariable.FloatingPointType[i];
 8007d54:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007d58:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007d5c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007d60:	f103 0318 	add.w	r3, r3, #24
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	edd3 7a00 	vldr	s15, [r3]
 8007d6e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007d72:	f103 031c 	add.w	r3, r3, #28
 8007d76:	ed93 7a00 	vldr	s14, [r3]
 8007d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d7e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007d82:	f103 031c 	add.w	r3, r3, #28
 8007d86:	edc3 7a00 	vstr	s15, [r3]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8007d8a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007d8e:	f103 0318 	add.w	r3, r3, #24
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3301      	adds	r3, #1
 8007d96:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007d9a:	f102 0218 	add.w	r2, r2, #24
 8007d9e:	6013      	str	r3, [r2, #0]
 8007da0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007da4:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007da8:	7a1b      	ldrb	r3, [r3, #8]
 8007daa:	461a      	mov	r2, r3
 8007dac:	4613      	mov	r3, r2
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	4413      	add	r3, r2
 8007db2:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007db6:	f102 0218 	add.w	r2, r2, #24
 8007dba:	6812      	ldr	r2, [r2, #0]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	dbc9      	blt.n	8007d54 <StartChartTask+0x634>
         }
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007dc6:	f102 0214 	add.w	r2, r2, #20
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	e0b9      	b.n	8007f42 <StartChartTask+0x822>
 8007dce:	bf00      	nop
 8007dd0:	200040ac 	.word	0x200040ac
 8007dd4:	20003fac 	.word	0x20003fac
 8007dd8:	4b189680 	.word	0x4b189680
 8007ddc:	44960000 	.word	0x44960000
 8007de0:	437a0000 	.word	0x437a0000
         {
            if(ChartVariable.FloatingPointType[i] > 1200.0)
 8007de4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007de8:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007dec:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007df0:	f103 0314 	add.w	r3, r3, #20
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	edd3 7a00 	vldr	s15, [r3]
 8007dfe:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8007ddc <StartChartTask+0x6bc>
 8007e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e0a:	dd21      	ble.n	8007e50 <StartChartTask+0x730>
            {
               ChartVariable.FloatingPointType[i] = (_Avg / (FramDateChart.Length * 9));
 8007e0c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007e10:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007e14:	7a1b      	ldrb	r3, [r3, #8]
 8007e16:	461a      	mov	r2, r3
 8007e18:	4613      	mov	r3, r2
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	4413      	add	r3, r2
 8007e1e:	ee07 3a90 	vmov	s15, r3
 8007e22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e26:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007e2a:	f103 031c 	add.w	r3, r3, #28
 8007e2e:	edd3 6a00 	vldr	s13, [r3]
 8007e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e36:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007e3a:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007e3e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007e42:	f103 0314 	add.w	r3, r3, #20
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	edc3 7a00 	vstr	s15, [r3]
            }
            if(_Max < ChartVariable.FloatingPointType[i])
 8007e50:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007e54:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007e58:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007e5c:	f103 0314 	add.w	r3, r3, #20
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	edd3 7a00 	vldr	s15, [r3]
 8007e6a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007e6e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007e72:	ed93 7a00 	vldr	s14, [r3]
 8007e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7e:	d51a      	bpl.n	8007eb6 <StartChartTask+0x796>
            {
               _Max = ChartVariable.FloatingPointType[i];
 8007e80:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007e84:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007e88:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007e8c:	f103 0314 	add.w	r3, r3, #20
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007e9c:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8007ea0:	6013      	str	r3, [r2, #0]
               a    = i;
 8007ea2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007ea6:	f103 0314 	add.w	r3, r3, #20
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007eb0:	f102 0204 	add.w	r2, r2, #4
 8007eb4:	6013      	str	r3, [r2, #0]
            }
            if(_Min > ChartVariable.FloatingPointType[i] && ChartVariable.FloatingPointType[i] != 0.0)
 8007eb6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007eba:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007ebe:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007ec2:	f103 0314 	add.w	r3, r3, #20
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	edd3 7a00 	vldr	s15, [r3]
 8007ed0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007ed4:	f103 0320 	add.w	r3, r3, #32
 8007ed8:	ed93 7a00 	vldr	s14, [r3]
 8007edc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee4:	dd22      	ble.n	8007f2c <StartChartTask+0x80c>
 8007ee6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007eea:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007eee:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007ef2:	f103 0314 	add.w	r3, r3, #20
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	edd3 7a00 	vldr	s15, [r3]
 8007f00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f08:	d010      	beq.n	8007f2c <StartChartTask+0x80c>
            {
               _Min = ChartVariable.FloatingPointType[i];
 8007f0a:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007f0e:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007f12:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007f16:	f103 0314 	add.w	r3, r3, #20
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007f26:	f102 0220 	add.w	r2, r2, #32
 8007f2a:	6013      	str	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8007f2c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007f30:	f103 0314 	add.w	r3, r3, #20
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3301      	adds	r3, #1
 8007f38:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007f3c:	f102 0214 	add.w	r2, r2, #20
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007f46:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007f4a:	7a1b      	ldrb	r3, [r3, #8]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	4613      	mov	r3, r2
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	4413      	add	r3, r2
 8007f54:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007f58:	f102 0214 	add.w	r2, r2, #20
 8007f5c:	6812      	ldr	r2, [r2, #0]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	f6ff af40 	blt.w	8007de4 <StartChartTask+0x6c4>
            }
         }
         for(int i = 0; i < 800; i++)
 8007f64:	2300      	movs	r3, #0
 8007f66:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007f6a:	f102 0210 	add.w	r2, r2, #16
 8007f6e:	6013      	str	r3, [r2, #0]
 8007f70:	e079      	b.n	8008066 <StartChartTask+0x946>
         {
            if(ChartVariable.FloatingPointType[i] == 0)
 8007f72:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007f76:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007f7a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007f7e:	f103 0310 	add.w	r3, r3, #16
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	edd3 7a00 	vldr	s15, [r3]
 8007f8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f94:	d110      	bne.n	8007fb8 <StartChartTask+0x898>
            {
               ChartVariable.FloatingPointType[i] = _Min;
 8007f96:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007f9a:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007f9e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007fa2:	f103 0310 	add.w	r3, r3, #16
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007fb0:	f102 0220 	add.w	r2, r2, #32
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	601a      	str	r2, [r3, #0]
            }
            Y_Axis[i] = (uint16_t)mapf(ChartVariable.FloatingPointType[i], _Min, _Max, 20.0, 250.0);
 8007fb8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007fbc:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007fc0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007fc4:	f103 0310 	add.w	r3, r3, #16
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	edd3 7a00 	vldr	s15, [r3]
 8007fd2:	ed1f 2a7d 	vldr	s4, [pc, #-500]	; 8007de0 <StartChartTask+0x6c0>
 8007fd6:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 8007fda:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007fde:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007fe2:	ed93 1a00 	vldr	s2, [r3]
 8007fe6:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007fea:	f103 0320 	add.w	r3, r3, #32
 8007fee:	edd3 0a00 	vldr	s1, [r3]
 8007ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8007ff6:	f002 ff65 	bl	800aec4 <mapf>
 8007ffa:	eef0 7a40 	vmov.f32	s15, s0
 8007ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008002:	ee17 3a90 	vmov	r3, s15
 8008006:	b299      	uxth	r1, r3
 8008008:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800800c:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008010:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008014:	f102 0210 	add.w	r2, r2, #16
 8008018:	6812      	ldr	r2, [r2, #0]
 800801a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            Y_Axis[i] = 300 - Y_Axis[i];
 800801e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008022:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008026:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800802a:	f102 0210 	add.w	r2, r2, #16
 800802e:	6812      	ldr	r2, [r2, #0]
 8008030:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008034:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8008038:	b299      	uxth	r1, r3
 800803a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800803e:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008042:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008046:	f102 0210 	add.w	r2, r2, #16
 800804a:	6812      	ldr	r2, [r2, #0]
 800804c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         for(int i = 0; i < 800; i++)
 8008050:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008054:	f103 0310 	add.w	r3, r3, #16
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3301      	adds	r3, #1
 800805c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008060:	f102 0210 	add.w	r2, r2, #16
 8008064:	6013      	str	r3, [r2, #0]
 8008066:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800806a:	f103 0310 	add.w	r3, r3, #16
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008074:	f6ff af7d 	blt.w	8007f72 <StartChartTask+0x852>
         }
         for(int i = 0; i < 800; i++)
 8008078:	2300      	movs	r3, #0
 800807a:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800807e:	f102 020c 	add.w	r2, r2, #12
 8008082:	6013      	str	r3, [r2, #0]
 8008084:	e0b8      	b.n	80081f8 <StartChartTask+0xad8>
         {
            if(Hour[i] != 0 && Minute[i] != 0)
 8008086:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800808a:	461a      	mov	r2, r3
 800808c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008090:	f103 030c 	add.w	r3, r3, #12
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4413      	add	r3, r2
 8008098:	3b20      	subs	r3, #32
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 8084 	beq.w	80081aa <StartChartTask+0xa8a>
 80080a2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80080a6:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 80080aa:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80080ae:	f103 030c 	add.w	r3, r3, #12
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4413      	add	r3, r2
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d076      	beq.n	80081aa <StartChartTask+0xa8a>
            {
               X_Axis[i] = map(Hour[i] * 60 + Minute[i], Hour[i] * 60, (Hour[i] + 1) * 60, 64 + (Hour[i] * 14), 64 + ((Hour[i] + 1) * 14));
 80080bc:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80080c0:	461a      	mov	r2, r3
 80080c2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80080c6:	f103 030c 	add.w	r3, r3, #12
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4413      	add	r3, r2
 80080ce:	3b20      	subs	r3, #32
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	4613      	mov	r3, r2
 80080d6:	011b      	lsls	r3, r3, #4
 80080d8:	1a9b      	subs	r3, r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4619      	mov	r1, r3
 80080de:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80080e2:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 80080e6:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80080ea:	f103 030c 	add.w	r3, r3, #12
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4413      	add	r3, r2
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	440b      	add	r3, r1
 80080f6:	4618      	mov	r0, r3
 80080f8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80080fc:	461a      	mov	r2, r3
 80080fe:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008102:	f103 030c 	add.w	r3, r3, #12
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4413      	add	r3, r2
 800810a:	3b20      	subs	r3, #32
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	4613      	mov	r3, r2
 8008112:	011b      	lsls	r3, r3, #4
 8008114:	1a9b      	subs	r3, r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4619      	mov	r1, r3
 800811a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800811e:	461a      	mov	r2, r3
 8008120:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008124:	f103 030c 	add.w	r3, r3, #12
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4413      	add	r3, r2
 800812c:	3b20      	subs	r3, #32
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	4613      	mov	r3, r2
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	1a9b      	subs	r3, r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	461c      	mov	r4, r3
 800813c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008140:	461a      	mov	r2, r3
 8008142:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008146:	f103 030c 	add.w	r3, r3, #12
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4413      	add	r3, r2
 800814e:	3b20      	subs	r3, #32
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	4613      	mov	r3, r2
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	1a9b      	subs	r3, r3, r2
 800815a:	005b      	lsls	r3, r3, #1
 800815c:	3340      	adds	r3, #64	; 0x40
 800815e:	461d      	mov	r5, r3
 8008160:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008164:	461a      	mov	r2, r3
 8008166:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800816a:	f103 030c 	add.w	r3, r3, #12
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4413      	add	r3, r2
 8008172:	3b20      	subs	r3, #32
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	4613      	mov	r3, r2
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	1a9b      	subs	r3, r3, r2
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	3340      	adds	r3, #64	; 0x40
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	462b      	mov	r3, r5
 8008186:	4622      	mov	r2, r4
 8008188:	f002 feca 	bl	800af20 <map>
 800818c:	4603      	mov	r3, r0
 800818e:	b29a      	uxth	r2, r3
 8008190:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008194:	4619      	mov	r1, r3
 8008196:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800819a:	f103 030c 	add.w	r3, r3, #12
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	440b      	add	r3, r1
 80081a4:	f823 2cd8 	strh.w	r2, [r3, #-216]
 80081a8:	e01b      	b.n	80081e2 <StartChartTask+0xac2>
            }
            else if(X_Axis[i] == 0)
 80081aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80081ae:	461a      	mov	r2, r3
 80081b0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80081b4:	f103 030c 	add.w	r3, r3, #12
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	005b      	lsls	r3, r3, #1
 80081bc:	4413      	add	r3, r2
 80081be:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10d      	bne.n	80081e2 <StartChartTask+0xac2>
            {
               X_Axis[i] = 0xffff;
 80081c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80081ca:	461a      	mov	r2, r3
 80081cc:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80081d0:	f103 030c 	add.w	r3, r3, #12
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	4413      	add	r3, r2
 80081da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081de:	f823 2cd8 	strh.w	r2, [r3, #-216]
         for(int i = 0; i < 800; i++)
 80081e2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80081e6:	f103 030c 	add.w	r3, r3, #12
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3301      	adds	r3, #1
 80081ee:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80081f2:	f102 020c 	add.w	r2, r2, #12
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80081fc:	f103 030c 	add.w	r3, r3, #12
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008206:	f6ff af3e 	blt.w	8008086 <StartChartTask+0x966>
            }
         }
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800820a:	4bdb      	ldr	r3, [pc, #876]	; (8008578 <StartChartTask+0xe58>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f04f 31ff 	mov.w	r1, #4294967295
 8008212:	4618      	mov	r0, r3
 8008214:	f00d fdc8 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8008218:	4bd8      	ldr	r3, [pc, #864]	; (800857c <StartChartTask+0xe5c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f04f 31ff 	mov.w	r1, #4294967295
 8008220:	4618      	mov	r0, r3
 8008222:	f00d fdc1 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8008226:	4bd6      	ldr	r3, [pc, #856]	; (8008580 <StartChartTask+0xe60>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f04f 31ff 	mov.w	r1, #4294967295
 800822e:	4618      	mov	r0, r3
 8008230:	f00d fdba 	bl	8015da8 <osMutexAcquire>
         if(X_Axis[0] != 0xffff && X_Axis[1] != 0xffff)
 8008234:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008238:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 800823c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008240:	4293      	cmp	r3, r2
 8008242:	d024      	beq.n	800828e <StartChartTask+0xb6e>
 8008244:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008248:	f833 3cd6 	ldrh.w	r3, [r3, #-214]
 800824c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008250:	4293      	cmp	r3, r2
 8008252:	d01c      	beq.n	800828e <StartChartTask+0xb6e>
         {
            GFX_DrawLine(X_Axis[0], Y_Axis[0], X_Axis[1], Y_Axis[1], BLACK, E_PAPIER);
 8008254:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008258:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 800825c:	4618      	mov	r0, r3
 800825e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008262:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	4619      	mov	r1, r3
 800826a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800826e:	f833 3cd6 	ldrh.w	r3, [r3, #-214]
 8008272:	461a      	mov	r2, r3
 8008274:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008278:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 800827c:	885b      	ldrh	r3, [r3, #2]
 800827e:	461c      	mov	r4, r3
 8008280:	2301      	movs	r3, #1
 8008282:	9301      	str	r3, [sp, #4]
 8008284:	2300      	movs	r3, #0
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	4623      	mov	r3, r4
 800828a:	f7f9 f933 	bl	80014f4 <GFX_DrawLine>
         }
         for(int i = 1; i < 800; i++)
 800828e:	2301      	movs	r3, #1
 8008290:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008294:	f102 0208 	add.w	r2, r2, #8
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	e065      	b.n	8008368 <StartChartTask+0xc48>
         {
            if(X_Axis[i + 1] != 0xffff && X_Axis[i] != 0xffff)
 800829c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80082a0:	f103 0308 	add.w	r3, r3, #8
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3301      	adds	r3, #1
 80082a8:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	4413      	add	r3, r2
 80082b0:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 80082b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d04a      	beq.n	8008352 <StartChartTask+0xc32>
 80082bc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80082c0:	461a      	mov	r2, r3
 80082c2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80082c6:	f103 0308 	add.w	r3, r3, #8
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	4413      	add	r3, r2
 80082d0:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 80082d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082d8:	4293      	cmp	r3, r2
 80082da:	d03a      	beq.n	8008352 <StartChartTask+0xc32>
            {
               GFX_DrawLine(X_Axis[i], Y_Axis[i], X_Axis[i + 1], Y_Axis[i + 1], BLACK, E_PAPIER);
 80082dc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80082e0:	461a      	mov	r2, r3
 80082e2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80082e6:	f103 0308 	add.w	r3, r3, #8
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	005b      	lsls	r3, r3, #1
 80082ee:	4413      	add	r3, r2
 80082f0:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80082fa:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 80082fe:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008302:	f102 0208 	add.w	r2, r2, #8
 8008306:	6812      	ldr	r2, [r2, #0]
 8008308:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800830c:	4619      	mov	r1, r3
 800830e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008312:	f103 0308 	add.w	r3, r3, #8
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3301      	adds	r3, #1
 800831a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	4413      	add	r3, r2
 8008322:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8008326:	461c      	mov	r4, r3
 8008328:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800832c:	f103 0308 	add.w	r3, r3, #8
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	1c5a      	adds	r2, r3, #1
 8008334:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008338:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 800833c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008340:	461a      	mov	r2, r3
 8008342:	2301      	movs	r3, #1
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	2300      	movs	r3, #0
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	4613      	mov	r3, r2
 800834c:	4622      	mov	r2, r4
 800834e:	f7f9 f8d1 	bl	80014f4 <GFX_DrawLine>
         for(int i = 1; i < 800; i++)
 8008352:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008356:	f103 0308 	add.w	r3, r3, #8
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3301      	adds	r3, #1
 800835e:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008362:	f102 0208 	add.w	r2, r2, #8
 8008366:	6013      	str	r3, [r2, #0]
 8008368:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800836c:	f103 0308 	add.w	r3, r3, #8
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008376:	db91      	blt.n	800829c <StartChartTask+0xb7c>
            }
         }
         char Temp[10];
         float TempDifferencje = _Max - _Min;
 8008378:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800837c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008380:	ed93 7a00 	vldr	s14, [r3]
 8008384:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008388:	f103 0320 	add.w	r3, r3, #32
 800838c:	edd3 7a00 	vldr	s15, [r3]
 8008390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008394:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008398:	edc3 7a00 	vstr	s15, [r3]
         sprintf(Temp, "%0.2f", (_Min + TempDifferencje / 4));
 800839c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80083a0:	edd3 7a00 	vldr	s15, [r3]
 80083a4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80083a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80083ac:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80083b0:	f103 0320 	add.w	r3, r3, #32
 80083b4:	edd3 7a00 	vldr	s15, [r3]
 80083b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083bc:	ee17 0a90 	vmov	r0, s15
 80083c0:	f7f8 f8da 	bl	8000578 <__aeabi_f2d>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80083cc:	3828      	subs	r0, #40	; 0x28
 80083ce:	496d      	ldr	r1, [pc, #436]	; (8008584 <StartChartTask+0xe64>)
 80083d0:	f004 fbd6 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 218, Temp, BLACK, 1, E_PAPIER);
 80083d4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80083d8:	3a28      	subs	r2, #40	; 0x28
 80083da:	2301      	movs	r3, #1
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	2301      	movs	r3, #1
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	2300      	movs	r3, #0
 80083e4:	21da      	movs	r1, #218	; 0xda
 80083e6:	2000      	movs	r0, #0
 80083e8:	f7f8 ff64 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", (_Min + TempDifferencje / 2));
 80083ec:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80083f0:	edd3 7a00 	vldr	s15, [r3]
 80083f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80083f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80083fc:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008400:	f103 0320 	add.w	r3, r3, #32
 8008404:	edd3 7a00 	vldr	s15, [r3]
 8008408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800840c:	ee17 0a90 	vmov	r0, s15
 8008410:	f7f8 f8b2 	bl	8000578 <__aeabi_f2d>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800841c:	3828      	subs	r0, #40	; 0x28
 800841e:	4959      	ldr	r1, [pc, #356]	; (8008584 <StartChartTask+0xe64>)
 8008420:	f004 fbae 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 160, Temp, BLACK, 1, E_PAPIER);
 8008424:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008428:	3a28      	subs	r2, #40	; 0x28
 800842a:	2301      	movs	r3, #1
 800842c:	9301      	str	r3, [sp, #4]
 800842e:	2301      	movs	r3, #1
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	2300      	movs	r3, #0
 8008434:	21a0      	movs	r1, #160	; 0xa0
 8008436:	2000      	movs	r0, #0
 8008438:	f7f8 ff3c 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", (_Max - TempDifferencje / 4));
 800843c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008440:	ed93 7a00 	vldr	s14, [r3]
 8008444:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008448:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800844c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008450:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008454:	ed93 7a00 	vldr	s14, [r3]
 8008458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800845c:	ee17 0a90 	vmov	r0, s15
 8008460:	f7f8 f88a 	bl	8000578 <__aeabi_f2d>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800846c:	3828      	subs	r0, #40	; 0x28
 800846e:	4945      	ldr	r1, [pc, #276]	; (8008584 <StartChartTask+0xe64>)
 8008470:	f004 fb86 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 103, Temp, BLACK, 1, E_PAPIER);
 8008474:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008478:	3a28      	subs	r2, #40	; 0x28
 800847a:	2301      	movs	r3, #1
 800847c:	9301      	str	r3, [sp, #4]
 800847e:	2301      	movs	r3, #1
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	2300      	movs	r3, #0
 8008484:	2167      	movs	r1, #103	; 0x67
 8008486:	2000      	movs	r0, #0
 8008488:	f7f8 ff14 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", _Min);
 800848c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008490:	f103 0320 	add.w	r3, r3, #32
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	f7f8 f86f 	bl	8000578 <__aeabi_f2d>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80084a2:	3828      	subs	r0, #40	; 0x28
 80084a4:	4937      	ldr	r1, [pc, #220]	; (8008584 <StartChartTask+0xe64>)
 80084a6:	f004 fb6b 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 276, Temp, BLACK, 1, E_PAPIER);
 80084aa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80084ae:	3a28      	subs	r2, #40	; 0x28
 80084b0:	2301      	movs	r3, #1
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	2301      	movs	r3, #1
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	2300      	movs	r3, #0
 80084ba:	f44f 718a 	mov.w	r1, #276	; 0x114
 80084be:	2000      	movs	r0, #0
 80084c0:	f7f8 fef8 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", _Max);
 80084c4:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80084c8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	f7f8 f853 	bl	8000578 <__aeabi_f2d>
 80084d2:	4602      	mov	r2, r0
 80084d4:	460b      	mov	r3, r1
 80084d6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80084da:	3828      	subs	r0, #40	; 0x28
 80084dc:	4929      	ldr	r1, [pc, #164]	; (8008584 <StartChartTask+0xe64>)
 80084de:	f004 fb4f 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 45, Temp, BLACK, 1, E_PAPIER);
 80084e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80084e6:	3a28      	subs	r2, #40	; 0x28
 80084e8:	2301      	movs	r3, #1
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	2301      	movs	r3, #1
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	2300      	movs	r3, #0
 80084f2:	212d      	movs	r1, #45	; 0x2d
 80084f4:	2000      	movs	r0, #0
 80084f6:	f7f8 fedd 	bl	80012b4 <GFX_DrawString>
         e_papier_display();
 80084fa:	f7fc fba9 	bl	8004c50 <e_papier_display>
         osMutexAcquire(EncoderMutexHandle, osWaitForever);
 80084fe:	4b22      	ldr	r3, [pc, #136]	; (8008588 <StartChartTask+0xe68>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f04f 31ff 	mov.w	r1, #4294967295
 8008506:	4618      	mov	r0, r3
 8008508:	f00d fc4e 	bl	8015da8 <osMutexAcquire>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800850c:	e002      	b.n	8008514 <StartChartTask+0xdf4>
         {
            osDelay(100);
 800850e:	2064      	movs	r0, #100	; 0x64
 8008510:	f00d f9fc 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8008514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008518:	481c      	ldr	r0, [pc, #112]	; (800858c <StartChartTask+0xe6c>)
 800851a:	f006 fca5 	bl	800ee68 <HAL_GPIO_ReadPin>
 800851e:	4603      	mov	r3, r0
 8008520:	2b01      	cmp	r3, #1
 8008522:	d0f4      	beq.n	800850e <StartChartTask+0xdee>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8008524:	e002      	b.n	800852c <StartChartTask+0xe0c>
         {
            osDelay(100);
 8008526:	2064      	movs	r0, #100	; 0x64
 8008528:	f00d f9f0 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800852c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008530:	4816      	ldr	r0, [pc, #88]	; (800858c <StartChartTask+0xe6c>)
 8008532:	f006 fc99 	bl	800ee68 <HAL_GPIO_ReadPin>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d0f4      	beq.n	8008526 <StartChartTask+0xe06>
         }
         osMutexRelease(EncoderMutexHandle);
 800853c:	4b12      	ldr	r3, [pc, #72]	; (8008588 <StartChartTask+0xe68>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4618      	mov	r0, r3
 8008542:	f00d fc7c 	bl	8015e3e <osMutexRelease>
         osMutexRelease(SPI1MutexHandle);
 8008546:	4b0e      	ldr	r3, [pc, #56]	; (8008580 <StartChartTask+0xe60>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4618      	mov	r0, r3
 800854c:	f00d fc77 	bl	8015e3e <osMutexRelease>
         osMutexRelease(E_PAPIERMutexHandle);
 8008550:	4b0a      	ldr	r3, [pc, #40]	; (800857c <StartChartTask+0xe5c>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4618      	mov	r0, r3
 8008556:	f00d fc72 	bl	8015e3e <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 800855a:	4b07      	ldr	r3, [pc, #28]	; (8008578 <StartChartTask+0xe58>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4618      	mov	r0, r3
 8008560:	f00d fc6d 	bl	8015e3e <osMutexRelease>
      {
 8008564:	f000 bdde 	b.w	8009124 <StartChartTask+0x1a04>
      }
      else
      {
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8008568:	2308      	movs	r3, #8
 800856a:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800856e:	f102 0204 	add.w	r2, r2, #4
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	e05c      	b.n	8008630 <StartChartTask+0xf10>
 8008576:	bf00      	nop
 8008578:	200040a4 	.word	0x200040a4
 800857c:	200040b0 	.word	0x200040b0
 8008580:	200040ac 	.word	0x200040ac
 8008584:	0802050c 	.word	0x0802050c
 8008588:	200040c0 	.word	0x200040c0
 800858c:	48000400 	.word	0x48000400
         {
            osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8008590:	4bc1      	ldr	r3, [pc, #772]	; (8008898 <StartChartTask+0x1178>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f04f 31ff 	mov.w	r1, #4294967295
 8008598:	4618      	mov	r0, r3
 800859a:	f00d fc05 	bl	8015da8 <osMutexAcquire>
            fram_Read(&Fram, i, &FramDateChart, 12);
 800859e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80085a2:	f103 0304 	add.w	r3, r3, #4
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	b299      	uxth	r1, r3
 80085aa:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 80085ae:	3a18      	subs	r2, #24
 80085b0:	230c      	movs	r3, #12
 80085b2:	48ba      	ldr	r0, [pc, #744]	; (800889c <StartChartTask+0x117c>)
 80085b4:	f7fc ff2a 	bl	800540c <fram_Read>
            osMutexRelease(SPI1MutexHandle);
 80085b8:	4bb7      	ldr	r3, [pc, #732]	; (8008898 <StartChartTask+0x1178>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4618      	mov	r0, r3
 80085be:	f00d fc3e 	bl	8015e3e <osMutexRelease>
            if(FramDateChart.Date == Cda.Date && FramDateChart.Month == Cda.Month && FramDateChart.Year == Cda.Year)
 80085c2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80085c6:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80085ca:	781a      	ldrb	r2, [r3, #0]
 80085cc:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80085d0:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80085d4:	78db      	ldrb	r3, [r3, #3]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d11f      	bne.n	800861a <StartChartTask+0xefa>
 80085da:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80085de:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80085e2:	785a      	ldrb	r2, [r3, #1]
 80085e4:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80085e8:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80085ec:	789b      	ldrb	r3, [r3, #2]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d113      	bne.n	800861a <StartChartTask+0xefa>
 80085f2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80085f6:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80085fa:	789b      	ldrb	r3, [r3, #2]
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008602:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	429a      	cmp	r2, r3
 800860a:	d106      	bne.n	800861a <StartChartTask+0xefa>
            {
               FramDataChartExistFlag = 1;
 800860c:	2301      	movs	r3, #1
 800860e:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008612:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8008616:	7013      	strb	r3, [r2, #0]
               break;
 8008618:	e013      	b.n	8008642 <StartChartTask+0xf22>
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 800861a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800861e:	f103 0304 	add.w	r3, r3, #4
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	330c      	adds	r3, #12
 8008626:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800862a:	f102 0204 	add.w	r2, r2, #4
 800862e:	6013      	str	r3, [r2, #0]
 8008630:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008634:	f103 0304 	add.w	r3, r3, #4
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f241 7277 	movw	r2, #6007	; 0x1777
 800863e:	4293      	cmp	r3, r2
 8008640:	dda6      	ble.n	8008590 <StartChartTask+0xe70>
            }
         }
         if(FramDataChartExistFlag == 1)
 8008642:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008646:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	2b01      	cmp	r3, #1
 800864e:	f040 81b0 	bne.w	80089b2 <StartChartTask+0x1292>
         {
            FramDataChartExistFlag = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008658:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 800865c:	7013      	strb	r3, [r2, #0]
            for(int i = 0; i < FramDateChart.Length; i++)
 800865e:	2300      	movs	r3, #0
 8008660:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008664:	6013      	str	r3, [r2, #0]
 8008666:	e198      	b.n	800899a <StartChartTask+0x127a>
            {
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8008668:	4b8b      	ldr	r3, [pc, #556]	; (8008898 <StartChartTask+0x1178>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f04f 31ff 	mov.w	r1, #4294967295
 8008670:	4618      	mov	r0, r3
 8008672:	f00d fb99 	bl	8015da8 <osMutexAcquire>
               flash_ReadPage(&Flash, i + FramDateChart.StartFlashPage, &Pv);
 8008676:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800867a:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	18d1      	adds	r1, r2, r3
 8008688:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 800868c:	3b18      	subs	r3, #24
 800868e:	461a      	mov	r2, r3
 8008690:	4883      	ldr	r0, [pc, #524]	; (80088a0 <StartChartTask+0x1180>)
 8008692:	f7fc fd0e 	bl	80050b2 <flash_ReadPage>
               osMutexRelease(SPI1MutexHandle);
 8008696:	4b80      	ldr	r3, [pc, #512]	; (8008898 <StartChartTask+0x1178>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4618      	mov	r0, r3
 800869c:	f00d fbcf 	bl	8015e3e <osMutexRelease>
               uint32_t TempCrc = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 80086a0:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80086a4:	3b18      	subs	r3, #24
 80086a6:	461a      	mov	r2, r3
 80086a8:	21fc      	movs	r1, #252	; 0xfc
 80086aa:	f04f 30ff 	mov.w	r0, #4294967295
 80086ae:	f7fc f8b1 	bl	8004814 <Crc>
 80086b2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80086b6:	f103 0318 	add.w	r3, r3, #24
 80086ba:	6018      	str	r0, [r3, #0]
               if(TempCrc == Pv.PageCRC)
 80086bc:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80086c0:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 80086c4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80086c8:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80086cc:	f102 0218 	add.w	r2, r2, #24
 80086d0:	6812      	ldr	r2, [r2, #0]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	f040 815a 	bne.w	800898c <StartChartTask+0x126c>
               {
                  for(int j = (i * 9), k = 0; k < 9; k++)
 80086d8:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	4613      	mov	r3, r2
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	4413      	add	r3, r2
 80086e4:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80086e8:	f102 0214 	add.w	r2, r2, #20
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	2300      	movs	r3, #0
 80086f0:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80086f4:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80086f8:	6013      	str	r3, [r2, #0]
 80086fa:	e13f      	b.n	800897c <StartChartTask+0x125c>
                  {
                     if(Cda.ChartType == INTERNAL_PM1)
 80086fc:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008700:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8008704:	791b      	ldrb	r3, [r3, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d121      	bne.n	800874e <StartChartTask+0x102e>
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].InternalPM1;
 800870a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800870e:	f103 0314 	add.w	r3, r3, #20
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008718:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	18d1      	adds	r1, r2, r3
 8008720:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008724:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8008728:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800872c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	4613      	mov	r3, r2
 8008734:	00db      	lsls	r3, r3, #3
 8008736:	1a9b      	subs	r3, r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4403      	add	r3, r0
 800873c:	3304      	adds	r3, #4
 800873e:	881a      	ldrh	r2, [r3, #0]
 8008740:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008744:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008748:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 800874c:	e0cb      	b.n	80088e6 <StartChartTask+0x11c6>
                     }
                     else if(Cda.ChartType == INTERNAL_PM25)
 800874e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008752:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8008756:	791b      	ldrb	r3, [r3, #4]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d121      	bne.n	80087a0 <StartChartTask+0x1080>
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].InternalPM25;
 800875c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008760:	f103 0314 	add.w	r3, r3, #20
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800876a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	18d1      	adds	r1, r2, r3
 8008772:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008776:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 800877a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800877e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	4613      	mov	r3, r2
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	1a9b      	subs	r3, r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4403      	add	r3, r0
 800878e:	3306      	adds	r3, #6
 8008790:	881a      	ldrh	r2, [r3, #0]
 8008792:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008796:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 800879a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 800879e:	e0a2      	b.n	80088e6 <StartChartTask+0x11c6>
                     }
                     else if(Cda.ChartType == INTERNAL_PM10)
 80087a0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80087a4:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80087a8:	791b      	ldrb	r3, [r3, #4]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d121      	bne.n	80087f2 <StartChartTask+0x10d2>
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].InternalPM10;
 80087ae:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80087b2:	f103 0314 	add.w	r3, r3, #20
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80087bc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	18d1      	adds	r1, r2, r3
 80087c4:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80087c8:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 80087cc:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80087d0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	4613      	mov	r3, r2
 80087d8:	00db      	lsls	r3, r3, #3
 80087da:	1a9b      	subs	r3, r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4403      	add	r3, r0
 80087e0:	3308      	adds	r3, #8
 80087e2:	881a      	ldrh	r2, [r3, #0]
 80087e4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80087e8:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 80087ec:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 80087f0:	e079      	b.n	80088e6 <StartChartTask+0x11c6>
                     }
                     else if(Cda.ChartType == EXTERNAL_PM1)
 80087f2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80087f6:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80087fa:	791b      	ldrb	r3, [r3, #4]
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	d121      	bne.n	8008844 <StartChartTask+0x1124>
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].ExternalPM1;
 8008800:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008804:	f103 0314 	add.w	r3, r3, #20
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800880e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	18d1      	adds	r1, r2, r3
 8008816:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800881a:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 800881e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008822:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	4613      	mov	r3, r2
 800882a:	00db      	lsls	r3, r3, #3
 800882c:	1a9b      	subs	r3, r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4403      	add	r3, r0
 8008832:	330a      	adds	r3, #10
 8008834:	881a      	ldrh	r2, [r3, #0]
 8008836:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800883a:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 800883e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8008842:	e050      	b.n	80088e6 <StartChartTask+0x11c6>
                     }
                     else if(Cda.ChartType == EXTERNAL_PM25)
 8008844:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008848:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800884c:	791b      	ldrb	r3, [r3, #4]
 800884e:	2b04      	cmp	r3, #4
 8008850:	d128      	bne.n	80088a4 <StartChartTask+0x1184>
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].ExternalPM25;
 8008852:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008856:	f103 0314 	add.w	r3, r3, #20
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008860:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	18d1      	adds	r1, r2, r3
 8008868:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800886c:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8008870:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008874:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	4613      	mov	r3, r2
 800887c:	00db      	lsls	r3, r3, #3
 800887e:	1a9b      	subs	r3, r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4403      	add	r3, r0
 8008884:	330c      	adds	r3, #12
 8008886:	881a      	ldrh	r2, [r3, #0]
 8008888:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800888c:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008890:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8008894:	e027      	b.n	80088e6 <StartChartTask+0x11c6>
 8008896:	bf00      	nop
 8008898:	200040ac 	.word	0x200040ac
 800889c:	20003fbc 	.word	0x20003fbc
 80088a0:	20003fac 	.word	0x20003fac
                     }
                     else
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].ExternalPM10;
 80088a4:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80088a8:	f103 0314 	add.w	r3, r3, #20
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80088b2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	18d1      	adds	r1, r2, r3
 80088ba:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80088be:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 80088c2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80088c6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	4613      	mov	r3, r2
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	1a9b      	subs	r3, r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4403      	add	r3, r0
 80088d6:	330e      	adds	r3, #14
 80088d8:	881a      	ldrh	r2, [r3, #0]
 80088da:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80088de:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 80088e2:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
                     }
                     Minute[j + k] = Pv.Record[k].Minute;
 80088e6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80088ea:	f103 0314 	add.w	r3, r3, #20
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80088f4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	18d1      	adds	r1, r2, r3
 80088fc:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008900:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8008904:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008908:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	4613      	mov	r3, r2
 8008910:	00db      	lsls	r3, r3, #3
 8008912:	1a9b      	subs	r3, r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4403      	add	r3, r0
 8008918:	3302      	adds	r3, #2
 800891a:	781a      	ldrb	r2, [r3, #0]
 800891c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008920:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8008924:	545a      	strb	r2, [r3, r1]
                     Hour[j + k]   = Pv.Record[k].Hour;
 8008926:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800892a:	f103 0314 	add.w	r3, r3, #20
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008934:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	18d1      	adds	r1, r2, r3
 800893c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008940:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8008944:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008948:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	4613      	mov	r3, r2
 8008950:	00db      	lsls	r3, r3, #3
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4403      	add	r3, r0
 8008958:	3303      	adds	r3, #3
 800895a:	781a      	ldrb	r2, [r3, #0]
 800895c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008960:	440b      	add	r3, r1
 8008962:	f803 2c20 	strb.w	r2, [r3, #-32]
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8008966:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800896a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3301      	adds	r3, #1
 8008972:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008976:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800897a:	6013      	str	r3, [r2, #0]
 800897c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008980:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b08      	cmp	r3, #8
 8008988:	f77f aeb8 	ble.w	80086fc <StartChartTask+0xfdc>
            for(int i = 0; i < FramDateChart.Length; i++)
 800898c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3301      	adds	r3, #1
 8008994:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800899e:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80089a2:	7a1b      	ldrb	r3, [r3, #8]
 80089a4:	461a      	mov	r2, r3
 80089a6:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4293      	cmp	r3, r2
 80089ae:	f6ff ae5b 	blt.w	8008668 <StartChartTask+0xf48>
                  }
               }
            }
         }
         uint16_t _Max = 0, _Min = 65000;
 80089b2:	2300      	movs	r3, #0
 80089b4:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80089b8:	f102 023a 	add.w	r2, r2, #58	; 0x3a
 80089bc:	8013      	strh	r3, [r2, #0]
 80089be:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 80089c2:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80089c6:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80089ca:	8013      	strh	r3, [r2, #0]
         uint32_t _Avg = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80089d2:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80089d6:	6013      	str	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 80089d8:	2300      	movs	r3, #0
 80089da:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80089de:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80089e2:	6013      	str	r3, [r2, #0]
 80089e4:	e021      	b.n	8008a2a <StartChartTask+0x130a>
         {
            _Avg += ChartVariable.IntegerType[i];
 80089e6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80089ea:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 80089ee:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80089f2:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80089f6:	6812      	ldr	r2, [r2, #0]
 80089f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80089fc:	461a      	mov	r2, r3
 80089fe:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008a02:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008a0e:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8008a12:	6013      	str	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8008a14:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008a18:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008a24:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8008a28:	6013      	str	r3, [r2, #0]
 8008a2a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008a2e:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8008a32:	7a1b      	ldrb	r3, [r3, #8]
 8008a34:	461a      	mov	r2, r3
 8008a36:	4613      	mov	r3, r2
 8008a38:	00db      	lsls	r3, r3, #3
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008a40:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8008a44:	6812      	ldr	r2, [r2, #0]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	dbcd      	blt.n	80089e6 <StartChartTask+0x12c6>
         }
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008a50:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	e086      	b.n	8008b66 <StartChartTask+0x1446>
         {
            if(ChartVariable.IntegerType[i] > 500)
 8008a58:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008a5c:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008a60:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008a64:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008a68:	6812      	ldr	r2, [r2, #0]
 8008a6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008a6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008a72:	d91c      	bls.n	8008aae <StartChartTask+0x138e>
            {
               ChartVariable.IntegerType[i] = _Avg / (FramDateChart.Length * 9);
 8008a74:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008a78:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8008a7c:	7a1b      	ldrb	r3, [r3, #8]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	4613      	mov	r3, r2
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	4413      	add	r3, r2
 8008a86:	461a      	mov	r2, r3
 8008a88:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008a8c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a96:	b299      	uxth	r1, r3
 8008a98:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008a9c:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008aa0:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008aa4:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008aa8:	6812      	ldr	r2, [r2, #0]
 8008aaa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            }
            if(_Max < ChartVariable.IntegerType[i])
 8008aae:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008ab2:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008ab6:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008aba:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008abe:	6812      	ldr	r2, [r2, #0]
 8008ac0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008ac4:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008ac8:	f102 023a 	add.w	r2, r2, #58	; 0x3a
 8008acc:	8812      	ldrh	r2, [r2, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d20f      	bcs.n	8008af2 <StartChartTask+0x13d2>
            {
               _Max = ChartVariable.IntegerType[i];
 8008ad2:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008ad6:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008ada:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008ade:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008ae2:	6812      	ldr	r2, [r2, #0]
 8008ae4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008ae8:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008aec:	f102 023a 	add.w	r2, r2, #58	; 0x3a
 8008af0:	8013      	strh	r3, [r2, #0]
            }
            if(_Min > ChartVariable.IntegerType[i] && ChartVariable.IntegerType[i] != 0.0)
 8008af2:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008af6:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008afa:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008afe:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008b02:	6812      	ldr	r2, [r2, #0]
 8008b04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008b08:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008b0c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8008b10:	8812      	ldrh	r2, [r2, #0]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d91c      	bls.n	8008b50 <StartChartTask+0x1430>
 8008b16:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008b1a:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008b1e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008b22:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008b26:	6812      	ldr	r2, [r2, #0]
 8008b28:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00f      	beq.n	8008b50 <StartChartTask+0x1430>
            {
               _Min = ChartVariable.IntegerType[i];
 8008b30:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008b34:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008b38:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008b3c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008b40:	6812      	ldr	r2, [r2, #0]
 8008b42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008b46:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008b4a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8008b4e:	8013      	strh	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8008b50:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008b54:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008b60:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008b64:	6013      	str	r3, [r2, #0]
 8008b66:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008b6a:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8008b6e:	7a1b      	ldrb	r3, [r3, #8]
 8008b70:	461a      	mov	r2, r3
 8008b72:	4613      	mov	r3, r2
 8008b74:	00db      	lsls	r3, r3, #3
 8008b76:	4413      	add	r3, r2
 8008b78:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008b7c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008b80:	6812      	ldr	r2, [r2, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	f6ff af68 	blt.w	8008a58 <StartChartTask+0x1338>
            }
         }
         for(int i = 0; i < 800; i++)
 8008b88:	2300      	movs	r3, #0
 8008b8a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008b8e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	e068      	b.n	8008c68 <StartChartTask+0x1548>
         {
            if(ChartVariable.IntegerType[i] == 0)
 8008b96:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008b9a:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008b9e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008ba2:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008ba6:	6812      	ldr	r2, [r2, #0]
 8008ba8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10f      	bne.n	8008bd0 <StartChartTask+0x14b0>
            {
               ChartVariable.IntegerType[i] = _Min;
 8008bb0:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008bb4:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008bb8:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008bbc:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008bc0:	6812      	ldr	r2, [r2, #0]
 8008bc2:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8008bc6:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8008bca:	8809      	ldrh	r1, [r1, #0]
 8008bcc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            }
            Y_Axis[i] = (uint16_t)map(ChartVariable.IntegerType[i], _Min, _Max, 20, 250);
 8008bd0:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008bd4:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008bd8:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008bdc:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008be0:	6812      	ldr	r2, [r2, #0]
 8008be2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008bec:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8008bf0:	8819      	ldrh	r1, [r3, #0]
 8008bf2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008bf6:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 8008bfa:	881a      	ldrh	r2, [r3, #0]
 8008bfc:	23fa      	movs	r3, #250	; 0xfa
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	2314      	movs	r3, #20
 8008c02:	f002 f98d 	bl	800af20 <map>
 8008c06:	4603      	mov	r3, r0
 8008c08:	b299      	uxth	r1, r3
 8008c0a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008c0e:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008c12:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008c16:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008c1a:	6812      	ldr	r2, [r2, #0]
 8008c1c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            Y_Axis[i] = 300 - Y_Axis[i];
 8008c20:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008c24:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008c28:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008c2c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008c30:	6812      	ldr	r2, [r2, #0]
 8008c32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008c36:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8008c3a:	b299      	uxth	r1, r3
 8008c3c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008c40:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008c44:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008c48:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008c4c:	6812      	ldr	r2, [r2, #0]
 8008c4e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         for(int i = 0; i < 800; i++)
 8008c52:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008c56:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008c62:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008c6c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008c76:	db8e      	blt.n	8008b96 <StartChartTask+0x1476>
         }
         for(int i = 0; i < 800; i++)
 8008c78:	2300      	movs	r3, #0
 8008c7a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008c7e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	e0b8      	b.n	8008df8 <StartChartTask+0x16d8>
         {
            if(Hour[i] != 0 && Minute[i] != 0)
 8008c86:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008c90:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4413      	add	r3, r2
 8008c98:	3b20      	subs	r3, #32
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 8084 	beq.w	8008daa <StartChartTask+0x168a>
 8008ca2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008ca6:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8008caa:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008cae:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d076      	beq.n	8008daa <StartChartTask+0x168a>
            {
               X_Axis[i] = map(Hour[i] * 60 + Minute[i], Hour[i] * 60, (Hour[i] + 1) * 60, 64 + (Hour[i] * 14), 64 + ((Hour[i] + 1) * 14));
 8008cbc:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008cc6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4413      	add	r3, r2
 8008cce:	3b20      	subs	r3, #32
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	011b      	lsls	r3, r3, #4
 8008cd8:	1a9b      	subs	r3, r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4619      	mov	r1, r3
 8008cde:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008ce2:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8008ce6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008cea:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	440b      	add	r3, r1
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008d02:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4413      	add	r3, r2
 8008d0a:	3b20      	subs	r3, #32
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	4613      	mov	r3, r2
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4619      	mov	r1, r3
 8008d1a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008d24:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3b20      	subs	r3, #32
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	1c5a      	adds	r2, r3, #1
 8008d32:	4613      	mov	r3, r2
 8008d34:	011b      	lsls	r3, r3, #4
 8008d36:	1a9b      	subs	r3, r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	461c      	mov	r4, r3
 8008d3c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008d40:	461a      	mov	r2, r3
 8008d42:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008d46:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	3b20      	subs	r3, #32
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	4613      	mov	r3, r2
 8008d56:	00db      	lsls	r3, r3, #3
 8008d58:	1a9b      	subs	r3, r3, r2
 8008d5a:	005b      	lsls	r3, r3, #1
 8008d5c:	3340      	adds	r3, #64	; 0x40
 8008d5e:	461d      	mov	r5, r3
 8008d60:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008d64:	461a      	mov	r2, r3
 8008d66:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008d6a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4413      	add	r3, r2
 8008d72:	3b20      	subs	r3, #32
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	1c5a      	adds	r2, r3, #1
 8008d78:	4613      	mov	r3, r2
 8008d7a:	00db      	lsls	r3, r3, #3
 8008d7c:	1a9b      	subs	r3, r3, r2
 8008d7e:	005b      	lsls	r3, r3, #1
 8008d80:	3340      	adds	r3, #64	; 0x40
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	462b      	mov	r3, r5
 8008d86:	4622      	mov	r2, r4
 8008d88:	f002 f8ca 	bl	800af20 <map>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008d94:	4619      	mov	r1, r3
 8008d96:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008d9a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	440b      	add	r3, r1
 8008da4:	f823 2cd8 	strh.w	r2, [r3, #-216]
 8008da8:	e01b      	b.n	8008de2 <StartChartTask+0x16c2>
            }
            else if(X_Axis[i] == 0)
 8008daa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008dae:	461a      	mov	r2, r3
 8008db0:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008db4:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10d      	bne.n	8008de2 <StartChartTask+0x16c2>
            {
               X_Axis[i] = 0xffff;
 8008dc6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008dd0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	005b      	lsls	r3, r3, #1
 8008dd8:	4413      	add	r3, r2
 8008dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dde:	f823 2cd8 	strh.w	r2, [r3, #-216]
         for(int i = 0; i < 800; i++)
 8008de2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008de6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3301      	adds	r3, #1
 8008dee:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008df2:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8008df6:	6013      	str	r3, [r2, #0]
 8008df8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008dfc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008e06:	f6ff af3e 	blt.w	8008c86 <StartChartTask+0x1566>
            }
         }
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8008e0a:	4bca      	ldr	r3, [pc, #808]	; (8009134 <StartChartTask+0x1a14>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8008e12:	4618      	mov	r0, r3
 8008e14:	f00c ffc8 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8008e18:	4bc7      	ldr	r3, [pc, #796]	; (8009138 <StartChartTask+0x1a18>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8008e20:	4618      	mov	r0, r3
 8008e22:	f00c ffc1 	bl	8015da8 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8008e26:	4bc5      	ldr	r3, [pc, #788]	; (800913c <StartChartTask+0x1a1c>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f00c ffba 	bl	8015da8 <osMutexAcquire>
         char Temp[10];
         uint16_t TempDifferencje = _Max - _Min;
 8008e34:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008e38:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 8008e3c:	881a      	ldrh	r2, [r3, #0]
 8008e3e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008e42:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008e4e:	f102 0212 	add.w	r2, r2, #18
 8008e52:	8013      	strh	r3, [r2, #0]
         sprintf(Temp, "%d", (_Min + TempDifferencje / 4));
 8008e54:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008e58:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008e62:	f102 0212 	add.w	r2, r2, #18
 8008e66:	8812      	ldrh	r2, [r2, #0]
 8008e68:	0892      	lsrs	r2, r2, #2
 8008e6a:	b292      	uxth	r2, r2
 8008e6c:	441a      	add	r2, r3
 8008e6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e72:	3b34      	subs	r3, #52	; 0x34
 8008e74:	49b2      	ldr	r1, [pc, #712]	; (8009140 <StartChartTask+0x1a20>)
 8008e76:	4618      	mov	r0, r3
 8008e78:	f003 fe82 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 218, Temp, BLACK, 1, E_PAPIER);
 8008e7c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008e80:	3a34      	subs	r2, #52	; 0x34
 8008e82:	2301      	movs	r3, #1
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	2301      	movs	r3, #1
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	21da      	movs	r1, #218	; 0xda
 8008e8e:	2000      	movs	r0, #0
 8008e90:	f7f8 fa10 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", (_Min + TempDifferencje / 2));
 8008e94:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008e98:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008ea2:	f102 0212 	add.w	r2, r2, #18
 8008ea6:	8812      	ldrh	r2, [r2, #0]
 8008ea8:	0852      	lsrs	r2, r2, #1
 8008eaa:	b292      	uxth	r2, r2
 8008eac:	441a      	add	r2, r3
 8008eae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008eb2:	3b34      	subs	r3, #52	; 0x34
 8008eb4:	49a2      	ldr	r1, [pc, #648]	; (8009140 <StartChartTask+0x1a20>)
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f003 fe62 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 160, Temp, BLACK, 1, E_PAPIER);
 8008ebc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008ec0:	3a34      	subs	r2, #52	; 0x34
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	9301      	str	r3, [sp, #4]
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	21a0      	movs	r1, #160	; 0xa0
 8008ece:	2000      	movs	r0, #0
 8008ed0:	f7f8 f9f0 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", (_Max - TempDifferencje / 4));
 8008ed4:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008ed8:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008ee2:	f102 0212 	add.w	r2, r2, #18
 8008ee6:	8812      	ldrh	r2, [r2, #0]
 8008ee8:	0892      	lsrs	r2, r2, #2
 8008eea:	b292      	uxth	r2, r2
 8008eec:	1a9a      	subs	r2, r3, r2
 8008eee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ef2:	3b34      	subs	r3, #52	; 0x34
 8008ef4:	4992      	ldr	r1, [pc, #584]	; (8009140 <StartChartTask+0x1a20>)
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f003 fe42 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 103, Temp, BLACK, 1, E_PAPIER);
 8008efc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008f00:	3a34      	subs	r2, #52	; 0x34
 8008f02:	2301      	movs	r3, #1
 8008f04:	9301      	str	r3, [sp, #4]
 8008f06:	2301      	movs	r3, #1
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2167      	movs	r1, #103	; 0x67
 8008f0e:	2000      	movs	r0, #0
 8008f10:	f7f8 f9d0 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", _Min);
 8008f14:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008f18:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8008f1c:	881a      	ldrh	r2, [r3, #0]
 8008f1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008f22:	3b34      	subs	r3, #52	; 0x34
 8008f24:	4986      	ldr	r1, [pc, #536]	; (8009140 <StartChartTask+0x1a20>)
 8008f26:	4618      	mov	r0, r3
 8008f28:	f003 fe2a 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 276, Temp, BLACK, 1, E_PAPIER);
 8008f2c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008f30:	3a34      	subs	r2, #52	; 0x34
 8008f32:	2301      	movs	r3, #1
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	2301      	movs	r3, #1
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008f40:	2000      	movs	r0, #0
 8008f42:	f7f8 f9b7 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", _Max);
 8008f46:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008f4a:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 8008f4e:	881a      	ldrh	r2, [r3, #0]
 8008f50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008f54:	3b34      	subs	r3, #52	; 0x34
 8008f56:	497a      	ldr	r1, [pc, #488]	; (8009140 <StartChartTask+0x1a20>)
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f003 fe11 	bl	800cb80 <sprintf_>
         GFX_DrawString(0, 45, Temp, BLACK, 1, E_PAPIER);
 8008f5e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008f62:	3a34      	subs	r2, #52	; 0x34
 8008f64:	2301      	movs	r3, #1
 8008f66:	9301      	str	r3, [sp, #4]
 8008f68:	2301      	movs	r3, #1
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	212d      	movs	r1, #45	; 0x2d
 8008f70:	2000      	movs	r0, #0
 8008f72:	f7f8 f99f 	bl	80012b4 <GFX_DrawString>
         if(X_Axis[0] != 0xffff && X_Axis[1] != 0xffff)
 8008f76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008f7a:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8008f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d024      	beq.n	8008fd0 <StartChartTask+0x18b0>
 8008f86:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008f8a:	f833 3cd6 	ldrh.w	r3, [r3, #-214]
 8008f8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d01c      	beq.n	8008fd0 <StartChartTask+0x18b0>
         {
            GFX_DrawLine(X_Axis[0], Y_Axis[0], X_Axis[1], Y_Axis[1], BLACK, E_PAPIER);
 8008f96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008f9a:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008fa4:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	4619      	mov	r1, r3
 8008fac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008fb0:	f833 3cd6 	ldrh.w	r3, [r3, #-214]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008fba:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008fbe:	885b      	ldrh	r3, [r3, #2]
 8008fc0:	461c      	mov	r4, r3
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	9301      	str	r3, [sp, #4]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	4623      	mov	r3, r4
 8008fcc:	f7f8 fa92 	bl	80014f4 <GFX_DrawLine>
         }
         for(int i = 1; i < 800; i++)
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008fd6:	f102 0220 	add.w	r2, r2, #32
 8008fda:	6013      	str	r3, [r2, #0]
 8008fdc:	e065      	b.n	80090aa <StartChartTask+0x198a>
         {
            if(X_Axis[i + 1] != 0xffff && X_Axis[i] != 0xffff)
 8008fde:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008fe2:	f103 0320 	add.w	r3, r3, #32
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8008fee:	005b      	lsls	r3, r3, #1
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8008ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d04a      	beq.n	8009094 <StartChartTask+0x1974>
 8008ffe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009002:	461a      	mov	r2, r3
 8009004:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8009008:	f103 0320 	add.w	r3, r3, #32
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	005b      	lsls	r3, r3, #1
 8009010:	4413      	add	r3, r2
 8009012:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8009016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800901a:	4293      	cmp	r3, r2
 800901c:	d03a      	beq.n	8009094 <StartChartTask+0x1974>
            {
               GFX_DrawLine(X_Axis[i], Y_Axis[i], X_Axis[i + 1], Y_Axis[i + 1], BLACK, E_PAPIER);
 800901e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009022:	461a      	mov	r2, r3
 8009024:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8009028:	f103 0320 	add.w	r3, r3, #32
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	005b      	lsls	r3, r3, #1
 8009030:	4413      	add	r3, r2
 8009032:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8009036:	4618      	mov	r0, r3
 8009038:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800903c:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8009040:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8009044:	f102 0220 	add.w	r2, r2, #32
 8009048:	6812      	ldr	r2, [r2, #0]
 800904a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800904e:	4619      	mov	r1, r3
 8009050:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8009054:	f103 0320 	add.w	r3, r3, #32
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	3301      	adds	r3, #1
 800905c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8009060:	005b      	lsls	r3, r3, #1
 8009062:	4413      	add	r3, r2
 8009064:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8009068:	461c      	mov	r4, r3
 800906a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800906e:	f103 0320 	add.w	r3, r3, #32
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	1c5a      	adds	r2, r3, #1
 8009076:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800907a:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 800907e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009082:	461a      	mov	r2, r3
 8009084:	2301      	movs	r3, #1
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	2300      	movs	r3, #0
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	4613      	mov	r3, r2
 800908e:	4622      	mov	r2, r4
 8009090:	f7f8 fa30 	bl	80014f4 <GFX_DrawLine>
         for(int i = 1; i < 800; i++)
 8009094:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8009098:	f103 0320 	add.w	r3, r3, #32
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3301      	adds	r3, #1
 80090a0:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80090a4:	f102 0220 	add.w	r2, r2, #32
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80090ae:	f103 0320 	add.w	r3, r3, #32
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80090b8:	db91      	blt.n	8008fde <StartChartTask+0x18be>
            }
         }
         e_papier_display();
 80090ba:	f7fb fdc9 	bl	8004c50 <e_papier_display>
         osMutexAcquire(EncoderMutexHandle, osWaitForever);
 80090be:	4b21      	ldr	r3, [pc, #132]	; (8009144 <StartChartTask+0x1a24>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f04f 31ff 	mov.w	r1, #4294967295
 80090c6:	4618      	mov	r0, r3
 80090c8:	f00c fe6e 	bl	8015da8 <osMutexAcquire>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 80090cc:	e002      	b.n	80090d4 <StartChartTask+0x19b4>
         {
            osDelay(100);
 80090ce:	2064      	movs	r0, #100	; 0x64
 80090d0:	f00c fc1c 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 80090d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80090d8:	481b      	ldr	r0, [pc, #108]	; (8009148 <StartChartTask+0x1a28>)
 80090da:	f005 fec5 	bl	800ee68 <HAL_GPIO_ReadPin>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d0f4      	beq.n	80090ce <StartChartTask+0x19ae>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80090e4:	e002      	b.n	80090ec <StartChartTask+0x19cc>
         {
            osDelay(100);
 80090e6:	2064      	movs	r0, #100	; 0x64
 80090e8:	f00c fc10 	bl	801590c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80090ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80090f0:	4815      	ldr	r0, [pc, #84]	; (8009148 <StartChartTask+0x1a28>)
 80090f2:	f005 feb9 	bl	800ee68 <HAL_GPIO_ReadPin>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d0f4      	beq.n	80090e6 <StartChartTask+0x19c6>
         }
         osMutexRelease(EncoderMutexHandle);
 80090fc:	4b11      	ldr	r3, [pc, #68]	; (8009144 <StartChartTask+0x1a24>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4618      	mov	r0, r3
 8009102:	f00c fe9c 	bl	8015e3e <osMutexRelease>
         osMutexRelease(SPI1MutexHandle);
 8009106:	4b0d      	ldr	r3, [pc, #52]	; (800913c <StartChartTask+0x1a1c>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4618      	mov	r0, r3
 800910c:	f00c fe97 	bl	8015e3e <osMutexRelease>
         osMutexRelease(E_PAPIERMutexHandle);
 8009110:	4b09      	ldr	r3, [pc, #36]	; (8009138 <StartChartTask+0x1a18>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4618      	mov	r0, r3
 8009116:	f00c fe92 	bl	8015e3e <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 800911a:	4b06      	ldr	r3, [pc, #24]	; (8009134 <StartChartTask+0x1a14>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4618      	mov	r0, r3
 8009120:	f00c fe8d 	bl	8015e3e <osMutexRelease>
      }
      for(int i = 0; i < 800; i++)
 8009124:	2300      	movs	r3, #0
 8009126:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800912a:	f102 021c 	add.w	r2, r2, #28
 800912e:	6013      	str	r3, [r2, #0]
 8009130:	e062      	b.n	80091f8 <StartChartTask+0x1ad8>
 8009132:	bf00      	nop
 8009134:	200040a4 	.word	0x200040a4
 8009138:	200040b0 	.word	0x200040b0
 800913c:	200040ac 	.word	0x200040ac
 8009140:	08020508 	.word	0x08020508
 8009144:	200040c0 	.word	0x200040c0
 8009148:	48000400 	.word	0x48000400
      {
         ChartVariable.IntegerType[i]       = 0;
 800914c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8009150:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8009154:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8009158:	f102 021c 	add.w	r2, r2, #28
 800915c:	6812      	ldr	r2, [r2, #0]
 800915e:	2100      	movs	r1, #0
 8009160:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         ChartVariable.FloatingPointType[i] = 0;
 8009164:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8009168:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 800916c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8009170:	f103 031c 	add.w	r3, r3, #28
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	f04f 0200 	mov.w	r2, #0
 800917e:	601a      	str	r2, [r3, #0]
         Y_Axis[i]                          = 0;
 8009180:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8009184:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8009188:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800918c:	f102 021c 	add.w	r2, r2, #28
 8009190:	6812      	ldr	r2, [r2, #0]
 8009192:	2100      	movs	r1, #0
 8009194:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         X_Axis[i]                          = 0;
 8009198:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800919c:	461a      	mov	r2, r3
 800919e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80091a2:	f103 031c 	add.w	r3, r3, #28
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	4413      	add	r3, r2
 80091ac:	2200      	movs	r2, #0
 80091ae:	f823 2cd8 	strh.w	r2, [r3, #-216]
         Hour[i]                            = 0;
 80091b2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80091b6:	461a      	mov	r2, r3
 80091b8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80091bc:	f103 031c 	add.w	r3, r3, #28
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4413      	add	r3, r2
 80091c4:	3b20      	subs	r3, #32
 80091c6:	2200      	movs	r2, #0
 80091c8:	701a      	strb	r2, [r3, #0]
         Minute[i]                          = 0;
 80091ca:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80091ce:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 80091d2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80091d6:	f103 031c 	add.w	r3, r3, #28
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4413      	add	r3, r2
 80091de:	2200      	movs	r2, #0
 80091e0:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i < 800; i++)
 80091e2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80091e6:	f103 031c 	add.w	r3, r3, #28
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	3301      	adds	r3, #1
 80091ee:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80091f2:	f102 021c 	add.w	r2, r2, #28
 80091f6:	6013      	str	r3, [r2, #0]
 80091f8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80091fc:	f103 031c 	add.w	r3, r3, #28
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009206:	dba1      	blt.n	800914c <StartChartTask+0x1a2c>
      }
      FramDataChartExistFlag = 0;
 8009208:	2300      	movs	r3, #0
 800920a:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800920e:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8009212:	7013      	strb	r3, [r2, #0]
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8009214:	4b16      	ldr	r3, [pc, #88]	; (8009270 <StartChartTask+0x1b50>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f04f 31ff 	mov.w	r1, #4294967295
 800921c:	4618      	mov	r0, r3
 800921e:	f00c fdc3 	bl	8015da8 <osMutexAcquire>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8009222:	4b14      	ldr	r3, [pc, #80]	; (8009274 <StartChartTask+0x1b54>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f04f 31ff 	mov.w	r1, #4294967295
 800922a:	4618      	mov	r0, r3
 800922c:	f00c fdbc 	bl	8015da8 <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8009230:	4b11      	ldr	r3, [pc, #68]	; (8009278 <StartChartTask+0x1b58>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f04f 31ff 	mov.w	r1, #4294967295
 8009238:	4618      	mov	r0, r3
 800923a:	f00c fdb5 	bl	8015da8 <osMutexAcquire>
      e_papier_clear();
 800923e:	f7fb fd79 	bl	8004d34 <e_papier_clear>
      e_papier_display();
 8009242:	f7fb fd05 	bl	8004c50 <e_papier_display>
      osMutexRelease(SPI1MutexHandle);
 8009246:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <StartChartTask+0x1b58>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4618      	mov	r0, r3
 800924c:	f00c fdf7 	bl	8015e3e <osMutexRelease>
      osMutexRelease(E_PAPIERMutexHandle);
 8009250:	4b08      	ldr	r3, [pc, #32]	; (8009274 <StartChartTask+0x1b54>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4618      	mov	r0, r3
 8009256:	f00c fdf2 	bl	8015e3e <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 800925a:	4b05      	ldr	r3, [pc, #20]	; (8009270 <StartChartTask+0x1b50>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4618      	mov	r0, r3
 8009260:	f00c fded 	bl	8015e3e <osMutexRelease>
      osDelay(1);
 8009264:	2001      	movs	r0, #1
 8009266:	f00c fb51 	bl	801590c <osDelay>
      osMessageQueueGet(ChartQueueHandle, &Cda, 0, osWaitForever);
 800926a:	f7fe bab9 	b.w	80077e0 <StartChartTask+0xc0>
 800926e:	bf00      	nop
 8009270:	200040a4 	.word	0x200040a4
 8009274:	200040b0 	.word	0x200040b0
 8009278:	200040ac 	.word	0x200040ac

0800927c <StartRfpMessageTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfpMessageTask */
void StartRfpMessageTask(void *argument)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartRfpMessageTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8009284:	4b20      	ldr	r3, [pc, #128]	; (8009308 <StartRfpMessageTask+0x8c>)
 8009286:	6818      	ldr	r0, [r3, #0]
 8009288:	f04f 33ff 	mov.w	r3, #4294967295
 800928c:	2202      	movs	r2, #2
 800928e:	2102      	movs	r1, #2
 8009290:	f00c fc9e 	bl	8015bd0 <osEventFlagsWait>
   RfpMessage_TypeDef RfpMessage = { 0 };
 8009294:	2300      	movs	r3, #0
 8009296:	60fb      	str	r3, [r7, #12]
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(RfpMessageQueueHandle, &RfpMessage, 0, osWaitForever);
 8009298:	4b1c      	ldr	r3, [pc, #112]	; (800930c <StartRfpMessageTask+0x90>)
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	f107 010c 	add.w	r1, r7, #12
 80092a0:	f04f 33ff 	mov.w	r3, #4294967295
 80092a4:	2200      	movs	r2, #0
 80092a6:	f00c fedb 	bl	8016060 <osMessageQueueGet>
      while(Rfp.State != RFP_STATE_IDLE)
 80092aa:	e002      	b.n	80092b2 <StartRfpMessageTask+0x36>
      {
         osDelay(100);
 80092ac:	2064      	movs	r0, #100	; 0x64
 80092ae:	f00c fb2d 	bl	801590c <osDelay>
      while(Rfp.State != RFP_STATE_IDLE)
 80092b2:	4b17      	ldr	r3, [pc, #92]	; (8009310 <StartRfpMessageTask+0x94>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d1f8      	bne.n	80092ac <StartRfpMessageTask+0x30>
      }
      if(RfpMessage.AdditionalData == 0)
 80092ba:	89fb      	ldrh	r3, [r7, #14]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d108      	bne.n	80092d2 <StartRfpMessageTask+0x56>
      {
         RFP_SendData(RFP_ODWS, RfpMessage.MessageType, &RfpMessage.Data, 1);
 80092c0:	7b39      	ldrb	r1, [r7, #12]
 80092c2:	f107 030c 	add.w	r3, r7, #12
 80092c6:	1c5a      	adds	r2, r3, #1
 80092c8:	2301      	movs	r3, #1
 80092ca:	2002      	movs	r0, #2
 80092cc:	f003 fd2e 	bl	800cd2c <RFP_SendData>
 80092d0:	e011      	b.n	80092f6 <StartRfpMessageTask+0x7a>
      }
      else
      {
         uint8_t Temp[3];
         Temp[0] = RfpMessage.Data;
 80092d2:	7b7b      	ldrb	r3, [r7, #13]
 80092d4:	723b      	strb	r3, [r7, #8]
         Temp[1] = ((RfpMessage.AdditionalData & 0xff) >> 8);
 80092d6:	2300      	movs	r3, #0
 80092d8:	727b      	strb	r3, [r7, #9]
         Temp[2] = (RfpMessage.AdditionalData & 0xff);
 80092da:	89fb      	ldrh	r3, [r7, #14]
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	72bb      	strb	r3, [r7, #10]
         RFP_SendData(RFP_ODWS, RfpMessage.MessageType, Temp, 3);
 80092e0:	7b39      	ldrb	r1, [r7, #12]
 80092e2:	f107 0208 	add.w	r2, r7, #8
 80092e6:	2303      	movs	r3, #3
 80092e8:	2002      	movs	r0, #2
 80092ea:	f003 fd1f 	bl	800cd2c <RFP_SendData>
      }
      while(Rfp.State != RFP_STATE_IDLE)
 80092ee:	e002      	b.n	80092f6 <StartRfpMessageTask+0x7a>
      {
         osDelay(100);
 80092f0:	2064      	movs	r0, #100	; 0x64
 80092f2:	f00c fb0b 	bl	801590c <osDelay>
      while(Rfp.State != RFP_STATE_IDLE)
 80092f6:	4b06      	ldr	r3, [pc, #24]	; (8009310 <StartRfpMessageTask+0x94>)
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d1f8      	bne.n	80092f0 <StartRfpMessageTask+0x74>
      }
      osDelay(1);
 80092fe:	2001      	movs	r0, #1
 8009300:	f00c fb04 	bl	801590c <osDelay>
      osMessageQueueGet(RfpMessageQueueHandle, &RfpMessage, 0, osWaitForever);
 8009304:	e7c8      	b.n	8009298 <StartRfpMessageTask+0x1c>
 8009306:	bf00      	nop
 8009308:	200040c4 	.word	0x200040c4
 800930c:	20004088 	.word	0x20004088
 8009310:	20003f60 	.word	0x20003f60

08009314 <StartSunriseAndSunsetTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSunriseAndSunsetTask */
void StartSunriseAndSunsetTask(void *argument)
{
 8009314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009318:	b08e      	sub	sp, #56	; 0x38
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartSunriseAndSunsetTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 800931e:	4b3e      	ldr	r3, [pc, #248]	; (8009418 <StartSunriseAndSunsetTask+0x104>)
 8009320:	6818      	ldr	r0, [r3, #0]
 8009322:	f04f 33ff 	mov.w	r3, #4294967295
 8009326:	2202      	movs	r2, #2
 8009328:	2102      	movs	r1, #2
 800932a:	f00c fc51 	bl	8015bd0 <osEventFlagsWait>
   RTC_TimeTypeDef RtcTime = { 0 };
 800932e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009332:	2200      	movs	r2, #0
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	605a      	str	r2, [r3, #4]
 8009338:	609a      	str	r2, [r3, #8]
 800933a:	60da      	str	r2, [r3, #12]
 800933c:	611a      	str	r2, [r3, #16]
   RTC_DateTypeDef RtcDate = { 0 };
 800933e:	2300      	movs	r3, #0
 8009340:	623b      	str	r3, [r7, #32]
   Sunrise_TypeDef Sunrise = { 0 };
 8009342:	f107 0308 	add.w	r3, r7, #8
 8009346:	2200      	movs	r2, #0
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	605a      	str	r2, [r3, #4]
 800934c:	609a      	str	r2, [r3, #8]
 800934e:	60da      	str	r2, [r3, #12]
 8009350:	611a      	str	r2, [r3, #16]
 8009352:	615a      	str	r2, [r3, #20]
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_FLAG, osFlagsWaitAny, osWaitForever);
 8009354:	4b30      	ldr	r3, [pc, #192]	; (8009418 <StartSunriseAndSunsetTask+0x104>)
 8009356:	6818      	ldr	r0, [r3, #0]
 8009358:	f04f 33ff 	mov.w	r3, #4294967295
 800935c:	2200      	movs	r2, #0
 800935e:	2180      	movs	r1, #128	; 0x80
 8009360:	f00c fc36 	bl	8015bd0 <osEventFlagsWait>
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 8009364:	4b2d      	ldr	r3, [pc, #180]	; (800941c <StartSunriseAndSunsetTask+0x108>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f04f 31ff 	mov.w	r1, #4294967295
 800936c:	4618      	mov	r0, r3
 800936e:	f00c fd1b 	bl	8015da8 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8009372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009376:	2200      	movs	r2, #0
 8009378:	4619      	mov	r1, r3
 800937a:	4829      	ldr	r0, [pc, #164]	; (8009420 <StartSunriseAndSunsetTask+0x10c>)
 800937c:	f007 fce2 	bl	8010d44 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8009380:	f107 0320 	add.w	r3, r7, #32
 8009384:	2200      	movs	r2, #0
 8009386:	4619      	mov	r1, r3
 8009388:	4825      	ldr	r0, [pc, #148]	; (8009420 <StartSunriseAndSunsetTask+0x10c>)
 800938a:	f007 fdc5 	bl	8010f18 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 800938e:	4b23      	ldr	r3, [pc, #140]	; (800941c <StartSunriseAndSunsetTask+0x108>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4618      	mov	r0, r3
 8009394:	f00c fd53 	bl	8015e3e <osMutexRelease>
      Wschod(RtcDate.Year + 2000, RtcDate.Month, RtcDate.Date, &Sunrise.Sunrise, &Sunrise.Sunup, &Sunrise.Sunset);
 8009398:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800939c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7f7 f8d7 	bl	8000554 <__aeabi_i2d>
 80093a6:	4604      	mov	r4, r0
 80093a8:	460d      	mov	r5, r1
 80093aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7f7 f8c0 	bl	8000534 <__aeabi_ui2d>
 80093b4:	4680      	mov	r8, r0
 80093b6:	4689      	mov	r9, r1
 80093b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80093bc:	4618      	mov	r0, r3
 80093be:	f7f7 f8b9 	bl	8000534 <__aeabi_ui2d>
 80093c2:	4682      	mov	sl, r0
 80093c4:	468b      	mov	fp, r1
 80093c6:	f107 0308 	add.w	r3, r7, #8
 80093ca:	f103 0208 	add.w	r2, r3, #8
 80093ce:	f107 0308 	add.w	r3, r7, #8
 80093d2:	f103 0110 	add.w	r1, r3, #16
 80093d6:	f107 0308 	add.w	r3, r7, #8
 80093da:	4618      	mov	r0, r3
 80093dc:	ec4b ab12 	vmov	d2, sl, fp
 80093e0:	ec49 8b11 	vmov	d1, r8, r9
 80093e4:	ec45 4b10 	vmov	d0, r4, r5
 80093e8:	f001 fa42 	bl	800a870 <Wschod>
      osMessageQueuePut(SunriseQueueHandle, &Sunrise, 0, osWaitForever);
 80093ec:	4b0d      	ldr	r3, [pc, #52]	; (8009424 <StartSunriseAndSunsetTask+0x110>)
 80093ee:	6818      	ldr	r0, [r3, #0]
 80093f0:	f107 0108 	add.w	r1, r7, #8
 80093f4:	f04f 33ff 	mov.w	r3, #4294967295
 80093f8:	2200      	movs	r2, #0
 80093fa:	f00c fdd1 	bl	8015fa0 <osMessageQueuePut>
      osMessageQueuePut(WS2812QueueHandle, &Sunrise, 0, osWaitForever);
 80093fe:	4b0a      	ldr	r3, [pc, #40]	; (8009428 <StartSunriseAndSunsetTask+0x114>)
 8009400:	6818      	ldr	r0, [r3, #0]
 8009402:	f107 0108 	add.w	r1, r7, #8
 8009406:	f04f 33ff 	mov.w	r3, #4294967295
 800940a:	2200      	movs	r2, #0
 800940c:	f00c fdc8 	bl	8015fa0 <osMessageQueuePut>
      osDelay(1);
 8009410:	2001      	movs	r0, #1
 8009412:	f00c fa7b 	bl	801590c <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_FLAG, osFlagsWaitAny, osWaitForever);
 8009416:	e79d      	b.n	8009354 <StartSunriseAndSunsetTask+0x40>
 8009418:	200040c4 	.word	0x200040c4
 800941c:	200040bc 	.word	0x200040bc
 8009420:	200041d4 	.word	0x200041d4
 8009424:	20004090 	.word	0x20004090
 8009428:	20004094 	.word	0x20004094
 800942c:	00000000 	.word	0x00000000

08009430 <StartWS2812Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWS2812Task */
void StartWS2812Task(void *argument)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b0a0      	sub	sp, #128	; 0x80
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartWS2812Task */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8009438:	4b6b      	ldr	r3, [pc, #428]	; (80095e8 <StartWS2812Task+0x1b8>)
 800943a:	6818      	ldr	r0, [r3, #0]
 800943c:	f04f 33ff 	mov.w	r3, #4294967295
 8009440:	2202      	movs	r2, #2
 8009442:	2102      	movs	r1, #2
 8009444:	f00c fbc4 	bl	8015bd0 <osEventFlagsWait>
   Sunrise_TypeDef Sunrise = { 0 };
 8009448:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800944c:	2200      	movs	r2, #0
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	605a      	str	r2, [r3, #4]
 8009452:	609a      	str	r2, [r3, #8]
 8009454:	60da      	str	r2, [r3, #12]
 8009456:	611a      	str	r2, [r3, #16]
 8009458:	615a      	str	r2, [r3, #20]
   MV_TypeDef Mv           = { 0 };
 800945a:	f107 0320 	add.w	r3, r7, #32
 800945e:	2230      	movs	r2, #48	; 0x30
 8009460:	2100      	movs	r1, #0
 8009462:	4618      	mov	r0, r3
 8009464:	f010 fa8c 	bl	8019980 <memset>
   RTC_TimeTypeDef RtcTime = { 0 };
 8009468:	f107 030c 	add.w	r3, r7, #12
 800946c:	2200      	movs	r2, #0
 800946e:	601a      	str	r2, [r3, #0]
 8009470:	605a      	str	r2, [r3, #4]
 8009472:	609a      	str	r2, [r3, #8]
 8009474:	60da      	str	r2, [r3, #12]
 8009476:	611a      	str	r2, [r3, #16]
   RTC_DateTypeDef RtcDate = { 0 };
 8009478:	2300      	movs	r3, #0
 800947a:	60bb      	str	r3, [r7, #8]
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(WS2812bMeasurmentQueueHandle, &Mv, 0, 0);
 800947c:	4b5b      	ldr	r3, [pc, #364]	; (80095ec <StartWS2812Task+0x1bc>)
 800947e:	6818      	ldr	r0, [r3, #0]
 8009480:	f107 0120 	add.w	r1, r7, #32
 8009484:	2300      	movs	r3, #0
 8009486:	2200      	movs	r2, #0
 8009488:	f00c fdea 	bl	8016060 <osMessageQueueGet>
      osMessageQueueGet(WS2812QueueHandle, &Sunrise, 0, 0);
 800948c:	4b58      	ldr	r3, [pc, #352]	; (80095f0 <StartWS2812Task+0x1c0>)
 800948e:	6818      	ldr	r0, [r3, #0]
 8009490:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009494:	2300      	movs	r3, #0
 8009496:	2200      	movs	r2, #0
 8009498:	f00c fde2 	bl	8016060 <osMessageQueueGet>
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 800949c:	4b55      	ldr	r3, [pc, #340]	; (80095f4 <StartWS2812Task+0x1c4>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f04f 31ff 	mov.w	r1, #4294967295
 80094a4:	4618      	mov	r0, r3
 80094a6:	f00c fc7f 	bl	8015da8 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80094aa:	f107 030c 	add.w	r3, r7, #12
 80094ae:	2200      	movs	r2, #0
 80094b0:	4619      	mov	r1, r3
 80094b2:	4851      	ldr	r0, [pc, #324]	; (80095f8 <StartWS2812Task+0x1c8>)
 80094b4:	f007 fc46 	bl	8010d44 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80094b8:	f107 0308 	add.w	r3, r7, #8
 80094bc:	2200      	movs	r2, #0
 80094be:	4619      	mov	r1, r3
 80094c0:	484d      	ldr	r0, [pc, #308]	; (80095f8 <StartWS2812Task+0x1c8>)
 80094c2:	f007 fd29 	bl	8010f18 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 80094c6:	4b4b      	ldr	r3, [pc, #300]	; (80095f4 <StartWS2812Task+0x1c4>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f00c fcb7 	bl	8015e3e <osMutexRelease>
      uint32_t TempTimeSunrise = (Sunrise.Sunrise + 1.0) * 3600;
 80094d0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80094d4:	f04f 0200 	mov.w	r2, #0
 80094d8:	4b48      	ldr	r3, [pc, #288]	; (80095fc <StartWS2812Task+0x1cc>)
 80094da:	f7f6 feef 	bl	80002bc <__adddf3>
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	4610      	mov	r0, r2
 80094e4:	4619      	mov	r1, r3
 80094e6:	a33e      	add	r3, pc, #248	; (adr r3, 80095e0 <StartWS2812Task+0x1b0>)
 80094e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ec:	f7f7 f89c 	bl	8000628 <__aeabi_dmul>
 80094f0:	4602      	mov	r2, r0
 80094f2:	460b      	mov	r3, r1
 80094f4:	4610      	mov	r0, r2
 80094f6:	4619      	mov	r1, r3
 80094f8:	f7f7 fb6e 	bl	8000bd8 <__aeabi_d2uiz>
 80094fc:	4603      	mov	r3, r0
 80094fe:	67bb      	str	r3, [r7, #120]	; 0x78
      uint32_t TempTimeSunset  = (Sunrise.Sunset + 1.0) * 3600;
 8009500:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009504:	f04f 0200 	mov.w	r2, #0
 8009508:	4b3c      	ldr	r3, [pc, #240]	; (80095fc <StartWS2812Task+0x1cc>)
 800950a:	f7f6 fed7 	bl	80002bc <__adddf3>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4610      	mov	r0, r2
 8009514:	4619      	mov	r1, r3
 8009516:	a332      	add	r3, pc, #200	; (adr r3, 80095e0 <StartWS2812Task+0x1b0>)
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	f7f7 f884 	bl	8000628 <__aeabi_dmul>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	4610      	mov	r0, r2
 8009526:	4619      	mov	r1, r3
 8009528:	f7f7 fb56 	bl	8000bd8 <__aeabi_d2uiz>
 800952c:	4603      	mov	r3, r0
 800952e:	677b      	str	r3, [r7, #116]	; 0x74
      uint32_t ActualTime      = RtcTime.Hours * 3600 + RtcTime.Minutes * 60 + RtcTime.Seconds;
 8009530:	7b3b      	ldrb	r3, [r7, #12]
 8009532:	461a      	mov	r2, r3
 8009534:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009538:	fb03 f202 	mul.w	r2, r3, r2
 800953c:	7b7b      	ldrb	r3, [r7, #13]
 800953e:	4619      	mov	r1, r3
 8009540:	460b      	mov	r3, r1
 8009542:	011b      	lsls	r3, r3, #4
 8009544:	1a5b      	subs	r3, r3, r1
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	7bba      	ldrb	r2, [r7, #14]
 800954c:	4413      	add	r3, r2
 800954e:	673b      	str	r3, [r7, #112]	; 0x70
      uint8_t r = 0, g = 0, b = 0;
 8009550:	2300      	movs	r3, #0
 8009552:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009556:	2300      	movs	r3, #0
 8009558:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800955c:	2300      	movs	r3, #0
 800955e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      if(ActualTime >= TempTimeSunrise && ActualTime <= TempTimeSunset)
 8009562:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009566:	429a      	cmp	r2, r3
 8009568:	d331      	bcc.n	80095ce <StartWS2812Task+0x19e>
 800956a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800956c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800956e:	429a      	cmp	r2, r3
 8009570:	d82d      	bhi.n	80095ce <StartWS2812Task+0x19e>
      {
         g = 10;
 8009572:	230a      	movs	r3, #10
 8009574:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
         if(Mv.ExtPM10 > PM10_VERY_GOOD_TRESHOLD || Mv.ExtPM25 > PM25_VERY_GOOD_TRESHOLD)
 8009578:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800957a:	2b14      	cmp	r3, #20
 800957c:	d802      	bhi.n	8009584 <StartWS2812Task+0x154>
 800957e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009580:	2b0d      	cmp	r3, #13
 8009582:	d902      	bls.n	800958a <StartWS2812Task+0x15a>
         {
            r = 10;
 8009584:	230a      	movs	r3, #10
 8009586:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
         }
         if(Mv.ExtPM10 > PM10_SUFFICIENT_TRESHOLD || Mv.ExtPM25 > PM25_SUFFICIENT_TRESHOLD)
 800958a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800958c:	2b6e      	cmp	r3, #110	; 0x6e
 800958e:	d802      	bhi.n	8009596 <StartWS2812Task+0x166>
 8009590:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009592:	2b37      	cmp	r3, #55	; 0x37
 8009594:	d905      	bls.n	80095a2 <StartWS2812Task+0x172>
         {
            r = 10;
 8009596:	230a      	movs	r3, #10
 8009598:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            g = 5;
 800959c:	2305      	movs	r3, #5
 800959e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
         }
         if(Mv.ExtPM10 > PM10_VERY_BAD_TRESHOLD || Mv.ExtPM25 > PM25_VERY_BAD_TRESHOLD)
 80095a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80095a4:	2b96      	cmp	r3, #150	; 0x96
 80095a6:	d802      	bhi.n	80095ae <StartWS2812Task+0x17e>
 80095a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80095aa:	2b6e      	cmp	r3, #110	; 0x6e
 80095ac:	d905      	bls.n	80095ba <StartWS2812Task+0x18a>
         {
            r = 10;
 80095ae:	230a      	movs	r3, #10
 80095b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            g = 0;
 80095b4:	2300      	movs	r3, #0
 80095b6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
         }
         WS2812_SetPixel(r, g, b);
 80095ba:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80095be:	f897 107e 	ldrb.w	r1, [r7, #126]	; 0x7e
 80095c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fa faf4 	bl	8003bb4 <WS2812_SetPixel>
 80095cc:	e004      	b.n	80095d8 <StartWS2812Task+0x1a8>
      }
      else
      {
         WS2812_SetPixel(0, 0, 0);
 80095ce:	2200      	movs	r2, #0
 80095d0:	2100      	movs	r1, #0
 80095d2:	2000      	movs	r0, #0
 80095d4:	f7fa faee 	bl	8003bb4 <WS2812_SetPixel>
      }
      osDelay(100);
 80095d8:	2064      	movs	r0, #100	; 0x64
 80095da:	f00c f997 	bl	801590c <osDelay>
   {
 80095de:	e74d      	b.n	800947c <StartWS2812Task+0x4c>
 80095e0:	00000000 	.word	0x00000000
 80095e4:	40ac2000 	.word	0x40ac2000
 80095e8:	200040c4 	.word	0x200040c4
 80095ec:	20004098 	.word	0x20004098
 80095f0:	20004094 	.word	0x20004094
 80095f4:	200040bc 	.word	0x200040bc
 80095f8:	200041d4 	.word	0x200041d4
 80095fc:	3ff00000 	.word	0x3ff00000

08009600 <MenuTimerCallback>:
   /* USER CODE END StartWS2812Task */
}

/* MenuTimerCallback function */
void MenuTimerCallback(void *argument)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN MenuTimerCallback */

   /* USER CODE END MenuTimerCallback */
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <Memory_ClearBuffer>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void Memory_ClearBuffer(PageVariable_TypeDef *Pv)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
   for(int i = 0; i < 9; i++)
 800961c:	2300      	movs	r3, #0
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	e08f      	b.n	8009742 <Memory_ClearBuffer+0x12e>
   {
      Pv->Record[i].ExternalHumidity    = 0;
 8009622:	6879      	ldr	r1, [r7, #4]
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	4613      	mov	r3, r2
 8009628:	00db      	lsls	r3, r3, #3
 800962a:	1a9b      	subs	r3, r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	440b      	add	r3, r1
 8009630:	3318      	adds	r3, #24
 8009632:	f04f 0200 	mov.w	r2, #0
 8009636:	601a      	str	r2, [r3, #0]
      Pv->Record[i].ExternalPM1         = 0;
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	4613      	mov	r3, r2
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	1a9b      	subs	r3, r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	440b      	add	r3, r1
 8009646:	330a      	adds	r3, #10
 8009648:	2200      	movs	r2, #0
 800964a:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].ExternalPM10        = 0;
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	4613      	mov	r3, r2
 8009652:	00db      	lsls	r3, r3, #3
 8009654:	1a9b      	subs	r3, r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	440b      	add	r3, r1
 800965a:	330e      	adds	r3, #14
 800965c:	2200      	movs	r2, #0
 800965e:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].ExternalPM25        = 0;
 8009660:	6879      	ldr	r1, [r7, #4]
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	4613      	mov	r3, r2
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	1a9b      	subs	r3, r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	440b      	add	r3, r1
 800966e:	330c      	adds	r3, #12
 8009670:	2200      	movs	r2, #0
 8009672:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].ExternalTemperature = 0;
 8009674:	6879      	ldr	r1, [r7, #4]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	4613      	mov	r3, r2
 800967a:	00db      	lsls	r3, r3, #3
 800967c:	1a9b      	subs	r3, r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	440b      	add	r3, r1
 8009682:	3314      	adds	r3, #20
 8009684:	f04f 0200 	mov.w	r2, #0
 8009688:	601a      	str	r2, [r3, #0]
      Pv->Record[i].Hour                = 0;
 800968a:	6879      	ldr	r1, [r7, #4]
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	4613      	mov	r3, r2
 8009690:	00db      	lsls	r3, r3, #3
 8009692:	1a9b      	subs	r3, r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	440b      	add	r3, r1
 8009698:	3303      	adds	r3, #3
 800969a:	2200      	movs	r2, #0
 800969c:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].InternalPM1         = 0;
 800969e:	6879      	ldr	r1, [r7, #4]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	4613      	mov	r3, r2
 80096a4:	00db      	lsls	r3, r3, #3
 80096a6:	1a9b      	subs	r3, r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	440b      	add	r3, r1
 80096ac:	3304      	adds	r3, #4
 80096ae:	2200      	movs	r2, #0
 80096b0:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].InternalPM10        = 0;
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	4613      	mov	r3, r2
 80096b8:	00db      	lsls	r3, r3, #3
 80096ba:	1a9b      	subs	r3, r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	440b      	add	r3, r1
 80096c0:	3308      	adds	r3, #8
 80096c2:	2200      	movs	r2, #0
 80096c4:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].InternalPM25        = 0;
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	4613      	mov	r3, r2
 80096cc:	00db      	lsls	r3, r3, #3
 80096ce:	1a9b      	subs	r3, r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	440b      	add	r3, r1
 80096d4:	3306      	adds	r3, #6
 80096d6:	2200      	movs	r2, #0
 80096d8:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].Minute              = 0;
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	4613      	mov	r3, r2
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	1a9b      	subs	r3, r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	440b      	add	r3, r1
 80096e8:	3302      	adds	r3, #2
 80096ea:	2200      	movs	r2, #0
 80096ec:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].Pressure            = 0;
 80096ee:	6879      	ldr	r1, [r7, #4]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	4613      	mov	r3, r2
 80096f4:	00db      	lsls	r3, r3, #3
 80096f6:	1a9b      	subs	r3, r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	440b      	add	r3, r1
 80096fc:	3310      	adds	r3, #16
 80096fe:	f04f 0200 	mov.w	r2, #0
 8009702:	601a      	str	r2, [r3, #0]
      Pv->Record[i].Reserved            = 0;
 8009704:	6879      	ldr	r1, [r7, #4]
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	4613      	mov	r3, r2
 800970a:	00db      	lsls	r3, r3, #3
 800970c:	1a9b      	subs	r3, r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	440b      	add	r3, r1
 8009712:	2200      	movs	r2, #0
 8009714:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].Second              = 0;
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	4613      	mov	r3, r2
 800971c:	00db      	lsls	r3, r3, #3
 800971e:	1a9b      	subs	r3, r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	440b      	add	r3, r1
 8009724:	3301      	adds	r3, #1
 8009726:	2200      	movs	r2, #0
 8009728:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].Reserved            = 0;
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	4613      	mov	r3, r2
 8009730:	00db      	lsls	r3, r3, #3
 8009732:	1a9b      	subs	r3, r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	440b      	add	r3, r1
 8009738:	2200      	movs	r2, #0
 800973a:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < 9; i++)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	3301      	adds	r3, #1
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2b08      	cmp	r3, #8
 8009746:	f77f af6c 	ble.w	8009622 <Memory_ClearBuffer+0xe>
   }
   Pv->PageCRC = CRC_INITIAL_VALUE;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f04f 32ff 	mov.w	r2, #4294967295
 8009750:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
}
 8009754:	bf00      	nop
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <RFP_DataFunction>:
static void RFP_DataFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b092      	sub	sp, #72	; 0x48
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
   uint8_t *TempPtr;
   MV_TypeDef Mv = { 0 };
 800976c:	f107 0314 	add.w	r3, r7, #20
 8009770:	2230      	movs	r2, #48	; 0x30
 8009772:	2100      	movs	r1, #0
 8009774:	4618      	mov	r0, r3
 8009776:	f010 f903 	bl	8019980 <memset>
   TempPtr       = &Mv.ExtHumidity;
 800977a:	f107 0314 	add.w	r3, r7, #20
 800977e:	3304      	adds	r3, #4
 8009780:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr      = Data[DataStart];
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4413      	add	r3, r2
 8009788:	781a      	ldrb	r2, [r3, #0]
 800978a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800978c:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 800978e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009790:	3301      	adds	r3, #1
 8009792:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 1];
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	3301      	adds	r3, #1
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	4413      	add	r3, r2
 800979c:	781a      	ldrb	r2, [r3, #0]
 800979e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a0:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80097a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a4:	3301      	adds	r3, #1
 80097a6:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 2];
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3302      	adds	r3, #2
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	4413      	add	r3, r2
 80097b0:	781a      	ldrb	r2, [r3, #0]
 80097b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097b4:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80097b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097b8:	3301      	adds	r3, #1
 80097ba:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 3];
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	3303      	adds	r3, #3
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	4413      	add	r3, r2
 80097c4:	781a      	ldrb	r2, [r3, #0]
 80097c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c8:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80097ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097cc:	3301      	adds	r3, #1
 80097ce:	647b      	str	r3, [r7, #68]	; 0x44
   TempPtr  = &Mv.ExtTemperature;
 80097d0:	f107 0314 	add.w	r3, r7, #20
 80097d4:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 5];
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3305      	adds	r3, #5
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	4413      	add	r3, r2
 80097de:	781a      	ldrb	r2, [r3, #0]
 80097e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097e2:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80097e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097e6:	3301      	adds	r3, #1
 80097e8:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 6];
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	3306      	adds	r3, #6
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	4413      	add	r3, r2
 80097f2:	781a      	ldrb	r2, [r3, #0]
 80097f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097f6:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80097f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097fa:	3301      	adds	r3, #1
 80097fc:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 7];
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	3307      	adds	r3, #7
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	4413      	add	r3, r2
 8009806:	781a      	ldrb	r2, [r3, #0]
 8009808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800980a:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 800980c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800980e:	3301      	adds	r3, #1
 8009810:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr      = Data[DataStart + 8];
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	3308      	adds	r3, #8
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	4413      	add	r3, r2
 800981a:	781a      	ldrb	r2, [r3, #0]
 800981c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800981e:	701a      	strb	r2, [r3, #0]
   Mv.Brightness = ((Data[DataStart + 10] << 8) | Data[DataStart + 11]);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	330a      	adds	r3, #10
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	4413      	add	r3, r2
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	021b      	lsls	r3, r3, #8
 800982c:	b21a      	sxth	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	330b      	adds	r3, #11
 8009832:	68f9      	ldr	r1, [r7, #12]
 8009834:	440b      	add	r3, r1
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	b21b      	sxth	r3, r3
 800983a:	4313      	orrs	r3, r2
 800983c:	b21b      	sxth	r3, r3
 800983e:	b29b      	uxth	r3, r3
 8009840:	873b      	strh	r3, [r7, #56]	; 0x38
   TempPtr       = &Mv.BatteryVoltage;
 8009842:	f107 0314 	add.w	r3, r7, #20
 8009846:	3328      	adds	r3, #40	; 0x28
 8009848:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr      = Data[DataStart + 13];
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	330d      	adds	r3, #13
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	4413      	add	r3, r2
 8009852:	781a      	ldrb	r2, [r3, #0]
 8009854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009856:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8009858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800985a:	3301      	adds	r3, #1
 800985c:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 14];
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	330e      	adds	r3, #14
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	4413      	add	r3, r2
 8009866:	781a      	ldrb	r2, [r3, #0]
 8009868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986a:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 800986c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986e:	3301      	adds	r3, #1
 8009870:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 15];
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	330f      	adds	r3, #15
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	4413      	add	r3, r2
 800987a:	781a      	ldrb	r2, [r3, #0]
 800987c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800987e:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8009880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009882:	3301      	adds	r3, #1
 8009884:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr        = Data[DataStart + 16];
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	3310      	adds	r3, #16
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	4413      	add	r3, r2
 800988e:	781a      	ldrb	r2, [r3, #0]
 8009890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009892:	701a      	strb	r2, [r3, #0]
   TempPtr         = NULL;
 8009894:	2300      	movs	r3, #0
 8009896:	647b      	str	r3, [r7, #68]	; 0x44
   Mv.ExtPM1       = (Data[22 + 3] | (Data[21 + 3] << 8));
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	3319      	adds	r3, #25
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	b21a      	sxth	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	3318      	adds	r3, #24
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	021b      	lsls	r3, r3, #8
 80098a8:	b21b      	sxth	r3, r3
 80098aa:	4313      	orrs	r3, r2
 80098ac:	b21b      	sxth	r3, r3
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	853b      	strh	r3, [r7, #40]	; 0x28
   Mv.ExtPM25      = (Data[28 + 3] | (Data[27 + 3] << 8));
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	331f      	adds	r3, #31
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	b21a      	sxth	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	331e      	adds	r3, #30
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	021b      	lsls	r3, r3, #8
 80098c2:	b21b      	sxth	r3, r3
 80098c4:	4313      	orrs	r3, r2
 80098c6:	b21b      	sxth	r3, r3
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	857b      	strh	r3, [r7, #42]	; 0x2a
   Mv.ExtPM10      = (Data[25 + 3] | (Data[24 + 3] << 8));
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	331c      	adds	r3, #28
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	b21a      	sxth	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	331b      	adds	r3, #27
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	021b      	lsls	r3, r3, #8
 80098dc:	b21b      	sxth	r3, r3
 80098de:	4313      	orrs	r3, r2
 80098e0:	b21b      	sxth	r3, r3
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	85bb      	strh	r3, [r7, #44]	; 0x2c
   Mv.BatteryState = Data[DataStart + 18];
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	3312      	adds	r3, #18
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	4413      	add	r3, r2
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   osMessageQueuePut(ExternalMeasurmentQueueHandle, &Mv, 0, osWaitForever);
 80098f4:	4b06      	ldr	r3, [pc, #24]	; (8009910 <RFP_DataFunction+0x1b0>)
 80098f6:	6818      	ldr	r0, [r3, #0]
 80098f8:	f107 0114 	add.w	r1, r7, #20
 80098fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009900:	2200      	movs	r2, #0
 8009902:	f00c fb4d 	bl	8015fa0 <osMessageQueuePut>
}
 8009906:	bf00      	nop
 8009908:	3748      	adds	r7, #72	; 0x48
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	2000408c 	.word	0x2000408c

08009914 <rang>:
static double rang(double x)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
 800991a:	ed87 0b00 	vstr	d0, [r7]
   double A, b;
   b = x / 360;
 800991e:	f04f 0200 	mov.w	r2, #0
 8009922:	4b22      	ldr	r3, [pc, #136]	; (80099ac <rang+0x98>)
 8009924:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009928:	f7f6 ffa8 	bl	800087c <__aeabi_ddiv>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	e9c7 2302 	strd	r2, r3, [r7, #8]
   A = 360 * (b - (int)b);
 8009934:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009938:	f7f7 f926 	bl	8000b88 <__aeabi_d2iz>
 800993c:	4603      	mov	r3, r0
 800993e:	4618      	mov	r0, r3
 8009940:	f7f6 fe08 	bl	8000554 <__aeabi_i2d>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800994c:	f7f6 fcb4 	bl	80002b8 <__aeabi_dsub>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4610      	mov	r0, r2
 8009956:	4619      	mov	r1, r3
 8009958:	f04f 0200 	mov.w	r2, #0
 800995c:	4b13      	ldr	r3, [pc, #76]	; (80099ac <rang+0x98>)
 800995e:	f7f6 fe63 	bl	8000628 <__aeabi_dmul>
 8009962:	4602      	mov	r2, r0
 8009964:	460b      	mov	r3, r1
 8009966:	e9c7 2304 	strd	r2, r3, [r7, #16]
   if(A < 0)
 800996a:	f04f 0200 	mov.w	r2, #0
 800996e:	f04f 0300 	mov.w	r3, #0
 8009972:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009976:	f7f7 f8c9 	bl	8000b0c <__aeabi_dcmplt>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00a      	beq.n	8009996 <rang+0x82>
      A = A + 360;
 8009980:	f04f 0200 	mov.w	r2, #0
 8009984:	4b09      	ldr	r3, [pc, #36]	; (80099ac <rang+0x98>)
 8009986:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800998a:	f7f6 fc97 	bl	80002bc <__adddf3>
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	e9c7 2304 	strd	r2, r3, [r7, #16]
   return A;
 8009996:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800999a:	ec43 2b17 	vmov	d7, r2, r3
}
 800999e:	eeb0 0a47 	vmov.f32	s0, s14
 80099a2:	eef0 0a67 	vmov.f32	s1, s15
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	40768000 	.word	0x40768000

080099b0 <faza>:
static double faza(double Rok, double Miesiac, double Dzien, double godzina, double min, double sec)
{
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	b0a1      	sub	sp, #132	; 0x84
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80099bc:	ed87 1b08 	vstr	d1, [r7, #32]
 80099c0:	ed87 2b06 	vstr	d2, [r7, #24]
 80099c4:	ed87 3b04 	vstr	d3, [r7, #16]
 80099c8:	ed87 4b02 	vstr	d4, [r7, #8]
 80099cc:	ed87 5b00 	vstr	d5, [r7]
   if(Miesiac > 2)
 80099d0:	f04f 0200 	mov.w	r2, #0
 80099d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80099dc:	f7f7 f8b4 	bl	8000b48 <__aeabi_dcmpgt>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
   {
      Miesiac = Miesiac;
      Rok     = Rok;
   }
   if(Miesiac <= 2)
 80099e4:	f04f 0200 	mov.w	r2, #0
 80099e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80099f0:	f7f7 f896 	bl	8000b20 <__aeabi_dcmple>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d015      	beq.n	8009a26 <faza+0x76>
   {
      Miesiac = Miesiac + 12;
 80099fa:	f04f 0200 	mov.w	r2, #0
 80099fe:	4bd6      	ldr	r3, [pc, #856]	; (8009d58 <faza+0x3a8>)
 8009a00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009a04:	f7f6 fc5a 	bl	80002bc <__adddf3>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
      Rok     = Rok - 1;
 8009a10:	f04f 0200 	mov.w	r2, #0
 8009a14:	4bd1      	ldr	r3, [pc, #836]	; (8009d5c <faza+0x3ac>)
 8009a16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009a1a:	f7f6 fc4d 	bl	80002b8 <__aeabi_dsub>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	460b      	mov	r3, r1
 8009a22:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   }
   double A, b, phi1, phi2, jdp, tzd, elm, ams, aml, asd;
   A   = (int)(Rok / 100);
 8009a26:	f04f 0200 	mov.w	r2, #0
 8009a2a:	4bcd      	ldr	r3, [pc, #820]	; (8009d60 <faza+0x3b0>)
 8009a2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009a30:	f7f6 ff24 	bl	800087c <__aeabi_ddiv>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4610      	mov	r0, r2
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	f7f7 f8a4 	bl	8000b88 <__aeabi_d2iz>
 8009a40:	4603      	mov	r3, r0
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7f6 fd86 	bl	8000554 <__aeabi_i2d>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   b   = 2 - A + (int)(A / 4);
 8009a50:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009a54:	f04f 0000 	mov.w	r0, #0
 8009a58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009a5c:	f7f6 fc2c 	bl	80002b8 <__aeabi_dsub>
 8009a60:	4602      	mov	r2, r0
 8009a62:	460b      	mov	r3, r1
 8009a64:	4690      	mov	r8, r2
 8009a66:	4699      	mov	r9, r3
 8009a68:	f04f 0200 	mov.w	r2, #0
 8009a6c:	4bbd      	ldr	r3, [pc, #756]	; (8009d64 <faza+0x3b4>)
 8009a6e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009a72:	f7f6 ff03 	bl	800087c <__aeabi_ddiv>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	f7f7 f883 	bl	8000b88 <__aeabi_d2iz>
 8009a82:	4603      	mov	r3, r0
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7f6 fd65 	bl	8000554 <__aeabi_i2d>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	4640      	mov	r0, r8
 8009a90:	4649      	mov	r1, r9
 8009a92:	f7f6 fc13 	bl	80002bc <__adddf3>
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
   jdp = (int)(365.25 * (Rok + 4716)) + (int)(30.6001 * (Miesiac + 1)) + Dzien + b + ((godzina + min / 60 + sec / 3600) / 24) - 1524.5;
 8009a9e:	a392      	add	r3, pc, #584	; (adr r3, 8009ce8 <faza+0x338>)
 8009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009aa8:	f7f6 fc08 	bl	80002bc <__adddf3>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4610      	mov	r0, r2
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	a38e      	add	r3, pc, #568	; (adr r3, 8009cf0 <faza+0x340>)
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	f7f6 fdb5 	bl	8000628 <__aeabi_dmul>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	f7f7 f85f 	bl	8000b88 <__aeabi_d2iz>
 8009aca:	4606      	mov	r6, r0
 8009acc:	f04f 0200 	mov.w	r2, #0
 8009ad0:	4ba2      	ldr	r3, [pc, #648]	; (8009d5c <faza+0x3ac>)
 8009ad2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009ad6:	f7f6 fbf1 	bl	80002bc <__adddf3>
 8009ada:	4602      	mov	r2, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	4610      	mov	r0, r2
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	a385      	add	r3, pc, #532	; (adr r3, 8009cf8 <faza+0x348>)
 8009ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae8:	f7f6 fd9e 	bl	8000628 <__aeabi_dmul>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	4610      	mov	r0, r2
 8009af2:	4619      	mov	r1, r3
 8009af4:	f7f7 f848 	bl	8000b88 <__aeabi_d2iz>
 8009af8:	4603      	mov	r3, r0
 8009afa:	4433      	add	r3, r6
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7f6 fd29 	bl	8000554 <__aeabi_i2d>
 8009b02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b06:	f7f6 fbd9 	bl	80002bc <__adddf3>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4610      	mov	r0, r2
 8009b10:	4619      	mov	r1, r3
 8009b12:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009b16:	f7f6 fbd1 	bl	80002bc <__adddf3>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4690      	mov	r8, r2
 8009b20:	4699      	mov	r9, r3
 8009b22:	f04f 0200 	mov.w	r2, #0
 8009b26:	4b90      	ldr	r3, [pc, #576]	; (8009d68 <faza+0x3b8>)
 8009b28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b2c:	f7f6 fea6 	bl	800087c <__aeabi_ddiv>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	4610      	mov	r0, r2
 8009b36:	4619      	mov	r1, r3
 8009b38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009b3c:	f7f6 fbbe 	bl	80002bc <__adddf3>
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	4692      	mov	sl, r2
 8009b46:	469b      	mov	fp, r3
 8009b48:	a36d      	add	r3, pc, #436	; (adr r3, 8009d00 <faza+0x350>)
 8009b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b52:	f7f6 fe93 	bl	800087c <__aeabi_ddiv>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4650      	mov	r0, sl
 8009b5c:	4659      	mov	r1, fp
 8009b5e:	f7f6 fbad 	bl	80002bc <__adddf3>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	4610      	mov	r0, r2
 8009b68:	4619      	mov	r1, r3
 8009b6a:	f04f 0200 	mov.w	r2, #0
 8009b6e:	4b7f      	ldr	r3, [pc, #508]	; (8009d6c <faza+0x3bc>)
 8009b70:	f7f6 fe84 	bl	800087c <__aeabi_ddiv>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4640      	mov	r0, r8
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	f7f6 fb9e 	bl	80002bc <__adddf3>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	4610      	mov	r0, r2
 8009b86:	4619      	mov	r1, r3
 8009b88:	a35f      	add	r3, pc, #380	; (adr r3, 8009d08 <faza+0x358>)
 8009b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8e:	f7f6 fb93 	bl	80002b8 <__aeabi_dsub>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   jdp = jdp;
   tzd = (jdp - 2451545) / 36525;
 8009b9a:	a35d      	add	r3, pc, #372	; (adr r3, 8009d10 <faza+0x360>)
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009ba4:	f7f6 fb88 	bl	80002b8 <__aeabi_dsub>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	4610      	mov	r0, r2
 8009bae:	4619      	mov	r1, r3
 8009bb0:	a359      	add	r3, pc, #356	; (adr r3, 8009d18 <faza+0x368>)
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	f7f6 fe61 	bl	800087c <__aeabi_ddiv>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
   elm = rang(297.8502042 + 445267.1115168 * tzd - (0.00163 * tzd * tzd) + tzd * tzd * tzd / 545868 - tzd * tzd * tzd * tzd / 113065000);
 8009bc2:	a357      	add	r3, pc, #348	; (adr r3, 8009d20 <faza+0x370>)
 8009bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009bcc:	f7f6 fd2c 	bl	8000628 <__aeabi_dmul>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	a353      	add	r3, pc, #332	; (adr r3, 8009d28 <faza+0x378>)
 8009bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bde:	f7f6 fb6d 	bl	80002bc <__adddf3>
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	4690      	mov	r8, r2
 8009be8:	4699      	mov	r9, r3
 8009bea:	a351      	add	r3, pc, #324	; (adr r3, 8009d30 <faza+0x380>)
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009bf4:	f7f6 fd18 	bl	8000628 <__aeabi_dmul>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	4619      	mov	r1, r3
 8009c00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c04:	f7f6 fd10 	bl	8000628 <__aeabi_dmul>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	4649      	mov	r1, r9
 8009c10:	f7f6 fb52 	bl	80002b8 <__aeabi_dsub>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4690      	mov	r8, r2
 8009c1a:	4699      	mov	r9, r3
 8009c1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c20:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009c24:	f7f6 fd00 	bl	8000628 <__aeabi_dmul>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	4619      	mov	r1, r3
 8009c30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c34:	f7f6 fcf8 	bl	8000628 <__aeabi_dmul>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	4619      	mov	r1, r3
 8009c40:	a33d      	add	r3, pc, #244	; (adr r3, 8009d38 <faza+0x388>)
 8009c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c46:	f7f6 fe19 	bl	800087c <__aeabi_ddiv>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4640      	mov	r0, r8
 8009c50:	4649      	mov	r1, r9
 8009c52:	f7f6 fb33 	bl	80002bc <__adddf3>
 8009c56:	4602      	mov	r2, r0
 8009c58:	460b      	mov	r3, r1
 8009c5a:	4690      	mov	r8, r2
 8009c5c:	4699      	mov	r9, r3
 8009c5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009c66:	f7f6 fcdf 	bl	8000628 <__aeabi_dmul>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	4610      	mov	r0, r2
 8009c70:	4619      	mov	r1, r3
 8009c72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c76:	f7f6 fcd7 	bl	8000628 <__aeabi_dmul>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4610      	mov	r0, r2
 8009c80:	4619      	mov	r1, r3
 8009c82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c86:	f7f6 fccf 	bl	8000628 <__aeabi_dmul>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4610      	mov	r0, r2
 8009c90:	4619      	mov	r1, r3
 8009c92:	a32b      	add	r3, pc, #172	; (adr r3, 8009d40 <faza+0x390>)
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	f7f6 fdf0 	bl	800087c <__aeabi_ddiv>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4640      	mov	r0, r8
 8009ca2:	4649      	mov	r1, r9
 8009ca4:	f7f6 fb08 	bl	80002b8 <__aeabi_dsub>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	ec43 2b17 	vmov	d7, r2, r3
 8009cb0:	eeb0 0a47 	vmov.f32	s0, s14
 8009cb4:	eef0 0a67 	vmov.f32	s1, s15
 8009cb8:	f7ff fe2c 	bl	8009914 <rang>
 8009cbc:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   ams = rang(357.5291092 + 35999.0502909 * tzd - 0.0001536 * tzd * tzd + tzd * tzd * tzd / 24490000);
 8009cc0:	a321      	add	r3, pc, #132	; (adr r3, 8009d48 <faza+0x398>)
 8009cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009cca:	f7f6 fcad 	bl	8000628 <__aeabi_dmul>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	a31e      	add	r3, pc, #120	; (adr r3, 8009d50 <faza+0x3a0>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	f7f6 faee 	bl	80002bc <__adddf3>
 8009ce0:	e046      	b.n	8009d70 <faza+0x3c0>
 8009ce2:	bf00      	nop
 8009ce4:	f3af 8000 	nop.w
 8009ce8:	00000000 	.word	0x00000000
 8009cec:	40b26c00 	.word	0x40b26c00
 8009cf0:	00000000 	.word	0x00000000
 8009cf4:	4076d400 	.word	0x4076d400
 8009cf8:	27525461 	.word	0x27525461
 8009cfc:	403e99a0 	.word	0x403e99a0
 8009d00:	00000000 	.word	0x00000000
 8009d04:	40ac2000 	.word	0x40ac2000
 8009d08:	00000000 	.word	0x00000000
 8009d0c:	4097d200 	.word	0x4097d200
 8009d10:	80000000 	.word	0x80000000
 8009d14:	4142b42c 	.word	0x4142b42c
 8009d18:	00000000 	.word	0x00000000
 8009d1c:	40e1d5a0 	.word	0x40e1d5a0
 8009d20:	723175c4 	.word	0x723175c4
 8009d24:	411b2d4c 	.word	0x411b2d4c
 8009d28:	6fb81ec0 	.word	0x6fb81ec0
 8009d2c:	40729d9a 	.word	0x40729d9a
 8009d30:	2c5197a2 	.word	0x2c5197a2
 8009d34:	3f5ab4b7 	.word	0x3f5ab4b7
 8009d38:	00000000 	.word	0x00000000
 8009d3c:	4120a898 	.word	0x4120a898
 8009d40:	a0000000 	.word	0xa0000000
 8009d44:	419af4f0 	.word	0x419af4f0
 8009d48:	9bfba959 	.word	0x9bfba959
 8009d4c:	40e193e1 	.word	0x40e193e1
 8009d50:	3b356034 	.word	0x3b356034
 8009d54:	40765877 	.word	0x40765877
 8009d58:	40280000 	.word	0x40280000
 8009d5c:	3ff00000 	.word	0x3ff00000
 8009d60:	40590000 	.word	0x40590000
 8009d64:	40100000 	.word	0x40100000
 8009d68:	404e0000 	.word	0x404e0000
 8009d6c:	40380000 	.word	0x40380000
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	4690      	mov	r8, r2
 8009d76:	4699      	mov	r9, r3
 8009d78:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009d84:	f7f6 fc50 	bl	8000628 <__aeabi_dmul>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	4619      	mov	r1, r3
 8009d90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009d94:	f7f6 fc48 	bl	8000628 <__aeabi_dmul>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4640      	mov	r0, r8
 8009d9e:	4649      	mov	r1, r9
 8009da0:	f7f6 fa8a 	bl	80002b8 <__aeabi_dsub>
 8009da4:	4602      	mov	r2, r0
 8009da6:	460b      	mov	r3, r1
 8009da8:	4690      	mov	r8, r2
 8009daa:	4699      	mov	r9, r3
 8009dac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009db0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009db4:	f7f6 fc38 	bl	8000628 <__aeabi_dmul>
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009dc4:	f7f6 fc30 	bl	8000628 <__aeabi_dmul>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	460b      	mov	r3, r1
 8009dcc:	4610      	mov	r0, r2
 8009dce:	4619      	mov	r1, r3
 8009dd0:	f20f 43cc 	addw	r3, pc, #1228	; 0x4cc
 8009dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd8:	f7f6 fd50 	bl	800087c <__aeabi_ddiv>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	4640      	mov	r0, r8
 8009de2:	4649      	mov	r1, r9
 8009de4:	f7f6 fa6a 	bl	80002bc <__adddf3>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	ec43 2b17 	vmov	d7, r2, r3
 8009df0:	eeb0 0a47 	vmov.f32	s0, s14
 8009df4:	eef0 0a67 	vmov.f32	s1, s15
 8009df8:	f7ff fd8c 	bl	8009914 <rang>
 8009dfc:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
   aml = rang(134.9634114 + 477198.8676313 * tzd - 0.008997 * tzd * tzd + tzd * tzd * tzd / 69699 - tzd * tzd * tzd * tzd / 14712000);
 8009e00:	f20f 43a4 	addw	r3, pc, #1188	; 0x4a4
 8009e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e08:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009e0c:	f7f6 fc0c 	bl	8000628 <__aeabi_dmul>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4610      	mov	r0, r2
 8009e16:	4619      	mov	r1, r3
 8009e18:	f20f 4394 	addw	r3, pc, #1172	; 0x494
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	f7f6 fa4c 	bl	80002bc <__adddf3>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4690      	mov	r8, r2
 8009e2a:	4699      	mov	r9, r3
 8009e2c:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8009e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e34:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009e38:	f7f6 fbf6 	bl	8000628 <__aeabi_dmul>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	4610      	mov	r0, r2
 8009e42:	4619      	mov	r1, r3
 8009e44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e48:	f7f6 fbee 	bl	8000628 <__aeabi_dmul>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4640      	mov	r0, r8
 8009e52:	4649      	mov	r1, r9
 8009e54:	f7f6 fa30 	bl	80002b8 <__aeabi_dsub>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	4690      	mov	r8, r2
 8009e5e:	4699      	mov	r9, r3
 8009e60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e64:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009e68:	f7f6 fbde 	bl	8000628 <__aeabi_dmul>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	4610      	mov	r0, r2
 8009e72:	4619      	mov	r1, r3
 8009e74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e78:	f7f6 fbd6 	bl	8000628 <__aeabi_dmul>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4610      	mov	r0, r2
 8009e82:	4619      	mov	r1, r3
 8009e84:	f20f 4338 	addw	r3, pc, #1080	; 0x438
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	f7f6 fcf6 	bl	800087c <__aeabi_ddiv>
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	4640      	mov	r0, r8
 8009e96:	4649      	mov	r1, r9
 8009e98:	f7f6 fa10 	bl	80002bc <__adddf3>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4690      	mov	r8, r2
 8009ea2:	4699      	mov	r9, r3
 8009ea4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ea8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009eac:	f7f6 fbbc 	bl	8000628 <__aeabi_dmul>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ebc:	f7f6 fbb4 	bl	8000628 <__aeabi_dmul>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ecc:	f7f6 fbac 	bl	8000628 <__aeabi_dmul>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	a3fb      	add	r3, pc, #1004	; (adr r3, 800a2c8 <faza+0x918>)
 8009eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ede:	f7f6 fccd 	bl	800087c <__aeabi_ddiv>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4640      	mov	r0, r8
 8009ee8:	4649      	mov	r1, r9
 8009eea:	f7f6 f9e5 	bl	80002b8 <__aeabi_dsub>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	ec43 2b17 	vmov	d7, r2, r3
 8009ef6:	eeb0 0a47 	vmov.f32	s0, s14
 8009efa:	eef0 0a67 	vmov.f32	s1, s15
 8009efe:	f7ff fd09 	bl	8009914 <rang>
 8009f02:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 8009f06:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009f0a:	f04f 0000 	mov.w	r0, #0
 8009f0e:	49e0      	ldr	r1, [pc, #896]	; (800a290 <faza+0x8e0>)
 8009f10:	f7f6 f9d2 	bl	80002b8 <__aeabi_dsub>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	4690      	mov	r8, r2
 8009f1a:	4699      	mov	r9, r3
 8009f1c:	a3c0      	add	r3, pc, #768	; (adr r3, 800a220 <faza+0x870>)
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f26:	f7f6 fb7f 	bl	8000628 <__aeabi_dmul>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	ec43 2b17 	vmov	d7, r2, r3
 8009f32:	eeb0 0a47 	vmov.f32	s0, s14
 8009f36:	eef0 0a67 	vmov.f32	s1, s15
 8009f3a:	f014 f9dd 	bl	801e2f8 <sin>
 8009f3e:	ec51 0b10 	vmov	r0, r1, d0
 8009f42:	a3b9      	add	r3, pc, #740	; (adr r3, 800a228 <faza+0x878>)
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	f7f6 fb6e 	bl	8000628 <__aeabi_dmul>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	4640      	mov	r0, r8
 8009f52:	4649      	mov	r1, r9
 8009f54:	f7f6 f9b0 	bl	80002b8 <__aeabi_dsub>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4690      	mov	r8, r2
 8009f5e:	4699      	mov	r9, r3
 8009f60:	a3af      	add	r3, pc, #700	; (adr r3, 800a220 <faza+0x870>)
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009f6a:	f7f6 fb5d 	bl	8000628 <__aeabi_dmul>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	ec43 2b17 	vmov	d7, r2, r3
 8009f76:	eeb0 0a47 	vmov.f32	s0, s14
 8009f7a:	eef0 0a67 	vmov.f32	s1, s15
 8009f7e:	f014 f9bb 	bl	801e2f8 <sin>
 8009f82:	ec51 0b10 	vmov	r0, r1, d0
 8009f86:	a3aa      	add	r3, pc, #680	; (adr r3, 800a230 <faza+0x880>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	f7f6 fb4c 	bl	8000628 <__aeabi_dmul>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4640      	mov	r0, r8
 8009f96:	4649      	mov	r1, r9
 8009f98:	f7f6 f990 	bl	80002bc <__adddf3>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4690      	mov	r8, r2
 8009fa2:	4699      	mov	r9, r3
 8009fa4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	f7f6 f986 	bl	80002bc <__adddf3>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009fbc:	f7f6 f97c 	bl	80002b8 <__aeabi_dsub>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	a395      	add	r3, pc, #596	; (adr r3, 800a220 <faza+0x870>)
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	f7f6 fb2b 	bl	8000628 <__aeabi_dmul>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	ec43 2b17 	vmov	d7, r2, r3
 8009fda:	eeb0 0a47 	vmov.f32	s0, s14
 8009fde:	eef0 0a67 	vmov.f32	s1, s15
 8009fe2:	f014 f989 	bl	801e2f8 <sin>
 8009fe6:	ec51 0b10 	vmov	r0, r1, d0
 8009fea:	a393      	add	r3, pc, #588	; (adr r3, 800a238 <faza+0x888>)
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	f7f6 fb1a 	bl	8000628 <__aeabi_dmul>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4640      	mov	r0, r8
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	f7f6 f95c 	bl	80002b8 <__aeabi_dsub>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	4690      	mov	r8, r2
 800a006:	4699      	mov	r9, r3
         - (0.658 * sin((M_PI / 180) * ((2 * elm)))) - (0.214 * sin((M_PI / 180) * ((2 * aml)))) - (0.11 * sin((M_PI / 180) * ((elm))));
 800a008:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	f7f6 f954 	bl	80002bc <__adddf3>
 800a014:	4602      	mov	r2, r0
 800a016:	460b      	mov	r3, r1
 800a018:	4610      	mov	r0, r2
 800a01a:	4619      	mov	r1, r3
 800a01c:	a380      	add	r3, pc, #512	; (adr r3, 800a220 <faza+0x870>)
 800a01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a022:	f7f6 fb01 	bl	8000628 <__aeabi_dmul>
 800a026:	4602      	mov	r2, r0
 800a028:	460b      	mov	r3, r1
 800a02a:	ec43 2b17 	vmov	d7, r2, r3
 800a02e:	eeb0 0a47 	vmov.f32	s0, s14
 800a032:	eef0 0a67 	vmov.f32	s1, s15
 800a036:	f014 f95f 	bl	801e2f8 <sin>
 800a03a:	ec51 0b10 	vmov	r0, r1, d0
 800a03e:	a380      	add	r3, pc, #512	; (adr r3, 800a240 <faza+0x890>)
 800a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a044:	f7f6 faf0 	bl	8000628 <__aeabi_dmul>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4640      	mov	r0, r8
 800a04e:	4649      	mov	r1, r9
 800a050:	f7f6 f932 	bl	80002b8 <__aeabi_dsub>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4690      	mov	r8, r2
 800a05a:	4699      	mov	r9, r3
 800a05c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	f7f6 f92a 	bl	80002bc <__adddf3>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	4610      	mov	r0, r2
 800a06e:	4619      	mov	r1, r3
 800a070:	a36b      	add	r3, pc, #428	; (adr r3, 800a220 <faza+0x870>)
 800a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a076:	f7f6 fad7 	bl	8000628 <__aeabi_dmul>
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	ec43 2b17 	vmov	d7, r2, r3
 800a082:	eeb0 0a47 	vmov.f32	s0, s14
 800a086:	eef0 0a67 	vmov.f32	s1, s15
 800a08a:	f014 f935 	bl	801e2f8 <sin>
 800a08e:	ec51 0b10 	vmov	r0, r1, d0
 800a092:	a36d      	add	r3, pc, #436	; (adr r3, 800a248 <faza+0x898>)
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f7f6 fac6 	bl	8000628 <__aeabi_dmul>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4640      	mov	r0, r8
 800a0a2:	4649      	mov	r1, r9
 800a0a4:	f7f6 f908 	bl	80002b8 <__aeabi_dsub>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4690      	mov	r8, r2
 800a0ae:	4699      	mov	r9, r3
 800a0b0:	a35b      	add	r3, pc, #364	; (adr r3, 800a220 <faza+0x870>)
 800a0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a0ba:	f7f6 fab5 	bl	8000628 <__aeabi_dmul>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	ec43 2b17 	vmov	d7, r2, r3
 800a0c6:	eeb0 0a47 	vmov.f32	s0, s14
 800a0ca:	eef0 0a67 	vmov.f32	s1, s15
 800a0ce:	f014 f913 	bl	801e2f8 <sin>
 800a0d2:	ec51 0b10 	vmov	r0, r1, d0
 800a0d6:	a35e      	add	r3, pc, #376	; (adr r3, 800a250 <faza+0x8a0>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	f7f6 faa4 	bl	8000628 <__aeabi_dmul>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 800a0e4:	4640      	mov	r0, r8
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	f7f6 f8e6 	bl	80002b8 <__aeabi_dsub>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   phi1 = (1 + cos((M_PI / 180) * (asd))) / 2;
 800a0f4:	a34a      	add	r3, pc, #296	; (adr r3, 800a220 <faza+0x870>)
 800a0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a0fe:	f7f6 fa93 	bl	8000628 <__aeabi_dmul>
 800a102:	4602      	mov	r2, r0
 800a104:	460b      	mov	r3, r1
 800a106:	ec43 2b17 	vmov	d7, r2, r3
 800a10a:	eeb0 0a47 	vmov.f32	s0, s14
 800a10e:	eef0 0a67 	vmov.f32	s1, s15
 800a112:	f014 f89d 	bl	801e250 <cos>
 800a116:	ec51 0b10 	vmov	r0, r1, d0
 800a11a:	f04f 0200 	mov.w	r2, #0
 800a11e:	4b5d      	ldr	r3, [pc, #372]	; (800a294 <faza+0x8e4>)
 800a120:	f7f6 f8cc 	bl	80002bc <__adddf3>
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	4610      	mov	r0, r2
 800a12a:	4619      	mov	r1, r3
 800a12c:	f04f 0200 	mov.w	r2, #0
 800a130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a134:	f7f6 fba2 	bl	800087c <__aeabi_ddiv>
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

   tzd = (jdp + (0.5 / 24) - 2451545) / 36525;
 800a140:	a345      	add	r3, pc, #276	; (adr r3, 800a258 <faza+0x8a8>)
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a14a:	f7f6 f8b7 	bl	80002bc <__adddf3>
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	4610      	mov	r0, r2
 800a154:	4619      	mov	r1, r3
 800a156:	a342      	add	r3, pc, #264	; (adr r3, 800a260 <faza+0x8b0>)
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	f7f6 f8ac 	bl	80002b8 <__aeabi_dsub>
 800a160:	4602      	mov	r2, r0
 800a162:	460b      	mov	r3, r1
 800a164:	4610      	mov	r0, r2
 800a166:	4619      	mov	r1, r3
 800a168:	a33f      	add	r3, pc, #252	; (adr r3, 800a268 <faza+0x8b8>)
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	f7f6 fb85 	bl	800087c <__aeabi_ddiv>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
   elm = rang(297.8502042 + 445267.1115168 * tzd - (0.00163 * tzd * tzd) + tzd * tzd * tzd / 545868 - tzd * tzd * tzd * tzd / 113065000);
 800a17a:	a33d      	add	r3, pc, #244	; (adr r3, 800a270 <faza+0x8c0>)
 800a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a180:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a184:	f7f6 fa50 	bl	8000628 <__aeabi_dmul>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4610      	mov	r0, r2
 800a18e:	4619      	mov	r1, r3
 800a190:	a339      	add	r3, pc, #228	; (adr r3, 800a278 <faza+0x8c8>)
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	f7f6 f891 	bl	80002bc <__adddf3>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	4690      	mov	r8, r2
 800a1a0:	4699      	mov	r9, r3
 800a1a2:	a337      	add	r3, pc, #220	; (adr r3, 800a280 <faza+0x8d0>)
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a1ac:	f7f6 fa3c 	bl	8000628 <__aeabi_dmul>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	4610      	mov	r0, r2
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a1bc:	f7f6 fa34 	bl	8000628 <__aeabi_dmul>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	f7f6 f876 	bl	80002b8 <__aeabi_dsub>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	4690      	mov	r8, r2
 800a1d2:	4699      	mov	r9, r3
 800a1d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a1d8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a1dc:	f7f6 fa24 	bl	8000628 <__aeabi_dmul>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a1ec:	f7f6 fa1c 	bl	8000628 <__aeabi_dmul>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	a323      	add	r3, pc, #140	; (adr r3, 800a288 <faza+0x8d8>)
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	f7f6 fb3d 	bl	800087c <__aeabi_ddiv>
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	4640      	mov	r0, r8
 800a208:	4649      	mov	r1, r9
 800a20a:	f7f6 f857 	bl	80002bc <__adddf3>
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	4690      	mov	r8, r2
 800a214:	4699      	mov	r9, r3
 800a216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a21a:	e059      	b.n	800a2d0 <faza+0x920>
 800a21c:	f3af 8000 	nop.w
 800a220:	a2529d39 	.word	0xa2529d39
 800a224:	3f91df46 	.word	0x3f91df46
 800a228:	9db22d0e 	.word	0x9db22d0e
 800a22c:	401927ef 	.word	0x401927ef
 800a230:	cccccccd 	.word	0xcccccccd
 800a234:	4000cccc 	.word	0x4000cccc
 800a238:	d2f1a9fc 	.word	0xd2f1a9fc
 800a23c:	3ff4624d 	.word	0x3ff4624d
 800a240:	04189375 	.word	0x04189375
 800a244:	3fe50e56 	.word	0x3fe50e56
 800a248:	1cac0831 	.word	0x1cac0831
 800a24c:	3fcb645a 	.word	0x3fcb645a
 800a250:	c28f5c29 	.word	0xc28f5c29
 800a254:	3fbc28f5 	.word	0x3fbc28f5
 800a258:	55555555 	.word	0x55555555
 800a25c:	3f955555 	.word	0x3f955555
 800a260:	80000000 	.word	0x80000000
 800a264:	4142b42c 	.word	0x4142b42c
 800a268:	00000000 	.word	0x00000000
 800a26c:	40e1d5a0 	.word	0x40e1d5a0
 800a270:	723175c4 	.word	0x723175c4
 800a274:	411b2d4c 	.word	0x411b2d4c
 800a278:	6fb81ec0 	.word	0x6fb81ec0
 800a27c:	40729d9a 	.word	0x40729d9a
 800a280:	2c5197a2 	.word	0x2c5197a2
 800a284:	3f5ab4b7 	.word	0x3f5ab4b7
 800a288:	00000000 	.word	0x00000000
 800a28c:	4120a898 	.word	0x4120a898
 800a290:	40668000 	.word	0x40668000
 800a294:	3ff00000 	.word	0x3ff00000
 800a298:	f40d8376 	.word	0xf40d8376
 800a29c:	3f2421f5 	.word	0x3f2421f5
 800a2a0:	00000000 	.word	0x00000000
 800a2a4:	41775b01 	.word	0x41775b01
 800a2a8:	787456ea 	.word	0x787456ea
 800a2ac:	411d203b 	.word	0x411d203b
 800a2b0:	4424f2ff 	.word	0x4424f2ff
 800a2b4:	4060ded4 	.word	0x4060ded4
 800a2b8:	e618ce2d 	.word	0xe618ce2d
 800a2bc:	3f826d04 	.word	0x3f826d04
 800a2c0:	00000000 	.word	0x00000000
 800a2c4:	40f10430 	.word	0x40f10430
 800a2c8:	00000000 	.word	0x00000000
 800a2cc:	416c0f98 	.word	0x416c0f98
 800a2d0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a2d4:	f7f6 f9a8 	bl	8000628 <__aeabi_dmul>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4610      	mov	r0, r2
 800a2de:	4619      	mov	r1, r3
 800a2e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a2e4:	f7f6 f9a0 	bl	8000628 <__aeabi_dmul>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a2f4:	f7f6 f998 	bl	8000628 <__aeabi_dmul>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	4619      	mov	r1, r3
 800a300:	f20f 43b8 	addw	r3, pc, #1208	; 0x4b8
 800a304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a308:	f7f6 fab8 	bl	800087c <__aeabi_ddiv>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	4640      	mov	r0, r8
 800a312:	4649      	mov	r1, r9
 800a314:	f7f5 ffd0 	bl	80002b8 <__aeabi_dsub>
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	ec43 2b17 	vmov	d7, r2, r3
 800a320:	eeb0 0a47 	vmov.f32	s0, s14
 800a324:	eef0 0a67 	vmov.f32	s1, s15
 800a328:	f7ff faf4 	bl	8009914 <rang>
 800a32c:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   ams = rang(357.5291092 + 35999.0502909 * tzd - 0.0001536 * tzd * tzd + tzd * tzd * tzd / 24490000);
 800a330:	f20f 4390 	addw	r3, pc, #1168	; 0x490
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a33c:	f7f6 f974 	bl	8000628 <__aeabi_dmul>
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4610      	mov	r0, r2
 800a346:	4619      	mov	r1, r3
 800a348:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f5 ffb4 	bl	80002bc <__adddf3>
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	4690      	mov	r8, r2
 800a35a:	4699      	mov	r9, r3
 800a35c:	f20f 4374 	addw	r3, pc, #1140	; 0x474
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a368:	f7f6 f95e 	bl	8000628 <__aeabi_dmul>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4610      	mov	r0, r2
 800a372:	4619      	mov	r1, r3
 800a374:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a378:	f7f6 f956 	bl	8000628 <__aeabi_dmul>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	4640      	mov	r0, r8
 800a382:	4649      	mov	r1, r9
 800a384:	f7f5 ff98 	bl	80002b8 <__aeabi_dsub>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4690      	mov	r8, r2
 800a38e:	4699      	mov	r9, r3
 800a390:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a394:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a398:	f7f6 f946 	bl	8000628 <__aeabi_dmul>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a3a8:	f7f6 f93e 	bl	8000628 <__aeabi_dmul>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	4610      	mov	r0, r2
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	f20f 4324 	addw	r3, pc, #1060	; 0x424
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	f7f6 fa5e 	bl	800087c <__aeabi_ddiv>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4640      	mov	r0, r8
 800a3c6:	4649      	mov	r1, r9
 800a3c8:	f7f5 ff78 	bl	80002bc <__adddf3>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	ec43 2b17 	vmov	d7, r2, r3
 800a3d4:	eeb0 0a47 	vmov.f32	s0, s14
 800a3d8:	eef0 0a67 	vmov.f32	s1, s15
 800a3dc:	f7ff fa9a 	bl	8009914 <rang>
 800a3e0:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
   aml = rang(134.9634114 + 477198.8676313 * tzd - 0.008997 * tzd * tzd + tzd * tzd * tzd / 69699 - tzd * tzd * tzd * tzd / 14712000);
 800a3e4:	a3ff      	add	r3, pc, #1020	; (adr r3, 800a7e4 <faza+0xe34>)
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a3ee:	f7f6 f91b 	bl	8000628 <__aeabi_dmul>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	4610      	mov	r0, r2
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	a3fc      	add	r3, pc, #1008	; (adr r3, 800a7ec <faza+0xe3c>)
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	f7f5 ff5c 	bl	80002bc <__adddf3>
 800a404:	4602      	mov	r2, r0
 800a406:	460b      	mov	r3, r1
 800a408:	4690      	mov	r8, r2
 800a40a:	4699      	mov	r9, r3
 800a40c:	a3f9      	add	r3, pc, #996	; (adr r3, 800a7f4 <faza+0xe44>)
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a416:	f7f6 f907 	bl	8000628 <__aeabi_dmul>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4610      	mov	r0, r2
 800a420:	4619      	mov	r1, r3
 800a422:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a426:	f7f6 f8ff 	bl	8000628 <__aeabi_dmul>
 800a42a:	4602      	mov	r2, r0
 800a42c:	460b      	mov	r3, r1
 800a42e:	4640      	mov	r0, r8
 800a430:	4649      	mov	r1, r9
 800a432:	f7f5 ff41 	bl	80002b8 <__aeabi_dsub>
 800a436:	4602      	mov	r2, r0
 800a438:	460b      	mov	r3, r1
 800a43a:	4690      	mov	r8, r2
 800a43c:	4699      	mov	r9, r3
 800a43e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a442:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a446:	f7f6 f8ef 	bl	8000628 <__aeabi_dmul>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	4610      	mov	r0, r2
 800a450:	4619      	mov	r1, r3
 800a452:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a456:	f7f6 f8e7 	bl	8000628 <__aeabi_dmul>
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	4610      	mov	r0, r2
 800a460:	4619      	mov	r1, r3
 800a462:	a3e6      	add	r3, pc, #920	; (adr r3, 800a7fc <faza+0xe4c>)
 800a464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a468:	f7f6 fa08 	bl	800087c <__aeabi_ddiv>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4640      	mov	r0, r8
 800a472:	4649      	mov	r1, r9
 800a474:	f7f5 ff22 	bl	80002bc <__adddf3>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	4690      	mov	r8, r2
 800a47e:	4699      	mov	r9, r3
 800a480:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a484:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a488:	f7f6 f8ce 	bl	8000628 <__aeabi_dmul>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4610      	mov	r0, r2
 800a492:	4619      	mov	r1, r3
 800a494:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a498:	f7f6 f8c6 	bl	8000628 <__aeabi_dmul>
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a4a8:	f7f6 f8be 	bl	8000628 <__aeabi_dmul>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	a3d3      	add	r3, pc, #844	; (adr r3, 800a804 <faza+0xe54>)
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	f7f6 f9df 	bl	800087c <__aeabi_ddiv>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	4649      	mov	r1, r9
 800a4c6:	f7f5 fef7 	bl	80002b8 <__aeabi_dsub>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	ec43 2b17 	vmov	d7, r2, r3
 800a4d2:	eeb0 0a47 	vmov.f32	s0, s14
 800a4d6:	eef0 0a67 	vmov.f32	s1, s15
 800a4da:	f7ff fa1b 	bl	8009914 <rang>
 800a4de:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 800a4e2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a4e6:	f04f 0000 	mov.w	r0, #0
 800a4ea:	49b1      	ldr	r1, [pc, #708]	; (800a7b0 <faza+0xe00>)
 800a4ec:	f7f5 fee4 	bl	80002b8 <__aeabi_dsub>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	4690      	mov	r8, r2
 800a4f6:	4699      	mov	r9, r3
 800a4f8:	a39f      	add	r3, pc, #636	; (adr r3, 800a778 <faza+0xdc8>)
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a502:	f7f6 f891 	bl	8000628 <__aeabi_dmul>
 800a506:	4602      	mov	r2, r0
 800a508:	460b      	mov	r3, r1
 800a50a:	ec43 2b17 	vmov	d7, r2, r3
 800a50e:	eeb0 0a47 	vmov.f32	s0, s14
 800a512:	eef0 0a67 	vmov.f32	s1, s15
 800a516:	f013 feef 	bl	801e2f8 <sin>
 800a51a:	ec51 0b10 	vmov	r0, r1, d0
 800a51e:	a398      	add	r3, pc, #608	; (adr r3, 800a780 <faza+0xdd0>)
 800a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a524:	f7f6 f880 	bl	8000628 <__aeabi_dmul>
 800a528:	4602      	mov	r2, r0
 800a52a:	460b      	mov	r3, r1
 800a52c:	4640      	mov	r0, r8
 800a52e:	4649      	mov	r1, r9
 800a530:	f7f5 fec2 	bl	80002b8 <__aeabi_dsub>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	4690      	mov	r8, r2
 800a53a:	4699      	mov	r9, r3
 800a53c:	a38e      	add	r3, pc, #568	; (adr r3, 800a778 <faza+0xdc8>)
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a546:	f7f6 f86f 	bl	8000628 <__aeabi_dmul>
 800a54a:	4602      	mov	r2, r0
 800a54c:	460b      	mov	r3, r1
 800a54e:	ec43 2b17 	vmov	d7, r2, r3
 800a552:	eeb0 0a47 	vmov.f32	s0, s14
 800a556:	eef0 0a67 	vmov.f32	s1, s15
 800a55a:	f013 fecd 	bl	801e2f8 <sin>
 800a55e:	ec51 0b10 	vmov	r0, r1, d0
 800a562:	a389      	add	r3, pc, #548	; (adr r3, 800a788 <faza+0xdd8>)
 800a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a568:	f7f6 f85e 	bl	8000628 <__aeabi_dmul>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	4640      	mov	r0, r8
 800a572:	4649      	mov	r1, r9
 800a574:	f7f5 fea2 	bl	80002bc <__adddf3>
 800a578:	4602      	mov	r2, r0
 800a57a:	460b      	mov	r3, r1
 800a57c:	4690      	mov	r8, r2
 800a57e:	4699      	mov	r9, r3
 800a580:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	f7f5 fe98 	bl	80002bc <__adddf3>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	4610      	mov	r0, r2
 800a592:	4619      	mov	r1, r3
 800a594:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a598:	f7f5 fe8e 	bl	80002b8 <__aeabi_dsub>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	a374      	add	r3, pc, #464	; (adr r3, 800a778 <faza+0xdc8>)
 800a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5aa:	f7f6 f83d 	bl	8000628 <__aeabi_dmul>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	ec43 2b17 	vmov	d7, r2, r3
 800a5b6:	eeb0 0a47 	vmov.f32	s0, s14
 800a5ba:	eef0 0a67 	vmov.f32	s1, s15
 800a5be:	f013 fe9b 	bl	801e2f8 <sin>
 800a5c2:	ec51 0b10 	vmov	r0, r1, d0
 800a5c6:	a372      	add	r3, pc, #456	; (adr r3, 800a790 <faza+0xde0>)
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	f7f6 f82c 	bl	8000628 <__aeabi_dmul>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4640      	mov	r0, r8
 800a5d6:	4649      	mov	r1, r9
 800a5d8:	f7f5 fe6e 	bl	80002b8 <__aeabi_dsub>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4690      	mov	r8, r2
 800a5e2:	4699      	mov	r9, r3
         - (0.658 * sin((M_PI / 180) * ((2 * elm)))) - (0.214 * sin((M_PI / 180) * ((2 * aml)))) - (0.11 * sin((M_PI / 180) * ((elm))));
 800a5e4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	f7f5 fe66 	bl	80002bc <__adddf3>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	a35f      	add	r3, pc, #380	; (adr r3, 800a778 <faza+0xdc8>)
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	f7f6 f813 	bl	8000628 <__aeabi_dmul>
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	ec43 2b17 	vmov	d7, r2, r3
 800a60a:	eeb0 0a47 	vmov.f32	s0, s14
 800a60e:	eef0 0a67 	vmov.f32	s1, s15
 800a612:	f013 fe71 	bl	801e2f8 <sin>
 800a616:	ec51 0b10 	vmov	r0, r1, d0
 800a61a:	a35f      	add	r3, pc, #380	; (adr r3, 800a798 <faza+0xde8>)
 800a61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a620:	f7f6 f802 	bl	8000628 <__aeabi_dmul>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	4640      	mov	r0, r8
 800a62a:	4649      	mov	r1, r9
 800a62c:	f7f5 fe44 	bl	80002b8 <__aeabi_dsub>
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	4690      	mov	r8, r2
 800a636:	4699      	mov	r9, r3
 800a638:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	f7f5 fe3c 	bl	80002bc <__adddf3>
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	4610      	mov	r0, r2
 800a64a:	4619      	mov	r1, r3
 800a64c:	a34a      	add	r3, pc, #296	; (adr r3, 800a778 <faza+0xdc8>)
 800a64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a652:	f7f5 ffe9 	bl	8000628 <__aeabi_dmul>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	ec43 2b17 	vmov	d7, r2, r3
 800a65e:	eeb0 0a47 	vmov.f32	s0, s14
 800a662:	eef0 0a67 	vmov.f32	s1, s15
 800a666:	f013 fe47 	bl	801e2f8 <sin>
 800a66a:	ec51 0b10 	vmov	r0, r1, d0
 800a66e:	a34c      	add	r3, pc, #304	; (adr r3, 800a7a0 <faza+0xdf0>)
 800a670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a674:	f7f5 ffd8 	bl	8000628 <__aeabi_dmul>
 800a678:	4602      	mov	r2, r0
 800a67a:	460b      	mov	r3, r1
 800a67c:	4640      	mov	r0, r8
 800a67e:	4649      	mov	r1, r9
 800a680:	f7f5 fe1a 	bl	80002b8 <__aeabi_dsub>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	4690      	mov	r8, r2
 800a68a:	4699      	mov	r9, r3
 800a68c:	a33a      	add	r3, pc, #232	; (adr r3, 800a778 <faza+0xdc8>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a696:	f7f5 ffc7 	bl	8000628 <__aeabi_dmul>
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	ec43 2b17 	vmov	d7, r2, r3
 800a6a2:	eeb0 0a47 	vmov.f32	s0, s14
 800a6a6:	eef0 0a67 	vmov.f32	s1, s15
 800a6aa:	f013 fe25 	bl	801e2f8 <sin>
 800a6ae:	ec51 0b10 	vmov	r0, r1, d0
 800a6b2:	a33d      	add	r3, pc, #244	; (adr r3, 800a7a8 <faza+0xdf8>)
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	f7f5 ffb6 	bl	8000628 <__aeabi_dmul>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	f7f5 fdf8 	bl	80002b8 <__aeabi_dsub>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   phi2 = (1 + cos((M_PI / 180) * (asd))) / 2;
 800a6d0:	a329      	add	r3, pc, #164	; (adr r3, 800a778 <faza+0xdc8>)
 800a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a6da:	f7f5 ffa5 	bl	8000628 <__aeabi_dmul>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	ec43 2b17 	vmov	d7, r2, r3
 800a6e6:	eeb0 0a47 	vmov.f32	s0, s14
 800a6ea:	eef0 0a67 	vmov.f32	s1, s15
 800a6ee:	f013 fdaf 	bl	801e250 <cos>
 800a6f2:	ec51 0b10 	vmov	r0, r1, d0
 800a6f6:	f04f 0200 	mov.w	r2, #0
 800a6fa:	4b2e      	ldr	r3, [pc, #184]	; (800a7b4 <faza+0xe04>)
 800a6fc:	f7f5 fdde 	bl	80002bc <__adddf3>
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	4610      	mov	r0, r2
 800a706:	4619      	mov	r1, r3
 800a708:	f04f 0200 	mov.w	r2, #0
 800a70c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a710:	f7f6 f8b4 	bl	800087c <__aeabi_ddiv>
 800a714:	4602      	mov	r2, r0
 800a716:	460b      	mov	r3, r1
 800a718:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

   if((phi2 - phi1) < 0)
 800a71c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800a720:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a724:	f7f5 fdc8 	bl	80002b8 <__aeabi_dsub>
 800a728:	4602      	mov	r2, r0
 800a72a:	460b      	mov	r3, r1
 800a72c:	4610      	mov	r0, r2
 800a72e:	4619      	mov	r1, r3
 800a730:	f04f 0200 	mov.w	r2, #0
 800a734:	f04f 0300 	mov.w	r3, #0
 800a738:	f7f6 f9e8 	bl	8000b0c <__aeabi_dcmplt>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d005      	beq.n	800a74e <faza+0xd9e>
   {
      phi1 = -1 * phi1;
 800a742:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800a744:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a746:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800a74a:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
   }
   return (100 * phi1);
 800a74e:	f04f 0200 	mov.w	r2, #0
 800a752:	4b19      	ldr	r3, [pc, #100]	; (800a7b8 <faza+0xe08>)
 800a754:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a758:	f7f5 ff66 	bl	8000628 <__aeabi_dmul>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	ec43 2b17 	vmov	d7, r2, r3
}
 800a764:	eeb0 0a47 	vmov.f32	s0, s14
 800a768:	eef0 0a67 	vmov.f32	s1, s15
 800a76c:	3784      	adds	r7, #132	; 0x84
 800a76e:	46bd      	mov	sp, r7
 800a770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a774:	f3af 8000 	nop.w
 800a778:	a2529d39 	.word	0xa2529d39
 800a77c:	3f91df46 	.word	0x3f91df46
 800a780:	9db22d0e 	.word	0x9db22d0e
 800a784:	401927ef 	.word	0x401927ef
 800a788:	cccccccd 	.word	0xcccccccd
 800a78c:	4000cccc 	.word	0x4000cccc
 800a790:	d2f1a9fc 	.word	0xd2f1a9fc
 800a794:	3ff4624d 	.word	0x3ff4624d
 800a798:	04189375 	.word	0x04189375
 800a79c:	3fe50e56 	.word	0x3fe50e56
 800a7a0:	1cac0831 	.word	0x1cac0831
 800a7a4:	3fcb645a 	.word	0x3fcb645a
 800a7a8:	c28f5c29 	.word	0xc28f5c29
 800a7ac:	3fbc28f5 	.word	0x3fbc28f5
 800a7b0:	40668000 	.word	0x40668000
 800a7b4:	3ff00000 	.word	0x3ff00000
 800a7b8:	40590000 	.word	0x40590000
 800a7bc:	a0000000 	.word	0xa0000000
 800a7c0:	419af4f0 	.word	0x419af4f0
 800a7c4:	9bfba959 	.word	0x9bfba959
 800a7c8:	40e193e1 	.word	0x40e193e1
 800a7cc:	3b356034 	.word	0x3b356034
 800a7d0:	40765877 	.word	0x40765877
 800a7d4:	f40d8376 	.word	0xf40d8376
 800a7d8:	3f2421f5 	.word	0x3f2421f5
 800a7dc:	00000000 	.word	0x00000000
 800a7e0:	41775b01 	.word	0x41775b01
 800a7e4:	787456ea 	.word	0x787456ea
 800a7e8:	411d203b 	.word	0x411d203b
 800a7ec:	4424f2ff 	.word	0x4424f2ff
 800a7f0:	4060ded4 	.word	0x4060ded4
 800a7f4:	e618ce2d 	.word	0xe618ce2d
 800a7f8:	3f826d04 	.word	0x3f826d04
 800a7fc:	00000000 	.word	0x00000000
 800a800:	40f10430 	.word	0x40f10430
 800a804:	00000000 	.word	0x00000000
 800a808:	416c0f98 	.word	0x416c0f98

0800a80c <modd>:
double modd(double x, double y)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	ed87 0b02 	vstr	d0, [r7, #8]
 800a816:	ed87 1b00 	vstr	d1, [r7]
   double il;

   il = (int32_t)(x / y);
 800a81a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a81e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a822:	f7f6 f82b 	bl	800087c <__aeabi_ddiv>
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
 800a82a:	4610      	mov	r0, r2
 800a82c:	4619      	mov	r1, r3
 800a82e:	f7f6 f9ab 	bl	8000b88 <__aeabi_d2iz>
 800a832:	4603      	mov	r3, r0
 800a834:	4618      	mov	r0, r3
 800a836:	f7f5 fe8d 	bl	8000554 <__aeabi_i2d>
 800a83a:	4602      	mov	r2, r0
 800a83c:	460b      	mov	r3, r1
 800a83e:	e9c7 2304 	strd	r2, r3, [r7, #16]
   return (x - (il * y));
 800a842:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a846:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a84a:	f7f5 feed 	bl	8000628 <__aeabi_dmul>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a856:	f7f5 fd2f 	bl	80002b8 <__aeabi_dsub>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	ec43 2b17 	vmov	d7, r2, r3
}
 800a862:	eeb0 0a47 	vmov.f32	s0, s14
 800a866:	eef0 0a67 	vmov.f32	s1, s15
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <Wschod>:
void Wschod(double R, double M, double D, double *Wsch, double *Tran, double *Zach)
{
 800a870:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a874:	b0a2      	sub	sp, #136	; 0x88
 800a876:	af00      	add	r7, sp, #0
 800a878:	ed87 0b08 	vstr	d0, [r7, #32]
 800a87c:	ed87 1b06 	vstr	d1, [r7, #24]
 800a880:	ed87 2b04 	vstr	d2, [r7, #16]
 800a884:	60f8      	str	r0, [r7, #12]
 800a886:	60b9      	str	r1, [r7, #8]
 800a888:	607a      	str	r2, [r7, #4]
   double J, Cent, L, G, O, F, E, A, C, U, UD, P, Lat, Long, Req;
   Lat  = 52.291452;
 800a88a:	a3f1      	add	r3, pc, #964	; (adr r3, 800ac50 <Wschod+0x3e0>)
 800a88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a890:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
   Long = 17.363596;
 800a894:	a3f0      	add	r3, pc, #960	; (adr r3, 800ac58 <Wschod+0x3e8>)
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
   Req  = -0.833;
 800a89e:	a3f0      	add	r3, pc, #960	; (adr r3, 800ac60 <Wschod+0x3f0>)
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   J    = 367 * R - (int32_t)(7 * (R + (int32_t)((M + 9) / 12)) / 4) + (int32_t)(275 * M / 9) + D - 730531.5;
 800a8a8:	a3ef      	add	r3, pc, #956	; (adr r3, 800ac68 <Wschod+0x3f8>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a8b2:	f7f5 feb9 	bl	8000628 <__aeabi_dmul>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	4614      	mov	r4, r2
 800a8bc:	461d      	mov	r5, r3
 800a8be:	f04f 0200 	mov.w	r2, #0
 800a8c2:	4bdf      	ldr	r3, [pc, #892]	; (800ac40 <Wschod+0x3d0>)
 800a8c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a8c8:	f7f5 fcf8 	bl	80002bc <__adddf3>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	f04f 0200 	mov.w	r2, #0
 800a8d8:	4bda      	ldr	r3, [pc, #872]	; (800ac44 <Wschod+0x3d4>)
 800a8da:	f7f5 ffcf 	bl	800087c <__aeabi_ddiv>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4610      	mov	r0, r2
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	f7f6 f94f 	bl	8000b88 <__aeabi_d2iz>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7f5 fe31 	bl	8000554 <__aeabi_i2d>
 800a8f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a8f6:	f7f5 fce1 	bl	80002bc <__adddf3>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4610      	mov	r0, r2
 800a900:	4619      	mov	r1, r3
 800a902:	f04f 0200 	mov.w	r2, #0
 800a906:	4bd0      	ldr	r3, [pc, #832]	; (800ac48 <Wschod+0x3d8>)
 800a908:	f7f5 fe8e 	bl	8000628 <__aeabi_dmul>
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	4610      	mov	r0, r2
 800a912:	4619      	mov	r1, r3
 800a914:	f04f 0200 	mov.w	r2, #0
 800a918:	4bcc      	ldr	r3, [pc, #816]	; (800ac4c <Wschod+0x3dc>)
 800a91a:	f7f5 ffaf 	bl	800087c <__aeabi_ddiv>
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	4610      	mov	r0, r2
 800a924:	4619      	mov	r1, r3
 800a926:	f7f6 f92f 	bl	8000b88 <__aeabi_d2iz>
 800a92a:	4603      	mov	r3, r0
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7f5 fe11 	bl	8000554 <__aeabi_i2d>
 800a932:	4602      	mov	r2, r0
 800a934:	460b      	mov	r3, r1
 800a936:	4620      	mov	r0, r4
 800a938:	4629      	mov	r1, r5
 800a93a:	f7f5 fcbd 	bl	80002b8 <__aeabi_dsub>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	4614      	mov	r4, r2
 800a944:	461d      	mov	r5, r3
 800a946:	a3a0      	add	r3, pc, #640	; (adr r3, 800abc8 <Wschod+0x358>)
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a950:	f7f5 fe6a 	bl	8000628 <__aeabi_dmul>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	4610      	mov	r0, r2
 800a95a:	4619      	mov	r1, r3
 800a95c:	f04f 0200 	mov.w	r2, #0
 800a960:	4bb7      	ldr	r3, [pc, #732]	; (800ac40 <Wschod+0x3d0>)
 800a962:	f7f5 ff8b 	bl	800087c <__aeabi_ddiv>
 800a966:	4602      	mov	r2, r0
 800a968:	460b      	mov	r3, r1
 800a96a:	4610      	mov	r0, r2
 800a96c:	4619      	mov	r1, r3
 800a96e:	f7f6 f90b 	bl	8000b88 <__aeabi_d2iz>
 800a972:	4603      	mov	r3, r0
 800a974:	4618      	mov	r0, r3
 800a976:	f7f5 fded 	bl	8000554 <__aeabi_i2d>
 800a97a:	4602      	mov	r2, r0
 800a97c:	460b      	mov	r3, r1
 800a97e:	4620      	mov	r0, r4
 800a980:	4629      	mov	r1, r5
 800a982:	f7f5 fc9b 	bl	80002bc <__adddf3>
 800a986:	4602      	mov	r2, r0
 800a988:	460b      	mov	r3, r1
 800a98a:	4610      	mov	r0, r2
 800a98c:	4619      	mov	r1, r3
 800a98e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a992:	f7f5 fc93 	bl	80002bc <__adddf3>
 800a996:	4602      	mov	r2, r0
 800a998:	460b      	mov	r3, r1
 800a99a:	4610      	mov	r0, r2
 800a99c:	4619      	mov	r1, r3
 800a99e:	a38c      	add	r3, pc, #560	; (adr r3, 800abd0 <Wschod+0x360>)
 800a9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a4:	f7f5 fc88 	bl	80002b8 <__aeabi_dsub>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
   Cent = J / 36525;
 800a9b0:	a389      	add	r3, pc, #548	; (adr r3, 800abd8 <Wschod+0x368>)
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a9ba:	f7f5 ff5f 	bl	800087c <__aeabi_ddiv>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   L    = modd((4.8949504201433 + 628.331969753199 * Cent), 6.28318530718);
 800a9c6:	a386      	add	r3, pc, #536	; (adr r3, 800abe0 <Wschod+0x370>)
 800a9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a9d0:	f7f5 fe2a 	bl	8000628 <__aeabi_dmul>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	4610      	mov	r0, r2
 800a9da:	4619      	mov	r1, r3
 800a9dc:	a382      	add	r3, pc, #520	; (adr r3, 800abe8 <Wschod+0x378>)
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	f7f5 fc6b 	bl	80002bc <__adddf3>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	ec43 2b17 	vmov	d7, r2, r3
 800a9ee:	ed9f 1b80 	vldr	d1, [pc, #512]	; 800abf0 <Wschod+0x380>
 800a9f2:	eeb0 0a47 	vmov.f32	s0, s14
 800a9f6:	eef0 0a67 	vmov.f32	s1, s15
 800a9fa:	f7ff ff07 	bl	800a80c <modd>
 800a9fe:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
   G    = modd((6.2400408 + 628.3019501 * Cent), 6.28318530718);
 800aa02:	a37d      	add	r3, pc, #500	; (adr r3, 800abf8 <Wschod+0x388>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800aa0c:	f7f5 fe0c 	bl	8000628 <__aeabi_dmul>
 800aa10:	4602      	mov	r2, r0
 800aa12:	460b      	mov	r3, r1
 800aa14:	4610      	mov	r0, r2
 800aa16:	4619      	mov	r1, r3
 800aa18:	a379      	add	r3, pc, #484	; (adr r3, 800ac00 <Wschod+0x390>)
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	f7f5 fc4d 	bl	80002bc <__adddf3>
 800aa22:	4602      	mov	r2, r0
 800aa24:	460b      	mov	r3, r1
 800aa26:	ec43 2b17 	vmov	d7, r2, r3
 800aa2a:	ed9f 1b71 	vldr	d1, [pc, #452]	; 800abf0 <Wschod+0x380>
 800aa2e:	eeb0 0a47 	vmov.f32	s0, s14
 800aa32:	eef0 0a67 	vmov.f32	s1, s15
 800aa36:	f7ff fee9 	bl	800a80c <modd>
 800aa3a:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   O    = 0.409093 - 0.0002269 * Cent;
 800aa3e:	a372      	add	r3, pc, #456	; (adr r3, 800ac08 <Wschod+0x398>)
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800aa48:	f7f5 fdee 	bl	8000628 <__aeabi_dmul>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	a16f      	add	r1, pc, #444	; (adr r1, 800ac10 <Wschod+0x3a0>)
 800aa52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa56:	f7f5 fc2f 	bl	80002b8 <__aeabi_dsub>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
   F    = 0.033423 * sin(G) + 0.00034907 * sin(2 * G);
 800aa62:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800aa66:	f013 fc47 	bl	801e2f8 <sin>
 800aa6a:	ec51 0b10 	vmov	r0, r1, d0
 800aa6e:	a36a      	add	r3, pc, #424	; (adr r3, 800ac18 <Wschod+0x3a8>)
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	f7f5 fdd8 	bl	8000628 <__aeabi_dmul>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4614      	mov	r4, r2
 800aa7e:	461d      	mov	r5, r3
 800aa80:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	f7f5 fc18 	bl	80002bc <__adddf3>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	ec43 2b17 	vmov	d7, r2, r3
 800aa94:	eeb0 0a47 	vmov.f32	s0, s14
 800aa98:	eef0 0a67 	vmov.f32	s1, s15
 800aa9c:	f013 fc2c 	bl	801e2f8 <sin>
 800aaa0:	ec51 0b10 	vmov	r0, r1, d0
 800aaa4:	a35e      	add	r3, pc, #376	; (adr r3, 800ac20 <Wschod+0x3b0>)
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	f7f5 fdbd 	bl	8000628 <__aeabi_dmul>
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	4620      	mov	r0, r4
 800aab4:	4629      	mov	r1, r5
 800aab6:	f7f5 fc01 	bl	80002bc <__adddf3>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
   E    = 0.0430398 * sin(2 * (L + F)) - 0.00092502 * sin(4 * (L + F)) - F;
 800aac2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aac6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800aaca:	f7f5 fbf7 	bl	80002bc <__adddf3>
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	4610      	mov	r0, r2
 800aad4:	4619      	mov	r1, r3
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	f7f5 fbef 	bl	80002bc <__adddf3>
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	ec43 2b17 	vmov	d7, r2, r3
 800aae6:	eeb0 0a47 	vmov.f32	s0, s14
 800aaea:	eef0 0a67 	vmov.f32	s1, s15
 800aaee:	f013 fc03 	bl	801e2f8 <sin>
 800aaf2:	ec51 0b10 	vmov	r0, r1, d0
 800aaf6:	a34c      	add	r3, pc, #304	; (adr r3, 800ac28 <Wschod+0x3b8>)
 800aaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafc:	f7f5 fd94 	bl	8000628 <__aeabi_dmul>
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	4614      	mov	r4, r2
 800ab06:	461d      	mov	r5, r3
 800ab08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab0c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ab10:	f7f5 fbd4 	bl	80002bc <__adddf3>
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	4610      	mov	r0, r2
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	f04f 0200 	mov.w	r2, #0
 800ab20:	4b4a      	ldr	r3, [pc, #296]	; (800ac4c <Wschod+0x3dc>)
 800ab22:	f7f5 fd81 	bl	8000628 <__aeabi_dmul>
 800ab26:	4602      	mov	r2, r0
 800ab28:	460b      	mov	r3, r1
 800ab2a:	ec43 2b17 	vmov	d7, r2, r3
 800ab2e:	eeb0 0a47 	vmov.f32	s0, s14
 800ab32:	eef0 0a67 	vmov.f32	s1, s15
 800ab36:	f013 fbdf 	bl	801e2f8 <sin>
 800ab3a:	ec51 0b10 	vmov	r0, r1, d0
 800ab3e:	a33c      	add	r3, pc, #240	; (adr r3, 800ac30 <Wschod+0x3c0>)
 800ab40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab44:	f7f5 fd70 	bl	8000628 <__aeabi_dmul>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	4629      	mov	r1, r5
 800ab50:	f7f5 fbb2 	bl	80002b8 <__aeabi_dsub>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4610      	mov	r0, r2
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab60:	f7f5 fbaa 	bl	80002b8 <__aeabi_dsub>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   A    = asin(sin(O) * sin(L + F));
 800ab6c:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800ab70:	f013 fbc2 	bl	801e2f8 <sin>
 800ab74:	ec55 4b10 	vmov	r4, r5, d0
 800ab78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab7c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ab80:	f7f5 fb9c 	bl	80002bc <__adddf3>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	ec43 2b17 	vmov	d7, r2, r3
 800ab8c:	eeb0 0a47 	vmov.f32	s0, s14
 800ab90:	eef0 0a67 	vmov.f32	s1, s15
 800ab94:	f013 fbb0 	bl	801e2f8 <sin>
 800ab98:	ec53 2b10 	vmov	r2, r3, d0
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	4629      	mov	r1, r5
 800aba0:	f7f5 fd42 	bl	8000628 <__aeabi_dmul>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	ec43 2b17 	vmov	d7, r2, r3
 800abac:	eeb0 0a47 	vmov.f32	s0, s14
 800abb0:	eef0 0a67 	vmov.f32	s1, s15
 800abb4:	f013 fc2c 	bl	801e410 <asin>
 800abb8:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
   C    = (sin(0.017453293 * Req) - sin(0.017453293 * Lat) * sin(A)) / (cos(0.017453293 * Lat) * cos(A));
 800abbc:	a31e      	add	r3, pc, #120	; (adr r3, 800ac38 <Wschod+0x3c8>)
 800abbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc2:	e055      	b.n	800ac70 <Wschod+0x400>
 800abc4:	f3af 8000 	nop.w
 800abc8:	00000000 	.word	0x00000000
 800abcc:	40713000 	.word	0x40713000
 800abd0:	00000000 	.word	0x00000000
 800abd4:	41264b47 	.word	0x41264b47
 800abd8:	00000000 	.word	0x00000000
 800abdc:	40e1d5a0 	.word	0x40e1d5a0
 800abe0:	dfc20a02 	.word	0xdfc20a02
 800abe4:	4083a2a7 	.word	0x4083a2a7
 800abe8:	e2083a4d 	.word	0xe2083a4d
 800abec:	4013946d 	.word	0x4013946d
 800abf0:	54442eea 	.word	0x54442eea
 800abf4:	401921fb 	.word	0x401921fb
 800abf8:	64d06431 	.word	0x64d06431
 800abfc:	4083a26a 	.word	0x4083a26a
 800ac00:	4166d29d 	.word	0x4166d29d
 800ac04:	4018f5cd 	.word	0x4018f5cd
 800ac08:	28af4bb3 	.word	0x28af4bb3
 800ac0c:	3f2dbd80 	.word	0x3f2dbd80
 800ac10:	68017119 	.word	0x68017119
 800ac14:	3fda2e94 	.word	0x3fda2e94
 800ac18:	c7de5083 	.word	0xc7de5083
 800ac1c:	3fa11cd1 	.word	0x3fa11cd1
 800ac20:	3be86381 	.word	0x3be86381
 800ac24:	3f36e06c 	.word	0x3f36e06c
 800ac28:	0ada4e96 	.word	0x0ada4e96
 800ac2c:	3fa60950 	.word	0x3fa60950
 800ac30:	52f6720d 	.word	0x52f6720d
 800ac34:	3f4e4fa1 	.word	0x3f4e4fa1
 800ac38:	aa91ed06 	.word	0xaa91ed06
 800ac3c:	3f91df46 	.word	0x3f91df46
 800ac40:	40220000 	.word	0x40220000
 800ac44:	40280000 	.word	0x40280000
 800ac48:	401c0000 	.word	0x401c0000
 800ac4c:	40100000 	.word	0x40100000
 800ac50:	4c942d49 	.word	0x4c942d49
 800ac54:	404a254e 	.word	0x404a254e
 800ac58:	a0a0f4d8 	.word	0xa0a0f4d8
 800ac5c:	40315d14 	.word	0x40315d14
 800ac60:	9db22d0e 	.word	0x9db22d0e
 800ac64:	bfeaa7ef 	.word	0xbfeaa7ef
 800ac68:	00000000 	.word	0x00000000
 800ac6c:	4076f000 	.word	0x4076f000
 800ac70:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800ac74:	f7f5 fcd8 	bl	8000628 <__aeabi_dmul>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	ec43 2b17 	vmov	d7, r2, r3
 800ac80:	eeb0 0a47 	vmov.f32	s0, s14
 800ac84:	eef0 0a67 	vmov.f32	s1, s15
 800ac88:	f013 fb36 	bl	801e2f8 <sin>
 800ac8c:	ec55 4b10 	vmov	r4, r5, d0
 800ac90:	a385      	add	r3, pc, #532	; (adr r3, 800aea8 <Wschod+0x638>)
 800ac92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ac9a:	f7f5 fcc5 	bl	8000628 <__aeabi_dmul>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	460b      	mov	r3, r1
 800aca2:	ec43 2b17 	vmov	d7, r2, r3
 800aca6:	eeb0 0a47 	vmov.f32	s0, s14
 800acaa:	eef0 0a67 	vmov.f32	s1, s15
 800acae:	f013 fb23 	bl	801e2f8 <sin>
 800acb2:	ec59 8b10 	vmov	r8, r9, d0
 800acb6:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800acba:	f013 fb1d 	bl	801e2f8 <sin>
 800acbe:	ec53 2b10 	vmov	r2, r3, d0
 800acc2:	4640      	mov	r0, r8
 800acc4:	4649      	mov	r1, r9
 800acc6:	f7f5 fcaf 	bl	8000628 <__aeabi_dmul>
 800acca:	4602      	mov	r2, r0
 800accc:	460b      	mov	r3, r1
 800acce:	4620      	mov	r0, r4
 800acd0:	4629      	mov	r1, r5
 800acd2:	f7f5 faf1 	bl	80002b8 <__aeabi_dsub>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	4614      	mov	r4, r2
 800acdc:	461d      	mov	r5, r3
 800acde:	a372      	add	r3, pc, #456	; (adr r3, 800aea8 <Wschod+0x638>)
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ace8:	f7f5 fc9e 	bl	8000628 <__aeabi_dmul>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	ec43 2b17 	vmov	d7, r2, r3
 800acf4:	eeb0 0a47 	vmov.f32	s0, s14
 800acf8:	eef0 0a67 	vmov.f32	s1, s15
 800acfc:	f013 faa8 	bl	801e250 <cos>
 800ad00:	ec59 8b10 	vmov	r8, r9, d0
 800ad04:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800ad08:	f013 faa2 	bl	801e250 <cos>
 800ad0c:	ec53 2b10 	vmov	r2, r3, d0
 800ad10:	4640      	mov	r0, r8
 800ad12:	4649      	mov	r1, r9
 800ad14:	f7f5 fc88 	bl	8000628 <__aeabi_dmul>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	4629      	mov	r1, r5
 800ad20:	f7f5 fdac 	bl	800087c <__aeabi_ddiv>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

   *Wsch = (3.14159 - (E + 0.017453293 * Long + 1 * acos(C))) * 57.29577951 / 15;
 800ad2c:	a35e      	add	r3, pc, #376	; (adr r3, 800aea8 <Wschod+0x638>)
 800ad2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad32:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800ad36:	f7f5 fc77 	bl	8000628 <__aeabi_dmul>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	4610      	mov	r0, r2
 800ad40:	4619      	mov	r1, r3
 800ad42:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ad46:	f7f5 fab9 	bl	80002bc <__adddf3>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	4614      	mov	r4, r2
 800ad50:	461d      	mov	r5, r3
 800ad52:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800ad56:	f013 fb27 	bl	801e3a8 <acos>
 800ad5a:	ec53 2b10 	vmov	r2, r3, d0
 800ad5e:	4620      	mov	r0, r4
 800ad60:	4629      	mov	r1, r5
 800ad62:	f7f5 faab 	bl	80002bc <__adddf3>
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	a151      	add	r1, pc, #324	; (adr r1, 800aeb0 <Wschod+0x640>)
 800ad6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad70:	f7f5 faa2 	bl	80002b8 <__aeabi_dsub>
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	4610      	mov	r0, r2
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	a34e      	add	r3, pc, #312	; (adr r3, 800aeb8 <Wschod+0x648>)
 800ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad82:	f7f5 fc51 	bl	8000628 <__aeabi_dmul>
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	f04f 0200 	mov.w	r2, #0
 800ad92:	4b4b      	ldr	r3, [pc, #300]	; (800aec0 <Wschod+0x650>)
 800ad94:	f7f5 fd72 	bl	800087c <__aeabi_ddiv>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	68f9      	ldr	r1, [r7, #12]
 800ad9e:	e9c1 2300 	strd	r2, r3, [r1]
   *Tran = (3.14159 - (E + 0.017453293 * Long + 0 * acos(C))) * 57.29577951 / 15;
 800ada2:	a341      	add	r3, pc, #260	; (adr r3, 800aea8 <Wschod+0x638>)
 800ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800adac:	f7f5 fc3c 	bl	8000628 <__aeabi_dmul>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4610      	mov	r0, r2
 800adb6:	4619      	mov	r1, r3
 800adb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800adbc:	f7f5 fa7e 	bl	80002bc <__adddf3>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4614      	mov	r4, r2
 800adc6:	461d      	mov	r5, r3
 800adc8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800adcc:	f013 faec 	bl	801e3a8 <acos>
 800add0:	ec51 0b10 	vmov	r0, r1, d0
 800add4:	f04f 0200 	mov.w	r2, #0
 800add8:	f04f 0300 	mov.w	r3, #0
 800addc:	f7f5 fc24 	bl	8000628 <__aeabi_dmul>
 800ade0:	4602      	mov	r2, r0
 800ade2:	460b      	mov	r3, r1
 800ade4:	4620      	mov	r0, r4
 800ade6:	4629      	mov	r1, r5
 800ade8:	f7f5 fa68 	bl	80002bc <__adddf3>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	a12f      	add	r1, pc, #188	; (adr r1, 800aeb0 <Wschod+0x640>)
 800adf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adf6:	f7f5 fa5f 	bl	80002b8 <__aeabi_dsub>
 800adfa:	4602      	mov	r2, r0
 800adfc:	460b      	mov	r3, r1
 800adfe:	4610      	mov	r0, r2
 800ae00:	4619      	mov	r1, r3
 800ae02:	a32d      	add	r3, pc, #180	; (adr r3, 800aeb8 <Wschod+0x648>)
 800ae04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae08:	f7f5 fc0e 	bl	8000628 <__aeabi_dmul>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	4610      	mov	r0, r2
 800ae12:	4619      	mov	r1, r3
 800ae14:	f04f 0200 	mov.w	r2, #0
 800ae18:	4b29      	ldr	r3, [pc, #164]	; (800aec0 <Wschod+0x650>)
 800ae1a:	f7f5 fd2f 	bl	800087c <__aeabi_ddiv>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	68b9      	ldr	r1, [r7, #8]
 800ae24:	e9c1 2300 	strd	r2, r3, [r1]
   *Zach = (3.14159 - (E + 0.017453293 * Long + -1 * acos(C))) * 57.29577951 / 15;
 800ae28:	a31f      	add	r3, pc, #124	; (adr r3, 800aea8 <Wschod+0x638>)
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800ae32:	f7f5 fbf9 	bl	8000628 <__aeabi_dmul>
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ae42:	f7f5 fa3b 	bl	80002bc <__adddf3>
 800ae46:	4602      	mov	r2, r0
 800ae48:	460b      	mov	r3, r1
 800ae4a:	4614      	mov	r4, r2
 800ae4c:	461d      	mov	r5, r3
 800ae4e:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800ae52:	f013 faa9 	bl	801e3a8 <acos>
 800ae56:	ec53 2b10 	vmov	r2, r3, d0
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	f7f5 fa2b 	bl	80002b8 <__aeabi_dsub>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	a112      	add	r1, pc, #72	; (adr r1, 800aeb0 <Wschod+0x640>)
 800ae68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae6c:	f7f5 fa24 	bl	80002b8 <__aeabi_dsub>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	4610      	mov	r0, r2
 800ae76:	4619      	mov	r1, r3
 800ae78:	a30f      	add	r3, pc, #60	; (adr r3, 800aeb8 <Wschod+0x648>)
 800ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7e:	f7f5 fbd3 	bl	8000628 <__aeabi_dmul>
 800ae82:	4602      	mov	r2, r0
 800ae84:	460b      	mov	r3, r1
 800ae86:	4610      	mov	r0, r2
 800ae88:	4619      	mov	r1, r3
 800ae8a:	f04f 0200 	mov.w	r2, #0
 800ae8e:	4b0c      	ldr	r3, [pc, #48]	; (800aec0 <Wschod+0x650>)
 800ae90:	f7f5 fcf4 	bl	800087c <__aeabi_ddiv>
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	6879      	ldr	r1, [r7, #4]
 800ae9a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800ae9e:	bf00      	nop
 800aea0:	3788      	adds	r7, #136	; 0x88
 800aea2:	46bd      	mov	sp, r7
 800aea4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800aea8:	aa91ed06 	.word	0xaa91ed06
 800aeac:	3f91df46 	.word	0x3f91df46
 800aeb0:	f01b866e 	.word	0xf01b866e
 800aeb4:	400921f9 	.word	0x400921f9
 800aeb8:	1a5d2372 	.word	0x1a5d2372
 800aebc:	404ca5dc 	.word	0x404ca5dc
 800aec0:	402e0000 	.word	0x402e0000

0800aec4 <mapf>:
static float mapf(float val, float in_min, float in_max, float out_min, float out_max)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b087      	sub	sp, #28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	ed87 0a05 	vstr	s0, [r7, #20]
 800aece:	edc7 0a04 	vstr	s1, [r7, #16]
 800aed2:	ed87 1a03 	vstr	s2, [r7, #12]
 800aed6:	edc7 1a02 	vstr	s3, [r7, #8]
 800aeda:	ed87 2a01 	vstr	s4, [r7, #4]
   return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800aede:	ed97 7a05 	vldr	s14, [r7, #20]
 800aee2:	edd7 7a04 	vldr	s15, [r7, #16]
 800aee6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aeea:	edd7 6a01 	vldr	s13, [r7, #4]
 800aeee:	edd7 7a02 	vldr	s15, [r7, #8]
 800aef2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800aef6:	ee67 6a27 	vmul.f32	s13, s14, s15
 800aefa:	ed97 7a03 	vldr	s14, [r7, #12]
 800aefe:	edd7 7a04 	vldr	s15, [r7, #16]
 800af02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af0a:	edd7 7a02 	vldr	s15, [r7, #8]
 800af0e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800af12:	eeb0 0a67 	vmov.f32	s0, s15
 800af16:	371c      	adds	r7, #28
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <map>:
static uint32_t map(uint32_t val, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
 800af2c:	603b      	str	r3, [r7, #0]
   return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	69b9      	ldr	r1, [r7, #24]
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	1a8a      	subs	r2, r1, r2
 800af3a:	fb03 f202 	mul.w	r2, r3, r2
 800af3e:	6879      	ldr	r1, [r7, #4]
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	1acb      	subs	r3, r1, r3
 800af44:	fbb2 f2f3 	udiv	r2, r2, r3
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	4413      	add	r3, r2
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	460b      	mov	r3, r1
 800af62:	807b      	strh	r3, [r7, #2]
   if(huart->Instance == USART1)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a12      	ldr	r2, [pc, #72]	; (800afb4 <HAL_UARTEx_RxEventCallback+0x5c>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d10b      	bne.n	800af86 <HAL_UARTEx_RxEventCallback+0x2e>
   {
      Rfp.DataSize = Size;
 800af6e:	887b      	ldrh	r3, [r7, #2]
 800af70:	4a11      	ldr	r2, [pc, #68]	; (800afb8 <HAL_UARTEx_RxEventCallback+0x60>)
 800af72:	6093      	str	r3, [r2, #8]
      RFP_InterruptTask();
 800af74:	f001 fecc 	bl	800cd10 <RFP_InterruptTask>
      HAL_GPIO_TogglePin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 800af78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800af7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af80:	f003 ffa2 	bl	800eec8 <HAL_GPIO_TogglePin>
      else
      {
         HAL_UARTEx_ReceiveToIdle_DMA(&huart2, PMSData, 100);
      }
   }
}
 800af84:	e011      	b.n	800afaa <HAL_UARTEx_RxEventCallback+0x52>
   else if(huart->Instance == USART2)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a0c      	ldr	r2, [pc, #48]	; (800afbc <HAL_UARTEx_RxEventCallback+0x64>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d10c      	bne.n	800afaa <HAL_UARTEx_RxEventCallback+0x52>
      if(PMSData[0] == 0x42)
 800af90:	4b0b      	ldr	r3, [pc, #44]	; (800afc0 <HAL_UARTEx_RxEventCallback+0x68>)
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	2b42      	cmp	r3, #66	; 0x42
 800af96:	d103      	bne.n	800afa0 <HAL_UARTEx_RxEventCallback+0x48>
         PMSFlag = 1;
 800af98:	4b0a      	ldr	r3, [pc, #40]	; (800afc4 <HAL_UARTEx_RxEventCallback+0x6c>)
 800af9a:	2201      	movs	r2, #1
 800af9c:	701a      	strb	r2, [r3, #0]
}
 800af9e:	e004      	b.n	800afaa <HAL_UARTEx_RxEventCallback+0x52>
         HAL_UARTEx_ReceiveToIdle_DMA(&huart2, PMSData, 100);
 800afa0:	2264      	movs	r2, #100	; 0x64
 800afa2:	4907      	ldr	r1, [pc, #28]	; (800afc0 <HAL_UARTEx_RxEventCallback+0x68>)
 800afa4:	4808      	ldr	r0, [pc, #32]	; (800afc8 <HAL_UARTEx_RxEventCallback+0x70>)
 800afa6:	f00a fae7 	bl	8015578 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800afaa:	bf00      	nop
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	40013800 	.word	0x40013800
 800afb8:	20003f60 	.word	0x20003f60
 800afbc:	40004400 	.word	0x40004400
 800afc0:	20003fd8 	.word	0x20003fd8
 800afc4:	2000403c 	.word	0x2000403c
 800afc8:	20004894 	.word	0x20004894

0800afcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b088      	sub	sp, #32
 800afd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afd2:	f107 030c 	add.w	r3, r7, #12
 800afd6:	2200      	movs	r2, #0
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	605a      	str	r2, [r3, #4]
 800afdc:	609a      	str	r2, [r3, #8]
 800afde:	60da      	str	r2, [r3, #12]
 800afe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800afe2:	4b46      	ldr	r3, [pc, #280]	; (800b0fc <MX_GPIO_Init+0x130>)
 800afe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afe6:	4a45      	ldr	r2, [pc, #276]	; (800b0fc <MX_GPIO_Init+0x130>)
 800afe8:	f043 0304 	orr.w	r3, r3, #4
 800afec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800afee:	4b43      	ldr	r3, [pc, #268]	; (800b0fc <MX_GPIO_Init+0x130>)
 800aff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aff2:	f003 0304 	and.w	r3, r3, #4
 800aff6:	60bb      	str	r3, [r7, #8]
 800aff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800affa:	4b40      	ldr	r3, [pc, #256]	; (800b0fc <MX_GPIO_Init+0x130>)
 800affc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800affe:	4a3f      	ldr	r2, [pc, #252]	; (800b0fc <MX_GPIO_Init+0x130>)
 800b000:	f043 0301 	orr.w	r3, r3, #1
 800b004:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b006:	4b3d      	ldr	r3, [pc, #244]	; (800b0fc <MX_GPIO_Init+0x130>)
 800b008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b00a:	f003 0301 	and.w	r3, r3, #1
 800b00e:	607b      	str	r3, [r7, #4]
 800b010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b012:	4b3a      	ldr	r3, [pc, #232]	; (800b0fc <MX_GPIO_Init+0x130>)
 800b014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b016:	4a39      	ldr	r2, [pc, #228]	; (800b0fc <MX_GPIO_Init+0x130>)
 800b018:	f043 0302 	orr.w	r3, r3, #2
 800b01c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b01e:	4b37      	ldr	r3, [pc, #220]	; (800b0fc <MX_GPIO_Init+0x130>)
 800b020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b022:	f003 0302 	and.w	r3, r3, #2
 800b026:	603b      	str	r3, [r7, #0]
 800b028:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSD1306_CS_Pin|PMS3003_RST_Pin, GPIO_PIN_SET);
 800b02a:	2201      	movs	r2, #1
 800b02c:	f241 0110 	movw	r1, #4112	; 0x1010
 800b030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b034:	f003 ff30 	bl	800ee98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 800b038:	2201      	movs	r2, #1
 800b03a:	f648 61c3 	movw	r1, #36547	; 0x8ec3
 800b03e:	4830      	ldr	r0, [pc, #192]	; (800b100 <MX_GPIO_Init+0x134>)
 800b040:	f003 ff2a 	bl	800ee98 <HAL_GPIO_WritePin>
                          |PMS3003_SET_Pin|FRAM_CS_Pin|FRAM_WP_Pin|FLASH_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEARTBEAT_Pin|BME280_CS_Pin|FRAM_HOLD_Pin, GPIO_PIN_RESET);
 800b044:	2200      	movs	r2, #0
 800b046:	f44f 5144 	mov.w	r1, #12544	; 0x3100
 800b04a:	482d      	ldr	r0, [pc, #180]	; (800b100 <MX_GPIO_Init+0x134>)
 800b04c:	f003 ff24 	bl	800ee98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HC12_SET_Pin|SIGNAL_Pin, GPIO_PIN_RESET);
 800b050:	2200      	movs	r2, #0
 800b052:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 800b056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b05a:	f003 ff1d 	bl	800ee98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SSD1306_CS_Pin|PMS3003_RST_Pin|SIGNAL_Pin;
 800b05e:	f249 0310 	movw	r3, #36880	; 0x9010
 800b062:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b064:	2301      	movs	r3, #1
 800b066:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b068:	2300      	movs	r3, #0
 800b06a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b06c:	2303      	movs	r3, #3
 800b06e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b070:	f107 030c 	add.w	r3, r7, #12
 800b074:	4619      	mov	r1, r3
 800b076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b07a:	f003 fd63 	bl	800eb44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 800b07e:	f649 63c3 	movw	r3, #40643	; 0x9ec3
 800b082:	60fb      	str	r3, [r7, #12]
                          |HEARTBEAT_Pin|PMS3003_SET_Pin|FRAM_CS_Pin|FRAM_WP_Pin
                          |FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b084:	2301      	movs	r3, #1
 800b086:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b088:	2300      	movs	r3, #0
 800b08a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b08c:	2303      	movs	r3, #3
 800b08e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b090:	f107 030c 	add.w	r3, r7, #12
 800b094:	4619      	mov	r1, r3
 800b096:	481a      	ldr	r0, [pc, #104]	; (800b100 <MX_GPIO_Init+0x134>)
 800b098:	f003 fd54 	bl	800eb44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EPAPIER_BUSY_Pin|ENCODER_SWITCH_Pin;
 800b09c:	f244 0304 	movw	r3, #16388	; 0x4004
 800b0a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0aa:	f107 030c 	add.w	r3, r7, #12
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4813      	ldr	r0, [pc, #76]	; (800b100 <MX_GPIO_Init+0x134>)
 800b0b2:	f003 fd47 	bl	800eb44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BME280_CS_Pin|FRAM_HOLD_Pin;
 800b0b6:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800b0ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0c8:	f107 030c 	add.w	r3, r7, #12
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	480c      	ldr	r0, [pc, #48]	; (800b100 <MX_GPIO_Init+0x134>)
 800b0d0:	f003 fd38 	bl	800eb44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HC12_SET_Pin;
 800b0d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HC12_SET_GPIO_Port, &GPIO_InitStruct);
 800b0e6:	f107 030c 	add.w	r3, r7, #12
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b0f0:	f003 fd28 	bl	800eb44 <HAL_GPIO_Init>

}
 800b0f4:	bf00      	nop
 800b0f6:	3720      	adds	r7, #32
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	40021000 	.word	0x40021000
 800b100:	48000400 	.word	0x48000400

0800b104 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800b108:	4b0b      	ldr	r3, [pc, #44]	; (800b138 <MX_IWDG_Init+0x34>)
 800b10a:	4a0c      	ldr	r2, [pc, #48]	; (800b13c <MX_IWDG_Init+0x38>)
 800b10c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800b10e:	4b0a      	ldr	r3, [pc, #40]	; (800b138 <MX_IWDG_Init+0x34>)
 800b110:	2206      	movs	r2, #6
 800b112:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800b114:	4b08      	ldr	r3, [pc, #32]	; (800b138 <MX_IWDG_Init+0x34>)
 800b116:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b11a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800b11c:	4b06      	ldr	r3, [pc, #24]	; (800b138 <MX_IWDG_Init+0x34>)
 800b11e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b122:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800b124:	4804      	ldr	r0, [pc, #16]	; (800b138 <MX_IWDG_Init+0x34>)
 800b126:	f003 fee9 	bl	800eefc <HAL_IWDG_Init>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800b130:	f000 f8de 	bl	800b2f0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800b134:	bf00      	nop
 800b136:	bd80      	pop	{r7, pc}
 800b138:	200040c8 	.word	0x200040c8
 800b13c:	40003000 	.word	0x40003000

0800b140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b144:	f003 f88b 	bl	800e25e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b148:	f000 f820 	bl	800b18c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b14c:	f7ff ff3e 	bl	800afcc <MX_GPIO_Init>
  MX_DMA_Init();
 800b150:	f7f9 fc0a 	bl	8004968 <MX_DMA_Init>
  MX_RTC_Init();
 800b154:	f002 f8a0 	bl	800d298 <MX_RTC_Init>
  MX_SPI1_Init();
 800b158:	f002 f914 	bl	800d384 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800b15c:	f002 feba 	bl	800ded4 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800b160:	f002 fd50 	bl	800dc04 <MX_TIM5_Init>
  MX_IWDG_Init();
 800b164:	f7ff ffce 	bl	800b104 <MX_IWDG_Init>
  MX_TIM16_Init();
 800b168:	f002 fda2 	bl	800dcb0 <MX_TIM16_Init>
  MX_TIM1_Init();
 800b16c:	f002 fc9e 	bl	800daac <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800b170:	f002 ff00 	bl	800df74 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800b174:	f000 f86c 	bl	800b250 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800b178:	f00a faec 	bl	8015754 <osKernelInitialize>
  MX_FREERTOS_Init();
 800b17c:	f7fa f9e2 	bl	8005544 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800b180:	f00a fb0c 	bl	801579c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   HAL_NVIC_SystemReset();
 800b184:	f003 f99d 	bl	800e4c2 <HAL_NVIC_SystemReset>
   while(1)
 800b188:	e7fe      	b.n	800b188 <main+0x48>
	...

0800b18c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b098      	sub	sp, #96	; 0x60
 800b190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b192:	f107 0318 	add.w	r3, r7, #24
 800b196:	2248      	movs	r2, #72	; 0x48
 800b198:	2100      	movs	r1, #0
 800b19a:	4618      	mov	r0, r3
 800b19c:	f00e fbf0 	bl	8019980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b1a0:	1d3b      	adds	r3, r7, #4
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	605a      	str	r2, [r3, #4]
 800b1a8:	609a      	str	r2, [r3, #8]
 800b1aa:	60da      	str	r2, [r3, #12]
 800b1ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	f003 ff34 	bl	800f01c <HAL_PWREx_ControlVoltageScaling>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d001      	beq.n	800b1be <SystemClock_Config+0x32>
  {
    Error_Handler();
 800b1ba:	f000 f899 	bl	800b2f0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800b1be:	f003 fefd 	bl	800efbc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800b1c2:	4b22      	ldr	r3, [pc, #136]	; (800b24c <SystemClock_Config+0xc0>)
 800b1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1c8:	4a20      	ldr	r2, [pc, #128]	; (800b24c <SystemClock_Config+0xc0>)
 800b1ca:	f023 0318 	bic.w	r3, r3, #24
 800b1ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800b1d2:	231c      	movs	r3, #28
 800b1d4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800b1e6:	2360      	movs	r3, #96	; 0x60
 800b1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 800b1f6:	233c      	movs	r3, #60	; 0x3c
 800b1f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b1fa:	2302      	movs	r3, #2
 800b1fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800b1fe:	2302      	movs	r3, #2
 800b200:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800b202:	2302      	movs	r3, #2
 800b204:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b206:	f107 0318 	add.w	r3, r7, #24
 800b20a:	4618      	mov	r0, r3
 800b20c:	f003 ffaa 	bl	800f164 <HAL_RCC_OscConfig>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d001      	beq.n	800b21a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800b216:	f000 f86b 	bl	800b2f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b21a:	230f      	movs	r3, #15
 800b21c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b21e:	2303      	movs	r3, #3
 800b220:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b222:	2300      	movs	r3, #0
 800b224:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b226:	2300      	movs	r3, #0
 800b228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b22a:	2300      	movs	r3, #0
 800b22c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800b22e:	1d3b      	adds	r3, r7, #4
 800b230:	2105      	movs	r1, #5
 800b232:	4618      	mov	r0, r3
 800b234:	f004 fc12 	bl	800fa5c <HAL_RCC_ClockConfig>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d001      	beq.n	800b242 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800b23e:	f000 f857 	bl	800b2f0 <Error_Handler>
  }
}
 800b242:	bf00      	nop
 800b244:	3760      	adds	r7, #96	; 0x60
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	40021000 	.word	0x40021000

0800b250 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800b254:	2200      	movs	r2, #0
 800b256:	2105      	movs	r1, #5
 800b258:	200b      	movs	r0, #11
 800b25a:	f003 f908 	bl	800e46e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800b25e:	200b      	movs	r0, #11
 800b260:	f003 f921 	bl	800e4a6 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800b264:	2200      	movs	r2, #0
 800b266:	2105      	movs	r1, #5
 800b268:	2025      	movs	r0, #37	; 0x25
 800b26a:	f003 f900 	bl	800e46e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b26e:	2025      	movs	r0, #37	; 0x25
 800b270:	f003 f919 	bl	800e4a6 <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800b274:	2200      	movs	r2, #0
 800b276:	2105      	movs	r1, #5
 800b278:	2019      	movs	r0, #25
 800b27a:	f003 f8f8 	bl	800e46e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800b27e:	2019      	movs	r0, #25
 800b280:	f003 f911 	bl	800e4a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800b284:	2200      	movs	r2, #0
 800b286:	2105      	movs	r1, #5
 800b288:	200c      	movs	r0, #12
 800b28a:	f003 f8f0 	bl	800e46e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800b28e:	200c      	movs	r0, #12
 800b290:	f003 f909 	bl	800e4a6 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800b294:	2200      	movs	r2, #0
 800b296:	2105      	movs	r1, #5
 800b298:	2026      	movs	r0, #38	; 0x26
 800b29a:	f003 f8e8 	bl	800e46e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800b29e:	2026      	movs	r0, #38	; 0x26
 800b2a0:	f003 f901 	bl	800e4a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	2105      	movs	r1, #5
 800b2a8:	200d      	movs	r0, #13
 800b2aa:	f003 f8e0 	bl	800e46e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800b2ae:	200d      	movs	r0, #13
 800b2b0:	f003 f8f9 	bl	800e4a6 <HAL_NVIC_EnableIRQ>
}
 800b2b4:	bf00      	nop
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM15) {
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a08      	ldr	r2, [pc, #32]	; (800b2e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d102      	bne.n	800b2d0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800b2ca:	f002 ffe1 	bl	800e290 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM16) {
    HAL_IncTick();
  }
  /* USER CODE END Callback 1 */
}
 800b2ce:	e006      	b.n	800b2de <HAL_TIM_PeriodElapsedCallback+0x26>
  else if (htim->Instance == TIM16) {
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a05      	ldr	r2, [pc, #20]	; (800b2ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d101      	bne.n	800b2de <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_IncTick();
 800b2da:	f002 ffd9 	bl	800e290 <HAL_IncTick>
}
 800b2de:	bf00      	nop
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	40014000 	.word	0x40014000
 800b2ec:	40014400 	.word	0x40014400

0800b2f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   HAL_NVIC_SystemReset();
 800b2f4:	f003 f8e5 	bl	800e4c2 <HAL_NVIC_SystemReset>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b2f8:	b672      	cpsid	i
}
 800b2fa:	bf00      	nop
   __disable_irq();
   while(1)
 800b2fc:	e7fe      	b.n	800b2fc <Error_Handler+0xc>

0800b2fe <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800b2fe:	b480      	push	{r7}
 800b300:	b085      	sub	sp, #20
 800b302:	af00      	add	r7, sp, #0
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
 800b308:	603b      	str	r3, [r7, #0]
 800b30a:	4603      	mov	r3, r0
 800b30c:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	429a      	cmp	r2, r3
 800b314:	d204      	bcs.n	800b320 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4413      	add	r3, r2
 800b31c:	7bfa      	ldrb	r2, [r7, #15]
 800b31e:	701a      	strb	r2, [r3, #0]
  }
}
 800b320:	bf00      	nop
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	60b9      	str	r1, [r7, #8]
 800b334:	607a      	str	r2, [r7, #4]
 800b336:	603b      	str	r3, [r7, #0]
 800b338:	4603      	mov	r3, r0
 800b33a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800b33c:	bf00      	nop
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	60fb      	str	r3, [r7, #12]
 800b356:	e002      	b.n	800b35e <_strnlen_s+0x16>
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	3301      	adds	r3, #1
 800b35c:	60fb      	str	r3, [r7, #12]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d004      	beq.n	800b370 <_strnlen_s+0x28>
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	1e5a      	subs	r2, r3, #1
 800b36a:	603a      	str	r2, [r7, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1f3      	bne.n	800b358 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	1ad3      	subs	r3, r2, r3
}
 800b376:	4618      	mov	r0, r3
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800b382:	b480      	push	{r7}
 800b384:	b083      	sub	sp, #12
 800b386:	af00      	add	r7, sp, #0
 800b388:	4603      	mov	r3, r0
 800b38a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800b38c:	79fb      	ldrb	r3, [r7, #7]
 800b38e:	2b2f      	cmp	r3, #47	; 0x2f
 800b390:	d904      	bls.n	800b39c <_is_digit+0x1a>
 800b392:	79fb      	ldrb	r3, [r7, #7]
 800b394:	2b39      	cmp	r3, #57	; 0x39
 800b396:	d801      	bhi.n	800b39c <_is_digit+0x1a>
 800b398:	2301      	movs	r3, #1
 800b39a:	e000      	b.n	800b39e <_is_digit+0x1c>
 800b39c:	2300      	movs	r3, #0
 800b39e:	f003 0301 	and.w	r3, r3, #1
 800b3a2:	b2db      	uxtb	r3, r3
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800b3bc:	e00e      	b.n	800b3dc <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4413      	add	r3, r2
 800b3c6:	005b      	lsls	r3, r3, #1
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	1c59      	adds	r1, r3, #1
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	6011      	str	r1, [r2, #0]
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	4403      	add	r3, r0
 800b3d8:	3b30      	subs	r3, #48	; 0x30
 800b3da:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7ff ffcd 	bl	800b382 <_is_digit>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1e7      	bne.n	800b3be <_atoi+0xe>
  }
  return i;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800b3f8:	b590      	push	{r4, r7, lr}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800b40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40c:	f003 0302 	and.w	r3, r3, #2
 800b410:	2b00      	cmp	r3, #0
 800b412:	d125      	bne.n	800b460 <_out_rev+0x68>
 800b414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b416:	f003 0301 	and.w	r3, r3, #1
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d120      	bne.n	800b460 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800b41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b420:	617b      	str	r3, [r7, #20]
 800b422:	e00a      	b.n	800b43a <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	1c53      	adds	r3, r2, #1
 800b428:	607b      	str	r3, [r7, #4]
 800b42a:	68fc      	ldr	r4, [r7, #12]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	68b9      	ldr	r1, [r7, #8]
 800b430:	2020      	movs	r0, #32
 800b432:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	3301      	adds	r3, #1
 800b438:	617b      	str	r3, [r7, #20]
 800b43a:	697a      	ldr	r2, [r7, #20]
 800b43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43e:	429a      	cmp	r2, r3
 800b440:	d3f0      	bcc.n	800b424 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800b442:	e00d      	b.n	800b460 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800b444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b446:	3b01      	subs	r3, #1
 800b448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b44a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44e:	4413      	add	r3, r2
 800b450:	7818      	ldrb	r0, [r3, #0]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	1c53      	adds	r3, r2, #1
 800b456:	607b      	str	r3, [r7, #4]
 800b458:	68fc      	ldr	r4, [r7, #12]
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	68b9      	ldr	r1, [r7, #8]
 800b45e:	47a0      	blx	r4
  while (len) {
 800b460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1ee      	bne.n	800b444 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800b466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b468:	f003 0302 	and.w	r3, r3, #2
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00e      	beq.n	800b48e <_out_rev+0x96>
    while (idx - start_idx < width) {
 800b470:	e007      	b.n	800b482 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	1c53      	adds	r3, r2, #1
 800b476:	607b      	str	r3, [r7, #4]
 800b478:	68fc      	ldr	r4, [r7, #12]
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	68b9      	ldr	r1, [r7, #8]
 800b47e:	2020      	movs	r0, #32
 800b480:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d8f1      	bhi.n	800b472 <_out_rev+0x7a>
    }
  }

  return idx;
 800b48e:	687b      	ldr	r3, [r7, #4]
}
 800b490:	4618      	mov	r0, r3
 800b492:	371c      	adds	r7, #28
 800b494:	46bd      	mov	sp, r7
 800b496:	bd90      	pop	{r4, r7, pc}

0800b498 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b088      	sub	sp, #32
 800b49c:	af04      	add	r7, sp, #16
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
 800b4a4:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a8:	f003 0302 	and.w	r3, r3, #2
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d136      	bne.n	800b51e <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d018      	beq.n	800b4e8 <_ntoa_format+0x50>
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b8:	f003 0301 	and.w	r3, r3, #1
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d013      	beq.n	800b4e8 <_ntoa_format+0x50>
 800b4c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d104      	bne.n	800b4d2 <_ntoa_format+0x3a>
 800b4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ca:	f003 030c 	and.w	r3, r3, #12
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00a      	beq.n	800b4e8 <_ntoa_format+0x50>
      width--;
 800b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b4d8:	e006      	b.n	800b4e8 <_ntoa_format+0x50>
      buf[len++] = '0';
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	1c5a      	adds	r2, r3, #1
 800b4de:	61fa      	str	r2, [r7, #28]
 800b4e0:	69ba      	ldr	r2, [r7, #24]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	2230      	movs	r2, #48	; 0x30
 800b4e6:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b4e8:	69fa      	ldr	r2, [r7, #28]
 800b4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d20a      	bcs.n	800b506 <_ntoa_format+0x6e>
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	2b1f      	cmp	r3, #31
 800b4f4:	d9f1      	bls.n	800b4da <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b4f6:	e006      	b.n	800b506 <_ntoa_format+0x6e>
      buf[len++] = '0';
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	1c5a      	adds	r2, r3, #1
 800b4fc:	61fa      	str	r2, [r7, #28]
 800b4fe:	69ba      	ldr	r2, [r7, #24]
 800b500:	4413      	add	r3, r2
 800b502:	2230      	movs	r2, #48	; 0x30
 800b504:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	f003 0301 	and.w	r3, r3, #1
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d006      	beq.n	800b51e <_ntoa_format+0x86>
 800b510:	69fa      	ldr	r2, [r7, #28]
 800b512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b514:	429a      	cmp	r2, r3
 800b516:	d202      	bcs.n	800b51e <_ntoa_format+0x86>
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	2b1f      	cmp	r3, #31
 800b51c:	d9ec      	bls.n	800b4f8 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	f003 0310 	and.w	r3, r3, #16
 800b524:	2b00      	cmp	r3, #0
 800b526:	d058      	beq.n	800b5da <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800b528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d116      	bne.n	800b560 <_ntoa_format+0xc8>
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d013      	beq.n	800b560 <_ntoa_format+0xc8>
 800b538:	69fa      	ldr	r2, [r7, #28]
 800b53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d003      	beq.n	800b548 <_ntoa_format+0xb0>
 800b540:	69fa      	ldr	r2, [r7, #28]
 800b542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b544:	429a      	cmp	r2, r3
 800b546:	d10b      	bne.n	800b560 <_ntoa_format+0xc8>
      len--;
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	3b01      	subs	r3, #1
 800b54c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d005      	beq.n	800b560 <_ntoa_format+0xc8>
 800b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b556:	2b10      	cmp	r3, #16
 800b558:	d102      	bne.n	800b560 <_ntoa_format+0xc8>
        len--;
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	3b01      	subs	r3, #1
 800b55e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b562:	2b10      	cmp	r3, #16
 800b564:	d10f      	bne.n	800b586 <_ntoa_format+0xee>
 800b566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b568:	f003 0320 	and.w	r3, r3, #32
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10a      	bne.n	800b586 <_ntoa_format+0xee>
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	2b1f      	cmp	r3, #31
 800b574:	d807      	bhi.n	800b586 <_ntoa_format+0xee>
      buf[len++] = 'x';
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	1c5a      	adds	r2, r3, #1
 800b57a:	61fa      	str	r2, [r7, #28]
 800b57c:	69ba      	ldr	r2, [r7, #24]
 800b57e:	4413      	add	r3, r2
 800b580:	2278      	movs	r2, #120	; 0x78
 800b582:	701a      	strb	r2, [r3, #0]
 800b584:	e01f      	b.n	800b5c6 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	2b10      	cmp	r3, #16
 800b58a:	d10f      	bne.n	800b5ac <_ntoa_format+0x114>
 800b58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58e:	f003 0320 	and.w	r3, r3, #32
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00a      	beq.n	800b5ac <_ntoa_format+0x114>
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	2b1f      	cmp	r3, #31
 800b59a:	d807      	bhi.n	800b5ac <_ntoa_format+0x114>
      buf[len++] = 'X';
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	61fa      	str	r2, [r7, #28]
 800b5a2:	69ba      	ldr	r2, [r7, #24]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	2258      	movs	r2, #88	; 0x58
 800b5a8:	701a      	strb	r2, [r3, #0]
 800b5aa:	e00c      	b.n	800b5c6 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d109      	bne.n	800b5c6 <_ntoa_format+0x12e>
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	2b1f      	cmp	r3, #31
 800b5b6:	d806      	bhi.n	800b5c6 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	1c5a      	adds	r2, r3, #1
 800b5bc:	61fa      	str	r2, [r7, #28]
 800b5be:	69ba      	ldr	r2, [r7, #24]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	2262      	movs	r2, #98	; 0x62
 800b5c4:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	2b1f      	cmp	r3, #31
 800b5ca:	d806      	bhi.n	800b5da <_ntoa_format+0x142>
      buf[len++] = '0';
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	1c5a      	adds	r2, r3, #1
 800b5d0:	61fa      	str	r2, [r7, #28]
 800b5d2:	69ba      	ldr	r2, [r7, #24]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	2230      	movs	r2, #48	; 0x30
 800b5d8:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	2b1f      	cmp	r3, #31
 800b5de:	d824      	bhi.n	800b62a <_ntoa_format+0x192>
    if (negative) {
 800b5e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d007      	beq.n	800b5f8 <_ntoa_format+0x160>
      buf[len++] = '-';
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	1c5a      	adds	r2, r3, #1
 800b5ec:	61fa      	str	r2, [r7, #28]
 800b5ee:	69ba      	ldr	r2, [r7, #24]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	222d      	movs	r2, #45	; 0x2d
 800b5f4:	701a      	strb	r2, [r3, #0]
 800b5f6:	e018      	b.n	800b62a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800b5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fa:	f003 0304 	and.w	r3, r3, #4
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d007      	beq.n	800b612 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	1c5a      	adds	r2, r3, #1
 800b606:	61fa      	str	r2, [r7, #28]
 800b608:	69ba      	ldr	r2, [r7, #24]
 800b60a:	4413      	add	r3, r2
 800b60c:	222b      	movs	r2, #43	; 0x2b
 800b60e:	701a      	strb	r2, [r3, #0]
 800b610:	e00b      	b.n	800b62a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	f003 0308 	and.w	r3, r3, #8
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d006      	beq.n	800b62a <_ntoa_format+0x192>
      buf[len++] = ' ';
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	1c5a      	adds	r2, r3, #1
 800b620:	61fa      	str	r2, [r7, #28]
 800b622:	69ba      	ldr	r2, [r7, #24]
 800b624:	4413      	add	r3, r2
 800b626:	2220      	movs	r2, #32
 800b628:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800b62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62c:	9303      	str	r3, [sp, #12]
 800b62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b630:	9302      	str	r3, [sp, #8]
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	9301      	str	r3, [sp, #4]
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	68b9      	ldr	r1, [r7, #8]
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f7ff fed9 	bl	800b3f8 <_out_rev>
 800b646:	4603      	mov	r3, r0
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b096      	sub	sp, #88	; 0x58
 800b654:	af08      	add	r7, sp, #32
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	607a      	str	r2, [r7, #4]
 800b65c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800b65e:	2300      	movs	r3, #0
 800b660:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800b662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b664:	2b00      	cmp	r3, #0
 800b666:	d103      	bne.n	800b670 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800b668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b66a:	f023 0310 	bic.w	r3, r3, #16
 800b66e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800b670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b676:	2b00      	cmp	r3, #0
 800b678:	d002      	beq.n	800b680 <_ntoa_long+0x30>
 800b67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d032      	beq.n	800b6e6 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 800b680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b684:	fbb3 f2f2 	udiv	r2, r3, r2
 800b688:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b68a:	fb01 f202 	mul.w	r2, r1, r2
 800b68e:	1a9b      	subs	r3, r3, r2
 800b690:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b694:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b698:	2b09      	cmp	r3, #9
 800b69a:	d804      	bhi.n	800b6a6 <_ntoa_long+0x56>
 800b69c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b6a0:	3330      	adds	r3, #48	; 0x30
 800b6a2:	b2da      	uxtb	r2, r3
 800b6a4:	e00d      	b.n	800b6c2 <_ntoa_long+0x72>
 800b6a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6a8:	f003 0320 	and.w	r3, r3, #32
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d001      	beq.n	800b6b4 <_ntoa_long+0x64>
 800b6b0:	2241      	movs	r2, #65	; 0x41
 800b6b2:	e000      	b.n	800b6b6 <_ntoa_long+0x66>
 800b6b4:	2261      	movs	r2, #97	; 0x61
 800b6b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b6ba:	4413      	add	r3, r2
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	3b0a      	subs	r3, #10
 800b6c0:	b2da      	uxtb	r2, r3
 800b6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6c4:	1c59      	adds	r1, r3, #1
 800b6c6:	6379      	str	r1, [r7, #52]	; 0x34
 800b6c8:	3338      	adds	r3, #56	; 0x38
 800b6ca:	443b      	add	r3, r7
 800b6cc:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800b6d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6d8:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800b6da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d002      	beq.n	800b6e6 <_ntoa_long+0x96>
 800b6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e2:	2b1f      	cmp	r3, #31
 800b6e4:	d9cc      	bls.n	800b680 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800b6e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6e8:	9306      	str	r3, [sp, #24]
 800b6ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6ec:	9305      	str	r3, [sp, #20]
 800b6ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6f0:	9304      	str	r3, [sp, #16]
 800b6f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6f4:	9303      	str	r3, [sp, #12]
 800b6f6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800b6fa:	9302      	str	r3, [sp, #8]
 800b6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fe:	9301      	str	r3, [sp, #4]
 800b700:	f107 0310 	add.w	r3, r7, #16
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	68b9      	ldr	r1, [r7, #8]
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f7ff fec3 	bl	800b498 <_ntoa_format>
 800b712:	4603      	mov	r3, r0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3738      	adds	r7, #56	; 0x38
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b096      	sub	sp, #88	; 0x58
 800b720:	af08      	add	r7, sp, #32
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800b72a:	2300      	movs	r3, #0
 800b72c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800b72e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b732:	4313      	orrs	r3, r2
 800b734:	d103      	bne.n	800b73e <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800b736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b738:	f023 0310 	bic.w	r3, r3, #16
 800b73c:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800b73e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b744:	2b00      	cmp	r3, #0
 800b746:	d003      	beq.n	800b750 <_ntoa_long_long+0x34>
 800b748:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b74c:	4313      	orrs	r3, r2
 800b74e:	d037      	beq.n	800b7c0 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 800b750:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800b754:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b758:	f7f5 fafe 	bl	8000d58 <__aeabi_uldivmod>
 800b75c:	4613      	mov	r3, r2
 800b75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b762:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b766:	2b09      	cmp	r3, #9
 800b768:	d804      	bhi.n	800b774 <_ntoa_long_long+0x58>
 800b76a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b76e:	3330      	adds	r3, #48	; 0x30
 800b770:	b2da      	uxtb	r2, r3
 800b772:	e00d      	b.n	800b790 <_ntoa_long_long+0x74>
 800b774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b776:	f003 0320 	and.w	r3, r3, #32
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <_ntoa_long_long+0x66>
 800b77e:	2241      	movs	r2, #65	; 0x41
 800b780:	e000      	b.n	800b784 <_ntoa_long_long+0x68>
 800b782:	2261      	movs	r2, #97	; 0x61
 800b784:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b788:	4413      	add	r3, r2
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	3b0a      	subs	r3, #10
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b792:	1c59      	adds	r1, r3, #1
 800b794:	6379      	str	r1, [r7, #52]	; 0x34
 800b796:	3338      	adds	r3, #56	; 0x38
 800b798:	443b      	add	r3, r7
 800b79a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800b79e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b7a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800b7a6:	f7f5 fad7 	bl	8000d58 <__aeabi_uldivmod>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800b7b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	d002      	beq.n	800b7c0 <_ntoa_long_long+0xa4>
 800b7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7bc:	2b1f      	cmp	r3, #31
 800b7be:	d9c7      	bls.n	800b750 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800b7c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b7c4:	9206      	str	r2, [sp, #24]
 800b7c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b7c8:	9205      	str	r2, [sp, #20]
 800b7ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7cc:	9204      	str	r2, [sp, #16]
 800b7ce:	9303      	str	r3, [sp, #12]
 800b7d0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b7d4:	9302      	str	r3, [sp, #8]
 800b7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d8:	9301      	str	r3, [sp, #4]
 800b7da:	f107 0310 	add.w	r3, r7, #16
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	68b9      	ldr	r1, [r7, #8]
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f7ff fe56 	bl	800b498 <_ntoa_format>
 800b7ec:	4603      	mov	r3, r0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3738      	adds	r7, #56	; 0x38
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
	...

0800b7f8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b7f8:	b590      	push	{r4, r7, lr}
 800b7fa:	b09d      	sub	sp, #116	; 0x74
 800b7fc:	af04      	add	r7, sp, #16
 800b7fe:	6178      	str	r0, [r7, #20]
 800b800:	6139      	str	r1, [r7, #16]
 800b802:	60fa      	str	r2, [r7, #12]
 800b804:	60bb      	str	r3, [r7, #8]
 800b806:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800b80a:	2300      	movs	r3, #0
 800b80c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800b80e:	f04f 0200 	mov.w	r2, #0
 800b812:	f04f 0300 	mov.w	r3, #0
 800b816:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800b81a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b81e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b822:	f7f5 f969 	bl	8000af8 <__aeabi_dcmpeq>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10f      	bne.n	800b84c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800b82c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b82e:	9303      	str	r3, [sp, #12]
 800b830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b832:	9302      	str	r3, [sp, #8]
 800b834:	2303      	movs	r3, #3
 800b836:	9301      	str	r3, [sp, #4]
 800b838:	4ba7      	ldr	r3, [pc, #668]	; (800bad8 <_ftoa+0x2e0>)
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	6939      	ldr	r1, [r7, #16]
 800b842:	6978      	ldr	r0, [r7, #20]
 800b844:	f7ff fdd8 	bl	800b3f8 <_out_rev>
 800b848:	4603      	mov	r3, r0
 800b84a:	e222      	b.n	800bc92 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 800b84c:	f04f 32ff 	mov.w	r2, #4294967295
 800b850:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800b854:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b858:	f7f5 f958 	bl	8000b0c <__aeabi_dcmplt>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00f      	beq.n	800b882 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800b862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b864:	9303      	str	r3, [sp, #12]
 800b866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b868:	9302      	str	r3, [sp, #8]
 800b86a:	2304      	movs	r3, #4
 800b86c:	9301      	str	r3, [sp, #4]
 800b86e:	4b9b      	ldr	r3, [pc, #620]	; (800badc <_ftoa+0x2e4>)
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	6939      	ldr	r1, [r7, #16]
 800b878:	6978      	ldr	r0, [r7, #20]
 800b87a:	f7ff fdbd 	bl	800b3f8 <_out_rev>
 800b87e:	4603      	mov	r3, r0
 800b880:	e207      	b.n	800bc92 <_ftoa+0x49a>
  if (value > DBL_MAX)
 800b882:	f04f 32ff 	mov.w	r2, #4294967295
 800b886:	4b96      	ldr	r3, [pc, #600]	; (800bae0 <_ftoa+0x2e8>)
 800b888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b88c:	f7f5 f95c 	bl	8000b48 <__aeabi_dcmpgt>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d01d      	beq.n	800b8d2 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800b896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b898:	f003 0304 	and.w	r3, r3, #4
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d001      	beq.n	800b8a4 <_ftoa+0xac>
 800b8a0:	4b90      	ldr	r3, [pc, #576]	; (800bae4 <_ftoa+0x2ec>)
 800b8a2:	e000      	b.n	800b8a6 <_ftoa+0xae>
 800b8a4:	4b90      	ldr	r3, [pc, #576]	; (800bae8 <_ftoa+0x2f0>)
 800b8a6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b8a8:	f002 0204 	and.w	r2, r2, #4
 800b8ac:	2a00      	cmp	r2, #0
 800b8ae:	d001      	beq.n	800b8b4 <_ftoa+0xbc>
 800b8b0:	2204      	movs	r2, #4
 800b8b2:	e000      	b.n	800b8b6 <_ftoa+0xbe>
 800b8b4:	2203      	movs	r2, #3
 800b8b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b8b8:	9103      	str	r1, [sp, #12]
 800b8ba:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b8bc:	9102      	str	r1, [sp, #8]
 800b8be:	9201      	str	r2, [sp, #4]
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	6939      	ldr	r1, [r7, #16]
 800b8c8:	6978      	ldr	r0, [r7, #20]
 800b8ca:	f7ff fd95 	bl	800b3f8 <_out_rev>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	e1df      	b.n	800bc92 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800b8d2:	a37d      	add	r3, pc, #500	; (adr r3, 800bac8 <_ftoa+0x2d0>)
 800b8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b8dc:	f7f5 f934 	bl	8000b48 <__aeabi_dcmpgt>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d109      	bne.n	800b8fa <_ftoa+0x102>
 800b8e6:	a37a      	add	r3, pc, #488	; (adr r3, 800bad0 <_ftoa+0x2d8>)
 800b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b8f0:	f7f5 f90c 	bl	8000b0c <__aeabi_dcmplt>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00f      	beq.n	800b91a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800b8fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8fc:	9302      	str	r3, [sp, #8]
 800b8fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b900:	9301      	str	r3, [sp, #4]
 800b902:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	ed97 0b00 	vldr	d0, [r7]
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	6939      	ldr	r1, [r7, #16]
 800b910:	6978      	ldr	r0, [r7, #20]
 800b912:	f000 f9c9 	bl	800bca8 <_etoa>
 800b916:	4603      	mov	r3, r0
 800b918:	e1bb      	b.n	800bc92 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800b91a:	2300      	movs	r3, #0
 800b91c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800b920:	f04f 0200 	mov.w	r2, #0
 800b924:	f04f 0300 	mov.w	r3, #0
 800b928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b92c:	f7f5 f8ee 	bl	8000b0c <__aeabi_dcmplt>
 800b930:	4603      	mov	r3, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00e      	beq.n	800b954 <_ftoa+0x15c>
    negative = true;
 800b936:	2301      	movs	r3, #1
 800b938:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800b93c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b940:	f04f 0000 	mov.w	r0, #0
 800b944:	f04f 0100 	mov.w	r1, #0
 800b948:	f7f4 fcb6 	bl	80002b8 <__aeabi_dsub>
 800b94c:	4602      	mov	r2, r0
 800b94e:	460b      	mov	r3, r1
 800b950:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800b954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10d      	bne.n	800b97a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800b95e:	2306      	movs	r3, #6
 800b960:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800b962:	e00a      	b.n	800b97a <_ftoa+0x182>
    buf[len++] = '0';
 800b964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b966:	1c5a      	adds	r2, r3, #1
 800b968:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b96a:	3360      	adds	r3, #96	; 0x60
 800b96c:	443b      	add	r3, r7
 800b96e:	2230      	movs	r2, #48	; 0x30
 800b970:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800b974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b976:	3b01      	subs	r3, #1
 800b978:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800b97a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b97c:	2b1f      	cmp	r3, #31
 800b97e:	d802      	bhi.n	800b986 <_ftoa+0x18e>
 800b980:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b982:	2b09      	cmp	r3, #9
 800b984:	d8ee      	bhi.n	800b964 <_ftoa+0x16c>
  }

  int whole = (int)value;
 800b986:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b98a:	f7f5 f8fd 	bl	8000b88 <__aeabi_d2iz>
 800b98e:	4603      	mov	r3, r0
 800b990:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800b992:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b994:	f7f4 fdde 	bl	8000554 <__aeabi_i2d>
 800b998:	4602      	mov	r2, r0
 800b99a:	460b      	mov	r3, r1
 800b99c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b9a0:	f7f4 fc8a 	bl	80002b8 <__aeabi_dsub>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4610      	mov	r0, r2
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	4a4f      	ldr	r2, [pc, #316]	; (800baec <_ftoa+0x2f4>)
 800b9ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9b0:	00db      	lsls	r3, r3, #3
 800b9b2:	4413      	add	r3, r2
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f7f4 fe36 	bl	8000628 <__aeabi_dmul>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800b9c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800b9c8:	f7f5 f906 	bl	8000bd8 <__aeabi_d2uiz>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800b9d0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b9d2:	f7f4 fdaf 	bl	8000534 <__aeabi_ui2d>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	460b      	mov	r3, r1
 800b9da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800b9de:	f7f4 fc6b 	bl	80002b8 <__aeabi_dsub>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800b9ea:	f04f 0200 	mov.w	r2, #0
 800b9ee:	4b40      	ldr	r3, [pc, #256]	; (800baf0 <_ftoa+0x2f8>)
 800b9f0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800b9f4:	f7f5 f8a8 	bl	8000b48 <__aeabi_dcmpgt>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d016      	beq.n	800ba2c <_ftoa+0x234>
    ++frac;
 800b9fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba00:	3301      	adds	r3, #1
 800ba02:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800ba04:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ba06:	f7f4 fd95 	bl	8000534 <__aeabi_ui2d>
 800ba0a:	4a38      	ldr	r2, [pc, #224]	; (800baec <_ftoa+0x2f4>)
 800ba0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba0e:	00db      	lsls	r3, r3, #3
 800ba10:	4413      	add	r3, r2
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	f7f5 f88d 	bl	8000b34 <__aeabi_dcmpge>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d01a      	beq.n	800ba56 <_ftoa+0x25e>
      frac = 0;
 800ba20:	2300      	movs	r3, #0
 800ba22:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800ba24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba26:	3301      	adds	r3, #1
 800ba28:	657b      	str	r3, [r7, #84]	; 0x54
 800ba2a:	e014      	b.n	800ba56 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 800ba2c:	f04f 0200 	mov.w	r2, #0
 800ba30:	4b2f      	ldr	r3, [pc, #188]	; (800baf0 <_ftoa+0x2f8>)
 800ba32:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ba36:	f7f5 f869 	bl	8000b0c <__aeabi_dcmplt>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10a      	bne.n	800ba56 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800ba40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d004      	beq.n	800ba50 <_ftoa+0x258>
 800ba46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba48:	f003 0301 	and.w	r3, r3, #1
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d002      	beq.n	800ba56 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800ba50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba52:	3301      	adds	r3, #1
 800ba54:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800ba56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d14b      	bne.n	800baf4 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800ba5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ba5e:	f7f4 fd79 	bl	8000554 <__aeabi_i2d>
 800ba62:	4602      	mov	r2, r0
 800ba64:	460b      	mov	r3, r1
 800ba66:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba6a:	f7f4 fc25 	bl	80002b8 <__aeabi_dsub>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	460b      	mov	r3, r1
 800ba72:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800ba76:	2301      	movs	r3, #1
 800ba78:	461c      	mov	r4, r3
 800ba7a:	f04f 0200 	mov.w	r2, #0
 800ba7e:	4b1c      	ldr	r3, [pc, #112]	; (800baf0 <_ftoa+0x2f8>)
 800ba80:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ba84:	f7f5 f842 	bl	8000b0c <__aeabi_dcmplt>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d101      	bne.n	800ba92 <_ftoa+0x29a>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	461c      	mov	r4, r3
 800ba92:	b2e3      	uxtb	r3, r4
 800ba94:	f083 0301 	eor.w	r3, r3, #1
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d109      	bne.n	800bab2 <_ftoa+0x2ba>
 800ba9e:	f04f 0200 	mov.w	r2, #0
 800baa2:	4b13      	ldr	r3, [pc, #76]	; (800baf0 <_ftoa+0x2f8>)
 800baa4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800baa8:	f7f5 f84e 	bl	8000b48 <__aeabi_dcmpgt>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d064      	beq.n	800bb7c <_ftoa+0x384>
 800bab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bab4:	f003 0301 	and.w	r3, r3, #1
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f000 8081 	beq.w	800bbc0 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800babe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bac0:	3301      	adds	r3, #1
 800bac2:	657b      	str	r3, [r7, #84]	; 0x54
 800bac4:	e07c      	b.n	800bbc0 <_ftoa+0x3c8>
 800bac6:	bf00      	nop
 800bac8:	00000000 	.word	0x00000000
 800bacc:	41cdcd65 	.word	0x41cdcd65
 800bad0:	00000000 	.word	0x00000000
 800bad4:	c1cdcd65 	.word	0xc1cdcd65
 800bad8:	08020514 	.word	0x08020514
 800badc:	08020518 	.word	0x08020518
 800bae0:	7fefffff 	.word	0x7fefffff
 800bae4:	08020520 	.word	0x08020520
 800bae8:	08020528 	.word	0x08020528
 800baec:	08025390 	.word	0x08025390
 800baf0:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800baf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800baf6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800baf8:	e01f      	b.n	800bb3a <_ftoa+0x342>
      --count;
 800bafa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bafc:	3b01      	subs	r3, #1
 800bafe:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800bb00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb02:	4b66      	ldr	r3, [pc, #408]	; (800bc9c <_ftoa+0x4a4>)
 800bb04:	fba3 2301 	umull	r2, r3, r3, r1
 800bb08:	08da      	lsrs	r2, r3, #3
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	4413      	add	r3, r2
 800bb10:	005b      	lsls	r3, r3, #1
 800bb12:	1aca      	subs	r2, r1, r3
 800bb14:	b2d2      	uxtb	r2, r2
 800bb16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb18:	1c59      	adds	r1, r3, #1
 800bb1a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800bb1c:	3230      	adds	r2, #48	; 0x30
 800bb1e:	b2d2      	uxtb	r2, r2
 800bb20:	3360      	adds	r3, #96	; 0x60
 800bb22:	443b      	add	r3, r7
 800bb24:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800bb28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb2a:	4a5c      	ldr	r2, [pc, #368]	; (800bc9c <_ftoa+0x4a4>)
 800bb2c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb30:	08db      	lsrs	r3, r3, #3
 800bb32:	653b      	str	r3, [r7, #80]	; 0x50
 800bb34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800bb3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb3c:	2b1f      	cmp	r3, #31
 800bb3e:	d9dc      	bls.n	800bafa <_ftoa+0x302>
 800bb40:	e009      	b.n	800bb56 <_ftoa+0x35e>
        break;
 800bb42:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800bb44:	e007      	b.n	800bb56 <_ftoa+0x35e>
      buf[len++] = '0';
 800bb46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb48:	1c5a      	adds	r2, r3, #1
 800bb4a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800bb4c:	3360      	adds	r3, #96	; 0x60
 800bb4e:	443b      	add	r3, r7
 800bb50:	2230      	movs	r2, #48	; 0x30
 800bb52:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800bb56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb58:	2b1f      	cmp	r3, #31
 800bb5a:	d804      	bhi.n	800bb66 <_ftoa+0x36e>
 800bb5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb5e:	1e5a      	subs	r2, r3, #1
 800bb60:	64fa      	str	r2, [r7, #76]	; 0x4c
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1ef      	bne.n	800bb46 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800bb66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb68:	2b1f      	cmp	r3, #31
 800bb6a:	d829      	bhi.n	800bbc0 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800bb6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb6e:	1c5a      	adds	r2, r3, #1
 800bb70:	65fa      	str	r2, [r7, #92]	; 0x5c
 800bb72:	3360      	adds	r3, #96	; 0x60
 800bb74:	443b      	add	r3, r7
 800bb76:	222e      	movs	r2, #46	; 0x2e
 800bb78:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800bb7c:	e020      	b.n	800bbc0 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800bb7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb80:	4b47      	ldr	r3, [pc, #284]	; (800bca0 <_ftoa+0x4a8>)
 800bb82:	fb83 1302 	smull	r1, r3, r3, r2
 800bb86:	1099      	asrs	r1, r3, #2
 800bb88:	17d3      	asrs	r3, r2, #31
 800bb8a:	1ac9      	subs	r1, r1, r3
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	440b      	add	r3, r1
 800bb92:	005b      	lsls	r3, r3, #1
 800bb94:	1ad1      	subs	r1, r2, r3
 800bb96:	b2ca      	uxtb	r2, r1
 800bb98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb9a:	1c59      	adds	r1, r3, #1
 800bb9c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800bb9e:	3230      	adds	r2, #48	; 0x30
 800bba0:	b2d2      	uxtb	r2, r2
 800bba2:	3360      	adds	r3, #96	; 0x60
 800bba4:	443b      	add	r3, r7
 800bba6:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800bbaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbac:	4a3c      	ldr	r2, [pc, #240]	; (800bca0 <_ftoa+0x4a8>)
 800bbae:	fb82 1203 	smull	r1, r2, r2, r3
 800bbb2:	1092      	asrs	r2, r2, #2
 800bbb4:	17db      	asrs	r3, r3, #31
 800bbb6:	1ad3      	subs	r3, r2, r3
 800bbb8:	657b      	str	r3, [r7, #84]	; 0x54
 800bbba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d003      	beq.n	800bbc8 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800bbc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbc2:	2b1f      	cmp	r3, #31
 800bbc4:	d9db      	bls.n	800bb7e <_ftoa+0x386>
 800bbc6:	e000      	b.n	800bbca <_ftoa+0x3d2>
      break;
 800bbc8:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800bbca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbcc:	f003 0302 	and.w	r3, r3, #2
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d123      	bne.n	800bc1c <_ftoa+0x424>
 800bbd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbd6:	f003 0301 	and.w	r3, r3, #1
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d01e      	beq.n	800bc1c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800bbde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d014      	beq.n	800bc0e <_ftoa+0x416>
 800bbe4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d104      	bne.n	800bbf6 <_ftoa+0x3fe>
 800bbec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbee:	f003 030c 	and.w	r3, r3, #12
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00b      	beq.n	800bc0e <_ftoa+0x416>
      width--;
 800bbf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800bbfc:	e007      	b.n	800bc0e <_ftoa+0x416>
      buf[len++] = '0';
 800bbfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc00:	1c5a      	adds	r2, r3, #1
 800bc02:	65fa      	str	r2, [r7, #92]	; 0x5c
 800bc04:	3360      	adds	r3, #96	; 0x60
 800bc06:	443b      	add	r3, r7
 800bc08:	2230      	movs	r2, #48	; 0x30
 800bc0a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800bc0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d202      	bcs.n	800bc1c <_ftoa+0x424>
 800bc16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc18:	2b1f      	cmp	r3, #31
 800bc1a:	d9f0      	bls.n	800bbfe <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800bc1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc1e:	2b1f      	cmp	r3, #31
 800bc20:	d827      	bhi.n	800bc72 <_ftoa+0x47a>
    if (negative) {
 800bc22:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d008      	beq.n	800bc3c <_ftoa+0x444>
      buf[len++] = '-';
 800bc2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc2c:	1c5a      	adds	r2, r3, #1
 800bc2e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800bc30:	3360      	adds	r3, #96	; 0x60
 800bc32:	443b      	add	r3, r7
 800bc34:	222d      	movs	r2, #45	; 0x2d
 800bc36:	f803 2c48 	strb.w	r2, [r3, #-72]
 800bc3a:	e01a      	b.n	800bc72 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 800bc3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc3e:	f003 0304 	and.w	r3, r3, #4
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d008      	beq.n	800bc58 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800bc46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc48:	1c5a      	adds	r2, r3, #1
 800bc4a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800bc4c:	3360      	adds	r3, #96	; 0x60
 800bc4e:	443b      	add	r3, r7
 800bc50:	222b      	movs	r2, #43	; 0x2b
 800bc52:	f803 2c48 	strb.w	r2, [r3, #-72]
 800bc56:	e00c      	b.n	800bc72 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 800bc58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc5a:	f003 0308 	and.w	r3, r3, #8
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d007      	beq.n	800bc72 <_ftoa+0x47a>
      buf[len++] = ' ';
 800bc62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc64:	1c5a      	adds	r2, r3, #1
 800bc66:	65fa      	str	r2, [r7, #92]	; 0x5c
 800bc68:	3360      	adds	r3, #96	; 0x60
 800bc6a:	443b      	add	r3, r7
 800bc6c:	2220      	movs	r2, #32
 800bc6e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800bc72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc74:	9303      	str	r3, [sp, #12]
 800bc76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc78:	9302      	str	r3, [sp, #8]
 800bc7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc7c:	9301      	str	r3, [sp, #4]
 800bc7e:	f107 0318 	add.w	r3, r7, #24
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	6939      	ldr	r1, [r7, #16]
 800bc8a:	6978      	ldr	r0, [r7, #20]
 800bc8c:	f7ff fbb4 	bl	800b3f8 <_out_rev>
 800bc90:	4603      	mov	r3, r0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3764      	adds	r7, #100	; 0x64
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd90      	pop	{r4, r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	cccccccd 	.word	0xcccccccd
 800bca0:	66666667 	.word	0x66666667
 800bca4:	00000000 	.word	0x00000000

0800bca8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800bca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcac:	b09f      	sub	sp, #124	; 0x7c
 800bcae:	af06      	add	r7, sp, #24
 800bcb0:	6278      	str	r0, [r7, #36]	; 0x24
 800bcb2:	6239      	str	r1, [r7, #32]
 800bcb4:	61fa      	str	r2, [r7, #28]
 800bcb6:	61bb      	str	r3, [r7, #24]
 800bcb8:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800bcbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bcc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bcc4:	f7f4 ff18 	bl	8000af8 <__aeabi_dcmpeq>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d014      	beq.n	800bcf8 <_etoa+0x50>
 800bcce:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd2:	4bc1      	ldr	r3, [pc, #772]	; (800bfd8 <_etoa+0x330>)
 800bcd4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bcd8:	f7f4 ff36 	bl	8000b48 <__aeabi_dcmpgt>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10a      	bne.n	800bcf8 <_etoa+0x50>
 800bce2:	f04f 32ff 	mov.w	r2, #4294967295
 800bce6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800bcea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bcee:	f7f4 ff0d 	bl	8000b0c <__aeabi_dcmplt>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d012      	beq.n	800bd1e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800bcf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bcfc:	9302      	str	r3, [sp, #8]
 800bcfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd02:	9301      	str	r3, [sp, #4]
 800bd04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd08:	9300      	str	r3, [sp, #0]
 800bd0a:	ed97 0b04 	vldr	d0, [r7, #16]
 800bd0e:	69bb      	ldr	r3, [r7, #24]
 800bd10:	69fa      	ldr	r2, [r7, #28]
 800bd12:	6a39      	ldr	r1, [r7, #32]
 800bd14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd16:	f7ff fd6f 	bl	800b7f8 <_ftoa>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	e23f      	b.n	800c19e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	461e      	mov	r6, r3
 800bd22:	f04f 0200 	mov.w	r2, #0
 800bd26:	f04f 0300 	mov.w	r3, #0
 800bd2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bd2e:	f7f4 feed 	bl	8000b0c <__aeabi_dcmplt>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d101      	bne.n	800bd3c <_etoa+0x94>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	461e      	mov	r6, r3
 800bd3c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 800bd40:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d009      	beq.n	800bd5c <_etoa+0xb4>
    value = -value;
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	603b      	str	r3, [r7, #0]
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bd52:	607b      	str	r3, [r7, #4]
 800bd54:	ed97 7b00 	vldr	d7, [r7]
 800bd58:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800bd5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d102      	bne.n	800bd6e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800bd68:	2306      	movs	r3, #6
 800bd6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800bd6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bd72:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800bd76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bd7a:	f04f 0200 	mov.w	r2, #0
 800bd7e:	f04f 0300 	mov.w	r3, #0
 800bd82:	0d0a      	lsrs	r2, r1, #20
 800bd84:	2300      	movs	r3, #0
 800bd86:	4613      	mov	r3, r2
 800bd88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd8c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bd90:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800bd92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bd96:	4690      	mov	r8, r2
 800bd98:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800bd9c:	4644      	mov	r4, r8
 800bd9e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800bda2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bda6:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800bdaa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bdac:	f7f4 fbd2 	bl	8000554 <__aeabi_i2d>
 800bdb0:	a37d      	add	r3, pc, #500	; (adr r3, 800bfa8 <_etoa+0x300>)
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	f7f4 fc37 	bl	8000628 <__aeabi_dmul>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	4610      	mov	r0, r2
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	a37b      	add	r3, pc, #492	; (adr r3, 800bfb0 <_etoa+0x308>)
 800bdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc8:	f7f4 fa78 	bl	80002bc <__adddf3>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4614      	mov	r4, r2
 800bdd2:	461d      	mov	r5, r3
 800bdd4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bdd8:	f04f 0200 	mov.w	r2, #0
 800bddc:	4b7f      	ldr	r3, [pc, #508]	; (800bfdc <_etoa+0x334>)
 800bdde:	f7f4 fa6b 	bl	80002b8 <__aeabi_dsub>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	4610      	mov	r0, r2
 800bde8:	4619      	mov	r1, r3
 800bdea:	a373      	add	r3, pc, #460	; (adr r3, 800bfb8 <_etoa+0x310>)
 800bdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf0:	f7f4 fc1a 	bl	8000628 <__aeabi_dmul>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	f7f4 fa5e 	bl	80002bc <__adddf3>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	4610      	mov	r0, r2
 800be06:	4619      	mov	r1, r3
 800be08:	f7f4 febe 	bl	8000b88 <__aeabi_d2iz>
 800be0c:	4603      	mov	r3, r0
 800be0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800be10:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800be12:	f7f4 fb9f 	bl	8000554 <__aeabi_i2d>
 800be16:	a36a      	add	r3, pc, #424	; (adr r3, 800bfc0 <_etoa+0x318>)
 800be18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1c:	f7f4 fc04 	bl	8000628 <__aeabi_dmul>
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	4610      	mov	r0, r2
 800be26:	4619      	mov	r1, r3
 800be28:	f04f 0200 	mov.w	r2, #0
 800be2c:	4b6c      	ldr	r3, [pc, #432]	; (800bfe0 <_etoa+0x338>)
 800be2e:	f7f4 fa45 	bl	80002bc <__adddf3>
 800be32:	4602      	mov	r2, r0
 800be34:	460b      	mov	r3, r1
 800be36:	4610      	mov	r0, r2
 800be38:	4619      	mov	r1, r3
 800be3a:	f7f4 fea5 	bl	8000b88 <__aeabi_d2iz>
 800be3e:	4603      	mov	r3, r0
 800be40:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800be42:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800be44:	f7f4 fb86 	bl	8000554 <__aeabi_i2d>
 800be48:	a35f      	add	r3, pc, #380	; (adr r3, 800bfc8 <_etoa+0x320>)
 800be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4e:	f7f4 fbeb 	bl	8000628 <__aeabi_dmul>
 800be52:	4602      	mov	r2, r0
 800be54:	460b      	mov	r3, r1
 800be56:	4614      	mov	r4, r2
 800be58:	461d      	mov	r5, r3
 800be5a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800be5c:	f7f4 fb7a 	bl	8000554 <__aeabi_i2d>
 800be60:	a35b      	add	r3, pc, #364	; (adr r3, 800bfd0 <_etoa+0x328>)
 800be62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be66:	f7f4 fbdf 	bl	8000628 <__aeabi_dmul>
 800be6a:	4602      	mov	r2, r0
 800be6c:	460b      	mov	r3, r1
 800be6e:	4620      	mov	r0, r4
 800be70:	4629      	mov	r1, r5
 800be72:	f7f4 fa21 	bl	80002b8 <__aeabi_dsub>
 800be76:	4602      	mov	r2, r0
 800be78:	460b      	mov	r3, r1
 800be7a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800be7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800be82:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800be86:	f7f4 fbcf 	bl	8000628 <__aeabi_dmul>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800be92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be94:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800be98:	17da      	asrs	r2, r3, #31
 800be9a:	469a      	mov	sl, r3
 800be9c:	4693      	mov	fp, r2
 800be9e:	f04f 0200 	mov.w	r2, #0
 800bea2:	f04f 0300 	mov.w	r3, #0
 800bea6:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800beaa:	2200      	movs	r2, #0
 800beac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800beb0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800beb4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800beb8:	4602      	mov	r2, r0
 800beba:	460b      	mov	r3, r1
 800bebc:	f7f4 f9fe 	bl	80002bc <__adddf3>
 800bec0:	4602      	mov	r2, r0
 800bec2:	460b      	mov	r3, r1
 800bec4:	4690      	mov	r8, r2
 800bec6:	4699      	mov	r9, r3
 800bec8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800becc:	f04f 0000 	mov.w	r0, #0
 800bed0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800bed4:	f7f4 f9f0 	bl	80002b8 <__aeabi_dsub>
 800bed8:	4602      	mov	r2, r0
 800beda:	460b      	mov	r3, r1
 800bedc:	4692      	mov	sl, r2
 800bede:	469b      	mov	fp, r3
 800bee0:	f04f 0200 	mov.w	r2, #0
 800bee4:	4b3f      	ldr	r3, [pc, #252]	; (800bfe4 <_etoa+0x33c>)
 800bee6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800beea:	f7f4 fcc7 	bl	800087c <__aeabi_ddiv>
 800beee:	4602      	mov	r2, r0
 800bef0:	460b      	mov	r3, r1
 800bef2:	4610      	mov	r0, r2
 800bef4:	4619      	mov	r1, r3
 800bef6:	f04f 0200 	mov.w	r2, #0
 800befa:	4b3b      	ldr	r3, [pc, #236]	; (800bfe8 <_etoa+0x340>)
 800befc:	f7f4 f9de 	bl	80002bc <__adddf3>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800bf08:	f7f4 fcb8 	bl	800087c <__aeabi_ddiv>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	460b      	mov	r3, r1
 800bf10:	4610      	mov	r0, r2
 800bf12:	4619      	mov	r1, r3
 800bf14:	f04f 0200 	mov.w	r2, #0
 800bf18:	4b34      	ldr	r3, [pc, #208]	; (800bfec <_etoa+0x344>)
 800bf1a:	f7f4 f9cf 	bl	80002bc <__adddf3>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800bf26:	f7f4 fca9 	bl	800087c <__aeabi_ddiv>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4650      	mov	r0, sl
 800bf30:	4659      	mov	r1, fp
 800bf32:	f7f4 f9c3 	bl	80002bc <__adddf3>
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	4640      	mov	r0, r8
 800bf3c:	4649      	mov	r1, r9
 800bf3e:	f7f4 fc9d 	bl	800087c <__aeabi_ddiv>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4610      	mov	r0, r2
 800bf48:	4619      	mov	r1, r3
 800bf4a:	f04f 0200 	mov.w	r2, #0
 800bf4e:	4b28      	ldr	r3, [pc, #160]	; (800bff0 <_etoa+0x348>)
 800bf50:	f7f4 f9b4 	bl	80002bc <__adddf3>
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	4620      	mov	r0, r4
 800bf5a:	4629      	mov	r1, r5
 800bf5c:	f7f4 fb64 	bl	8000628 <__aeabi_dmul>
 800bf60:	4602      	mov	r2, r0
 800bf62:	460b      	mov	r3, r1
 800bf64:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 800bf68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bf6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bf70:	f7f4 fdcc 	bl	8000b0c <__aeabi_dcmplt>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00d      	beq.n	800bf96 <_etoa+0x2ee>
    expval--;
 800bf7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 800bf80:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bf84:	f04f 0200 	mov.w	r2, #0
 800bf88:	4b17      	ldr	r3, [pc, #92]	; (800bfe8 <_etoa+0x340>)
 800bf8a:	f7f4 fc77 	bl	800087c <__aeabi_ddiv>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	460b      	mov	r3, r1
 800bf92:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800bf96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf98:	2b63      	cmp	r3, #99	; 0x63
 800bf9a:	dc2b      	bgt.n	800bff4 <_etoa+0x34c>
 800bf9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf9e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800bfa2:	db27      	blt.n	800bff4 <_etoa+0x34c>
 800bfa4:	2304      	movs	r3, #4
 800bfa6:	e026      	b.n	800bff6 <_etoa+0x34e>
 800bfa8:	509f79fb 	.word	0x509f79fb
 800bfac:	3fd34413 	.word	0x3fd34413
 800bfb0:	8b60c8b3 	.word	0x8b60c8b3
 800bfb4:	3fc68a28 	.word	0x3fc68a28
 800bfb8:	636f4361 	.word	0x636f4361
 800bfbc:	3fd287a7 	.word	0x3fd287a7
 800bfc0:	0979a371 	.word	0x0979a371
 800bfc4:	400a934f 	.word	0x400a934f
 800bfc8:	bbb55516 	.word	0xbbb55516
 800bfcc:	40026bb1 	.word	0x40026bb1
 800bfd0:	fefa39ef 	.word	0xfefa39ef
 800bfd4:	3fe62e42 	.word	0x3fe62e42
 800bfd8:	7fefffff 	.word	0x7fefffff
 800bfdc:	3ff80000 	.word	0x3ff80000
 800bfe0:	3fe00000 	.word	0x3fe00000
 800bfe4:	402c0000 	.word	0x402c0000
 800bfe8:	40240000 	.word	0x40240000
 800bfec:	40180000 	.word	0x40180000
 800bff0:	3ff00000 	.word	0x3ff00000
 800bff4:	2305      	movs	r3, #5
 800bff6:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800bff8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c000:	2b00      	cmp	r3, #0
 800c002:	d03d      	beq.n	800c080 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800c004:	a368      	add	r3, pc, #416	; (adr r3, 800c1a8 <_etoa+0x500>)
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c00e:	f7f4 fd91 	bl	8000b34 <__aeabi_dcmpge>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d024      	beq.n	800c062 <_etoa+0x3ba>
 800c018:	a365      	add	r3, pc, #404	; (adr r3, 800c1b0 <_etoa+0x508>)
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c022:	f7f4 fd73 	bl	8000b0c <__aeabi_dcmplt>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d01a      	beq.n	800c062 <_etoa+0x3ba>
      if ((int)prec > expval) {
 800c02c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c030:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c032:	429a      	cmp	r2, r3
 800c034:	da07      	bge.n	800c046 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800c036:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c03a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	3b01      	subs	r3, #1
 800c040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c044:	e002      	b.n	800c04c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 800c046:	2300      	movs	r3, #0
 800c048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800c04c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c050:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c054:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 800c058:	2300      	movs	r3, #0
 800c05a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 800c05c:	2300      	movs	r3, #0
 800c05e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c060:	e00e      	b.n	800c080 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800c062:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00a      	beq.n	800c080 <_etoa+0x3d8>
 800c06a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c06e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c072:	2b00      	cmp	r3, #0
 800c074:	d004      	beq.n	800c080 <_etoa+0x3d8>
        --prec;
 800c076:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c07a:	3b01      	subs	r3, #1
 800c07c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800c080:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c084:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800c086:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c08a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d904      	bls.n	800c09a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800c090:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c094:	1ad3      	subs	r3, r2, r3
 800c096:	657b      	str	r3, [r7, #84]	; 0x54
 800c098:	e001      	b.n	800c09e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800c09a:	2300      	movs	r3, #0
 800c09c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800c09e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c0a2:	f003 0302 	and.w	r3, r3, #2
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d004      	beq.n	800c0b4 <_etoa+0x40c>
 800c0aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d001      	beq.n	800c0b4 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800c0b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d009      	beq.n	800c0ce <_etoa+0x426>
    value /= conv.F;
 800c0ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c0be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c0c2:	f7f4 fbdb 	bl	800087c <__aeabi_ddiv>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800c0d2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d006      	beq.n	800c0e8 <_etoa+0x440>
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	60bb      	str	r3, [r7, #8]
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c0e4:	60fb      	str	r3, [r7, #12]
 800c0e6:	e003      	b.n	800c0f0 <_etoa+0x448>
 800c0e8:	ed97 7b04 	vldr	d7, [r7, #16]
 800c0ec:	ed87 7b02 	vstr	d7, [r7, #8]
 800c0f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c0f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c0f8:	9302      	str	r3, [sp, #8]
 800c0fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0fc:	9301      	str	r3, [sp, #4]
 800c0fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	ed97 0b02 	vldr	d0, [r7, #8]
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	69fa      	ldr	r2, [r7, #28]
 800c10c:	6a39      	ldr	r1, [r7, #32]
 800c10e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c110:	f7ff fb72 	bl	800b7f8 <_ftoa>
 800c114:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800c116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d03f      	beq.n	800c19c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800c11c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c120:	f003 0320 	and.w	r3, r3, #32
 800c124:	2b00      	cmp	r3, #0
 800c126:	d001      	beq.n	800c12c <_etoa+0x484>
 800c128:	2045      	movs	r0, #69	; 0x45
 800c12a:	e000      	b.n	800c12e <_etoa+0x486>
 800c12c:	2065      	movs	r0, #101	; 0x65
 800c12e:	69fa      	ldr	r2, [r7, #28]
 800c130:	1c53      	adds	r3, r2, #1
 800c132:	61fb      	str	r3, [r7, #28]
 800c134:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	6a39      	ldr	r1, [r7, #32]
 800c13a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800c13c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c13e:	2b00      	cmp	r3, #0
 800c140:	bfb8      	it	lt
 800c142:	425b      	neglt	r3, r3
 800c144:	4618      	mov	r0, r3
 800c146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c148:	0fdb      	lsrs	r3, r3, #31
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c14e:	3a01      	subs	r2, #1
 800c150:	2105      	movs	r1, #5
 800c152:	9105      	str	r1, [sp, #20]
 800c154:	9204      	str	r2, [sp, #16]
 800c156:	2200      	movs	r2, #0
 800c158:	9203      	str	r2, [sp, #12]
 800c15a:	220a      	movs	r2, #10
 800c15c:	9202      	str	r2, [sp, #8]
 800c15e:	9301      	str	r3, [sp, #4]
 800c160:	9000      	str	r0, [sp, #0]
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	69fa      	ldr	r2, [r7, #28]
 800c166:	6a39      	ldr	r1, [r7, #32]
 800c168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c16a:	f7ff fa71 	bl	800b650 <_ntoa_long>
 800c16e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800c170:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c174:	f003 0302 	and.w	r3, r3, #2
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d00f      	beq.n	800c19c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800c17c:	e007      	b.n	800c18e <_etoa+0x4e6>
 800c17e:	69fa      	ldr	r2, [r7, #28]
 800c180:	1c53      	adds	r3, r2, #1
 800c182:	61fb      	str	r3, [r7, #28]
 800c184:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	6a39      	ldr	r1, [r7, #32]
 800c18a:	2020      	movs	r0, #32
 800c18c:	47a0      	blx	r4
 800c18e:	69fa      	ldr	r2, [r7, #28]
 800c190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c192:	1ad3      	subs	r3, r2, r3
 800c194:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c198:	429a      	cmp	r2, r3
 800c19a:	d8f0      	bhi.n	800c17e <_etoa+0x4d6>
    }
  }
  return idx;
 800c19c:	69fb      	ldr	r3, [r7, #28]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3764      	adds	r7, #100	; 0x64
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a8:	eb1c432d 	.word	0xeb1c432d
 800c1ac:	3f1a36e2 	.word	0x3f1a36e2
 800c1b0:	00000000 	.word	0x00000000
 800c1b4:	412e8480 	.word	0x412e8480

0800c1b8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800c1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1bc:	b0a3      	sub	sp, #140	; 0x8c
 800c1be:	af0a      	add	r7, sp, #40	; 0x28
 800c1c0:	6178      	str	r0, [r7, #20]
 800c1c2:	6139      	str	r1, [r7, #16]
 800c1c4:	60fa      	str	r2, [r7, #12]
 800c1c6:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f040 84be 	bne.w	800cb50 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 800c1d4:	4ba3      	ldr	r3, [pc, #652]	; (800c464 <_vsnprintf+0x2ac>)
 800c1d6:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 800c1d8:	f000 bcba 	b.w	800cb50 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	2b25      	cmp	r3, #37	; 0x25
 800c1e2:	d00d      	beq.n	800c200 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	7818      	ldrb	r0, [r3, #0]
 800c1e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c1ea:	1c53      	adds	r3, r2, #1
 800c1ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1ee:	697c      	ldr	r4, [r7, #20]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6939      	ldr	r1, [r7, #16]
 800c1f4:	47a0      	blx	r4
      format++;
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	60bb      	str	r3, [r7, #8]
      continue;
 800c1fc:	f000 bca8 	b.w	800cb50 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	3301      	adds	r3, #1
 800c204:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800c206:	2300      	movs	r3, #0
 800c208:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	3b20      	subs	r3, #32
 800c210:	2b10      	cmp	r3, #16
 800c212:	d857      	bhi.n	800c2c4 <_vsnprintf+0x10c>
 800c214:	a201      	add	r2, pc, #4	; (adr r2, 800c21c <_vsnprintf+0x64>)
 800c216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c21a:	bf00      	nop
 800c21c:	0800c29d 	.word	0x0800c29d
 800c220:	0800c2c5 	.word	0x0800c2c5
 800c224:	0800c2c5 	.word	0x0800c2c5
 800c228:	0800c2b1 	.word	0x0800c2b1
 800c22c:	0800c2c5 	.word	0x0800c2c5
 800c230:	0800c2c5 	.word	0x0800c2c5
 800c234:	0800c2c5 	.word	0x0800c2c5
 800c238:	0800c2c5 	.word	0x0800c2c5
 800c23c:	0800c2c5 	.word	0x0800c2c5
 800c240:	0800c2c5 	.word	0x0800c2c5
 800c244:	0800c2c5 	.word	0x0800c2c5
 800c248:	0800c289 	.word	0x0800c289
 800c24c:	0800c2c5 	.word	0x0800c2c5
 800c250:	0800c275 	.word	0x0800c275
 800c254:	0800c2c5 	.word	0x0800c2c5
 800c258:	0800c2c5 	.word	0x0800c2c5
 800c25c:	0800c261 	.word	0x0800c261
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800c260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c262:	f043 0301 	orr.w	r3, r3, #1
 800c266:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	3301      	adds	r3, #1
 800c26c:	60bb      	str	r3, [r7, #8]
 800c26e:	2301      	movs	r3, #1
 800c270:	653b      	str	r3, [r7, #80]	; 0x50
 800c272:	e02a      	b.n	800c2ca <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800c274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c276:	f043 0302 	orr.w	r3, r3, #2
 800c27a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	3301      	adds	r3, #1
 800c280:	60bb      	str	r3, [r7, #8]
 800c282:	2301      	movs	r3, #1
 800c284:	653b      	str	r3, [r7, #80]	; 0x50
 800c286:	e020      	b.n	800c2ca <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800c288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c28a:	f043 0304 	orr.w	r3, r3, #4
 800c28e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	3301      	adds	r3, #1
 800c294:	60bb      	str	r3, [r7, #8]
 800c296:	2301      	movs	r3, #1
 800c298:	653b      	str	r3, [r7, #80]	; 0x50
 800c29a:	e016      	b.n	800c2ca <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800c29c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c29e:	f043 0308 	orr.w	r3, r3, #8
 800c2a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	60bb      	str	r3, [r7, #8]
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	653b      	str	r3, [r7, #80]	; 0x50
 800c2ae:	e00c      	b.n	800c2ca <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800c2b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2b2:	f043 0310 	orr.w	r3, r3, #16
 800c2b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	60bb      	str	r3, [r7, #8]
 800c2be:	2301      	movs	r3, #1
 800c2c0:	653b      	str	r3, [r7, #80]	; 0x50
 800c2c2:	e002      	b.n	800c2ca <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	653b      	str	r3, [r7, #80]	; 0x50
 800c2c8:	bf00      	nop
      }
    } while (n);
 800c2ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d19c      	bne.n	800c20a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7ff f852 	bl	800b382 <_is_digit>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d006      	beq.n	800c2f2 <_vsnprintf+0x13a>
      width = _atoi(&format);
 800c2e4:	f107 0308 	add.w	r3, r7, #8
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7ff f861 	bl	800b3b0 <_atoi>
 800c2ee:	65b8      	str	r0, [r7, #88]	; 0x58
 800c2f0:	e01a      	b.n	800c328 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c2f8:	d116      	bne.n	800c328 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800c2fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c2fe:	1d1a      	adds	r2, r3, #4
 800c300:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 800c308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	da07      	bge.n	800c31e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800c30e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c310:	f043 0302 	orr.w	r3, r3, #2
 800c314:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800c316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c318:	425b      	negs	r3, r3
 800c31a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c31c:	e001      	b.n	800c322 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 800c31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c320:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	3301      	adds	r3, #1
 800c326:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 800c328:	2300      	movs	r3, #0
 800c32a:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	2b2e      	cmp	r3, #46	; 0x2e
 800c332:	d127      	bne.n	800c384 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800c334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c33a:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	3301      	adds	r3, #1
 800c340:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	4618      	mov	r0, r3
 800c348:	f7ff f81b 	bl	800b382 <_is_digit>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d006      	beq.n	800c360 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800c352:	f107 0308 	add.w	r3, r7, #8
 800c356:	4618      	mov	r0, r3
 800c358:	f7ff f82a 	bl	800b3b0 <_atoi>
 800c35c:	6578      	str	r0, [r7, #84]	; 0x54
 800c35e:	e011      	b.n	800c384 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	2b2a      	cmp	r3, #42	; 0x2a
 800c366:	d10d      	bne.n	800c384 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 800c368:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c36c:	1d1a      	adds	r2, r3, #4
 800c36e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800c376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c378:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c37c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	3301      	adds	r3, #1
 800c382:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	3b68      	subs	r3, #104	; 0x68
 800c38a:	2b12      	cmp	r3, #18
 800c38c:	d866      	bhi.n	800c45c <_vsnprintf+0x2a4>
 800c38e:	a201      	add	r2, pc, #4	; (adr r2, 800c394 <_vsnprintf+0x1dc>)
 800c390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c394:	0800c407 	.word	0x0800c407
 800c398:	0800c45d 	.word	0x0800c45d
 800c39c:	0800c43d 	.word	0x0800c43d
 800c3a0:	0800c45d 	.word	0x0800c45d
 800c3a4:	0800c3e1 	.word	0x0800c3e1
 800c3a8:	0800c45d 	.word	0x0800c45d
 800c3ac:	0800c45d 	.word	0x0800c45d
 800c3b0:	0800c45d 	.word	0x0800c45d
 800c3b4:	0800c45d 	.word	0x0800c45d
 800c3b8:	0800c45d 	.word	0x0800c45d
 800c3bc:	0800c45d 	.word	0x0800c45d
 800c3c0:	0800c45d 	.word	0x0800c45d
 800c3c4:	0800c42d 	.word	0x0800c42d
 800c3c8:	0800c45d 	.word	0x0800c45d
 800c3cc:	0800c45d 	.word	0x0800c45d
 800c3d0:	0800c45d 	.word	0x0800c45d
 800c3d4:	0800c45d 	.word	0x0800c45d
 800c3d8:	0800c45d 	.word	0x0800c45d
 800c3dc:	0800c44d 	.word	0x0800c44d
      case 'l' :
        flags |= FLAGS_LONG;
 800c3e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3e6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	2b6c      	cmp	r3, #108	; 0x6c
 800c3f4:	d134      	bne.n	800c460 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800c3f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c3fc:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	3301      	adds	r3, #1
 800c402:	60bb      	str	r3, [r7, #8]
        }
        break;
 800c404:	e02c      	b.n	800c460 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800c406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c40c:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	3301      	adds	r3, #1
 800c412:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	2b68      	cmp	r3, #104	; 0x68
 800c41a:	d125      	bne.n	800c468 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 800c41c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c41e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c422:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	3301      	adds	r3, #1
 800c428:	60bb      	str	r3, [r7, #8]
        }
        break;
 800c42a:	e01d      	b.n	800c468 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800c42c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c42e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c432:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	3301      	adds	r3, #1
 800c438:	60bb      	str	r3, [r7, #8]
        break;
 800c43a:	e016      	b.n	800c46a <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800c43c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c43e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c442:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	3301      	adds	r3, #1
 800c448:	60bb      	str	r3, [r7, #8]
        break;
 800c44a:	e00e      	b.n	800c46a <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800c44c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c44e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c452:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	3301      	adds	r3, #1
 800c458:	60bb      	str	r3, [r7, #8]
        break;
 800c45a:	e006      	b.n	800c46a <_vsnprintf+0x2b2>
      default :
        break;
 800c45c:	bf00      	nop
 800c45e:	e004      	b.n	800c46a <_vsnprintf+0x2b2>
        break;
 800c460:	bf00      	nop
 800c462:	e002      	b.n	800c46a <_vsnprintf+0x2b2>
 800c464:	0800b32d 	.word	0x0800b32d
        break;
 800c468:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	3b25      	subs	r3, #37	; 0x25
 800c470:	2b53      	cmp	r3, #83	; 0x53
 800c472:	f200 8360 	bhi.w	800cb36 <_vsnprintf+0x97e>
 800c476:	a201      	add	r2, pc, #4	; (adr r2, 800c47c <_vsnprintf+0x2c4>)
 800c478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c47c:	0800cb1f 	.word	0x0800cb1f
 800c480:	0800cb37 	.word	0x0800cb37
 800c484:	0800cb37 	.word	0x0800cb37
 800c488:	0800cb37 	.word	0x0800cb37
 800c48c:	0800cb37 	.word	0x0800cb37
 800c490:	0800cb37 	.word	0x0800cb37
 800c494:	0800cb37 	.word	0x0800cb37
 800c498:	0800cb37 	.word	0x0800cb37
 800c49c:	0800cb37 	.word	0x0800cb37
 800c4a0:	0800cb37 	.word	0x0800cb37
 800c4a4:	0800cb37 	.word	0x0800cb37
 800c4a8:	0800cb37 	.word	0x0800cb37
 800c4ac:	0800cb37 	.word	0x0800cb37
 800c4b0:	0800cb37 	.word	0x0800cb37
 800c4b4:	0800cb37 	.word	0x0800cb37
 800c4b8:	0800cb37 	.word	0x0800cb37
 800c4bc:	0800cb37 	.word	0x0800cb37
 800c4c0:	0800cb37 	.word	0x0800cb37
 800c4c4:	0800cb37 	.word	0x0800cb37
 800c4c8:	0800cb37 	.word	0x0800cb37
 800c4cc:	0800cb37 	.word	0x0800cb37
 800c4d0:	0800cb37 	.word	0x0800cb37
 800c4d4:	0800cb37 	.word	0x0800cb37
 800c4d8:	0800cb37 	.word	0x0800cb37
 800c4dc:	0800cb37 	.word	0x0800cb37
 800c4e0:	0800cb37 	.word	0x0800cb37
 800c4e4:	0800cb37 	.word	0x0800cb37
 800c4e8:	0800cb37 	.word	0x0800cb37
 800c4ec:	0800cb37 	.word	0x0800cb37
 800c4f0:	0800cb37 	.word	0x0800cb37
 800c4f4:	0800cb37 	.word	0x0800cb37
 800c4f8:	0800cb37 	.word	0x0800cb37
 800c4fc:	0800c8d3 	.word	0x0800c8d3
 800c500:	0800c883 	.word	0x0800c883
 800c504:	0800c8d3 	.word	0x0800c8d3
 800c508:	0800cb37 	.word	0x0800cb37
 800c50c:	0800cb37 	.word	0x0800cb37
 800c510:	0800cb37 	.word	0x0800cb37
 800c514:	0800cb37 	.word	0x0800cb37
 800c518:	0800cb37 	.word	0x0800cb37
 800c51c:	0800cb37 	.word	0x0800cb37
 800c520:	0800cb37 	.word	0x0800cb37
 800c524:	0800cb37 	.word	0x0800cb37
 800c528:	0800cb37 	.word	0x0800cb37
 800c52c:	0800cb37 	.word	0x0800cb37
 800c530:	0800cb37 	.word	0x0800cb37
 800c534:	0800cb37 	.word	0x0800cb37
 800c538:	0800cb37 	.word	0x0800cb37
 800c53c:	0800cb37 	.word	0x0800cb37
 800c540:	0800cb37 	.word	0x0800cb37
 800c544:	0800cb37 	.word	0x0800cb37
 800c548:	0800c5cd 	.word	0x0800c5cd
 800c54c:	0800cb37 	.word	0x0800cb37
 800c550:	0800cb37 	.word	0x0800cb37
 800c554:	0800cb37 	.word	0x0800cb37
 800c558:	0800cb37 	.word	0x0800cb37
 800c55c:	0800cb37 	.word	0x0800cb37
 800c560:	0800cb37 	.word	0x0800cb37
 800c564:	0800cb37 	.word	0x0800cb37
 800c568:	0800cb37 	.word	0x0800cb37
 800c56c:	0800cb37 	.word	0x0800cb37
 800c570:	0800c5cd 	.word	0x0800c5cd
 800c574:	0800c943 	.word	0x0800c943
 800c578:	0800c5cd 	.word	0x0800c5cd
 800c57c:	0800c8d3 	.word	0x0800c8d3
 800c580:	0800c883 	.word	0x0800c883
 800c584:	0800c8d3 	.word	0x0800c8d3
 800c588:	0800cb37 	.word	0x0800cb37
 800c58c:	0800c5cd 	.word	0x0800c5cd
 800c590:	0800cb37 	.word	0x0800cb37
 800c594:	0800cb37 	.word	0x0800cb37
 800c598:	0800cb37 	.word	0x0800cb37
 800c59c:	0800cb37 	.word	0x0800cb37
 800c5a0:	0800cb37 	.word	0x0800cb37
 800c5a4:	0800c5cd 	.word	0x0800c5cd
 800c5a8:	0800ca83 	.word	0x0800ca83
 800c5ac:	0800cb37 	.word	0x0800cb37
 800c5b0:	0800cb37 	.word	0x0800cb37
 800c5b4:	0800c9bb 	.word	0x0800c9bb
 800c5b8:	0800cb37 	.word	0x0800cb37
 800c5bc:	0800c5cd 	.word	0x0800c5cd
 800c5c0:	0800cb37 	.word	0x0800cb37
 800c5c4:	0800cb37 	.word	0x0800cb37
 800c5c8:	0800c5cd 	.word	0x0800c5cd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	2b78      	cmp	r3, #120	; 0x78
 800c5d2:	d003      	beq.n	800c5dc <_vsnprintf+0x424>
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	2b58      	cmp	r3, #88	; 0x58
 800c5da:	d102      	bne.n	800c5e2 <_vsnprintf+0x42a>
          base = 16U;
 800c5dc:	2310      	movs	r3, #16
 800c5de:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5e0:	e013      	b.n	800c60a <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	2b6f      	cmp	r3, #111	; 0x6f
 800c5e8:	d102      	bne.n	800c5f0 <_vsnprintf+0x438>
          base =  8U;
 800c5ea:	2308      	movs	r3, #8
 800c5ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5ee:	e00c      	b.n	800c60a <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	2b62      	cmp	r3, #98	; 0x62
 800c5f6:	d102      	bne.n	800c5fe <_vsnprintf+0x446>
          base =  2U;
 800c5f8:	2302      	movs	r3, #2
 800c5fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5fc:	e005      	b.n	800c60a <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 800c5fe:	230a      	movs	r3, #10
 800c600:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800c602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c604:	f023 0310 	bic.w	r3, r3, #16
 800c608:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	2b58      	cmp	r3, #88	; 0x58
 800c610:	d103      	bne.n	800c61a <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 800c612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c614:	f043 0320 	orr.w	r3, r3, #32
 800c618:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	2b69      	cmp	r3, #105	; 0x69
 800c620:	d007      	beq.n	800c632 <_vsnprintf+0x47a>
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	2b64      	cmp	r3, #100	; 0x64
 800c628:	d003      	beq.n	800c632 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800c62a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c62c:	f023 030c 	bic.w	r3, r3, #12
 800c630:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800c632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d003      	beq.n	800c644 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 800c63c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c63e:	f023 0301 	bic.w	r3, r3, #1
 800c642:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	2b69      	cmp	r3, #105	; 0x69
 800c64a:	d004      	beq.n	800c656 <_vsnprintf+0x49e>
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	2b64      	cmp	r3, #100	; 0x64
 800c652:	f040 8098 	bne.w	800c786 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800c656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d031      	beq.n	800c6c4 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800c660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c664:	3307      	adds	r3, #7
 800c666:	f023 0307 	bic.w	r3, r3, #7
 800c66a:	f103 0208 	add.w	r2, r3, #8
 800c66e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c676:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800c67a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	da06      	bge.n	800c690 <_vsnprintf+0x4d8>
 800c682:	2100      	movs	r1, #0
 800c684:	f1d2 0800 	rsbs	r8, r2, #0
 800c688:	eb61 0903 	sbc.w	r9, r1, r3
 800c68c:	4642      	mov	r2, r8
 800c68e:	464b      	mov	r3, r9
 800c690:	69f9      	ldr	r1, [r7, #28]
 800c692:	0fc9      	lsrs	r1, r1, #31
 800c694:	b2c9      	uxtb	r1, r1
 800c696:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c698:	2400      	movs	r4, #0
 800c69a:	4682      	mov	sl, r0
 800c69c:	46a3      	mov	fp, r4
 800c69e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c6a0:	9008      	str	r0, [sp, #32]
 800c6a2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c6a4:	9007      	str	r0, [sp, #28]
 800c6a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c6a8:	9006      	str	r0, [sp, #24]
 800c6aa:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800c6ae:	9102      	str	r1, [sp, #8]
 800c6b0:	e9cd 2300 	strd	r2, r3, [sp]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6b8:	6939      	ldr	r1, [r7, #16]
 800c6ba:	6978      	ldr	r0, [r7, #20]
 800c6bc:	f7ff f82e 	bl	800b71c <_ntoa_long_long>
 800c6c0:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800c6c2:	e0da      	b.n	800c87a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800c6c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d020      	beq.n	800c710 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 800c6ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6d2:	1d1a      	adds	r2, r3, #4
 800c6d4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	bfb8      	it	lt
 800c6e2:	425b      	neglt	r3, r3
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e8:	0fdb      	lsrs	r3, r3, #31
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c6ee:	9205      	str	r2, [sp, #20]
 800c6f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c6f2:	9204      	str	r2, [sp, #16]
 800c6f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c6f6:	9203      	str	r2, [sp, #12]
 800c6f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6fa:	9202      	str	r2, [sp, #8]
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	9100      	str	r1, [sp, #0]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c704:	6939      	ldr	r1, [r7, #16]
 800c706:	6978      	ldr	r0, [r7, #20]
 800c708:	f7fe ffa2 	bl	800b650 <_ntoa_long>
 800c70c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800c70e:	e0b4      	b.n	800c87a <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800c710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c716:	2b00      	cmp	r3, #0
 800c718:	d007      	beq.n	800c72a <_vsnprintf+0x572>
 800c71a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c71e:	1d1a      	adds	r2, r3, #4
 800c720:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	b2db      	uxtb	r3, r3
 800c728:	e012      	b.n	800c750 <_vsnprintf+0x598>
 800c72a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c72c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c730:	2b00      	cmp	r3, #0
 800c732:	d007      	beq.n	800c744 <_vsnprintf+0x58c>
 800c734:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c738:	1d1a      	adds	r2, r3, #4
 800c73a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	b21b      	sxth	r3, r3
 800c742:	e005      	b.n	800c750 <_vsnprintf+0x598>
 800c744:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c748:	1d1a      	adds	r2, r3, #4
 800c74a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800c752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c754:	2b00      	cmp	r3, #0
 800c756:	bfb8      	it	lt
 800c758:	425b      	neglt	r3, r3
 800c75a:	4619      	mov	r1, r3
 800c75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75e:	0fdb      	lsrs	r3, r3, #31
 800c760:	b2db      	uxtb	r3, r3
 800c762:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c764:	9205      	str	r2, [sp, #20]
 800c766:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c768:	9204      	str	r2, [sp, #16]
 800c76a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c76c:	9203      	str	r2, [sp, #12]
 800c76e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c770:	9202      	str	r2, [sp, #8]
 800c772:	9301      	str	r3, [sp, #4]
 800c774:	9100      	str	r1, [sp, #0]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c77a:	6939      	ldr	r1, [r7, #16]
 800c77c:	6978      	ldr	r0, [r7, #20]
 800c77e:	f7fe ff67 	bl	800b650 <_ntoa_long>
 800c782:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800c784:	e079      	b.n	800c87a <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800c786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d022      	beq.n	800c7d6 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800c790:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c794:	3307      	adds	r3, #7
 800c796:	f023 0307 	bic.w	r3, r3, #7
 800c79a:	f103 0208 	add.w	r2, r3, #8
 800c79e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	460d      	mov	r5, r1
 800c7ac:	4606      	mov	r6, r0
 800c7ae:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c7b0:	9108      	str	r1, [sp, #32]
 800c7b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c7b4:	9107      	str	r1, [sp, #28]
 800c7b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c7b8:	9106      	str	r1, [sp, #24]
 800c7ba:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800c7be:	2100      	movs	r1, #0
 800c7c0:	9102      	str	r1, [sp, #8]
 800c7c2:	e9cd 2300 	strd	r2, r3, [sp]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7ca:	6939      	ldr	r1, [r7, #16]
 800c7cc:	6978      	ldr	r0, [r7, #20]
 800c7ce:	f7fe ffa5 	bl	800b71c <_ntoa_long_long>
 800c7d2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c7d4:	e051      	b.n	800c87a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800c7d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d018      	beq.n	800c812 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800c7e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c7e4:	1d1a      	adds	r2, r3, #4
 800c7e6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c7ee:	9205      	str	r2, [sp, #20]
 800c7f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c7f2:	9204      	str	r2, [sp, #16]
 800c7f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c7f6:	9203      	str	r2, [sp, #12]
 800c7f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7fa:	9202      	str	r2, [sp, #8]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	9201      	str	r2, [sp, #4]
 800c800:	9300      	str	r3, [sp, #0]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c806:	6939      	ldr	r1, [r7, #16]
 800c808:	6978      	ldr	r0, [r7, #20]
 800c80a:	f7fe ff21 	bl	800b650 <_ntoa_long>
 800c80e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c810:	e033      	b.n	800c87a <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800c812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d007      	beq.n	800c82c <_vsnprintf+0x674>
 800c81c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c820:	1d1a      	adds	r2, r3, #4
 800c822:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	e012      	b.n	800c852 <_vsnprintf+0x69a>
 800c82c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c82e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c832:	2b00      	cmp	r3, #0
 800c834:	d007      	beq.n	800c846 <_vsnprintf+0x68e>
 800c836:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c83a:	1d1a      	adds	r2, r3, #4
 800c83c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	b29b      	uxth	r3, r3
 800c844:	e005      	b.n	800c852 <_vsnprintf+0x69a>
 800c846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c84a:	1d1a      	adds	r2, r3, #4
 800c84c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800c854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c856:	9305      	str	r3, [sp, #20]
 800c858:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c85a:	9304      	str	r3, [sp, #16]
 800c85c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c85e:	9303      	str	r3, [sp, #12]
 800c860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c862:	9302      	str	r3, [sp, #8]
 800c864:	2300      	movs	r3, #0
 800c866:	9301      	str	r3, [sp, #4]
 800c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86a:	9300      	str	r3, [sp, #0]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c870:	6939      	ldr	r1, [r7, #16]
 800c872:	6978      	ldr	r0, [r7, #20]
 800c874:	f7fe feec 	bl	800b650 <_ntoa_long>
 800c878:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	3301      	adds	r3, #1
 800c87e:	60bb      	str	r3, [r7, #8]
        break;
 800c880:	e166      	b.n	800cb50 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	2b46      	cmp	r3, #70	; 0x46
 800c888:	d103      	bne.n	800c892 <_vsnprintf+0x6da>
 800c88a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c88c:	f043 0320 	orr.w	r3, r3, #32
 800c890:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800c892:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c896:	3307      	adds	r3, #7
 800c898:	f023 0307 	bic.w	r3, r3, #7
 800c89c:	f103 0208 	add.w	r2, r3, #8
 800c8a0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c8a4:	ed93 7b00 	vldr	d7, [r3]
 800c8a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8aa:	9302      	str	r3, [sp, #8]
 800c8ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c8ae:	9301      	str	r3, [sp, #4]
 800c8b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8b2:	9300      	str	r3, [sp, #0]
 800c8b4:	eeb0 0a47 	vmov.f32	s0, s14
 800c8b8:	eef0 0a67 	vmov.f32	s1, s15
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8c0:	6939      	ldr	r1, [r7, #16]
 800c8c2:	6978      	ldr	r0, [r7, #20]
 800c8c4:	f7fe ff98 	bl	800b7f8 <_ftoa>
 800c8c8:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	60bb      	str	r3, [r7, #8]
        break;
 800c8d0:	e13e      	b.n	800cb50 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	2b67      	cmp	r3, #103	; 0x67
 800c8d8:	d003      	beq.n	800c8e2 <_vsnprintf+0x72a>
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	2b47      	cmp	r3, #71	; 0x47
 800c8e0:	d103      	bne.n	800c8ea <_vsnprintf+0x732>
 800c8e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c8e8:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	2b45      	cmp	r3, #69	; 0x45
 800c8f0:	d003      	beq.n	800c8fa <_vsnprintf+0x742>
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	2b47      	cmp	r3, #71	; 0x47
 800c8f8:	d103      	bne.n	800c902 <_vsnprintf+0x74a>
 800c8fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8fc:	f043 0320 	orr.w	r3, r3, #32
 800c900:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800c902:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c906:	3307      	adds	r3, #7
 800c908:	f023 0307 	bic.w	r3, r3, #7
 800c90c:	f103 0208 	add.w	r2, r3, #8
 800c910:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c914:	ed93 7b00 	vldr	d7, [r3]
 800c918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c91a:	9302      	str	r3, [sp, #8]
 800c91c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c91e:	9301      	str	r3, [sp, #4]
 800c920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	eeb0 0a47 	vmov.f32	s0, s14
 800c928:	eef0 0a67 	vmov.f32	s1, s15
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c930:	6939      	ldr	r1, [r7, #16]
 800c932:	6978      	ldr	r0, [r7, #20]
 800c934:	f7ff f9b8 	bl	800bca8 <_etoa>
 800c938:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	3301      	adds	r3, #1
 800c93e:	60bb      	str	r3, [r7, #8]
        break;
 800c940:	e106      	b.n	800cb50 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800c942:	2301      	movs	r3, #1
 800c944:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800c946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c948:	f003 0302 	and.w	r3, r3, #2
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d10e      	bne.n	800c96e <_vsnprintf+0x7b6>
          while (l++ < width) {
 800c950:	e007      	b.n	800c962 <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 800c952:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c954:	1c53      	adds	r3, r2, #1
 800c956:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c958:	697c      	ldr	r4, [r7, #20]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6939      	ldr	r1, [r7, #16]
 800c95e:	2020      	movs	r0, #32
 800c960:	47a0      	blx	r4
          while (l++ < width) {
 800c962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c964:	1c5a      	adds	r2, r3, #1
 800c966:	647a      	str	r2, [r7, #68]	; 0x44
 800c968:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d8f1      	bhi.n	800c952 <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800c96e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c972:	1d1a      	adds	r2, r3, #4
 800c974:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	b2d8      	uxtb	r0, r3
 800c97c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c97e:	1c53      	adds	r3, r2, #1
 800c980:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c982:	697c      	ldr	r4, [r7, #20]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6939      	ldr	r1, [r7, #16]
 800c988:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800c98a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c98c:	f003 0302 	and.w	r3, r3, #2
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00e      	beq.n	800c9b2 <_vsnprintf+0x7fa>
          while (l++ < width) {
 800c994:	e007      	b.n	800c9a6 <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 800c996:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c998:	1c53      	adds	r3, r2, #1
 800c99a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c99c:	697c      	ldr	r4, [r7, #20]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	6939      	ldr	r1, [r7, #16]
 800c9a2:	2020      	movs	r0, #32
 800c9a4:	47a0      	blx	r4
          while (l++ < width) {
 800c9a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9a8:	1c5a      	adds	r2, r3, #1
 800c9aa:	647a      	str	r2, [r7, #68]	; 0x44
 800c9ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d8f1      	bhi.n	800c996 <_vsnprintf+0x7de>
          }
        }
        format++;
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	60bb      	str	r3, [r7, #8]
        break;
 800c9b8:	e0ca      	b.n	800cb50 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800c9ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c9be:	1d1a      	adds	r2, r3, #4
 800c9c0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800c9c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d001      	beq.n	800c9d2 <_vsnprintf+0x81a>
 800c9ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9d0:	e001      	b.n	800c9d6 <_vsnprintf+0x81e>
 800c9d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c9da:	f7fe fcb5 	bl	800b348 <_strnlen_s>
 800c9de:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800c9e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d005      	beq.n	800c9f6 <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 800c9ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	bf28      	it	cs
 800c9f2:	4613      	movcs	r3, r2
 800c9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 800c9f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9f8:	f003 0302 	and.w	r3, r3, #2
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d11a      	bne.n	800ca36 <_vsnprintf+0x87e>
          while (l++ < width) {
 800ca00:	e007      	b.n	800ca12 <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 800ca02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca04:	1c53      	adds	r3, r2, #1
 800ca06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca08:	697c      	ldr	r4, [r7, #20]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	6939      	ldr	r1, [r7, #16]
 800ca0e:	2020      	movs	r0, #32
 800ca10:	47a0      	blx	r4
          while (l++ < width) {
 800ca12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca14:	1c5a      	adds	r2, r3, #1
 800ca16:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ca18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d8f1      	bhi.n	800ca02 <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800ca1e:	e00a      	b.n	800ca36 <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 800ca20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca22:	1c5a      	adds	r2, r3, #1
 800ca24:	643a      	str	r2, [r7, #64]	; 0x40
 800ca26:	7818      	ldrb	r0, [r3, #0]
 800ca28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca2a:	1c53      	adds	r3, r2, #1
 800ca2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca2e:	697c      	ldr	r4, [r7, #20]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	6939      	ldr	r1, [r7, #16]
 800ca34:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800ca36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d009      	beq.n	800ca52 <_vsnprintf+0x89a>
 800ca3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d0eb      	beq.n	800ca20 <_vsnprintf+0x868>
 800ca48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca4a:	1e5a      	subs	r2, r3, #1
 800ca4c:	657a      	str	r2, [r7, #84]	; 0x54
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1e6      	bne.n	800ca20 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800ca52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca54:	f003 0302 	and.w	r3, r3, #2
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00e      	beq.n	800ca7a <_vsnprintf+0x8c2>
          while (l++ < width) {
 800ca5c:	e007      	b.n	800ca6e <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 800ca5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca60:	1c53      	adds	r3, r2, #1
 800ca62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca64:	697c      	ldr	r4, [r7, #20]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6939      	ldr	r1, [r7, #16]
 800ca6a:	2020      	movs	r0, #32
 800ca6c:	47a0      	blx	r4
          while (l++ < width) {
 800ca6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca70:	1c5a      	adds	r2, r3, #1
 800ca72:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ca74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d8f1      	bhi.n	800ca5e <_vsnprintf+0x8a6>
          }
        }
        format++;
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	60bb      	str	r3, [r7, #8]
        break;
 800ca80:	e066      	b.n	800cb50 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800ca82:	2308      	movs	r3, #8
 800ca84:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800ca86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca88:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800ca8c:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800ca8e:	2300      	movs	r3, #0
 800ca90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800ca94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d023      	beq.n	800cae4 <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800ca9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800caa0:	1d1a      	adds	r2, r3, #4
 800caa2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	461a      	mov	r2, r3
 800caaa:	2300      	movs	r3, #0
 800caac:	603a      	str	r2, [r7, #0]
 800caae:	607b      	str	r3, [r7, #4]
 800cab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cab2:	9308      	str	r3, [sp, #32]
 800cab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cab6:	9307      	str	r3, [sp, #28]
 800cab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caba:	9306      	str	r3, [sp, #24]
 800cabc:	f04f 0210 	mov.w	r2, #16
 800cac0:	f04f 0300 	mov.w	r3, #0
 800cac4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cac8:	2300      	movs	r3, #0
 800caca:	9302      	str	r3, [sp, #8]
 800cacc:	e9d7 3400 	ldrd	r3, r4, [r7]
 800cad0:	e9cd 3400 	strd	r3, r4, [sp]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cad8:	6939      	ldr	r1, [r7, #16]
 800cada:	6978      	ldr	r0, [r7, #20]
 800cadc:	f7fe fe1e 	bl	800b71c <_ntoa_long_long>
 800cae0:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cae2:	e018      	b.n	800cb16 <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800cae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cae8:	1d1a      	adds	r2, r3, #4
 800caea:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	461a      	mov	r2, r3
 800caf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caf4:	9305      	str	r3, [sp, #20]
 800caf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800caf8:	9304      	str	r3, [sp, #16]
 800cafa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cafc:	9303      	str	r3, [sp, #12]
 800cafe:	2310      	movs	r3, #16
 800cb00:	9302      	str	r3, [sp, #8]
 800cb02:	2300      	movs	r3, #0
 800cb04:	9301      	str	r3, [sp, #4]
 800cb06:	9200      	str	r2, [sp, #0]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb0c:	6939      	ldr	r1, [r7, #16]
 800cb0e:	6978      	ldr	r0, [r7, #20]
 800cb10:	f7fe fd9e 	bl	800b650 <_ntoa_long>
 800cb14:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	3301      	adds	r3, #1
 800cb1a:	60bb      	str	r3, [r7, #8]
        break;
 800cb1c:	e018      	b.n	800cb50 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800cb1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb20:	1c53      	adds	r3, r2, #1
 800cb22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb24:	697c      	ldr	r4, [r7, #20]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6939      	ldr	r1, [r7, #16]
 800cb2a:	2025      	movs	r0, #37	; 0x25
 800cb2c:	47a0      	blx	r4
        format++;
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	3301      	adds	r3, #1
 800cb32:	60bb      	str	r3, [r7, #8]
        break;
 800cb34:	e00c      	b.n	800cb50 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	7818      	ldrb	r0, [r3, #0]
 800cb3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb3c:	1c53      	adds	r3, r2, #1
 800cb3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb40:	697c      	ldr	r4, [r7, #20]
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6939      	ldr	r1, [r7, #16]
 800cb46:	47a0      	blx	r4
        format++;
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	60bb      	str	r3, [r7, #8]
        break;
 800cb4e:	bf00      	nop
  while (*format)
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f47f ab41 	bne.w	800c1dc <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800cb5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d302      	bcc.n	800cb68 <_vsnprintf+0x9b0>
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	1e5a      	subs	r2, r3, #1
 800cb66:	e000      	b.n	800cb6a <_vsnprintf+0x9b2>
 800cb68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb6a:	697c      	ldr	r4, [r7, #20]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	6939      	ldr	r1, [r7, #16]
 800cb70:	2000      	movs	r0, #0
 800cb72:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800cb74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3764      	adds	r7, #100	; 0x64
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb80 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 800cb80:	b40e      	push	{r1, r2, r3}
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b087      	sub	sp, #28
 800cb86:	af02      	add	r7, sp, #8
 800cb88:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800cb8a:	f107 0320 	add.w	r3, r7, #32
 800cb8e:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	69fb      	ldr	r3, [r7, #28]
 800cb96:	f04f 32ff 	mov.w	r2, #4294967295
 800cb9a:	6879      	ldr	r1, [r7, #4]
 800cb9c:	4805      	ldr	r0, [pc, #20]	; (800cbb4 <sprintf_+0x34>)
 800cb9e:	f7ff fb0b 	bl	800c1b8 <_vsnprintf>
 800cba2:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800cba4:	68fb      	ldr	r3, [r7, #12]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3714      	adds	r7, #20
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cbb0:	b003      	add	sp, #12
 800cbb2:	4770      	bx	lr
 800cbb4:	0800b2ff 	.word	0x0800b2ff

0800cbb8 <RFP_Handle>:
        { RFP_WaitForResponseFunction }, { RFP_ParseResponseFunction } };
RFPCommandFunctions_TypeDef RfpCommandFunction[RFP_COMMAND_CNT];
RFPDataFunctions_TypeDef RfpDataFunctions;
RFPMessageFunctions_TypeDef RfpMessageFunction[RFP_MESSAGE_CNT];
void RFP_Handle(void)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	af00      	add	r7, sp, #0
   RFP_ChangeState();
 800cbbc:	f000 f856 	bl	800cc6c <RFP_ChangeState>
   if(RfpFunction[Rfp->State].RfpFunction != NULL)
 800cbc0:	4b09      	ldr	r3, [pc, #36]	; (800cbe8 <RFP_Handle+0x30>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	4b08      	ldr	r3, [pc, #32]	; (800cbec <RFP_Handle+0x34>)
 800cbca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d007      	beq.n	800cbe2 <RFP_Handle+0x2a>
   {
      RfpFunction[Rfp->State].RfpFunction();
 800cbd2:	4b05      	ldr	r3, [pc, #20]	; (800cbe8 <RFP_Handle+0x30>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	461a      	mov	r2, r3
 800cbda:	4b04      	ldr	r3, [pc, #16]	; (800cbec <RFP_Handle+0x34>)
 800cbdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbe0:	4798      	blx	r3
   }
}
 800cbe2:	bf00      	nop
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	200041a0 	.word	0x200041a0
 800cbec:	20000078 	.word	0x20000078

0800cbf0 <RFP_Init>:
void RFP_Init(RFP_TypeDef *RadioProtocol, RFPDeviceID_TypeDef Device)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	70fb      	strb	r3, [r7, #3]
   Rfp             = RadioProtocol;
 800cbfc:	4a17      	ldr	r2, [pc, #92]	; (800cc5c <RFP_Init+0x6c>)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6013      	str	r3, [r2, #0]
   Rfp->Initialize = RFP_INITIALIZE;
 800cc02:	4b16      	ldr	r3, [pc, #88]	; (800cc5c <RFP_Init+0x6c>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2201      	movs	r2, #1
 800cc08:	70da      	strb	r2, [r3, #3]
   Rfp->DeviceType = Device;
 800cc0a:	4b14      	ldr	r3, [pc, #80]	; (800cc5c <RFP_Init+0x6c>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	78fa      	ldrb	r2, [r7, #3]
 800cc10:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 800cc12:	2300      	movs	r3, #0
 800cc14:	60fb      	str	r3, [r7, #12]
 800cc16:	e007      	b.n	800cc28 <RFP_Init+0x38>
   {
      RfpCommandFunction[i].RfpCommandFunction = NULL;
 800cc18:	4a11      	ldr	r2, [pc, #68]	; (800cc60 <RFP_Init+0x70>)
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	3301      	adds	r3, #1
 800cc26:	60fb      	str	r3, [r7, #12]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2b05      	cmp	r3, #5
 800cc2c:	ddf4      	ble.n	800cc18 <RFP_Init+0x28>
   }
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 800cc2e:	2300      	movs	r3, #0
 800cc30:	60bb      	str	r3, [r7, #8]
 800cc32:	e007      	b.n	800cc44 <RFP_Init+0x54>
   {
      RfpMessageFunction[i].RfpMessageFunction = NULL;
 800cc34:	4a0b      	ldr	r2, [pc, #44]	; (800cc64 <RFP_Init+0x74>)
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	2100      	movs	r1, #0
 800cc3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	3301      	adds	r3, #1
 800cc42:	60bb      	str	r3, [r7, #8]
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	2b04      	cmp	r3, #4
 800cc48:	ddf4      	ble.n	800cc34 <RFP_Init+0x44>
   }
   RfpDataFunctions.RfpDataFunction = NULL;
 800cc4a:	4b07      	ldr	r3, [pc, #28]	; (800cc68 <RFP_Init+0x78>)
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	601a      	str	r2, [r3, #0]
}
 800cc50:	bf00      	nop
 800cc52:	3714      	adds	r7, #20
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr
 800cc5c:	200041a0 	.word	0x200041a0
 800cc60:	200041a4 	.word	0x200041a4
 800cc64:	200041c0 	.word	0x200041c0
 800cc68:	200041bc 	.word	0x200041bc

0800cc6c <RFP_ChangeState>:
static void RFP_ChangeState(void)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 800cc72:	2300      	movs	r3, #0
 800cc74:	607b      	str	r3, [r7, #4]
 800cc76:	e02b      	b.n	800ccd0 <RFP_ChangeState+0x64>
   {
      if(Rfp->State == RfpTransitionTable[i].Source && Rfp->NewEvent == RfpTransitionTable[i].Event)
 800cc78:	4b1b      	ldr	r3, [pc, #108]	; (800cce8 <RFP_ChangeState+0x7c>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	7819      	ldrb	r1, [r3, #0]
 800cc7e:	481b      	ldr	r0, [pc, #108]	; (800ccec <RFP_ChangeState+0x80>)
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	4613      	mov	r3, r2
 800cc84:	005b      	lsls	r3, r3, #1
 800cc86:	4413      	add	r3, r2
 800cc88:	4403      	add	r3, r0
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	4299      	cmp	r1, r3
 800cc8e:	d11c      	bne.n	800ccca <RFP_ChangeState+0x5e>
 800cc90:	4b15      	ldr	r3, [pc, #84]	; (800cce8 <RFP_ChangeState+0x7c>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	7859      	ldrb	r1, [r3, #1]
 800cc96:	4815      	ldr	r0, [pc, #84]	; (800ccec <RFP_ChangeState+0x80>)
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	005b      	lsls	r3, r3, #1
 800cc9e:	4413      	add	r3, r2
 800cca0:	4403      	add	r3, r0
 800cca2:	3302      	adds	r3, #2
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	4299      	cmp	r1, r3
 800cca8:	d10f      	bne.n	800ccca <RFP_ChangeState+0x5e>
      {
         Rfp->State    = RfpTransitionTable[i].Destination;
 800ccaa:	4b0f      	ldr	r3, [pc, #60]	; (800cce8 <RFP_ChangeState+0x7c>)
 800ccac:	6819      	ldr	r1, [r3, #0]
 800ccae:	480f      	ldr	r0, [pc, #60]	; (800ccec <RFP_ChangeState+0x80>)
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	005b      	lsls	r3, r3, #1
 800ccb6:	4413      	add	r3, r2
 800ccb8:	4403      	add	r3, r0
 800ccba:	3301      	adds	r3, #1
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	700b      	strb	r3, [r1, #0]
         Rfp->NewEvent = RFP_EVENT_NOTHING;
 800ccc0:	4b09      	ldr	r3, [pc, #36]	; (800cce8 <RFP_ChangeState+0x7c>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	705a      	strb	r2, [r3, #1]
         return;
 800ccc8:	e009      	b.n	800ccde <RFP_ChangeState+0x72>
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	3301      	adds	r3, #1
 800ccce:	607b      	str	r3, [r7, #4]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2b0b      	cmp	r3, #11
 800ccd4:	d9d0      	bls.n	800cc78 <RFP_ChangeState+0xc>
      }
   }
   Rfp->NewEvent = RFP_EVENT_NOTHING;
 800ccd6:	4b04      	ldr	r3, [pc, #16]	; (800cce8 <RFP_ChangeState+0x7c>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	705a      	strb	r2, [r3, #1]
}
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr
 800cce8:	200041a0 	.word	0x200041a0
 800ccec:	20000054 	.word	0x20000054

0800ccf0 <RFP_RegisterDataFunction>:
void RFP_RegisterCommandFunction(RFPCommands_TypeDef Command, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpCommandFunction[Command - 1].RfpCommandFunction = Callback;
}
void RFP_RegisterDataFunction(void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b083      	sub	sp, #12
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
   RfpDataFunctions.RfpDataFunction = Callback;
 800ccf8:	4a04      	ldr	r2, [pc, #16]	; (800cd0c <RFP_RegisterDataFunction+0x1c>)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6013      	str	r3, [r2, #0]
}
 800ccfe:	bf00      	nop
 800cd00:	370c      	adds	r7, #12
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	200041bc 	.word	0x200041bc

0800cd10 <RFP_InterruptTask>:
void RFP_RegisterMessageFunction(RFPMessage_TypeDef Message, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpMessageFunction[Message - 1].RfpMessageFunction = Callback;
}
void RFP_InterruptTask(void)
{
 800cd10:	b480      	push	{r7}
 800cd12:	af00      	add	r7, sp, #0
   Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_SET;
 800cd14:	4b04      	ldr	r3, [pc, #16]	; (800cd28 <RFP_InterruptTask+0x18>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	711a      	strb	r2, [r3, #4]
}
 800cd1c:	bf00      	nop
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr
 800cd26:	bf00      	nop
 800cd28:	200041a0 	.word	0x200041a0

0800cd2c <RFP_SendData>:
void RFP_SendData(RFPDeviceID_TypeDef Destination, RFPMessageType_TypeDef Type, uint8_t *Data, uint32_t Length)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b086      	sub	sp, #24
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60ba      	str	r2, [r7, #8]
 800cd34:	607b      	str	r3, [r7, #4]
 800cd36:	4603      	mov	r3, r0
 800cd38:	73fb      	strb	r3, [r7, #15]
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	73bb      	strb	r3, [r7, #14]
   RfpDataTransmit[0] = Destination;
 800cd3e:	4a27      	ldr	r2, [pc, #156]	; (800cddc <RFP_SendData+0xb0>)
 800cd40:	7bfb      	ldrb	r3, [r7, #15]
 800cd42:	7013      	strb	r3, [r2, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 800cd44:	4b26      	ldr	r3, [pc, #152]	; (800cde0 <RFP_SendData+0xb4>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	795a      	ldrb	r2, [r3, #5]
 800cd4a:	4b24      	ldr	r3, [pc, #144]	; (800cddc <RFP_SendData+0xb0>)
 800cd4c:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = Type;
 800cd4e:	4a23      	ldr	r2, [pc, #140]	; (800cddc <RFP_SendData+0xb0>)
 800cd50:	7bbb      	ldrb	r3, [r7, #14]
 800cd52:	7093      	strb	r3, [r2, #2]
   for(int i = 0; i < Length; i++)
 800cd54:	2300      	movs	r3, #0
 800cd56:	617b      	str	r3, [r7, #20]
 800cd58:	e00a      	b.n	800cd70 <RFP_SendData+0x44>
   {
      RfpDataTransmit[i + 3] = Data[i];
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	441a      	add	r2, r3
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	3303      	adds	r3, #3
 800cd64:	7811      	ldrb	r1, [r2, #0]
 800cd66:	4a1d      	ldr	r2, [pc, #116]	; (800cddc <RFP_SendData+0xb0>)
 800cd68:	54d1      	strb	r1, [r2, r3]
   for(int i = 0; i < Length; i++)
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	617b      	str	r3, [r7, #20]
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d8f0      	bhi.n	800cd5a <RFP_SendData+0x2e>
   }
   uint32_t crc                    = Crc(CRC_INITIAL_VALUE, 3 + Length, RfpDataTransmit);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	3303      	adds	r3, #3
 800cd7c:	4a17      	ldr	r2, [pc, #92]	; (800cddc <RFP_SendData+0xb0>)
 800cd7e:	4619      	mov	r1, r3
 800cd80:	f04f 30ff 	mov.w	r0, #4294967295
 800cd84:	f7f7 fd46 	bl	8004814 <Crc>
 800cd88:	6138      	str	r0, [r7, #16]
   RfpDataTransmit[3 + Length]     = ((crc >> 24) & 0xff);
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	0e1a      	lsrs	r2, r3, #24
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	3303      	adds	r3, #3
 800cd92:	b2d1      	uxtb	r1, r2
 800cd94:	4a11      	ldr	r2, [pc, #68]	; (800cddc <RFP_SendData+0xb0>)
 800cd96:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 1] = ((crc >> 16) & 0xff);
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	0c1a      	lsrs	r2, r3, #16
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	3304      	adds	r3, #4
 800cda0:	b2d1      	uxtb	r1, r2
 800cda2:	4a0e      	ldr	r2, [pc, #56]	; (800cddc <RFP_SendData+0xb0>)
 800cda4:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 2] = ((crc >> 8) & 0xff);
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	0a1a      	lsrs	r2, r3, #8
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	3305      	adds	r3, #5
 800cdae:	b2d1      	uxtb	r1, r2
 800cdb0:	4a0a      	ldr	r2, [pc, #40]	; (800cddc <RFP_SendData+0xb0>)
 800cdb2:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 3] = (crc & 0xff);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3306      	adds	r3, #6
 800cdb8:	693a      	ldr	r2, [r7, #16]
 800cdba:	b2d1      	uxtb	r1, r2
 800cdbc:	4a07      	ldr	r2, [pc, #28]	; (800cddc <RFP_SendData+0xb0>)
 800cdbe:	54d1      	strb	r1, [r2, r3]
   Rfp->SendFlag                   = RFP_SEND_FLAG_SET;
 800cdc0:	4b07      	ldr	r3, [pc, #28]	; (800cde0 <RFP_SendData+0xb4>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	745a      	strb	r2, [r3, #17]
   Rfp->DataSizeTransmit           = 3 + Length + 4;
 800cdc8:	4b05      	ldr	r3, [pc, #20]	; (800cde0 <RFP_SendData+0xb4>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	3207      	adds	r2, #7
 800cdd0:	60da      	str	r2, [r3, #12]
}
 800cdd2:	bf00      	nop
 800cdd4:	3718      	adds	r7, #24
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	2000413c 	.word	0x2000413c
 800cde0:	200041a0 	.word	0x200041a0

0800cde4 <RFP_SendResponseFunction>:
static void RFP_SendResponseFunction(RFPMessageType_TypeDef Response)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	4603      	mov	r3, r0
 800cdec:	71fb      	strb	r3, [r7, #7]
   osDelay(200);
 800cdee:	20c8      	movs	r0, #200	; 0xc8
 800cdf0:	f008 fd8c 	bl	801590c <osDelay>
   RfpDataTransmit[0] = Rfp->SourceMessage;
 800cdf4:	4b18      	ldr	r3, [pc, #96]	; (800ce58 <RFP_SendResponseFunction+0x74>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	7c1a      	ldrb	r2, [r3, #16]
 800cdfa:	4b18      	ldr	r3, [pc, #96]	; (800ce5c <RFP_SendResponseFunction+0x78>)
 800cdfc:	701a      	strb	r2, [r3, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 800cdfe:	4b16      	ldr	r3, [pc, #88]	; (800ce58 <RFP_SendResponseFunction+0x74>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	795a      	ldrb	r2, [r3, #5]
 800ce04:	4b15      	ldr	r3, [pc, #84]	; (800ce5c <RFP_SendResponseFunction+0x78>)
 800ce06:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = RFP_MESSAGE;
 800ce08:	4b14      	ldr	r3, [pc, #80]	; (800ce5c <RFP_SendResponseFunction+0x78>)
 800ce0a:	2203      	movs	r2, #3
 800ce0c:	709a      	strb	r2, [r3, #2]
   RfpDataTransmit[3] = Response;
 800ce0e:	4a13      	ldr	r2, [pc, #76]	; (800ce5c <RFP_SendResponseFunction+0x78>)
 800ce10:	79fb      	ldrb	r3, [r7, #7]
 800ce12:	70d3      	strb	r3, [r2, #3]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, RfpDataTransmit);
 800ce14:	4a11      	ldr	r2, [pc, #68]	; (800ce5c <RFP_SendResponseFunction+0x78>)
 800ce16:	2104      	movs	r1, #4
 800ce18:	f04f 30ff 	mov.w	r0, #4294967295
 800ce1c:	f7f7 fcfa 	bl	8004814 <Crc>
 800ce20:	60f8      	str	r0, [r7, #12]
   RfpDataTransmit[4] = ((crc >> 24) & 0xff);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	0e1b      	lsrs	r3, r3, #24
 800ce26:	b2da      	uxtb	r2, r3
 800ce28:	4b0c      	ldr	r3, [pc, #48]	; (800ce5c <RFP_SendResponseFunction+0x78>)
 800ce2a:	711a      	strb	r2, [r3, #4]
   RfpDataTransmit[5] = ((crc >> 16) & 0xff);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	0c1b      	lsrs	r3, r3, #16
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	4b0a      	ldr	r3, [pc, #40]	; (800ce5c <RFP_SendResponseFunction+0x78>)
 800ce34:	715a      	strb	r2, [r3, #5]
   RfpDataTransmit[6] = ((crc >> 8) & 0xff);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	0a1b      	lsrs	r3, r3, #8
 800ce3a:	b2da      	uxtb	r2, r3
 800ce3c:	4b07      	ldr	r3, [pc, #28]	; (800ce5c <RFP_SendResponseFunction+0x78>)
 800ce3e:	719a      	strb	r2, [r3, #6]
   RfpDataTransmit[7] = (crc & 0xff);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	b2da      	uxtb	r2, r3
 800ce44:	4b05      	ldr	r3, [pc, #20]	; (800ce5c <RFP_SendResponseFunction+0x78>)
 800ce46:	71da      	strb	r2, [r3, #7]
   HC12_TransmitData(RfpDataTransmit, 8);
 800ce48:	2108      	movs	r1, #8
 800ce4a:	4804      	ldr	r0, [pc, #16]	; (800ce5c <RFP_SendResponseFunction+0x78>)
 800ce4c:	f7f4 fe80 	bl	8001b50 <HC12_TransmitData>
}
 800ce50:	bf00      	nop
 800ce52:	3710      	adds	r7, #16
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	200041a0 	.word	0x200041a0
 800ce5c:	2000413c 	.word	0x2000413c

0800ce60 <RFP_InitializeFunction>:
static void RFP_InitializeFunction(void)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	af00      	add	r7, sp, #0
   Rfp->NewEvent = RFP_EVENT_END_INITIALIZE;
 800ce64:	4b08      	ldr	r3, [pc, #32]	; (800ce88 <RFP_InitializeFunction+0x28>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2202      	movs	r2, #2
 800ce6a:	705a      	strb	r2, [r3, #1]
   HC12_ExitCommandMode();
 800ce6c:	f7f4 fe65 	bl	8001b3a <HC12_ExitCommandMode>
   HC12_Init(Rfp, RfpDataRecive);
 800ce70:	4b05      	ldr	r3, [pc, #20]	; (800ce88 <RFP_InitializeFunction+0x28>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4905      	ldr	r1, [pc, #20]	; (800ce8c <RFP_InitializeFunction+0x2c>)
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7f4 fe94 	bl	8001ba4 <HC12_Init>
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800ce7c:	2164      	movs	r1, #100	; 0x64
 800ce7e:	4803      	ldr	r0, [pc, #12]	; (800ce8c <RFP_InitializeFunction+0x2c>)
 800ce80:	f7f4 fe7e 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800ce84:	bf00      	nop
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	200041a0 	.word	0x200041a0
 800ce8c:	200040d8 	.word	0x200040d8

0800ce90 <RFP_IdleFunction>:
static void RFP_IdleFunction(void)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	af00      	add	r7, sp, #0
   if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 800ce94:	4b10      	ldr	r3, [pc, #64]	; (800ced8 <RFP_IdleFunction+0x48>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	791b      	ldrb	r3, [r3, #4]
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d108      	bne.n	800ceb2 <RFP_IdleFunction+0x22>
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 800cea0:	4b0d      	ldr	r3, [pc, #52]	; (800ced8 <RFP_IdleFunction+0x48>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2200      	movs	r2, #0
 800cea6:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 800cea8:	4b0b      	ldr	r3, [pc, #44]	; (800ced8 <RFP_IdleFunction+0x48>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2201      	movs	r2, #1
 800ceae:	705a      	strb	r2, [r3, #1]
   {
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
      Rfp->NewEvent = RFP_EVENT_SEND;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 800ceb0:	e010      	b.n	800ced4 <RFP_IdleFunction+0x44>
   else if(Rfp->SendFlag == RFP_SEND_FLAG_SET)
 800ceb2:	4b09      	ldr	r3, [pc, #36]	; (800ced8 <RFP_IdleFunction+0x48>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	7c5b      	ldrb	r3, [r3, #17]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d10b      	bne.n	800ced4 <RFP_IdleFunction+0x44>
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
 800cebc:	4b06      	ldr	r3, [pc, #24]	; (800ced8 <RFP_IdleFunction+0x48>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2200      	movs	r2, #0
 800cec2:	745a      	strb	r2, [r3, #17]
      Rfp->NewEvent = RFP_EVENT_SEND;
 800cec4:	4b04      	ldr	r3, [pc, #16]	; (800ced8 <RFP_IdleFunction+0x48>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2206      	movs	r2, #6
 800ceca:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800cecc:	2164      	movs	r1, #100	; 0x64
 800cece:	4803      	ldr	r0, [pc, #12]	; (800cedc <RFP_IdleFunction+0x4c>)
 800ced0:	f7f4 fe56 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800ced4:	bf00      	nop
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	200041a0 	.word	0x200041a0
 800cedc:	200040d8 	.word	0x200040d8

0800cee0 <RFP_ParseFunction>:
static void RFP_ParseFunction(void)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = 0;
 800cee6:	2300      	movs	r3, #0
 800cee8:	607b      	str	r3, [r7, #4]
   Rfp->SourceMessage  = RfpDataRecive[1];
 800ceea:	4b3a      	ldr	r3, [pc, #232]	; (800cfd4 <RFP_ParseFunction+0xf4>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a3a      	ldr	r2, [pc, #232]	; (800cfd8 <RFP_ParseFunction+0xf8>)
 800cef0:	7852      	ldrb	r2, [r2, #1]
 800cef2:	741a      	strb	r2, [r3, #16]
   if(RfpDataRecive[0] != Rfp->DeviceType)
 800cef4:	4b38      	ldr	r3, [pc, #224]	; (800cfd8 <RFP_ParseFunction+0xf8>)
 800cef6:	781a      	ldrb	r2, [r3, #0]
 800cef8:	4b36      	ldr	r3, [pc, #216]	; (800cfd4 <RFP_ParseFunction+0xf4>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	795b      	ldrb	r3, [r3, #5]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d00b      	beq.n	800cf1a <RFP_ParseFunction+0x3a>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800cf02:	4b34      	ldr	r3, [pc, #208]	; (800cfd4 <RFP_ParseFunction+0xf4>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2203      	movs	r2, #3
 800cf08:	705a      	strb	r2, [r3, #1]
      RFP_SendResponseFunction(RFP_ERROR);
 800cf0a:	2001      	movs	r0, #1
 800cf0c:	f7ff ff6a 	bl	800cde4 <RFP_SendResponseFunction>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800cf10:	2164      	movs	r1, #100	; 0x64
 800cf12:	4831      	ldr	r0, [pc, #196]	; (800cfd8 <RFP_ParseFunction+0xf8>)
 800cf14:	f7f4 fe34 	bl	8001b80 <HC12_ReciveToIdleDMA>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
            }
         }
      }
   }
}
 800cf18:	e057      	b.n	800cfca <RFP_ParseFunction+0xea>
      if(Rfp->DataSize != 0)
 800cf1a:	4b2e      	ldr	r3, [pc, #184]	; (800cfd4 <RFP_ParseFunction+0xf4>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	689b      	ldr	r3, [r3, #8]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d052      	beq.n	800cfca <RFP_ParseFunction+0xea>
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800cf24:	4b2b      	ldr	r3, [pc, #172]	; (800cfd4 <RFP_ParseFunction+0xf4>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	689b      	ldr	r3, [r3, #8]
 800cf2a:	3b04      	subs	r3, #4
 800cf2c:	4a2a      	ldr	r2, [pc, #168]	; (800cfd8 <RFP_ParseFunction+0xf8>)
 800cf2e:	5cd3      	ldrb	r3, [r2, r3]
 800cf30:	061a      	lsls	r2, r3, #24
 800cf32:	4b28      	ldr	r3, [pc, #160]	; (800cfd4 <RFP_ParseFunction+0xf4>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	3b03      	subs	r3, #3
 800cf3a:	4927      	ldr	r1, [pc, #156]	; (800cfd8 <RFP_ParseFunction+0xf8>)
 800cf3c:	5ccb      	ldrb	r3, [r1, r3]
 800cf3e:	041b      	lsls	r3, r3, #16
 800cf40:	431a      	orrs	r2, r3
                       | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 800cf42:	4b24      	ldr	r3, [pc, #144]	; (800cfd4 <RFP_ParseFunction+0xf4>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	689b      	ldr	r3, [r3, #8]
 800cf48:	3b02      	subs	r3, #2
 800cf4a:	4923      	ldr	r1, [pc, #140]	; (800cfd8 <RFP_ParseFunction+0xf8>)
 800cf4c:	5ccb      	ldrb	r3, [r1, r3]
 800cf4e:	021b      	lsls	r3, r3, #8
 800cf50:	4313      	orrs	r3, r2
 800cf52:	4a20      	ldr	r2, [pc, #128]	; (800cfd4 <RFP_ParseFunction+0xf4>)
 800cf54:	6812      	ldr	r2, [r2, #0]
 800cf56:	6892      	ldr	r2, [r2, #8]
 800cf58:	3a01      	subs	r2, #1
 800cf5a:	491f      	ldr	r1, [pc, #124]	; (800cfd8 <RFP_ParseFunction+0xf8>)
 800cf5c:	5c8a      	ldrb	r2, [r1, r2]
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	607b      	str	r3, [r7, #4]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 800cf62:	4b1c      	ldr	r3, [pc, #112]	; (800cfd4 <RFP_ParseFunction+0xf4>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	3b04      	subs	r3, #4
 800cf6a:	4a1b      	ldr	r2, [pc, #108]	; (800cfd8 <RFP_ParseFunction+0xf8>)
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf72:	f7f7 fc4f 	bl	8004814 <Crc>
 800cf76:	4602      	mov	r2, r0
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d107      	bne.n	800cf8e <RFP_ParseFunction+0xae>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800cf7e:	4b15      	ldr	r3, [pc, #84]	; (800cfd4 <RFP_ParseFunction+0xf4>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	2204      	movs	r2, #4
 800cf84:	705a      	strb	r2, [r3, #1]
            RFP_SendResponseFunction(RFP_OK);
 800cf86:	2004      	movs	r0, #4
 800cf88:	f7ff ff2c 	bl	800cde4 <RFP_SendResponseFunction>
}
 800cf8c:	e01d      	b.n	800cfca <RFP_ParseFunction+0xea>
            if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 800cf8e:	4b11      	ldr	r3, [pc, #68]	; (800cfd4 <RFP_ParseFunction+0xf4>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	461a      	mov	r2, r3
 800cf96:	4910      	ldr	r1, [pc, #64]	; (800cfd8 <RFP_ParseFunction+0xf8>)
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f7f7 fc95 	bl	80048c8 <RepareMessage>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d107      	bne.n	800cfb4 <RFP_ParseFunction+0xd4>
               Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800cfa4:	4b0b      	ldr	r3, [pc, #44]	; (800cfd4 <RFP_ParseFunction+0xf4>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2204      	movs	r2, #4
 800cfaa:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_OK);
 800cfac:	2004      	movs	r0, #4
 800cfae:	f7ff ff19 	bl	800cde4 <RFP_SendResponseFunction>
}
 800cfb2:	e00a      	b.n	800cfca <RFP_ParseFunction+0xea>
               Rfp->NewEvent = RFP_EVENT_ERROR;
 800cfb4:	4b07      	ldr	r3, [pc, #28]	; (800cfd4 <RFP_ParseFunction+0xf4>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2203      	movs	r2, #3
 800cfba:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_CRC_ERROR);
 800cfbc:	2002      	movs	r0, #2
 800cfbe:	f7ff ff11 	bl	800cde4 <RFP_SendResponseFunction>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800cfc2:	2164      	movs	r1, #100	; 0x64
 800cfc4:	4804      	ldr	r0, [pc, #16]	; (800cfd8 <RFP_ParseFunction+0xf8>)
 800cfc6:	f7f4 fddb 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800cfca:	bf00      	nop
 800cfcc:	3708      	adds	r7, #8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	200041a0 	.word	0x200041a0
 800cfd8:	200040d8 	.word	0x200040d8

0800cfdc <RFP_RunningFunction>:
static void RFP_RunningFunction(void)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	af00      	add	r7, sp, #0
   switch(RfpDataRecive[2])
 800cfe0:	4b27      	ldr	r3, [pc, #156]	; (800d080 <RFP_RunningFunction+0xa4>)
 800cfe2:	789b      	ldrb	r3, [r3, #2]
 800cfe4:	2b03      	cmp	r3, #3
 800cfe6:	d028      	beq.n	800d03a <RFP_RunningFunction+0x5e>
 800cfe8:	2b03      	cmp	r3, #3
 800cfea:	dc3b      	bgt.n	800d064 <RFP_RunningFunction+0x88>
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d002      	beq.n	800cff6 <RFP_RunningFunction+0x1a>
 800cff0:	2b02      	cmp	r3, #2
 800cff2:	d015      	beq.n	800d020 <RFP_RunningFunction+0x44>
         }
         break;
      }
      default:
      {
         break;
 800cff4:	e036      	b.n	800d064 <RFP_RunningFunction+0x88>
         if(RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction != NULL)
 800cff6:	4b22      	ldr	r3, [pc, #136]	; (800d080 <RFP_RunningFunction+0xa4>)
 800cff8:	78db      	ldrb	r3, [r3, #3]
 800cffa:	3b01      	subs	r3, #1
 800cffc:	4a21      	ldr	r2, [pc, #132]	; (800d084 <RFP_RunningFunction+0xa8>)
 800cffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d030      	beq.n	800d068 <RFP_RunningFunction+0x8c>
            RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction(RfpDataRecive, Rfp->DataSize, 4);
 800d006:	4b1e      	ldr	r3, [pc, #120]	; (800d080 <RFP_RunningFunction+0xa4>)
 800d008:	78db      	ldrb	r3, [r3, #3]
 800d00a:	3b01      	subs	r3, #1
 800d00c:	4a1d      	ldr	r2, [pc, #116]	; (800d084 <RFP_RunningFunction+0xa8>)
 800d00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d012:	4a1d      	ldr	r2, [pc, #116]	; (800d088 <RFP_RunningFunction+0xac>)
 800d014:	6812      	ldr	r2, [r2, #0]
 800d016:	6891      	ldr	r1, [r2, #8]
 800d018:	2204      	movs	r2, #4
 800d01a:	4819      	ldr	r0, [pc, #100]	; (800d080 <RFP_RunningFunction+0xa4>)
 800d01c:	4798      	blx	r3
         break;
 800d01e:	e023      	b.n	800d068 <RFP_RunningFunction+0x8c>
         if(RfpDataFunctions.RfpDataFunction != NULL)
 800d020:	4b1a      	ldr	r3, [pc, #104]	; (800d08c <RFP_RunningFunction+0xb0>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d021      	beq.n	800d06c <RFP_RunningFunction+0x90>
            RfpDataFunctions.RfpDataFunction(RfpDataRecive, Rfp->DataSize, 4);
 800d028:	4b18      	ldr	r3, [pc, #96]	; (800d08c <RFP_RunningFunction+0xb0>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a16      	ldr	r2, [pc, #88]	; (800d088 <RFP_RunningFunction+0xac>)
 800d02e:	6812      	ldr	r2, [r2, #0]
 800d030:	6891      	ldr	r1, [r2, #8]
 800d032:	2204      	movs	r2, #4
 800d034:	4812      	ldr	r0, [pc, #72]	; (800d080 <RFP_RunningFunction+0xa4>)
 800d036:	4798      	blx	r3
         break;
 800d038:	e018      	b.n	800d06c <RFP_RunningFunction+0x90>
         if(RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction != NULL)
 800d03a:	4b11      	ldr	r3, [pc, #68]	; (800d080 <RFP_RunningFunction+0xa4>)
 800d03c:	78db      	ldrb	r3, [r3, #3]
 800d03e:	3b01      	subs	r3, #1
 800d040:	4a13      	ldr	r2, [pc, #76]	; (800d090 <RFP_RunningFunction+0xb4>)
 800d042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d012      	beq.n	800d070 <RFP_RunningFunction+0x94>
            RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction(RfpDataRecive, Rfp->DataSize, 4);
 800d04a:	4b0d      	ldr	r3, [pc, #52]	; (800d080 <RFP_RunningFunction+0xa4>)
 800d04c:	78db      	ldrb	r3, [r3, #3]
 800d04e:	3b01      	subs	r3, #1
 800d050:	4a0f      	ldr	r2, [pc, #60]	; (800d090 <RFP_RunningFunction+0xb4>)
 800d052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d056:	4a0c      	ldr	r2, [pc, #48]	; (800d088 <RFP_RunningFunction+0xac>)
 800d058:	6812      	ldr	r2, [r2, #0]
 800d05a:	6891      	ldr	r1, [r2, #8]
 800d05c:	2204      	movs	r2, #4
 800d05e:	4808      	ldr	r0, [pc, #32]	; (800d080 <RFP_RunningFunction+0xa4>)
 800d060:	4798      	blx	r3
         break;
 800d062:	e005      	b.n	800d070 <RFP_RunningFunction+0x94>
         break;
 800d064:	bf00      	nop
 800d066:	e004      	b.n	800d072 <RFP_RunningFunction+0x96>
         break;
 800d068:	bf00      	nop
 800d06a:	e002      	b.n	800d072 <RFP_RunningFunction+0x96>
         break;
 800d06c:	bf00      	nop
 800d06e:	e000      	b.n	800d072 <RFP_RunningFunction+0x96>
         break;
 800d070:	bf00      	nop
      }
   }
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d072:	2164      	movs	r1, #100	; 0x64
 800d074:	4802      	ldr	r0, [pc, #8]	; (800d080 <RFP_RunningFunction+0xa4>)
 800d076:	f7f4 fd83 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800d07a:	bf00      	nop
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	200040d8 	.word	0x200040d8
 800d084:	200041a4 	.word	0x200041a4
 800d088:	200041a0 	.word	0x200041a0
 800d08c:	200041bc 	.word	0x200041bc
 800d090:	200041c0 	.word	0x200041c0

0800d094 <RFP_SendFunction>:
static void RFP_SendFunction(void)
{
 800d094:	b598      	push	{r3, r4, r7, lr}
 800d096:	af00      	add	r7, sp, #0
   if(Rfp->Cnt < 5)
 800d098:	4b16      	ldr	r3, [pc, #88]	; (800d0f4 <RFP_SendFunction+0x60>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	695b      	ldr	r3, [r3, #20]
 800d09e:	2b04      	cmp	r3, #4
 800d0a0:	d819      	bhi.n	800d0d6 <RFP_SendFunction+0x42>
   {
      osDelay(200);
 800d0a2:	20c8      	movs	r0, #200	; 0xc8
 800d0a4:	f008 fc32 	bl	801590c <osDelay>
      HC12_TransmitData(RfpDataTransmit, Rfp->DataSizeTransmit);
 800d0a8:	4b12      	ldr	r3, [pc, #72]	; (800d0f4 <RFP_SendFunction+0x60>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	4811      	ldr	r0, [pc, #68]	; (800d0f8 <RFP_SendFunction+0x64>)
 800d0b2:	f7f4 fd4d 	bl	8001b50 <HC12_TransmitData>
      Rfp->Cnt++;
 800d0b6:	4b0f      	ldr	r3, [pc, #60]	; (800d0f4 <RFP_SendFunction+0x60>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	695a      	ldr	r2, [r3, #20]
 800d0bc:	3201      	adds	r2, #1
 800d0be:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_WAIT_FOR_RESPONSE;
 800d0c0:	4b0c      	ldr	r3, [pc, #48]	; (800d0f4 <RFP_SendFunction+0x60>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	2205      	movs	r2, #5
 800d0c6:	705a      	strb	r2, [r3, #1]
      Rfp->LastTick = HAL_GetTick();
 800d0c8:	4b0a      	ldr	r3, [pc, #40]	; (800d0f4 <RFP_SendFunction+0x60>)
 800d0ca:	681c      	ldr	r4, [r3, #0]
 800d0cc:	f001 f8f4 	bl	800e2b8 <HAL_GetTick>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	61a3      	str	r3, [r4, #24]
   {
      Rfp->Cnt      = 0;
      Rfp->NewEvent = RFP_EVENT_ERROR;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 800d0d4:	e00b      	b.n	800d0ee <RFP_SendFunction+0x5a>
      Rfp->Cnt      = 0;
 800d0d6:	4b07      	ldr	r3, [pc, #28]	; (800d0f4 <RFP_SendFunction+0x60>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800d0de:	4b05      	ldr	r3, [pc, #20]	; (800d0f4 <RFP_SendFunction+0x60>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2203      	movs	r2, #3
 800d0e4:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d0e6:	2164      	movs	r1, #100	; 0x64
 800d0e8:	4804      	ldr	r0, [pc, #16]	; (800d0fc <RFP_SendFunction+0x68>)
 800d0ea:	f7f4 fd49 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800d0ee:	bf00      	nop
 800d0f0:	bd98      	pop	{r3, r4, r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	200041a0 	.word	0x200041a0
 800d0f8:	2000413c 	.word	0x2000413c
 800d0fc:	200040d8 	.word	0x200040d8

0800d100 <RFP_WaitForResponseFunction>:
static void RFP_WaitForResponseFunction(void)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - Rfp->LastTick > 2000)
 800d104:	f001 f8d8 	bl	800e2b8 <HAL_GetTick>
 800d108:	4602      	mov	r2, r0
 800d10a:	4b0e      	ldr	r3, [pc, #56]	; (800d144 <RFP_WaitForResponseFunction+0x44>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	699b      	ldr	r3, [r3, #24]
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d116:	d904      	bls.n	800d122 <RFP_WaitForResponseFunction+0x22>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800d118:	4b0a      	ldr	r3, [pc, #40]	; (800d144 <RFP_WaitForResponseFunction+0x44>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2203      	movs	r2, #3
 800d11e:	705a      	strb	r2, [r3, #1]
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
   }
}
 800d120:	e00d      	b.n	800d13e <RFP_WaitForResponseFunction+0x3e>
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 800d122:	4b08      	ldr	r3, [pc, #32]	; (800d144 <RFP_WaitForResponseFunction+0x44>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	791b      	ldrb	r3, [r3, #4]
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d107      	bne.n	800d13e <RFP_WaitForResponseFunction+0x3e>
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 800d12e:	4b05      	ldr	r3, [pc, #20]	; (800d144 <RFP_WaitForResponseFunction+0x44>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2200      	movs	r2, #0
 800d134:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 800d136:	4b03      	ldr	r3, [pc, #12]	; (800d144 <RFP_WaitForResponseFunction+0x44>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2201      	movs	r2, #1
 800d13c:	705a      	strb	r2, [r3, #1]
}
 800d13e:	bf00      	nop
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	200041a0 	.word	0x200041a0

0800d148 <RFP_ParseResponseFunction>:
static void RFP_ParseResponseFunction(void)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800d14e:	4b50      	ldr	r3, [pc, #320]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	689b      	ldr	r3, [r3, #8]
 800d154:	3b04      	subs	r3, #4
 800d156:	4a4f      	ldr	r2, [pc, #316]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d158:	5cd3      	ldrb	r3, [r2, r3]
 800d15a:	061a      	lsls	r2, r3, #24
 800d15c:	4b4c      	ldr	r3, [pc, #304]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	3b03      	subs	r3, #3
 800d164:	494b      	ldr	r1, [pc, #300]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d166:	5ccb      	ldrb	r3, [r1, r3]
 800d168:	041b      	lsls	r3, r3, #16
 800d16a:	431a      	orrs	r2, r3
                          | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 800d16c:	4b48      	ldr	r3, [pc, #288]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	3b02      	subs	r3, #2
 800d174:	4947      	ldr	r1, [pc, #284]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d176:	5ccb      	ldrb	r3, [r1, r3]
 800d178:	021b      	lsls	r3, r3, #8
 800d17a:	4313      	orrs	r3, r2
 800d17c:	4a44      	ldr	r2, [pc, #272]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d17e:	6812      	ldr	r2, [r2, #0]
 800d180:	6892      	ldr	r2, [r2, #8]
 800d182:	3a01      	subs	r2, #1
 800d184:	4943      	ldr	r1, [pc, #268]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d186:	5c8a      	ldrb	r2, [r1, r2]
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800d188:	4313      	orrs	r3, r2
 800d18a:	607b      	str	r3, [r7, #4]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 800d18c:	4b40      	ldr	r3, [pc, #256]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	3b04      	subs	r3, #4
 800d194:	4a3f      	ldr	r2, [pc, #252]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d196:	4619      	mov	r1, r3
 800d198:	f04f 30ff 	mov.w	r0, #4294967295
 800d19c:	f7f7 fb3a 	bl	8004814 <Crc>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d12d      	bne.n	800d204 <RFP_ParseResponseFunction+0xbc>
   {
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 800d1a8:	4b3a      	ldr	r3, [pc, #232]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d1aa:	781a      	ldrb	r2, [r3, #0]
 800d1ac:	4b38      	ldr	r3, [pc, #224]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	795b      	ldrb	r3, [r3, #5]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d11d      	bne.n	800d1f2 <RFP_ParseResponseFunction+0xaa>
 800d1b6:	4b37      	ldr	r3, [pc, #220]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d1b8:	789b      	ldrb	r3, [r3, #2]
 800d1ba:	2b03      	cmp	r3, #3
 800d1bc:	d119      	bne.n	800d1f2 <RFP_ParseResponseFunction+0xaa>
      {
         if(RfpDataRecive[3] == RFP_OK)
 800d1be:	4b35      	ldr	r3, [pc, #212]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d1c0:	78db      	ldrb	r3, [r3, #3]
 800d1c2:	2b04      	cmp	r3, #4
 800d1c4:	d10c      	bne.n	800d1e0 <RFP_ParseResponseFunction+0x98>
         {
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800d1c6:	4b32      	ldr	r3, [pc, #200]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2204      	movs	r2, #4
 800d1cc:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 800d1ce:	4b30      	ldr	r3, [pc, #192]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d1d6:	2164      	movs	r1, #100	; 0x64
 800d1d8:	482e      	ldr	r0, [pc, #184]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d1da:	f7f4 fcd1 	bl	8001b80 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800d1de:	e053      	b.n	800d288 <RFP_ParseResponseFunction+0x140>
         }
         else
         {
            Rfp->NewEvent = RFP_EVENT_ERROR;
 800d1e0:	4b2b      	ldr	r3, [pc, #172]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2203      	movs	r2, #3
 800d1e6:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d1e8:	2164      	movs	r1, #100	; 0x64
 800d1ea:	482a      	ldr	r0, [pc, #168]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d1ec:	f7f4 fcc8 	bl	8001b80 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800d1f0:	e04a      	b.n	800d288 <RFP_ParseResponseFunction+0x140>
         }
      }
      else
      {
         Rfp->NewEvent = RFP_EVENT_ERROR;
 800d1f2:	4b27      	ldr	r3, [pc, #156]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2203      	movs	r2, #3
 800d1f8:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d1fa:	2164      	movs	r1, #100	; 0x64
 800d1fc:	4825      	ldr	r0, [pc, #148]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d1fe:	f7f4 fcbf 	bl	8001b80 <HC12_ReciveToIdleDMA>
   else
   {
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
      Rfp->NewEvent = RFP_EVENT_ERROR;
   }
}
 800d202:	e041      	b.n	800d288 <RFP_ParseResponseFunction+0x140>
   else if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 800d204:	4b22      	ldr	r3, [pc, #136]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	689b      	ldr	r3, [r3, #8]
 800d20a:	461a      	mov	r2, r3
 800d20c:	4921      	ldr	r1, [pc, #132]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f7f7 fb5a 	bl	80048c8 <RepareMessage>
 800d214:	4603      	mov	r3, r0
 800d216:	2b01      	cmp	r3, #1
 800d218:	d12d      	bne.n	800d276 <RFP_ParseResponseFunction+0x12e>
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 800d21a:	4b1e      	ldr	r3, [pc, #120]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d21c:	781a      	ldrb	r2, [r3, #0]
 800d21e:	4b1c      	ldr	r3, [pc, #112]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	795b      	ldrb	r3, [r3, #5]
 800d224:	429a      	cmp	r2, r3
 800d226:	d11d      	bne.n	800d264 <RFP_ParseResponseFunction+0x11c>
 800d228:	4b1a      	ldr	r3, [pc, #104]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d22a:	789b      	ldrb	r3, [r3, #2]
 800d22c:	2b03      	cmp	r3, #3
 800d22e:	d119      	bne.n	800d264 <RFP_ParseResponseFunction+0x11c>
         if(RfpDataRecive[3] == RFP_OK)
 800d230:	4b18      	ldr	r3, [pc, #96]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d232:	78db      	ldrb	r3, [r3, #3]
 800d234:	2b04      	cmp	r3, #4
 800d236:	d10c      	bne.n	800d252 <RFP_ParseResponseFunction+0x10a>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800d238:	4b15      	ldr	r3, [pc, #84]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	2204      	movs	r2, #4
 800d23e:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 800d240:	4b13      	ldr	r3, [pc, #76]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2200      	movs	r2, #0
 800d246:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d248:	2164      	movs	r1, #100	; 0x64
 800d24a:	4812      	ldr	r0, [pc, #72]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d24c:	f7f4 fc98 	bl	8001b80 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800d250:	e01a      	b.n	800d288 <RFP_ParseResponseFunction+0x140>
            Rfp->NewEvent = RFP_EVENT_ERROR;
 800d252:	4b0f      	ldr	r3, [pc, #60]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2203      	movs	r2, #3
 800d258:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d25a:	2164      	movs	r1, #100	; 0x64
 800d25c:	480d      	ldr	r0, [pc, #52]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d25e:	f7f4 fc8f 	bl	8001b80 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800d262:	e011      	b.n	800d288 <RFP_ParseResponseFunction+0x140>
         Rfp->NewEvent = RFP_EVENT_ERROR;
 800d264:	4b0a      	ldr	r3, [pc, #40]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2203      	movs	r2, #3
 800d26a:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d26c:	2164      	movs	r1, #100	; 0x64
 800d26e:	4809      	ldr	r0, [pc, #36]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d270:	f7f4 fc86 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800d274:	e008      	b.n	800d288 <RFP_ParseResponseFunction+0x140>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d276:	2164      	movs	r1, #100	; 0x64
 800d278:	4806      	ldr	r0, [pc, #24]	; (800d294 <RFP_ParseResponseFunction+0x14c>)
 800d27a:	f7f4 fc81 	bl	8001b80 <HC12_ReciveToIdleDMA>
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800d27e:	4b04      	ldr	r3, [pc, #16]	; (800d290 <RFP_ParseResponseFunction+0x148>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2203      	movs	r2, #3
 800d284:	705a      	strb	r2, [r3, #1]
}
 800d286:	e7ff      	b.n	800d288 <RFP_ParseResponseFunction+0x140>
 800d288:	bf00      	nop
 800d28a:	3708      	adds	r7, #8
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	200041a0 	.word	0x200041a0
 800d294:	200040d8 	.word	0x200040d8

0800d298 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b086      	sub	sp, #24
 800d29c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800d29e:	1d3b      	adds	r3, r7, #4
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	601a      	str	r2, [r3, #0]
 800d2a4:	605a      	str	r2, [r3, #4]
 800d2a6:	609a      	str	r2, [r3, #8]
 800d2a8:	60da      	str	r2, [r3, #12]
 800d2aa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800d2b0:	4b13      	ldr	r3, [pc, #76]	; (800d300 <MX_RTC_Init+0x68>)
 800d2b2:	4a14      	ldr	r2, [pc, #80]	; (800d304 <MX_RTC_Init+0x6c>)
 800d2b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800d2b6:	4b12      	ldr	r3, [pc, #72]	; (800d300 <MX_RTC_Init+0x68>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800d2bc:	4b10      	ldr	r3, [pc, #64]	; (800d300 <MX_RTC_Init+0x68>)
 800d2be:	227f      	movs	r2, #127	; 0x7f
 800d2c0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800d2c2:	4b0f      	ldr	r3, [pc, #60]	; (800d300 <MX_RTC_Init+0x68>)
 800d2c4:	22ff      	movs	r2, #255	; 0xff
 800d2c6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d2c8:	4b0d      	ldr	r3, [pc, #52]	; (800d300 <MX_RTC_Init+0x68>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800d2ce:	4b0c      	ldr	r3, [pc, #48]	; (800d300 <MX_RTC_Init+0x68>)
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d2d4:	4b0a      	ldr	r3, [pc, #40]	; (800d300 <MX_RTC_Init+0x68>)
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d2da:	4b09      	ldr	r3, [pc, #36]	; (800d300 <MX_RTC_Init+0x68>)
 800d2dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d2e0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800d2e2:	4b07      	ldr	r3, [pc, #28]	; (800d300 <MX_RTC_Init+0x68>)
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800d2e8:	4805      	ldr	r0, [pc, #20]	; (800d300 <MX_RTC_Init+0x68>)
 800d2ea:	f003 fbfb 	bl	8010ae4 <HAL_RTC_Init>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d001      	beq.n	800d2f8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800d2f4:	f7fd fffc 	bl	800b2f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800d2f8:	3718      	adds	r7, #24
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	200041d4 	.word	0x200041d4
 800d304:	40002800 	.word	0x40002800

0800d308 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b0aa      	sub	sp, #168	; 0xa8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d310:	f107 0310 	add.w	r3, r7, #16
 800d314:	2298      	movs	r2, #152	; 0x98
 800d316:	2100      	movs	r1, #0
 800d318:	4618      	mov	r0, r3
 800d31a:	f00c fb31 	bl	8019980 <memset>
  if(rtcHandle->Instance==RTC)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4a16      	ldr	r2, [pc, #88]	; (800d37c <HAL_RTC_MspInit+0x74>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d124      	bne.n	800d372 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800d328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d32c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d32e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d336:	f107 0310 	add.w	r3, r7, #16
 800d33a:	4618      	mov	r0, r3
 800d33c:	f002 fe7e 	bl	801003c <HAL_RCCEx_PeriphCLKConfig>
 800d340:	4603      	mov	r3, r0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d001      	beq.n	800d34a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800d346:	f7fd ffd3 	bl	800b2f0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800d34a:	4b0d      	ldr	r3, [pc, #52]	; (800d380 <HAL_RTC_MspInit+0x78>)
 800d34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d350:	4a0b      	ldr	r2, [pc, #44]	; (800d380 <HAL_RTC_MspInit+0x78>)
 800d352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800d35a:	4b09      	ldr	r3, [pc, #36]	; (800d380 <HAL_RTC_MspInit+0x78>)
 800d35c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d35e:	4a08      	ldr	r2, [pc, #32]	; (800d380 <HAL_RTC_MspInit+0x78>)
 800d360:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d364:	6593      	str	r3, [r2, #88]	; 0x58
 800d366:	4b06      	ldr	r3, [pc, #24]	; (800d380 <HAL_RTC_MspInit+0x78>)
 800d368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d36a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d36e:	60fb      	str	r3, [r7, #12]
 800d370:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800d372:	bf00      	nop
 800d374:	37a8      	adds	r7, #168	; 0xa8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	40002800 	.word	0x40002800
 800d380:	40021000 	.word	0x40021000

0800d384 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800d388:	4b1b      	ldr	r3, [pc, #108]	; (800d3f8 <MX_SPI1_Init+0x74>)
 800d38a:	4a1c      	ldr	r2, [pc, #112]	; (800d3fc <MX_SPI1_Init+0x78>)
 800d38c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d38e:	4b1a      	ldr	r3, [pc, #104]	; (800d3f8 <MX_SPI1_Init+0x74>)
 800d390:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d394:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d396:	4b18      	ldr	r3, [pc, #96]	; (800d3f8 <MX_SPI1_Init+0x74>)
 800d398:	2200      	movs	r2, #0
 800d39a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d39c:	4b16      	ldr	r3, [pc, #88]	; (800d3f8 <MX_SPI1_Init+0x74>)
 800d39e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800d3a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d3a4:	4b14      	ldr	r3, [pc, #80]	; (800d3f8 <MX_SPI1_Init+0x74>)
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d3aa:	4b13      	ldr	r3, [pc, #76]	; (800d3f8 <MX_SPI1_Init+0x74>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d3b0:	4b11      	ldr	r3, [pc, #68]	; (800d3f8 <MX_SPI1_Init+0x74>)
 800d3b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800d3b8:	4b0f      	ldr	r3, [pc, #60]	; (800d3f8 <MX_SPI1_Init+0x74>)
 800d3ba:	2238      	movs	r2, #56	; 0x38
 800d3bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d3be:	4b0e      	ldr	r3, [pc, #56]	; (800d3f8 <MX_SPI1_Init+0x74>)
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d3c4:	4b0c      	ldr	r3, [pc, #48]	; (800d3f8 <MX_SPI1_Init+0x74>)
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d3ca:	4b0b      	ldr	r3, [pc, #44]	; (800d3f8 <MX_SPI1_Init+0x74>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800d3d0:	4b09      	ldr	r3, [pc, #36]	; (800d3f8 <MX_SPI1_Init+0x74>)
 800d3d2:	2207      	movs	r2, #7
 800d3d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800d3d6:	4b08      	ldr	r3, [pc, #32]	; (800d3f8 <MX_SPI1_Init+0x74>)
 800d3d8:	2200      	movs	r2, #0
 800d3da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d3dc:	4b06      	ldr	r3, [pc, #24]	; (800d3f8 <MX_SPI1_Init+0x74>)
 800d3de:	2208      	movs	r2, #8
 800d3e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d3e2:	4805      	ldr	r0, [pc, #20]	; (800d3f8 <MX_SPI1_Init+0x74>)
 800d3e4:	f003 feba 	bl	801115c <HAL_SPI_Init>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d001      	beq.n	800d3f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800d3ee:	f7fd ff7f 	bl	800b2f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d3f2:	bf00      	nop
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	20004208 	.word	0x20004208
 800d3fc:	40013000 	.word	0x40013000

0800d400 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b08a      	sub	sp, #40	; 0x28
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d408:	f107 0314 	add.w	r3, r7, #20
 800d40c:	2200      	movs	r2, #0
 800d40e:	601a      	str	r2, [r3, #0]
 800d410:	605a      	str	r2, [r3, #4]
 800d412:	609a      	str	r2, [r3, #8]
 800d414:	60da      	str	r2, [r3, #12]
 800d416:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4a17      	ldr	r2, [pc, #92]	; (800d47c <HAL_SPI_MspInit+0x7c>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d128      	bne.n	800d474 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d422:	4b17      	ldr	r3, [pc, #92]	; (800d480 <HAL_SPI_MspInit+0x80>)
 800d424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d426:	4a16      	ldr	r2, [pc, #88]	; (800d480 <HAL_SPI_MspInit+0x80>)
 800d428:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d42c:	6613      	str	r3, [r2, #96]	; 0x60
 800d42e:	4b14      	ldr	r3, [pc, #80]	; (800d480 <HAL_SPI_MspInit+0x80>)
 800d430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d436:	613b      	str	r3, [r7, #16]
 800d438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d43a:	4b11      	ldr	r3, [pc, #68]	; (800d480 <HAL_SPI_MspInit+0x80>)
 800d43c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d43e:	4a10      	ldr	r2, [pc, #64]	; (800d480 <HAL_SPI_MspInit+0x80>)
 800d440:	f043 0301 	orr.w	r3, r3, #1
 800d444:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d446:	4b0e      	ldr	r3, [pc, #56]	; (800d480 <HAL_SPI_MspInit+0x80>)
 800d448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d44a:	f003 0301 	and.w	r3, r3, #1
 800d44e:	60fb      	str	r3, [r7, #12]
 800d450:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800d452:	23e0      	movs	r3, #224	; 0xe0
 800d454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d456:	2302      	movs	r3, #2
 800d458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d45a:	2300      	movs	r3, #0
 800d45c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d45e:	2303      	movs	r3, #3
 800d460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d462:	2305      	movs	r3, #5
 800d464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d466:	f107 0314 	add.w	r3, r7, #20
 800d46a:	4619      	mov	r1, r3
 800d46c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d470:	f001 fb68 	bl	800eb44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800d474:	bf00      	nop
 800d476:	3728      	adds	r7, #40	; 0x28
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	40013000 	.word	0x40013000
 800d480:	40021000 	.word	0x40021000

0800d484 <ssd1306_command>:
#include "string.h"
#include "cmsis_os.h"
SPI_HandleTypeDef *ssd1306_spi;
static uint8_t buffer[(SSD1306_LCDWIDTH * SSD1306_LCDHEIGHT) / 8];
static void ssd1306_command(uint8_t command)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	4603      	mov	r3, r0
 800d48c:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_RESET);
 800d48e:	2200      	movs	r2, #0
 800d490:	2101      	movs	r1, #1
 800d492:	480d      	ldr	r0, [pc, #52]	; (800d4c8 <ssd1306_command+0x44>)
 800d494:	f001 fd00 	bl	800ee98 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 800d498:	2200      	movs	r2, #0
 800d49a:	2110      	movs	r1, #16
 800d49c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d4a0:	f001 fcfa 	bl	800ee98 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, &command, 1, 10);
 800d4a4:	4b09      	ldr	r3, [pc, #36]	; (800d4cc <ssd1306_command+0x48>)
 800d4a6:	6818      	ldr	r0, [r3, #0]
 800d4a8:	1df9      	adds	r1, r7, #7
 800d4aa:	230a      	movs	r3, #10
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	f003 fef8 	bl	80112a2 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	2110      	movs	r1, #16
 800d4b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d4ba:	f001 fced 	bl	800ee98 <HAL_GPIO_WritePin>
}
 800d4be:	bf00      	nop
 800d4c0:	3708      	adds	r7, #8
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	48000400 	.word	0x48000400
 800d4cc:	2000426c 	.word	0x2000426c

0800d4d0 <ssd1306_set_pixel>:
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(ssd1306_spi, &data, 1, 10);
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
// }
void ssd1306_set_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	71fb      	strb	r3, [r7, #7]
 800d4da:	460b      	mov	r3, r1
 800d4dc:	71bb      	strb	r3, [r7, #6]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	717b      	strb	r3, [r7, #5]
   if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 800d4e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	db43      	blt.n	800d572 <ssd1306_set_pixel+0xa2>
 800d4ea:	79bb      	ldrb	r3, [r7, #6]
 800d4ec:	2b3f      	cmp	r3, #63	; 0x3f
 800d4ee:	d840      	bhi.n	800d572 <ssd1306_set_pixel+0xa2>
   {
      return;
   }
   if(color != 0 && color != 1)
 800d4f0:	797b      	ldrb	r3, [r7, #5]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d002      	beq.n	800d4fc <ssd1306_set_pixel+0x2c>
 800d4f6:	797b      	ldrb	r3, [r7, #5]
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d13c      	bne.n	800d576 <ssd1306_set_pixel+0xa6>
   {
      return;
   }
   if(color == 0)
 800d4fc:	797b      	ldrb	r3, [r7, #5]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d11c      	bne.n	800d53c <ssd1306_set_pixel+0x6c>
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 800d502:	79fa      	ldrb	r2, [r7, #7]
 800d504:	79bb      	ldrb	r3, [r7, #6]
 800d506:	08db      	lsrs	r3, r3, #3
 800d508:	b2d8      	uxtb	r0, r3
 800d50a:	4603      	mov	r3, r0
 800d50c:	01db      	lsls	r3, r3, #7
 800d50e:	4413      	add	r3, r2
 800d510:	4a1c      	ldr	r2, [pc, #112]	; (800d584 <ssd1306_set_pixel+0xb4>)
 800d512:	5cd3      	ldrb	r3, [r2, r3]
 800d514:	b25a      	sxtb	r2, r3
 800d516:	79bb      	ldrb	r3, [r7, #6]
 800d518:	f003 0307 	and.w	r3, r3, #7
 800d51c:	2101      	movs	r1, #1
 800d51e:	fa01 f303 	lsl.w	r3, r1, r3
 800d522:	b25b      	sxtb	r3, r3
 800d524:	43db      	mvns	r3, r3
 800d526:	b25b      	sxtb	r3, r3
 800d528:	4013      	ands	r3, r2
 800d52a:	b259      	sxtb	r1, r3
 800d52c:	79fa      	ldrb	r2, [r7, #7]
 800d52e:	4603      	mov	r3, r0
 800d530:	01db      	lsls	r3, r3, #7
 800d532:	4413      	add	r3, r2
 800d534:	b2c9      	uxtb	r1, r1
 800d536:	4a13      	ldr	r2, [pc, #76]	; (800d584 <ssd1306_set_pixel+0xb4>)
 800d538:	54d1      	strb	r1, [r2, r3]
 800d53a:	e01d      	b.n	800d578 <ssd1306_set_pixel+0xa8>
   }
   else
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 800d53c:	79fa      	ldrb	r2, [r7, #7]
 800d53e:	79bb      	ldrb	r3, [r7, #6]
 800d540:	08db      	lsrs	r3, r3, #3
 800d542:	b2d8      	uxtb	r0, r3
 800d544:	4603      	mov	r3, r0
 800d546:	01db      	lsls	r3, r3, #7
 800d548:	4413      	add	r3, r2
 800d54a:	4a0e      	ldr	r2, [pc, #56]	; (800d584 <ssd1306_set_pixel+0xb4>)
 800d54c:	5cd3      	ldrb	r3, [r2, r3]
 800d54e:	b25a      	sxtb	r2, r3
 800d550:	79bb      	ldrb	r3, [r7, #6]
 800d552:	f003 0307 	and.w	r3, r3, #7
 800d556:	2101      	movs	r1, #1
 800d558:	fa01 f303 	lsl.w	r3, r1, r3
 800d55c:	b25b      	sxtb	r3, r3
 800d55e:	4313      	orrs	r3, r2
 800d560:	b259      	sxtb	r1, r3
 800d562:	79fa      	ldrb	r2, [r7, #7]
 800d564:	4603      	mov	r3, r0
 800d566:	01db      	lsls	r3, r3, #7
 800d568:	4413      	add	r3, r2
 800d56a:	b2c9      	uxtb	r1, r1
 800d56c:	4a05      	ldr	r2, [pc, #20]	; (800d584 <ssd1306_set_pixel+0xb4>)
 800d56e:	54d1      	strb	r1, [r2, r3]
 800d570:	e002      	b.n	800d578 <ssd1306_set_pixel+0xa8>
      return;
 800d572:	bf00      	nop
 800d574:	e000      	b.n	800d578 <ssd1306_set_pixel+0xa8>
      return;
 800d576:	bf00      	nop
   }
}
 800d578:	370c      	adds	r7, #12
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	20004270 	.word	0x20004270

0800d588 <ssd1306_display>:
void ssd1306_display()
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	af00      	add	r7, sp, #0
   ssd1306_command(0x22);
 800d58c:	2022      	movs	r0, #34	; 0x22
 800d58e:	f7ff ff79 	bl	800d484 <ssd1306_command>
   ssd1306_command(0x00);
 800d592:	2000      	movs	r0, #0
 800d594:	f7ff ff76 	bl	800d484 <ssd1306_command>
   ssd1306_command(0x07);
 800d598:	2007      	movs	r0, #7
 800d59a:	f7ff ff73 	bl	800d484 <ssd1306_command>
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_SET);
 800d59e:	2201      	movs	r2, #1
 800d5a0:	2101      	movs	r1, #1
 800d5a2:	480c      	ldr	r0, [pc, #48]	; (800d5d4 <ssd1306_display+0x4c>)
 800d5a4:	f001 fc78 	bl	800ee98 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	2110      	movs	r1, #16
 800d5ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d5b0:	f001 fc72 	bl	800ee98 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, (uint8_t *)&buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8), 100);
 800d5b4:	4b08      	ldr	r3, [pc, #32]	; (800d5d8 <ssd1306_display+0x50>)
 800d5b6:	6818      	ldr	r0, [r3, #0]
 800d5b8:	2364      	movs	r3, #100	; 0x64
 800d5ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d5be:	4907      	ldr	r1, [pc, #28]	; (800d5dc <ssd1306_display+0x54>)
 800d5c0:	f003 fe6f 	bl	80112a2 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	2110      	movs	r1, #16
 800d5c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d5cc:	f001 fc64 	bl	800ee98 <HAL_GPIO_WritePin>
}
 800d5d0:	bf00      	nop
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	48000400 	.word	0x48000400
 800d5d8:	2000426c 	.word	0x2000426c
 800d5dc:	20004270 	.word	0x20004270

0800d5e0 <ssd1306_clear>:
void ssd1306_clear()
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	af00      	add	r7, sp, #0
   memset(buffer, 0x00, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 800d5e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d5e8:	2100      	movs	r1, #0
 800d5ea:	4802      	ldr	r0, [pc, #8]	; (800d5f4 <ssd1306_clear+0x14>)
 800d5ec:	f00c f9c8 	bl	8019980 <memset>
}
 800d5f0:	bf00      	nop
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	20004270 	.word	0x20004270

0800d5f8 <ssd1306_init>:
void ssd1306_init(SPI_HandleTypeDef *spi)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_RESET);
 800d600:	2200      	movs	r2, #0
 800d602:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d606:	4833      	ldr	r0, [pc, #204]	; (800d6d4 <ssd1306_init+0xdc>)
 800d608:	f001 fc46 	bl	800ee98 <HAL_GPIO_WritePin>
   osDelay(150);
 800d60c:	2096      	movs	r0, #150	; 0x96
 800d60e:	f008 f97d 	bl	801590c <osDelay>
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_SET);
 800d612:	2201      	movs	r2, #1
 800d614:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d618:	482e      	ldr	r0, [pc, #184]	; (800d6d4 <ssd1306_init+0xdc>)
 800d61a:	f001 fc3d 	bl	800ee98 <HAL_GPIO_WritePin>
   osDelay(100);
 800d61e:	2064      	movs	r0, #100	; 0x64
 800d620:	f008 f974 	bl	801590c <osDelay>
   ssd1306_spi = spi;
 800d624:	4a2c      	ldr	r2, [pc, #176]	; (800d6d8 <ssd1306_init+0xe0>)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6013      	str	r3, [r2, #0]
   ssd1306_command(0xAE); // Display Off
 800d62a:	20ae      	movs	r0, #174	; 0xae
 800d62c:	f7ff ff2a 	bl	800d484 <ssd1306_command>

   ssd1306_command(0x00);
 800d630:	2000      	movs	r0, #0
 800d632:	f7ff ff27 	bl	800d484 <ssd1306_command>
   ssd1306_command(0x10);
 800d636:	2010      	movs	r0, #16
 800d638:	f7ff ff24 	bl	800d484 <ssd1306_command>
   ssd1306_command(0x40);
 800d63c:	2040      	movs	r0, #64	; 0x40
 800d63e:	f7ff ff21 	bl	800d484 <ssd1306_command>
   ssd1306_command(0x20); // Set addressing mode
 800d642:	2020      	movs	r0, #32
 800d644:	f7ff ff1e 	bl	800d484 <ssd1306_command>
   ssd1306_command(0x00); // Horizontal Addressing Mode
 800d648:	2000      	movs	r0, #0
 800d64a:	f7ff ff1b 	bl	800d484 <ssd1306_command>

   ssd1306_command(0x81); // Set Contrast Control
 800d64e:	2081      	movs	r0, #129	; 0x81
 800d650:	f7ff ff18 	bl	800d484 <ssd1306_command>
   ssd1306_command(0xff);
 800d654:	20ff      	movs	r0, #255	; 0xff
 800d656:	f7ff ff15 	bl	800d484 <ssd1306_command>
   ssd1306_command(0xA0 | (0x01 & 1));
 800d65a:	20a1      	movs	r0, #161	; 0xa1
 800d65c:	f7ff ff12 	bl	800d484 <ssd1306_command>
   ssd1306_command(0xC0 | (0x08 & (1 << 3)));
 800d660:	20c8      	movs	r0, #200	; 0xc8
 800d662:	f7ff ff0f 	bl	800d484 <ssd1306_command>

   ssd1306_command(0xA6); // Set Normal Display
 800d666:	20a6      	movs	r0, #166	; 0xa6
 800d668:	f7ff ff0c 	bl	800d484 <ssd1306_command>

   ssd1306_command(0xA8); // Select Multiplex Ratio
 800d66c:	20a8      	movs	r0, #168	; 0xa8
 800d66e:	f7ff ff09 	bl	800d484 <ssd1306_command>
   ssd1306_command(0x3F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 800d672:	203f      	movs	r0, #63	; 0x3f
 800d674:	f7ff ff06 	bl	800d484 <ssd1306_command>

   ssd1306_command(0xD3); // Setting Display Offset
 800d678:	20d3      	movs	r0, #211	; 0xd3
 800d67a:	f7ff ff03 	bl	800d484 <ssd1306_command>
   ssd1306_command(0x00); // 00H Reset
 800d67e:	2000      	movs	r0, #0
 800d680:	f7ff ff00 	bl	800d484 <ssd1306_command>

   ssd1306_command(0xD5); // SET DISPLAY CLOCK
 800d684:	20d5      	movs	r0, #213	; 0xd5
 800d686:	f7ff fefd 	bl	800d484 <ssd1306_command>
   ssd1306_command(0x80); // 105HZ
 800d68a:	2080      	movs	r0, #128	; 0x80
 800d68c:	f7ff fefa 	bl	800d484 <ssd1306_command>

   ssd1306_command(0xD9); // Set Pre-Charge period
 800d690:	20d9      	movs	r0, #217	; 0xd9
 800d692:	f7ff fef7 	bl	800d484 <ssd1306_command>
   ssd1306_command(0x22);
 800d696:	2022      	movs	r0, #34	; 0x22
 800d698:	f7ff fef4 	bl	800d484 <ssd1306_command>

   ssd1306_command(0xDA); // Set COM Hardware Configuration
 800d69c:	20da      	movs	r0, #218	; 0xda
 800d69e:	f7ff fef1 	bl	800d484 <ssd1306_command>
   ssd1306_command(0x12); // Alternative COM Pin---See IC Spec page 34
 800d6a2:	2012      	movs	r0, #18
 800d6a4:	f7ff feee 	bl	800d484 <ssd1306_command>
                          // (0x02)=> A4=0;Sequential COM pin configuration;A5=0;Disable COM Left/Right remap

   ssd1306_command(0xDB); // Set Deselect Vcomh level
 800d6a8:	20db      	movs	r0, #219	; 0xdb
 800d6aa:	f7ff feeb 	bl	800d484 <ssd1306_command>
   ssd1306_command(0x40);
 800d6ae:	2040      	movs	r0, #64	; 0x40
 800d6b0:	f7ff fee8 	bl	800d484 <ssd1306_command>

   ssd1306_command(0x8D); // Set Charge Pump
 800d6b4:	208d      	movs	r0, #141	; 0x8d
 800d6b6:	f7ff fee5 	bl	800d484 <ssd1306_command>
   // ssd1306_command(0x10);  // Disable Charge Pump
   ssd1306_command(0x14); // Endable Charge Pump
 800d6ba:	2014      	movs	r0, #20
 800d6bc:	f7ff fee2 	bl	800d484 <ssd1306_command>

   ssd1306_command(0xA4); // Entire Display ON
 800d6c0:	20a4      	movs	r0, #164	; 0xa4
 800d6c2:	f7ff fedf 	bl	800d484 <ssd1306_command>
   ssd1306_command(SSD1306_DISPLAYON);
 800d6c6:	20af      	movs	r0, #175	; 0xaf
 800d6c8:	f7ff fedc 	bl	800d484 <ssd1306_command>
}
 800d6cc:	bf00      	nop
 800d6ce:	3708      	adds	r7, #8
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	48000400 	.word	0x48000400
 800d6d8:	2000426c 	.word	0x2000426c

0800d6dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d6e2:	4b11      	ldr	r3, [pc, #68]	; (800d728 <HAL_MspInit+0x4c>)
 800d6e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6e6:	4a10      	ldr	r2, [pc, #64]	; (800d728 <HAL_MspInit+0x4c>)
 800d6e8:	f043 0301 	orr.w	r3, r3, #1
 800d6ec:	6613      	str	r3, [r2, #96]	; 0x60
 800d6ee:	4b0e      	ldr	r3, [pc, #56]	; (800d728 <HAL_MspInit+0x4c>)
 800d6f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6f2:	f003 0301 	and.w	r3, r3, #1
 800d6f6:	607b      	str	r3, [r7, #4]
 800d6f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d6fa:	4b0b      	ldr	r3, [pc, #44]	; (800d728 <HAL_MspInit+0x4c>)
 800d6fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6fe:	4a0a      	ldr	r2, [pc, #40]	; (800d728 <HAL_MspInit+0x4c>)
 800d700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d704:	6593      	str	r3, [r2, #88]	; 0x58
 800d706:	4b08      	ldr	r3, [pc, #32]	; (800d728 <HAL_MspInit+0x4c>)
 800d708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d70a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d70e:	603b      	str	r3, [r7, #0]
 800d710:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800d712:	2200      	movs	r2, #0
 800d714:	210f      	movs	r1, #15
 800d716:	f06f 0001 	mvn.w	r0, #1
 800d71a:	f000 fea8 	bl	800e46e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d71e:	bf00      	nop
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	40021000 	.word	0x40021000

0800d72c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b08c      	sub	sp, #48	; 0x30
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800d734:	2300      	movs	r3, #0
 800d736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM15 clock */
  __HAL_RCC_TIM15_CLK_ENABLE();
 800d73a:	4b2e      	ldr	r3, [pc, #184]	; (800d7f4 <HAL_InitTick+0xc8>)
 800d73c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d73e:	4a2d      	ldr	r2, [pc, #180]	; (800d7f4 <HAL_InitTick+0xc8>)
 800d740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d744:	6613      	str	r3, [r2, #96]	; 0x60
 800d746:	4b2b      	ldr	r3, [pc, #172]	; (800d7f4 <HAL_InitTick+0xc8>)
 800d748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d74a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d74e:	60bb      	str	r3, [r7, #8]
 800d750:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d752:	f107 020c 	add.w	r2, r7, #12
 800d756:	f107 0310 	add.w	r3, r7, #16
 800d75a:	4611      	mov	r1, r2
 800d75c:	4618      	mov	r0, r3
 800d75e:	f002 fb7b 	bl	800fe58 <HAL_RCC_GetClockConfig>

  /* Compute TIM15 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800d762:	f002 fb63 	bl	800fe2c <HAL_RCC_GetPCLK2Freq>
 800d766:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM15 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800d768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76a:	4a23      	ldr	r2, [pc, #140]	; (800d7f8 <HAL_InitTick+0xcc>)
 800d76c:	fba2 2303 	umull	r2, r3, r2, r3
 800d770:	0c9b      	lsrs	r3, r3, #18
 800d772:	3b01      	subs	r3, #1
 800d774:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM15 */
  htim15.Instance = TIM15;
 800d776:	4b21      	ldr	r3, [pc, #132]	; (800d7fc <HAL_InitTick+0xd0>)
 800d778:	4a21      	ldr	r2, [pc, #132]	; (800d800 <HAL_InitTick+0xd4>)
 800d77a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM15CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim15.Init.Period = (1000000U / 1000U) - 1U;
 800d77c:	4b1f      	ldr	r3, [pc, #124]	; (800d7fc <HAL_InitTick+0xd0>)
 800d77e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d782:	60da      	str	r2, [r3, #12]
  htim15.Init.Prescaler = uwPrescalerValue;
 800d784:	4a1d      	ldr	r2, [pc, #116]	; (800d7fc <HAL_InitTick+0xd0>)
 800d786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d788:	6053      	str	r3, [r2, #4]
  htim15.Init.ClockDivision = 0;
 800d78a:	4b1c      	ldr	r3, [pc, #112]	; (800d7fc <HAL_InitTick+0xd0>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	611a      	str	r2, [r3, #16]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d790:	4b1a      	ldr	r3, [pc, #104]	; (800d7fc <HAL_InitTick+0xd0>)
 800d792:	2200      	movs	r2, #0
 800d794:	609a      	str	r2, [r3, #8]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d796:	4b19      	ldr	r3, [pc, #100]	; (800d7fc <HAL_InitTick+0xd0>)
 800d798:	2200      	movs	r2, #0
 800d79a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim15);
 800d79c:	4817      	ldr	r0, [pc, #92]	; (800d7fc <HAL_InitTick+0xd0>)
 800d79e:	f004 fbed 	bl	8011f7c <HAL_TIM_Base_Init>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800d7a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d11b      	bne.n	800d7e8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim15);
 800d7b0:	4812      	ldr	r0, [pc, #72]	; (800d7fc <HAL_InitTick+0xd0>)
 800d7b2:	f004 fc3b 	bl	801202c <HAL_TIM_Base_Start_IT>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800d7bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d111      	bne.n	800d7e8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM15 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800d7c4:	2018      	movs	r0, #24
 800d7c6:	f000 fe6e 	bl	800e4a6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2b0f      	cmp	r3, #15
 800d7ce:	d808      	bhi.n	800d7e2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, TickPriority, 0U);
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	6879      	ldr	r1, [r7, #4]
 800d7d4:	2018      	movs	r0, #24
 800d7d6:	f000 fe4a 	bl	800e46e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d7da:	4a0a      	ldr	r2, [pc, #40]	; (800d804 <HAL_InitTick+0xd8>)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6013      	str	r3, [r2, #0]
 800d7e0:	e002      	b.n	800d7e8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800d7e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3730      	adds	r7, #48	; 0x30
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	40021000 	.word	0x40021000
 800d7f8:	431bde83 	.word	0x431bde83
 800d7fc:	20004670 	.word	0x20004670
 800d800:	40014000 	.word	0x40014000
 800d804:	20000098 	.word	0x20000098

0800d808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
   HAL_NVIC_SystemReset();
 800d80c:	f000 fe59 	bl	800e4c2 <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while(1)
   {
      HAL_NVIC_SystemReset();
 800d810:	f000 fe57 	bl	800e4c2 <HAL_NVIC_SystemReset>
 800d814:	e7fc      	b.n	800d810 <NMI_Handler+0x8>

0800d816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d816:	b580      	push	{r7, lr}
 800d818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800d81a:	f000 fe52 	bl	800e4c2 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_NVIC_SystemReset();
 800d81e:	f000 fe50 	bl	800e4c2 <HAL_NVIC_SystemReset>
 800d822:	e7fc      	b.n	800d81e <HardFault_Handler+0x8>

0800d824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d824:	b480      	push	{r7}
 800d826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d828:	e7fe      	b.n	800d828 <MemManage_Handler+0x4>

0800d82a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d82a:	b480      	push	{r7}
 800d82c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d82e:	e7fe      	b.n	800d82e <BusFault_Handler+0x4>

0800d830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d830:	b480      	push	{r7}
 800d832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d834:	e7fe      	b.n	800d834 <UsageFault_Handler+0x4>

0800d836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d836:	b480      	push	{r7}
 800d838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d83a:	bf00      	nop
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800d848:	4802      	ldr	r0, [pc, #8]	; (800d854 <DMA1_Channel1_IRQHandler+0x10>)
 800d84a:	f001 f81d 	bl	800e888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800d84e:	bf00      	nop
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	20004924 	.word	0x20004924

0800d858 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800d85c:	4802      	ldr	r0, [pc, #8]	; (800d868 <DMA1_Channel2_IRQHandler+0x10>)
 800d85e:	f001 f813 	bl	800e888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800d862:	bf00      	nop
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	200047a4 	.word	0x200047a4

0800d86c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800d870:	4802      	ldr	r0, [pc, #8]	; (800d87c <DMA1_Channel3_IRQHandler+0x10>)
 800d872:	f001 f809 	bl	800e888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800d876:	bf00      	nop
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	20004984 	.word	0x20004984

0800d880 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d884:	4803      	ldr	r0, [pc, #12]	; (800d894 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800d886:	f005 f8ef 	bl	8012a68 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800d88a:	4803      	ldr	r0, [pc, #12]	; (800d898 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800d88c:	f005 f8ec 	bl	8012a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800d890:	bf00      	nop
 800d892:	bd80      	pop	{r7, pc}
 800d894:	200046c0 	.word	0x200046c0
 800d898:	20004670 	.word	0x20004670

0800d89c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d8a0:	4803      	ldr	r0, [pc, #12]	; (800d8b0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800d8a2:	f005 f8e1 	bl	8012a68 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800d8a6:	4803      	ldr	r0, [pc, #12]	; (800d8b4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800d8a8:	f005 f8de 	bl	8012a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800d8ac:	bf00      	nop
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	200046c0 	.word	0x200046c0
 800d8b4:	20004758 	.word	0x20004758

0800d8b8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d8bc:	4802      	ldr	r0, [pc, #8]	; (800d8c8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800d8be:	f005 f8d3 	bl	8012a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800d8c2:	bf00      	nop
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	200046c0 	.word	0x200046c0

0800d8cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800d8d0:	4802      	ldr	r0, [pc, #8]	; (800d8dc <USART1_IRQHandler+0x10>)
 800d8d2:	f006 fb0d 	bl	8013ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800d8d6:	bf00      	nop
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	20004804 	.word	0x20004804

0800d8e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800d8e4:	4802      	ldr	r0, [pc, #8]	; (800d8f0 <USART2_IRQHandler+0x10>)
 800d8e6:	f006 fb03 	bl	8013ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800d8ea:	bf00      	nop
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	20004894 	.word	0x20004894

0800d8f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	af00      	add	r7, sp, #0
  return 1;
 800d8f8:	2301      	movs	r3, #1
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <_kill>:

int _kill(int pid, int sig)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d90e:	f00b ffff 	bl	8019910 <__errno>
 800d912:	4603      	mov	r3, r0
 800d914:	2216      	movs	r2, #22
 800d916:	601a      	str	r2, [r3, #0]
  return -1;
 800d918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <_exit>:

void _exit (int status)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d92c:	f04f 31ff 	mov.w	r1, #4294967295
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f7ff ffe7 	bl	800d904 <_kill>
  while (1) {}    /* Make sure we hang here */
 800d936:	e7fe      	b.n	800d936 <_exit+0x12>

0800d938 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b086      	sub	sp, #24
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	60f8      	str	r0, [r7, #12]
 800d940:	60b9      	str	r1, [r7, #8]
 800d942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d944:	2300      	movs	r3, #0
 800d946:	617b      	str	r3, [r7, #20]
 800d948:	e00a      	b.n	800d960 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d94a:	f3af 8000 	nop.w
 800d94e:	4601      	mov	r1, r0
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	1c5a      	adds	r2, r3, #1
 800d954:	60ba      	str	r2, [r7, #8]
 800d956:	b2ca      	uxtb	r2, r1
 800d958:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	3301      	adds	r3, #1
 800d95e:	617b      	str	r3, [r7, #20]
 800d960:	697a      	ldr	r2, [r7, #20]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	429a      	cmp	r2, r3
 800d966:	dbf0      	blt.n	800d94a <_read+0x12>
  }

  return len;
 800d968:	687b      	ldr	r3, [r7, #4]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3718      	adds	r7, #24
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d972:	b580      	push	{r7, lr}
 800d974:	b086      	sub	sp, #24
 800d976:	af00      	add	r7, sp, #0
 800d978:	60f8      	str	r0, [r7, #12]
 800d97a:	60b9      	str	r1, [r7, #8]
 800d97c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d97e:	2300      	movs	r3, #0
 800d980:	617b      	str	r3, [r7, #20]
 800d982:	e009      	b.n	800d998 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	1c5a      	adds	r2, r3, #1
 800d988:	60ba      	str	r2, [r7, #8]
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	4618      	mov	r0, r3
 800d98e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	3301      	adds	r3, #1
 800d996:	617b      	str	r3, [r7, #20]
 800d998:	697a      	ldr	r2, [r7, #20]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	dbf1      	blt.n	800d984 <_write+0x12>
  }
  return len;
 800d9a0:	687b      	ldr	r3, [r7, #4]
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3718      	adds	r7, #24
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <_close>:

int _close(int file)
{
 800d9aa:	b480      	push	{r7}
 800d9ac:	b083      	sub	sp, #12
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d9b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d9c2:	b480      	push	{r7}
 800d9c4:	b083      	sub	sp, #12
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
 800d9ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d9d2:	605a      	str	r2, [r3, #4]
  return 0;
 800d9d4:	2300      	movs	r3, #0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	370c      	adds	r7, #12
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr

0800d9e2 <_isatty>:

int _isatty(int file)
{
 800d9e2:	b480      	push	{r7}
 800d9e4:	b083      	sub	sp, #12
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800d9ea:	2301      	movs	r3, #1
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	370c      	adds	r7, #12
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800da04:	2300      	movs	r3, #0
}
 800da06:	4618      	mov	r0, r3
 800da08:	3714      	adds	r7, #20
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
	...

0800da14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b086      	sub	sp, #24
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800da1c:	4a14      	ldr	r2, [pc, #80]	; (800da70 <_sbrk+0x5c>)
 800da1e:	4b15      	ldr	r3, [pc, #84]	; (800da74 <_sbrk+0x60>)
 800da20:	1ad3      	subs	r3, r2, r3
 800da22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800da28:	4b13      	ldr	r3, [pc, #76]	; (800da78 <_sbrk+0x64>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d102      	bne.n	800da36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800da30:	4b11      	ldr	r3, [pc, #68]	; (800da78 <_sbrk+0x64>)
 800da32:	4a12      	ldr	r2, [pc, #72]	; (800da7c <_sbrk+0x68>)
 800da34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800da36:	4b10      	ldr	r3, [pc, #64]	; (800da78 <_sbrk+0x64>)
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	4413      	add	r3, r2
 800da3e:	693a      	ldr	r2, [r7, #16]
 800da40:	429a      	cmp	r2, r3
 800da42:	d207      	bcs.n	800da54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800da44:	f00b ff64 	bl	8019910 <__errno>
 800da48:	4603      	mov	r3, r0
 800da4a:	220c      	movs	r2, #12
 800da4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800da4e:	f04f 33ff 	mov.w	r3, #4294967295
 800da52:	e009      	b.n	800da68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800da54:	4b08      	ldr	r3, [pc, #32]	; (800da78 <_sbrk+0x64>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800da5a:	4b07      	ldr	r3, [pc, #28]	; (800da78 <_sbrk+0x64>)
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	4413      	add	r3, r2
 800da62:	4a05      	ldr	r2, [pc, #20]	; (800da78 <_sbrk+0x64>)
 800da64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800da66:	68fb      	ldr	r3, [r7, #12]
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3718      	adds	r7, #24
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	20050000 	.word	0x20050000
 800da74:	00000c00 	.word	0x00000c00
 800da78:	200046bc 	.word	0x200046bc
 800da7c:	20037408 	.word	0x20037408

0800da80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800da80:	b480      	push	{r7}
 800da82:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 800da84:	4b08      	ldr	r3, [pc, #32]	; (800daa8 <SystemInit+0x28>)
 800da86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800da8a:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800da8c:	4b06      	ldr	r3, [pc, #24]	; (800daa8 <SystemInit+0x28>)
 800da8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da92:	4a05      	ldr	r2, [pc, #20]	; (800daa8 <SystemInit+0x28>)
 800da94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800da98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800da9c:	bf00      	nop
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	e000ed00 	.word	0xe000ed00

0800daac <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b09a      	sub	sp, #104	; 0x68
 800dab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dab2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dab6:	2200      	movs	r2, #0
 800dab8:	601a      	str	r2, [r3, #0]
 800daba:	605a      	str	r2, [r3, #4]
 800dabc:	609a      	str	r2, [r3, #8]
 800dabe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dac0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dac4:	2200      	movs	r2, #0
 800dac6:	601a      	str	r2, [r3, #0]
 800dac8:	605a      	str	r2, [r3, #4]
 800daca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dacc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dad0:	2200      	movs	r2, #0
 800dad2:	601a      	str	r2, [r3, #0]
 800dad4:	605a      	str	r2, [r3, #4]
 800dad6:	609a      	str	r2, [r3, #8]
 800dad8:	60da      	str	r2, [r3, #12]
 800dada:	611a      	str	r2, [r3, #16]
 800dadc:	615a      	str	r2, [r3, #20]
 800dade:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800dae0:	1d3b      	adds	r3, r7, #4
 800dae2:	222c      	movs	r2, #44	; 0x2c
 800dae4:	2100      	movs	r1, #0
 800dae6:	4618      	mov	r0, r3
 800dae8:	f00b ff4a 	bl	8019980 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800daec:	4b43      	ldr	r3, [pc, #268]	; (800dbfc <MX_TIM1_Init+0x150>)
 800daee:	4a44      	ldr	r2, [pc, #272]	; (800dc00 <MX_TIM1_Init+0x154>)
 800daf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800daf2:	4b42      	ldr	r3, [pc, #264]	; (800dbfc <MX_TIM1_Init+0x150>)
 800daf4:	2200      	movs	r2, #0
 800daf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800daf8:	4b40      	ldr	r3, [pc, #256]	; (800dbfc <MX_TIM1_Init+0x150>)
 800dafa:	2200      	movs	r2, #0
 800dafc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 149;
 800dafe:	4b3f      	ldr	r3, [pc, #252]	; (800dbfc <MX_TIM1_Init+0x150>)
 800db00:	2295      	movs	r2, #149	; 0x95
 800db02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800db04:	4b3d      	ldr	r3, [pc, #244]	; (800dbfc <MX_TIM1_Init+0x150>)
 800db06:	2200      	movs	r2, #0
 800db08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800db0a:	4b3c      	ldr	r3, [pc, #240]	; (800dbfc <MX_TIM1_Init+0x150>)
 800db0c:	2200      	movs	r2, #0
 800db0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800db10:	4b3a      	ldr	r3, [pc, #232]	; (800dbfc <MX_TIM1_Init+0x150>)
 800db12:	2200      	movs	r2, #0
 800db14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800db16:	4839      	ldr	r0, [pc, #228]	; (800dbfc <MX_TIM1_Init+0x150>)
 800db18:	f004 fa30 	bl	8011f7c <HAL_TIM_Base_Init>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d001      	beq.n	800db26 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800db22:	f7fd fbe5 	bl	800b2f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800db26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db2a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800db2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800db30:	4619      	mov	r1, r3
 800db32:	4832      	ldr	r0, [pc, #200]	; (800dbfc <MX_TIM1_Init+0x150>)
 800db34:	f005 f9cc 	bl	8012ed0 <HAL_TIM_ConfigClockSource>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d001      	beq.n	800db42 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800db3e:	f7fd fbd7 	bl	800b2f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800db42:	482e      	ldr	r0, [pc, #184]	; (800dbfc <MX_TIM1_Init+0x150>)
 800db44:	f004 fae2 	bl	801210c <HAL_TIM_PWM_Init>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d001      	beq.n	800db52 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800db4e:	f7fd fbcf 	bl	800b2f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800db52:	2300      	movs	r3, #0
 800db54:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800db56:	2300      	movs	r3, #0
 800db58:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800db5a:	2300      	movs	r3, #0
 800db5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800db5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800db62:	4619      	mov	r1, r3
 800db64:	4825      	ldr	r0, [pc, #148]	; (800dbfc <MX_TIM1_Init+0x150>)
 800db66:	f005 ffb9 	bl	8013adc <HAL_TIMEx_MasterConfigSynchronization>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d001      	beq.n	800db74 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800db70:	f7fd fbbe 	bl	800b2f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800db74:	2360      	movs	r3, #96	; 0x60
 800db76:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800db78:	2300      	movs	r3, #0
 800db7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800db7c:	2300      	movs	r3, #0
 800db7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800db80:	2300      	movs	r3, #0
 800db82:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800db84:	2300      	movs	r3, #0
 800db86:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800db88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db8c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800db8e:	2300      	movs	r3, #0
 800db90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800db92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db96:	2200      	movs	r2, #0
 800db98:	4619      	mov	r1, r3
 800db9a:	4818      	ldr	r0, [pc, #96]	; (800dbfc <MX_TIM1_Init+0x150>)
 800db9c:	f005 f884 	bl	8012ca8 <HAL_TIM_PWM_ConfigChannel>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d001      	beq.n	800dbaa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800dba6:	f7fd fba3 	bl	800b2f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800dbbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dbc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800dbcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dbd0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800dbda:	1d3b      	adds	r3, r7, #4
 800dbdc:	4619      	mov	r1, r3
 800dbde:	4807      	ldr	r0, [pc, #28]	; (800dbfc <MX_TIM1_Init+0x150>)
 800dbe0:	f006 f804 	bl	8013bec <HAL_TIMEx_ConfigBreakDeadTime>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d001      	beq.n	800dbee <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800dbea:	f7fd fb81 	bl	800b2f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800dbee:	4803      	ldr	r0, [pc, #12]	; (800dbfc <MX_TIM1_Init+0x150>)
 800dbf0:	f000 f938 	bl	800de64 <HAL_TIM_MspPostInit>

}
 800dbf4:	bf00      	nop
 800dbf6:	3768      	adds	r7, #104	; 0x68
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}
 800dbfc:	200046c0 	.word	0x200046c0
 800dc00:	40012c00 	.word	0x40012c00

0800dc04 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b08c      	sub	sp, #48	; 0x30
 800dc08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800dc0a:	f107 030c 	add.w	r3, r7, #12
 800dc0e:	2224      	movs	r2, #36	; 0x24
 800dc10:	2100      	movs	r1, #0
 800dc12:	4618      	mov	r0, r3
 800dc14:	f00b feb4 	bl	8019980 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc18:	463b      	mov	r3, r7
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	601a      	str	r2, [r3, #0]
 800dc1e:	605a      	str	r2, [r3, #4]
 800dc20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800dc22:	4b21      	ldr	r3, [pc, #132]	; (800dca8 <MX_TIM5_Init+0xa4>)
 800dc24:	4a21      	ldr	r2, [pc, #132]	; (800dcac <MX_TIM5_Init+0xa8>)
 800dc26:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800dc28:	4b1f      	ldr	r3, [pc, #124]	; (800dca8 <MX_TIM5_Init+0xa4>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc2e:	4b1e      	ldr	r3, [pc, #120]	; (800dca8 <MX_TIM5_Init+0xa4>)
 800dc30:	2200      	movs	r2, #0
 800dc32:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800dc34:	4b1c      	ldr	r3, [pc, #112]	; (800dca8 <MX_TIM5_Init+0xa4>)
 800dc36:	f04f 32ff 	mov.w	r2, #4294967295
 800dc3a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc3c:	4b1a      	ldr	r3, [pc, #104]	; (800dca8 <MX_TIM5_Init+0xa4>)
 800dc3e:	2200      	movs	r2, #0
 800dc40:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc42:	4b19      	ldr	r3, [pc, #100]	; (800dca8 <MX_TIM5_Init+0xa4>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800dc48:	2303      	movs	r3, #3
 800dc4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800dc50:	2301      	movs	r3, #1
 800dc52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800dc54:	2300      	movs	r3, #0
 800dc56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800dc58:	230f      	movs	r3, #15
 800dc5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800dc60:	2301      	movs	r3, #1
 800dc62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800dc64:	2300      	movs	r3, #0
 800dc66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800dc68:	230f      	movs	r3, #15
 800dc6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800dc6c:	f107 030c 	add.w	r3, r7, #12
 800dc70:	4619      	mov	r1, r3
 800dc72:	480d      	ldr	r0, [pc, #52]	; (800dca8 <MX_TIM5_Init+0xa4>)
 800dc74:	f004 fdc4 	bl	8012800 <HAL_TIM_Encoder_Init>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d001      	beq.n	800dc82 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800dc7e:	f7fd fb37 	bl	800b2f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc82:	2300      	movs	r3, #0
 800dc84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc86:	2300      	movs	r3, #0
 800dc88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800dc8a:	463b      	mov	r3, r7
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	4806      	ldr	r0, [pc, #24]	; (800dca8 <MX_TIM5_Init+0xa4>)
 800dc90:	f005 ff24 	bl	8013adc <HAL_TIMEx_MasterConfigSynchronization>
 800dc94:	4603      	mov	r3, r0
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d001      	beq.n	800dc9e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800dc9a:	f7fd fb29 	bl	800b2f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800dc9e:	bf00      	nop
 800dca0:	3730      	adds	r7, #48	; 0x30
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	2000470c 	.word	0x2000470c
 800dcac:	40000c00 	.word	0x40000c00

0800dcb0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800dcb4:	4b0f      	ldr	r3, [pc, #60]	; (800dcf4 <MX_TIM16_Init+0x44>)
 800dcb6:	4a10      	ldr	r2, [pc, #64]	; (800dcf8 <MX_TIM16_Init+0x48>)
 800dcb8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 119;
 800dcba:	4b0e      	ldr	r3, [pc, #56]	; (800dcf4 <MX_TIM16_Init+0x44>)
 800dcbc:	2277      	movs	r2, #119	; 0x77
 800dcbe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dcc0:	4b0c      	ldr	r3, [pc, #48]	; (800dcf4 <MX_TIM16_Init+0x44>)
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800dcc6:	4b0b      	ldr	r3, [pc, #44]	; (800dcf4 <MX_TIM16_Init+0x44>)
 800dcc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800dccc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dcce:	4b09      	ldr	r3, [pc, #36]	; (800dcf4 <MX_TIM16_Init+0x44>)
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800dcd4:	4b07      	ldr	r3, [pc, #28]	; (800dcf4 <MX_TIM16_Init+0x44>)
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dcda:	4b06      	ldr	r3, [pc, #24]	; (800dcf4 <MX_TIM16_Init+0x44>)
 800dcdc:	2200      	movs	r2, #0
 800dcde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800dce0:	4804      	ldr	r0, [pc, #16]	; (800dcf4 <MX_TIM16_Init+0x44>)
 800dce2:	f004 f94b 	bl	8011f7c <HAL_TIM_Base_Init>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d001      	beq.n	800dcf0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800dcec:	f7fd fb00 	bl	800b2f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800dcf0:	bf00      	nop
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	20004758 	.word	0x20004758
 800dcf8:	40014400 	.word	0x40014400

0800dcfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4a30      	ldr	r2, [pc, #192]	; (800ddcc <HAL_TIM_Base_MspInit+0xd0>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d148      	bne.n	800dda0 <HAL_TIM_Base_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800dd0e:	4b30      	ldr	r3, [pc, #192]	; (800ddd0 <HAL_TIM_Base_MspInit+0xd4>)
 800dd10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd12:	4a2f      	ldr	r2, [pc, #188]	; (800ddd0 <HAL_TIM_Base_MspInit+0xd4>)
 800dd14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dd18:	6613      	str	r3, [r2, #96]	; 0x60
 800dd1a:	4b2d      	ldr	r3, [pc, #180]	; (800ddd0 <HAL_TIM_Base_MspInit+0xd4>)
 800dd1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd22:	60fb      	str	r3, [r7, #12]
 800dd24:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800dd26:	4b2b      	ldr	r3, [pc, #172]	; (800ddd4 <HAL_TIM_Base_MspInit+0xd8>)
 800dd28:	4a2b      	ldr	r2, [pc, #172]	; (800ddd8 <HAL_TIM_Base_MspInit+0xdc>)
 800dd2a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 800dd2c:	4b29      	ldr	r3, [pc, #164]	; (800ddd4 <HAL_TIM_Base_MspInit+0xd8>)
 800dd2e:	222b      	movs	r2, #43	; 0x2b
 800dd30:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800dd32:	4b28      	ldr	r3, [pc, #160]	; (800ddd4 <HAL_TIM_Base_MspInit+0xd8>)
 800dd34:	2210      	movs	r2, #16
 800dd36:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800dd38:	4b26      	ldr	r3, [pc, #152]	; (800ddd4 <HAL_TIM_Base_MspInit+0xd8>)
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800dd3e:	4b25      	ldr	r3, [pc, #148]	; (800ddd4 <HAL_TIM_Base_MspInit+0xd8>)
 800dd40:	2280      	movs	r2, #128	; 0x80
 800dd42:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800dd44:	4b23      	ldr	r3, [pc, #140]	; (800ddd4 <HAL_TIM_Base_MspInit+0xd8>)
 800dd46:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd4a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800dd4c:	4b21      	ldr	r3, [pc, #132]	; (800ddd4 <HAL_TIM_Base_MspInit+0xd8>)
 800dd4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dd52:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800dd54:	4b1f      	ldr	r3, [pc, #124]	; (800ddd4 <HAL_TIM_Base_MspInit+0xd8>)
 800dd56:	2200      	movs	r2, #0
 800dd58:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800dd5a:	4b1e      	ldr	r3, [pc, #120]	; (800ddd4 <HAL_TIM_Base_MspInit+0xd8>)
 800dd5c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800dd60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800dd62:	481c      	ldr	r0, [pc, #112]	; (800ddd4 <HAL_TIM_Base_MspInit+0xd8>)
 800dd64:	f000 fbb2 	bl	800e4cc <HAL_DMA_Init>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d001      	beq.n	800dd72 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 800dd6e:	f7fd fabf 	bl	800b2f0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	4a17      	ldr	r2, [pc, #92]	; (800ddd4 <HAL_TIM_Base_MspInit+0xd8>)
 800dd76:	625a      	str	r2, [r3, #36]	; 0x24
 800dd78:	4a16      	ldr	r2, [pc, #88]	; (800ddd4 <HAL_TIM_Base_MspInit+0xd8>)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 15, 0);
 800dd7e:	2200      	movs	r2, #0
 800dd80:	210f      	movs	r1, #15
 800dd82:	2018      	movs	r0, #24
 800dd84:	f000 fb73 	bl	800e46e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800dd88:	2018      	movs	r0, #24
 800dd8a:	f000 fb8c 	bl	800e4a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 800dd8e:	2200      	movs	r2, #0
 800dd90:	2105      	movs	r1, #5
 800dd92:	201a      	movs	r0, #26
 800dd94:	f000 fb6b 	bl	800e46e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800dd98:	201a      	movs	r0, #26
 800dd9a:	f000 fb84 	bl	800e4a6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800dd9e:	e010      	b.n	800ddc2 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM16)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a0d      	ldr	r2, [pc, #52]	; (800dddc <HAL_TIM_Base_MspInit+0xe0>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d10b      	bne.n	800ddc2 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800ddaa:	4b09      	ldr	r3, [pc, #36]	; (800ddd0 <HAL_TIM_Base_MspInit+0xd4>)
 800ddac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddae:	4a08      	ldr	r2, [pc, #32]	; (800ddd0 <HAL_TIM_Base_MspInit+0xd4>)
 800ddb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ddb4:	6613      	str	r3, [r2, #96]	; 0x60
 800ddb6:	4b06      	ldr	r3, [pc, #24]	; (800ddd0 <HAL_TIM_Base_MspInit+0xd4>)
 800ddb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddbe:	60bb      	str	r3, [r7, #8]
 800ddc0:	68bb      	ldr	r3, [r7, #8]
}
 800ddc2:	bf00      	nop
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	40012c00 	.word	0x40012c00
 800ddd0:	40021000 	.word	0x40021000
 800ddd4:	200047a4 	.word	0x200047a4
 800ddd8:	4002001c 	.word	0x4002001c
 800dddc:	40014400 	.word	0x40014400

0800dde0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b08a      	sub	sp, #40	; 0x28
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dde8:	f107 0314 	add.w	r3, r7, #20
 800ddec:	2200      	movs	r2, #0
 800ddee:	601a      	str	r2, [r3, #0]
 800ddf0:	605a      	str	r2, [r3, #4]
 800ddf2:	609a      	str	r2, [r3, #8]
 800ddf4:	60da      	str	r2, [r3, #12]
 800ddf6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a17      	ldr	r2, [pc, #92]	; (800de5c <HAL_TIM_Encoder_MspInit+0x7c>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d128      	bne.n	800de54 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800de02:	4b17      	ldr	r3, [pc, #92]	; (800de60 <HAL_TIM_Encoder_MspInit+0x80>)
 800de04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de06:	4a16      	ldr	r2, [pc, #88]	; (800de60 <HAL_TIM_Encoder_MspInit+0x80>)
 800de08:	f043 0308 	orr.w	r3, r3, #8
 800de0c:	6593      	str	r3, [r2, #88]	; 0x58
 800de0e:	4b14      	ldr	r3, [pc, #80]	; (800de60 <HAL_TIM_Encoder_MspInit+0x80>)
 800de10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de12:	f003 0308 	and.w	r3, r3, #8
 800de16:	613b      	str	r3, [r7, #16]
 800de18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de1a:	4b11      	ldr	r3, [pc, #68]	; (800de60 <HAL_TIM_Encoder_MspInit+0x80>)
 800de1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de1e:	4a10      	ldr	r2, [pc, #64]	; (800de60 <HAL_TIM_Encoder_MspInit+0x80>)
 800de20:	f043 0301 	orr.w	r3, r3, #1
 800de24:	64d3      	str	r3, [r2, #76]	; 0x4c
 800de26:	4b0e      	ldr	r3, [pc, #56]	; (800de60 <HAL_TIM_Encoder_MspInit+0x80>)
 800de28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de2a:	f003 0301 	and.w	r3, r3, #1
 800de2e:	60fb      	str	r3, [r7, #12]
 800de30:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800de32:	2303      	movs	r3, #3
 800de34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de36:	2302      	movs	r3, #2
 800de38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de3a:	2300      	movs	r3, #0
 800de3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de3e:	2300      	movs	r3, #0
 800de40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800de42:	2302      	movs	r3, #2
 800de44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de46:	f107 0314 	add.w	r3, r7, #20
 800de4a:	4619      	mov	r1, r3
 800de4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800de50:	f000 fe78 	bl	800eb44 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800de54:	bf00      	nop
 800de56:	3728      	adds	r7, #40	; 0x28
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	40000c00 	.word	0x40000c00
 800de60:	40021000 	.word	0x40021000

0800de64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b088      	sub	sp, #32
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de6c:	f107 030c 	add.w	r3, r7, #12
 800de70:	2200      	movs	r2, #0
 800de72:	601a      	str	r2, [r3, #0]
 800de74:	605a      	str	r2, [r3, #4]
 800de76:	609a      	str	r2, [r3, #8]
 800de78:	60da      	str	r2, [r3, #12]
 800de7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a12      	ldr	r2, [pc, #72]	; (800decc <HAL_TIM_MspPostInit+0x68>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d11d      	bne.n	800dec2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de86:	4b12      	ldr	r3, [pc, #72]	; (800ded0 <HAL_TIM_MspPostInit+0x6c>)
 800de88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de8a:	4a11      	ldr	r2, [pc, #68]	; (800ded0 <HAL_TIM_MspPostInit+0x6c>)
 800de8c:	f043 0301 	orr.w	r3, r3, #1
 800de90:	64d3      	str	r3, [r2, #76]	; 0x4c
 800de92:	4b0f      	ldr	r3, [pc, #60]	; (800ded0 <HAL_TIM_MspPostInit+0x6c>)
 800de94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de96:	f003 0301 	and.w	r3, r3, #1
 800de9a:	60bb      	str	r3, [r7, #8]
 800de9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800de9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dea2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dea4:	2302      	movs	r3, #2
 800dea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dea8:	2300      	movs	r3, #0
 800deaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800deac:	2300      	movs	r3, #0
 800deae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800deb0:	2301      	movs	r3, #1
 800deb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800deb4:	f107 030c 	add.w	r3, r7, #12
 800deb8:	4619      	mov	r1, r3
 800deba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800debe:	f000 fe41 	bl	800eb44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800dec2:	bf00      	nop
 800dec4:	3720      	adds	r7, #32
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	40012c00 	.word	0x40012c00
 800ded0:	40021000 	.word	0x40021000

0800ded4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ded8:	4b24      	ldr	r3, [pc, #144]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800deda:	4a25      	ldr	r2, [pc, #148]	; (800df70 <MX_USART1_UART_Init+0x9c>)
 800dedc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 800dede:	4b23      	ldr	r3, [pc, #140]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800dee0:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800dee4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dee6:	4b21      	ldr	r3, [pc, #132]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800dee8:	2200      	movs	r2, #0
 800deea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800deec:	4b1f      	ldr	r3, [pc, #124]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800deee:	2200      	movs	r2, #0
 800def0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800def2:	4b1e      	ldr	r3, [pc, #120]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800def4:	2200      	movs	r2, #0
 800def6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800def8:	4b1c      	ldr	r3, [pc, #112]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800defa:	220c      	movs	r2, #12
 800defc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800defe:	4b1b      	ldr	r3, [pc, #108]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800df00:	2200      	movs	r2, #0
 800df02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800df04:	4b19      	ldr	r3, [pc, #100]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800df06:	2200      	movs	r2, #0
 800df08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800df0a:	4b18      	ldr	r3, [pc, #96]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800df0c:	2200      	movs	r2, #0
 800df0e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800df10:	4b16      	ldr	r3, [pc, #88]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800df12:	2200      	movs	r2, #0
 800df14:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800df16:	4b15      	ldr	r3, [pc, #84]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800df18:	2210      	movs	r2, #16
 800df1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800df1c:	4b13      	ldr	r3, [pc, #76]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800df1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800df22:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800df24:	4811      	ldr	r0, [pc, #68]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800df26:	f005 fefd 	bl	8013d24 <HAL_UART_Init>
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d001      	beq.n	800df34 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 800df30:	f7fd f9de 	bl	800b2f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800df34:	2100      	movs	r1, #0
 800df36:	480d      	ldr	r0, [pc, #52]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800df38:	f007 faa2 	bl	8015480 <HAL_UARTEx_SetTxFifoThreshold>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d001      	beq.n	800df46 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 800df42:	f7fd f9d5 	bl	800b2f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800df46:	2100      	movs	r1, #0
 800df48:	4808      	ldr	r0, [pc, #32]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800df4a:	f007 fad7 	bl	80154fc <HAL_UARTEx_SetRxFifoThreshold>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d001      	beq.n	800df58 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 800df54:	f7fd f9cc 	bl	800b2f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800df58:	4804      	ldr	r0, [pc, #16]	; (800df6c <MX_USART1_UART_Init+0x98>)
 800df5a:	f007 fa58 	bl	801540e <HAL_UARTEx_DisableFifoMode>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d001      	beq.n	800df68 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 800df64:	f7fd f9c4 	bl	800b2f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800df68:	bf00      	nop
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	20004804 	.word	0x20004804
 800df70:	40013800 	.word	0x40013800

0800df74 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800df78:	4b24      	ldr	r3, [pc, #144]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800df7a:	4a25      	ldr	r2, [pc, #148]	; (800e010 <MX_USART2_UART_Init+0x9c>)
 800df7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800df7e:	4b23      	ldr	r3, [pc, #140]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800df80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800df84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800df86:	4b21      	ldr	r3, [pc, #132]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800df88:	2200      	movs	r2, #0
 800df8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800df8c:	4b1f      	ldr	r3, [pc, #124]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800df8e:	2200      	movs	r2, #0
 800df90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800df92:	4b1e      	ldr	r3, [pc, #120]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800df94:	2200      	movs	r2, #0
 800df96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800df98:	4b1c      	ldr	r3, [pc, #112]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800df9a:	220c      	movs	r2, #12
 800df9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800df9e:	4b1b      	ldr	r3, [pc, #108]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800dfa4:	4b19      	ldr	r3, [pc, #100]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800dfaa:	4b18      	ldr	r3, [pc, #96]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800dfac:	2200      	movs	r2, #0
 800dfae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800dfb0:	4b16      	ldr	r3, [pc, #88]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800dfb6:	4b15      	ldr	r3, [pc, #84]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800dfb8:	2210      	movs	r2, #16
 800dfba:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800dfbc:	4b13      	ldr	r3, [pc, #76]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800dfbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dfc2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800dfc4:	4811      	ldr	r0, [pc, #68]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800dfc6:	f005 fead 	bl	8013d24 <HAL_UART_Init>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d001      	beq.n	800dfd4 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 800dfd0:	f7fd f98e 	bl	800b2f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	480d      	ldr	r0, [pc, #52]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800dfd8:	f007 fa52 	bl	8015480 <HAL_UARTEx_SetTxFifoThreshold>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 800dfe2:	f7fd f985 	bl	800b2f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	4808      	ldr	r0, [pc, #32]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800dfea:	f007 fa87 	bl	80154fc <HAL_UARTEx_SetRxFifoThreshold>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d001      	beq.n	800dff8 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 800dff4:	f7fd f97c 	bl	800b2f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800dff8:	4804      	ldr	r0, [pc, #16]	; (800e00c <MX_USART2_UART_Init+0x98>)
 800dffa:	f007 fa08 	bl	801540e <HAL_UARTEx_DisableFifoMode>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d001      	beq.n	800e008 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 800e004:	f7fd f974 	bl	800b2f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800e008:	bf00      	nop
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	20004894 	.word	0x20004894
 800e010:	40004400 	.word	0x40004400

0800e014 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b0b2      	sub	sp, #200	; 0xc8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e01c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800e020:	2200      	movs	r2, #0
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	605a      	str	r2, [r3, #4]
 800e026:	609a      	str	r2, [r3, #8]
 800e028:	60da      	str	r2, [r3, #12]
 800e02a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e02c:	f107 031c 	add.w	r3, r7, #28
 800e030:	2298      	movs	r2, #152	; 0x98
 800e032:	2100      	movs	r1, #0
 800e034:	4618      	mov	r0, r3
 800e036:	f00b fca3 	bl	8019980 <memset>
  if(uartHandle->Instance==USART1)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	4a6c      	ldr	r2, [pc, #432]	; (800e1f0 <HAL_UART_MspInit+0x1dc>)
 800e040:	4293      	cmp	r3, r2
 800e042:	d166      	bne.n	800e112 <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800e044:	2301      	movs	r3, #1
 800e046:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800e048:	2300      	movs	r3, #0
 800e04a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e04c:	f107 031c 	add.w	r3, r7, #28
 800e050:	4618      	mov	r0, r3
 800e052:	f001 fff3 	bl	801003c <HAL_RCCEx_PeriphCLKConfig>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d001      	beq.n	800e060 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800e05c:	f7fd f948 	bl	800b2f0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e060:	4b64      	ldr	r3, [pc, #400]	; (800e1f4 <HAL_UART_MspInit+0x1e0>)
 800e062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e064:	4a63      	ldr	r2, [pc, #396]	; (800e1f4 <HAL_UART_MspInit+0x1e0>)
 800e066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e06a:	6613      	str	r3, [r2, #96]	; 0x60
 800e06c:	4b61      	ldr	r3, [pc, #388]	; (800e1f4 <HAL_UART_MspInit+0x1e0>)
 800e06e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e074:	61bb      	str	r3, [r7, #24]
 800e076:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e078:	4b5e      	ldr	r3, [pc, #376]	; (800e1f4 <HAL_UART_MspInit+0x1e0>)
 800e07a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e07c:	4a5d      	ldr	r2, [pc, #372]	; (800e1f4 <HAL_UART_MspInit+0x1e0>)
 800e07e:	f043 0301 	orr.w	r3, r3, #1
 800e082:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e084:	4b5b      	ldr	r3, [pc, #364]	; (800e1f4 <HAL_UART_MspInit+0x1e0>)
 800e086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e088:	f003 0301 	and.w	r3, r3, #1
 800e08c:	617b      	str	r3, [r7, #20]
 800e08e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e090:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e098:	2302      	movs	r3, #2
 800e09a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e0a4:	2303      	movs	r3, #3
 800e0a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e0aa:	2307      	movs	r3, #7
 800e0ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e0b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e0ba:	f000 fd43 	bl	800eb44 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800e0be:	4b4e      	ldr	r3, [pc, #312]	; (800e1f8 <HAL_UART_MspInit+0x1e4>)
 800e0c0:	4a4e      	ldr	r2, [pc, #312]	; (800e1fc <HAL_UART_MspInit+0x1e8>)
 800e0c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800e0c4:	4b4c      	ldr	r3, [pc, #304]	; (800e1f8 <HAL_UART_MspInit+0x1e4>)
 800e0c6:	2219      	movs	r2, #25
 800e0c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e0ca:	4b4b      	ldr	r3, [pc, #300]	; (800e1f8 <HAL_UART_MspInit+0x1e4>)
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e0d0:	4b49      	ldr	r3, [pc, #292]	; (800e1f8 <HAL_UART_MspInit+0x1e4>)
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e0d6:	4b48      	ldr	r3, [pc, #288]	; (800e1f8 <HAL_UART_MspInit+0x1e4>)
 800e0d8:	2280      	movs	r2, #128	; 0x80
 800e0da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e0dc:	4b46      	ldr	r3, [pc, #280]	; (800e1f8 <HAL_UART_MspInit+0x1e4>)
 800e0de:	2200      	movs	r2, #0
 800e0e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e0e2:	4b45      	ldr	r3, [pc, #276]	; (800e1f8 <HAL_UART_MspInit+0x1e4>)
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800e0e8:	4b43      	ldr	r3, [pc, #268]	; (800e1f8 <HAL_UART_MspInit+0x1e4>)
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e0ee:	4b42      	ldr	r3, [pc, #264]	; (800e1f8 <HAL_UART_MspInit+0x1e4>)
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800e0f4:	4840      	ldr	r0, [pc, #256]	; (800e1f8 <HAL_UART_MspInit+0x1e4>)
 800e0f6:	f000 f9e9 	bl	800e4cc <HAL_DMA_Init>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d001      	beq.n	800e104 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800e100:	f7fd f8f6 	bl	800b2f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	4a3c      	ldr	r2, [pc, #240]	; (800e1f8 <HAL_UART_MspInit+0x1e4>)
 800e108:	67da      	str	r2, [r3, #124]	; 0x7c
 800e10a:	4a3b      	ldr	r2, [pc, #236]	; (800e1f8 <HAL_UART_MspInit+0x1e4>)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800e110:	e069      	b.n	800e1e6 <HAL_UART_MspInit+0x1d2>
  else if(uartHandle->Instance==USART2)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4a3a      	ldr	r2, [pc, #232]	; (800e200 <HAL_UART_MspInit+0x1ec>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d164      	bne.n	800e1e6 <HAL_UART_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800e11c:	2302      	movs	r3, #2
 800e11e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800e120:	2300      	movs	r3, #0
 800e122:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e124:	f107 031c 	add.w	r3, r7, #28
 800e128:	4618      	mov	r0, r3
 800e12a:	f001 ff87 	bl	801003c <HAL_RCCEx_PeriphCLKConfig>
 800e12e:	4603      	mov	r3, r0
 800e130:	2b00      	cmp	r3, #0
 800e132:	d001      	beq.n	800e138 <HAL_UART_MspInit+0x124>
      Error_Handler();
 800e134:	f7fd f8dc 	bl	800b2f0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800e138:	4b2e      	ldr	r3, [pc, #184]	; (800e1f4 <HAL_UART_MspInit+0x1e0>)
 800e13a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e13c:	4a2d      	ldr	r2, [pc, #180]	; (800e1f4 <HAL_UART_MspInit+0x1e0>)
 800e13e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e142:	6593      	str	r3, [r2, #88]	; 0x58
 800e144:	4b2b      	ldr	r3, [pc, #172]	; (800e1f4 <HAL_UART_MspInit+0x1e0>)
 800e146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e14c:	613b      	str	r3, [r7, #16]
 800e14e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e150:	4b28      	ldr	r3, [pc, #160]	; (800e1f4 <HAL_UART_MspInit+0x1e0>)
 800e152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e154:	4a27      	ldr	r2, [pc, #156]	; (800e1f4 <HAL_UART_MspInit+0x1e0>)
 800e156:	f043 0301 	orr.w	r3, r3, #1
 800e15a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e15c:	4b25      	ldr	r3, [pc, #148]	; (800e1f4 <HAL_UART_MspInit+0x1e0>)
 800e15e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e160:	f003 0301 	and.w	r3, r3, #1
 800e164:	60fb      	str	r3, [r7, #12]
 800e166:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800e168:	230c      	movs	r3, #12
 800e16a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e16e:	2302      	movs	r3, #2
 800e170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e174:	2300      	movs	r3, #0
 800e176:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e17a:	2303      	movs	r3, #3
 800e17c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e180:	2307      	movs	r3, #7
 800e182:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e186:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800e18a:	4619      	mov	r1, r3
 800e18c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e190:	f000 fcd8 	bl	800eb44 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 800e194:	4b1b      	ldr	r3, [pc, #108]	; (800e204 <HAL_UART_MspInit+0x1f0>)
 800e196:	4a1c      	ldr	r2, [pc, #112]	; (800e208 <HAL_UART_MspInit+0x1f4>)
 800e198:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800e19a:	4b1a      	ldr	r3, [pc, #104]	; (800e204 <HAL_UART_MspInit+0x1f0>)
 800e19c:	221b      	movs	r2, #27
 800e19e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e1a0:	4b18      	ldr	r3, [pc, #96]	; (800e204 <HAL_UART_MspInit+0x1f0>)
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e1a6:	4b17      	ldr	r3, [pc, #92]	; (800e204 <HAL_UART_MspInit+0x1f0>)
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e1ac:	4b15      	ldr	r3, [pc, #84]	; (800e204 <HAL_UART_MspInit+0x1f0>)
 800e1ae:	2280      	movs	r2, #128	; 0x80
 800e1b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e1b2:	4b14      	ldr	r3, [pc, #80]	; (800e204 <HAL_UART_MspInit+0x1f0>)
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e1b8:	4b12      	ldr	r3, [pc, #72]	; (800e204 <HAL_UART_MspInit+0x1f0>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800e1be:	4b11      	ldr	r3, [pc, #68]	; (800e204 <HAL_UART_MspInit+0x1f0>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e1c4:	4b0f      	ldr	r3, [pc, #60]	; (800e204 <HAL_UART_MspInit+0x1f0>)
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800e1ca:	480e      	ldr	r0, [pc, #56]	; (800e204 <HAL_UART_MspInit+0x1f0>)
 800e1cc:	f000 f97e 	bl	800e4cc <HAL_DMA_Init>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d001      	beq.n	800e1da <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 800e1d6:	f7fd f88b 	bl	800b2f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4a09      	ldr	r2, [pc, #36]	; (800e204 <HAL_UART_MspInit+0x1f0>)
 800e1de:	67da      	str	r2, [r3, #124]	; 0x7c
 800e1e0:	4a08      	ldr	r2, [pc, #32]	; (800e204 <HAL_UART_MspInit+0x1f0>)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6293      	str	r3, [r2, #40]	; 0x28
}
 800e1e6:	bf00      	nop
 800e1e8:	37c8      	adds	r7, #200	; 0xc8
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	40013800 	.word	0x40013800
 800e1f4:	40021000 	.word	0x40021000
 800e1f8:	20004924 	.word	0x20004924
 800e1fc:	40020008 	.word	0x40020008
 800e200:	40004400 	.word	0x40004400
 800e204:	20004984 	.word	0x20004984
 800e208:	40020030 	.word	0x40020030

0800e20c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800e20c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e244 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800e210:	f7ff fc36 	bl	800da80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e214:	480c      	ldr	r0, [pc, #48]	; (800e248 <LoopForever+0x6>)
  ldr r1, =_edata
 800e216:	490d      	ldr	r1, [pc, #52]	; (800e24c <LoopForever+0xa>)
  ldr r2, =_sidata
 800e218:	4a0d      	ldr	r2, [pc, #52]	; (800e250 <LoopForever+0xe>)
  movs r3, #0
 800e21a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e21c:	e002      	b.n	800e224 <LoopCopyDataInit>

0800e21e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e21e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e222:	3304      	adds	r3, #4

0800e224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e228:	d3f9      	bcc.n	800e21e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e22a:	4a0a      	ldr	r2, [pc, #40]	; (800e254 <LoopForever+0x12>)
  ldr r4, =_ebss
 800e22c:	4c0a      	ldr	r4, [pc, #40]	; (800e258 <LoopForever+0x16>)
  movs r3, #0
 800e22e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e230:	e001      	b.n	800e236 <LoopFillZerobss>

0800e232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e234:	3204      	adds	r2, #4

0800e236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e238:	d3fb      	bcc.n	800e232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800e23a:	f00b fb6f 	bl	801991c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800e23e:	f7fc ff7f 	bl	800b140 <main>

0800e242 <LoopForever>:

LoopForever:
    b LoopForever
 800e242:	e7fe      	b.n	800e242 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800e244:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800e248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e24c:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 800e250:	08025ae0 	.word	0x08025ae0
  ldr r2, =_sbss
 800e254:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 800e258:	20037408 	.word	0x20037408

0800e25c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800e25c:	e7fe      	b.n	800e25c <ADC1_2_IRQHandler>

0800e25e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e25e:	b580      	push	{r7, lr}
 800e260:	b082      	sub	sp, #8
 800e262:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800e264:	2300      	movs	r3, #0
 800e266:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e268:	2003      	movs	r0, #3
 800e26a:	f000 f8f5 	bl	800e458 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e26e:	200f      	movs	r0, #15
 800e270:	f7ff fa5c 	bl	800d72c <HAL_InitTick>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	d002      	beq.n	800e280 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800e27a:	2301      	movs	r3, #1
 800e27c:	71fb      	strb	r3, [r7, #7]
 800e27e:	e001      	b.n	800e284 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800e280:	f7ff fa2c 	bl	800d6dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800e284:	79fb      	ldrb	r3, [r7, #7]
}
 800e286:	4618      	mov	r0, r3
 800e288:	3708      	adds	r7, #8
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
	...

0800e290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e290:	b480      	push	{r7}
 800e292:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800e294:	4b06      	ldr	r3, [pc, #24]	; (800e2b0 <HAL_IncTick+0x20>)
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	461a      	mov	r2, r3
 800e29a:	4b06      	ldr	r3, [pc, #24]	; (800e2b4 <HAL_IncTick+0x24>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4413      	add	r3, r2
 800e2a0:	4a04      	ldr	r2, [pc, #16]	; (800e2b4 <HAL_IncTick+0x24>)
 800e2a2:	6013      	str	r3, [r2, #0]
}
 800e2a4:	bf00      	nop
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ac:	4770      	bx	lr
 800e2ae:	bf00      	nop
 800e2b0:	2000009c 	.word	0x2000009c
 800e2b4:	200049e4 	.word	0x200049e4

0800e2b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	af00      	add	r7, sp, #0
  return uwTick;
 800e2bc:	4b03      	ldr	r3, [pc, #12]	; (800e2cc <HAL_GetTick+0x14>)
 800e2be:	681b      	ldr	r3, [r3, #0]
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop
 800e2cc:	200049e4 	.word	0x200049e4

0800e2d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b085      	sub	sp, #20
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f003 0307 	and.w	r3, r3, #7
 800e2de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e2e0:	4b0c      	ldr	r3, [pc, #48]	; (800e314 <__NVIC_SetPriorityGrouping+0x44>)
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e2e6:	68ba      	ldr	r2, [r7, #8]
 800e2e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e2ec:	4013      	ands	r3, r2
 800e2ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e2f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e2fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e302:	4a04      	ldr	r2, [pc, #16]	; (800e314 <__NVIC_SetPriorityGrouping+0x44>)
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	60d3      	str	r3, [r2, #12]
}
 800e308:	bf00      	nop
 800e30a:	3714      	adds	r7, #20
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr
 800e314:	e000ed00 	.word	0xe000ed00

0800e318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e318:	b480      	push	{r7}
 800e31a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e31c:	4b04      	ldr	r3, [pc, #16]	; (800e330 <__NVIC_GetPriorityGrouping+0x18>)
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	0a1b      	lsrs	r3, r3, #8
 800e322:	f003 0307 	and.w	r3, r3, #7
}
 800e326:	4618      	mov	r0, r3
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr
 800e330:	e000ed00 	.word	0xe000ed00

0800e334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
 800e33a:	4603      	mov	r3, r0
 800e33c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e33e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e342:	2b00      	cmp	r3, #0
 800e344:	db0b      	blt.n	800e35e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e346:	79fb      	ldrb	r3, [r7, #7]
 800e348:	f003 021f 	and.w	r2, r3, #31
 800e34c:	4907      	ldr	r1, [pc, #28]	; (800e36c <__NVIC_EnableIRQ+0x38>)
 800e34e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e352:	095b      	lsrs	r3, r3, #5
 800e354:	2001      	movs	r0, #1
 800e356:	fa00 f202 	lsl.w	r2, r0, r2
 800e35a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800e35e:	bf00      	nop
 800e360:	370c      	adds	r7, #12
 800e362:	46bd      	mov	sp, r7
 800e364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e368:	4770      	bx	lr
 800e36a:	bf00      	nop
 800e36c:	e000e100 	.word	0xe000e100

0800e370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	4603      	mov	r3, r0
 800e378:	6039      	str	r1, [r7, #0]
 800e37a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e37c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e380:	2b00      	cmp	r3, #0
 800e382:	db0a      	blt.n	800e39a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	b2da      	uxtb	r2, r3
 800e388:	490c      	ldr	r1, [pc, #48]	; (800e3bc <__NVIC_SetPriority+0x4c>)
 800e38a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e38e:	0112      	lsls	r2, r2, #4
 800e390:	b2d2      	uxtb	r2, r2
 800e392:	440b      	add	r3, r1
 800e394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e398:	e00a      	b.n	800e3b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	b2da      	uxtb	r2, r3
 800e39e:	4908      	ldr	r1, [pc, #32]	; (800e3c0 <__NVIC_SetPriority+0x50>)
 800e3a0:	79fb      	ldrb	r3, [r7, #7]
 800e3a2:	f003 030f 	and.w	r3, r3, #15
 800e3a6:	3b04      	subs	r3, #4
 800e3a8:	0112      	lsls	r2, r2, #4
 800e3aa:	b2d2      	uxtb	r2, r2
 800e3ac:	440b      	add	r3, r1
 800e3ae:	761a      	strb	r2, [r3, #24]
}
 800e3b0:	bf00      	nop
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr
 800e3bc:	e000e100 	.word	0xe000e100
 800e3c0:	e000ed00 	.word	0xe000ed00

0800e3c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b089      	sub	sp, #36	; 0x24
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f003 0307 	and.w	r3, r3, #7
 800e3d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	f1c3 0307 	rsb	r3, r3, #7
 800e3de:	2b04      	cmp	r3, #4
 800e3e0:	bf28      	it	cs
 800e3e2:	2304      	movcs	r3, #4
 800e3e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	3304      	adds	r3, #4
 800e3ea:	2b06      	cmp	r3, #6
 800e3ec:	d902      	bls.n	800e3f4 <NVIC_EncodePriority+0x30>
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	3b03      	subs	r3, #3
 800e3f2:	e000      	b.n	800e3f6 <NVIC_EncodePriority+0x32>
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e3fc:	69bb      	ldr	r3, [r7, #24]
 800e3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800e402:	43da      	mvns	r2, r3
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	401a      	ands	r2, r3
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e40c:	f04f 31ff 	mov.w	r1, #4294967295
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	fa01 f303 	lsl.w	r3, r1, r3
 800e416:	43d9      	mvns	r1, r3
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e41c:	4313      	orrs	r3, r2
         );
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3724      	adds	r7, #36	; 0x24
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr
	...

0800e42c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800e42c:	b480      	push	{r7}
 800e42e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800e430:	f3bf 8f4f 	dsb	sy
}
 800e434:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e436:	4b06      	ldr	r3, [pc, #24]	; (800e450 <__NVIC_SystemReset+0x24>)
 800e438:	68db      	ldr	r3, [r3, #12]
 800e43a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e43e:	4904      	ldr	r1, [pc, #16]	; (800e450 <__NVIC_SystemReset+0x24>)
 800e440:	4b04      	ldr	r3, [pc, #16]	; (800e454 <__NVIC_SystemReset+0x28>)
 800e442:	4313      	orrs	r3, r2
 800e444:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e446:	f3bf 8f4f 	dsb	sy
}
 800e44a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800e44c:	bf00      	nop
 800e44e:	e7fd      	b.n	800e44c <__NVIC_SystemReset+0x20>
 800e450:	e000ed00 	.word	0xe000ed00
 800e454:	05fa0004 	.word	0x05fa0004

0800e458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f7ff ff35 	bl	800e2d0 <__NVIC_SetPriorityGrouping>
}
 800e466:	bf00      	nop
 800e468:	3708      	adds	r7, #8
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}

0800e46e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b086      	sub	sp, #24
 800e472:	af00      	add	r7, sp, #0
 800e474:	4603      	mov	r3, r0
 800e476:	60b9      	str	r1, [r7, #8]
 800e478:	607a      	str	r2, [r7, #4]
 800e47a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800e47c:	2300      	movs	r3, #0
 800e47e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800e480:	f7ff ff4a 	bl	800e318 <__NVIC_GetPriorityGrouping>
 800e484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	68b9      	ldr	r1, [r7, #8]
 800e48a:	6978      	ldr	r0, [r7, #20]
 800e48c:	f7ff ff9a 	bl	800e3c4 <NVIC_EncodePriority>
 800e490:	4602      	mov	r2, r0
 800e492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e496:	4611      	mov	r1, r2
 800e498:	4618      	mov	r0, r3
 800e49a:	f7ff ff69 	bl	800e370 <__NVIC_SetPriority>
}
 800e49e:	bf00      	nop
 800e4a0:	3718      	adds	r7, #24
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}

0800e4a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e4a6:	b580      	push	{r7, lr}
 800e4a8:	b082      	sub	sp, #8
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e4b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7ff ff3d 	bl	800e334 <__NVIC_EnableIRQ>
}
 800e4ba:	bf00      	nop
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800e4c6:	f7ff ffb1 	bl	800e42c <__NVIC_SystemReset>
	...

0800e4cc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b084      	sub	sp, #16
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d101      	bne.n	800e4de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e08d      	b.n	800e5fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	4b47      	ldr	r3, [pc, #284]	; (800e604 <HAL_DMA_Init+0x138>)
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d80f      	bhi.n	800e50a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	4b45      	ldr	r3, [pc, #276]	; (800e608 <HAL_DMA_Init+0x13c>)
 800e4f2:	4413      	add	r3, r2
 800e4f4:	4a45      	ldr	r2, [pc, #276]	; (800e60c <HAL_DMA_Init+0x140>)
 800e4f6:	fba2 2303 	umull	r2, r3, r2, r3
 800e4fa:	091b      	lsrs	r3, r3, #4
 800e4fc:	009a      	lsls	r2, r3, #2
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	4a42      	ldr	r2, [pc, #264]	; (800e610 <HAL_DMA_Init+0x144>)
 800e506:	641a      	str	r2, [r3, #64]	; 0x40
 800e508:	e00e      	b.n	800e528 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	461a      	mov	r2, r3
 800e510:	4b40      	ldr	r3, [pc, #256]	; (800e614 <HAL_DMA_Init+0x148>)
 800e512:	4413      	add	r3, r2
 800e514:	4a3d      	ldr	r2, [pc, #244]	; (800e60c <HAL_DMA_Init+0x140>)
 800e516:	fba2 2303 	umull	r2, r3, r2, r3
 800e51a:	091b      	lsrs	r3, r3, #4
 800e51c:	009a      	lsls	r2, r3, #2
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4a3c      	ldr	r2, [pc, #240]	; (800e618 <HAL_DMA_Init+0x14c>)
 800e526:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2202      	movs	r2, #2
 800e52c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800e53e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e542:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800e54c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	691b      	ldr	r3, [r3, #16]
 800e552:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	699b      	ldr	r3, [r3, #24]
 800e55e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6a1b      	ldr	r3, [r3, #32]
 800e56a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800e56c:	68fa      	ldr	r2, [r7, #12]
 800e56e:	4313      	orrs	r3, r2
 800e570:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	68fa      	ldr	r2, [r7, #12]
 800e578:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 fa80 	bl	800ea80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	689b      	ldr	r3, [r3, #8]
 800e584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e588:	d102      	bne.n	800e590 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2200      	movs	r2, #0
 800e58e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	685a      	ldr	r2, [r3, #4]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e598:	b2d2      	uxtb	r2, r2
 800e59a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e5a4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d010      	beq.n	800e5d0 <HAL_DMA_Init+0x104>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	2b04      	cmp	r3, #4
 800e5b4:	d80c      	bhi.n	800e5d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f000 faa0 	bl	800eafc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800e5cc:	605a      	str	r2, [r3, #4]
 800e5ce:	e008      	b.n	800e5e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800e5f8:	2300      	movs	r3, #0
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3710      	adds	r7, #16
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	40020407 	.word	0x40020407
 800e608:	bffdfff8 	.word	0xbffdfff8
 800e60c:	cccccccd 	.word	0xcccccccd
 800e610:	40020000 	.word	0x40020000
 800e614:	bffdfbf8 	.word	0xbffdfbf8
 800e618:	40020400 	.word	0x40020400

0800e61c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b086      	sub	sp, #24
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
 800e628:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e62a:	2300      	movs	r3, #0
 800e62c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e634:	2b01      	cmp	r3, #1
 800e636:	d101      	bne.n	800e63c <HAL_DMA_Start_IT+0x20>
 800e638:	2302      	movs	r3, #2
 800e63a:	e066      	b.n	800e70a <HAL_DMA_Start_IT+0xee>
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2201      	movs	r2, #1
 800e640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d155      	bne.n	800e6fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2202      	movs	r2, #2
 800e654:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2200      	movs	r2, #0
 800e65c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	681a      	ldr	r2, [r3, #0]
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f022 0201 	bic.w	r2, r2, #1
 800e66c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	687a      	ldr	r2, [r7, #4]
 800e672:	68b9      	ldr	r1, [r7, #8]
 800e674:	68f8      	ldr	r0, [r7, #12]
 800e676:	f000 f9c4 	bl	800ea02 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d008      	beq.n	800e694 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f042 020e 	orr.w	r2, r2, #14
 800e690:	601a      	str	r2, [r3, #0]
 800e692:	e00f      	b.n	800e6b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	681a      	ldr	r2, [r3, #0]
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f022 0204 	bic.w	r2, r2, #4
 800e6a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	681a      	ldr	r2, [r3, #0]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f042 020a 	orr.w	r2, r2, #10
 800e6b2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d007      	beq.n	800e6d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e6d0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d007      	beq.n	800e6ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e6e8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	f042 0201 	orr.w	r2, r2, #1
 800e6f8:	601a      	str	r2, [r3, #0]
 800e6fa:	e005      	b.n	800e708 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2200      	movs	r2, #0
 800e700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800e704:	2302      	movs	r3, #2
 800e706:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800e708:	7dfb      	ldrb	r3, [r7, #23]
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3718      	adds	r7, #24
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}

0800e712 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e712:	b480      	push	{r7}
 800e714:	b085      	sub	sp, #20
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e71a:	2300      	movs	r3, #0
 800e71c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e724:	b2db      	uxtb	r3, r3
 800e726:	2b02      	cmp	r3, #2
 800e728:	d008      	beq.n	800e73c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2204      	movs	r2, #4
 800e72e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2200      	movs	r2, #0
 800e734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e738:	2301      	movs	r3, #1
 800e73a:	e040      	b.n	800e7be <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f022 020e 	bic.w	r2, r2, #14
 800e74a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e756:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e75a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	681a      	ldr	r2, [r3, #0]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f022 0201 	bic.w	r2, r2, #1
 800e76a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e770:	f003 021c 	and.w	r2, r3, #28
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e778:	2101      	movs	r1, #1
 800e77a:	fa01 f202 	lsl.w	r2, r1, r2
 800e77e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e788:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d00c      	beq.n	800e7ac <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e79c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e7a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800e7aa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800e7bc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3714      	adds	r7, #20
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr

0800e7ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b084      	sub	sp, #16
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	2b02      	cmp	r3, #2
 800e7e0:	d005      	beq.n	800e7ee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2204      	movs	r2, #4
 800e7e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	73fb      	strb	r3, [r7, #15]
 800e7ec:	e047      	b.n	800e87e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f022 020e 	bic.w	r2, r2, #14
 800e7fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f022 0201 	bic.w	r2, r2, #1
 800e80c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e812:	681a      	ldr	r2, [r3, #0]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e81c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e822:	f003 021c 	and.w	r2, r3, #28
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e82a:	2101      	movs	r1, #1
 800e82c:	fa01 f202 	lsl.w	r2, r1, r2
 800e830:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e83a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e840:	2b00      	cmp	r3, #0
 800e842:	d00c      	beq.n	800e85e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e84e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e852:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800e85c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2201      	movs	r2, #1
 800e862:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2200      	movs	r2, #0
 800e86a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e872:	2b00      	cmp	r3, #0
 800e874:	d003      	beq.n	800e87e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	4798      	blx	r3
    }
  }
  return status;
 800e87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e880:	4618      	mov	r0, r3
 800e882:	3710      	adds	r7, #16
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8a4:	f003 031c 	and.w	r3, r3, #28
 800e8a8:	2204      	movs	r2, #4
 800e8aa:	409a      	lsls	r2, r3
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	4013      	ands	r3, r2
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d026      	beq.n	800e902 <HAL_DMA_IRQHandler+0x7a>
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	f003 0304 	and.w	r3, r3, #4
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d021      	beq.n	800e902 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f003 0320 	and.w	r3, r3, #32
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d107      	bne.n	800e8dc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f022 0204 	bic.w	r2, r2, #4
 800e8da:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8e0:	f003 021c 	and.w	r2, r3, #28
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8e8:	2104      	movs	r1, #4
 800e8ea:	fa01 f202 	lsl.w	r2, r1, r2
 800e8ee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d071      	beq.n	800e9dc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800e900:	e06c      	b.n	800e9dc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e906:	f003 031c 	and.w	r3, r3, #28
 800e90a:	2202      	movs	r2, #2
 800e90c:	409a      	lsls	r2, r3
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	4013      	ands	r3, r2
 800e912:	2b00      	cmp	r3, #0
 800e914:	d02e      	beq.n	800e974 <HAL_DMA_IRQHandler+0xec>
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	f003 0302 	and.w	r3, r3, #2
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d029      	beq.n	800e974 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f003 0320 	and.w	r3, r3, #32
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d10b      	bne.n	800e946 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	681a      	ldr	r2, [r3, #0]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f022 020a 	bic.w	r2, r2, #10
 800e93c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2201      	movs	r2, #1
 800e942:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e94a:	f003 021c 	and.w	r2, r3, #28
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e952:	2102      	movs	r1, #2
 800e954:	fa01 f202 	lsl.w	r2, r1, r2
 800e958:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e966:	2b00      	cmp	r3, #0
 800e968:	d038      	beq.n	800e9dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800e972:	e033      	b.n	800e9dc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e978:	f003 031c 	and.w	r3, r3, #28
 800e97c:	2208      	movs	r2, #8
 800e97e:	409a      	lsls	r2, r3
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	4013      	ands	r3, r2
 800e984:	2b00      	cmp	r3, #0
 800e986:	d02a      	beq.n	800e9de <HAL_DMA_IRQHandler+0x156>
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	f003 0308 	and.w	r3, r3, #8
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d025      	beq.n	800e9de <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f022 020e 	bic.w	r2, r2, #14
 800e9a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9a6:	f003 021c 	and.w	r2, r3, #28
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ae:	2101      	movs	r1, #1
 800e9b0:	fa01 f202 	lsl.w	r2, r1, r2
 800e9b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2201      	movs	r2, #1
 800e9c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d004      	beq.n	800e9de <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800e9dc:	bf00      	nop
 800e9de:	bf00      	nop
}
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800e9e6:	b480      	push	{r7}
 800e9e8:	b083      	sub	sp, #12
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e9f4:	b2db      	uxtb	r3, r3
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	370c      	adds	r7, #12
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr

0800ea02 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ea02:	b480      	push	{r7}
 800ea04:	b085      	sub	sp, #20
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	60f8      	str	r0, [r7, #12]
 800ea0a:	60b9      	str	r1, [r7, #8]
 800ea0c:	607a      	str	r2, [r7, #4]
 800ea0e:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea14:	68fa      	ldr	r2, [r7, #12]
 800ea16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ea18:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d004      	beq.n	800ea2c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea26:	68fa      	ldr	r2, [r7, #12]
 800ea28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ea2a:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea30:	f003 021c 	and.w	r2, r3, #28
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea38:	2101      	movs	r1, #1
 800ea3a:	fa01 f202 	lsl.w	r2, r1, r2
 800ea3e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	683a      	ldr	r2, [r7, #0]
 800ea46:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	689b      	ldr	r3, [r3, #8]
 800ea4c:	2b10      	cmp	r3, #16
 800ea4e:	d108      	bne.n	800ea62 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	68ba      	ldr	r2, [r7, #8]
 800ea5e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ea60:	e007      	b.n	800ea72 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	68ba      	ldr	r2, [r7, #8]
 800ea68:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	60da      	str	r2, [r3, #12]
}
 800ea72:	bf00      	nop
 800ea74:	3714      	adds	r7, #20
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr
	...

0800ea80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b085      	sub	sp, #20
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	4b17      	ldr	r3, [pc, #92]	; (800eaec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d80a      	bhi.n	800eaaa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea98:	089b      	lsrs	r3, r3, #2
 800ea9a:	009b      	lsls	r3, r3, #2
 800ea9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eaa0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	6493      	str	r3, [r2, #72]	; 0x48
 800eaa8:	e007      	b.n	800eaba <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaae:	089b      	lsrs	r3, r3, #2
 800eab0:	009a      	lsls	r2, r3, #2
 800eab2:	4b0f      	ldr	r3, [pc, #60]	; (800eaf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800eab4:	4413      	add	r3, r2
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	3b08      	subs	r3, #8
 800eac2:	4a0c      	ldr	r2, [pc, #48]	; (800eaf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800eac4:	fba2 2303 	umull	r2, r3, r2, r3
 800eac8:	091b      	lsrs	r3, r3, #4
 800eaca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	4a0a      	ldr	r2, [pc, #40]	; (800eaf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800ead0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	f003 031f 	and.w	r3, r3, #31
 800ead8:	2201      	movs	r2, #1
 800eada:	409a      	lsls	r2, r3
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	651a      	str	r2, [r3, #80]	; 0x50
}
 800eae0:	bf00      	nop
 800eae2:	3714      	adds	r7, #20
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr
 800eaec:	40020407 	.word	0x40020407
 800eaf0:	4002081c 	.word	0x4002081c
 800eaf4:	cccccccd 	.word	0xcccccccd
 800eaf8:	40020880 	.word	0x40020880

0800eafc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b085      	sub	sp, #20
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800eb0c:	68fa      	ldr	r2, [r7, #12]
 800eb0e:	4b0b      	ldr	r3, [pc, #44]	; (800eb3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800eb10:	4413      	add	r3, r2
 800eb12:	009b      	lsls	r3, r3, #2
 800eb14:	461a      	mov	r2, r3
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	4a08      	ldr	r2, [pc, #32]	; (800eb40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800eb1e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	3b01      	subs	r3, #1
 800eb24:	f003 0303 	and.w	r3, r3, #3
 800eb28:	2201      	movs	r2, #1
 800eb2a:	409a      	lsls	r2, r3
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800eb30:	bf00      	nop
 800eb32:	3714      	adds	r7, #20
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr
 800eb3c:	1000823f 	.word	0x1000823f
 800eb40:	40020940 	.word	0x40020940

0800eb44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b087      	sub	sp, #28
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800eb52:	e166      	b.n	800ee22 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	2101      	movs	r1, #1
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	fa01 f303 	lsl.w	r3, r1, r3
 800eb60:	4013      	ands	r3, r2
 800eb62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	f000 8158 	beq.w	800ee1c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	f003 0303 	and.w	r3, r3, #3
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d005      	beq.n	800eb84 <HAL_GPIO_Init+0x40>
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	f003 0303 	and.w	r3, r3, #3
 800eb80:	2b02      	cmp	r3, #2
 800eb82:	d130      	bne.n	800ebe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	005b      	lsls	r3, r3, #1
 800eb8e:	2203      	movs	r2, #3
 800eb90:	fa02 f303 	lsl.w	r3, r2, r3
 800eb94:	43db      	mvns	r3, r3
 800eb96:	693a      	ldr	r2, [r7, #16]
 800eb98:	4013      	ands	r3, r2
 800eb9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	68da      	ldr	r2, [r3, #12]
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	005b      	lsls	r3, r3, #1
 800eba4:	fa02 f303 	lsl.w	r3, r2, r3
 800eba8:	693a      	ldr	r2, [r7, #16]
 800ebaa:	4313      	orrs	r3, r2
 800ebac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	693a      	ldr	r2, [r7, #16]
 800ebb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ebba:	2201      	movs	r2, #1
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	fa02 f303 	lsl.w	r3, r2, r3
 800ebc2:	43db      	mvns	r3, r3
 800ebc4:	693a      	ldr	r2, [r7, #16]
 800ebc6:	4013      	ands	r3, r2
 800ebc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	091b      	lsrs	r3, r3, #4
 800ebd0:	f003 0201 	and.w	r2, r3, #1
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	fa02 f303 	lsl.w	r3, r2, r3
 800ebda:	693a      	ldr	r2, [r7, #16]
 800ebdc:	4313      	orrs	r3, r2
 800ebde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	693a      	ldr	r2, [r7, #16]
 800ebe4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	f003 0303 	and.w	r3, r3, #3
 800ebee:	2b03      	cmp	r3, #3
 800ebf0:	d017      	beq.n	800ec22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	005b      	lsls	r3, r3, #1
 800ebfc:	2203      	movs	r2, #3
 800ebfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ec02:	43db      	mvns	r3, r3
 800ec04:	693a      	ldr	r2, [r7, #16]
 800ec06:	4013      	ands	r3, r2
 800ec08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	689a      	ldr	r2, [r3, #8]
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	005b      	lsls	r3, r3, #1
 800ec12:	fa02 f303 	lsl.w	r3, r2, r3
 800ec16:	693a      	ldr	r2, [r7, #16]
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	693a      	ldr	r2, [r7, #16]
 800ec20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	f003 0303 	and.w	r3, r3, #3
 800ec2a:	2b02      	cmp	r3, #2
 800ec2c:	d123      	bne.n	800ec76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	08da      	lsrs	r2, r3, #3
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	3208      	adds	r2, #8
 800ec36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	f003 0307 	and.w	r3, r3, #7
 800ec42:	009b      	lsls	r3, r3, #2
 800ec44:	220f      	movs	r2, #15
 800ec46:	fa02 f303 	lsl.w	r3, r2, r3
 800ec4a:	43db      	mvns	r3, r3
 800ec4c:	693a      	ldr	r2, [r7, #16]
 800ec4e:	4013      	ands	r3, r2
 800ec50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	691a      	ldr	r2, [r3, #16]
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	f003 0307 	and.w	r3, r3, #7
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ec62:	693a      	ldr	r2, [r7, #16]
 800ec64:	4313      	orrs	r3, r2
 800ec66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	08da      	lsrs	r2, r3, #3
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	3208      	adds	r2, #8
 800ec70:	6939      	ldr	r1, [r7, #16]
 800ec72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	005b      	lsls	r3, r3, #1
 800ec80:	2203      	movs	r2, #3
 800ec82:	fa02 f303 	lsl.w	r3, r2, r3
 800ec86:	43db      	mvns	r3, r3
 800ec88:	693a      	ldr	r2, [r7, #16]
 800ec8a:	4013      	ands	r3, r2
 800ec8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	f003 0203 	and.w	r2, r3, #3
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	005b      	lsls	r3, r3, #1
 800ec9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ec9e:	693a      	ldr	r2, [r7, #16]
 800eca0:	4313      	orrs	r3, r2
 800eca2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	693a      	ldr	r2, [r7, #16]
 800eca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	f000 80b2 	beq.w	800ee1c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ecb8:	4b61      	ldr	r3, [pc, #388]	; (800ee40 <HAL_GPIO_Init+0x2fc>)
 800ecba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ecbc:	4a60      	ldr	r2, [pc, #384]	; (800ee40 <HAL_GPIO_Init+0x2fc>)
 800ecbe:	f043 0301 	orr.w	r3, r3, #1
 800ecc2:	6613      	str	r3, [r2, #96]	; 0x60
 800ecc4:	4b5e      	ldr	r3, [pc, #376]	; (800ee40 <HAL_GPIO_Init+0x2fc>)
 800ecc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ecc8:	f003 0301 	and.w	r3, r3, #1
 800eccc:	60bb      	str	r3, [r7, #8]
 800ecce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ecd0:	4a5c      	ldr	r2, [pc, #368]	; (800ee44 <HAL_GPIO_Init+0x300>)
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	089b      	lsrs	r3, r3, #2
 800ecd6:	3302      	adds	r3, #2
 800ecd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	f003 0303 	and.w	r3, r3, #3
 800ece4:	009b      	lsls	r3, r3, #2
 800ece6:	220f      	movs	r2, #15
 800ece8:	fa02 f303 	lsl.w	r3, r2, r3
 800ecec:	43db      	mvns	r3, r3
 800ecee:	693a      	ldr	r2, [r7, #16]
 800ecf0:	4013      	ands	r3, r2
 800ecf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ecfa:	d02b      	beq.n	800ed54 <HAL_GPIO_Init+0x210>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	4a52      	ldr	r2, [pc, #328]	; (800ee48 <HAL_GPIO_Init+0x304>)
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d025      	beq.n	800ed50 <HAL_GPIO_Init+0x20c>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	4a51      	ldr	r2, [pc, #324]	; (800ee4c <HAL_GPIO_Init+0x308>)
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	d01f      	beq.n	800ed4c <HAL_GPIO_Init+0x208>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	4a50      	ldr	r2, [pc, #320]	; (800ee50 <HAL_GPIO_Init+0x30c>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d019      	beq.n	800ed48 <HAL_GPIO_Init+0x204>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	4a4f      	ldr	r2, [pc, #316]	; (800ee54 <HAL_GPIO_Init+0x310>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d013      	beq.n	800ed44 <HAL_GPIO_Init+0x200>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	4a4e      	ldr	r2, [pc, #312]	; (800ee58 <HAL_GPIO_Init+0x314>)
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d00d      	beq.n	800ed40 <HAL_GPIO_Init+0x1fc>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4a4d      	ldr	r2, [pc, #308]	; (800ee5c <HAL_GPIO_Init+0x318>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d007      	beq.n	800ed3c <HAL_GPIO_Init+0x1f8>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	4a4c      	ldr	r2, [pc, #304]	; (800ee60 <HAL_GPIO_Init+0x31c>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d101      	bne.n	800ed38 <HAL_GPIO_Init+0x1f4>
 800ed34:	2307      	movs	r3, #7
 800ed36:	e00e      	b.n	800ed56 <HAL_GPIO_Init+0x212>
 800ed38:	2308      	movs	r3, #8
 800ed3a:	e00c      	b.n	800ed56 <HAL_GPIO_Init+0x212>
 800ed3c:	2306      	movs	r3, #6
 800ed3e:	e00a      	b.n	800ed56 <HAL_GPIO_Init+0x212>
 800ed40:	2305      	movs	r3, #5
 800ed42:	e008      	b.n	800ed56 <HAL_GPIO_Init+0x212>
 800ed44:	2304      	movs	r3, #4
 800ed46:	e006      	b.n	800ed56 <HAL_GPIO_Init+0x212>
 800ed48:	2303      	movs	r3, #3
 800ed4a:	e004      	b.n	800ed56 <HAL_GPIO_Init+0x212>
 800ed4c:	2302      	movs	r3, #2
 800ed4e:	e002      	b.n	800ed56 <HAL_GPIO_Init+0x212>
 800ed50:	2301      	movs	r3, #1
 800ed52:	e000      	b.n	800ed56 <HAL_GPIO_Init+0x212>
 800ed54:	2300      	movs	r3, #0
 800ed56:	697a      	ldr	r2, [r7, #20]
 800ed58:	f002 0203 	and.w	r2, r2, #3
 800ed5c:	0092      	lsls	r2, r2, #2
 800ed5e:	4093      	lsls	r3, r2
 800ed60:	693a      	ldr	r2, [r7, #16]
 800ed62:	4313      	orrs	r3, r2
 800ed64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ed66:	4937      	ldr	r1, [pc, #220]	; (800ee44 <HAL_GPIO_Init+0x300>)
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	089b      	lsrs	r3, r3, #2
 800ed6c:	3302      	adds	r3, #2
 800ed6e:	693a      	ldr	r2, [r7, #16]
 800ed70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ed74:	4b3b      	ldr	r3, [pc, #236]	; (800ee64 <HAL_GPIO_Init+0x320>)
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	43db      	mvns	r3, r3
 800ed7e:	693a      	ldr	r2, [r7, #16]
 800ed80:	4013      	ands	r3, r2
 800ed82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d003      	beq.n	800ed98 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800ed90:	693a      	ldr	r2, [r7, #16]
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	4313      	orrs	r3, r2
 800ed96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ed98:	4a32      	ldr	r2, [pc, #200]	; (800ee64 <HAL_GPIO_Init+0x320>)
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ed9e:	4b31      	ldr	r3, [pc, #196]	; (800ee64 <HAL_GPIO_Init+0x320>)
 800eda0:	68db      	ldr	r3, [r3, #12]
 800eda2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	43db      	mvns	r3, r3
 800eda8:	693a      	ldr	r2, [r7, #16]
 800edaa:	4013      	ands	r3, r2
 800edac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d003      	beq.n	800edc2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800edba:	693a      	ldr	r2, [r7, #16]
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	4313      	orrs	r3, r2
 800edc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800edc2:	4a28      	ldr	r2, [pc, #160]	; (800ee64 <HAL_GPIO_Init+0x320>)
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800edc8:	4b26      	ldr	r3, [pc, #152]	; (800ee64 <HAL_GPIO_Init+0x320>)
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	43db      	mvns	r3, r3
 800edd2:	693a      	ldr	r2, [r7, #16]
 800edd4:	4013      	ands	r3, r2
 800edd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d003      	beq.n	800edec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800ede4:	693a      	ldr	r2, [r7, #16]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	4313      	orrs	r3, r2
 800edea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800edec:	4a1d      	ldr	r2, [pc, #116]	; (800ee64 <HAL_GPIO_Init+0x320>)
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800edf2:	4b1c      	ldr	r3, [pc, #112]	; (800ee64 <HAL_GPIO_Init+0x320>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	43db      	mvns	r3, r3
 800edfc:	693a      	ldr	r2, [r7, #16]
 800edfe:	4013      	ands	r3, r2
 800ee00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d003      	beq.n	800ee16 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800ee0e:	693a      	ldr	r2, [r7, #16]
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	4313      	orrs	r3, r2
 800ee14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ee16:	4a13      	ldr	r2, [pc, #76]	; (800ee64 <HAL_GPIO_Init+0x320>)
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	3301      	adds	r3, #1
 800ee20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	fa22 f303 	lsr.w	r3, r2, r3
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f47f ae91 	bne.w	800eb54 <HAL_GPIO_Init+0x10>
  }
}
 800ee32:	bf00      	nop
 800ee34:	bf00      	nop
 800ee36:	371c      	adds	r7, #28
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr
 800ee40:	40021000 	.word	0x40021000
 800ee44:	40010000 	.word	0x40010000
 800ee48:	48000400 	.word	0x48000400
 800ee4c:	48000800 	.word	0x48000800
 800ee50:	48000c00 	.word	0x48000c00
 800ee54:	48001000 	.word	0x48001000
 800ee58:	48001400 	.word	0x48001400
 800ee5c:	48001800 	.word	0x48001800
 800ee60:	48001c00 	.word	0x48001c00
 800ee64:	40010400 	.word	0x40010400

0800ee68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b085      	sub	sp, #20
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	460b      	mov	r3, r1
 800ee72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	691a      	ldr	r2, [r3, #16]
 800ee78:	887b      	ldrh	r3, [r7, #2]
 800ee7a:	4013      	ands	r3, r2
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d002      	beq.n	800ee86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ee80:	2301      	movs	r3, #1
 800ee82:	73fb      	strb	r3, [r7, #15]
 800ee84:	e001      	b.n	800ee8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ee86:	2300      	movs	r3, #0
 800ee88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ee8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3714      	adds	r7, #20
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b083      	sub	sp, #12
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	460b      	mov	r3, r1
 800eea2:	807b      	strh	r3, [r7, #2]
 800eea4:	4613      	mov	r3, r2
 800eea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800eea8:	787b      	ldrb	r3, [r7, #1]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d003      	beq.n	800eeb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800eeae:	887a      	ldrh	r2, [r7, #2]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800eeb4:	e002      	b.n	800eebc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800eeb6:	887a      	ldrh	r2, [r7, #2]
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	629a      	str	r2, [r3, #40]	; 0x28
}
 800eebc:	bf00      	nop
 800eebe:	370c      	adds	r7, #12
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr

0800eec8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800eec8:	b480      	push	{r7}
 800eeca:	b085      	sub	sp, #20
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	460b      	mov	r3, r1
 800eed2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	695b      	ldr	r3, [r3, #20]
 800eed8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800eeda:	887a      	ldrh	r2, [r7, #2]
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	4013      	ands	r3, r2
 800eee0:	041a      	lsls	r2, r3, #16
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	43d9      	mvns	r1, r3
 800eee6:	887b      	ldrh	r3, [r7, #2]
 800eee8:	400b      	ands	r3, r1
 800eeea:	431a      	orrs	r2, r3
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	619a      	str	r2, [r3, #24]
}
 800eef0:	bf00      	nop
 800eef2:	3714      	adds	r7, #20
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr

0800eefc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d101      	bne.n	800ef0e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	e041      	b.n	800ef92 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800ef16:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	f245 5255 	movw	r2, #21845	; 0x5555
 800ef20:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	687a      	ldr	r2, [r7, #4]
 800ef28:	6852      	ldr	r2, [r2, #4]
 800ef2a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	6892      	ldr	r2, [r2, #8]
 800ef34:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800ef36:	f7ff f9bf 	bl	800e2b8 <HAL_GetTick>
 800ef3a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ef3c:	e00f      	b.n	800ef5e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800ef3e:	f7ff f9bb 	bl	800e2b8 <HAL_GetTick>
 800ef42:	4602      	mov	r2, r0
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	1ad3      	subs	r3, r2, r3
 800ef48:	2b31      	cmp	r3, #49	; 0x31
 800ef4a:	d908      	bls.n	800ef5e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	f003 0307 	and.w	r3, r3, #7
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d001      	beq.n	800ef5e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800ef5a:	2303      	movs	r3, #3
 800ef5c:	e019      	b.n	800ef92 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	f003 0307 	and.w	r3, r3, #7
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d1e8      	bne.n	800ef3e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	691a      	ldr	r2, [r3, #16]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d005      	beq.n	800ef86 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	68d2      	ldr	r2, [r2, #12]
 800ef82:	611a      	str	r2, [r3, #16]
 800ef84:	e004      	b.n	800ef90 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ef8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3710      	adds	r7, #16
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}

0800ef9a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800ef9a:	b480      	push	{r7}
 800ef9c:	b083      	sub	sp, #12
 800ef9e:	af00      	add	r7, sp, #0
 800efa0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800efaa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800efac:	2300      	movs	r3, #0
}
 800efae:	4618      	mov	r0, r3
 800efb0:	370c      	adds	r7, #12
 800efb2:	46bd      	mov	sp, r7
 800efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb8:	4770      	bx	lr
	...

0800efbc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800efbc:	b480      	push	{r7}
 800efbe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800efc0:	4b05      	ldr	r3, [pc, #20]	; (800efd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4a04      	ldr	r2, [pc, #16]	; (800efd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800efc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800efca:	6013      	str	r3, [r2, #0]
}
 800efcc:	bf00      	nop
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr
 800efd6:	bf00      	nop
 800efd8:	40007000 	.word	0x40007000

0800efdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800efdc:	b480      	push	{r7}
 800efde:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800efe0:	4b0d      	ldr	r3, [pc, #52]	; (800f018 <HAL_PWREx_GetVoltageRange+0x3c>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800efe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efec:	d102      	bne.n	800eff4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800efee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eff2:	e00b      	b.n	800f00c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800eff4:	4b08      	ldr	r3, [pc, #32]	; (800f018 <HAL_PWREx_GetVoltageRange+0x3c>)
 800eff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800effa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800effe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f002:	d102      	bne.n	800f00a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800f004:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f008:	e000      	b.n	800f00c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800f00a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	46bd      	mov	sp, r7
 800f010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f014:	4770      	bx	lr
 800f016:	bf00      	nop
 800f018:	40007000 	.word	0x40007000

0800f01c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b085      	sub	sp, #20
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d141      	bne.n	800f0ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800f02a:	4b4b      	ldr	r3, [pc, #300]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f036:	d131      	bne.n	800f09c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800f038:	4b47      	ldr	r3, [pc, #284]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f03e:	4a46      	ldr	r2, [pc, #280]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f044:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800f048:	4b43      	ldr	r3, [pc, #268]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f050:	4a41      	ldr	r2, [pc, #260]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f056:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800f058:	4b40      	ldr	r3, [pc, #256]	; (800f15c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2232      	movs	r2, #50	; 0x32
 800f05e:	fb02 f303 	mul.w	r3, r2, r3
 800f062:	4a3f      	ldr	r2, [pc, #252]	; (800f160 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800f064:	fba2 2303 	umull	r2, r3, r2, r3
 800f068:	0c9b      	lsrs	r3, r3, #18
 800f06a:	3301      	adds	r3, #1
 800f06c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f06e:	e002      	b.n	800f076 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	3b01      	subs	r3, #1
 800f074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f076:	4b38      	ldr	r3, [pc, #224]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f078:	695b      	ldr	r3, [r3, #20]
 800f07a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f07e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f082:	d102      	bne.n	800f08a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d1f2      	bne.n	800f070 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800f08a:	4b33      	ldr	r3, [pc, #204]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f08c:	695b      	ldr	r3, [r3, #20]
 800f08e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f096:	d158      	bne.n	800f14a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800f098:	2303      	movs	r3, #3
 800f09a:	e057      	b.n	800f14c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800f09c:	4b2e      	ldr	r3, [pc, #184]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f09e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0a2:	4a2d      	ldr	r2, [pc, #180]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f0a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800f0ac:	e04d      	b.n	800f14a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0b4:	d141      	bne.n	800f13a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800f0b6:	4b28      	ldr	r3, [pc, #160]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f0be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f0c2:	d131      	bne.n	800f128 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800f0c4:	4b24      	ldr	r3, [pc, #144]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0ca:	4a23      	ldr	r2, [pc, #140]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f0cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f0d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800f0d4:	4b20      	ldr	r3, [pc, #128]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f0dc:	4a1e      	ldr	r2, [pc, #120]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f0de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f0e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800f0e4:	4b1d      	ldr	r3, [pc, #116]	; (800f15c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2232      	movs	r2, #50	; 0x32
 800f0ea:	fb02 f303 	mul.w	r3, r2, r3
 800f0ee:	4a1c      	ldr	r2, [pc, #112]	; (800f160 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800f0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800f0f4:	0c9b      	lsrs	r3, r3, #18
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f0fa:	e002      	b.n	800f102 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	3b01      	subs	r3, #1
 800f100:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f102:	4b15      	ldr	r3, [pc, #84]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f104:	695b      	ldr	r3, [r3, #20]
 800f106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f10a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f10e:	d102      	bne.n	800f116 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d1f2      	bne.n	800f0fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800f116:	4b10      	ldr	r3, [pc, #64]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f118:	695b      	ldr	r3, [r3, #20]
 800f11a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f11e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f122:	d112      	bne.n	800f14a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800f124:	2303      	movs	r3, #3
 800f126:	e011      	b.n	800f14c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800f128:	4b0b      	ldr	r3, [pc, #44]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f12e:	4a0a      	ldr	r2, [pc, #40]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f134:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800f138:	e007      	b.n	800f14a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800f13a:	4b07      	ldr	r3, [pc, #28]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f142:	4a05      	ldr	r2, [pc, #20]	; (800f158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f144:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f148:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800f14a:	2300      	movs	r3, #0
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3714      	adds	r7, #20
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr
 800f158:	40007000 	.word	0x40007000
 800f15c:	20000094 	.word	0x20000094
 800f160:	431bde83 	.word	0x431bde83

0800f164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b08a      	sub	sp, #40	; 0x28
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d102      	bne.n	800f178 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f172:	2301      	movs	r3, #1
 800f174:	f000 bc68 	b.w	800fa48 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f178:	4b97      	ldr	r3, [pc, #604]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f17a:	689b      	ldr	r3, [r3, #8]
 800f17c:	f003 030c 	and.w	r3, r3, #12
 800f180:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f182:	4b95      	ldr	r3, [pc, #596]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f184:	68db      	ldr	r3, [r3, #12]
 800f186:	f003 0303 	and.w	r3, r3, #3
 800f18a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f003 0310 	and.w	r3, r3, #16
 800f194:	2b00      	cmp	r3, #0
 800f196:	f000 80e6 	beq.w	800f366 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f19a:	6a3b      	ldr	r3, [r7, #32]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d007      	beq.n	800f1b0 <HAL_RCC_OscConfig+0x4c>
 800f1a0:	6a3b      	ldr	r3, [r7, #32]
 800f1a2:	2b0c      	cmp	r3, #12
 800f1a4:	f040 808d 	bne.w	800f2c2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f1a8:	69fb      	ldr	r3, [r7, #28]
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	f040 8089 	bne.w	800f2c2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f1b0:	4b89      	ldr	r3, [pc, #548]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f003 0302 	and.w	r3, r3, #2
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d006      	beq.n	800f1ca <HAL_RCC_OscConfig+0x66>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	69db      	ldr	r3, [r3, #28]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d102      	bne.n	800f1ca <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	f000 bc3f 	b.w	800fa48 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1ce:	4b82      	ldr	r3, [pc, #520]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f003 0308 	and.w	r3, r3, #8
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d004      	beq.n	800f1e4 <HAL_RCC_OscConfig+0x80>
 800f1da:	4b7f      	ldr	r3, [pc, #508]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1e2:	e005      	b.n	800f1f0 <HAL_RCC_OscConfig+0x8c>
 800f1e4:	4b7c      	ldr	r3, [pc, #496]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f1e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f1ea:	091b      	lsrs	r3, r3, #4
 800f1ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1f0:	4293      	cmp	r3, r2
 800f1f2:	d224      	bcs.n	800f23e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f000 fe5f 	bl	800febc <RCC_SetFlashLatencyFromMSIRange>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	d002      	beq.n	800f20a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800f204:	2301      	movs	r3, #1
 800f206:	f000 bc1f 	b.w	800fa48 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f20a:	4b73      	ldr	r3, [pc, #460]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	4a72      	ldr	r2, [pc, #456]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f210:	f043 0308 	orr.w	r3, r3, #8
 800f214:	6013      	str	r3, [r2, #0]
 800f216:	4b70      	ldr	r3, [pc, #448]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f222:	496d      	ldr	r1, [pc, #436]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f224:	4313      	orrs	r3, r2
 800f226:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f228:	4b6b      	ldr	r3, [pc, #428]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6a1b      	ldr	r3, [r3, #32]
 800f234:	021b      	lsls	r3, r3, #8
 800f236:	4968      	ldr	r1, [pc, #416]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f238:	4313      	orrs	r3, r2
 800f23a:	604b      	str	r3, [r1, #4]
 800f23c:	e025      	b.n	800f28a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f23e:	4b66      	ldr	r3, [pc, #408]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	4a65      	ldr	r2, [pc, #404]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f244:	f043 0308 	orr.w	r3, r3, #8
 800f248:	6013      	str	r3, [r2, #0]
 800f24a:	4b63      	ldr	r3, [pc, #396]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f256:	4960      	ldr	r1, [pc, #384]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f258:	4313      	orrs	r3, r2
 800f25a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f25c:	4b5e      	ldr	r3, [pc, #376]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6a1b      	ldr	r3, [r3, #32]
 800f268:	021b      	lsls	r3, r3, #8
 800f26a:	495b      	ldr	r1, [pc, #364]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f26c:	4313      	orrs	r3, r2
 800f26e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f270:	6a3b      	ldr	r3, [r7, #32]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d109      	bne.n	800f28a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27a:	4618      	mov	r0, r3
 800f27c:	f000 fe1e 	bl	800febc <RCC_SetFlashLatencyFromMSIRange>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d001      	beq.n	800f28a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800f286:	2301      	movs	r3, #1
 800f288:	e3de      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f28a:	f000 fd21 	bl	800fcd0 <HAL_RCC_GetSysClockFreq>
 800f28e:	4602      	mov	r2, r0
 800f290:	4b51      	ldr	r3, [pc, #324]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f292:	689b      	ldr	r3, [r3, #8]
 800f294:	091b      	lsrs	r3, r3, #4
 800f296:	f003 030f 	and.w	r3, r3, #15
 800f29a:	4950      	ldr	r1, [pc, #320]	; (800f3dc <HAL_RCC_OscConfig+0x278>)
 800f29c:	5ccb      	ldrb	r3, [r1, r3]
 800f29e:	f003 031f 	and.w	r3, r3, #31
 800f2a2:	fa22 f303 	lsr.w	r3, r2, r3
 800f2a6:	4a4e      	ldr	r2, [pc, #312]	; (800f3e0 <HAL_RCC_OscConfig+0x27c>)
 800f2a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800f2aa:	4b4e      	ldr	r3, [pc, #312]	; (800f3e4 <HAL_RCC_OscConfig+0x280>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fe fa3c 	bl	800d72c <HAL_InitTick>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800f2b8:	7dfb      	ldrb	r3, [r7, #23]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d052      	beq.n	800f364 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800f2be:	7dfb      	ldrb	r3, [r7, #23]
 800f2c0:	e3c2      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	69db      	ldr	r3, [r3, #28]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d032      	beq.n	800f330 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f2ca:	4b43      	ldr	r3, [pc, #268]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	4a42      	ldr	r2, [pc, #264]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f2d0:	f043 0301 	orr.w	r3, r3, #1
 800f2d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f2d6:	f7fe ffef 	bl	800e2b8 <HAL_GetTick>
 800f2da:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f2dc:	e008      	b.n	800f2f0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f2de:	f7fe ffeb 	bl	800e2b8 <HAL_GetTick>
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	69bb      	ldr	r3, [r7, #24]
 800f2e6:	1ad3      	subs	r3, r2, r3
 800f2e8:	2b02      	cmp	r3, #2
 800f2ea:	d901      	bls.n	800f2f0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800f2ec:	2303      	movs	r3, #3
 800f2ee:	e3ab      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f2f0:	4b39      	ldr	r3, [pc, #228]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f003 0302 	and.w	r3, r3, #2
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d0f0      	beq.n	800f2de <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f2fc:	4b36      	ldr	r3, [pc, #216]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4a35      	ldr	r2, [pc, #212]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f302:	f043 0308 	orr.w	r3, r3, #8
 800f306:	6013      	str	r3, [r2, #0]
 800f308:	4b33      	ldr	r3, [pc, #204]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f314:	4930      	ldr	r1, [pc, #192]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f316:	4313      	orrs	r3, r2
 800f318:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f31a:	4b2f      	ldr	r3, [pc, #188]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6a1b      	ldr	r3, [r3, #32]
 800f326:	021b      	lsls	r3, r3, #8
 800f328:	492b      	ldr	r1, [pc, #172]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f32a:	4313      	orrs	r3, r2
 800f32c:	604b      	str	r3, [r1, #4]
 800f32e:	e01a      	b.n	800f366 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f330:	4b29      	ldr	r3, [pc, #164]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	4a28      	ldr	r2, [pc, #160]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f336:	f023 0301 	bic.w	r3, r3, #1
 800f33a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f33c:	f7fe ffbc 	bl	800e2b8 <HAL_GetTick>
 800f340:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f342:	e008      	b.n	800f356 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f344:	f7fe ffb8 	bl	800e2b8 <HAL_GetTick>
 800f348:	4602      	mov	r2, r0
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	1ad3      	subs	r3, r2, r3
 800f34e:	2b02      	cmp	r3, #2
 800f350:	d901      	bls.n	800f356 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800f352:	2303      	movs	r3, #3
 800f354:	e378      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f356:	4b20      	ldr	r3, [pc, #128]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f003 0302 	and.w	r3, r3, #2
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d1f0      	bne.n	800f344 <HAL_RCC_OscConfig+0x1e0>
 800f362:	e000      	b.n	800f366 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f364:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f003 0301 	and.w	r3, r3, #1
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d073      	beq.n	800f45a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800f372:	6a3b      	ldr	r3, [r7, #32]
 800f374:	2b08      	cmp	r3, #8
 800f376:	d005      	beq.n	800f384 <HAL_RCC_OscConfig+0x220>
 800f378:	6a3b      	ldr	r3, [r7, #32]
 800f37a:	2b0c      	cmp	r3, #12
 800f37c:	d10e      	bne.n	800f39c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	2b03      	cmp	r3, #3
 800f382:	d10b      	bne.n	800f39c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f384:	4b14      	ldr	r3, [pc, #80]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d063      	beq.n	800f458 <HAL_RCC_OscConfig+0x2f4>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d15f      	bne.n	800f458 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800f398:	2301      	movs	r3, #1
 800f39a:	e355      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3a4:	d106      	bne.n	800f3b4 <HAL_RCC_OscConfig+0x250>
 800f3a6:	4b0c      	ldr	r3, [pc, #48]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	4a0b      	ldr	r2, [pc, #44]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f3ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f3b0:	6013      	str	r3, [r2, #0]
 800f3b2:	e025      	b.n	800f400 <HAL_RCC_OscConfig+0x29c>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f3bc:	d114      	bne.n	800f3e8 <HAL_RCC_OscConfig+0x284>
 800f3be:	4b06      	ldr	r3, [pc, #24]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	4a05      	ldr	r2, [pc, #20]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f3c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f3c8:	6013      	str	r3, [r2, #0]
 800f3ca:	4b03      	ldr	r3, [pc, #12]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	4a02      	ldr	r2, [pc, #8]	; (800f3d8 <HAL_RCC_OscConfig+0x274>)
 800f3d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f3d4:	6013      	str	r3, [r2, #0]
 800f3d6:	e013      	b.n	800f400 <HAL_RCC_OscConfig+0x29c>
 800f3d8:	40021000 	.word	0x40021000
 800f3dc:	080253e0 	.word	0x080253e0
 800f3e0:	20000094 	.word	0x20000094
 800f3e4:	20000098 	.word	0x20000098
 800f3e8:	4b8f      	ldr	r3, [pc, #572]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	4a8e      	ldr	r2, [pc, #568]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f3ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f3f2:	6013      	str	r3, [r2, #0]
 800f3f4:	4b8c      	ldr	r3, [pc, #560]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	4a8b      	ldr	r2, [pc, #556]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f3fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f3fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d013      	beq.n	800f430 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f408:	f7fe ff56 	bl	800e2b8 <HAL_GetTick>
 800f40c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f40e:	e008      	b.n	800f422 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f410:	f7fe ff52 	bl	800e2b8 <HAL_GetTick>
 800f414:	4602      	mov	r2, r0
 800f416:	69bb      	ldr	r3, [r7, #24]
 800f418:	1ad3      	subs	r3, r2, r3
 800f41a:	2b64      	cmp	r3, #100	; 0x64
 800f41c:	d901      	bls.n	800f422 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800f41e:	2303      	movs	r3, #3
 800f420:	e312      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f422:	4b81      	ldr	r3, [pc, #516]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d0f0      	beq.n	800f410 <HAL_RCC_OscConfig+0x2ac>
 800f42e:	e014      	b.n	800f45a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f430:	f7fe ff42 	bl	800e2b8 <HAL_GetTick>
 800f434:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f436:	e008      	b.n	800f44a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f438:	f7fe ff3e 	bl	800e2b8 <HAL_GetTick>
 800f43c:	4602      	mov	r2, r0
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	1ad3      	subs	r3, r2, r3
 800f442:	2b64      	cmp	r3, #100	; 0x64
 800f444:	d901      	bls.n	800f44a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800f446:	2303      	movs	r3, #3
 800f448:	e2fe      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f44a:	4b77      	ldr	r3, [pc, #476]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f452:	2b00      	cmp	r3, #0
 800f454:	d1f0      	bne.n	800f438 <HAL_RCC_OscConfig+0x2d4>
 800f456:	e000      	b.n	800f45a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f003 0302 	and.w	r3, r3, #2
 800f462:	2b00      	cmp	r3, #0
 800f464:	d060      	beq.n	800f528 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800f466:	6a3b      	ldr	r3, [r7, #32]
 800f468:	2b04      	cmp	r3, #4
 800f46a:	d005      	beq.n	800f478 <HAL_RCC_OscConfig+0x314>
 800f46c:	6a3b      	ldr	r3, [r7, #32]
 800f46e:	2b0c      	cmp	r3, #12
 800f470:	d119      	bne.n	800f4a6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f472:	69fb      	ldr	r3, [r7, #28]
 800f474:	2b02      	cmp	r3, #2
 800f476:	d116      	bne.n	800f4a6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f478:	4b6b      	ldr	r3, [pc, #428]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f480:	2b00      	cmp	r3, #0
 800f482:	d005      	beq.n	800f490 <HAL_RCC_OscConfig+0x32c>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	68db      	ldr	r3, [r3, #12]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d101      	bne.n	800f490 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800f48c:	2301      	movs	r3, #1
 800f48e:	e2db      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f490:	4b65      	ldr	r3, [pc, #404]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f492:	685b      	ldr	r3, [r3, #4]
 800f494:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	691b      	ldr	r3, [r3, #16]
 800f49c:	061b      	lsls	r3, r3, #24
 800f49e:	4962      	ldr	r1, [pc, #392]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f4a0:	4313      	orrs	r3, r2
 800f4a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f4a4:	e040      	b.n	800f528 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d023      	beq.n	800f4f6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f4ae:	4b5e      	ldr	r3, [pc, #376]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	4a5d      	ldr	r2, [pc, #372]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f4b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f4b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f4ba:	f7fe fefd 	bl	800e2b8 <HAL_GetTick>
 800f4be:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f4c0:	e008      	b.n	800f4d4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f4c2:	f7fe fef9 	bl	800e2b8 <HAL_GetTick>
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	1ad3      	subs	r3, r2, r3
 800f4cc:	2b02      	cmp	r3, #2
 800f4ce:	d901      	bls.n	800f4d4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800f4d0:	2303      	movs	r3, #3
 800f4d2:	e2b9      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f4d4:	4b54      	ldr	r3, [pc, #336]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d0f0      	beq.n	800f4c2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f4e0:	4b51      	ldr	r3, [pc, #324]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	691b      	ldr	r3, [r3, #16]
 800f4ec:	061b      	lsls	r3, r3, #24
 800f4ee:	494e      	ldr	r1, [pc, #312]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f4f0:	4313      	orrs	r3, r2
 800f4f2:	604b      	str	r3, [r1, #4]
 800f4f4:	e018      	b.n	800f528 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f4f6:	4b4c      	ldr	r3, [pc, #304]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4a4b      	ldr	r2, [pc, #300]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f4fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f502:	f7fe fed9 	bl	800e2b8 <HAL_GetTick>
 800f506:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f508:	e008      	b.n	800f51c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f50a:	f7fe fed5 	bl	800e2b8 <HAL_GetTick>
 800f50e:	4602      	mov	r2, r0
 800f510:	69bb      	ldr	r3, [r7, #24]
 800f512:	1ad3      	subs	r3, r2, r3
 800f514:	2b02      	cmp	r3, #2
 800f516:	d901      	bls.n	800f51c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800f518:	2303      	movs	r3, #3
 800f51a:	e295      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f51c:	4b42      	ldr	r3, [pc, #264]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f524:	2b00      	cmp	r3, #0
 800f526:	d1f0      	bne.n	800f50a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f003 0308 	and.w	r3, r3, #8
 800f530:	2b00      	cmp	r3, #0
 800f532:	f000 8082 	beq.w	800f63a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	695b      	ldr	r3, [r3, #20]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d05f      	beq.n	800f5fe <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800f53e:	4b3a      	ldr	r3, [pc, #232]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f544:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	699a      	ldr	r2, [r3, #24]
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	f003 0310 	and.w	r3, r3, #16
 800f550:	429a      	cmp	r2, r3
 800f552:	d037      	beq.n	800f5c4 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	f003 0302 	and.w	r3, r3, #2
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d006      	beq.n	800f56c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800f564:	2b00      	cmp	r3, #0
 800f566:	d101      	bne.n	800f56c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800f568:	2301      	movs	r3, #1
 800f56a:	e26d      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	f003 0301 	and.w	r3, r3, #1
 800f572:	2b00      	cmp	r3, #0
 800f574:	d01b      	beq.n	800f5ae <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800f576:	4b2c      	ldr	r3, [pc, #176]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f57c:	4a2a      	ldr	r2, [pc, #168]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f57e:	f023 0301 	bic.w	r3, r3, #1
 800f582:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f586:	f7fe fe97 	bl	800e2b8 <HAL_GetTick>
 800f58a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f58c:	e008      	b.n	800f5a0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f58e:	f7fe fe93 	bl	800e2b8 <HAL_GetTick>
 800f592:	4602      	mov	r2, r0
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	1ad3      	subs	r3, r2, r3
 800f598:	2b11      	cmp	r3, #17
 800f59a:	d901      	bls.n	800f5a0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800f59c:	2303      	movs	r3, #3
 800f59e:	e253      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f5a0:	4b21      	ldr	r3, [pc, #132]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f5a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f5a6:	f003 0302 	and.w	r3, r3, #2
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d1ef      	bne.n	800f58e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800f5ae:	4b1e      	ldr	r3, [pc, #120]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f5b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f5b4:	f023 0210 	bic.w	r2, r3, #16
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	699b      	ldr	r3, [r3, #24]
 800f5bc:	491a      	ldr	r1, [pc, #104]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f5c4:	4b18      	ldr	r3, [pc, #96]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f5c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f5ca:	4a17      	ldr	r2, [pc, #92]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f5cc:	f043 0301 	orr.w	r3, r3, #1
 800f5d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f5d4:	f7fe fe70 	bl	800e2b8 <HAL_GetTick>
 800f5d8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f5da:	e008      	b.n	800f5ee <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f5dc:	f7fe fe6c 	bl	800e2b8 <HAL_GetTick>
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	69bb      	ldr	r3, [r7, #24]
 800f5e4:	1ad3      	subs	r3, r2, r3
 800f5e6:	2b11      	cmp	r3, #17
 800f5e8:	d901      	bls.n	800f5ee <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800f5ea:	2303      	movs	r3, #3
 800f5ec:	e22c      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f5ee:	4b0e      	ldr	r3, [pc, #56]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f5f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f5f4:	f003 0302 	and.w	r3, r3, #2
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d0ef      	beq.n	800f5dc <HAL_RCC_OscConfig+0x478>
 800f5fc:	e01d      	b.n	800f63a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f5fe:	4b0a      	ldr	r3, [pc, #40]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f604:	4a08      	ldr	r2, [pc, #32]	; (800f628 <HAL_RCC_OscConfig+0x4c4>)
 800f606:	f023 0301 	bic.w	r3, r3, #1
 800f60a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f60e:	f7fe fe53 	bl	800e2b8 <HAL_GetTick>
 800f612:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f614:	e00a      	b.n	800f62c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f616:	f7fe fe4f 	bl	800e2b8 <HAL_GetTick>
 800f61a:	4602      	mov	r2, r0
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	1ad3      	subs	r3, r2, r3
 800f620:	2b11      	cmp	r3, #17
 800f622:	d903      	bls.n	800f62c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800f624:	2303      	movs	r3, #3
 800f626:	e20f      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
 800f628:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f62c:	4b83      	ldr	r3, [pc, #524]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f62e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f632:	f003 0302 	and.w	r3, r3, #2
 800f636:	2b00      	cmp	r3, #0
 800f638:	d1ed      	bne.n	800f616 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f003 0304 	and.w	r3, r3, #4
 800f642:	2b00      	cmp	r3, #0
 800f644:	f000 80bd 	beq.w	800f7c2 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f648:	2300      	movs	r3, #0
 800f64a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800f64e:	4b7b      	ldr	r3, [pc, #492]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f656:	2b00      	cmp	r3, #0
 800f658:	d10e      	bne.n	800f678 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f65a:	4b78      	ldr	r3, [pc, #480]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f65c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f65e:	4a77      	ldr	r2, [pc, #476]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f664:	6593      	str	r3, [r2, #88]	; 0x58
 800f666:	4b75      	ldr	r3, [pc, #468]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f66a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f66e:	60fb      	str	r3, [r7, #12]
 800f670:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800f672:	2301      	movs	r3, #1
 800f674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f678:	4b71      	ldr	r3, [pc, #452]	; (800f840 <HAL_RCC_OscConfig+0x6dc>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f680:	2b00      	cmp	r3, #0
 800f682:	d118      	bne.n	800f6b6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f684:	4b6e      	ldr	r3, [pc, #440]	; (800f840 <HAL_RCC_OscConfig+0x6dc>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4a6d      	ldr	r2, [pc, #436]	; (800f840 <HAL_RCC_OscConfig+0x6dc>)
 800f68a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f68e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f690:	f7fe fe12 	bl	800e2b8 <HAL_GetTick>
 800f694:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f696:	e008      	b.n	800f6aa <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f698:	f7fe fe0e 	bl	800e2b8 <HAL_GetTick>
 800f69c:	4602      	mov	r2, r0
 800f69e:	69bb      	ldr	r3, [r7, #24]
 800f6a0:	1ad3      	subs	r3, r2, r3
 800f6a2:	2b02      	cmp	r3, #2
 800f6a4:	d901      	bls.n	800f6aa <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800f6a6:	2303      	movs	r3, #3
 800f6a8:	e1ce      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f6aa:	4b65      	ldr	r3, [pc, #404]	; (800f840 <HAL_RCC_OscConfig+0x6dc>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d0f0      	beq.n	800f698 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	689b      	ldr	r3, [r3, #8]
 800f6ba:	f003 0301 	and.w	r3, r3, #1
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d02c      	beq.n	800f71c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800f6c2:	4b5e      	ldr	r3, [pc, #376]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f6c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	689b      	ldr	r3, [r3, #8]
 800f6d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6d4:	4959      	ldr	r1, [pc, #356]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f6d6:	4313      	orrs	r3, r2
 800f6d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	689b      	ldr	r3, [r3, #8]
 800f6e0:	f003 0304 	and.w	r3, r3, #4
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d010      	beq.n	800f70a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800f6e8:	4b54      	ldr	r3, [pc, #336]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6ee:	4a53      	ldr	r2, [pc, #332]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f6f0:	f043 0304 	orr.w	r3, r3, #4
 800f6f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f6f8:	4b50      	ldr	r3, [pc, #320]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f6fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6fe:	4a4f      	ldr	r2, [pc, #316]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f700:	f043 0301 	orr.w	r3, r3, #1
 800f704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f708:	e018      	b.n	800f73c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f70a:	4b4c      	ldr	r3, [pc, #304]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f70c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f710:	4a4a      	ldr	r2, [pc, #296]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f712:	f043 0301 	orr.w	r3, r3, #1
 800f716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f71a:	e00f      	b.n	800f73c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f71c:	4b47      	ldr	r3, [pc, #284]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f71e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f722:	4a46      	ldr	r2, [pc, #280]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f724:	f023 0301 	bic.w	r3, r3, #1
 800f728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800f72c:	4b43      	ldr	r3, [pc, #268]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f732:	4a42      	ldr	r2, [pc, #264]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f734:	f023 0304 	bic.w	r3, r3, #4
 800f738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	689b      	ldr	r3, [r3, #8]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d016      	beq.n	800f772 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f744:	f7fe fdb8 	bl	800e2b8 <HAL_GetTick>
 800f748:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f74a:	e00a      	b.n	800f762 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f74c:	f7fe fdb4 	bl	800e2b8 <HAL_GetTick>
 800f750:	4602      	mov	r2, r0
 800f752:	69bb      	ldr	r3, [r7, #24]
 800f754:	1ad3      	subs	r3, r2, r3
 800f756:	f241 3288 	movw	r2, #5000	; 0x1388
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d901      	bls.n	800f762 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800f75e:	2303      	movs	r3, #3
 800f760:	e172      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f762:	4b36      	ldr	r3, [pc, #216]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f768:	f003 0302 	and.w	r3, r3, #2
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d0ed      	beq.n	800f74c <HAL_RCC_OscConfig+0x5e8>
 800f770:	e01d      	b.n	800f7ae <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f772:	f7fe fda1 	bl	800e2b8 <HAL_GetTick>
 800f776:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f778:	e00a      	b.n	800f790 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f77a:	f7fe fd9d 	bl	800e2b8 <HAL_GetTick>
 800f77e:	4602      	mov	r2, r0
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	1ad3      	subs	r3, r2, r3
 800f784:	f241 3288 	movw	r2, #5000	; 0x1388
 800f788:	4293      	cmp	r3, r2
 800f78a:	d901      	bls.n	800f790 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800f78c:	2303      	movs	r3, #3
 800f78e:	e15b      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f790:	4b2a      	ldr	r3, [pc, #168]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f796:	f003 0302 	and.w	r3, r3, #2
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d1ed      	bne.n	800f77a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800f79e:	4b27      	ldr	r3, [pc, #156]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f7a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7a4:	4a25      	ldr	r2, [pc, #148]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f7a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f7ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	d105      	bne.n	800f7c2 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f7b6:	4b21      	ldr	r3, [pc, #132]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f7b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7ba:	4a20      	ldr	r2, [pc, #128]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f7bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f7c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f003 0320 	and.w	r3, r3, #32
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d041      	beq.n	800f852 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d01c      	beq.n	800f810 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f7d6:	4b19      	ldr	r3, [pc, #100]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f7d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f7dc:	4a17      	ldr	r2, [pc, #92]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f7de:	f043 0301 	orr.w	r3, r3, #1
 800f7e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f7e6:	f7fe fd67 	bl	800e2b8 <HAL_GetTick>
 800f7ea:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800f7ec:	e008      	b.n	800f800 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f7ee:	f7fe fd63 	bl	800e2b8 <HAL_GetTick>
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	69bb      	ldr	r3, [r7, #24]
 800f7f6:	1ad3      	subs	r3, r2, r3
 800f7f8:	2b02      	cmp	r3, #2
 800f7fa:	d901      	bls.n	800f800 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800f7fc:	2303      	movs	r3, #3
 800f7fe:	e123      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800f800:	4b0e      	ldr	r3, [pc, #56]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f802:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f806:	f003 0302 	and.w	r3, r3, #2
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d0ef      	beq.n	800f7ee <HAL_RCC_OscConfig+0x68a>
 800f80e:	e020      	b.n	800f852 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f810:	4b0a      	ldr	r3, [pc, #40]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f816:	4a09      	ldr	r2, [pc, #36]	; (800f83c <HAL_RCC_OscConfig+0x6d8>)
 800f818:	f023 0301 	bic.w	r3, r3, #1
 800f81c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f820:	f7fe fd4a 	bl	800e2b8 <HAL_GetTick>
 800f824:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800f826:	e00d      	b.n	800f844 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f828:	f7fe fd46 	bl	800e2b8 <HAL_GetTick>
 800f82c:	4602      	mov	r2, r0
 800f82e:	69bb      	ldr	r3, [r7, #24]
 800f830:	1ad3      	subs	r3, r2, r3
 800f832:	2b02      	cmp	r3, #2
 800f834:	d906      	bls.n	800f844 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800f836:	2303      	movs	r3, #3
 800f838:	e106      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
 800f83a:	bf00      	nop
 800f83c:	40021000 	.word	0x40021000
 800f840:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800f844:	4b82      	ldr	r3, [pc, #520]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f846:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f84a:	f003 0302 	and.w	r3, r3, #2
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d1ea      	bne.n	800f828 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f856:	2b00      	cmp	r3, #0
 800f858:	f000 80f5 	beq.w	800fa46 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f860:	2b02      	cmp	r3, #2
 800f862:	f040 80cb 	bne.w	800f9fc <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800f866:	4b7a      	ldr	r3, [pc, #488]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f868:	68db      	ldr	r3, [r3, #12]
 800f86a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	f003 0203 	and.w	r2, r3, #3
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f876:	429a      	cmp	r2, r3
 800f878:	d12c      	bne.n	800f8d4 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800f87a:	69fb      	ldr	r3, [r7, #28]
 800f87c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f884:	3b01      	subs	r3, #1
 800f886:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f888:	429a      	cmp	r2, r3
 800f88a:	d123      	bne.n	800f8d4 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f88c:	69fb      	ldr	r3, [r7, #28]
 800f88e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f896:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800f898:	429a      	cmp	r2, r3
 800f89a:	d11b      	bne.n	800f8d4 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d113      	bne.n	800f8d4 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8b6:	085b      	lsrs	r3, r3, #1
 800f8b8:	3b01      	subs	r3, #1
 800f8ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d109      	bne.n	800f8d4 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8ca:	085b      	lsrs	r3, r3, #1
 800f8cc:	3b01      	subs	r3, #1
 800f8ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d06d      	beq.n	800f9b0 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f8d4:	6a3b      	ldr	r3, [r7, #32]
 800f8d6:	2b0c      	cmp	r3, #12
 800f8d8:	d068      	beq.n	800f9ac <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800f8da:	4b5d      	ldr	r3, [pc, #372]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d105      	bne.n	800f8f2 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800f8e6:	4b5a      	ldr	r3, [pc, #360]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d001      	beq.n	800f8f6 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	e0a8      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800f8f6:	4b56      	ldr	r3, [pc, #344]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	4a55      	ldr	r2, [pc, #340]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f8fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f900:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f902:	f7fe fcd9 	bl	800e2b8 <HAL_GetTick>
 800f906:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f908:	e008      	b.n	800f91c <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f90a:	f7fe fcd5 	bl	800e2b8 <HAL_GetTick>
 800f90e:	4602      	mov	r2, r0
 800f910:	69bb      	ldr	r3, [r7, #24]
 800f912:	1ad3      	subs	r3, r2, r3
 800f914:	2b02      	cmp	r3, #2
 800f916:	d901      	bls.n	800f91c <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800f918:	2303      	movs	r3, #3
 800f91a:	e095      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f91c:	4b4c      	ldr	r3, [pc, #304]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f924:	2b00      	cmp	r3, #0
 800f926:	d1f0      	bne.n	800f90a <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f928:	4b49      	ldr	r3, [pc, #292]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f92a:	68da      	ldr	r2, [r3, #12]
 800f92c:	4b49      	ldr	r3, [pc, #292]	; (800fa54 <HAL_RCC_OscConfig+0x8f0>)
 800f92e:	4013      	ands	r3, r2
 800f930:	687a      	ldr	r2, [r7, #4]
 800f932:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800f934:	687a      	ldr	r2, [r7, #4]
 800f936:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f938:	3a01      	subs	r2, #1
 800f93a:	0112      	lsls	r2, r2, #4
 800f93c:	4311      	orrs	r1, r2
 800f93e:	687a      	ldr	r2, [r7, #4]
 800f940:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f942:	0212      	lsls	r2, r2, #8
 800f944:	4311      	orrs	r1, r2
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f94a:	0852      	lsrs	r2, r2, #1
 800f94c:	3a01      	subs	r2, #1
 800f94e:	0552      	lsls	r2, r2, #21
 800f950:	4311      	orrs	r1, r2
 800f952:	687a      	ldr	r2, [r7, #4]
 800f954:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f956:	0852      	lsrs	r2, r2, #1
 800f958:	3a01      	subs	r2, #1
 800f95a:	0652      	lsls	r2, r2, #25
 800f95c:	4311      	orrs	r1, r2
 800f95e:	687a      	ldr	r2, [r7, #4]
 800f960:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f962:	06d2      	lsls	r2, r2, #27
 800f964:	430a      	orrs	r2, r1
 800f966:	493a      	ldr	r1, [pc, #232]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f968:	4313      	orrs	r3, r2
 800f96a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800f96c:	4b38      	ldr	r3, [pc, #224]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4a37      	ldr	r2, [pc, #220]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f976:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f978:	4b35      	ldr	r3, [pc, #212]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f97a:	68db      	ldr	r3, [r3, #12]
 800f97c:	4a34      	ldr	r2, [pc, #208]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f97e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f982:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f984:	f7fe fc98 	bl	800e2b8 <HAL_GetTick>
 800f988:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f98a:	e008      	b.n	800f99e <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f98c:	f7fe fc94 	bl	800e2b8 <HAL_GetTick>
 800f990:	4602      	mov	r2, r0
 800f992:	69bb      	ldr	r3, [r7, #24]
 800f994:	1ad3      	subs	r3, r2, r3
 800f996:	2b02      	cmp	r3, #2
 800f998:	d901      	bls.n	800f99e <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800f99a:	2303      	movs	r3, #3
 800f99c:	e054      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f99e:	4b2c      	ldr	r3, [pc, #176]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d0f0      	beq.n	800f98c <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f9aa:	e04c      	b.n	800fa46 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	e04b      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f9b0:	4b27      	ldr	r3, [pc, #156]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d144      	bne.n	800fa46 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800f9bc:	4b24      	ldr	r3, [pc, #144]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4a23      	ldr	r2, [pc, #140]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f9c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f9c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f9c8:	4b21      	ldr	r3, [pc, #132]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	4a20      	ldr	r2, [pc, #128]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f9ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f9d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f9d4:	f7fe fc70 	bl	800e2b8 <HAL_GetTick>
 800f9d8:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f9da:	e008      	b.n	800f9ee <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f9dc:	f7fe fc6c 	bl	800e2b8 <HAL_GetTick>
 800f9e0:	4602      	mov	r2, r0
 800f9e2:	69bb      	ldr	r3, [r7, #24]
 800f9e4:	1ad3      	subs	r3, r2, r3
 800f9e6:	2b02      	cmp	r3, #2
 800f9e8:	d901      	bls.n	800f9ee <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800f9ea:	2303      	movs	r3, #3
 800f9ec:	e02c      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f9ee:	4b18      	ldr	r3, [pc, #96]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d0f0      	beq.n	800f9dc <HAL_RCC_OscConfig+0x878>
 800f9fa:	e024      	b.n	800fa46 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f9fc:	6a3b      	ldr	r3, [r7, #32]
 800f9fe:	2b0c      	cmp	r3, #12
 800fa00:	d01f      	beq.n	800fa42 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fa02:	4b13      	ldr	r3, [pc, #76]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	4a12      	ldr	r2, [pc, #72]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800fa08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fa0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fa0e:	f7fe fc53 	bl	800e2b8 <HAL_GetTick>
 800fa12:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fa14:	e008      	b.n	800fa28 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fa16:	f7fe fc4f 	bl	800e2b8 <HAL_GetTick>
 800fa1a:	4602      	mov	r2, r0
 800fa1c:	69bb      	ldr	r3, [r7, #24]
 800fa1e:	1ad3      	subs	r3, r2, r3
 800fa20:	2b02      	cmp	r3, #2
 800fa22:	d901      	bls.n	800fa28 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800fa24:	2303      	movs	r3, #3
 800fa26:	e00f      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fa28:	4b09      	ldr	r3, [pc, #36]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d1f0      	bne.n	800fa16 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800fa34:	4b06      	ldr	r3, [pc, #24]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800fa36:	68da      	ldr	r2, [r3, #12]
 800fa38:	4905      	ldr	r1, [pc, #20]	; (800fa50 <HAL_RCC_OscConfig+0x8ec>)
 800fa3a:	4b07      	ldr	r3, [pc, #28]	; (800fa58 <HAL_RCC_OscConfig+0x8f4>)
 800fa3c:	4013      	ands	r3, r2
 800fa3e:	60cb      	str	r3, [r1, #12]
 800fa40:	e001      	b.n	800fa46 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800fa42:	2301      	movs	r3, #1
 800fa44:	e000      	b.n	800fa48 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800fa46:	2300      	movs	r3, #0
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3728      	adds	r7, #40	; 0x28
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	40021000 	.word	0x40021000
 800fa54:	019d800c 	.word	0x019d800c
 800fa58:	feeefffc 	.word	0xfeeefffc

0800fa5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b086      	sub	sp, #24
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800fa66:	2300      	movs	r3, #0
 800fa68:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d101      	bne.n	800fa74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800fa70:	2301      	movs	r3, #1
 800fa72:	e11d      	b.n	800fcb0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fa74:	4b90      	ldr	r3, [pc, #576]	; (800fcb8 <HAL_RCC_ClockConfig+0x25c>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	f003 030f 	and.w	r3, r3, #15
 800fa7c:	683a      	ldr	r2, [r7, #0]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d910      	bls.n	800faa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fa82:	4b8d      	ldr	r3, [pc, #564]	; (800fcb8 <HAL_RCC_ClockConfig+0x25c>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f023 020f 	bic.w	r2, r3, #15
 800fa8a:	498b      	ldr	r1, [pc, #556]	; (800fcb8 <HAL_RCC_ClockConfig+0x25c>)
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fa92:	4b89      	ldr	r3, [pc, #548]	; (800fcb8 <HAL_RCC_ClockConfig+0x25c>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f003 030f 	and.w	r3, r3, #15
 800fa9a:	683a      	ldr	r2, [r7, #0]
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d001      	beq.n	800faa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800faa0:	2301      	movs	r3, #1
 800faa2:	e105      	b.n	800fcb0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f003 0302 	and.w	r3, r3, #2
 800faac:	2b00      	cmp	r3, #0
 800faae:	d010      	beq.n	800fad2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	689a      	ldr	r2, [r3, #8]
 800fab4:	4b81      	ldr	r3, [pc, #516]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fab6:	689b      	ldr	r3, [r3, #8]
 800fab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d908      	bls.n	800fad2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fac0:	4b7e      	ldr	r3, [pc, #504]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fac2:	689b      	ldr	r3, [r3, #8]
 800fac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	689b      	ldr	r3, [r3, #8]
 800facc:	497b      	ldr	r1, [pc, #492]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800face:	4313      	orrs	r3, r2
 800fad0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f003 0301 	and.w	r3, r3, #1
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d079      	beq.n	800fbd2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	2b03      	cmp	r3, #3
 800fae4:	d11e      	bne.n	800fb24 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fae6:	4b75      	ldr	r3, [pc, #468]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d101      	bne.n	800faf6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800faf2:	2301      	movs	r3, #1
 800faf4:	e0dc      	b.n	800fcb0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800faf6:	f000 fa3b 	bl	800ff70 <RCC_GetSysClockFreqFromPLLSource>
 800fafa:	4603      	mov	r3, r0
 800fafc:	4a70      	ldr	r2, [pc, #448]	; (800fcc0 <HAL_RCC_ClockConfig+0x264>)
 800fafe:	4293      	cmp	r3, r2
 800fb00:	d946      	bls.n	800fb90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800fb02:	4b6e      	ldr	r3, [pc, #440]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d140      	bne.n	800fb90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800fb0e:	4b6b      	ldr	r3, [pc, #428]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fb10:	689b      	ldr	r3, [r3, #8]
 800fb12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb16:	4a69      	ldr	r2, [pc, #420]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fb18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800fb1e:	2380      	movs	r3, #128	; 0x80
 800fb20:	617b      	str	r3, [r7, #20]
 800fb22:	e035      	b.n	800fb90 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d107      	bne.n	800fb3c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fb2c:	4b63      	ldr	r3, [pc, #396]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d115      	bne.n	800fb64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800fb38:	2301      	movs	r3, #1
 800fb3a:	e0b9      	b.n	800fcb0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	685b      	ldr	r3, [r3, #4]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d107      	bne.n	800fb54 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fb44:	4b5d      	ldr	r3, [pc, #372]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f003 0302 	and.w	r3, r3, #2
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d109      	bne.n	800fb64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800fb50:	2301      	movs	r3, #1
 800fb52:	e0ad      	b.n	800fcb0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fb54:	4b59      	ldr	r3, [pc, #356]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d101      	bne.n	800fb64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800fb60:	2301      	movs	r3, #1
 800fb62:	e0a5      	b.n	800fcb0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800fb64:	f000 f8b4 	bl	800fcd0 <HAL_RCC_GetSysClockFreq>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	4a55      	ldr	r2, [pc, #340]	; (800fcc0 <HAL_RCC_ClockConfig+0x264>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d90f      	bls.n	800fb90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800fb70:	4b52      	ldr	r3, [pc, #328]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fb72:	689b      	ldr	r3, [r3, #8]
 800fb74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d109      	bne.n	800fb90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800fb7c:	4b4f      	ldr	r3, [pc, #316]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fb7e:	689b      	ldr	r3, [r3, #8]
 800fb80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb84:	4a4d      	ldr	r2, [pc, #308]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fb86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb8a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800fb8c:	2380      	movs	r3, #128	; 0x80
 800fb8e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fb90:	4b4a      	ldr	r3, [pc, #296]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fb92:	689b      	ldr	r3, [r3, #8]
 800fb94:	f023 0203 	bic.w	r2, r3, #3
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	4947      	ldr	r1, [pc, #284]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fb9e:	4313      	orrs	r3, r2
 800fba0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fba2:	f7fe fb89 	bl	800e2b8 <HAL_GetTick>
 800fba6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fba8:	e00a      	b.n	800fbc0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fbaa:	f7fe fb85 	bl	800e2b8 <HAL_GetTick>
 800fbae:	4602      	mov	r2, r0
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	1ad3      	subs	r3, r2, r3
 800fbb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d901      	bls.n	800fbc0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800fbbc:	2303      	movs	r3, #3
 800fbbe:	e077      	b.n	800fcb0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fbc0:	4b3e      	ldr	r3, [pc, #248]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fbc2:	689b      	ldr	r3, [r3, #8]
 800fbc4:	f003 020c 	and.w	r2, r3, #12
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	009b      	lsls	r3, r3, #2
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d1eb      	bne.n	800fbaa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	2b80      	cmp	r3, #128	; 0x80
 800fbd6:	d105      	bne.n	800fbe4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800fbd8:	4b38      	ldr	r3, [pc, #224]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fbda:	689b      	ldr	r3, [r3, #8]
 800fbdc:	4a37      	ldr	r2, [pc, #220]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fbde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fbe2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f003 0302 	and.w	r3, r3, #2
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d010      	beq.n	800fc12 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	689a      	ldr	r2, [r3, #8]
 800fbf4:	4b31      	ldr	r3, [pc, #196]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d208      	bcs.n	800fc12 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fc00:	4b2e      	ldr	r3, [pc, #184]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fc02:	689b      	ldr	r3, [r3, #8]
 800fc04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	689b      	ldr	r3, [r3, #8]
 800fc0c:	492b      	ldr	r1, [pc, #172]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fc0e:	4313      	orrs	r3, r2
 800fc10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800fc12:	4b29      	ldr	r3, [pc, #164]	; (800fcb8 <HAL_RCC_ClockConfig+0x25c>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f003 030f 	and.w	r3, r3, #15
 800fc1a:	683a      	ldr	r2, [r7, #0]
 800fc1c:	429a      	cmp	r2, r3
 800fc1e:	d210      	bcs.n	800fc42 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fc20:	4b25      	ldr	r3, [pc, #148]	; (800fcb8 <HAL_RCC_ClockConfig+0x25c>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f023 020f 	bic.w	r2, r3, #15
 800fc28:	4923      	ldr	r1, [pc, #140]	; (800fcb8 <HAL_RCC_ClockConfig+0x25c>)
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	4313      	orrs	r3, r2
 800fc2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fc30:	4b21      	ldr	r3, [pc, #132]	; (800fcb8 <HAL_RCC_ClockConfig+0x25c>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	f003 030f 	and.w	r3, r3, #15
 800fc38:	683a      	ldr	r2, [r7, #0]
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d001      	beq.n	800fc42 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800fc3e:	2301      	movs	r3, #1
 800fc40:	e036      	b.n	800fcb0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f003 0304 	and.w	r3, r3, #4
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d008      	beq.n	800fc60 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fc4e:	4b1b      	ldr	r3, [pc, #108]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fc50:	689b      	ldr	r3, [r3, #8]
 800fc52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	68db      	ldr	r3, [r3, #12]
 800fc5a:	4918      	ldr	r1, [pc, #96]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fc5c:	4313      	orrs	r3, r2
 800fc5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	f003 0308 	and.w	r3, r3, #8
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d009      	beq.n	800fc80 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800fc6c:	4b13      	ldr	r3, [pc, #76]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fc6e:	689b      	ldr	r3, [r3, #8]
 800fc70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	691b      	ldr	r3, [r3, #16]
 800fc78:	00db      	lsls	r3, r3, #3
 800fc7a:	4910      	ldr	r1, [pc, #64]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fc7c:	4313      	orrs	r3, r2
 800fc7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800fc80:	f000 f826 	bl	800fcd0 <HAL_RCC_GetSysClockFreq>
 800fc84:	4602      	mov	r2, r0
 800fc86:	4b0d      	ldr	r3, [pc, #52]	; (800fcbc <HAL_RCC_ClockConfig+0x260>)
 800fc88:	689b      	ldr	r3, [r3, #8]
 800fc8a:	091b      	lsrs	r3, r3, #4
 800fc8c:	f003 030f 	and.w	r3, r3, #15
 800fc90:	490c      	ldr	r1, [pc, #48]	; (800fcc4 <HAL_RCC_ClockConfig+0x268>)
 800fc92:	5ccb      	ldrb	r3, [r1, r3]
 800fc94:	f003 031f 	and.w	r3, r3, #31
 800fc98:	fa22 f303 	lsr.w	r3, r2, r3
 800fc9c:	4a0a      	ldr	r2, [pc, #40]	; (800fcc8 <HAL_RCC_ClockConfig+0x26c>)
 800fc9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800fca0:	4b0a      	ldr	r3, [pc, #40]	; (800fccc <HAL_RCC_ClockConfig+0x270>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7fd fd41 	bl	800d72c <HAL_InitTick>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	73fb      	strb	r3, [r7, #15]

  return status;
 800fcae:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3718      	adds	r7, #24
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	40022000 	.word	0x40022000
 800fcbc:	40021000 	.word	0x40021000
 800fcc0:	04c4b400 	.word	0x04c4b400
 800fcc4:	080253e0 	.word	0x080253e0
 800fcc8:	20000094 	.word	0x20000094
 800fccc:	20000098 	.word	0x20000098

0800fcd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b089      	sub	sp, #36	; 0x24
 800fcd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	61fb      	str	r3, [r7, #28]
 800fcda:	2300      	movs	r3, #0
 800fcdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fcde:	4b3e      	ldr	r3, [pc, #248]	; (800fdd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800fce0:	689b      	ldr	r3, [r3, #8]
 800fce2:	f003 030c 	and.w	r3, r3, #12
 800fce6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fce8:	4b3b      	ldr	r3, [pc, #236]	; (800fdd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	f003 0303 	and.w	r3, r3, #3
 800fcf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d005      	beq.n	800fd04 <HAL_RCC_GetSysClockFreq+0x34>
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	2b0c      	cmp	r3, #12
 800fcfc:	d121      	bne.n	800fd42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d11e      	bne.n	800fd42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800fd04:	4b34      	ldr	r3, [pc, #208]	; (800fdd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f003 0308 	and.w	r3, r3, #8
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d107      	bne.n	800fd20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800fd10:	4b31      	ldr	r3, [pc, #196]	; (800fdd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800fd12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fd16:	0a1b      	lsrs	r3, r3, #8
 800fd18:	f003 030f 	and.w	r3, r3, #15
 800fd1c:	61fb      	str	r3, [r7, #28]
 800fd1e:	e005      	b.n	800fd2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800fd20:	4b2d      	ldr	r3, [pc, #180]	; (800fdd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	091b      	lsrs	r3, r3, #4
 800fd26:	f003 030f 	and.w	r3, r3, #15
 800fd2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800fd2c:	4a2b      	ldr	r2, [pc, #172]	; (800fddc <HAL_RCC_GetSysClockFreq+0x10c>)
 800fd2e:	69fb      	ldr	r3, [r7, #28]
 800fd30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d10d      	bne.n	800fd58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800fd3c:	69fb      	ldr	r3, [r7, #28]
 800fd3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fd40:	e00a      	b.n	800fd58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	2b04      	cmp	r3, #4
 800fd46:	d102      	bne.n	800fd4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800fd48:	4b25      	ldr	r3, [pc, #148]	; (800fde0 <HAL_RCC_GetSysClockFreq+0x110>)
 800fd4a:	61bb      	str	r3, [r7, #24]
 800fd4c:	e004      	b.n	800fd58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	2b08      	cmp	r3, #8
 800fd52:	d101      	bne.n	800fd58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800fd54:	4b23      	ldr	r3, [pc, #140]	; (800fde4 <HAL_RCC_GetSysClockFreq+0x114>)
 800fd56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	2b0c      	cmp	r3, #12
 800fd5c:	d134      	bne.n	800fdc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800fd5e:	4b1e      	ldr	r3, [pc, #120]	; (800fdd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800fd60:	68db      	ldr	r3, [r3, #12]
 800fd62:	f003 0303 	and.w	r3, r3, #3
 800fd66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	2b02      	cmp	r3, #2
 800fd6c:	d003      	beq.n	800fd76 <HAL_RCC_GetSysClockFreq+0xa6>
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	2b03      	cmp	r3, #3
 800fd72:	d003      	beq.n	800fd7c <HAL_RCC_GetSysClockFreq+0xac>
 800fd74:	e005      	b.n	800fd82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800fd76:	4b1a      	ldr	r3, [pc, #104]	; (800fde0 <HAL_RCC_GetSysClockFreq+0x110>)
 800fd78:	617b      	str	r3, [r7, #20]
      break;
 800fd7a:	e005      	b.n	800fd88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800fd7c:	4b19      	ldr	r3, [pc, #100]	; (800fde4 <HAL_RCC_GetSysClockFreq+0x114>)
 800fd7e:	617b      	str	r3, [r7, #20]
      break;
 800fd80:	e002      	b.n	800fd88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	617b      	str	r3, [r7, #20]
      break;
 800fd86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800fd88:	4b13      	ldr	r3, [pc, #76]	; (800fdd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800fd8a:	68db      	ldr	r3, [r3, #12]
 800fd8c:	091b      	lsrs	r3, r3, #4
 800fd8e:	f003 030f 	and.w	r3, r3, #15
 800fd92:	3301      	adds	r3, #1
 800fd94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800fd96:	4b10      	ldr	r3, [pc, #64]	; (800fdd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800fd98:	68db      	ldr	r3, [r3, #12]
 800fd9a:	0a1b      	lsrs	r3, r3, #8
 800fd9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fda0:	697a      	ldr	r2, [r7, #20]
 800fda2:	fb03 f202 	mul.w	r2, r3, r2
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800fdae:	4b0a      	ldr	r3, [pc, #40]	; (800fdd8 <HAL_RCC_GetSysClockFreq+0x108>)
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	0e5b      	lsrs	r3, r3, #25
 800fdb4:	f003 0303 	and.w	r3, r3, #3
 800fdb8:	3301      	adds	r3, #1
 800fdba:	005b      	lsls	r3, r3, #1
 800fdbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800fdbe:	697a      	ldr	r2, [r7, #20]
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800fdc8:	69bb      	ldr	r3, [r7, #24]
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3724      	adds	r7, #36	; 0x24
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd4:	4770      	bx	lr
 800fdd6:	bf00      	nop
 800fdd8:	40021000 	.word	0x40021000
 800fddc:	080253f8 	.word	0x080253f8
 800fde0:	00f42400 	.word	0x00f42400
 800fde4:	007a1200 	.word	0x007a1200

0800fde8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fde8:	b480      	push	{r7}
 800fdea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fdec:	4b03      	ldr	r3, [pc, #12]	; (800fdfc <HAL_RCC_GetHCLKFreq+0x14>)
 800fdee:	681b      	ldr	r3, [r3, #0]
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf8:	4770      	bx	lr
 800fdfa:	bf00      	nop
 800fdfc:	20000094 	.word	0x20000094

0800fe00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800fe04:	f7ff fff0 	bl	800fde8 <HAL_RCC_GetHCLKFreq>
 800fe08:	4602      	mov	r2, r0
 800fe0a:	4b06      	ldr	r3, [pc, #24]	; (800fe24 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fe0c:	689b      	ldr	r3, [r3, #8]
 800fe0e:	0a1b      	lsrs	r3, r3, #8
 800fe10:	f003 0307 	and.w	r3, r3, #7
 800fe14:	4904      	ldr	r1, [pc, #16]	; (800fe28 <HAL_RCC_GetPCLK1Freq+0x28>)
 800fe16:	5ccb      	ldrb	r3, [r1, r3]
 800fe18:	f003 031f 	and.w	r3, r3, #31
 800fe1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	40021000 	.word	0x40021000
 800fe28:	080253f0 	.word	0x080253f0

0800fe2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800fe30:	f7ff ffda 	bl	800fde8 <HAL_RCC_GetHCLKFreq>
 800fe34:	4602      	mov	r2, r0
 800fe36:	4b06      	ldr	r3, [pc, #24]	; (800fe50 <HAL_RCC_GetPCLK2Freq+0x24>)
 800fe38:	689b      	ldr	r3, [r3, #8]
 800fe3a:	0adb      	lsrs	r3, r3, #11
 800fe3c:	f003 0307 	and.w	r3, r3, #7
 800fe40:	4904      	ldr	r1, [pc, #16]	; (800fe54 <HAL_RCC_GetPCLK2Freq+0x28>)
 800fe42:	5ccb      	ldrb	r3, [r1, r3]
 800fe44:	f003 031f 	and.w	r3, r3, #31
 800fe48:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	bd80      	pop	{r7, pc}
 800fe50:	40021000 	.word	0x40021000
 800fe54:	080253f0 	.word	0x080253f0

0800fe58 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b083      	sub	sp, #12
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	220f      	movs	r2, #15
 800fe66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800fe68:	4b12      	ldr	r3, [pc, #72]	; (800feb4 <HAL_RCC_GetClockConfig+0x5c>)
 800fe6a:	689b      	ldr	r3, [r3, #8]
 800fe6c:	f003 0203 	and.w	r2, r3, #3
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800fe74:	4b0f      	ldr	r3, [pc, #60]	; (800feb4 <HAL_RCC_GetClockConfig+0x5c>)
 800fe76:	689b      	ldr	r3, [r3, #8]
 800fe78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800fe80:	4b0c      	ldr	r3, [pc, #48]	; (800feb4 <HAL_RCC_GetClockConfig+0x5c>)
 800fe82:	689b      	ldr	r3, [r3, #8]
 800fe84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800fe8c:	4b09      	ldr	r3, [pc, #36]	; (800feb4 <HAL_RCC_GetClockConfig+0x5c>)
 800fe8e:	689b      	ldr	r3, [r3, #8]
 800fe90:	08db      	lsrs	r3, r3, #3
 800fe92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800fe9a:	4b07      	ldr	r3, [pc, #28]	; (800feb8 <HAL_RCC_GetClockConfig+0x60>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f003 020f 	and.w	r2, r3, #15
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	601a      	str	r2, [r3, #0]
}
 800fea6:	bf00      	nop
 800fea8:	370c      	adds	r7, #12
 800feaa:	46bd      	mov	sp, r7
 800feac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop
 800feb4:	40021000 	.word	0x40021000
 800feb8:	40022000 	.word	0x40022000

0800febc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b086      	sub	sp, #24
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800fec4:	2300      	movs	r3, #0
 800fec6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800fec8:	4b27      	ldr	r3, [pc, #156]	; (800ff68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800feca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d003      	beq.n	800fedc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800fed4:	f7ff f882 	bl	800efdc <HAL_PWREx_GetVoltageRange>
 800fed8:	6178      	str	r0, [r7, #20]
 800feda:	e014      	b.n	800ff06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800fedc:	4b22      	ldr	r3, [pc, #136]	; (800ff68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800fede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fee0:	4a21      	ldr	r2, [pc, #132]	; (800ff68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800fee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fee6:	6593      	str	r3, [r2, #88]	; 0x58
 800fee8:	4b1f      	ldr	r3, [pc, #124]	; (800ff68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800feea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800feec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fef0:	60fb      	str	r3, [r7, #12]
 800fef2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800fef4:	f7ff f872 	bl	800efdc <HAL_PWREx_GetVoltageRange>
 800fef8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800fefa:	4b1b      	ldr	r3, [pc, #108]	; (800ff68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800fefc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fefe:	4a1a      	ldr	r2, [pc, #104]	; (800ff68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ff00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ff04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff0c:	d10b      	bne.n	800ff26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2b80      	cmp	r3, #128	; 0x80
 800ff12:	d913      	bls.n	800ff3c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2ba0      	cmp	r3, #160	; 0xa0
 800ff18:	d902      	bls.n	800ff20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ff1a:	2302      	movs	r3, #2
 800ff1c:	613b      	str	r3, [r7, #16]
 800ff1e:	e00d      	b.n	800ff3c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ff20:	2301      	movs	r3, #1
 800ff22:	613b      	str	r3, [r7, #16]
 800ff24:	e00a      	b.n	800ff3c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2b7f      	cmp	r3, #127	; 0x7f
 800ff2a:	d902      	bls.n	800ff32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800ff2c:	2302      	movs	r3, #2
 800ff2e:	613b      	str	r3, [r7, #16]
 800ff30:	e004      	b.n	800ff3c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2b70      	cmp	r3, #112	; 0x70
 800ff36:	d101      	bne.n	800ff3c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ff38:	2301      	movs	r3, #1
 800ff3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ff3c:	4b0b      	ldr	r3, [pc, #44]	; (800ff6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	f023 020f 	bic.w	r2, r3, #15
 800ff44:	4909      	ldr	r1, [pc, #36]	; (800ff6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	4313      	orrs	r3, r2
 800ff4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800ff4c:	4b07      	ldr	r3, [pc, #28]	; (800ff6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f003 030f 	and.w	r3, r3, #15
 800ff54:	693a      	ldr	r2, [r7, #16]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d001      	beq.n	800ff5e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	e000      	b.n	800ff60 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800ff5e:	2300      	movs	r3, #0
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	3718      	adds	r7, #24
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	40021000 	.word	0x40021000
 800ff6c:	40022000 	.word	0x40022000

0800ff70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ff70:	b480      	push	{r7}
 800ff72:	b087      	sub	sp, #28
 800ff74:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ff76:	4b2d      	ldr	r3, [pc, #180]	; (801002c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ff78:	68db      	ldr	r3, [r3, #12]
 800ff7a:	f003 0303 	and.w	r3, r3, #3
 800ff7e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	2b03      	cmp	r3, #3
 800ff84:	d00b      	beq.n	800ff9e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	2b03      	cmp	r3, #3
 800ff8a:	d825      	bhi.n	800ffd8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d008      	beq.n	800ffa4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	2b02      	cmp	r3, #2
 800ff96:	d11f      	bne.n	800ffd8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800ff98:	4b25      	ldr	r3, [pc, #148]	; (8010030 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ff9a:	613b      	str	r3, [r7, #16]
    break;
 800ff9c:	e01f      	b.n	800ffde <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800ff9e:	4b25      	ldr	r3, [pc, #148]	; (8010034 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800ffa0:	613b      	str	r3, [r7, #16]
    break;
 800ffa2:	e01c      	b.n	800ffde <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ffa4:	4b21      	ldr	r3, [pc, #132]	; (801002c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	f003 0308 	and.w	r3, r3, #8
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d107      	bne.n	800ffc0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ffb0:	4b1e      	ldr	r3, [pc, #120]	; (801002c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ffb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ffb6:	0a1b      	lsrs	r3, r3, #8
 800ffb8:	f003 030f 	and.w	r3, r3, #15
 800ffbc:	617b      	str	r3, [r7, #20]
 800ffbe:	e005      	b.n	800ffcc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ffc0:	4b1a      	ldr	r3, [pc, #104]	; (801002c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	091b      	lsrs	r3, r3, #4
 800ffc6:	f003 030f 	and.w	r3, r3, #15
 800ffca:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800ffcc:	4a1a      	ldr	r2, [pc, #104]	; (8010038 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffd4:	613b      	str	r3, [r7, #16]
    break;
 800ffd6:	e002      	b.n	800ffde <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	613b      	str	r3, [r7, #16]
    break;
 800ffdc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ffde:	4b13      	ldr	r3, [pc, #76]	; (801002c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ffe0:	68db      	ldr	r3, [r3, #12]
 800ffe2:	091b      	lsrs	r3, r3, #4
 800ffe4:	f003 030f 	and.w	r3, r3, #15
 800ffe8:	3301      	adds	r3, #1
 800ffea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ffec:	4b0f      	ldr	r3, [pc, #60]	; (801002c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ffee:	68db      	ldr	r3, [r3, #12]
 800fff0:	0a1b      	lsrs	r3, r3, #8
 800fff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fff6:	693a      	ldr	r2, [r7, #16]
 800fff8:	fb03 f202 	mul.w	r2, r3, r2
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8010002:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8010004:	4b09      	ldr	r3, [pc, #36]	; (801002c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	0e5b      	lsrs	r3, r3, #25
 801000a:	f003 0303 	and.w	r3, r3, #3
 801000e:	3301      	adds	r3, #1
 8010010:	005b      	lsls	r3, r3, #1
 8010012:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8010014:	693a      	ldr	r2, [r7, #16]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	fbb2 f3f3 	udiv	r3, r2, r3
 801001c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 801001e:	683b      	ldr	r3, [r7, #0]
}
 8010020:	4618      	mov	r0, r3
 8010022:	371c      	adds	r7, #28
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr
 801002c:	40021000 	.word	0x40021000
 8010030:	00f42400 	.word	0x00f42400
 8010034:	007a1200 	.word	0x007a1200
 8010038:	080253f8 	.word	0x080253f8

0801003c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b086      	sub	sp, #24
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010044:	2300      	movs	r3, #0
 8010046:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010048:	2300      	movs	r3, #0
 801004a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010054:	2b00      	cmp	r3, #0
 8010056:	d040      	beq.n	80100da <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801005c:	2b80      	cmp	r3, #128	; 0x80
 801005e:	d02a      	beq.n	80100b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8010060:	2b80      	cmp	r3, #128	; 0x80
 8010062:	d825      	bhi.n	80100b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8010064:	2b60      	cmp	r3, #96	; 0x60
 8010066:	d026      	beq.n	80100b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8010068:	2b60      	cmp	r3, #96	; 0x60
 801006a:	d821      	bhi.n	80100b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 801006c:	2b40      	cmp	r3, #64	; 0x40
 801006e:	d006      	beq.n	801007e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8010070:	2b40      	cmp	r3, #64	; 0x40
 8010072:	d81d      	bhi.n	80100b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8010074:	2b00      	cmp	r3, #0
 8010076:	d009      	beq.n	801008c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8010078:	2b20      	cmp	r3, #32
 801007a:	d010      	beq.n	801009e <HAL_RCCEx_PeriphCLKConfig+0x62>
 801007c:	e018      	b.n	80100b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801007e:	4b89      	ldr	r3, [pc, #548]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010080:	68db      	ldr	r3, [r3, #12]
 8010082:	4a88      	ldr	r2, [pc, #544]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010088:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 801008a:	e015      	b.n	80100b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	3304      	adds	r3, #4
 8010090:	2100      	movs	r1, #0
 8010092:	4618      	mov	r0, r3
 8010094:	f000 fb3e 	bl	8010714 <RCCEx_PLLSAI1_Config>
 8010098:	4603      	mov	r3, r0
 801009a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801009c:	e00c      	b.n	80100b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	3320      	adds	r3, #32
 80100a2:	2100      	movs	r1, #0
 80100a4:	4618      	mov	r0, r3
 80100a6:	f000 fc29 	bl	80108fc <RCCEx_PLLSAI2_Config>
 80100aa:	4603      	mov	r3, r0
 80100ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80100ae:	e003      	b.n	80100b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80100b0:	2301      	movs	r3, #1
 80100b2:	74fb      	strb	r3, [r7, #19]
      break;
 80100b4:	e000      	b.n	80100b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80100b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80100b8:	7cfb      	ldrb	r3, [r7, #19]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d10b      	bne.n	80100d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80100be:	4b79      	ldr	r3, [pc, #484]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80100c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80100c4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100cc:	4975      	ldr	r1, [pc, #468]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80100ce:	4313      	orrs	r3, r2
 80100d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80100d4:	e001      	b.n	80100da <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80100d6:	7cfb      	ldrb	r3, [r7, #19]
 80100d8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d047      	beq.n	8010176 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80100ee:	d030      	beq.n	8010152 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80100f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80100f4:	d82a      	bhi.n	801014c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80100f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80100fa:	d02a      	beq.n	8010152 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80100fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010100:	d824      	bhi.n	801014c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8010102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010106:	d008      	beq.n	801011a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8010108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801010c:	d81e      	bhi.n	801014c <HAL_RCCEx_PeriphCLKConfig+0x110>
 801010e:	2b00      	cmp	r3, #0
 8010110:	d00a      	beq.n	8010128 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8010112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010116:	d010      	beq.n	801013a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8010118:	e018      	b.n	801014c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801011a:	4b62      	ldr	r3, [pc, #392]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 801011c:	68db      	ldr	r3, [r3, #12]
 801011e:	4a61      	ldr	r2, [pc, #388]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010124:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010126:	e015      	b.n	8010154 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	3304      	adds	r3, #4
 801012c:	2100      	movs	r1, #0
 801012e:	4618      	mov	r0, r3
 8010130:	f000 faf0 	bl	8010714 <RCCEx_PLLSAI1_Config>
 8010134:	4603      	mov	r3, r0
 8010136:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010138:	e00c      	b.n	8010154 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	3320      	adds	r3, #32
 801013e:	2100      	movs	r1, #0
 8010140:	4618      	mov	r0, r3
 8010142:	f000 fbdb 	bl	80108fc <RCCEx_PLLSAI2_Config>
 8010146:	4603      	mov	r3, r0
 8010148:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801014a:	e003      	b.n	8010154 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801014c:	2301      	movs	r3, #1
 801014e:	74fb      	strb	r3, [r7, #19]
      break;
 8010150:	e000      	b.n	8010154 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8010152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010154:	7cfb      	ldrb	r3, [r7, #19]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d10b      	bne.n	8010172 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801015a:	4b52      	ldr	r3, [pc, #328]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 801015c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010168:	494e      	ldr	r1, [pc, #312]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 801016a:	4313      	orrs	r3, r2
 801016c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8010170:	e001      	b.n	8010176 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010172:	7cfb      	ldrb	r3, [r7, #19]
 8010174:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801017e:	2b00      	cmp	r3, #0
 8010180:	f000 809f 	beq.w	80102c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010184:	2300      	movs	r3, #0
 8010186:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8010188:	4b46      	ldr	r3, [pc, #280]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 801018a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801018c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010190:	2b00      	cmp	r3, #0
 8010192:	d101      	bne.n	8010198 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8010194:	2301      	movs	r3, #1
 8010196:	e000      	b.n	801019a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8010198:	2300      	movs	r3, #0
 801019a:	2b00      	cmp	r3, #0
 801019c:	d00d      	beq.n	80101ba <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801019e:	4b41      	ldr	r3, [pc, #260]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80101a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101a2:	4a40      	ldr	r2, [pc, #256]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80101a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101a8:	6593      	str	r3, [r2, #88]	; 0x58
 80101aa:	4b3e      	ldr	r3, [pc, #248]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80101ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101b2:	60bb      	str	r3, [r7, #8]
 80101b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80101b6:	2301      	movs	r3, #1
 80101b8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80101ba:	4b3b      	ldr	r3, [pc, #236]	; (80102a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	4a3a      	ldr	r2, [pc, #232]	; (80102a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80101c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80101c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80101c6:	f7fe f877 	bl	800e2b8 <HAL_GetTick>
 80101ca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80101cc:	e009      	b.n	80101e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80101ce:	f7fe f873 	bl	800e2b8 <HAL_GetTick>
 80101d2:	4602      	mov	r2, r0
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	1ad3      	subs	r3, r2, r3
 80101d8:	2b02      	cmp	r3, #2
 80101da:	d902      	bls.n	80101e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80101dc:	2303      	movs	r3, #3
 80101de:	74fb      	strb	r3, [r7, #19]
        break;
 80101e0:	e005      	b.n	80101ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80101e2:	4b31      	ldr	r3, [pc, #196]	; (80102a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d0ef      	beq.n	80101ce <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80101ee:	7cfb      	ldrb	r3, [r7, #19]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d15b      	bne.n	80102ac <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80101f4:	4b2b      	ldr	r3, [pc, #172]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80101f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80101fe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d01f      	beq.n	8010246 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801020c:	697a      	ldr	r2, [r7, #20]
 801020e:	429a      	cmp	r2, r3
 8010210:	d019      	beq.n	8010246 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010212:	4b24      	ldr	r3, [pc, #144]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801021c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801021e:	4b21      	ldr	r3, [pc, #132]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010224:	4a1f      	ldr	r2, [pc, #124]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801022a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801022e:	4b1d      	ldr	r3, [pc, #116]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010234:	4a1b      	ldr	r2, [pc, #108]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801023a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801023e:	4a19      	ldr	r2, [pc, #100]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	f003 0301 	and.w	r3, r3, #1
 801024c:	2b00      	cmp	r3, #0
 801024e:	d016      	beq.n	801027e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010250:	f7fe f832 	bl	800e2b8 <HAL_GetTick>
 8010254:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010256:	e00b      	b.n	8010270 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010258:	f7fe f82e 	bl	800e2b8 <HAL_GetTick>
 801025c:	4602      	mov	r2, r0
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	1ad3      	subs	r3, r2, r3
 8010262:	f241 3288 	movw	r2, #5000	; 0x1388
 8010266:	4293      	cmp	r3, r2
 8010268:	d902      	bls.n	8010270 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 801026a:	2303      	movs	r3, #3
 801026c:	74fb      	strb	r3, [r7, #19]
            break;
 801026e:	e006      	b.n	801027e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010270:	4b0c      	ldr	r3, [pc, #48]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010276:	f003 0302 	and.w	r3, r3, #2
 801027a:	2b00      	cmp	r3, #0
 801027c:	d0ec      	beq.n	8010258 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 801027e:	7cfb      	ldrb	r3, [r7, #19]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d10c      	bne.n	801029e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010284:	4b07      	ldr	r3, [pc, #28]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801028a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010294:	4903      	ldr	r1, [pc, #12]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010296:	4313      	orrs	r3, r2
 8010298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801029c:	e008      	b.n	80102b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801029e:	7cfb      	ldrb	r3, [r7, #19]
 80102a0:	74bb      	strb	r3, [r7, #18]
 80102a2:	e005      	b.n	80102b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80102a4:	40021000 	.word	0x40021000
 80102a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102ac:	7cfb      	ldrb	r3, [r7, #19]
 80102ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80102b0:	7c7b      	ldrb	r3, [r7, #17]
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	d105      	bne.n	80102c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80102b6:	4ba0      	ldr	r3, [pc, #640]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80102b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102ba:	4a9f      	ldr	r2, [pc, #636]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80102bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80102c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	f003 0301 	and.w	r3, r3, #1
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d00a      	beq.n	80102e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80102ce:	4b9a      	ldr	r3, [pc, #616]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80102d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102d4:	f023 0203 	bic.w	r2, r3, #3
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102dc:	4996      	ldr	r1, [pc, #600]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80102de:	4313      	orrs	r3, r2
 80102e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f003 0302 	and.w	r3, r3, #2
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00a      	beq.n	8010306 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80102f0:	4b91      	ldr	r3, [pc, #580]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80102f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102f6:	f023 020c 	bic.w	r2, r3, #12
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102fe:	498e      	ldr	r1, [pc, #568]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010300:	4313      	orrs	r3, r2
 8010302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	f003 0304 	and.w	r3, r3, #4
 801030e:	2b00      	cmp	r3, #0
 8010310:	d00a      	beq.n	8010328 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010312:	4b89      	ldr	r3, [pc, #548]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010318:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010320:	4985      	ldr	r1, [pc, #532]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010322:	4313      	orrs	r3, r2
 8010324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	f003 0308 	and.w	r3, r3, #8
 8010330:	2b00      	cmp	r3, #0
 8010332:	d00a      	beq.n	801034a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8010334:	4b80      	ldr	r3, [pc, #512]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801033a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010342:	497d      	ldr	r1, [pc, #500]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010344:	4313      	orrs	r3, r2
 8010346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	f003 0310 	and.w	r3, r3, #16
 8010352:	2b00      	cmp	r3, #0
 8010354:	d00a      	beq.n	801036c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8010356:	4b78      	ldr	r3, [pc, #480]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801035c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010364:	4974      	ldr	r1, [pc, #464]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010366:	4313      	orrs	r3, r2
 8010368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	f003 0320 	and.w	r3, r3, #32
 8010374:	2b00      	cmp	r3, #0
 8010376:	d00a      	beq.n	801038e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010378:	4b6f      	ldr	r3, [pc, #444]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801037a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801037e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010386:	496c      	ldr	r1, [pc, #432]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010388:	4313      	orrs	r3, r2
 801038a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010396:	2b00      	cmp	r3, #0
 8010398:	d00a      	beq.n	80103b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801039a:	4b67      	ldr	r3, [pc, #412]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801039c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103a8:	4963      	ldr	r1, [pc, #396]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80103aa:	4313      	orrs	r3, r2
 80103ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d00a      	beq.n	80103d2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80103bc:	4b5e      	ldr	r3, [pc, #376]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80103be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80103ca:	495b      	ldr	r1, [pc, #364]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80103cc:	4313      	orrs	r3, r2
 80103ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d00a      	beq.n	80103f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80103de:	4b56      	ldr	r3, [pc, #344]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80103e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103ec:	4952      	ldr	r1, [pc, #328]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80103ee:	4313      	orrs	r3, r2
 80103f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d00a      	beq.n	8010416 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8010400:	4b4d      	ldr	r3, [pc, #308]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010406:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801040e:	494a      	ldr	r1, [pc, #296]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010410:	4313      	orrs	r3, r2
 8010412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00a      	beq.n	8010438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010422:	4b45      	ldr	r3, [pc, #276]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010428:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010430:	4941      	ldr	r1, [pc, #260]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010432:	4313      	orrs	r3, r2
 8010434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010440:	2b00      	cmp	r3, #0
 8010442:	d00a      	beq.n	801045a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010444:	4b3c      	ldr	r3, [pc, #240]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010446:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801044a:	f023 0203 	bic.w	r2, r3, #3
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010452:	4939      	ldr	r1, [pc, #228]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010454:	4313      	orrs	r3, r2
 8010456:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010462:	2b00      	cmp	r3, #0
 8010464:	d028      	beq.n	80104b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010466:	4b34      	ldr	r3, [pc, #208]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801046c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010474:	4930      	ldr	r1, [pc, #192]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010476:	4313      	orrs	r3, r2
 8010478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010484:	d106      	bne.n	8010494 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010486:	4b2c      	ldr	r3, [pc, #176]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	4a2b      	ldr	r2, [pc, #172]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801048c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010490:	60d3      	str	r3, [r2, #12]
 8010492:	e011      	b.n	80104b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801049c:	d10c      	bne.n	80104b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	3304      	adds	r3, #4
 80104a2:	2101      	movs	r1, #1
 80104a4:	4618      	mov	r0, r3
 80104a6:	f000 f935 	bl	8010714 <RCCEx_PLLSAI1_Config>
 80104aa:	4603      	mov	r3, r0
 80104ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80104ae:	7cfb      	ldrb	r3, [r7, #19]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d001      	beq.n	80104b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80104b4:	7cfb      	ldrb	r3, [r7, #19]
 80104b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d04d      	beq.n	8010560 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80104cc:	d108      	bne.n	80104e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80104ce:	4b1a      	ldr	r3, [pc, #104]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80104d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80104d4:	4a18      	ldr	r2, [pc, #96]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80104d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80104da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80104de:	e012      	b.n	8010506 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80104e0:	4b15      	ldr	r3, [pc, #84]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80104e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80104e6:	4a14      	ldr	r2, [pc, #80]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80104e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80104ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80104f0:	4b11      	ldr	r3, [pc, #68]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80104f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104fe:	490e      	ldr	r1, [pc, #56]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010500:	4313      	orrs	r3, r2
 8010502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801050a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801050e:	d106      	bne.n	801051e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010510:	4b09      	ldr	r3, [pc, #36]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010512:	68db      	ldr	r3, [r3, #12]
 8010514:	4a08      	ldr	r2, [pc, #32]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801051a:	60d3      	str	r3, [r2, #12]
 801051c:	e020      	b.n	8010560 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010522:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010526:	d109      	bne.n	801053c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010528:	4b03      	ldr	r3, [pc, #12]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801052a:	68db      	ldr	r3, [r3, #12]
 801052c:	4a02      	ldr	r2, [pc, #8]	; (8010538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801052e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010532:	60d3      	str	r3, [r2, #12]
 8010534:	e014      	b.n	8010560 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8010536:	bf00      	nop
 8010538:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010540:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010544:	d10c      	bne.n	8010560 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	3304      	adds	r3, #4
 801054a:	2101      	movs	r1, #1
 801054c:	4618      	mov	r0, r3
 801054e:	f000 f8e1 	bl	8010714 <RCCEx_PLLSAI1_Config>
 8010552:	4603      	mov	r3, r0
 8010554:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010556:	7cfb      	ldrb	r3, [r7, #19]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d001      	beq.n	8010560 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 801055c:	7cfb      	ldrb	r3, [r7, #19]
 801055e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010568:	2b00      	cmp	r3, #0
 801056a:	d028      	beq.n	80105be <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801056c:	4b68      	ldr	r3, [pc, #416]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 801056e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010572:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801057a:	4965      	ldr	r1, [pc, #404]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 801057c:	4313      	orrs	r3, r2
 801057e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801058a:	d106      	bne.n	801059a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801058c:	4b60      	ldr	r3, [pc, #384]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 801058e:	68db      	ldr	r3, [r3, #12]
 8010590:	4a5f      	ldr	r2, [pc, #380]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010596:	60d3      	str	r3, [r2, #12]
 8010598:	e011      	b.n	80105be <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801059e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80105a2:	d10c      	bne.n	80105be <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	3304      	adds	r3, #4
 80105a8:	2101      	movs	r1, #1
 80105aa:	4618      	mov	r0, r3
 80105ac:	f000 f8b2 	bl	8010714 <RCCEx_PLLSAI1_Config>
 80105b0:	4603      	mov	r3, r0
 80105b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80105b4:	7cfb      	ldrb	r3, [r7, #19]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d001      	beq.n	80105be <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80105ba:	7cfb      	ldrb	r3, [r7, #19]
 80105bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d01e      	beq.n	8010608 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80105ca:	4b51      	ldr	r3, [pc, #324]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80105cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105da:	494d      	ldr	r1, [pc, #308]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80105dc:	4313      	orrs	r3, r2
 80105de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80105ec:	d10c      	bne.n	8010608 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	3304      	adds	r3, #4
 80105f2:	2102      	movs	r1, #2
 80105f4:	4618      	mov	r0, r3
 80105f6:	f000 f88d 	bl	8010714 <RCCEx_PLLSAI1_Config>
 80105fa:	4603      	mov	r3, r0
 80105fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80105fe:	7cfb      	ldrb	r3, [r7, #19]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d001      	beq.n	8010608 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8010604:	7cfb      	ldrb	r3, [r7, #19]
 8010606:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010610:	2b00      	cmp	r3, #0
 8010612:	d00b      	beq.n	801062c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010614:	4b3e      	ldr	r3, [pc, #248]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010616:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801061a:	f023 0204 	bic.w	r2, r3, #4
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010624:	493a      	ldr	r1, [pc, #232]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010626:	4313      	orrs	r3, r2
 8010628:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010634:	2b00      	cmp	r3, #0
 8010636:	d00b      	beq.n	8010650 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8010638:	4b35      	ldr	r3, [pc, #212]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 801063a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801063e:	f023 0218 	bic.w	r2, r3, #24
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010648:	4931      	ldr	r1, [pc, #196]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 801064a:	4313      	orrs	r3, r2
 801064c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010658:	2b00      	cmp	r3, #0
 801065a:	d035      	beq.n	80106c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 801065c:	4b2c      	ldr	r3, [pc, #176]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4a2b      	ldr	r2, [pc, #172]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010668:	f7fd fe26 	bl	800e2b8 <HAL_GetTick>
 801066c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801066e:	e009      	b.n	8010684 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010670:	f7fd fe22 	bl	800e2b8 <HAL_GetTick>
 8010674:	4602      	mov	r2, r0
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	1ad3      	subs	r3, r2, r3
 801067a:	2b02      	cmp	r3, #2
 801067c:	d902      	bls.n	8010684 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 801067e:	2303      	movs	r3, #3
 8010680:	74fb      	strb	r3, [r7, #19]
        break;
 8010682:	e005      	b.n	8010690 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010684:	4b22      	ldr	r3, [pc, #136]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801068c:	2b00      	cmp	r3, #0
 801068e:	d1ef      	bne.n	8010670 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8010690:	7cfb      	ldrb	r3, [r7, #19]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d113      	bne.n	80106be <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8010696:	4b1e      	ldr	r3, [pc, #120]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010698:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801069c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106a6:	491a      	ldr	r1, [pc, #104]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80106a8:	4313      	orrs	r3, r2
 80106aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	3320      	adds	r3, #32
 80106b2:	2102      	movs	r1, #2
 80106b4:	4618      	mov	r0, r3
 80106b6:	f000 f921 	bl	80108fc <RCCEx_PLLSAI2_Config>
 80106ba:	4603      	mov	r3, r0
 80106bc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80106be:	7cfb      	ldrb	r3, [r7, #19]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d001      	beq.n	80106c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80106c4:	7cfb      	ldrb	r3, [r7, #19]
 80106c6:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d017      	beq.n	8010704 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80106d4:	4b0e      	ldr	r3, [pc, #56]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80106d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80106da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106e4:	490a      	ldr	r1, [pc, #40]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80106e6:	4313      	orrs	r3, r2
 80106e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80106f6:	d105      	bne.n	8010704 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80106f8:	4b05      	ldr	r3, [pc, #20]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80106fa:	68db      	ldr	r3, [r3, #12]
 80106fc:	4a04      	ldr	r2, [pc, #16]	; (8010710 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80106fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010702:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8010704:	7cbb      	ldrb	r3, [r7, #18]
}
 8010706:	4618      	mov	r0, r3
 8010708:	3718      	adds	r7, #24
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
 801070e:	bf00      	nop
 8010710:	40021000 	.word	0x40021000

08010714 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801071e:	2300      	movs	r3, #0
 8010720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010722:	4b72      	ldr	r3, [pc, #456]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	f003 0303 	and.w	r3, r3, #3
 801072a:	2b00      	cmp	r3, #0
 801072c:	d00e      	beq.n	801074c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801072e:	4b6f      	ldr	r3, [pc, #444]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8010730:	68db      	ldr	r3, [r3, #12]
 8010732:	f003 0203 	and.w	r2, r3, #3
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	429a      	cmp	r2, r3
 801073c:	d103      	bne.n	8010746 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
       ||
 8010742:	2b00      	cmp	r3, #0
 8010744:	d142      	bne.n	80107cc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8010746:	2301      	movs	r3, #1
 8010748:	73fb      	strb	r3, [r7, #15]
 801074a:	e03f      	b.n	80107cc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	2b03      	cmp	r3, #3
 8010752:	d018      	beq.n	8010786 <RCCEx_PLLSAI1_Config+0x72>
 8010754:	2b03      	cmp	r3, #3
 8010756:	d825      	bhi.n	80107a4 <RCCEx_PLLSAI1_Config+0x90>
 8010758:	2b01      	cmp	r3, #1
 801075a:	d002      	beq.n	8010762 <RCCEx_PLLSAI1_Config+0x4e>
 801075c:	2b02      	cmp	r3, #2
 801075e:	d009      	beq.n	8010774 <RCCEx_PLLSAI1_Config+0x60>
 8010760:	e020      	b.n	80107a4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010762:	4b62      	ldr	r3, [pc, #392]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	f003 0302 	and.w	r3, r3, #2
 801076a:	2b00      	cmp	r3, #0
 801076c:	d11d      	bne.n	80107aa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 801076e:	2301      	movs	r3, #1
 8010770:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010772:	e01a      	b.n	80107aa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010774:	4b5d      	ldr	r3, [pc, #372]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801077c:	2b00      	cmp	r3, #0
 801077e:	d116      	bne.n	80107ae <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8010780:	2301      	movs	r3, #1
 8010782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010784:	e013      	b.n	80107ae <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010786:	4b59      	ldr	r3, [pc, #356]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801078e:	2b00      	cmp	r3, #0
 8010790:	d10f      	bne.n	80107b2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010792:	4b56      	ldr	r3, [pc, #344]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801079a:	2b00      	cmp	r3, #0
 801079c:	d109      	bne.n	80107b2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 801079e:	2301      	movs	r3, #1
 80107a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80107a2:	e006      	b.n	80107b2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80107a4:	2301      	movs	r3, #1
 80107a6:	73fb      	strb	r3, [r7, #15]
      break;
 80107a8:	e004      	b.n	80107b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80107aa:	bf00      	nop
 80107ac:	e002      	b.n	80107b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80107ae:	bf00      	nop
 80107b0:	e000      	b.n	80107b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80107b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80107b4:	7bfb      	ldrb	r3, [r7, #15]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d108      	bne.n	80107cc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80107ba:	4b4c      	ldr	r3, [pc, #304]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80107bc:	68db      	ldr	r3, [r3, #12]
 80107be:	f023 0203 	bic.w	r2, r3, #3
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	4949      	ldr	r1, [pc, #292]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80107c8:	4313      	orrs	r3, r2
 80107ca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80107cc:	7bfb      	ldrb	r3, [r7, #15]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	f040 8086 	bne.w	80108e0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80107d4:	4b45      	ldr	r3, [pc, #276]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	4a44      	ldr	r2, [pc, #272]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80107da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80107de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80107e0:	f7fd fd6a 	bl	800e2b8 <HAL_GetTick>
 80107e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80107e6:	e009      	b.n	80107fc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80107e8:	f7fd fd66 	bl	800e2b8 <HAL_GetTick>
 80107ec:	4602      	mov	r2, r0
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	1ad3      	subs	r3, r2, r3
 80107f2:	2b02      	cmp	r3, #2
 80107f4:	d902      	bls.n	80107fc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80107f6:	2303      	movs	r3, #3
 80107f8:	73fb      	strb	r3, [r7, #15]
        break;
 80107fa:	e005      	b.n	8010808 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80107fc:	4b3b      	ldr	r3, [pc, #236]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010804:	2b00      	cmp	r3, #0
 8010806:	d1ef      	bne.n	80107e8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8010808:	7bfb      	ldrb	r3, [r7, #15]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d168      	bne.n	80108e0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d113      	bne.n	801083c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010814:	4b35      	ldr	r3, [pc, #212]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8010816:	691a      	ldr	r2, [r3, #16]
 8010818:	4b35      	ldr	r3, [pc, #212]	; (80108f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 801081a:	4013      	ands	r3, r2
 801081c:	687a      	ldr	r2, [r7, #4]
 801081e:	6892      	ldr	r2, [r2, #8]
 8010820:	0211      	lsls	r1, r2, #8
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	68d2      	ldr	r2, [r2, #12]
 8010826:	06d2      	lsls	r2, r2, #27
 8010828:	4311      	orrs	r1, r2
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	6852      	ldr	r2, [r2, #4]
 801082e:	3a01      	subs	r2, #1
 8010830:	0112      	lsls	r2, r2, #4
 8010832:	430a      	orrs	r2, r1
 8010834:	492d      	ldr	r1, [pc, #180]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8010836:	4313      	orrs	r3, r2
 8010838:	610b      	str	r3, [r1, #16]
 801083a:	e02d      	b.n	8010898 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	2b01      	cmp	r3, #1
 8010840:	d115      	bne.n	801086e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010842:	4b2a      	ldr	r3, [pc, #168]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8010844:	691a      	ldr	r2, [r3, #16]
 8010846:	4b2b      	ldr	r3, [pc, #172]	; (80108f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010848:	4013      	ands	r3, r2
 801084a:	687a      	ldr	r2, [r7, #4]
 801084c:	6892      	ldr	r2, [r2, #8]
 801084e:	0211      	lsls	r1, r2, #8
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	6912      	ldr	r2, [r2, #16]
 8010854:	0852      	lsrs	r2, r2, #1
 8010856:	3a01      	subs	r2, #1
 8010858:	0552      	lsls	r2, r2, #21
 801085a:	4311      	orrs	r1, r2
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	6852      	ldr	r2, [r2, #4]
 8010860:	3a01      	subs	r2, #1
 8010862:	0112      	lsls	r2, r2, #4
 8010864:	430a      	orrs	r2, r1
 8010866:	4921      	ldr	r1, [pc, #132]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8010868:	4313      	orrs	r3, r2
 801086a:	610b      	str	r3, [r1, #16]
 801086c:	e014      	b.n	8010898 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801086e:	4b1f      	ldr	r3, [pc, #124]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8010870:	691a      	ldr	r2, [r3, #16]
 8010872:	4b21      	ldr	r3, [pc, #132]	; (80108f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010874:	4013      	ands	r3, r2
 8010876:	687a      	ldr	r2, [r7, #4]
 8010878:	6892      	ldr	r2, [r2, #8]
 801087a:	0211      	lsls	r1, r2, #8
 801087c:	687a      	ldr	r2, [r7, #4]
 801087e:	6952      	ldr	r2, [r2, #20]
 8010880:	0852      	lsrs	r2, r2, #1
 8010882:	3a01      	subs	r2, #1
 8010884:	0652      	lsls	r2, r2, #25
 8010886:	4311      	orrs	r1, r2
 8010888:	687a      	ldr	r2, [r7, #4]
 801088a:	6852      	ldr	r2, [r2, #4]
 801088c:	3a01      	subs	r2, #1
 801088e:	0112      	lsls	r2, r2, #4
 8010890:	430a      	orrs	r2, r1
 8010892:	4916      	ldr	r1, [pc, #88]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8010894:	4313      	orrs	r3, r2
 8010896:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8010898:	4b14      	ldr	r3, [pc, #80]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	4a13      	ldr	r2, [pc, #76]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 801089e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80108a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80108a4:	f7fd fd08 	bl	800e2b8 <HAL_GetTick>
 80108a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80108aa:	e009      	b.n	80108c0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80108ac:	f7fd fd04 	bl	800e2b8 <HAL_GetTick>
 80108b0:	4602      	mov	r2, r0
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	1ad3      	subs	r3, r2, r3
 80108b6:	2b02      	cmp	r3, #2
 80108b8:	d902      	bls.n	80108c0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80108ba:	2303      	movs	r3, #3
 80108bc:	73fb      	strb	r3, [r7, #15]
          break;
 80108be:	e005      	b.n	80108cc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80108c0:	4b0a      	ldr	r3, [pc, #40]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d0ef      	beq.n	80108ac <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80108cc:	7bfb      	ldrb	r3, [r7, #15]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d106      	bne.n	80108e0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80108d2:	4b06      	ldr	r3, [pc, #24]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80108d4:	691a      	ldr	r2, [r3, #16]
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	699b      	ldr	r3, [r3, #24]
 80108da:	4904      	ldr	r1, [pc, #16]	; (80108ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80108dc:	4313      	orrs	r3, r2
 80108de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80108e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3710      	adds	r7, #16
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}
 80108ea:	bf00      	nop
 80108ec:	40021000 	.word	0x40021000
 80108f0:	07ff800f 	.word	0x07ff800f
 80108f4:	ff9f800f 	.word	0xff9f800f
 80108f8:	f9ff800f 	.word	0xf9ff800f

080108fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010906:	2300      	movs	r3, #0
 8010908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801090a:	4b72      	ldr	r3, [pc, #456]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 801090c:	68db      	ldr	r3, [r3, #12]
 801090e:	f003 0303 	and.w	r3, r3, #3
 8010912:	2b00      	cmp	r3, #0
 8010914:	d00e      	beq.n	8010934 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8010916:	4b6f      	ldr	r3, [pc, #444]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8010918:	68db      	ldr	r3, [r3, #12]
 801091a:	f003 0203 	and.w	r2, r3, #3
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	429a      	cmp	r2, r3
 8010924:	d103      	bne.n	801092e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
       ||
 801092a:	2b00      	cmp	r3, #0
 801092c:	d142      	bne.n	80109b4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 801092e:	2301      	movs	r3, #1
 8010930:	73fb      	strb	r3, [r7, #15]
 8010932:	e03f      	b.n	80109b4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2b03      	cmp	r3, #3
 801093a:	d018      	beq.n	801096e <RCCEx_PLLSAI2_Config+0x72>
 801093c:	2b03      	cmp	r3, #3
 801093e:	d825      	bhi.n	801098c <RCCEx_PLLSAI2_Config+0x90>
 8010940:	2b01      	cmp	r3, #1
 8010942:	d002      	beq.n	801094a <RCCEx_PLLSAI2_Config+0x4e>
 8010944:	2b02      	cmp	r3, #2
 8010946:	d009      	beq.n	801095c <RCCEx_PLLSAI2_Config+0x60>
 8010948:	e020      	b.n	801098c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801094a:	4b62      	ldr	r3, [pc, #392]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f003 0302 	and.w	r3, r3, #2
 8010952:	2b00      	cmp	r3, #0
 8010954:	d11d      	bne.n	8010992 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8010956:	2301      	movs	r3, #1
 8010958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801095a:	e01a      	b.n	8010992 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801095c:	4b5d      	ldr	r3, [pc, #372]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010964:	2b00      	cmp	r3, #0
 8010966:	d116      	bne.n	8010996 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8010968:	2301      	movs	r3, #1
 801096a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801096c:	e013      	b.n	8010996 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801096e:	4b59      	ldr	r3, [pc, #356]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010976:	2b00      	cmp	r3, #0
 8010978:	d10f      	bne.n	801099a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801097a:	4b56      	ldr	r3, [pc, #344]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010982:	2b00      	cmp	r3, #0
 8010984:	d109      	bne.n	801099a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8010986:	2301      	movs	r3, #1
 8010988:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801098a:	e006      	b.n	801099a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 801098c:	2301      	movs	r3, #1
 801098e:	73fb      	strb	r3, [r7, #15]
      break;
 8010990:	e004      	b.n	801099c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8010992:	bf00      	nop
 8010994:	e002      	b.n	801099c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8010996:	bf00      	nop
 8010998:	e000      	b.n	801099c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 801099a:	bf00      	nop
    }

    if(status == HAL_OK)
 801099c:	7bfb      	ldrb	r3, [r7, #15]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d108      	bne.n	80109b4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80109a2:	4b4c      	ldr	r3, [pc, #304]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80109a4:	68db      	ldr	r3, [r3, #12]
 80109a6:	f023 0203 	bic.w	r2, r3, #3
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	4949      	ldr	r1, [pc, #292]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80109b0:	4313      	orrs	r3, r2
 80109b2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80109b4:	7bfb      	ldrb	r3, [r7, #15]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	f040 8086 	bne.w	8010ac8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80109bc:	4b45      	ldr	r3, [pc, #276]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	4a44      	ldr	r2, [pc, #272]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80109c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80109c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80109c8:	f7fd fc76 	bl	800e2b8 <HAL_GetTick>
 80109cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80109ce:	e009      	b.n	80109e4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80109d0:	f7fd fc72 	bl	800e2b8 <HAL_GetTick>
 80109d4:	4602      	mov	r2, r0
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	1ad3      	subs	r3, r2, r3
 80109da:	2b02      	cmp	r3, #2
 80109dc:	d902      	bls.n	80109e4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80109de:	2303      	movs	r3, #3
 80109e0:	73fb      	strb	r3, [r7, #15]
        break;
 80109e2:	e005      	b.n	80109f0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80109e4:	4b3b      	ldr	r3, [pc, #236]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d1ef      	bne.n	80109d0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80109f0:	7bfb      	ldrb	r3, [r7, #15]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d168      	bne.n	8010ac8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d113      	bne.n	8010a24 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80109fc:	4b35      	ldr	r3, [pc, #212]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80109fe:	695a      	ldr	r2, [r3, #20]
 8010a00:	4b35      	ldr	r3, [pc, #212]	; (8010ad8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8010a02:	4013      	ands	r3, r2
 8010a04:	687a      	ldr	r2, [r7, #4]
 8010a06:	6892      	ldr	r2, [r2, #8]
 8010a08:	0211      	lsls	r1, r2, #8
 8010a0a:	687a      	ldr	r2, [r7, #4]
 8010a0c:	68d2      	ldr	r2, [r2, #12]
 8010a0e:	06d2      	lsls	r2, r2, #27
 8010a10:	4311      	orrs	r1, r2
 8010a12:	687a      	ldr	r2, [r7, #4]
 8010a14:	6852      	ldr	r2, [r2, #4]
 8010a16:	3a01      	subs	r2, #1
 8010a18:	0112      	lsls	r2, r2, #4
 8010a1a:	430a      	orrs	r2, r1
 8010a1c:	492d      	ldr	r1, [pc, #180]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	614b      	str	r3, [r1, #20]
 8010a22:	e02d      	b.n	8010a80 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	2b01      	cmp	r3, #1
 8010a28:	d115      	bne.n	8010a56 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010a2a:	4b2a      	ldr	r3, [pc, #168]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8010a2c:	695a      	ldr	r2, [r3, #20]
 8010a2e:	4b2b      	ldr	r3, [pc, #172]	; (8010adc <RCCEx_PLLSAI2_Config+0x1e0>)
 8010a30:	4013      	ands	r3, r2
 8010a32:	687a      	ldr	r2, [r7, #4]
 8010a34:	6892      	ldr	r2, [r2, #8]
 8010a36:	0211      	lsls	r1, r2, #8
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	6912      	ldr	r2, [r2, #16]
 8010a3c:	0852      	lsrs	r2, r2, #1
 8010a3e:	3a01      	subs	r2, #1
 8010a40:	0552      	lsls	r2, r2, #21
 8010a42:	4311      	orrs	r1, r2
 8010a44:	687a      	ldr	r2, [r7, #4]
 8010a46:	6852      	ldr	r2, [r2, #4]
 8010a48:	3a01      	subs	r2, #1
 8010a4a:	0112      	lsls	r2, r2, #4
 8010a4c:	430a      	orrs	r2, r1
 8010a4e:	4921      	ldr	r1, [pc, #132]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8010a50:	4313      	orrs	r3, r2
 8010a52:	614b      	str	r3, [r1, #20]
 8010a54:	e014      	b.n	8010a80 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010a56:	4b1f      	ldr	r3, [pc, #124]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8010a58:	695a      	ldr	r2, [r3, #20]
 8010a5a:	4b21      	ldr	r3, [pc, #132]	; (8010ae0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8010a5c:	4013      	ands	r3, r2
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	6892      	ldr	r2, [r2, #8]
 8010a62:	0211      	lsls	r1, r2, #8
 8010a64:	687a      	ldr	r2, [r7, #4]
 8010a66:	6952      	ldr	r2, [r2, #20]
 8010a68:	0852      	lsrs	r2, r2, #1
 8010a6a:	3a01      	subs	r2, #1
 8010a6c:	0652      	lsls	r2, r2, #25
 8010a6e:	4311      	orrs	r1, r2
 8010a70:	687a      	ldr	r2, [r7, #4]
 8010a72:	6852      	ldr	r2, [r2, #4]
 8010a74:	3a01      	subs	r2, #1
 8010a76:	0112      	lsls	r2, r2, #4
 8010a78:	430a      	orrs	r2, r1
 8010a7a:	4916      	ldr	r1, [pc, #88]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8010a7c:	4313      	orrs	r3, r2
 8010a7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8010a80:	4b14      	ldr	r3, [pc, #80]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	4a13      	ldr	r2, [pc, #76]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8010a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a8c:	f7fd fc14 	bl	800e2b8 <HAL_GetTick>
 8010a90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010a92:	e009      	b.n	8010aa8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010a94:	f7fd fc10 	bl	800e2b8 <HAL_GetTick>
 8010a98:	4602      	mov	r2, r0
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	1ad3      	subs	r3, r2, r3
 8010a9e:	2b02      	cmp	r3, #2
 8010aa0:	d902      	bls.n	8010aa8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8010aa2:	2303      	movs	r3, #3
 8010aa4:	73fb      	strb	r3, [r7, #15]
          break;
 8010aa6:	e005      	b.n	8010ab4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010aa8:	4b0a      	ldr	r3, [pc, #40]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d0ef      	beq.n	8010a94 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8010ab4:	7bfb      	ldrb	r3, [r7, #15]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d106      	bne.n	8010ac8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8010aba:	4b06      	ldr	r3, [pc, #24]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8010abc:	695a      	ldr	r2, [r3, #20]
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	699b      	ldr	r3, [r3, #24]
 8010ac2:	4904      	ldr	r1, [pc, #16]	; (8010ad4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8010ac4:	4313      	orrs	r3, r2
 8010ac6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8010ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3710      	adds	r7, #16
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	40021000 	.word	0x40021000
 8010ad8:	07ff800f 	.word	0x07ff800f
 8010adc:	ff9f800f 	.word	0xff9f800f
 8010ae0:	f9ff800f 	.word	0xf9ff800f

08010ae4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b084      	sub	sp, #16
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010aec:	2301      	movs	r3, #1
 8010aee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d07f      	beq.n	8010bf6 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010afc:	b2db      	uxtb	r3, r3
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d106      	bne.n	8010b10 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2200      	movs	r2, #0
 8010b06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f7fc fbfc 	bl	800d308 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8010b16:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2202      	movs	r2, #2
 8010b1c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	22ca      	movs	r2, #202	; 0xca
 8010b26:	625a      	str	r2, [r3, #36]	; 0x24
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	2253      	movs	r2, #83	; 0x53
 8010b2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f000 fa65 	bl	8011000 <RTC_EnterInitMode>
 8010b36:	4603      	mov	r3, r0
 8010b38:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8010b3a:	7bfb      	ldrb	r3, [r7, #15]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d15a      	bne.n	8010bf6 <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	699b      	ldr	r3, [r3, #24]
 8010b46:	687a      	ldr	r2, [r7, #4]
 8010b48:	6812      	ldr	r2, [r2, #0]
 8010b4a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8010b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b52:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	6999      	ldr	r1, [r3, #24]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	689a      	ldr	r2, [r3, #8]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	695b      	ldr	r3, [r3, #20]
 8010b62:	431a      	orrs	r2, r3
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	69db      	ldr	r3, [r3, #28]
 8010b68:	431a      	orrs	r2, r3
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	430a      	orrs	r2, r1
 8010b70:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	687a      	ldr	r2, [r7, #4]
 8010b78:	6912      	ldr	r2, [r2, #16]
 8010b7a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	6919      	ldr	r1, [r3, #16]
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	68db      	ldr	r3, [r3, #12]
 8010b86:	041a      	lsls	r2, r3, #16
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	430a      	orrs	r2, r1
 8010b8e:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8010b90:	4b1b      	ldr	r3, [pc, #108]	; (8010c00 <HAL_RTC_Init+0x11c>)
 8010b92:	68db      	ldr	r3, [r3, #12]
 8010b94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ba0:	430b      	orrs	r3, r1
 8010ba2:	4917      	ldr	r1, [pc, #92]	; (8010c00 <HAL_RTC_Init+0x11c>)
 8010ba4:	4313      	orrs	r3, r2
 8010ba6:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f000 fa5f 	bl	801106c <RTC_ExitInitMode>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010bb2:	7bfb      	ldrb	r3, [r7, #15]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d11e      	bne.n	8010bf6 <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	699a      	ldr	r2, [r3, #24]
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8010bc6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	6999      	ldr	r1, [r3, #24]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6a1b      	ldr	r3, [r3, #32]
 8010bd6:	431a      	orrs	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	699b      	ldr	r3, [r3, #24]
 8010bdc:	431a      	orrs	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	430a      	orrs	r2, r1
 8010be4:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	22ff      	movs	r2, #255	; 0xff
 8010bec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 8010bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3710      	adds	r7, #16
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}
 8010c00:	40002800 	.word	0x40002800

08010c04 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010c04:	b590      	push	{r4, r7, lr}
 8010c06:	b087      	sub	sp, #28
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	60f8      	str	r0, [r7, #12]
 8010c0c:	60b9      	str	r1, [r7, #8]
 8010c0e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c16:	2b01      	cmp	r3, #1
 8010c18:	d101      	bne.n	8010c1e <HAL_RTC_SetTime+0x1a>
 8010c1a:	2302      	movs	r3, #2
 8010c1c:	e08b      	b.n	8010d36 <HAL_RTC_SetTime+0x132>
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	2201      	movs	r2, #1
 8010c22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2202      	movs	r2, #2
 8010c2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	22ca      	movs	r2, #202	; 0xca
 8010c34:	625a      	str	r2, [r3, #36]	; 0x24
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	2253      	movs	r2, #83	; 0x53
 8010c3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010c3e:	68f8      	ldr	r0, [r7, #12]
 8010c40:	f000 f9de 	bl	8011000 <RTC_EnterInitMode>
 8010c44:	4603      	mov	r3, r0
 8010c46:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010c48:	7cfb      	ldrb	r3, [r7, #19]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d15e      	bne.n	8010d0c <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8010c4e:	4b3c      	ldr	r3, [pc, #240]	; (8010d40 <HAL_RTC_SetTime+0x13c>)
 8010c50:	68db      	ldr	r3, [r3, #12]
 8010c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c5a:	d057      	beq.n	8010d0c <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d125      	bne.n	8010cae <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8010c62:	4b37      	ldr	r3, [pc, #220]	; (8010d40 <HAL_RTC_SetTime+0x13c>)
 8010c64:	699b      	ldr	r3, [r3, #24]
 8010c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d102      	bne.n	8010c74 <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	2200      	movs	r2, #0
 8010c72:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f000 fa35 	bl	80110e8 <RTC_ByteToBcd2>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	785b      	ldrb	r3, [r3, #1]
 8010c86:	4618      	mov	r0, r3
 8010c88:	f000 fa2e 	bl	80110e8 <RTC_ByteToBcd2>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010c90:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	789b      	ldrb	r3, [r3, #2]
 8010c96:	4618      	mov	r0, r3
 8010c98:	f000 fa26 	bl	80110e8 <RTC_ByteToBcd2>
 8010c9c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010c9e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	78db      	ldrb	r3, [r3, #3]
 8010ca6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	617b      	str	r3, [r7, #20]
 8010cac:	e017      	b.n	8010cde <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8010cae:	4b24      	ldr	r3, [pc, #144]	; (8010d40 <HAL_RTC_SetTime+0x13c>)
 8010cb0:	699b      	ldr	r3, [r3, #24]
 8010cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d102      	bne.n	8010cc0 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	781b      	ldrb	r3, [r3, #0]
 8010cc4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	785b      	ldrb	r3, [r3, #1]
 8010cca:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010ccc:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8010cce:	68ba      	ldr	r2, [r7, #8]
 8010cd0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010cd2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	78db      	ldrb	r3, [r3, #3]
 8010cd8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010cda:	4313      	orrs	r3, r2
 8010cdc:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8010cde:	4a18      	ldr	r2, [pc, #96]	; (8010d40 <HAL_RTC_SetTime+0x13c>)
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8010ce6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010cea:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8010cec:	4b14      	ldr	r3, [pc, #80]	; (8010d40 <HAL_RTC_SetTime+0x13c>)
 8010cee:	699b      	ldr	r3, [r3, #24]
 8010cf0:	4a13      	ldr	r2, [pc, #76]	; (8010d40 <HAL_RTC_SetTime+0x13c>)
 8010cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010cf6:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8010cf8:	4b11      	ldr	r3, [pc, #68]	; (8010d40 <HAL_RTC_SetTime+0x13c>)
 8010cfa:	699a      	ldr	r2, [r3, #24]
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	68d9      	ldr	r1, [r3, #12]
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	691b      	ldr	r3, [r3, #16]
 8010d04:	430b      	orrs	r3, r1
 8010d06:	490e      	ldr	r1, [pc, #56]	; (8010d40 <HAL_RTC_SetTime+0x13c>)
 8010d08:	4313      	orrs	r3, r2
 8010d0a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8010d0c:	68f8      	ldr	r0, [r7, #12]
 8010d0e:	f000 f9ad 	bl	801106c <RTC_ExitInitMode>
 8010d12:	4603      	mov	r3, r0
 8010d14:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	22ff      	movs	r2, #255	; 0xff
 8010d1c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010d1e:	7cfb      	ldrb	r3, [r7, #19]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d103      	bne.n	8010d2c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	2201      	movs	r2, #1
 8010d28:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8010d34:	7cfb      	ldrb	r3, [r7, #19]
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	371c      	adds	r7, #28
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd90      	pop	{r4, r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	40002800 	.word	0x40002800

08010d44 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b086      	sub	sp, #24
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8010d50:	4b2c      	ldr	r3, [pc, #176]	; (8010e04 <HAL_RTC_GetTime+0xc0>)
 8010d52:	689a      	ldr	r2, [r3, #8]
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8010d58:	4b2a      	ldr	r3, [pc, #168]	; (8010e04 <HAL_RTC_GetTime+0xc0>)
 8010d5a:	68db      	ldr	r3, [r3, #12]
 8010d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d64:	d049      	beq.n	8010dfa <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8010d66:	4b27      	ldr	r3, [pc, #156]	; (8010e04 <HAL_RTC_GetTime+0xc0>)
 8010d68:	691b      	ldr	r3, [r3, #16]
 8010d6a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8010d72:	4b24      	ldr	r3, [pc, #144]	; (8010e04 <HAL_RTC_GetTime+0xc0>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8010d7a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010d7e:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	0c1b      	lsrs	r3, r3, #16
 8010d84:	b2db      	uxtb	r3, r3
 8010d86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d8a:	b2da      	uxtb	r2, r3
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	0a1b      	lsrs	r3, r3, #8
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d9a:	b2da      	uxtb	r2, r3
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010da8:	b2da      	uxtb	r2, r3
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	0d9b      	lsrs	r3, r3, #22
 8010db2:	b2db      	uxtb	r3, r3
 8010db4:	f003 0301 	and.w	r3, r3, #1
 8010db8:	b2da      	uxtb	r2, r3
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d11a      	bne.n	8010dfa <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f000 f9ad 	bl	8011128 <RTC_Bcd2ToByte>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	461a      	mov	r2, r3
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	785b      	ldrb	r3, [r3, #1]
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f000 f9a4 	bl	8011128 <RTC_Bcd2ToByte>
 8010de0:	4603      	mov	r3, r0
 8010de2:	461a      	mov	r2, r3
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	789b      	ldrb	r3, [r3, #2]
 8010dec:	4618      	mov	r0, r3
 8010dee:	f000 f99b 	bl	8011128 <RTC_Bcd2ToByte>
 8010df2:	4603      	mov	r3, r0
 8010df4:	461a      	mov	r2, r3
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8010dfa:	2300      	movs	r3, #0
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3718      	adds	r7, #24
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}
 8010e04:	40002800 	.word	0x40002800

08010e08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010e08:	b590      	push	{r4, r7, lr}
 8010e0a:	b087      	sub	sp, #28
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e1a:	2b01      	cmp	r3, #1
 8010e1c:	d101      	bne.n	8010e22 <HAL_RTC_SetDate+0x1a>
 8010e1e:	2302      	movs	r3, #2
 8010e20:	e074      	b.n	8010f0c <HAL_RTC_SetDate+0x104>
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	2201      	movs	r2, #1
 8010e26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	2202      	movs	r2, #2
 8010e2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d10e      	bne.n	8010e56 <HAL_RTC_SetDate+0x4e>
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	785b      	ldrb	r3, [r3, #1]
 8010e3c:	f003 0310 	and.w	r3, r3, #16
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d008      	beq.n	8010e56 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	785b      	ldrb	r3, [r3, #1]
 8010e48:	f023 0310 	bic.w	r3, r3, #16
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	330a      	adds	r3, #10
 8010e50:	b2da      	uxtb	r2, r3
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d11c      	bne.n	8010e96 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	78db      	ldrb	r3, [r3, #3]
 8010e60:	4618      	mov	r0, r3
 8010e62:	f000 f941 	bl	80110e8 <RTC_ByteToBcd2>
 8010e66:	4603      	mov	r3, r0
 8010e68:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	785b      	ldrb	r3, [r3, #1]
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f000 f93a 	bl	80110e8 <RTC_ByteToBcd2>
 8010e74:	4603      	mov	r3, r0
 8010e76:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010e78:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8010e7a:	68bb      	ldr	r3, [r7, #8]
 8010e7c:	789b      	ldrb	r3, [r3, #2]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f000 f932 	bl	80110e8 <RTC_ByteToBcd2>
 8010e84:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010e86:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	781b      	ldrb	r3, [r3, #0]
 8010e8e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010e90:	4313      	orrs	r3, r2
 8010e92:	617b      	str	r3, [r7, #20]
 8010e94:	e00e      	b.n	8010eb4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	78db      	ldrb	r3, [r3, #3]
 8010e9a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	785b      	ldrb	r3, [r3, #1]
 8010ea0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010ea2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8010ea4:	68ba      	ldr	r2, [r7, #8]
 8010ea6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8010ea8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010eb0:	4313      	orrs	r3, r2
 8010eb2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	22ca      	movs	r2, #202	; 0xca
 8010eba:	625a      	str	r2, [r3, #36]	; 0x24
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	2253      	movs	r2, #83	; 0x53
 8010ec2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010ec4:	68f8      	ldr	r0, [r7, #12]
 8010ec6:	f000 f89b 	bl	8011000 <RTC_EnterInitMode>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010ece:	7cfb      	ldrb	r3, [r7, #19]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d10b      	bne.n	8010eec <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8010ed4:	4a0f      	ldr	r2, [pc, #60]	; (8010f14 <HAL_RTC_SetDate+0x10c>)
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010edc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010ee0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010ee2:	68f8      	ldr	r0, [r7, #12]
 8010ee4:	f000 f8c2 	bl	801106c <RTC_ExitInitMode>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	22ff      	movs	r2, #255	; 0xff
 8010ef2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010ef4:	7cfb      	ldrb	r3, [r7, #19]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d103      	bne.n	8010f02 <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	2201      	movs	r2, #1
 8010efe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	2200      	movs	r2, #0
 8010f06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8010f0a:	7cfb      	ldrb	r3, [r7, #19]
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	371c      	adds	r7, #28
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd90      	pop	{r4, r7, pc}
 8010f14:	40002800 	.word	0x40002800

08010f18 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b086      	sub	sp, #24
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	60f8      	str	r0, [r7, #12]
 8010f20:	60b9      	str	r1, [r7, #8]
 8010f22:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8010f24:	4b22      	ldr	r3, [pc, #136]	; (8010fb0 <HAL_RTC_GetDate+0x98>)
 8010f26:	685b      	ldr	r3, [r3, #4]
 8010f28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010f2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010f30:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	0c1b      	lsrs	r3, r3, #16
 8010f36:	b2da      	uxtb	r2, r3
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	0a1b      	lsrs	r3, r3, #8
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	f003 031f 	and.w	r3, r3, #31
 8010f46:	b2da      	uxtb	r2, r3
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010f54:	b2da      	uxtb	r2, r3
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	0b5b      	lsrs	r3, r3, #13
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	f003 0307 	and.w	r3, r3, #7
 8010f64:	b2da      	uxtb	r2, r3
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d11a      	bne.n	8010fa6 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010f70:	68bb      	ldr	r3, [r7, #8]
 8010f72:	78db      	ldrb	r3, [r3, #3]
 8010f74:	4618      	mov	r0, r3
 8010f76:	f000 f8d7 	bl	8011128 <RTC_Bcd2ToByte>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	785b      	ldrb	r3, [r3, #1]
 8010f86:	4618      	mov	r0, r3
 8010f88:	f000 f8ce 	bl	8011128 <RTC_Bcd2ToByte>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	461a      	mov	r2, r3
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	789b      	ldrb	r3, [r3, #2]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f000 f8c5 	bl	8011128 <RTC_Bcd2ToByte>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	461a      	mov	r2, r3
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8010fa6:	2300      	movs	r3, #0
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3718      	adds	r7, #24
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}
 8010fb0:	40002800 	.word	0x40002800

08010fb4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b084      	sub	sp, #16
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	68da      	ldr	r2, [r3, #12]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8010fca:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8010fcc:	f7fd f974 	bl	800e2b8 <HAL_GetTick>
 8010fd0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8010fd2:	e009      	b.n	8010fe8 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010fd4:	f7fd f970 	bl	800e2b8 <HAL_GetTick>
 8010fd8:	4602      	mov	r2, r0
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	1ad3      	subs	r3, r2, r3
 8010fde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010fe2:	d901      	bls.n	8010fe8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010fe4:	2303      	movs	r3, #3
 8010fe6:	e007      	b.n	8010ff8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	68db      	ldr	r3, [r3, #12]
 8010fee:	f003 0320 	and.w	r3, r3, #32
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d0ee      	beq.n	8010fd4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8010ff6:	2300      	movs	r3, #0
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3710      	adds	r7, #16
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}

08011000 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b084      	sub	sp, #16
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011008:	2300      	movs	r3, #0
 801100a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	68db      	ldr	r3, [r3, #12]
 8011012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011016:	2b00      	cmp	r3, #0
 8011018:	d123      	bne.n	8011062 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	68da      	ldr	r2, [r3, #12]
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011028:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 801102a:	f7fd f945 	bl	800e2b8 <HAL_GetTick>
 801102e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011030:	e00d      	b.n	801104e <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011032:	f7fd f941 	bl	800e2b8 <HAL_GetTick>
 8011036:	4602      	mov	r2, r0
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	1ad3      	subs	r3, r2, r3
 801103c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011040:	d905      	bls.n	801104e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8011042:	2303      	movs	r3, #3
 8011044:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2203      	movs	r2, #3
 801104a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	68db      	ldr	r3, [r3, #12]
 8011054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011058:	2b00      	cmp	r3, #0
 801105a:	d102      	bne.n	8011062 <RTC_EnterInitMode+0x62>
 801105c:	7bfb      	ldrb	r3, [r7, #15]
 801105e:	2b03      	cmp	r3, #3
 8011060:	d1e7      	bne.n	8011032 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8011062:	7bfb      	ldrb	r3, [r7, #15]
}
 8011064:	4618      	mov	r0, r3
 8011066:	3710      	adds	r7, #16
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}

0801106c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b084      	sub	sp, #16
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011074:	2300      	movs	r3, #0
 8011076:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011078:	4b1a      	ldr	r3, [pc, #104]	; (80110e4 <RTC_ExitInitMode+0x78>)
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	4a19      	ldr	r2, [pc, #100]	; (80110e4 <RTC_ExitInitMode+0x78>)
 801107e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011082:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011084:	4b17      	ldr	r3, [pc, #92]	; (80110e4 <RTC_ExitInitMode+0x78>)
 8011086:	699b      	ldr	r3, [r3, #24]
 8011088:	f003 0320 	and.w	r3, r3, #32
 801108c:	2b00      	cmp	r3, #0
 801108e:	d10c      	bne.n	80110aa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f7ff ff8f 	bl	8010fb4 <HAL_RTC_WaitForSynchro>
 8011096:	4603      	mov	r3, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	d01e      	beq.n	80110da <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2203      	movs	r2, #3
 80110a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 80110a4:	2303      	movs	r3, #3
 80110a6:	73fb      	strb	r3, [r7, #15]
 80110a8:	e017      	b.n	80110da <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80110aa:	4b0e      	ldr	r3, [pc, #56]	; (80110e4 <RTC_ExitInitMode+0x78>)
 80110ac:	699b      	ldr	r3, [r3, #24]
 80110ae:	4a0d      	ldr	r2, [pc, #52]	; (80110e4 <RTC_ExitInitMode+0x78>)
 80110b0:	f023 0320 	bic.w	r3, r3, #32
 80110b4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f7ff ff7c 	bl	8010fb4 <HAL_RTC_WaitForSynchro>
 80110bc:	4603      	mov	r3, r0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d005      	beq.n	80110ce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2203      	movs	r2, #3
 80110c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 80110ca:	2303      	movs	r3, #3
 80110cc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80110ce:	4b05      	ldr	r3, [pc, #20]	; (80110e4 <RTC_ExitInitMode+0x78>)
 80110d0:	699b      	ldr	r3, [r3, #24]
 80110d2:	4a04      	ldr	r2, [pc, #16]	; (80110e4 <RTC_ExitInitMode+0x78>)
 80110d4:	f043 0320 	orr.w	r3, r3, #32
 80110d8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80110da:	7bfb      	ldrb	r3, [r7, #15]
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3710      	adds	r7, #16
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}
 80110e4:	40002800 	.word	0x40002800

080110e8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80110e8:	b480      	push	{r7}
 80110ea:	b085      	sub	sp, #20
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	4603      	mov	r3, r0
 80110f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80110f2:	2300      	movs	r3, #0
 80110f4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80110f6:	79fb      	ldrb	r3, [r7, #7]
 80110f8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80110fa:	e005      	b.n	8011108 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	3301      	adds	r3, #1
 8011100:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8011102:	7afb      	ldrb	r3, [r7, #11]
 8011104:	3b0a      	subs	r3, #10
 8011106:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8011108:	7afb      	ldrb	r3, [r7, #11]
 801110a:	2b09      	cmp	r3, #9
 801110c:	d8f6      	bhi.n	80110fc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	b2db      	uxtb	r3, r3
 8011112:	011b      	lsls	r3, r3, #4
 8011114:	b2da      	uxtb	r2, r3
 8011116:	7afb      	ldrb	r3, [r7, #11]
 8011118:	4313      	orrs	r3, r2
 801111a:	b2db      	uxtb	r3, r3
}
 801111c:	4618      	mov	r0, r3
 801111e:	3714      	adds	r7, #20
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr

08011128 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	4603      	mov	r3, r0
 8011130:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011132:	79fb      	ldrb	r3, [r7, #7]
 8011134:	091b      	lsrs	r3, r3, #4
 8011136:	b2db      	uxtb	r3, r3
 8011138:	461a      	mov	r2, r3
 801113a:	0092      	lsls	r2, r2, #2
 801113c:	4413      	add	r3, r2
 801113e:	005b      	lsls	r3, r3, #1
 8011140:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011142:	79fb      	ldrb	r3, [r7, #7]
 8011144:	f003 030f 	and.w	r3, r3, #15
 8011148:	b2da      	uxtb	r2, r3
 801114a:	7bfb      	ldrb	r3, [r7, #15]
 801114c:	4413      	add	r3, r2
 801114e:	b2db      	uxtb	r3, r3
}
 8011150:	4618      	mov	r0, r3
 8011152:	3714      	adds	r7, #20
 8011154:	46bd      	mov	sp, r7
 8011156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115a:	4770      	bx	lr

0801115c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b084      	sub	sp, #16
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d101      	bne.n	801116e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801116a:	2301      	movs	r3, #1
 801116c:	e095      	b.n	801129a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011172:	2b00      	cmp	r3, #0
 8011174:	d108      	bne.n	8011188 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801117e:	d009      	beq.n	8011194 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2200      	movs	r2, #0
 8011184:	61da      	str	r2, [r3, #28]
 8011186:	e005      	b.n	8011194 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2200      	movs	r2, #0
 801118c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2200      	movs	r2, #0
 8011192:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2200      	movs	r2, #0
 8011198:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80111a0:	b2db      	uxtb	r3, r3
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d106      	bne.n	80111b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2200      	movs	r2, #0
 80111aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f7fc f926 	bl	800d400 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2202      	movs	r2, #2
 80111b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	681a      	ldr	r2, [r3, #0]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80111ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	68db      	ldr	r3, [r3, #12]
 80111d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80111d4:	d902      	bls.n	80111dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80111d6:	2300      	movs	r3, #0
 80111d8:	60fb      	str	r3, [r7, #12]
 80111da:	e002      	b.n	80111e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80111dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	68db      	ldr	r3, [r3, #12]
 80111e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80111ea:	d007      	beq.n	80111fc <HAL_SPI_Init+0xa0>
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	68db      	ldr	r3, [r3, #12]
 80111f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80111f4:	d002      	beq.n	80111fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2200      	movs	r2, #0
 80111fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	689b      	ldr	r3, [r3, #8]
 8011208:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801120c:	431a      	orrs	r2, r3
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	691b      	ldr	r3, [r3, #16]
 8011212:	f003 0302 	and.w	r3, r3, #2
 8011216:	431a      	orrs	r2, r3
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	695b      	ldr	r3, [r3, #20]
 801121c:	f003 0301 	and.w	r3, r3, #1
 8011220:	431a      	orrs	r2, r3
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	699b      	ldr	r3, [r3, #24]
 8011226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801122a:	431a      	orrs	r2, r3
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	69db      	ldr	r3, [r3, #28]
 8011230:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011234:	431a      	orrs	r2, r3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	6a1b      	ldr	r3, [r3, #32]
 801123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801123e:	ea42 0103 	orr.w	r1, r2, r3
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011246:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	430a      	orrs	r2, r1
 8011250:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	699b      	ldr	r3, [r3, #24]
 8011256:	0c1b      	lsrs	r3, r3, #16
 8011258:	f003 0204 	and.w	r2, r3, #4
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011260:	f003 0310 	and.w	r3, r3, #16
 8011264:	431a      	orrs	r2, r3
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801126a:	f003 0308 	and.w	r3, r3, #8
 801126e:	431a      	orrs	r2, r3
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	68db      	ldr	r3, [r3, #12]
 8011274:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8011278:	ea42 0103 	orr.w	r1, r2, r3
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	430a      	orrs	r2, r1
 8011288:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2200      	movs	r2, #0
 801128e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2201      	movs	r2, #1
 8011294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8011298:	2300      	movs	r3, #0
}
 801129a:	4618      	mov	r0, r3
 801129c:	3710      	adds	r7, #16
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd80      	pop	{r7, pc}

080112a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80112a2:	b580      	push	{r7, lr}
 80112a4:	b088      	sub	sp, #32
 80112a6:	af00      	add	r7, sp, #0
 80112a8:	60f8      	str	r0, [r7, #12]
 80112aa:	60b9      	str	r1, [r7, #8]
 80112ac:	603b      	str	r3, [r7, #0]
 80112ae:	4613      	mov	r3, r2
 80112b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80112b2:	2300      	movs	r3, #0
 80112b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80112bc:	2b01      	cmp	r3, #1
 80112be:	d101      	bne.n	80112c4 <HAL_SPI_Transmit+0x22>
 80112c0:	2302      	movs	r3, #2
 80112c2:	e158      	b.n	8011576 <HAL_SPI_Transmit+0x2d4>
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2201      	movs	r2, #1
 80112c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80112cc:	f7fc fff4 	bl	800e2b8 <HAL_GetTick>
 80112d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80112d2:	88fb      	ldrh	r3, [r7, #6]
 80112d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80112dc:	b2db      	uxtb	r3, r3
 80112de:	2b01      	cmp	r3, #1
 80112e0:	d002      	beq.n	80112e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80112e2:	2302      	movs	r3, #2
 80112e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80112e6:	e13d      	b.n	8011564 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d002      	beq.n	80112f4 <HAL_SPI_Transmit+0x52>
 80112ee:	88fb      	ldrh	r3, [r7, #6]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d102      	bne.n	80112fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80112f4:	2301      	movs	r3, #1
 80112f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80112f8:	e134      	b.n	8011564 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	2203      	movs	r2, #3
 80112fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2200      	movs	r2, #0
 8011306:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	68ba      	ldr	r2, [r7, #8]
 801130c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	88fa      	ldrh	r2, [r7, #6]
 8011312:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	88fa      	ldrh	r2, [r7, #6]
 8011318:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	2200      	movs	r2, #0
 801131e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	2200      	movs	r2, #0
 8011324:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	2200      	movs	r2, #0
 801132c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	2200      	movs	r2, #0
 8011334:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	2200      	movs	r2, #0
 801133a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	689b      	ldr	r3, [r3, #8]
 8011340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011344:	d10f      	bne.n	8011366 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	681a      	ldr	r2, [r3, #0]
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011354:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	681a      	ldr	r2, [r3, #0]
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011364:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011370:	2b40      	cmp	r3, #64	; 0x40
 8011372:	d007      	beq.n	8011384 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	681a      	ldr	r2, [r3, #0]
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011382:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	68db      	ldr	r3, [r3, #12]
 8011388:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801138c:	d94b      	bls.n	8011426 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d002      	beq.n	801139c <HAL_SPI_Transmit+0xfa>
 8011396:	8afb      	ldrh	r3, [r7, #22]
 8011398:	2b01      	cmp	r3, #1
 801139a:	d13e      	bne.n	801141a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113a0:	881a      	ldrh	r2, [r3, #0]
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113ac:	1c9a      	adds	r2, r3, #2
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80113b6:	b29b      	uxth	r3, r3
 80113b8:	3b01      	subs	r3, #1
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80113c0:	e02b      	b.n	801141a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	689b      	ldr	r3, [r3, #8]
 80113c8:	f003 0302 	and.w	r3, r3, #2
 80113cc:	2b02      	cmp	r3, #2
 80113ce:	d112      	bne.n	80113f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113d4:	881a      	ldrh	r2, [r3, #0]
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113e0:	1c9a      	adds	r2, r3, #2
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	3b01      	subs	r3, #1
 80113ee:	b29a      	uxth	r2, r3
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80113f4:	e011      	b.n	801141a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80113f6:	f7fc ff5f 	bl	800e2b8 <HAL_GetTick>
 80113fa:	4602      	mov	r2, r0
 80113fc:	69bb      	ldr	r3, [r7, #24]
 80113fe:	1ad3      	subs	r3, r2, r3
 8011400:	683a      	ldr	r2, [r7, #0]
 8011402:	429a      	cmp	r2, r3
 8011404:	d803      	bhi.n	801140e <HAL_SPI_Transmit+0x16c>
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	f1b3 3fff 	cmp.w	r3, #4294967295
 801140c:	d102      	bne.n	8011414 <HAL_SPI_Transmit+0x172>
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d102      	bne.n	801141a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8011414:	2303      	movs	r3, #3
 8011416:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011418:	e0a4      	b.n	8011564 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801141e:	b29b      	uxth	r3, r3
 8011420:	2b00      	cmp	r3, #0
 8011422:	d1ce      	bne.n	80113c2 <HAL_SPI_Transmit+0x120>
 8011424:	e07c      	b.n	8011520 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	685b      	ldr	r3, [r3, #4]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d002      	beq.n	8011434 <HAL_SPI_Transmit+0x192>
 801142e:	8afb      	ldrh	r3, [r7, #22]
 8011430:	2b01      	cmp	r3, #1
 8011432:	d170      	bne.n	8011516 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011438:	b29b      	uxth	r3, r3
 801143a:	2b01      	cmp	r3, #1
 801143c:	d912      	bls.n	8011464 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011442:	881a      	ldrh	r2, [r3, #0]
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801144e:	1c9a      	adds	r2, r3, #2
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011458:	b29b      	uxth	r3, r3
 801145a:	3b02      	subs	r3, #2
 801145c:	b29a      	uxth	r2, r3
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011462:	e058      	b.n	8011516 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	330c      	adds	r3, #12
 801146e:	7812      	ldrb	r2, [r2, #0]
 8011470:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011476:	1c5a      	adds	r2, r3, #1
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011480:	b29b      	uxth	r3, r3
 8011482:	3b01      	subs	r3, #1
 8011484:	b29a      	uxth	r2, r3
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801148a:	e044      	b.n	8011516 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	689b      	ldr	r3, [r3, #8]
 8011492:	f003 0302 	and.w	r3, r3, #2
 8011496:	2b02      	cmp	r3, #2
 8011498:	d12b      	bne.n	80114f2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801149e:	b29b      	uxth	r3, r3
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d912      	bls.n	80114ca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114a8:	881a      	ldrh	r2, [r3, #0]
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114b4:	1c9a      	adds	r2, r3, #2
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80114be:	b29b      	uxth	r3, r3
 80114c0:	3b02      	subs	r3, #2
 80114c2:	b29a      	uxth	r2, r3
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80114c8:	e025      	b.n	8011516 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	330c      	adds	r3, #12
 80114d4:	7812      	ldrb	r2, [r2, #0]
 80114d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114dc:	1c5a      	adds	r2, r3, #1
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	3b01      	subs	r3, #1
 80114ea:	b29a      	uxth	r2, r3
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80114f0:	e011      	b.n	8011516 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80114f2:	f7fc fee1 	bl	800e2b8 <HAL_GetTick>
 80114f6:	4602      	mov	r2, r0
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	1ad3      	subs	r3, r2, r3
 80114fc:	683a      	ldr	r2, [r7, #0]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d803      	bhi.n	801150a <HAL_SPI_Transmit+0x268>
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011508:	d102      	bne.n	8011510 <HAL_SPI_Transmit+0x26e>
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d102      	bne.n	8011516 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8011510:	2303      	movs	r3, #3
 8011512:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011514:	e026      	b.n	8011564 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801151a:	b29b      	uxth	r3, r3
 801151c:	2b00      	cmp	r3, #0
 801151e:	d1b5      	bne.n	801148c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011520:	69ba      	ldr	r2, [r7, #24]
 8011522:	6839      	ldr	r1, [r7, #0]
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	f000 fce3 	bl	8011ef0 <SPI_EndRxTxTransaction>
 801152a:	4603      	mov	r3, r0
 801152c:	2b00      	cmp	r3, #0
 801152e:	d002      	beq.n	8011536 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	2220      	movs	r2, #32
 8011534:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	689b      	ldr	r3, [r3, #8]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d10a      	bne.n	8011554 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801153e:	2300      	movs	r3, #0
 8011540:	613b      	str	r3, [r7, #16]
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	68db      	ldr	r3, [r3, #12]
 8011548:	613b      	str	r3, [r7, #16]
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	689b      	ldr	r3, [r3, #8]
 8011550:	613b      	str	r3, [r7, #16]
 8011552:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011558:	2b00      	cmp	r3, #0
 801155a:	d002      	beq.n	8011562 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801155c:	2301      	movs	r3, #1
 801155e:	77fb      	strb	r3, [r7, #31]
 8011560:	e000      	b.n	8011564 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8011562:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	2201      	movs	r2, #1
 8011568:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	2200      	movs	r2, #0
 8011570:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8011574:	7ffb      	ldrb	r3, [r7, #31]
}
 8011576:	4618      	mov	r0, r3
 8011578:	3720      	adds	r7, #32
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}

0801157e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801157e:	b580      	push	{r7, lr}
 8011580:	b088      	sub	sp, #32
 8011582:	af02      	add	r7, sp, #8
 8011584:	60f8      	str	r0, [r7, #12]
 8011586:	60b9      	str	r1, [r7, #8]
 8011588:	603b      	str	r3, [r7, #0]
 801158a:	4613      	mov	r3, r2
 801158c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801158e:	2300      	movs	r3, #0
 8011590:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	685b      	ldr	r3, [r3, #4]
 8011596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801159a:	d112      	bne.n	80115c2 <HAL_SPI_Receive+0x44>
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	689b      	ldr	r3, [r3, #8]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d10e      	bne.n	80115c2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	2204      	movs	r2, #4
 80115a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80115ac:	88fa      	ldrh	r2, [r7, #6]
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	9300      	str	r3, [sp, #0]
 80115b2:	4613      	mov	r3, r2
 80115b4:	68ba      	ldr	r2, [r7, #8]
 80115b6:	68b9      	ldr	r1, [r7, #8]
 80115b8:	68f8      	ldr	r0, [r7, #12]
 80115ba:	f000 f910 	bl	80117de <HAL_SPI_TransmitReceive>
 80115be:	4603      	mov	r3, r0
 80115c0:	e109      	b.n	80117d6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80115c8:	2b01      	cmp	r3, #1
 80115ca:	d101      	bne.n	80115d0 <HAL_SPI_Receive+0x52>
 80115cc:	2302      	movs	r3, #2
 80115ce:	e102      	b.n	80117d6 <HAL_SPI_Receive+0x258>
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	2201      	movs	r2, #1
 80115d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80115d8:	f7fc fe6e 	bl	800e2b8 <HAL_GetTick>
 80115dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80115e4:	b2db      	uxtb	r3, r3
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d002      	beq.n	80115f0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80115ea:	2302      	movs	r3, #2
 80115ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80115ee:	e0e9      	b.n	80117c4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d002      	beq.n	80115fc <HAL_SPI_Receive+0x7e>
 80115f6:	88fb      	ldrh	r3, [r7, #6]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d102      	bne.n	8011602 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80115fc:	2301      	movs	r3, #1
 80115fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011600:	e0e0      	b.n	80117c4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2204      	movs	r2, #4
 8011606:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2200      	movs	r2, #0
 801160e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	68ba      	ldr	r2, [r7, #8]
 8011614:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	88fa      	ldrh	r2, [r7, #6]
 801161a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	88fa      	ldrh	r2, [r7, #6]
 8011622:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	2200      	movs	r2, #0
 801162a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	2200      	movs	r2, #0
 8011630:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	2200      	movs	r2, #0
 8011636:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	2200      	movs	r2, #0
 801163c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	2200      	movs	r2, #0
 8011642:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	68db      	ldr	r3, [r3, #12]
 8011648:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801164c:	d908      	bls.n	8011660 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	685a      	ldr	r2, [r3, #4]
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801165c:	605a      	str	r2, [r3, #4]
 801165e:	e007      	b.n	8011670 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	685a      	ldr	r2, [r3, #4]
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801166e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	689b      	ldr	r3, [r3, #8]
 8011674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011678:	d10f      	bne.n	801169a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	681a      	ldr	r2, [r3, #0]
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011688:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	681a      	ldr	r2, [r3, #0]
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011698:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116a4:	2b40      	cmp	r3, #64	; 0x40
 80116a6:	d007      	beq.n	80116b8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	681a      	ldr	r2, [r3, #0]
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80116b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	68db      	ldr	r3, [r3, #12]
 80116bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80116c0:	d867      	bhi.n	8011792 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80116c2:	e030      	b.n	8011726 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	689b      	ldr	r3, [r3, #8]
 80116ca:	f003 0301 	and.w	r3, r3, #1
 80116ce:	2b01      	cmp	r3, #1
 80116d0:	d117      	bne.n	8011702 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	f103 020c 	add.w	r2, r3, #12
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116de:	7812      	ldrb	r2, [r2, #0]
 80116e0:	b2d2      	uxtb	r2, r2
 80116e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116e8:	1c5a      	adds	r2, r3, #1
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	3b01      	subs	r3, #1
 80116f8:	b29a      	uxth	r2, r3
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8011700:	e011      	b.n	8011726 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011702:	f7fc fdd9 	bl	800e2b8 <HAL_GetTick>
 8011706:	4602      	mov	r2, r0
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	1ad3      	subs	r3, r2, r3
 801170c:	683a      	ldr	r2, [r7, #0]
 801170e:	429a      	cmp	r2, r3
 8011710:	d803      	bhi.n	801171a <HAL_SPI_Receive+0x19c>
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011718:	d102      	bne.n	8011720 <HAL_SPI_Receive+0x1a2>
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d102      	bne.n	8011726 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8011720:	2303      	movs	r3, #3
 8011722:	75fb      	strb	r3, [r7, #23]
          goto error;
 8011724:	e04e      	b.n	80117c4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801172c:	b29b      	uxth	r3, r3
 801172e:	2b00      	cmp	r3, #0
 8011730:	d1c8      	bne.n	80116c4 <HAL_SPI_Receive+0x146>
 8011732:	e034      	b.n	801179e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	f003 0301 	and.w	r3, r3, #1
 801173e:	2b01      	cmp	r3, #1
 8011740:	d115      	bne.n	801176e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	68da      	ldr	r2, [r3, #12]
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801174c:	b292      	uxth	r2, r2
 801174e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011754:	1c9a      	adds	r2, r3, #2
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011760:	b29b      	uxth	r3, r3
 8011762:	3b01      	subs	r3, #1
 8011764:	b29a      	uxth	r2, r3
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801176c:	e011      	b.n	8011792 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801176e:	f7fc fda3 	bl	800e2b8 <HAL_GetTick>
 8011772:	4602      	mov	r2, r0
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	1ad3      	subs	r3, r2, r3
 8011778:	683a      	ldr	r2, [r7, #0]
 801177a:	429a      	cmp	r2, r3
 801177c:	d803      	bhi.n	8011786 <HAL_SPI_Receive+0x208>
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011784:	d102      	bne.n	801178c <HAL_SPI_Receive+0x20e>
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d102      	bne.n	8011792 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801178c:	2303      	movs	r3, #3
 801178e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8011790:	e018      	b.n	80117c4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011798:	b29b      	uxth	r3, r3
 801179a:	2b00      	cmp	r3, #0
 801179c:	d1ca      	bne.n	8011734 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801179e:	693a      	ldr	r2, [r7, #16]
 80117a0:	6839      	ldr	r1, [r7, #0]
 80117a2:	68f8      	ldr	r0, [r7, #12]
 80117a4:	f000 fb4c 	bl	8011e40 <SPI_EndRxTransaction>
 80117a8:	4603      	mov	r3, r0
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d002      	beq.n	80117b4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	2220      	movs	r2, #32
 80117b2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d002      	beq.n	80117c2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80117bc:	2301      	movs	r3, #1
 80117be:	75fb      	strb	r3, [r7, #23]
 80117c0:	e000      	b.n	80117c4 <HAL_SPI_Receive+0x246>
  }

error :
 80117c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	2201      	movs	r2, #1
 80117c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	2200      	movs	r2, #0
 80117d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80117d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3718      	adds	r7, #24
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}

080117de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80117de:	b580      	push	{r7, lr}
 80117e0:	b08a      	sub	sp, #40	; 0x28
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	60f8      	str	r0, [r7, #12]
 80117e6:	60b9      	str	r1, [r7, #8]
 80117e8:	607a      	str	r2, [r7, #4]
 80117ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80117ec:	2301      	movs	r3, #1
 80117ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80117f0:	2300      	movs	r3, #0
 80117f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d101      	bne.n	8011804 <HAL_SPI_TransmitReceive+0x26>
 8011800:	2302      	movs	r3, #2
 8011802:	e1fb      	b.n	8011bfc <HAL_SPI_TransmitReceive+0x41e>
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	2201      	movs	r2, #1
 8011808:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801180c:	f7fc fd54 	bl	800e2b8 <HAL_GetTick>
 8011810:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011818:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	685b      	ldr	r3, [r3, #4]
 801181e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8011820:	887b      	ldrh	r3, [r7, #2]
 8011822:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8011824:	887b      	ldrh	r3, [r7, #2]
 8011826:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011828:	7efb      	ldrb	r3, [r7, #27]
 801182a:	2b01      	cmp	r3, #1
 801182c:	d00e      	beq.n	801184c <HAL_SPI_TransmitReceive+0x6e>
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011834:	d106      	bne.n	8011844 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	689b      	ldr	r3, [r3, #8]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d102      	bne.n	8011844 <HAL_SPI_TransmitReceive+0x66>
 801183e:	7efb      	ldrb	r3, [r7, #27]
 8011840:	2b04      	cmp	r3, #4
 8011842:	d003      	beq.n	801184c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8011844:	2302      	movs	r3, #2
 8011846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801184a:	e1cd      	b.n	8011be8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d005      	beq.n	801185e <HAL_SPI_TransmitReceive+0x80>
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d002      	beq.n	801185e <HAL_SPI_TransmitReceive+0x80>
 8011858:	887b      	ldrh	r3, [r7, #2]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d103      	bne.n	8011866 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801185e:	2301      	movs	r3, #1
 8011860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8011864:	e1c0      	b.n	8011be8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801186c:	b2db      	uxtb	r3, r3
 801186e:	2b04      	cmp	r3, #4
 8011870:	d003      	beq.n	801187a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2205      	movs	r2, #5
 8011876:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2200      	movs	r2, #0
 801187e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	887a      	ldrh	r2, [r7, #2]
 801188a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	887a      	ldrh	r2, [r7, #2]
 8011892:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	68ba      	ldr	r2, [r7, #8]
 801189a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	887a      	ldrh	r2, [r7, #2]
 80118a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	887a      	ldrh	r2, [r7, #2]
 80118a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	2200      	movs	r2, #0
 80118ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	2200      	movs	r2, #0
 80118b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	68db      	ldr	r3, [r3, #12]
 80118b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80118bc:	d802      	bhi.n	80118c4 <HAL_SPI_TransmitReceive+0xe6>
 80118be:	8a3b      	ldrh	r3, [r7, #16]
 80118c0:	2b01      	cmp	r3, #1
 80118c2:	d908      	bls.n	80118d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	685a      	ldr	r2, [r3, #4]
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80118d2:	605a      	str	r2, [r3, #4]
 80118d4:	e007      	b.n	80118e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	685a      	ldr	r2, [r3, #4]
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80118e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118f0:	2b40      	cmp	r3, #64	; 0x40
 80118f2:	d007      	beq.n	8011904 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011902:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	68db      	ldr	r3, [r3, #12]
 8011908:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801190c:	d97c      	bls.n	8011a08 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d002      	beq.n	801191c <HAL_SPI_TransmitReceive+0x13e>
 8011916:	8a7b      	ldrh	r3, [r7, #18]
 8011918:	2b01      	cmp	r3, #1
 801191a:	d169      	bne.n	80119f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011920:	881a      	ldrh	r2, [r3, #0]
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801192c:	1c9a      	adds	r2, r3, #2
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011936:	b29b      	uxth	r3, r3
 8011938:	3b01      	subs	r3, #1
 801193a:	b29a      	uxth	r2, r3
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011940:	e056      	b.n	80119f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	689b      	ldr	r3, [r3, #8]
 8011948:	f003 0302 	and.w	r3, r3, #2
 801194c:	2b02      	cmp	r3, #2
 801194e:	d11b      	bne.n	8011988 <HAL_SPI_TransmitReceive+0x1aa>
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011954:	b29b      	uxth	r3, r3
 8011956:	2b00      	cmp	r3, #0
 8011958:	d016      	beq.n	8011988 <HAL_SPI_TransmitReceive+0x1aa>
 801195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801195c:	2b01      	cmp	r3, #1
 801195e:	d113      	bne.n	8011988 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011964:	881a      	ldrh	r2, [r3, #0]
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011970:	1c9a      	adds	r2, r3, #2
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801197a:	b29b      	uxth	r3, r3
 801197c:	3b01      	subs	r3, #1
 801197e:	b29a      	uxth	r2, r3
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011984:	2300      	movs	r3, #0
 8011986:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	689b      	ldr	r3, [r3, #8]
 801198e:	f003 0301 	and.w	r3, r3, #1
 8011992:	2b01      	cmp	r3, #1
 8011994:	d11c      	bne.n	80119d0 <HAL_SPI_TransmitReceive+0x1f2>
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801199c:	b29b      	uxth	r3, r3
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d016      	beq.n	80119d0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	68da      	ldr	r2, [r3, #12]
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119ac:	b292      	uxth	r2, r2
 80119ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119b4:	1c9a      	adds	r2, r3, #2
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80119c0:	b29b      	uxth	r3, r3
 80119c2:	3b01      	subs	r3, #1
 80119c4:	b29a      	uxth	r2, r3
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80119cc:	2301      	movs	r3, #1
 80119ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80119d0:	f7fc fc72 	bl	800e2b8 <HAL_GetTick>
 80119d4:	4602      	mov	r2, r0
 80119d6:	69fb      	ldr	r3, [r7, #28]
 80119d8:	1ad3      	subs	r3, r2, r3
 80119da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119dc:	429a      	cmp	r2, r3
 80119de:	d807      	bhi.n	80119f0 <HAL_SPI_TransmitReceive+0x212>
 80119e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119e6:	d003      	beq.n	80119f0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80119e8:	2303      	movs	r3, #3
 80119ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80119ee:	e0fb      	b.n	8011be8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80119f4:	b29b      	uxth	r3, r3
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d1a3      	bne.n	8011942 <HAL_SPI_TransmitReceive+0x164>
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011a00:	b29b      	uxth	r3, r3
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d19d      	bne.n	8011942 <HAL_SPI_TransmitReceive+0x164>
 8011a06:	e0df      	b.n	8011bc8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d003      	beq.n	8011a18 <HAL_SPI_TransmitReceive+0x23a>
 8011a10:	8a7b      	ldrh	r3, [r7, #18]
 8011a12:	2b01      	cmp	r3, #1
 8011a14:	f040 80cb 	bne.w	8011bae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	d912      	bls.n	8011a48 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a26:	881a      	ldrh	r2, [r3, #0]
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a32:	1c9a      	adds	r2, r3, #2
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011a3c:	b29b      	uxth	r3, r3
 8011a3e:	3b02      	subs	r3, #2
 8011a40:	b29a      	uxth	r2, r3
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011a46:	e0b2      	b.n	8011bae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	330c      	adds	r3, #12
 8011a52:	7812      	ldrb	r2, [r2, #0]
 8011a54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a5a:	1c5a      	adds	r2, r3, #1
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	3b01      	subs	r3, #1
 8011a68:	b29a      	uxth	r2, r3
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011a6e:	e09e      	b.n	8011bae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	689b      	ldr	r3, [r3, #8]
 8011a76:	f003 0302 	and.w	r3, r3, #2
 8011a7a:	2b02      	cmp	r3, #2
 8011a7c:	d134      	bne.n	8011ae8 <HAL_SPI_TransmitReceive+0x30a>
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011a82:	b29b      	uxth	r3, r3
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d02f      	beq.n	8011ae8 <HAL_SPI_TransmitReceive+0x30a>
 8011a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8a:	2b01      	cmp	r3, #1
 8011a8c:	d12c      	bne.n	8011ae8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011a92:	b29b      	uxth	r3, r3
 8011a94:	2b01      	cmp	r3, #1
 8011a96:	d912      	bls.n	8011abe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a9c:	881a      	ldrh	r2, [r3, #0]
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011aa8:	1c9a      	adds	r2, r3, #2
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	3b02      	subs	r3, #2
 8011ab6:	b29a      	uxth	r2, r3
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011abc:	e012      	b.n	8011ae4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	330c      	adds	r3, #12
 8011ac8:	7812      	ldrb	r2, [r2, #0]
 8011aca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ad0:	1c5a      	adds	r2, r3, #1
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	3b01      	subs	r3, #1
 8011ade:	b29a      	uxth	r2, r3
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	689b      	ldr	r3, [r3, #8]
 8011aee:	f003 0301 	and.w	r3, r3, #1
 8011af2:	2b01      	cmp	r3, #1
 8011af4:	d148      	bne.n	8011b88 <HAL_SPI_TransmitReceive+0x3aa>
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d042      	beq.n	8011b88 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	2b01      	cmp	r3, #1
 8011b0c:	d923      	bls.n	8011b56 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	68da      	ldr	r2, [r3, #12]
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b18:	b292      	uxth	r2, r2
 8011b1a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b20:	1c9a      	adds	r2, r3, #2
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	3b02      	subs	r3, #2
 8011b30:	b29a      	uxth	r2, r3
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	2b01      	cmp	r3, #1
 8011b42:	d81f      	bhi.n	8011b84 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	685a      	ldr	r2, [r3, #4]
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011b52:	605a      	str	r2, [r3, #4]
 8011b54:	e016      	b.n	8011b84 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	f103 020c 	add.w	r2, r3, #12
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b62:	7812      	ldrb	r2, [r2, #0]
 8011b64:	b2d2      	uxtb	r2, r2
 8011b66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b6c:	1c5a      	adds	r2, r3, #1
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011b78:	b29b      	uxth	r3, r3
 8011b7a:	3b01      	subs	r3, #1
 8011b7c:	b29a      	uxth	r2, r3
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011b84:	2301      	movs	r3, #1
 8011b86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011b88:	f7fc fb96 	bl	800e2b8 <HAL_GetTick>
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	69fb      	ldr	r3, [r7, #28]
 8011b90:	1ad3      	subs	r3, r2, r3
 8011b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d803      	bhi.n	8011ba0 <HAL_SPI_TransmitReceive+0x3c2>
 8011b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b9e:	d102      	bne.n	8011ba6 <HAL_SPI_TransmitReceive+0x3c8>
 8011ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d103      	bne.n	8011bae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8011ba6:	2303      	movs	r3, #3
 8011ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8011bac:	e01c      	b.n	8011be8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011bb2:	b29b      	uxth	r3, r3
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	f47f af5b 	bne.w	8011a70 <HAL_SPI_TransmitReceive+0x292>
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	f47f af54 	bne.w	8011a70 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011bc8:	69fa      	ldr	r2, [r7, #28]
 8011bca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f000 f98f 	bl	8011ef0 <SPI_EndRxTxTransaction>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d006      	beq.n	8011be6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8011bd8:	2301      	movs	r3, #1
 8011bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	2220      	movs	r2, #32
 8011be2:	661a      	str	r2, [r3, #96]	; 0x60
 8011be4:	e000      	b.n	8011be8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8011be6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2201      	movs	r2, #1
 8011bec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8011bf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3728      	adds	r7, #40	; 0x28
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}

08011c04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b088      	sub	sp, #32
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	60f8      	str	r0, [r7, #12]
 8011c0c:	60b9      	str	r1, [r7, #8]
 8011c0e:	603b      	str	r3, [r7, #0]
 8011c10:	4613      	mov	r3, r2
 8011c12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011c14:	f7fc fb50 	bl	800e2b8 <HAL_GetTick>
 8011c18:	4602      	mov	r2, r0
 8011c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c1c:	1a9b      	subs	r3, r3, r2
 8011c1e:	683a      	ldr	r2, [r7, #0]
 8011c20:	4413      	add	r3, r2
 8011c22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011c24:	f7fc fb48 	bl	800e2b8 <HAL_GetTick>
 8011c28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011c2a:	4b39      	ldr	r3, [pc, #228]	; (8011d10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	015b      	lsls	r3, r3, #5
 8011c30:	0d1b      	lsrs	r3, r3, #20
 8011c32:	69fa      	ldr	r2, [r7, #28]
 8011c34:	fb02 f303 	mul.w	r3, r2, r3
 8011c38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011c3a:	e054      	b.n	8011ce6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c42:	d050      	beq.n	8011ce6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011c44:	f7fc fb38 	bl	800e2b8 <HAL_GetTick>
 8011c48:	4602      	mov	r2, r0
 8011c4a:	69bb      	ldr	r3, [r7, #24]
 8011c4c:	1ad3      	subs	r3, r2, r3
 8011c4e:	69fa      	ldr	r2, [r7, #28]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d902      	bls.n	8011c5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8011c54:	69fb      	ldr	r3, [r7, #28]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d13d      	bne.n	8011cd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	685a      	ldr	r2, [r3, #4]
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011c68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011c72:	d111      	bne.n	8011c98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	689b      	ldr	r3, [r3, #8]
 8011c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c7c:	d004      	beq.n	8011c88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	689b      	ldr	r3, [r3, #8]
 8011c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011c86:	d107      	bne.n	8011c98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	681a      	ldr	r2, [r3, #0]
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011c96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ca0:	d10f      	bne.n	8011cc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	681a      	ldr	r2, [r3, #0]
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011cb0:	601a      	str	r2, [r3, #0]
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	681a      	ldr	r2, [r3, #0]
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011cc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	2201      	movs	r2, #1
 8011cc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8011cd2:	2303      	movs	r3, #3
 8011cd4:	e017      	b.n	8011d06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d101      	bne.n	8011ce0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8011cdc:	2300      	movs	r3, #0
 8011cde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	3b01      	subs	r3, #1
 8011ce4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	689a      	ldr	r2, [r3, #8]
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	4013      	ands	r3, r2
 8011cf0:	68ba      	ldr	r2, [r7, #8]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	bf0c      	ite	eq
 8011cf6:	2301      	moveq	r3, #1
 8011cf8:	2300      	movne	r3, #0
 8011cfa:	b2db      	uxtb	r3, r3
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	79fb      	ldrb	r3, [r7, #7]
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d19b      	bne.n	8011c3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011d04:	2300      	movs	r3, #0
}
 8011d06:	4618      	mov	r0, r3
 8011d08:	3720      	adds	r7, #32
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}
 8011d0e:	bf00      	nop
 8011d10:	20000094 	.word	0x20000094

08011d14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b08a      	sub	sp, #40	; 0x28
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	60f8      	str	r0, [r7, #12]
 8011d1c:	60b9      	str	r1, [r7, #8]
 8011d1e:	607a      	str	r2, [r7, #4]
 8011d20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8011d22:	2300      	movs	r3, #0
 8011d24:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8011d26:	f7fc fac7 	bl	800e2b8 <HAL_GetTick>
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d2e:	1a9b      	subs	r3, r3, r2
 8011d30:	683a      	ldr	r2, [r7, #0]
 8011d32:	4413      	add	r3, r2
 8011d34:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8011d36:	f7fc fabf 	bl	800e2b8 <HAL_GetTick>
 8011d3a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	330c      	adds	r3, #12
 8011d42:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8011d44:	4b3d      	ldr	r3, [pc, #244]	; (8011e3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8011d46:	681a      	ldr	r2, [r3, #0]
 8011d48:	4613      	mov	r3, r2
 8011d4a:	009b      	lsls	r3, r3, #2
 8011d4c:	4413      	add	r3, r2
 8011d4e:	00da      	lsls	r2, r3, #3
 8011d50:	1ad3      	subs	r3, r2, r3
 8011d52:	0d1b      	lsrs	r3, r3, #20
 8011d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d56:	fb02 f303 	mul.w	r3, r2, r3
 8011d5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8011d5c:	e060      	b.n	8011e20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8011d64:	d107      	bne.n	8011d76 <SPI_WaitFifoStateUntilTimeout+0x62>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d104      	bne.n	8011d76 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	b2db      	uxtb	r3, r3
 8011d72:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8011d74:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d7c:	d050      	beq.n	8011e20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011d7e:	f7fc fa9b 	bl	800e2b8 <HAL_GetTick>
 8011d82:	4602      	mov	r2, r0
 8011d84:	6a3b      	ldr	r3, [r7, #32]
 8011d86:	1ad3      	subs	r3, r2, r3
 8011d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	d902      	bls.n	8011d94 <SPI_WaitFifoStateUntilTimeout+0x80>
 8011d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d13d      	bne.n	8011e10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	685a      	ldr	r2, [r3, #4]
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011da2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011dac:	d111      	bne.n	8011dd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	689b      	ldr	r3, [r3, #8]
 8011db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011db6:	d004      	beq.n	8011dc2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	689b      	ldr	r3, [r3, #8]
 8011dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011dc0:	d107      	bne.n	8011dd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	681a      	ldr	r2, [r3, #0]
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011dd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011dda:	d10f      	bne.n	8011dfc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	681a      	ldr	r2, [r3, #0]
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011dea:	601a      	str	r2, [r3, #0]
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	681a      	ldr	r2, [r3, #0]
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011dfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	2201      	movs	r2, #1
 8011e00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2200      	movs	r2, #0
 8011e08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8011e0c:	2303      	movs	r3, #3
 8011e0e:	e010      	b.n	8011e32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011e10:	69bb      	ldr	r3, [r7, #24]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d101      	bne.n	8011e1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8011e16:	2300      	movs	r3, #0
 8011e18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8011e1a:	69bb      	ldr	r3, [r7, #24]
 8011e1c:	3b01      	subs	r3, #1
 8011e1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	689a      	ldr	r2, [r3, #8]
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	4013      	ands	r3, r2
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d196      	bne.n	8011d5e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8011e30:	2300      	movs	r3, #0
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	3728      	adds	r7, #40	; 0x28
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}
 8011e3a:	bf00      	nop
 8011e3c:	20000094 	.word	0x20000094

08011e40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b086      	sub	sp, #24
 8011e44:	af02      	add	r7, sp, #8
 8011e46:	60f8      	str	r0, [r7, #12]
 8011e48:	60b9      	str	r1, [r7, #8]
 8011e4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	685b      	ldr	r3, [r3, #4]
 8011e50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011e54:	d111      	bne.n	8011e7a <SPI_EndRxTransaction+0x3a>
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	689b      	ldr	r3, [r3, #8]
 8011e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011e5e:	d004      	beq.n	8011e6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	689b      	ldr	r3, [r3, #8]
 8011e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011e68:	d107      	bne.n	8011e7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	681a      	ldr	r2, [r3, #0]
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011e78:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	9300      	str	r3, [sp, #0]
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	2200      	movs	r2, #0
 8011e82:	2180      	movs	r1, #128	; 0x80
 8011e84:	68f8      	ldr	r0, [r7, #12]
 8011e86:	f7ff febd 	bl	8011c04 <SPI_WaitFlagStateUntilTimeout>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d007      	beq.n	8011ea0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011e94:	f043 0220 	orr.w	r2, r3, #32
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011e9c:	2303      	movs	r3, #3
 8011e9e:	e023      	b.n	8011ee8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011ea8:	d11d      	bne.n	8011ee6 <SPI_EndRxTransaction+0xa6>
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	689b      	ldr	r3, [r3, #8]
 8011eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011eb2:	d004      	beq.n	8011ebe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	689b      	ldr	r3, [r3, #8]
 8011eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ebc:	d113      	bne.n	8011ee6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	9300      	str	r3, [sp, #0]
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8011eca:	68f8      	ldr	r0, [r7, #12]
 8011ecc:	f7ff ff22 	bl	8011d14 <SPI_WaitFifoStateUntilTimeout>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d007      	beq.n	8011ee6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011eda:	f043 0220 	orr.w	r2, r3, #32
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8011ee2:	2303      	movs	r3, #3
 8011ee4:	e000      	b.n	8011ee8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8011ee6:	2300      	movs	r3, #0
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3710      	adds	r7, #16
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}

08011ef0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b086      	sub	sp, #24
 8011ef4:	af02      	add	r7, sp, #8
 8011ef6:	60f8      	str	r0, [r7, #12]
 8011ef8:	60b9      	str	r1, [r7, #8]
 8011efa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	9300      	str	r3, [sp, #0]
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	2200      	movs	r2, #0
 8011f04:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8011f08:	68f8      	ldr	r0, [r7, #12]
 8011f0a:	f7ff ff03 	bl	8011d14 <SPI_WaitFifoStateUntilTimeout>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d007      	beq.n	8011f24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011f18:	f043 0220 	orr.w	r2, r3, #32
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011f20:	2303      	movs	r3, #3
 8011f22:	e027      	b.n	8011f74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	9300      	str	r3, [sp, #0]
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	2180      	movs	r1, #128	; 0x80
 8011f2e:	68f8      	ldr	r0, [r7, #12]
 8011f30:	f7ff fe68 	bl	8011c04 <SPI_WaitFlagStateUntilTimeout>
 8011f34:	4603      	mov	r3, r0
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d007      	beq.n	8011f4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011f3e:	f043 0220 	orr.w	r2, r3, #32
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011f46:	2303      	movs	r3, #3
 8011f48:	e014      	b.n	8011f74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	9300      	str	r3, [sp, #0]
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	2200      	movs	r2, #0
 8011f52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8011f56:	68f8      	ldr	r0, [r7, #12]
 8011f58:	f7ff fedc 	bl	8011d14 <SPI_WaitFifoStateUntilTimeout>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d007      	beq.n	8011f72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011f66:	f043 0220 	orr.w	r2, r3, #32
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011f6e:	2303      	movs	r3, #3
 8011f70:	e000      	b.n	8011f74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8011f72:	2300      	movs	r3, #0
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3710      	adds	r7, #16
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}

08011f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d101      	bne.n	8011f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	e049      	b.n	8012022 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d106      	bne.n	8011fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f7fb feaa 	bl	800dcfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2202      	movs	r2, #2
 8011fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681a      	ldr	r2, [r3, #0]
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	3304      	adds	r3, #4
 8011fb8:	4619      	mov	r1, r3
 8011fba:	4610      	mov	r0, r2
 8011fbc:	f001 f95e 	bl	801327c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2201      	movs	r2, #1
 8011fc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2201      	movs	r2, #1
 8011fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2201      	movs	r2, #1
 8011fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2201      	movs	r2, #1
 8011fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2201      	movs	r2, #1
 8011fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2201      	movs	r2, #1
 8011ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2201      	movs	r2, #1
 8012004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2201      	movs	r2, #1
 801200c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2201      	movs	r2, #1
 8012014:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2201      	movs	r2, #1
 801201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012020:	2300      	movs	r3, #0
}
 8012022:	4618      	mov	r0, r3
 8012024:	3708      	adds	r7, #8
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
	...

0801202c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801202c:	b480      	push	{r7}
 801202e:	b085      	sub	sp, #20
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801203a:	b2db      	uxtb	r3, r3
 801203c:	2b01      	cmp	r3, #1
 801203e:	d001      	beq.n	8012044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012040:	2301      	movs	r3, #1
 8012042:	e04f      	b.n	80120e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2202      	movs	r2, #2
 8012048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	68da      	ldr	r2, [r3, #12]
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	f042 0201 	orr.w	r2, r2, #1
 801205a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	4a23      	ldr	r2, [pc, #140]	; (80120f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8012062:	4293      	cmp	r3, r2
 8012064:	d01d      	beq.n	80120a2 <HAL_TIM_Base_Start_IT+0x76>
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801206e:	d018      	beq.n	80120a2 <HAL_TIM_Base_Start_IT+0x76>
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	4a1f      	ldr	r2, [pc, #124]	; (80120f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8012076:	4293      	cmp	r3, r2
 8012078:	d013      	beq.n	80120a2 <HAL_TIM_Base_Start_IT+0x76>
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	4a1e      	ldr	r2, [pc, #120]	; (80120f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8012080:	4293      	cmp	r3, r2
 8012082:	d00e      	beq.n	80120a2 <HAL_TIM_Base_Start_IT+0x76>
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	4a1c      	ldr	r2, [pc, #112]	; (80120fc <HAL_TIM_Base_Start_IT+0xd0>)
 801208a:	4293      	cmp	r3, r2
 801208c:	d009      	beq.n	80120a2 <HAL_TIM_Base_Start_IT+0x76>
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	4a1b      	ldr	r2, [pc, #108]	; (8012100 <HAL_TIM_Base_Start_IT+0xd4>)
 8012094:	4293      	cmp	r3, r2
 8012096:	d004      	beq.n	80120a2 <HAL_TIM_Base_Start_IT+0x76>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	4a19      	ldr	r2, [pc, #100]	; (8012104 <HAL_TIM_Base_Start_IT+0xd8>)
 801209e:	4293      	cmp	r3, r2
 80120a0:	d115      	bne.n	80120ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	689a      	ldr	r2, [r3, #8]
 80120a8:	4b17      	ldr	r3, [pc, #92]	; (8012108 <HAL_TIM_Base_Start_IT+0xdc>)
 80120aa:	4013      	ands	r3, r2
 80120ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	2b06      	cmp	r3, #6
 80120b2:	d015      	beq.n	80120e0 <HAL_TIM_Base_Start_IT+0xb4>
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120ba:	d011      	beq.n	80120e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f042 0201 	orr.w	r2, r2, #1
 80120ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80120cc:	e008      	b.n	80120e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	681a      	ldr	r2, [r3, #0]
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	f042 0201 	orr.w	r2, r2, #1
 80120dc:	601a      	str	r2, [r3, #0]
 80120de:	e000      	b.n	80120e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80120e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80120e2:	2300      	movs	r3, #0
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3714      	adds	r7, #20
 80120e8:	46bd      	mov	sp, r7
 80120ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ee:	4770      	bx	lr
 80120f0:	40012c00 	.word	0x40012c00
 80120f4:	40000400 	.word	0x40000400
 80120f8:	40000800 	.word	0x40000800
 80120fc:	40000c00 	.word	0x40000c00
 8012100:	40013400 	.word	0x40013400
 8012104:	40014000 	.word	0x40014000
 8012108:	00010007 	.word	0x00010007

0801210c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b082      	sub	sp, #8
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d101      	bne.n	801211e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801211a:	2301      	movs	r3, #1
 801211c:	e049      	b.n	80121b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012124:	b2db      	uxtb	r3, r3
 8012126:	2b00      	cmp	r3, #0
 8012128:	d106      	bne.n	8012138 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2200      	movs	r2, #0
 801212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f000 f841 	bl	80121ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2202      	movs	r2, #2
 801213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	681a      	ldr	r2, [r3, #0]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	3304      	adds	r3, #4
 8012148:	4619      	mov	r1, r3
 801214a:	4610      	mov	r0, r2
 801214c:	f001 f896 	bl	801327c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2201      	movs	r2, #1
 8012154:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2201      	movs	r2, #1
 801215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2201      	movs	r2, #1
 8012164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2201      	movs	r2, #1
 801216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2201      	movs	r2, #1
 8012174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2201      	movs	r2, #1
 801217c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2201      	movs	r2, #1
 8012184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2201      	movs	r2, #1
 801218c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2201      	movs	r2, #1
 8012194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2201      	movs	r2, #1
 801219c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2201      	movs	r2, #1
 80121a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2201      	movs	r2, #1
 80121ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80121b0:	2300      	movs	r3, #0
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3708      	adds	r7, #8
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}

080121ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80121ba:	b480      	push	{r7}
 80121bc:	b083      	sub	sp, #12
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80121c2:	bf00      	nop
 80121c4:	370c      	adds	r7, #12
 80121c6:	46bd      	mov	sp, r7
 80121c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121cc:	4770      	bx	lr
	...

080121d0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b086      	sub	sp, #24
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	60f8      	str	r0, [r7, #12]
 80121d8:	60b9      	str	r1, [r7, #8]
 80121da:	607a      	str	r2, [r7, #4]
 80121dc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80121de:	2300      	movs	r3, #0
 80121e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d109      	bne.n	80121fc <HAL_TIM_PWM_Start_DMA+0x2c>
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80121ee:	b2db      	uxtb	r3, r3
 80121f0:	2b02      	cmp	r3, #2
 80121f2:	bf0c      	ite	eq
 80121f4:	2301      	moveq	r3, #1
 80121f6:	2300      	movne	r3, #0
 80121f8:	b2db      	uxtb	r3, r3
 80121fa:	e03c      	b.n	8012276 <HAL_TIM_PWM_Start_DMA+0xa6>
 80121fc:	68bb      	ldr	r3, [r7, #8]
 80121fe:	2b04      	cmp	r3, #4
 8012200:	d109      	bne.n	8012216 <HAL_TIM_PWM_Start_DMA+0x46>
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012208:	b2db      	uxtb	r3, r3
 801220a:	2b02      	cmp	r3, #2
 801220c:	bf0c      	ite	eq
 801220e:	2301      	moveq	r3, #1
 8012210:	2300      	movne	r3, #0
 8012212:	b2db      	uxtb	r3, r3
 8012214:	e02f      	b.n	8012276 <HAL_TIM_PWM_Start_DMA+0xa6>
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	2b08      	cmp	r3, #8
 801221a:	d109      	bne.n	8012230 <HAL_TIM_PWM_Start_DMA+0x60>
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012222:	b2db      	uxtb	r3, r3
 8012224:	2b02      	cmp	r3, #2
 8012226:	bf0c      	ite	eq
 8012228:	2301      	moveq	r3, #1
 801222a:	2300      	movne	r3, #0
 801222c:	b2db      	uxtb	r3, r3
 801222e:	e022      	b.n	8012276 <HAL_TIM_PWM_Start_DMA+0xa6>
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	2b0c      	cmp	r3, #12
 8012234:	d109      	bne.n	801224a <HAL_TIM_PWM_Start_DMA+0x7a>
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801223c:	b2db      	uxtb	r3, r3
 801223e:	2b02      	cmp	r3, #2
 8012240:	bf0c      	ite	eq
 8012242:	2301      	moveq	r3, #1
 8012244:	2300      	movne	r3, #0
 8012246:	b2db      	uxtb	r3, r3
 8012248:	e015      	b.n	8012276 <HAL_TIM_PWM_Start_DMA+0xa6>
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	2b10      	cmp	r3, #16
 801224e:	d109      	bne.n	8012264 <HAL_TIM_PWM_Start_DMA+0x94>
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012256:	b2db      	uxtb	r3, r3
 8012258:	2b02      	cmp	r3, #2
 801225a:	bf0c      	ite	eq
 801225c:	2301      	moveq	r3, #1
 801225e:	2300      	movne	r3, #0
 8012260:	b2db      	uxtb	r3, r3
 8012262:	e008      	b.n	8012276 <HAL_TIM_PWM_Start_DMA+0xa6>
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801226a:	b2db      	uxtb	r3, r3
 801226c:	2b02      	cmp	r3, #2
 801226e:	bf0c      	ite	eq
 8012270:	2301      	moveq	r3, #1
 8012272:	2300      	movne	r3, #0
 8012274:	b2db      	uxtb	r3, r3
 8012276:	2b00      	cmp	r3, #0
 8012278:	d001      	beq.n	801227e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 801227a:	2302      	movs	r3, #2
 801227c:	e1ab      	b.n	80125d6 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d109      	bne.n	8012298 <HAL_TIM_PWM_Start_DMA+0xc8>
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801228a:	b2db      	uxtb	r3, r3
 801228c:	2b01      	cmp	r3, #1
 801228e:	bf0c      	ite	eq
 8012290:	2301      	moveq	r3, #1
 8012292:	2300      	movne	r3, #0
 8012294:	b2db      	uxtb	r3, r3
 8012296:	e03c      	b.n	8012312 <HAL_TIM_PWM_Start_DMA+0x142>
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	2b04      	cmp	r3, #4
 801229c:	d109      	bne.n	80122b2 <HAL_TIM_PWM_Start_DMA+0xe2>
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80122a4:	b2db      	uxtb	r3, r3
 80122a6:	2b01      	cmp	r3, #1
 80122a8:	bf0c      	ite	eq
 80122aa:	2301      	moveq	r3, #1
 80122ac:	2300      	movne	r3, #0
 80122ae:	b2db      	uxtb	r3, r3
 80122b0:	e02f      	b.n	8012312 <HAL_TIM_PWM_Start_DMA+0x142>
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	2b08      	cmp	r3, #8
 80122b6:	d109      	bne.n	80122cc <HAL_TIM_PWM_Start_DMA+0xfc>
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80122be:	b2db      	uxtb	r3, r3
 80122c0:	2b01      	cmp	r3, #1
 80122c2:	bf0c      	ite	eq
 80122c4:	2301      	moveq	r3, #1
 80122c6:	2300      	movne	r3, #0
 80122c8:	b2db      	uxtb	r3, r3
 80122ca:	e022      	b.n	8012312 <HAL_TIM_PWM_Start_DMA+0x142>
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	2b0c      	cmp	r3, #12
 80122d0:	d109      	bne.n	80122e6 <HAL_TIM_PWM_Start_DMA+0x116>
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80122d8:	b2db      	uxtb	r3, r3
 80122da:	2b01      	cmp	r3, #1
 80122dc:	bf0c      	ite	eq
 80122de:	2301      	moveq	r3, #1
 80122e0:	2300      	movne	r3, #0
 80122e2:	b2db      	uxtb	r3, r3
 80122e4:	e015      	b.n	8012312 <HAL_TIM_PWM_Start_DMA+0x142>
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	2b10      	cmp	r3, #16
 80122ea:	d109      	bne.n	8012300 <HAL_TIM_PWM_Start_DMA+0x130>
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80122f2:	b2db      	uxtb	r3, r3
 80122f4:	2b01      	cmp	r3, #1
 80122f6:	bf0c      	ite	eq
 80122f8:	2301      	moveq	r3, #1
 80122fa:	2300      	movne	r3, #0
 80122fc:	b2db      	uxtb	r3, r3
 80122fe:	e008      	b.n	8012312 <HAL_TIM_PWM_Start_DMA+0x142>
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012306:	b2db      	uxtb	r3, r3
 8012308:	2b01      	cmp	r3, #1
 801230a:	bf0c      	ite	eq
 801230c:	2301      	moveq	r3, #1
 801230e:	2300      	movne	r3, #0
 8012310:	b2db      	uxtb	r3, r3
 8012312:	2b00      	cmp	r3, #0
 8012314:	d034      	beq.n	8012380 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d002      	beq.n	8012322 <HAL_TIM_PWM_Start_DMA+0x152>
 801231c:	887b      	ldrh	r3, [r7, #2]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d101      	bne.n	8012326 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8012322:	2301      	movs	r3, #1
 8012324:	e157      	b.n	80125d6 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d104      	bne.n	8012336 <HAL_TIM_PWM_Start_DMA+0x166>
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	2202      	movs	r2, #2
 8012330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012334:	e026      	b.n	8012384 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	2b04      	cmp	r3, #4
 801233a:	d104      	bne.n	8012346 <HAL_TIM_PWM_Start_DMA+0x176>
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	2202      	movs	r2, #2
 8012340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012344:	e01e      	b.n	8012384 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	2b08      	cmp	r3, #8
 801234a:	d104      	bne.n	8012356 <HAL_TIM_PWM_Start_DMA+0x186>
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	2202      	movs	r2, #2
 8012350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012354:	e016      	b.n	8012384 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	2b0c      	cmp	r3, #12
 801235a:	d104      	bne.n	8012366 <HAL_TIM_PWM_Start_DMA+0x196>
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	2202      	movs	r2, #2
 8012360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012364:	e00e      	b.n	8012384 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	2b10      	cmp	r3, #16
 801236a:	d104      	bne.n	8012376 <HAL_TIM_PWM_Start_DMA+0x1a6>
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	2202      	movs	r2, #2
 8012370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012374:	e006      	b.n	8012384 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	2202      	movs	r2, #2
 801237a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801237e:	e001      	b.n	8012384 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8012380:	2301      	movs	r3, #1
 8012382:	e128      	b.n	80125d6 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	2b0c      	cmp	r3, #12
 8012388:	f200 80ae 	bhi.w	80124e8 <HAL_TIM_PWM_Start_DMA+0x318>
 801238c:	a201      	add	r2, pc, #4	; (adr r2, 8012394 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 801238e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012392:	bf00      	nop
 8012394:	080123c9 	.word	0x080123c9
 8012398:	080124e9 	.word	0x080124e9
 801239c:	080124e9 	.word	0x080124e9
 80123a0:	080124e9 	.word	0x080124e9
 80123a4:	08012411 	.word	0x08012411
 80123a8:	080124e9 	.word	0x080124e9
 80123ac:	080124e9 	.word	0x080124e9
 80123b0:	080124e9 	.word	0x080124e9
 80123b4:	08012459 	.word	0x08012459
 80123b8:	080124e9 	.word	0x080124e9
 80123bc:	080124e9 	.word	0x080124e9
 80123c0:	080124e9 	.word	0x080124e9
 80123c4:	080124a1 	.word	0x080124a1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123cc:	4a84      	ldr	r2, [pc, #528]	; (80125e0 <HAL_TIM_PWM_Start_DMA+0x410>)
 80123ce:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123d4:	4a83      	ldr	r2, [pc, #524]	; (80125e4 <HAL_TIM_PWM_Start_DMA+0x414>)
 80123d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123dc:	4a82      	ldr	r2, [pc, #520]	; (80125e8 <HAL_TIM_PWM_Start_DMA+0x418>)
 80123de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80123e4:	6879      	ldr	r1, [r7, #4]
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	3334      	adds	r3, #52	; 0x34
 80123ec:	461a      	mov	r2, r3
 80123ee:	887b      	ldrh	r3, [r7, #2]
 80123f0:	f7fc f914 	bl	800e61c <HAL_DMA_Start_IT>
 80123f4:	4603      	mov	r3, r0
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d001      	beq.n	80123fe <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80123fa:	2301      	movs	r3, #1
 80123fc:	e0eb      	b.n	80125d6 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	68da      	ldr	r2, [r3, #12]
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801240c:	60da      	str	r2, [r3, #12]
      break;
 801240e:	e06e      	b.n	80124ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012414:	4a72      	ldr	r2, [pc, #456]	; (80125e0 <HAL_TIM_PWM_Start_DMA+0x410>)
 8012416:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801241c:	4a71      	ldr	r2, [pc, #452]	; (80125e4 <HAL_TIM_PWM_Start_DMA+0x414>)
 801241e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012424:	4a70      	ldr	r2, [pc, #448]	; (80125e8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8012426:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801242c:	6879      	ldr	r1, [r7, #4]
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	3338      	adds	r3, #56	; 0x38
 8012434:	461a      	mov	r2, r3
 8012436:	887b      	ldrh	r3, [r7, #2]
 8012438:	f7fc f8f0 	bl	800e61c <HAL_DMA_Start_IT>
 801243c:	4603      	mov	r3, r0
 801243e:	2b00      	cmp	r3, #0
 8012440:	d001      	beq.n	8012446 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012442:	2301      	movs	r3, #1
 8012444:	e0c7      	b.n	80125d6 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	68da      	ldr	r2, [r3, #12]
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012454:	60da      	str	r2, [r3, #12]
      break;
 8012456:	e04a      	b.n	80124ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801245c:	4a60      	ldr	r2, [pc, #384]	; (80125e0 <HAL_TIM_PWM_Start_DMA+0x410>)
 801245e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012464:	4a5f      	ldr	r2, [pc, #380]	; (80125e4 <HAL_TIM_PWM_Start_DMA+0x414>)
 8012466:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801246c:	4a5e      	ldr	r2, [pc, #376]	; (80125e8 <HAL_TIM_PWM_Start_DMA+0x418>)
 801246e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012474:	6879      	ldr	r1, [r7, #4]
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	333c      	adds	r3, #60	; 0x3c
 801247c:	461a      	mov	r2, r3
 801247e:	887b      	ldrh	r3, [r7, #2]
 8012480:	f7fc f8cc 	bl	800e61c <HAL_DMA_Start_IT>
 8012484:	4603      	mov	r3, r0
 8012486:	2b00      	cmp	r3, #0
 8012488:	d001      	beq.n	801248e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801248a:	2301      	movs	r3, #1
 801248c:	e0a3      	b.n	80125d6 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	68da      	ldr	r2, [r3, #12]
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801249c:	60da      	str	r2, [r3, #12]
      break;
 801249e:	e026      	b.n	80124ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124a4:	4a4e      	ldr	r2, [pc, #312]	; (80125e0 <HAL_TIM_PWM_Start_DMA+0x410>)
 80124a6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124ac:	4a4d      	ldr	r2, [pc, #308]	; (80125e4 <HAL_TIM_PWM_Start_DMA+0x414>)
 80124ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124b4:	4a4c      	ldr	r2, [pc, #304]	; (80125e8 <HAL_TIM_PWM_Start_DMA+0x418>)
 80124b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80124bc:	6879      	ldr	r1, [r7, #4]
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	3340      	adds	r3, #64	; 0x40
 80124c4:	461a      	mov	r2, r3
 80124c6:	887b      	ldrh	r3, [r7, #2]
 80124c8:	f7fc f8a8 	bl	800e61c <HAL_DMA_Start_IT>
 80124cc:	4603      	mov	r3, r0
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d001      	beq.n	80124d6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80124d2:	2301      	movs	r3, #1
 80124d4:	e07f      	b.n	80125d6 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	68da      	ldr	r2, [r3, #12]
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80124e4:	60da      	str	r2, [r3, #12]
      break;
 80124e6:	e002      	b.n	80124ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80124e8:	2301      	movs	r3, #1
 80124ea:	75fb      	strb	r3, [r7, #23]
      break;
 80124ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80124ee:	7dfb      	ldrb	r3, [r7, #23]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d16f      	bne.n	80125d4 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	2201      	movs	r2, #1
 80124fa:	68b9      	ldr	r1, [r7, #8]
 80124fc:	4618      	mov	r0, r3
 80124fe:	f001 fac7 	bl	8013a90 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	4a39      	ldr	r2, [pc, #228]	; (80125ec <HAL_TIM_PWM_Start_DMA+0x41c>)
 8012508:	4293      	cmp	r3, r2
 801250a:	d013      	beq.n	8012534 <HAL_TIM_PWM_Start_DMA+0x364>
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	4a37      	ldr	r2, [pc, #220]	; (80125f0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8012512:	4293      	cmp	r3, r2
 8012514:	d00e      	beq.n	8012534 <HAL_TIM_PWM_Start_DMA+0x364>
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	4a36      	ldr	r2, [pc, #216]	; (80125f4 <HAL_TIM_PWM_Start_DMA+0x424>)
 801251c:	4293      	cmp	r3, r2
 801251e:	d009      	beq.n	8012534 <HAL_TIM_PWM_Start_DMA+0x364>
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	4a34      	ldr	r2, [pc, #208]	; (80125f8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8012526:	4293      	cmp	r3, r2
 8012528:	d004      	beq.n	8012534 <HAL_TIM_PWM_Start_DMA+0x364>
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	4a33      	ldr	r2, [pc, #204]	; (80125fc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012530:	4293      	cmp	r3, r2
 8012532:	d101      	bne.n	8012538 <HAL_TIM_PWM_Start_DMA+0x368>
 8012534:	2301      	movs	r3, #1
 8012536:	e000      	b.n	801253a <HAL_TIM_PWM_Start_DMA+0x36a>
 8012538:	2300      	movs	r3, #0
 801253a:	2b00      	cmp	r3, #0
 801253c:	d007      	beq.n	801254e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801254c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	4a26      	ldr	r2, [pc, #152]	; (80125ec <HAL_TIM_PWM_Start_DMA+0x41c>)
 8012554:	4293      	cmp	r3, r2
 8012556:	d01d      	beq.n	8012594 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012560:	d018      	beq.n	8012594 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	4a26      	ldr	r2, [pc, #152]	; (8012600 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012568:	4293      	cmp	r3, r2
 801256a:	d013      	beq.n	8012594 <HAL_TIM_PWM_Start_DMA+0x3c4>
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	4a24      	ldr	r2, [pc, #144]	; (8012604 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012572:	4293      	cmp	r3, r2
 8012574:	d00e      	beq.n	8012594 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	4a23      	ldr	r2, [pc, #140]	; (8012608 <HAL_TIM_PWM_Start_DMA+0x438>)
 801257c:	4293      	cmp	r3, r2
 801257e:	d009      	beq.n	8012594 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	4a1a      	ldr	r2, [pc, #104]	; (80125f0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8012586:	4293      	cmp	r3, r2
 8012588:	d004      	beq.n	8012594 <HAL_TIM_PWM_Start_DMA+0x3c4>
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	4a19      	ldr	r2, [pc, #100]	; (80125f4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8012590:	4293      	cmp	r3, r2
 8012592:	d115      	bne.n	80125c0 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	689a      	ldr	r2, [r3, #8]
 801259a:	4b1c      	ldr	r3, [pc, #112]	; (801260c <HAL_TIM_PWM_Start_DMA+0x43c>)
 801259c:	4013      	ands	r3, r2
 801259e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	2b06      	cmp	r3, #6
 80125a4:	d015      	beq.n	80125d2 <HAL_TIM_PWM_Start_DMA+0x402>
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125ac:	d011      	beq.n	80125d2 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	681a      	ldr	r2, [r3, #0]
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	f042 0201 	orr.w	r2, r2, #1
 80125bc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80125be:	e008      	b.n	80125d2 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	681a      	ldr	r2, [r3, #0]
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	f042 0201 	orr.w	r2, r2, #1
 80125ce:	601a      	str	r2, [r3, #0]
 80125d0:	e000      	b.n	80125d4 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80125d2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80125d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3718      	adds	r7, #24
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}
 80125de:	bf00      	nop
 80125e0:	0801316d 	.word	0x0801316d
 80125e4:	08013215 	.word	0x08013215
 80125e8:	080130db 	.word	0x080130db
 80125ec:	40012c00 	.word	0x40012c00
 80125f0:	40013400 	.word	0x40013400
 80125f4:	40014000 	.word	0x40014000
 80125f8:	40014400 	.word	0x40014400
 80125fc:	40014800 	.word	0x40014800
 8012600:	40000400 	.word	0x40000400
 8012604:	40000800 	.word	0x40000800
 8012608:	40000c00 	.word	0x40000c00
 801260c:	00010007 	.word	0x00010007

08012610 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b084      	sub	sp, #16
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801261a:	2300      	movs	r3, #0
 801261c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	2b0c      	cmp	r3, #12
 8012622:	d855      	bhi.n	80126d0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8012624:	a201      	add	r2, pc, #4	; (adr r2, 801262c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8012626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801262a:	bf00      	nop
 801262c:	08012661 	.word	0x08012661
 8012630:	080126d1 	.word	0x080126d1
 8012634:	080126d1 	.word	0x080126d1
 8012638:	080126d1 	.word	0x080126d1
 801263c:	0801267d 	.word	0x0801267d
 8012640:	080126d1 	.word	0x080126d1
 8012644:	080126d1 	.word	0x080126d1
 8012648:	080126d1 	.word	0x080126d1
 801264c:	08012699 	.word	0x08012699
 8012650:	080126d1 	.word	0x080126d1
 8012654:	080126d1 	.word	0x080126d1
 8012658:	080126d1 	.word	0x080126d1
 801265c:	080126b5 	.word	0x080126b5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	68da      	ldr	r2, [r3, #12]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801266e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012674:	4618      	mov	r0, r3
 8012676:	f7fc f8a8 	bl	800e7ca <HAL_DMA_Abort_IT>
      break;
 801267a:	e02c      	b.n	80126d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	68da      	ldr	r2, [r3, #12]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801268a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012690:	4618      	mov	r0, r3
 8012692:	f7fc f89a 	bl	800e7ca <HAL_DMA_Abort_IT>
      break;
 8012696:	e01e      	b.n	80126d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	68da      	ldr	r2, [r3, #12]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80126a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7fc f88c 	bl	800e7ca <HAL_DMA_Abort_IT>
      break;
 80126b2:	e010      	b.n	80126d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	68da      	ldr	r2, [r3, #12]
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80126c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7fc f87e 	bl	800e7ca <HAL_DMA_Abort_IT>
      break;
 80126ce:	e002      	b.n	80126d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80126d0:	2301      	movs	r3, #1
 80126d2:	73fb      	strb	r3, [r7, #15]
      break;
 80126d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80126d6:	7bfb      	ldrb	r3, [r7, #15]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	f040 8081 	bne.w	80127e0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	2200      	movs	r2, #0
 80126e4:	6839      	ldr	r1, [r7, #0]
 80126e6:	4618      	mov	r0, r3
 80126e8:	f001 f9d2 	bl	8013a90 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	4a3e      	ldr	r2, [pc, #248]	; (80127ec <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80126f2:	4293      	cmp	r3, r2
 80126f4:	d013      	beq.n	801271e <HAL_TIM_PWM_Stop_DMA+0x10e>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	4a3d      	ldr	r2, [pc, #244]	; (80127f0 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 80126fc:	4293      	cmp	r3, r2
 80126fe:	d00e      	beq.n	801271e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	4a3b      	ldr	r2, [pc, #236]	; (80127f4 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8012706:	4293      	cmp	r3, r2
 8012708:	d009      	beq.n	801271e <HAL_TIM_PWM_Stop_DMA+0x10e>
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	4a3a      	ldr	r2, [pc, #232]	; (80127f8 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8012710:	4293      	cmp	r3, r2
 8012712:	d004      	beq.n	801271e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	4a38      	ldr	r2, [pc, #224]	; (80127fc <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 801271a:	4293      	cmp	r3, r2
 801271c:	d101      	bne.n	8012722 <HAL_TIM_PWM_Stop_DMA+0x112>
 801271e:	2301      	movs	r3, #1
 8012720:	e000      	b.n	8012724 <HAL_TIM_PWM_Stop_DMA+0x114>
 8012722:	2300      	movs	r3, #0
 8012724:	2b00      	cmp	r3, #0
 8012726:	d017      	beq.n	8012758 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	6a1a      	ldr	r2, [r3, #32]
 801272e:	f241 1311 	movw	r3, #4369	; 0x1111
 8012732:	4013      	ands	r3, r2
 8012734:	2b00      	cmp	r3, #0
 8012736:	d10f      	bne.n	8012758 <HAL_TIM_PWM_Stop_DMA+0x148>
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	6a1a      	ldr	r2, [r3, #32]
 801273e:	f240 4344 	movw	r3, #1092	; 0x444
 8012742:	4013      	ands	r3, r2
 8012744:	2b00      	cmp	r3, #0
 8012746:	d107      	bne.n	8012758 <HAL_TIM_PWM_Stop_DMA+0x148>
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012756:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	6a1a      	ldr	r2, [r3, #32]
 801275e:	f241 1311 	movw	r3, #4369	; 0x1111
 8012762:	4013      	ands	r3, r2
 8012764:	2b00      	cmp	r3, #0
 8012766:	d10f      	bne.n	8012788 <HAL_TIM_PWM_Stop_DMA+0x178>
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	6a1a      	ldr	r2, [r3, #32]
 801276e:	f240 4344 	movw	r3, #1092	; 0x444
 8012772:	4013      	ands	r3, r2
 8012774:	2b00      	cmp	r3, #0
 8012776:	d107      	bne.n	8012788 <HAL_TIM_PWM_Stop_DMA+0x178>
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	681a      	ldr	r2, [r3, #0]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	f022 0201 	bic.w	r2, r2, #1
 8012786:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d104      	bne.n	8012798 <HAL_TIM_PWM_Stop_DMA+0x188>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2201      	movs	r2, #1
 8012792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012796:	e023      	b.n	80127e0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	2b04      	cmp	r3, #4
 801279c:	d104      	bne.n	80127a8 <HAL_TIM_PWM_Stop_DMA+0x198>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	2201      	movs	r2, #1
 80127a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80127a6:	e01b      	b.n	80127e0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	2b08      	cmp	r3, #8
 80127ac:	d104      	bne.n	80127b8 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2201      	movs	r2, #1
 80127b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80127b6:	e013      	b.n	80127e0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	2b0c      	cmp	r3, #12
 80127bc:	d104      	bne.n	80127c8 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2201      	movs	r2, #1
 80127c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80127c6:	e00b      	b.n	80127e0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	2b10      	cmp	r3, #16
 80127cc:	d104      	bne.n	80127d8 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2201      	movs	r2, #1
 80127d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80127d6:	e003      	b.n	80127e0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2201      	movs	r2, #1
 80127dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80127e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3710      	adds	r7, #16
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}
 80127ea:	bf00      	nop
 80127ec:	40012c00 	.word	0x40012c00
 80127f0:	40013400 	.word	0x40013400
 80127f4:	40014000 	.word	0x40014000
 80127f8:	40014400 	.word	0x40014400
 80127fc:	40014800 	.word	0x40014800

08012800 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b086      	sub	sp, #24
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d101      	bne.n	8012814 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8012810:	2301      	movs	r3, #1
 8012812:	e097      	b.n	8012944 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801281a:	b2db      	uxtb	r3, r3
 801281c:	2b00      	cmp	r3, #0
 801281e:	d106      	bne.n	801282e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	2200      	movs	r2, #0
 8012824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f7fb fad9 	bl	800dde0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	2202      	movs	r2, #2
 8012832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	689b      	ldr	r3, [r3, #8]
 801283c:	687a      	ldr	r2, [r7, #4]
 801283e:	6812      	ldr	r2, [r2, #0]
 8012840:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8012844:	f023 0307 	bic.w	r3, r3, #7
 8012848:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681a      	ldr	r2, [r3, #0]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	3304      	adds	r3, #4
 8012852:	4619      	mov	r1, r3
 8012854:	4610      	mov	r0, r2
 8012856:	f000 fd11 	bl	801327c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	689b      	ldr	r3, [r3, #8]
 8012860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	699b      	ldr	r3, [r3, #24]
 8012868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	6a1b      	ldr	r3, [r3, #32]
 8012870:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	697a      	ldr	r2, [r7, #20]
 8012878:	4313      	orrs	r3, r2
 801287a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012882:	f023 0303 	bic.w	r3, r3, #3
 8012886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	689a      	ldr	r2, [r3, #8]
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	699b      	ldr	r3, [r3, #24]
 8012890:	021b      	lsls	r3, r3, #8
 8012892:	4313      	orrs	r3, r2
 8012894:	693a      	ldr	r2, [r7, #16]
 8012896:	4313      	orrs	r3, r2
 8012898:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801289a:	693b      	ldr	r3, [r7, #16]
 801289c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80128a0:	f023 030c 	bic.w	r3, r3, #12
 80128a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80128ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80128b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	68da      	ldr	r2, [r3, #12]
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	69db      	ldr	r3, [r3, #28]
 80128ba:	021b      	lsls	r3, r3, #8
 80128bc:	4313      	orrs	r3, r2
 80128be:	693a      	ldr	r2, [r7, #16]
 80128c0:	4313      	orrs	r3, r2
 80128c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	691b      	ldr	r3, [r3, #16]
 80128c8:	011a      	lsls	r2, r3, #4
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	6a1b      	ldr	r3, [r3, #32]
 80128ce:	031b      	lsls	r3, r3, #12
 80128d0:	4313      	orrs	r3, r2
 80128d2:	693a      	ldr	r2, [r7, #16]
 80128d4:	4313      	orrs	r3, r2
 80128d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80128de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80128e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	685a      	ldr	r2, [r3, #4]
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	695b      	ldr	r3, [r3, #20]
 80128f0:	011b      	lsls	r3, r3, #4
 80128f2:	4313      	orrs	r3, r2
 80128f4:	68fa      	ldr	r2, [r7, #12]
 80128f6:	4313      	orrs	r3, r2
 80128f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	697a      	ldr	r2, [r7, #20]
 8012900:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	693a      	ldr	r2, [r7, #16]
 8012908:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	68fa      	ldr	r2, [r7, #12]
 8012910:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2201      	movs	r2, #1
 8012916:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2201      	movs	r2, #1
 801291e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2201      	movs	r2, #1
 8012926:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2201      	movs	r2, #1
 801292e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2201      	movs	r2, #1
 8012936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2201      	movs	r2, #1
 801293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012942:	2300      	movs	r3, #0
}
 8012944:	4618      	mov	r0, r3
 8012946:	3718      	adds	r7, #24
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}

0801294c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b084      	sub	sp, #16
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
 8012954:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801295c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012964:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801296c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012974:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d110      	bne.n	801299e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801297c:	7bfb      	ldrb	r3, [r7, #15]
 801297e:	2b01      	cmp	r3, #1
 8012980:	d102      	bne.n	8012988 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8012982:	7b7b      	ldrb	r3, [r7, #13]
 8012984:	2b01      	cmp	r3, #1
 8012986:	d001      	beq.n	801298c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8012988:	2301      	movs	r3, #1
 801298a:	e069      	b.n	8012a60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2202      	movs	r2, #2
 8012990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2202      	movs	r2, #2
 8012998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801299c:	e031      	b.n	8012a02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 801299e:	683b      	ldr	r3, [r7, #0]
 80129a0:	2b04      	cmp	r3, #4
 80129a2:	d110      	bne.n	80129c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80129a4:	7bbb      	ldrb	r3, [r7, #14]
 80129a6:	2b01      	cmp	r3, #1
 80129a8:	d102      	bne.n	80129b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80129aa:	7b3b      	ldrb	r3, [r7, #12]
 80129ac:	2b01      	cmp	r3, #1
 80129ae:	d001      	beq.n	80129b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80129b0:	2301      	movs	r3, #1
 80129b2:	e055      	b.n	8012a60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2202      	movs	r2, #2
 80129b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	2202      	movs	r2, #2
 80129c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80129c4:	e01d      	b.n	8012a02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80129c6:	7bfb      	ldrb	r3, [r7, #15]
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	d108      	bne.n	80129de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80129cc:	7bbb      	ldrb	r3, [r7, #14]
 80129ce:	2b01      	cmp	r3, #1
 80129d0:	d105      	bne.n	80129de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80129d2:	7b7b      	ldrb	r3, [r7, #13]
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d102      	bne.n	80129de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80129d8:	7b3b      	ldrb	r3, [r7, #12]
 80129da:	2b01      	cmp	r3, #1
 80129dc:	d001      	beq.n	80129e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80129de:	2301      	movs	r3, #1
 80129e0:	e03e      	b.n	8012a60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	2202      	movs	r2, #2
 80129e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	2202      	movs	r2, #2
 80129ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2202      	movs	r2, #2
 80129f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	2202      	movs	r2, #2
 80129fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d003      	beq.n	8012a10 <HAL_TIM_Encoder_Start+0xc4>
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	2b04      	cmp	r3, #4
 8012a0c:	d008      	beq.n	8012a20 <HAL_TIM_Encoder_Start+0xd4>
 8012a0e:	e00f      	b.n	8012a30 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	2201      	movs	r2, #1
 8012a16:	2100      	movs	r1, #0
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f001 f839 	bl	8013a90 <TIM_CCxChannelCmd>
      break;
 8012a1e:	e016      	b.n	8012a4e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	2201      	movs	r2, #1
 8012a26:	2104      	movs	r1, #4
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f001 f831 	bl	8013a90 <TIM_CCxChannelCmd>
      break;
 8012a2e:	e00e      	b.n	8012a4e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	2201      	movs	r2, #1
 8012a36:	2100      	movs	r1, #0
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f001 f829 	bl	8013a90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	2201      	movs	r2, #1
 8012a44:	2104      	movs	r1, #4
 8012a46:	4618      	mov	r0, r3
 8012a48:	f001 f822 	bl	8013a90 <TIM_CCxChannelCmd>
      break;
 8012a4c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	681a      	ldr	r2, [r3, #0]
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	f042 0201 	orr.w	r2, r2, #1
 8012a5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012a5e:	2300      	movs	r3, #0
}
 8012a60:	4618      	mov	r0, r3
 8012a62:	3710      	adds	r7, #16
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}

08012a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	691b      	ldr	r3, [r3, #16]
 8012a76:	f003 0302 	and.w	r3, r3, #2
 8012a7a:	2b02      	cmp	r3, #2
 8012a7c:	d122      	bne.n	8012ac4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	68db      	ldr	r3, [r3, #12]
 8012a84:	f003 0302 	and.w	r3, r3, #2
 8012a88:	2b02      	cmp	r3, #2
 8012a8a:	d11b      	bne.n	8012ac4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	f06f 0202 	mvn.w	r2, #2
 8012a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2201      	movs	r2, #1
 8012a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	699b      	ldr	r3, [r3, #24]
 8012aa2:	f003 0303 	and.w	r3, r3, #3
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d003      	beq.n	8012ab2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012aaa:	6878      	ldr	r0, [r7, #4]
 8012aac:	f000 fae3 	bl	8013076 <HAL_TIM_IC_CaptureCallback>
 8012ab0:	e005      	b.n	8012abe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f000 fad5 	bl	8013062 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f000 fae6 	bl	801308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	691b      	ldr	r3, [r3, #16]
 8012aca:	f003 0304 	and.w	r3, r3, #4
 8012ace:	2b04      	cmp	r3, #4
 8012ad0:	d122      	bne.n	8012b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	68db      	ldr	r3, [r3, #12]
 8012ad8:	f003 0304 	and.w	r3, r3, #4
 8012adc:	2b04      	cmp	r3, #4
 8012ade:	d11b      	bne.n	8012b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	f06f 0204 	mvn.w	r2, #4
 8012ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2202      	movs	r2, #2
 8012aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	699b      	ldr	r3, [r3, #24]
 8012af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d003      	beq.n	8012b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f000 fab9 	bl	8013076 <HAL_TIM_IC_CaptureCallback>
 8012b04:	e005      	b.n	8012b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f000 faab 	bl	8013062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f000 fabc 	bl	801308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2200      	movs	r2, #0
 8012b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	691b      	ldr	r3, [r3, #16]
 8012b1e:	f003 0308 	and.w	r3, r3, #8
 8012b22:	2b08      	cmp	r3, #8
 8012b24:	d122      	bne.n	8012b6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	68db      	ldr	r3, [r3, #12]
 8012b2c:	f003 0308 	and.w	r3, r3, #8
 8012b30:	2b08      	cmp	r3, #8
 8012b32:	d11b      	bne.n	8012b6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	f06f 0208 	mvn.w	r2, #8
 8012b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2204      	movs	r2, #4
 8012b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	69db      	ldr	r3, [r3, #28]
 8012b4a:	f003 0303 	and.w	r3, r3, #3
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d003      	beq.n	8012b5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f000 fa8f 	bl	8013076 <HAL_TIM_IC_CaptureCallback>
 8012b58:	e005      	b.n	8012b66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012b5a:	6878      	ldr	r0, [r7, #4]
 8012b5c:	f000 fa81 	bl	8013062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f000 fa92 	bl	801308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	691b      	ldr	r3, [r3, #16]
 8012b72:	f003 0310 	and.w	r3, r3, #16
 8012b76:	2b10      	cmp	r3, #16
 8012b78:	d122      	bne.n	8012bc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	68db      	ldr	r3, [r3, #12]
 8012b80:	f003 0310 	and.w	r3, r3, #16
 8012b84:	2b10      	cmp	r3, #16
 8012b86:	d11b      	bne.n	8012bc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	f06f 0210 	mvn.w	r2, #16
 8012b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2208      	movs	r2, #8
 8012b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	69db      	ldr	r3, [r3, #28]
 8012b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d003      	beq.n	8012bae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012ba6:	6878      	ldr	r0, [r7, #4]
 8012ba8:	f000 fa65 	bl	8013076 <HAL_TIM_IC_CaptureCallback>
 8012bac:	e005      	b.n	8012bba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f000 fa57 	bl	8013062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f000 fa68 	bl	801308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	691b      	ldr	r3, [r3, #16]
 8012bc6:	f003 0301 	and.w	r3, r3, #1
 8012bca:	2b01      	cmp	r3, #1
 8012bcc:	d10e      	bne.n	8012bec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	68db      	ldr	r3, [r3, #12]
 8012bd4:	f003 0301 	and.w	r3, r3, #1
 8012bd8:	2b01      	cmp	r3, #1
 8012bda:	d107      	bne.n	8012bec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	f06f 0201 	mvn.w	r2, #1
 8012be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f7f8 fb66 	bl	800b2b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	691b      	ldr	r3, [r3, #16]
 8012bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012bf6:	2b80      	cmp	r3, #128	; 0x80
 8012bf8:	d10e      	bne.n	8012c18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	68db      	ldr	r3, [r3, #12]
 8012c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c04:	2b80      	cmp	r3, #128	; 0x80
 8012c06:	d107      	bne.n	8012c18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f001 f872 	bl	8013cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	691b      	ldr	r3, [r3, #16]
 8012c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c26:	d10e      	bne.n	8012c46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	68db      	ldr	r3, [r3, #12]
 8012c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c32:	2b80      	cmp	r3, #128	; 0x80
 8012c34:	d107      	bne.n	8012c46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	f001 f865 	bl	8013d10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	691b      	ldr	r3, [r3, #16]
 8012c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c50:	2b40      	cmp	r3, #64	; 0x40
 8012c52:	d10e      	bne.n	8012c72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	68db      	ldr	r3, [r3, #12]
 8012c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c5e:	2b40      	cmp	r3, #64	; 0x40
 8012c60:	d107      	bne.n	8012c72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f000 fa20 	bl	80130b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	691b      	ldr	r3, [r3, #16]
 8012c78:	f003 0320 	and.w	r3, r3, #32
 8012c7c:	2b20      	cmp	r3, #32
 8012c7e:	d10e      	bne.n	8012c9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	68db      	ldr	r3, [r3, #12]
 8012c86:	f003 0320 	and.w	r3, r3, #32
 8012c8a:	2b20      	cmp	r3, #32
 8012c8c:	d107      	bne.n	8012c9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	f06f 0220 	mvn.w	r2, #32
 8012c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f001 f825 	bl	8013ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012c9e:	bf00      	nop
 8012ca0:	3708      	adds	r7, #8
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bd80      	pop	{r7, pc}
	...

08012ca8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b086      	sub	sp, #24
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	60f8      	str	r0, [r7, #12]
 8012cb0:	60b9      	str	r1, [r7, #8]
 8012cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012cbe:	2b01      	cmp	r3, #1
 8012cc0:	d101      	bne.n	8012cc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012cc2:	2302      	movs	r3, #2
 8012cc4:	e0ff      	b.n	8012ec6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	2201      	movs	r2, #1
 8012cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2b14      	cmp	r3, #20
 8012cd2:	f200 80f0 	bhi.w	8012eb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012cd6:	a201      	add	r2, pc, #4	; (adr r2, 8012cdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cdc:	08012d31 	.word	0x08012d31
 8012ce0:	08012eb7 	.word	0x08012eb7
 8012ce4:	08012eb7 	.word	0x08012eb7
 8012ce8:	08012eb7 	.word	0x08012eb7
 8012cec:	08012d71 	.word	0x08012d71
 8012cf0:	08012eb7 	.word	0x08012eb7
 8012cf4:	08012eb7 	.word	0x08012eb7
 8012cf8:	08012eb7 	.word	0x08012eb7
 8012cfc:	08012db3 	.word	0x08012db3
 8012d00:	08012eb7 	.word	0x08012eb7
 8012d04:	08012eb7 	.word	0x08012eb7
 8012d08:	08012eb7 	.word	0x08012eb7
 8012d0c:	08012df3 	.word	0x08012df3
 8012d10:	08012eb7 	.word	0x08012eb7
 8012d14:	08012eb7 	.word	0x08012eb7
 8012d18:	08012eb7 	.word	0x08012eb7
 8012d1c:	08012e35 	.word	0x08012e35
 8012d20:	08012eb7 	.word	0x08012eb7
 8012d24:	08012eb7 	.word	0x08012eb7
 8012d28:	08012eb7 	.word	0x08012eb7
 8012d2c:	08012e75 	.word	0x08012e75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	68b9      	ldr	r1, [r7, #8]
 8012d36:	4618      	mov	r0, r3
 8012d38:	f000 fb3a 	bl	80133b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	699a      	ldr	r2, [r3, #24]
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	f042 0208 	orr.w	r2, r2, #8
 8012d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	699a      	ldr	r2, [r3, #24]
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	f022 0204 	bic.w	r2, r2, #4
 8012d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	6999      	ldr	r1, [r3, #24]
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	691a      	ldr	r2, [r3, #16]
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	430a      	orrs	r2, r1
 8012d6c:	619a      	str	r2, [r3, #24]
      break;
 8012d6e:	e0a5      	b.n	8012ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	68b9      	ldr	r1, [r7, #8]
 8012d76:	4618      	mov	r0, r3
 8012d78:	f000 fbaa 	bl	80134d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	699a      	ldr	r2, [r3, #24]
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	699a      	ldr	r2, [r3, #24]
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	6999      	ldr	r1, [r3, #24]
 8012da2:	68bb      	ldr	r3, [r7, #8]
 8012da4:	691b      	ldr	r3, [r3, #16]
 8012da6:	021a      	lsls	r2, r3, #8
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	430a      	orrs	r2, r1
 8012dae:	619a      	str	r2, [r3, #24]
      break;
 8012db0:	e084      	b.n	8012ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	68b9      	ldr	r1, [r7, #8]
 8012db8:	4618      	mov	r0, r3
 8012dba:	f000 fc13 	bl	80135e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	69da      	ldr	r2, [r3, #28]
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	f042 0208 	orr.w	r2, r2, #8
 8012dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	69da      	ldr	r2, [r3, #28]
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	f022 0204 	bic.w	r2, r2, #4
 8012ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	69d9      	ldr	r1, [r3, #28]
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	691a      	ldr	r2, [r3, #16]
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	430a      	orrs	r2, r1
 8012dee:	61da      	str	r2, [r3, #28]
      break;
 8012df0:	e064      	b.n	8012ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	68b9      	ldr	r1, [r7, #8]
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f000 fc7b 	bl	80136f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	69da      	ldr	r2, [r3, #28]
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	69da      	ldr	r2, [r3, #28]
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	69d9      	ldr	r1, [r3, #28]
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	691b      	ldr	r3, [r3, #16]
 8012e28:	021a      	lsls	r2, r3, #8
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	430a      	orrs	r2, r1
 8012e30:	61da      	str	r2, [r3, #28]
      break;
 8012e32:	e043      	b.n	8012ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	68b9      	ldr	r1, [r7, #8]
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f000 fcc4 	bl	80137c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	f042 0208 	orr.w	r2, r2, #8
 8012e4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f022 0204 	bic.w	r2, r2, #4
 8012e5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	691a      	ldr	r2, [r3, #16]
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	430a      	orrs	r2, r1
 8012e70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012e72:	e023      	b.n	8012ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	68b9      	ldr	r1, [r7, #8]
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f000 fd08 	bl	8013890 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012e8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012e9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	691b      	ldr	r3, [r3, #16]
 8012eaa:	021a      	lsls	r2, r3, #8
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	430a      	orrs	r2, r1
 8012eb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012eb4:	e002      	b.n	8012ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8012eba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	3718      	adds	r7, #24
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop

08012ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b084      	sub	sp, #16
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
 8012ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012eda:	2300      	movs	r3, #0
 8012edc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012ee4:	2b01      	cmp	r3, #1
 8012ee6:	d101      	bne.n	8012eec <HAL_TIM_ConfigClockSource+0x1c>
 8012ee8:	2302      	movs	r3, #2
 8012eea:	e0b6      	b.n	801305a <HAL_TIM_ConfigClockSource+0x18a>
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	2201      	movs	r2, #1
 8012ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2202      	movs	r2, #2
 8012ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	689b      	ldr	r3, [r3, #8]
 8012f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8012f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	68ba      	ldr	r2, [r7, #8]
 8012f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012f28:	d03e      	beq.n	8012fa8 <HAL_TIM_ConfigClockSource+0xd8>
 8012f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012f2e:	f200 8087 	bhi.w	8013040 <HAL_TIM_ConfigClockSource+0x170>
 8012f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f36:	f000 8086 	beq.w	8013046 <HAL_TIM_ConfigClockSource+0x176>
 8012f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f3e:	d87f      	bhi.n	8013040 <HAL_TIM_ConfigClockSource+0x170>
 8012f40:	2b70      	cmp	r3, #112	; 0x70
 8012f42:	d01a      	beq.n	8012f7a <HAL_TIM_ConfigClockSource+0xaa>
 8012f44:	2b70      	cmp	r3, #112	; 0x70
 8012f46:	d87b      	bhi.n	8013040 <HAL_TIM_ConfigClockSource+0x170>
 8012f48:	2b60      	cmp	r3, #96	; 0x60
 8012f4a:	d050      	beq.n	8012fee <HAL_TIM_ConfigClockSource+0x11e>
 8012f4c:	2b60      	cmp	r3, #96	; 0x60
 8012f4e:	d877      	bhi.n	8013040 <HAL_TIM_ConfigClockSource+0x170>
 8012f50:	2b50      	cmp	r3, #80	; 0x50
 8012f52:	d03c      	beq.n	8012fce <HAL_TIM_ConfigClockSource+0xfe>
 8012f54:	2b50      	cmp	r3, #80	; 0x50
 8012f56:	d873      	bhi.n	8013040 <HAL_TIM_ConfigClockSource+0x170>
 8012f58:	2b40      	cmp	r3, #64	; 0x40
 8012f5a:	d058      	beq.n	801300e <HAL_TIM_ConfigClockSource+0x13e>
 8012f5c:	2b40      	cmp	r3, #64	; 0x40
 8012f5e:	d86f      	bhi.n	8013040 <HAL_TIM_ConfigClockSource+0x170>
 8012f60:	2b30      	cmp	r3, #48	; 0x30
 8012f62:	d064      	beq.n	801302e <HAL_TIM_ConfigClockSource+0x15e>
 8012f64:	2b30      	cmp	r3, #48	; 0x30
 8012f66:	d86b      	bhi.n	8013040 <HAL_TIM_ConfigClockSource+0x170>
 8012f68:	2b20      	cmp	r3, #32
 8012f6a:	d060      	beq.n	801302e <HAL_TIM_ConfigClockSource+0x15e>
 8012f6c:	2b20      	cmp	r3, #32
 8012f6e:	d867      	bhi.n	8013040 <HAL_TIM_ConfigClockSource+0x170>
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d05c      	beq.n	801302e <HAL_TIM_ConfigClockSource+0x15e>
 8012f74:	2b10      	cmp	r3, #16
 8012f76:	d05a      	beq.n	801302e <HAL_TIM_ConfigClockSource+0x15e>
 8012f78:	e062      	b.n	8013040 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6818      	ldr	r0, [r3, #0]
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	6899      	ldr	r1, [r3, #8]
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	685a      	ldr	r2, [r3, #4]
 8012f86:	683b      	ldr	r3, [r7, #0]
 8012f88:	68db      	ldr	r3, [r3, #12]
 8012f8a:	f000 fd61 	bl	8013a50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	689b      	ldr	r3, [r3, #8]
 8012f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	68ba      	ldr	r2, [r7, #8]
 8012fa4:	609a      	str	r2, [r3, #8]
      break;
 8012fa6:	e04f      	b.n	8013048 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	6818      	ldr	r0, [r3, #0]
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	6899      	ldr	r1, [r3, #8]
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	685a      	ldr	r2, [r3, #4]
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	68db      	ldr	r3, [r3, #12]
 8012fb8:	f000 fd4a 	bl	8013a50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	689a      	ldr	r2, [r3, #8]
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012fca:	609a      	str	r2, [r3, #8]
      break;
 8012fcc:	e03c      	b.n	8013048 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	6818      	ldr	r0, [r3, #0]
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	6859      	ldr	r1, [r3, #4]
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	68db      	ldr	r3, [r3, #12]
 8012fda:	461a      	mov	r2, r3
 8012fdc:	f000 fcbe 	bl	801395c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	2150      	movs	r1, #80	; 0x50
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f000 fd17 	bl	8013a1a <TIM_ITRx_SetConfig>
      break;
 8012fec:	e02c      	b.n	8013048 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	6818      	ldr	r0, [r3, #0]
 8012ff2:	683b      	ldr	r3, [r7, #0]
 8012ff4:	6859      	ldr	r1, [r3, #4]
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	68db      	ldr	r3, [r3, #12]
 8012ffa:	461a      	mov	r2, r3
 8012ffc:	f000 fcdd 	bl	80139ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	2160      	movs	r1, #96	; 0x60
 8013006:	4618      	mov	r0, r3
 8013008:	f000 fd07 	bl	8013a1a <TIM_ITRx_SetConfig>
      break;
 801300c:	e01c      	b.n	8013048 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	6818      	ldr	r0, [r3, #0]
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	6859      	ldr	r1, [r3, #4]
 8013016:	683b      	ldr	r3, [r7, #0]
 8013018:	68db      	ldr	r3, [r3, #12]
 801301a:	461a      	mov	r2, r3
 801301c:	f000 fc9e 	bl	801395c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	2140      	movs	r1, #64	; 0x40
 8013026:	4618      	mov	r0, r3
 8013028:	f000 fcf7 	bl	8013a1a <TIM_ITRx_SetConfig>
      break;
 801302c:	e00c      	b.n	8013048 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	681a      	ldr	r2, [r3, #0]
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	4619      	mov	r1, r3
 8013038:	4610      	mov	r0, r2
 801303a:	f000 fcee 	bl	8013a1a <TIM_ITRx_SetConfig>
      break;
 801303e:	e003      	b.n	8013048 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8013040:	2301      	movs	r3, #1
 8013042:	73fb      	strb	r3, [r7, #15]
      break;
 8013044:	e000      	b.n	8013048 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8013046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2201      	movs	r2, #1
 801304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2200      	movs	r2, #0
 8013054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013058:	7bfb      	ldrb	r3, [r7, #15]
}
 801305a:	4618      	mov	r0, r3
 801305c:	3710      	adds	r7, #16
 801305e:	46bd      	mov	sp, r7
 8013060:	bd80      	pop	{r7, pc}

08013062 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013062:	b480      	push	{r7}
 8013064:	b083      	sub	sp, #12
 8013066:	af00      	add	r7, sp, #0
 8013068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801306a:	bf00      	nop
 801306c:	370c      	adds	r7, #12
 801306e:	46bd      	mov	sp, r7
 8013070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013074:	4770      	bx	lr

08013076 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013076:	b480      	push	{r7}
 8013078:	b083      	sub	sp, #12
 801307a:	af00      	add	r7, sp, #0
 801307c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801307e:	bf00      	nop
 8013080:	370c      	adds	r7, #12
 8013082:	46bd      	mov	sp, r7
 8013084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013088:	4770      	bx	lr

0801308a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801308a:	b480      	push	{r7}
 801308c:	b083      	sub	sp, #12
 801308e:	af00      	add	r7, sp, #0
 8013090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013092:	bf00      	nop
 8013094:	370c      	adds	r7, #12
 8013096:	46bd      	mov	sp, r7
 8013098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309c:	4770      	bx	lr

0801309e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801309e:	b480      	push	{r7}
 80130a0:	b083      	sub	sp, #12
 80130a2:	af00      	add	r7, sp, #0
 80130a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80130a6:	bf00      	nop
 80130a8:	370c      	adds	r7, #12
 80130aa:	46bd      	mov	sp, r7
 80130ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b0:	4770      	bx	lr

080130b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80130b2:	b480      	push	{r7}
 80130b4:	b083      	sub	sp, #12
 80130b6:	af00      	add	r7, sp, #0
 80130b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80130ba:	bf00      	nop
 80130bc:	370c      	adds	r7, #12
 80130be:	46bd      	mov	sp, r7
 80130c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c4:	4770      	bx	lr

080130c6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80130c6:	b480      	push	{r7}
 80130c8:	b083      	sub	sp, #12
 80130ca:	af00      	add	r7, sp, #0
 80130cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80130ce:	bf00      	nop
 80130d0:	370c      	adds	r7, #12
 80130d2:	46bd      	mov	sp, r7
 80130d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d8:	4770      	bx	lr

080130da <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80130da:	b580      	push	{r7, lr}
 80130dc:	b084      	sub	sp, #16
 80130de:	af00      	add	r7, sp, #0
 80130e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130e6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130ec:	687a      	ldr	r2, [r7, #4]
 80130ee:	429a      	cmp	r2, r3
 80130f0:	d107      	bne.n	8013102 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	2201      	movs	r2, #1
 80130f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2201      	movs	r2, #1
 80130fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013100:	e02a      	b.n	8013158 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013106:	687a      	ldr	r2, [r7, #4]
 8013108:	429a      	cmp	r2, r3
 801310a:	d107      	bne.n	801311c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	2202      	movs	r2, #2
 8013110:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	2201      	movs	r2, #1
 8013116:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801311a:	e01d      	b.n	8013158 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013120:	687a      	ldr	r2, [r7, #4]
 8013122:	429a      	cmp	r2, r3
 8013124:	d107      	bne.n	8013136 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	2204      	movs	r2, #4
 801312a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	2201      	movs	r2, #1
 8013130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013134:	e010      	b.n	8013158 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801313a:	687a      	ldr	r2, [r7, #4]
 801313c:	429a      	cmp	r2, r3
 801313e:	d107      	bne.n	8013150 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	2208      	movs	r2, #8
 8013144:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	2201      	movs	r2, #1
 801314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801314e:	e003      	b.n	8013158 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	2201      	movs	r2, #1
 8013154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8013158:	68f8      	ldr	r0, [r7, #12]
 801315a:	f7ff ffb4 	bl	80130c6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	2200      	movs	r2, #0
 8013162:	771a      	strb	r2, [r3, #28]
}
 8013164:	bf00      	nop
 8013166:	3710      	adds	r7, #16
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}

0801316c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b084      	sub	sp, #16
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013178:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801317e:	687a      	ldr	r2, [r7, #4]
 8013180:	429a      	cmp	r2, r3
 8013182:	d10b      	bne.n	801319c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	2201      	movs	r2, #1
 8013188:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	69db      	ldr	r3, [r3, #28]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d136      	bne.n	8013200 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2201      	movs	r2, #1
 8013196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801319a:	e031      	b.n	8013200 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131a0:	687a      	ldr	r2, [r7, #4]
 80131a2:	429a      	cmp	r2, r3
 80131a4:	d10b      	bne.n	80131be <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	2202      	movs	r2, #2
 80131aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	69db      	ldr	r3, [r3, #28]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d125      	bne.n	8013200 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	2201      	movs	r2, #1
 80131b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80131bc:	e020      	b.n	8013200 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131c2:	687a      	ldr	r2, [r7, #4]
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d10b      	bne.n	80131e0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2204      	movs	r2, #4
 80131cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	69db      	ldr	r3, [r3, #28]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d114      	bne.n	8013200 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	2201      	movs	r2, #1
 80131da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80131de:	e00f      	b.n	8013200 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131e4:	687a      	ldr	r2, [r7, #4]
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d10a      	bne.n	8013200 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	2208      	movs	r2, #8
 80131ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	69db      	ldr	r3, [r3, #28]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d103      	bne.n	8013200 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	2201      	movs	r2, #1
 80131fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013200:	68f8      	ldr	r0, [r7, #12]
 8013202:	f7ff ff42 	bl	801308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	2200      	movs	r2, #0
 801320a:	771a      	strb	r2, [r3, #28]
}
 801320c:	bf00      	nop
 801320e:	3710      	adds	r7, #16
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}

08013214 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b084      	sub	sp, #16
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013220:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013226:	687a      	ldr	r2, [r7, #4]
 8013228:	429a      	cmp	r2, r3
 801322a:	d103      	bne.n	8013234 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	2201      	movs	r2, #1
 8013230:	771a      	strb	r2, [r3, #28]
 8013232:	e019      	b.n	8013268 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013238:	687a      	ldr	r2, [r7, #4]
 801323a:	429a      	cmp	r2, r3
 801323c:	d103      	bne.n	8013246 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	2202      	movs	r2, #2
 8013242:	771a      	strb	r2, [r3, #28]
 8013244:	e010      	b.n	8013268 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801324a:	687a      	ldr	r2, [r7, #4]
 801324c:	429a      	cmp	r2, r3
 801324e:	d103      	bne.n	8013258 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	2204      	movs	r2, #4
 8013254:	771a      	strb	r2, [r3, #28]
 8013256:	e007      	b.n	8013268 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	429a      	cmp	r2, r3
 8013260:	d102      	bne.n	8013268 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	2208      	movs	r2, #8
 8013266:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8013268:	68f8      	ldr	r0, [r7, #12]
 801326a:	f7ff ff18 	bl	801309e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	2200      	movs	r2, #0
 8013272:	771a      	strb	r2, [r3, #28]
}
 8013274:	bf00      	nop
 8013276:	3710      	adds	r7, #16
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}

0801327c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801327c:	b480      	push	{r7}
 801327e:	b085      	sub	sp, #20
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	4a40      	ldr	r2, [pc, #256]	; (8013390 <TIM_Base_SetConfig+0x114>)
 8013290:	4293      	cmp	r3, r2
 8013292:	d013      	beq.n	80132bc <TIM_Base_SetConfig+0x40>
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801329a:	d00f      	beq.n	80132bc <TIM_Base_SetConfig+0x40>
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	4a3d      	ldr	r2, [pc, #244]	; (8013394 <TIM_Base_SetConfig+0x118>)
 80132a0:	4293      	cmp	r3, r2
 80132a2:	d00b      	beq.n	80132bc <TIM_Base_SetConfig+0x40>
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	4a3c      	ldr	r2, [pc, #240]	; (8013398 <TIM_Base_SetConfig+0x11c>)
 80132a8:	4293      	cmp	r3, r2
 80132aa:	d007      	beq.n	80132bc <TIM_Base_SetConfig+0x40>
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	4a3b      	ldr	r2, [pc, #236]	; (801339c <TIM_Base_SetConfig+0x120>)
 80132b0:	4293      	cmp	r3, r2
 80132b2:	d003      	beq.n	80132bc <TIM_Base_SetConfig+0x40>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	4a3a      	ldr	r2, [pc, #232]	; (80133a0 <TIM_Base_SetConfig+0x124>)
 80132b8:	4293      	cmp	r3, r2
 80132ba:	d108      	bne.n	80132ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80132c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	685b      	ldr	r3, [r3, #4]
 80132c8:	68fa      	ldr	r2, [r7, #12]
 80132ca:	4313      	orrs	r3, r2
 80132cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	4a2f      	ldr	r2, [pc, #188]	; (8013390 <TIM_Base_SetConfig+0x114>)
 80132d2:	4293      	cmp	r3, r2
 80132d4:	d01f      	beq.n	8013316 <TIM_Base_SetConfig+0x9a>
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80132dc:	d01b      	beq.n	8013316 <TIM_Base_SetConfig+0x9a>
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	4a2c      	ldr	r2, [pc, #176]	; (8013394 <TIM_Base_SetConfig+0x118>)
 80132e2:	4293      	cmp	r3, r2
 80132e4:	d017      	beq.n	8013316 <TIM_Base_SetConfig+0x9a>
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	4a2b      	ldr	r2, [pc, #172]	; (8013398 <TIM_Base_SetConfig+0x11c>)
 80132ea:	4293      	cmp	r3, r2
 80132ec:	d013      	beq.n	8013316 <TIM_Base_SetConfig+0x9a>
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	4a2a      	ldr	r2, [pc, #168]	; (801339c <TIM_Base_SetConfig+0x120>)
 80132f2:	4293      	cmp	r3, r2
 80132f4:	d00f      	beq.n	8013316 <TIM_Base_SetConfig+0x9a>
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	4a29      	ldr	r2, [pc, #164]	; (80133a0 <TIM_Base_SetConfig+0x124>)
 80132fa:	4293      	cmp	r3, r2
 80132fc:	d00b      	beq.n	8013316 <TIM_Base_SetConfig+0x9a>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	4a28      	ldr	r2, [pc, #160]	; (80133a4 <TIM_Base_SetConfig+0x128>)
 8013302:	4293      	cmp	r3, r2
 8013304:	d007      	beq.n	8013316 <TIM_Base_SetConfig+0x9a>
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	4a27      	ldr	r2, [pc, #156]	; (80133a8 <TIM_Base_SetConfig+0x12c>)
 801330a:	4293      	cmp	r3, r2
 801330c:	d003      	beq.n	8013316 <TIM_Base_SetConfig+0x9a>
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	4a26      	ldr	r2, [pc, #152]	; (80133ac <TIM_Base_SetConfig+0x130>)
 8013312:	4293      	cmp	r3, r2
 8013314:	d108      	bne.n	8013328 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801331c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	68db      	ldr	r3, [r3, #12]
 8013322:	68fa      	ldr	r2, [r7, #12]
 8013324:	4313      	orrs	r3, r2
 8013326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	695b      	ldr	r3, [r3, #20]
 8013332:	4313      	orrs	r3, r2
 8013334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	68fa      	ldr	r2, [r7, #12]
 801333a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	689a      	ldr	r2, [r3, #8]
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	681a      	ldr	r2, [r3, #0]
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	4a10      	ldr	r2, [pc, #64]	; (8013390 <TIM_Base_SetConfig+0x114>)
 8013350:	4293      	cmp	r3, r2
 8013352:	d00f      	beq.n	8013374 <TIM_Base_SetConfig+0xf8>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	4a12      	ldr	r2, [pc, #72]	; (80133a0 <TIM_Base_SetConfig+0x124>)
 8013358:	4293      	cmp	r3, r2
 801335a:	d00b      	beq.n	8013374 <TIM_Base_SetConfig+0xf8>
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	4a11      	ldr	r2, [pc, #68]	; (80133a4 <TIM_Base_SetConfig+0x128>)
 8013360:	4293      	cmp	r3, r2
 8013362:	d007      	beq.n	8013374 <TIM_Base_SetConfig+0xf8>
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	4a10      	ldr	r2, [pc, #64]	; (80133a8 <TIM_Base_SetConfig+0x12c>)
 8013368:	4293      	cmp	r3, r2
 801336a:	d003      	beq.n	8013374 <TIM_Base_SetConfig+0xf8>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	4a0f      	ldr	r2, [pc, #60]	; (80133ac <TIM_Base_SetConfig+0x130>)
 8013370:	4293      	cmp	r3, r2
 8013372:	d103      	bne.n	801337c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	691a      	ldr	r2, [r3, #16]
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	2201      	movs	r2, #1
 8013380:	615a      	str	r2, [r3, #20]
}
 8013382:	bf00      	nop
 8013384:	3714      	adds	r7, #20
 8013386:	46bd      	mov	sp, r7
 8013388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338c:	4770      	bx	lr
 801338e:	bf00      	nop
 8013390:	40012c00 	.word	0x40012c00
 8013394:	40000400 	.word	0x40000400
 8013398:	40000800 	.word	0x40000800
 801339c:	40000c00 	.word	0x40000c00
 80133a0:	40013400 	.word	0x40013400
 80133a4:	40014000 	.word	0x40014000
 80133a8:	40014400 	.word	0x40014400
 80133ac:	40014800 	.word	0x40014800

080133b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80133b0:	b480      	push	{r7}
 80133b2:	b087      	sub	sp, #28
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	6a1b      	ldr	r3, [r3, #32]
 80133be:	f023 0201 	bic.w	r2, r3, #1
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	6a1b      	ldr	r3, [r3, #32]
 80133ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	699b      	ldr	r3, [r3, #24]
 80133d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80133de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80133e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	f023 0303 	bic.w	r3, r3, #3
 80133ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	68fa      	ldr	r2, [r7, #12]
 80133f2:	4313      	orrs	r3, r2
 80133f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	f023 0302 	bic.w	r3, r3, #2
 80133fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	689b      	ldr	r3, [r3, #8]
 8013402:	697a      	ldr	r2, [r7, #20]
 8013404:	4313      	orrs	r3, r2
 8013406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	4a2c      	ldr	r2, [pc, #176]	; (80134bc <TIM_OC1_SetConfig+0x10c>)
 801340c:	4293      	cmp	r3, r2
 801340e:	d00f      	beq.n	8013430 <TIM_OC1_SetConfig+0x80>
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	4a2b      	ldr	r2, [pc, #172]	; (80134c0 <TIM_OC1_SetConfig+0x110>)
 8013414:	4293      	cmp	r3, r2
 8013416:	d00b      	beq.n	8013430 <TIM_OC1_SetConfig+0x80>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	4a2a      	ldr	r2, [pc, #168]	; (80134c4 <TIM_OC1_SetConfig+0x114>)
 801341c:	4293      	cmp	r3, r2
 801341e:	d007      	beq.n	8013430 <TIM_OC1_SetConfig+0x80>
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	4a29      	ldr	r2, [pc, #164]	; (80134c8 <TIM_OC1_SetConfig+0x118>)
 8013424:	4293      	cmp	r3, r2
 8013426:	d003      	beq.n	8013430 <TIM_OC1_SetConfig+0x80>
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	4a28      	ldr	r2, [pc, #160]	; (80134cc <TIM_OC1_SetConfig+0x11c>)
 801342c:	4293      	cmp	r3, r2
 801342e:	d10c      	bne.n	801344a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	f023 0308 	bic.w	r3, r3, #8
 8013436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	68db      	ldr	r3, [r3, #12]
 801343c:	697a      	ldr	r2, [r7, #20]
 801343e:	4313      	orrs	r3, r2
 8013440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	f023 0304 	bic.w	r3, r3, #4
 8013448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	4a1b      	ldr	r2, [pc, #108]	; (80134bc <TIM_OC1_SetConfig+0x10c>)
 801344e:	4293      	cmp	r3, r2
 8013450:	d00f      	beq.n	8013472 <TIM_OC1_SetConfig+0xc2>
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	4a1a      	ldr	r2, [pc, #104]	; (80134c0 <TIM_OC1_SetConfig+0x110>)
 8013456:	4293      	cmp	r3, r2
 8013458:	d00b      	beq.n	8013472 <TIM_OC1_SetConfig+0xc2>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	4a19      	ldr	r2, [pc, #100]	; (80134c4 <TIM_OC1_SetConfig+0x114>)
 801345e:	4293      	cmp	r3, r2
 8013460:	d007      	beq.n	8013472 <TIM_OC1_SetConfig+0xc2>
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	4a18      	ldr	r2, [pc, #96]	; (80134c8 <TIM_OC1_SetConfig+0x118>)
 8013466:	4293      	cmp	r3, r2
 8013468:	d003      	beq.n	8013472 <TIM_OC1_SetConfig+0xc2>
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	4a17      	ldr	r2, [pc, #92]	; (80134cc <TIM_OC1_SetConfig+0x11c>)
 801346e:	4293      	cmp	r3, r2
 8013470:	d111      	bne.n	8013496 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801347a:	693b      	ldr	r3, [r7, #16]
 801347c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	695b      	ldr	r3, [r3, #20]
 8013486:	693a      	ldr	r2, [r7, #16]
 8013488:	4313      	orrs	r3, r2
 801348a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801348c:	683b      	ldr	r3, [r7, #0]
 801348e:	699b      	ldr	r3, [r3, #24]
 8013490:	693a      	ldr	r2, [r7, #16]
 8013492:	4313      	orrs	r3, r2
 8013494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	693a      	ldr	r2, [r7, #16]
 801349a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	68fa      	ldr	r2, [r7, #12]
 80134a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	685a      	ldr	r2, [r3, #4]
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	697a      	ldr	r2, [r7, #20]
 80134ae:	621a      	str	r2, [r3, #32]
}
 80134b0:	bf00      	nop
 80134b2:	371c      	adds	r7, #28
 80134b4:	46bd      	mov	sp, r7
 80134b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ba:	4770      	bx	lr
 80134bc:	40012c00 	.word	0x40012c00
 80134c0:	40013400 	.word	0x40013400
 80134c4:	40014000 	.word	0x40014000
 80134c8:	40014400 	.word	0x40014400
 80134cc:	40014800 	.word	0x40014800

080134d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80134d0:	b480      	push	{r7}
 80134d2:	b087      	sub	sp, #28
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	6a1b      	ldr	r3, [r3, #32]
 80134de:	f023 0210 	bic.w	r2, r3, #16
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	6a1b      	ldr	r3, [r3, #32]
 80134ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	685b      	ldr	r3, [r3, #4]
 80134f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	699b      	ldr	r3, [r3, #24]
 80134f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80134fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801350a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	021b      	lsls	r3, r3, #8
 8013512:	68fa      	ldr	r2, [r7, #12]
 8013514:	4313      	orrs	r3, r2
 8013516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013518:	697b      	ldr	r3, [r7, #20]
 801351a:	f023 0320 	bic.w	r3, r3, #32
 801351e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	689b      	ldr	r3, [r3, #8]
 8013524:	011b      	lsls	r3, r3, #4
 8013526:	697a      	ldr	r2, [r7, #20]
 8013528:	4313      	orrs	r3, r2
 801352a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	4a28      	ldr	r2, [pc, #160]	; (80135d0 <TIM_OC2_SetConfig+0x100>)
 8013530:	4293      	cmp	r3, r2
 8013532:	d003      	beq.n	801353c <TIM_OC2_SetConfig+0x6c>
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	4a27      	ldr	r2, [pc, #156]	; (80135d4 <TIM_OC2_SetConfig+0x104>)
 8013538:	4293      	cmp	r3, r2
 801353a:	d10d      	bne.n	8013558 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	68db      	ldr	r3, [r3, #12]
 8013548:	011b      	lsls	r3, r3, #4
 801354a:	697a      	ldr	r2, [r7, #20]
 801354c:	4313      	orrs	r3, r2
 801354e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013556:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	4a1d      	ldr	r2, [pc, #116]	; (80135d0 <TIM_OC2_SetConfig+0x100>)
 801355c:	4293      	cmp	r3, r2
 801355e:	d00f      	beq.n	8013580 <TIM_OC2_SetConfig+0xb0>
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	4a1c      	ldr	r2, [pc, #112]	; (80135d4 <TIM_OC2_SetConfig+0x104>)
 8013564:	4293      	cmp	r3, r2
 8013566:	d00b      	beq.n	8013580 <TIM_OC2_SetConfig+0xb0>
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	4a1b      	ldr	r2, [pc, #108]	; (80135d8 <TIM_OC2_SetConfig+0x108>)
 801356c:	4293      	cmp	r3, r2
 801356e:	d007      	beq.n	8013580 <TIM_OC2_SetConfig+0xb0>
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	4a1a      	ldr	r2, [pc, #104]	; (80135dc <TIM_OC2_SetConfig+0x10c>)
 8013574:	4293      	cmp	r3, r2
 8013576:	d003      	beq.n	8013580 <TIM_OC2_SetConfig+0xb0>
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	4a19      	ldr	r2, [pc, #100]	; (80135e0 <TIM_OC2_SetConfig+0x110>)
 801357c:	4293      	cmp	r3, r2
 801357e:	d113      	bne.n	80135a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801358e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	695b      	ldr	r3, [r3, #20]
 8013594:	009b      	lsls	r3, r3, #2
 8013596:	693a      	ldr	r2, [r7, #16]
 8013598:	4313      	orrs	r3, r2
 801359a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	699b      	ldr	r3, [r3, #24]
 80135a0:	009b      	lsls	r3, r3, #2
 80135a2:	693a      	ldr	r2, [r7, #16]
 80135a4:	4313      	orrs	r3, r2
 80135a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	693a      	ldr	r2, [r7, #16]
 80135ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	68fa      	ldr	r2, [r7, #12]
 80135b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	685a      	ldr	r2, [r3, #4]
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	697a      	ldr	r2, [r7, #20]
 80135c0:	621a      	str	r2, [r3, #32]
}
 80135c2:	bf00      	nop
 80135c4:	371c      	adds	r7, #28
 80135c6:	46bd      	mov	sp, r7
 80135c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135cc:	4770      	bx	lr
 80135ce:	bf00      	nop
 80135d0:	40012c00 	.word	0x40012c00
 80135d4:	40013400 	.word	0x40013400
 80135d8:	40014000 	.word	0x40014000
 80135dc:	40014400 	.word	0x40014400
 80135e0:	40014800 	.word	0x40014800

080135e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80135e4:	b480      	push	{r7}
 80135e6:	b087      	sub	sp, #28
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	6a1b      	ldr	r3, [r3, #32]
 80135f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	6a1b      	ldr	r3, [r3, #32]
 80135fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	685b      	ldr	r3, [r3, #4]
 8013604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	69db      	ldr	r3, [r3, #28]
 801360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	f023 0303 	bic.w	r3, r3, #3
 801361e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	68fa      	ldr	r2, [r7, #12]
 8013626:	4313      	orrs	r3, r2
 8013628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	689b      	ldr	r3, [r3, #8]
 8013636:	021b      	lsls	r3, r3, #8
 8013638:	697a      	ldr	r2, [r7, #20]
 801363a:	4313      	orrs	r3, r2
 801363c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	4a27      	ldr	r2, [pc, #156]	; (80136e0 <TIM_OC3_SetConfig+0xfc>)
 8013642:	4293      	cmp	r3, r2
 8013644:	d003      	beq.n	801364e <TIM_OC3_SetConfig+0x6a>
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	4a26      	ldr	r2, [pc, #152]	; (80136e4 <TIM_OC3_SetConfig+0x100>)
 801364a:	4293      	cmp	r3, r2
 801364c:	d10d      	bne.n	801366a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	68db      	ldr	r3, [r3, #12]
 801365a:	021b      	lsls	r3, r3, #8
 801365c:	697a      	ldr	r2, [r7, #20]
 801365e:	4313      	orrs	r3, r2
 8013660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013662:	697b      	ldr	r3, [r7, #20]
 8013664:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	4a1c      	ldr	r2, [pc, #112]	; (80136e0 <TIM_OC3_SetConfig+0xfc>)
 801366e:	4293      	cmp	r3, r2
 8013670:	d00f      	beq.n	8013692 <TIM_OC3_SetConfig+0xae>
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	4a1b      	ldr	r2, [pc, #108]	; (80136e4 <TIM_OC3_SetConfig+0x100>)
 8013676:	4293      	cmp	r3, r2
 8013678:	d00b      	beq.n	8013692 <TIM_OC3_SetConfig+0xae>
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	4a1a      	ldr	r2, [pc, #104]	; (80136e8 <TIM_OC3_SetConfig+0x104>)
 801367e:	4293      	cmp	r3, r2
 8013680:	d007      	beq.n	8013692 <TIM_OC3_SetConfig+0xae>
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	4a19      	ldr	r2, [pc, #100]	; (80136ec <TIM_OC3_SetConfig+0x108>)
 8013686:	4293      	cmp	r3, r2
 8013688:	d003      	beq.n	8013692 <TIM_OC3_SetConfig+0xae>
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	4a18      	ldr	r2, [pc, #96]	; (80136f0 <TIM_OC3_SetConfig+0x10c>)
 801368e:	4293      	cmp	r3, r2
 8013690:	d113      	bne.n	80136ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013692:	693b      	ldr	r3, [r7, #16]
 8013694:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80136a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	695b      	ldr	r3, [r3, #20]
 80136a6:	011b      	lsls	r3, r3, #4
 80136a8:	693a      	ldr	r2, [r7, #16]
 80136aa:	4313      	orrs	r3, r2
 80136ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	699b      	ldr	r3, [r3, #24]
 80136b2:	011b      	lsls	r3, r3, #4
 80136b4:	693a      	ldr	r2, [r7, #16]
 80136b6:	4313      	orrs	r3, r2
 80136b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	693a      	ldr	r2, [r7, #16]
 80136be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	68fa      	ldr	r2, [r7, #12]
 80136c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	685a      	ldr	r2, [r3, #4]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	697a      	ldr	r2, [r7, #20]
 80136d2:	621a      	str	r2, [r3, #32]
}
 80136d4:	bf00      	nop
 80136d6:	371c      	adds	r7, #28
 80136d8:	46bd      	mov	sp, r7
 80136da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136de:	4770      	bx	lr
 80136e0:	40012c00 	.word	0x40012c00
 80136e4:	40013400 	.word	0x40013400
 80136e8:	40014000 	.word	0x40014000
 80136ec:	40014400 	.word	0x40014400
 80136f0:	40014800 	.word	0x40014800

080136f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80136f4:	b480      	push	{r7}
 80136f6:	b087      	sub	sp, #28
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	6a1b      	ldr	r3, [r3, #32]
 8013702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6a1b      	ldr	r3, [r3, #32]
 801370e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	685b      	ldr	r3, [r3, #4]
 8013714:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	69db      	ldr	r3, [r3, #28]
 801371a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801372e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	021b      	lsls	r3, r3, #8
 8013736:	68fa      	ldr	r2, [r7, #12]
 8013738:	4313      	orrs	r3, r2
 801373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	689b      	ldr	r3, [r3, #8]
 8013748:	031b      	lsls	r3, r3, #12
 801374a:	693a      	ldr	r2, [r7, #16]
 801374c:	4313      	orrs	r3, r2
 801374e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	4a18      	ldr	r2, [pc, #96]	; (80137b4 <TIM_OC4_SetConfig+0xc0>)
 8013754:	4293      	cmp	r3, r2
 8013756:	d00f      	beq.n	8013778 <TIM_OC4_SetConfig+0x84>
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	4a17      	ldr	r2, [pc, #92]	; (80137b8 <TIM_OC4_SetConfig+0xc4>)
 801375c:	4293      	cmp	r3, r2
 801375e:	d00b      	beq.n	8013778 <TIM_OC4_SetConfig+0x84>
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	4a16      	ldr	r2, [pc, #88]	; (80137bc <TIM_OC4_SetConfig+0xc8>)
 8013764:	4293      	cmp	r3, r2
 8013766:	d007      	beq.n	8013778 <TIM_OC4_SetConfig+0x84>
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	4a15      	ldr	r2, [pc, #84]	; (80137c0 <TIM_OC4_SetConfig+0xcc>)
 801376c:	4293      	cmp	r3, r2
 801376e:	d003      	beq.n	8013778 <TIM_OC4_SetConfig+0x84>
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	4a14      	ldr	r2, [pc, #80]	; (80137c4 <TIM_OC4_SetConfig+0xd0>)
 8013774:	4293      	cmp	r3, r2
 8013776:	d109      	bne.n	801378c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801377e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	695b      	ldr	r3, [r3, #20]
 8013784:	019b      	lsls	r3, r3, #6
 8013786:	697a      	ldr	r2, [r7, #20]
 8013788:	4313      	orrs	r3, r2
 801378a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	697a      	ldr	r2, [r7, #20]
 8013790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	68fa      	ldr	r2, [r7, #12]
 8013796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	685a      	ldr	r2, [r3, #4]
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	693a      	ldr	r2, [r7, #16]
 80137a4:	621a      	str	r2, [r3, #32]
}
 80137a6:	bf00      	nop
 80137a8:	371c      	adds	r7, #28
 80137aa:	46bd      	mov	sp, r7
 80137ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b0:	4770      	bx	lr
 80137b2:	bf00      	nop
 80137b4:	40012c00 	.word	0x40012c00
 80137b8:	40013400 	.word	0x40013400
 80137bc:	40014000 	.word	0x40014000
 80137c0:	40014400 	.word	0x40014400
 80137c4:	40014800 	.word	0x40014800

080137c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80137c8:	b480      	push	{r7}
 80137ca:	b087      	sub	sp, #28
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
 80137d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	6a1b      	ldr	r3, [r3, #32]
 80137d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	6a1b      	ldr	r3, [r3, #32]
 80137e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	685b      	ldr	r3, [r3, #4]
 80137e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80137ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80137f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80137fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80137fc:	683b      	ldr	r3, [r7, #0]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	68fa      	ldr	r2, [r7, #12]
 8013802:	4313      	orrs	r3, r2
 8013804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013806:	693b      	ldr	r3, [r7, #16]
 8013808:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801380c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801380e:	683b      	ldr	r3, [r7, #0]
 8013810:	689b      	ldr	r3, [r3, #8]
 8013812:	041b      	lsls	r3, r3, #16
 8013814:	693a      	ldr	r2, [r7, #16]
 8013816:	4313      	orrs	r3, r2
 8013818:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	4a17      	ldr	r2, [pc, #92]	; (801387c <TIM_OC5_SetConfig+0xb4>)
 801381e:	4293      	cmp	r3, r2
 8013820:	d00f      	beq.n	8013842 <TIM_OC5_SetConfig+0x7a>
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	4a16      	ldr	r2, [pc, #88]	; (8013880 <TIM_OC5_SetConfig+0xb8>)
 8013826:	4293      	cmp	r3, r2
 8013828:	d00b      	beq.n	8013842 <TIM_OC5_SetConfig+0x7a>
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	4a15      	ldr	r2, [pc, #84]	; (8013884 <TIM_OC5_SetConfig+0xbc>)
 801382e:	4293      	cmp	r3, r2
 8013830:	d007      	beq.n	8013842 <TIM_OC5_SetConfig+0x7a>
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	4a14      	ldr	r2, [pc, #80]	; (8013888 <TIM_OC5_SetConfig+0xc0>)
 8013836:	4293      	cmp	r3, r2
 8013838:	d003      	beq.n	8013842 <TIM_OC5_SetConfig+0x7a>
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	4a13      	ldr	r2, [pc, #76]	; (801388c <TIM_OC5_SetConfig+0xc4>)
 801383e:	4293      	cmp	r3, r2
 8013840:	d109      	bne.n	8013856 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013842:	697b      	ldr	r3, [r7, #20]
 8013844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013848:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801384a:	683b      	ldr	r3, [r7, #0]
 801384c:	695b      	ldr	r3, [r3, #20]
 801384e:	021b      	lsls	r3, r3, #8
 8013850:	697a      	ldr	r2, [r7, #20]
 8013852:	4313      	orrs	r3, r2
 8013854:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	697a      	ldr	r2, [r7, #20]
 801385a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	68fa      	ldr	r2, [r7, #12]
 8013860:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	685a      	ldr	r2, [r3, #4]
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	693a      	ldr	r2, [r7, #16]
 801386e:	621a      	str	r2, [r3, #32]
}
 8013870:	bf00      	nop
 8013872:	371c      	adds	r7, #28
 8013874:	46bd      	mov	sp, r7
 8013876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387a:	4770      	bx	lr
 801387c:	40012c00 	.word	0x40012c00
 8013880:	40013400 	.word	0x40013400
 8013884:	40014000 	.word	0x40014000
 8013888:	40014400 	.word	0x40014400
 801388c:	40014800 	.word	0x40014800

08013890 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013890:	b480      	push	{r7}
 8013892:	b087      	sub	sp, #28
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	6a1b      	ldr	r3, [r3, #32]
 801389e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6a1b      	ldr	r3, [r3, #32]
 80138aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	685b      	ldr	r3, [r3, #4]
 80138b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80138be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80138c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80138c4:	683b      	ldr	r3, [r7, #0]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	021b      	lsls	r3, r3, #8
 80138ca:	68fa      	ldr	r2, [r7, #12]
 80138cc:	4313      	orrs	r3, r2
 80138ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80138d0:	693b      	ldr	r3, [r7, #16]
 80138d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80138d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	689b      	ldr	r3, [r3, #8]
 80138dc:	051b      	lsls	r3, r3, #20
 80138de:	693a      	ldr	r2, [r7, #16]
 80138e0:	4313      	orrs	r3, r2
 80138e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	4a18      	ldr	r2, [pc, #96]	; (8013948 <TIM_OC6_SetConfig+0xb8>)
 80138e8:	4293      	cmp	r3, r2
 80138ea:	d00f      	beq.n	801390c <TIM_OC6_SetConfig+0x7c>
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	4a17      	ldr	r2, [pc, #92]	; (801394c <TIM_OC6_SetConfig+0xbc>)
 80138f0:	4293      	cmp	r3, r2
 80138f2:	d00b      	beq.n	801390c <TIM_OC6_SetConfig+0x7c>
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	4a16      	ldr	r2, [pc, #88]	; (8013950 <TIM_OC6_SetConfig+0xc0>)
 80138f8:	4293      	cmp	r3, r2
 80138fa:	d007      	beq.n	801390c <TIM_OC6_SetConfig+0x7c>
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	4a15      	ldr	r2, [pc, #84]	; (8013954 <TIM_OC6_SetConfig+0xc4>)
 8013900:	4293      	cmp	r3, r2
 8013902:	d003      	beq.n	801390c <TIM_OC6_SetConfig+0x7c>
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	4a14      	ldr	r2, [pc, #80]	; (8013958 <TIM_OC6_SetConfig+0xc8>)
 8013908:	4293      	cmp	r3, r2
 801390a:	d109      	bne.n	8013920 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013912:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	695b      	ldr	r3, [r3, #20]
 8013918:	029b      	lsls	r3, r3, #10
 801391a:	697a      	ldr	r2, [r7, #20]
 801391c:	4313      	orrs	r3, r2
 801391e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	697a      	ldr	r2, [r7, #20]
 8013924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	68fa      	ldr	r2, [r7, #12]
 801392a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801392c:	683b      	ldr	r3, [r7, #0]
 801392e:	685a      	ldr	r2, [r3, #4]
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	693a      	ldr	r2, [r7, #16]
 8013938:	621a      	str	r2, [r3, #32]
}
 801393a:	bf00      	nop
 801393c:	371c      	adds	r7, #28
 801393e:	46bd      	mov	sp, r7
 8013940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013944:	4770      	bx	lr
 8013946:	bf00      	nop
 8013948:	40012c00 	.word	0x40012c00
 801394c:	40013400 	.word	0x40013400
 8013950:	40014000 	.word	0x40014000
 8013954:	40014400 	.word	0x40014400
 8013958:	40014800 	.word	0x40014800

0801395c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801395c:	b480      	push	{r7}
 801395e:	b087      	sub	sp, #28
 8013960:	af00      	add	r7, sp, #0
 8013962:	60f8      	str	r0, [r7, #12]
 8013964:	60b9      	str	r1, [r7, #8]
 8013966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	6a1b      	ldr	r3, [r3, #32]
 801396c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	6a1b      	ldr	r3, [r3, #32]
 8013972:	f023 0201 	bic.w	r2, r3, #1
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	699b      	ldr	r3, [r3, #24]
 801397e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013980:	693b      	ldr	r3, [r7, #16]
 8013982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	011b      	lsls	r3, r3, #4
 801398c:	693a      	ldr	r2, [r7, #16]
 801398e:	4313      	orrs	r3, r2
 8013990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	f023 030a 	bic.w	r3, r3, #10
 8013998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801399a:	697a      	ldr	r2, [r7, #20]
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	4313      	orrs	r3, r2
 80139a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	693a      	ldr	r2, [r7, #16]
 80139a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	697a      	ldr	r2, [r7, #20]
 80139ac:	621a      	str	r2, [r3, #32]
}
 80139ae:	bf00      	nop
 80139b0:	371c      	adds	r7, #28
 80139b2:	46bd      	mov	sp, r7
 80139b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b8:	4770      	bx	lr

080139ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80139ba:	b480      	push	{r7}
 80139bc:	b087      	sub	sp, #28
 80139be:	af00      	add	r7, sp, #0
 80139c0:	60f8      	str	r0, [r7, #12]
 80139c2:	60b9      	str	r1, [r7, #8]
 80139c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	6a1b      	ldr	r3, [r3, #32]
 80139ca:	f023 0210 	bic.w	r2, r3, #16
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	699b      	ldr	r3, [r3, #24]
 80139d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	6a1b      	ldr	r3, [r3, #32]
 80139dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80139e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	031b      	lsls	r3, r3, #12
 80139ea:	697a      	ldr	r2, [r7, #20]
 80139ec:	4313      	orrs	r3, r2
 80139ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80139f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	011b      	lsls	r3, r3, #4
 80139fc:	693a      	ldr	r2, [r7, #16]
 80139fe:	4313      	orrs	r3, r2
 8013a00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	697a      	ldr	r2, [r7, #20]
 8013a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	693a      	ldr	r2, [r7, #16]
 8013a0c:	621a      	str	r2, [r3, #32]
}
 8013a0e:	bf00      	nop
 8013a10:	371c      	adds	r7, #28
 8013a12:	46bd      	mov	sp, r7
 8013a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a18:	4770      	bx	lr

08013a1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013a1a:	b480      	push	{r7}
 8013a1c:	b085      	sub	sp, #20
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	6078      	str	r0, [r7, #4]
 8013a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	689b      	ldr	r3, [r3, #8]
 8013a28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013a32:	683a      	ldr	r2, [r7, #0]
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	4313      	orrs	r3, r2
 8013a38:	f043 0307 	orr.w	r3, r3, #7
 8013a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	68fa      	ldr	r2, [r7, #12]
 8013a42:	609a      	str	r2, [r3, #8]
}
 8013a44:	bf00      	nop
 8013a46:	3714      	adds	r7, #20
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4e:	4770      	bx	lr

08013a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013a50:	b480      	push	{r7}
 8013a52:	b087      	sub	sp, #28
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	60f8      	str	r0, [r7, #12]
 8013a58:	60b9      	str	r1, [r7, #8]
 8013a5a:	607a      	str	r2, [r7, #4]
 8013a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	689b      	ldr	r3, [r3, #8]
 8013a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013a64:	697b      	ldr	r3, [r7, #20]
 8013a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	021a      	lsls	r2, r3, #8
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	431a      	orrs	r2, r3
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	4313      	orrs	r3, r2
 8013a78:	697a      	ldr	r2, [r7, #20]
 8013a7a:	4313      	orrs	r3, r2
 8013a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	697a      	ldr	r2, [r7, #20]
 8013a82:	609a      	str	r2, [r3, #8]
}
 8013a84:	bf00      	nop
 8013a86:	371c      	adds	r7, #28
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8e:	4770      	bx	lr

08013a90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013a90:	b480      	push	{r7}
 8013a92:	b087      	sub	sp, #28
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	60f8      	str	r0, [r7, #12]
 8013a98:	60b9      	str	r1, [r7, #8]
 8013a9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	f003 031f 	and.w	r3, r3, #31
 8013aa2:	2201      	movs	r2, #1
 8013aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8013aa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	6a1a      	ldr	r2, [r3, #32]
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	43db      	mvns	r3, r3
 8013ab2:	401a      	ands	r2, r3
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	6a1a      	ldr	r2, [r3, #32]
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	f003 031f 	and.w	r3, r3, #31
 8013ac2:	6879      	ldr	r1, [r7, #4]
 8013ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8013ac8:	431a      	orrs	r2, r3
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	621a      	str	r2, [r3, #32]
}
 8013ace:	bf00      	nop
 8013ad0:	371c      	adds	r7, #28
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad8:	4770      	bx	lr
	...

08013adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013adc:	b480      	push	{r7}
 8013ade:	b085      	sub	sp, #20
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013aec:	2b01      	cmp	r3, #1
 8013aee:	d101      	bne.n	8013af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013af0:	2302      	movs	r3, #2
 8013af2:	e068      	b.n	8013bc6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	2201      	movs	r2, #1
 8013af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2202      	movs	r2, #2
 8013b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	685b      	ldr	r3, [r3, #4]
 8013b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	689b      	ldr	r3, [r3, #8]
 8013b12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	4a2e      	ldr	r2, [pc, #184]	; (8013bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8013b1a:	4293      	cmp	r3, r2
 8013b1c:	d004      	beq.n	8013b28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	4a2d      	ldr	r2, [pc, #180]	; (8013bd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8013b24:	4293      	cmp	r3, r2
 8013b26:	d108      	bne.n	8013b3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013b2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	685b      	ldr	r3, [r3, #4]
 8013b34:	68fa      	ldr	r2, [r7, #12]
 8013b36:	4313      	orrs	r3, r2
 8013b38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013b40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	68fa      	ldr	r2, [r7, #12]
 8013b48:	4313      	orrs	r3, r2
 8013b4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	68fa      	ldr	r2, [r7, #12]
 8013b52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	4a1e      	ldr	r2, [pc, #120]	; (8013bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8013b5a:	4293      	cmp	r3, r2
 8013b5c:	d01d      	beq.n	8013b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b66:	d018      	beq.n	8013b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	4a1b      	ldr	r2, [pc, #108]	; (8013bdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013b6e:	4293      	cmp	r3, r2
 8013b70:	d013      	beq.n	8013b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	4a1a      	ldr	r2, [pc, #104]	; (8013be0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013b78:	4293      	cmp	r3, r2
 8013b7a:	d00e      	beq.n	8013b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	4a18      	ldr	r2, [pc, #96]	; (8013be4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013b82:	4293      	cmp	r3, r2
 8013b84:	d009      	beq.n	8013b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	4a13      	ldr	r2, [pc, #76]	; (8013bd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8013b8c:	4293      	cmp	r3, r2
 8013b8e:	d004      	beq.n	8013b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	4a14      	ldr	r2, [pc, #80]	; (8013be8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013b96:	4293      	cmp	r3, r2
 8013b98:	d10c      	bne.n	8013bb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013ba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013ba2:	683b      	ldr	r3, [r7, #0]
 8013ba4:	689b      	ldr	r3, [r3, #8]
 8013ba6:	68ba      	ldr	r2, [r7, #8]
 8013ba8:	4313      	orrs	r3, r2
 8013baa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	68ba      	ldr	r2, [r7, #8]
 8013bb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	2201      	movs	r2, #1
 8013bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013bc4:	2300      	movs	r3, #0
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3714      	adds	r7, #20
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd0:	4770      	bx	lr
 8013bd2:	bf00      	nop
 8013bd4:	40012c00 	.word	0x40012c00
 8013bd8:	40013400 	.word	0x40013400
 8013bdc:	40000400 	.word	0x40000400
 8013be0:	40000800 	.word	0x40000800
 8013be4:	40000c00 	.word	0x40000c00
 8013be8:	40014000 	.word	0x40014000

08013bec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013bec:	b480      	push	{r7}
 8013bee:	b085      	sub	sp, #20
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013c00:	2b01      	cmp	r3, #1
 8013c02:	d101      	bne.n	8013c08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013c04:	2302      	movs	r3, #2
 8013c06:	e065      	b.n	8013cd4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2201      	movs	r2, #1
 8013c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	68db      	ldr	r3, [r3, #12]
 8013c1a:	4313      	orrs	r3, r2
 8013c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	689b      	ldr	r3, [r3, #8]
 8013c28:	4313      	orrs	r3, r2
 8013c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	685b      	ldr	r3, [r3, #4]
 8013c36:	4313      	orrs	r3, r2
 8013c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	4313      	orrs	r3, r2
 8013c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013c4e:	683b      	ldr	r3, [r7, #0]
 8013c50:	691b      	ldr	r3, [r3, #16]
 8013c52:	4313      	orrs	r3, r2
 8013c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	695b      	ldr	r3, [r3, #20]
 8013c60:	4313      	orrs	r3, r2
 8013c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c6e:	4313      	orrs	r3, r2
 8013c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	699b      	ldr	r3, [r3, #24]
 8013c7c:	041b      	lsls	r3, r3, #16
 8013c7e:	4313      	orrs	r3, r2
 8013c80:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	4a16      	ldr	r2, [pc, #88]	; (8013ce0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013c88:	4293      	cmp	r3, r2
 8013c8a:	d004      	beq.n	8013c96 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	4a14      	ldr	r2, [pc, #80]	; (8013ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8013c92:	4293      	cmp	r3, r2
 8013c94:	d115      	bne.n	8013cc2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ca0:	051b      	lsls	r3, r3, #20
 8013ca2:	4313      	orrs	r3, r2
 8013ca4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	69db      	ldr	r3, [r3, #28]
 8013cb0:	4313      	orrs	r3, r2
 8013cb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	6a1b      	ldr	r3, [r3, #32]
 8013cbe:	4313      	orrs	r3, r2
 8013cc0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	68fa      	ldr	r2, [r7, #12]
 8013cc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013cd2:	2300      	movs	r3, #0
}
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3714      	adds	r7, #20
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cde:	4770      	bx	lr
 8013ce0:	40012c00 	.word	0x40012c00
 8013ce4:	40013400 	.word	0x40013400

08013ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013ce8:	b480      	push	{r7}
 8013cea:	b083      	sub	sp, #12
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013cf0:	bf00      	nop
 8013cf2:	370c      	adds	r7, #12
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfa:	4770      	bx	lr

08013cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013cfc:	b480      	push	{r7}
 8013cfe:	b083      	sub	sp, #12
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013d04:	bf00      	nop
 8013d06:	370c      	adds	r7, #12
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0e:	4770      	bx	lr

08013d10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013d10:	b480      	push	{r7}
 8013d12:	b083      	sub	sp, #12
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013d18:	bf00      	nop
 8013d1a:	370c      	adds	r7, #12
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d22:	4770      	bx	lr

08013d24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b082      	sub	sp, #8
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d101      	bne.n	8013d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013d32:	2301      	movs	r3, #1
 8013d34:	e042      	b.n	8013dbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d106      	bne.n	8013d4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	2200      	movs	r2, #0
 8013d44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013d48:	6878      	ldr	r0, [r7, #4]
 8013d4a:	f7fa f963 	bl	800e014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2224      	movs	r2, #36	; 0x24
 8013d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	681a      	ldr	r2, [r3, #0]
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	f022 0201 	bic.w	r2, r2, #1
 8013d64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013d66:	6878      	ldr	r0, [r7, #4]
 8013d68:	f000 fc02 	bl	8014570 <UART_SetConfig>
 8013d6c:	4603      	mov	r3, r0
 8013d6e:	2b01      	cmp	r3, #1
 8013d70:	d101      	bne.n	8013d76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8013d72:	2301      	movs	r3, #1
 8013d74:	e022      	b.n	8013dbc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d002      	beq.n	8013d84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f000 fef2 	bl	8014b68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	685a      	ldr	r2, [r3, #4]
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013d92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	689a      	ldr	r2, [r3, #8]
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013da2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	681a      	ldr	r2, [r3, #0]
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	f042 0201 	orr.w	r2, r2, #1
 8013db2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f000 ff79 	bl	8014cac <UART_CheckIdleState>
 8013dba:	4603      	mov	r3, r0
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3708      	adds	r7, #8
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}

08013dc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b08a      	sub	sp, #40	; 0x28
 8013dc8:	af02      	add	r7, sp, #8
 8013dca:	60f8      	str	r0, [r7, #12]
 8013dcc:	60b9      	str	r1, [r7, #8]
 8013dce:	603b      	str	r3, [r7, #0]
 8013dd0:	4613      	mov	r3, r2
 8013dd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013dda:	2b20      	cmp	r3, #32
 8013ddc:	f040 8083 	bne.w	8013ee6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8013de0:	68bb      	ldr	r3, [r7, #8]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d002      	beq.n	8013dec <HAL_UART_Transmit+0x28>
 8013de6:	88fb      	ldrh	r3, [r7, #6]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d101      	bne.n	8013df0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8013dec:	2301      	movs	r3, #1
 8013dee:	e07b      	b.n	8013ee8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013df6:	2b01      	cmp	r3, #1
 8013df8:	d101      	bne.n	8013dfe <HAL_UART_Transmit+0x3a>
 8013dfa:	2302      	movs	r3, #2
 8013dfc:	e074      	b.n	8013ee8 <HAL_UART_Transmit+0x124>
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	2201      	movs	r2, #1
 8013e02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	2200      	movs	r2, #0
 8013e0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	2221      	movs	r2, #33	; 0x21
 8013e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013e16:	f7fa fa4f 	bl	800e2b8 <HAL_GetTick>
 8013e1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	88fa      	ldrh	r2, [r7, #6]
 8013e20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	88fa      	ldrh	r2, [r7, #6]
 8013e28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	689b      	ldr	r3, [r3, #8]
 8013e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e34:	d108      	bne.n	8013e48 <HAL_UART_Transmit+0x84>
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	691b      	ldr	r3, [r3, #16]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d104      	bne.n	8013e48 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8013e3e:	2300      	movs	r3, #0
 8013e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	61bb      	str	r3, [r7, #24]
 8013e46:	e003      	b.n	8013e50 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	2200      	movs	r2, #0
 8013e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8013e58:	e02c      	b.n	8013eb4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	9300      	str	r3, [sp, #0]
 8013e5e:	697b      	ldr	r3, [r7, #20]
 8013e60:	2200      	movs	r2, #0
 8013e62:	2180      	movs	r1, #128	; 0x80
 8013e64:	68f8      	ldr	r0, [r7, #12]
 8013e66:	f000 ff6c 	bl	8014d42 <UART_WaitOnFlagUntilTimeout>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d001      	beq.n	8013e74 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8013e70:	2303      	movs	r3, #3
 8013e72:	e039      	b.n	8013ee8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8013e74:	69fb      	ldr	r3, [r7, #28]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d10b      	bne.n	8013e92 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013e7a:	69bb      	ldr	r3, [r7, #24]
 8013e7c:	881b      	ldrh	r3, [r3, #0]
 8013e7e:	461a      	mov	r2, r3
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013e88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013e8a:	69bb      	ldr	r3, [r7, #24]
 8013e8c:	3302      	adds	r3, #2
 8013e8e:	61bb      	str	r3, [r7, #24]
 8013e90:	e007      	b.n	8013ea2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013e92:	69fb      	ldr	r3, [r7, #28]
 8013e94:	781a      	ldrb	r2, [r3, #0]
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013e9c:	69fb      	ldr	r3, [r7, #28]
 8013e9e:	3301      	adds	r3, #1
 8013ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013ea8:	b29b      	uxth	r3, r3
 8013eaa:	3b01      	subs	r3, #1
 8013eac:	b29a      	uxth	r2, r3
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013eba:	b29b      	uxth	r3, r3
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d1cc      	bne.n	8013e5a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013ec0:	683b      	ldr	r3, [r7, #0]
 8013ec2:	9300      	str	r3, [sp, #0]
 8013ec4:	697b      	ldr	r3, [r7, #20]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	2140      	movs	r1, #64	; 0x40
 8013eca:	68f8      	ldr	r0, [r7, #12]
 8013ecc:	f000 ff39 	bl	8014d42 <UART_WaitOnFlagUntilTimeout>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d001      	beq.n	8013eda <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8013ed6:	2303      	movs	r3, #3
 8013ed8:	e006      	b.n	8013ee8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	2220      	movs	r2, #32
 8013ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	e000      	b.n	8013ee8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8013ee6:	2302      	movs	r3, #2
  }
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3720      	adds	r7, #32
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}

08013ef0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b0ba      	sub	sp, #232	; 0xe8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	69db      	ldr	r3, [r3, #28]
 8013efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	689b      	ldr	r3, [r3, #8]
 8013f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013f16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013f1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8013f1e:	4013      	ands	r3, r2
 8013f20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8013f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d11b      	bne.n	8013f64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013f30:	f003 0320 	and.w	r3, r3, #32
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d015      	beq.n	8013f64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f3c:	f003 0320 	and.w	r3, r3, #32
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d105      	bne.n	8013f50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d009      	beq.n	8013f64 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	f000 82d6 	beq.w	8014506 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	4798      	blx	r3
      }
      return;
 8013f62:	e2d0      	b.n	8014506 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8013f64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	f000 811f 	beq.w	80141ac <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8013f6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013f72:	4b8b      	ldr	r3, [pc, #556]	; (80141a0 <HAL_UART_IRQHandler+0x2b0>)
 8013f74:	4013      	ands	r3, r2
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d106      	bne.n	8013f88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8013f7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8013f7e:	4b89      	ldr	r3, [pc, #548]	; (80141a4 <HAL_UART_IRQHandler+0x2b4>)
 8013f80:	4013      	ands	r3, r2
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	f000 8112 	beq.w	80141ac <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013f8c:	f003 0301 	and.w	r3, r3, #1
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d011      	beq.n	8013fb8 <HAL_UART_IRQHandler+0xc8>
 8013f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d00b      	beq.n	8013fb8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	2201      	movs	r2, #1
 8013fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013fae:	f043 0201 	orr.w	r2, r3, #1
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013fbc:	f003 0302 	and.w	r3, r3, #2
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d011      	beq.n	8013fe8 <HAL_UART_IRQHandler+0xf8>
 8013fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013fc8:	f003 0301 	and.w	r3, r3, #1
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d00b      	beq.n	8013fe8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	2202      	movs	r2, #2
 8013fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013fde:	f043 0204 	orr.w	r2, r3, #4
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013fec:	f003 0304 	and.w	r3, r3, #4
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d011      	beq.n	8014018 <HAL_UART_IRQHandler+0x128>
 8013ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013ff8:	f003 0301 	and.w	r3, r3, #1
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d00b      	beq.n	8014018 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	2204      	movs	r2, #4
 8014006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801400e:	f043 0202 	orr.w	r2, r3, #2
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8014018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801401c:	f003 0308 	and.w	r3, r3, #8
 8014020:	2b00      	cmp	r3, #0
 8014022:	d017      	beq.n	8014054 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014028:	f003 0320 	and.w	r3, r3, #32
 801402c:	2b00      	cmp	r3, #0
 801402e:	d105      	bne.n	801403c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014030:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014034:	4b5a      	ldr	r3, [pc, #360]	; (80141a0 <HAL_UART_IRQHandler+0x2b0>)
 8014036:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014038:	2b00      	cmp	r3, #0
 801403a:	d00b      	beq.n	8014054 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	2208      	movs	r2, #8
 8014042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801404a:	f043 0208 	orr.w	r2, r3, #8
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801405c:	2b00      	cmp	r3, #0
 801405e:	d012      	beq.n	8014086 <HAL_UART_IRQHandler+0x196>
 8014060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014068:	2b00      	cmp	r3, #0
 801406a:	d00c      	beq.n	8014086 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801407c:	f043 0220 	orr.w	r2, r3, #32
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801408c:	2b00      	cmp	r3, #0
 801408e:	f000 823c 	beq.w	801450a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014096:	f003 0320 	and.w	r3, r3, #32
 801409a:	2b00      	cmp	r3, #0
 801409c:	d013      	beq.n	80140c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801409e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80140a2:	f003 0320 	and.w	r3, r3, #32
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d105      	bne.n	80140b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80140aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80140ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d007      	beq.n	80140c6 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d003      	beq.n	80140c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80140cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	689b      	ldr	r3, [r3, #8]
 80140d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140da:	2b40      	cmp	r3, #64	; 0x40
 80140dc:	d005      	beq.n	80140ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80140de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80140e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d04f      	beq.n	801418a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f000 ffdb 	bl	80150a6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	689b      	ldr	r3, [r3, #8]
 80140f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140fa:	2b40      	cmp	r3, #64	; 0x40
 80140fc:	d141      	bne.n	8014182 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	3308      	adds	r3, #8
 8014104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014108:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801410c:	e853 3f00 	ldrex	r3, [r3]
 8014110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801411c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	3308      	adds	r3, #8
 8014126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801412a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801412e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8014136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801413a:	e841 2300 	strex	r3, r2, [r1]
 801413e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014146:	2b00      	cmp	r3, #0
 8014148:	d1d9      	bne.n	80140fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801414e:	2b00      	cmp	r3, #0
 8014150:	d013      	beq.n	801417a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014156:	4a14      	ldr	r2, [pc, #80]	; (80141a8 <HAL_UART_IRQHandler+0x2b8>)
 8014158:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801415e:	4618      	mov	r0, r3
 8014160:	f7fa fb33 	bl	800e7ca <HAL_DMA_Abort_IT>
 8014164:	4603      	mov	r3, r0
 8014166:	2b00      	cmp	r3, #0
 8014168:	d017      	beq.n	801419a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014170:	687a      	ldr	r2, [r7, #4]
 8014172:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8014174:	4610      	mov	r0, r2
 8014176:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014178:	e00f      	b.n	801419a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f000 f9ee 	bl	801455c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014180:	e00b      	b.n	801419a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f000 f9ea 	bl	801455c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014188:	e007      	b.n	801419a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	f000 f9e6 	bl	801455c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2200      	movs	r2, #0
 8014194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8014198:	e1b7      	b.n	801450a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801419a:	bf00      	nop
    return;
 801419c:	e1b5      	b.n	801450a <HAL_UART_IRQHandler+0x61a>
 801419e:	bf00      	nop
 80141a0:	10000001 	.word	0x10000001
 80141a4:	04000120 	.word	0x04000120
 80141a8:	08015351 	.word	0x08015351

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141b0:	2b01      	cmp	r3, #1
 80141b2:	f040 814a 	bne.w	801444a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80141b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141ba:	f003 0310 	and.w	r3, r3, #16
 80141be:	2b00      	cmp	r3, #0
 80141c0:	f000 8143 	beq.w	801444a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80141c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80141c8:	f003 0310 	and.w	r3, r3, #16
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	f000 813c 	beq.w	801444a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	2210      	movs	r2, #16
 80141d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	689b      	ldr	r3, [r3, #8]
 80141e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80141e4:	2b40      	cmp	r3, #64	; 0x40
 80141e6:	f040 80b5 	bne.w	8014354 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80141f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	f000 8187 	beq.w	801450e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801420a:	429a      	cmp	r2, r3
 801420c:	f080 817f 	bcs.w	801450e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014216:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	f003 0320 	and.w	r3, r3, #32
 8014226:	2b00      	cmp	r3, #0
 8014228:	f040 8086 	bne.w	8014338 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014234:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014238:	e853 3f00 	ldrex	r3, [r3]
 801423c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	461a      	mov	r2, r3
 8014252:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801425a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801425e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014262:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014266:	e841 2300 	strex	r3, r2, [r1]
 801426a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801426e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014272:	2b00      	cmp	r3, #0
 8014274:	d1da      	bne.n	801422c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	3308      	adds	r3, #8
 801427c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801427e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014280:	e853 3f00 	ldrex	r3, [r3]
 8014284:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014288:	f023 0301 	bic.w	r3, r3, #1
 801428c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	3308      	adds	r3, #8
 8014296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801429a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801429e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80142a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80142a6:	e841 2300 	strex	r3, r2, [r1]
 80142aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80142ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d1e1      	bne.n	8014276 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	3308      	adds	r3, #8
 80142b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80142bc:	e853 3f00 	ldrex	r3, [r3]
 80142c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80142c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80142c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80142c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	3308      	adds	r3, #8
 80142d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80142d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80142d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80142dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80142de:	e841 2300 	strex	r3, r2, [r1]
 80142e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80142e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d1e3      	bne.n	80142b2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2220      	movs	r2, #32
 80142ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2200      	movs	r2, #0
 80142f6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014300:	e853 3f00 	ldrex	r3, [r3]
 8014304:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014308:	f023 0310 	bic.w	r3, r3, #16
 801430c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	461a      	mov	r2, r3
 8014316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801431a:	65bb      	str	r3, [r7, #88]	; 0x58
 801431c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801431e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014320:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014322:	e841 2300 	strex	r3, r2, [r1]
 8014326:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801432a:	2b00      	cmp	r3, #0
 801432c:	d1e4      	bne.n	80142f8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014332:	4618      	mov	r0, r3
 8014334:	f7fa f9ed 	bl	800e712 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014344:	b29b      	uxth	r3, r3
 8014346:	1ad3      	subs	r3, r2, r3
 8014348:	b29b      	uxth	r3, r3
 801434a:	4619      	mov	r1, r3
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	f7f6 fe03 	bl	800af58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014352:	e0dc      	b.n	801450e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014360:	b29b      	uxth	r3, r3
 8014362:	1ad3      	subs	r3, r2, r3
 8014364:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801436e:	b29b      	uxth	r3, r3
 8014370:	2b00      	cmp	r3, #0
 8014372:	f000 80ce 	beq.w	8014512 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8014376:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801437a:	2b00      	cmp	r3, #0
 801437c:	f000 80c9 	beq.w	8014512 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014388:	e853 3f00 	ldrex	r3, [r3]
 801438c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801438e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	461a      	mov	r2, r3
 801439e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80143a2:	647b      	str	r3, [r7, #68]	; 0x44
 80143a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80143a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80143aa:	e841 2300 	strex	r3, r2, [r1]
 80143ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80143b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d1e4      	bne.n	8014380 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	3308      	adds	r3, #8
 80143bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c0:	e853 3f00 	ldrex	r3, [r3]
 80143c4:	623b      	str	r3, [r7, #32]
   return(result);
 80143c6:	6a3b      	ldr	r3, [r7, #32]
 80143c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80143cc:	f023 0301 	bic.w	r3, r3, #1
 80143d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	3308      	adds	r3, #8
 80143da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80143de:	633a      	str	r2, [r7, #48]	; 0x30
 80143e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80143e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143e6:	e841 2300 	strex	r3, r2, [r1]
 80143ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80143ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d1e1      	bne.n	80143b6 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2220      	movs	r2, #32
 80143f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	2200      	movs	r2, #0
 80143fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2200      	movs	r2, #0
 8014404:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	e853 3f00 	ldrex	r3, [r3]
 8014412:	60fb      	str	r3, [r7, #12]
   return(result);
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	f023 0310 	bic.w	r3, r3, #16
 801441a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	461a      	mov	r2, r3
 8014424:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014428:	61fb      	str	r3, [r7, #28]
 801442a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801442c:	69b9      	ldr	r1, [r7, #24]
 801442e:	69fa      	ldr	r2, [r7, #28]
 8014430:	e841 2300 	strex	r3, r2, [r1]
 8014434:	617b      	str	r3, [r7, #20]
   return(result);
 8014436:	697b      	ldr	r3, [r7, #20]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d1e4      	bne.n	8014406 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801443c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014440:	4619      	mov	r1, r3
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	f7f6 fd88 	bl	800af58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014448:	e063      	b.n	8014512 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801444e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014452:	2b00      	cmp	r3, #0
 8014454:	d00e      	beq.n	8014474 <HAL_UART_IRQHandler+0x584>
 8014456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801445a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801445e:	2b00      	cmp	r3, #0
 8014460:	d008      	beq.n	8014474 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801446a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801446c:	6878      	ldr	r0, [r7, #4]
 801446e:	f000 ffb0 	bl	80153d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014472:	e051      	b.n	8014518 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801447c:	2b00      	cmp	r3, #0
 801447e:	d014      	beq.n	80144aa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014488:	2b00      	cmp	r3, #0
 801448a:	d105      	bne.n	8014498 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801448c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014494:	2b00      	cmp	r3, #0
 8014496:	d008      	beq.n	80144aa <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801449c:	2b00      	cmp	r3, #0
 801449e:	d03a      	beq.n	8014516 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	4798      	blx	r3
    }
    return;
 80144a8:	e035      	b.n	8014516 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80144aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d009      	beq.n	80144ca <HAL_UART_IRQHandler+0x5da>
 80144b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80144ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d003      	beq.n	80144ca <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f000 ff5a 	bl	801537c <UART_EndTransmit_IT>
    return;
 80144c8:	e026      	b.n	8014518 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80144ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d009      	beq.n	80144ea <HAL_UART_IRQHandler+0x5fa>
 80144d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80144da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d003      	beq.n	80144ea <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80144e2:	6878      	ldr	r0, [r7, #4]
 80144e4:	f000 ff89 	bl	80153fa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80144e8:	e016      	b.n	8014518 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80144ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d010      	beq.n	8014518 <HAL_UART_IRQHandler+0x628>
 80144f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	da0c      	bge.n	8014518 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f000 ff71 	bl	80153e6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014504:	e008      	b.n	8014518 <HAL_UART_IRQHandler+0x628>
      return;
 8014506:	bf00      	nop
 8014508:	e006      	b.n	8014518 <HAL_UART_IRQHandler+0x628>
    return;
 801450a:	bf00      	nop
 801450c:	e004      	b.n	8014518 <HAL_UART_IRQHandler+0x628>
      return;
 801450e:	bf00      	nop
 8014510:	e002      	b.n	8014518 <HAL_UART_IRQHandler+0x628>
      return;
 8014512:	bf00      	nop
 8014514:	e000      	b.n	8014518 <HAL_UART_IRQHandler+0x628>
    return;
 8014516:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8014518:	37e8      	adds	r7, #232	; 0xe8
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}
 801451e:	bf00      	nop

08014520 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014520:	b480      	push	{r7}
 8014522:	b083      	sub	sp, #12
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014528:	bf00      	nop
 801452a:	370c      	adds	r7, #12
 801452c:	46bd      	mov	sp, r7
 801452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014532:	4770      	bx	lr

08014534 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8014534:	b480      	push	{r7}
 8014536:	b083      	sub	sp, #12
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801453c:	bf00      	nop
 801453e:	370c      	adds	r7, #12
 8014540:	46bd      	mov	sp, r7
 8014542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014546:	4770      	bx	lr

08014548 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014548:	b480      	push	{r7}
 801454a:	b083      	sub	sp, #12
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8014550:	bf00      	nop
 8014552:	370c      	adds	r7, #12
 8014554:	46bd      	mov	sp, r7
 8014556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455a:	4770      	bx	lr

0801455c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801455c:	b480      	push	{r7}
 801455e:	b083      	sub	sp, #12
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014564:	bf00      	nop
 8014566:	370c      	adds	r7, #12
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr

08014570 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014574:	b08c      	sub	sp, #48	; 0x30
 8014576:	af00      	add	r7, sp, #0
 8014578:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801457a:	2300      	movs	r3, #0
 801457c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014580:	697b      	ldr	r3, [r7, #20]
 8014582:	689a      	ldr	r2, [r3, #8]
 8014584:	697b      	ldr	r3, [r7, #20]
 8014586:	691b      	ldr	r3, [r3, #16]
 8014588:	431a      	orrs	r2, r3
 801458a:	697b      	ldr	r3, [r7, #20]
 801458c:	695b      	ldr	r3, [r3, #20]
 801458e:	431a      	orrs	r2, r3
 8014590:	697b      	ldr	r3, [r7, #20]
 8014592:	69db      	ldr	r3, [r3, #28]
 8014594:	4313      	orrs	r3, r2
 8014596:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014598:	697b      	ldr	r3, [r7, #20]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	681a      	ldr	r2, [r3, #0]
 801459e:	4baa      	ldr	r3, [pc, #680]	; (8014848 <UART_SetConfig+0x2d8>)
 80145a0:	4013      	ands	r3, r2
 80145a2:	697a      	ldr	r2, [r7, #20]
 80145a4:	6812      	ldr	r2, [r2, #0]
 80145a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80145a8:	430b      	orrs	r3, r1
 80145aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80145ac:	697b      	ldr	r3, [r7, #20]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	685b      	ldr	r3, [r3, #4]
 80145b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80145b6:	697b      	ldr	r3, [r7, #20]
 80145b8:	68da      	ldr	r2, [r3, #12]
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	430a      	orrs	r2, r1
 80145c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80145c2:	697b      	ldr	r3, [r7, #20]
 80145c4:	699b      	ldr	r3, [r3, #24]
 80145c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80145c8:	697b      	ldr	r3, [r7, #20]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	4a9f      	ldr	r2, [pc, #636]	; (801484c <UART_SetConfig+0x2dc>)
 80145ce:	4293      	cmp	r3, r2
 80145d0:	d004      	beq.n	80145dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	6a1b      	ldr	r3, [r3, #32]
 80145d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145d8:	4313      	orrs	r3, r2
 80145da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80145dc:	697b      	ldr	r3, [r7, #20]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	689b      	ldr	r3, [r3, #8]
 80145e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80145e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80145ea:	697a      	ldr	r2, [r7, #20]
 80145ec:	6812      	ldr	r2, [r2, #0]
 80145ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80145f0:	430b      	orrs	r3, r1
 80145f2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80145f4:	697b      	ldr	r3, [r7, #20]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145fa:	f023 010f 	bic.w	r1, r3, #15
 80145fe:	697b      	ldr	r3, [r7, #20]
 8014600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014602:	697b      	ldr	r3, [r7, #20]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	430a      	orrs	r2, r1
 8014608:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801460a:	697b      	ldr	r3, [r7, #20]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	4a90      	ldr	r2, [pc, #576]	; (8014850 <UART_SetConfig+0x2e0>)
 8014610:	4293      	cmp	r3, r2
 8014612:	d125      	bne.n	8014660 <UART_SetConfig+0xf0>
 8014614:	4b8f      	ldr	r3, [pc, #572]	; (8014854 <UART_SetConfig+0x2e4>)
 8014616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801461a:	f003 0303 	and.w	r3, r3, #3
 801461e:	2b03      	cmp	r3, #3
 8014620:	d81a      	bhi.n	8014658 <UART_SetConfig+0xe8>
 8014622:	a201      	add	r2, pc, #4	; (adr r2, 8014628 <UART_SetConfig+0xb8>)
 8014624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014628:	08014639 	.word	0x08014639
 801462c:	08014649 	.word	0x08014649
 8014630:	08014641 	.word	0x08014641
 8014634:	08014651 	.word	0x08014651
 8014638:	2301      	movs	r3, #1
 801463a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801463e:	e116      	b.n	801486e <UART_SetConfig+0x2fe>
 8014640:	2302      	movs	r3, #2
 8014642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014646:	e112      	b.n	801486e <UART_SetConfig+0x2fe>
 8014648:	2304      	movs	r3, #4
 801464a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801464e:	e10e      	b.n	801486e <UART_SetConfig+0x2fe>
 8014650:	2308      	movs	r3, #8
 8014652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014656:	e10a      	b.n	801486e <UART_SetConfig+0x2fe>
 8014658:	2310      	movs	r3, #16
 801465a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801465e:	e106      	b.n	801486e <UART_SetConfig+0x2fe>
 8014660:	697b      	ldr	r3, [r7, #20]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	4a7c      	ldr	r2, [pc, #496]	; (8014858 <UART_SetConfig+0x2e8>)
 8014666:	4293      	cmp	r3, r2
 8014668:	d138      	bne.n	80146dc <UART_SetConfig+0x16c>
 801466a:	4b7a      	ldr	r3, [pc, #488]	; (8014854 <UART_SetConfig+0x2e4>)
 801466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014670:	f003 030c 	and.w	r3, r3, #12
 8014674:	2b0c      	cmp	r3, #12
 8014676:	d82d      	bhi.n	80146d4 <UART_SetConfig+0x164>
 8014678:	a201      	add	r2, pc, #4	; (adr r2, 8014680 <UART_SetConfig+0x110>)
 801467a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801467e:	bf00      	nop
 8014680:	080146b5 	.word	0x080146b5
 8014684:	080146d5 	.word	0x080146d5
 8014688:	080146d5 	.word	0x080146d5
 801468c:	080146d5 	.word	0x080146d5
 8014690:	080146c5 	.word	0x080146c5
 8014694:	080146d5 	.word	0x080146d5
 8014698:	080146d5 	.word	0x080146d5
 801469c:	080146d5 	.word	0x080146d5
 80146a0:	080146bd 	.word	0x080146bd
 80146a4:	080146d5 	.word	0x080146d5
 80146a8:	080146d5 	.word	0x080146d5
 80146ac:	080146d5 	.word	0x080146d5
 80146b0:	080146cd 	.word	0x080146cd
 80146b4:	2300      	movs	r3, #0
 80146b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80146ba:	e0d8      	b.n	801486e <UART_SetConfig+0x2fe>
 80146bc:	2302      	movs	r3, #2
 80146be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80146c2:	e0d4      	b.n	801486e <UART_SetConfig+0x2fe>
 80146c4:	2304      	movs	r3, #4
 80146c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80146ca:	e0d0      	b.n	801486e <UART_SetConfig+0x2fe>
 80146cc:	2308      	movs	r3, #8
 80146ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80146d2:	e0cc      	b.n	801486e <UART_SetConfig+0x2fe>
 80146d4:	2310      	movs	r3, #16
 80146d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80146da:	e0c8      	b.n	801486e <UART_SetConfig+0x2fe>
 80146dc:	697b      	ldr	r3, [r7, #20]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	4a5e      	ldr	r2, [pc, #376]	; (801485c <UART_SetConfig+0x2ec>)
 80146e2:	4293      	cmp	r3, r2
 80146e4:	d125      	bne.n	8014732 <UART_SetConfig+0x1c2>
 80146e6:	4b5b      	ldr	r3, [pc, #364]	; (8014854 <UART_SetConfig+0x2e4>)
 80146e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80146ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80146f0:	2b30      	cmp	r3, #48	; 0x30
 80146f2:	d016      	beq.n	8014722 <UART_SetConfig+0x1b2>
 80146f4:	2b30      	cmp	r3, #48	; 0x30
 80146f6:	d818      	bhi.n	801472a <UART_SetConfig+0x1ba>
 80146f8:	2b20      	cmp	r3, #32
 80146fa:	d00a      	beq.n	8014712 <UART_SetConfig+0x1a2>
 80146fc:	2b20      	cmp	r3, #32
 80146fe:	d814      	bhi.n	801472a <UART_SetConfig+0x1ba>
 8014700:	2b00      	cmp	r3, #0
 8014702:	d002      	beq.n	801470a <UART_SetConfig+0x19a>
 8014704:	2b10      	cmp	r3, #16
 8014706:	d008      	beq.n	801471a <UART_SetConfig+0x1aa>
 8014708:	e00f      	b.n	801472a <UART_SetConfig+0x1ba>
 801470a:	2300      	movs	r3, #0
 801470c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014710:	e0ad      	b.n	801486e <UART_SetConfig+0x2fe>
 8014712:	2302      	movs	r3, #2
 8014714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014718:	e0a9      	b.n	801486e <UART_SetConfig+0x2fe>
 801471a:	2304      	movs	r3, #4
 801471c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014720:	e0a5      	b.n	801486e <UART_SetConfig+0x2fe>
 8014722:	2308      	movs	r3, #8
 8014724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014728:	e0a1      	b.n	801486e <UART_SetConfig+0x2fe>
 801472a:	2310      	movs	r3, #16
 801472c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014730:	e09d      	b.n	801486e <UART_SetConfig+0x2fe>
 8014732:	697b      	ldr	r3, [r7, #20]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	4a4a      	ldr	r2, [pc, #296]	; (8014860 <UART_SetConfig+0x2f0>)
 8014738:	4293      	cmp	r3, r2
 801473a:	d125      	bne.n	8014788 <UART_SetConfig+0x218>
 801473c:	4b45      	ldr	r3, [pc, #276]	; (8014854 <UART_SetConfig+0x2e4>)
 801473e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014742:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014746:	2bc0      	cmp	r3, #192	; 0xc0
 8014748:	d016      	beq.n	8014778 <UART_SetConfig+0x208>
 801474a:	2bc0      	cmp	r3, #192	; 0xc0
 801474c:	d818      	bhi.n	8014780 <UART_SetConfig+0x210>
 801474e:	2b80      	cmp	r3, #128	; 0x80
 8014750:	d00a      	beq.n	8014768 <UART_SetConfig+0x1f8>
 8014752:	2b80      	cmp	r3, #128	; 0x80
 8014754:	d814      	bhi.n	8014780 <UART_SetConfig+0x210>
 8014756:	2b00      	cmp	r3, #0
 8014758:	d002      	beq.n	8014760 <UART_SetConfig+0x1f0>
 801475a:	2b40      	cmp	r3, #64	; 0x40
 801475c:	d008      	beq.n	8014770 <UART_SetConfig+0x200>
 801475e:	e00f      	b.n	8014780 <UART_SetConfig+0x210>
 8014760:	2300      	movs	r3, #0
 8014762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014766:	e082      	b.n	801486e <UART_SetConfig+0x2fe>
 8014768:	2302      	movs	r3, #2
 801476a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801476e:	e07e      	b.n	801486e <UART_SetConfig+0x2fe>
 8014770:	2304      	movs	r3, #4
 8014772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014776:	e07a      	b.n	801486e <UART_SetConfig+0x2fe>
 8014778:	2308      	movs	r3, #8
 801477a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801477e:	e076      	b.n	801486e <UART_SetConfig+0x2fe>
 8014780:	2310      	movs	r3, #16
 8014782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014786:	e072      	b.n	801486e <UART_SetConfig+0x2fe>
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	4a35      	ldr	r2, [pc, #212]	; (8014864 <UART_SetConfig+0x2f4>)
 801478e:	4293      	cmp	r3, r2
 8014790:	d12a      	bne.n	80147e8 <UART_SetConfig+0x278>
 8014792:	4b30      	ldr	r3, [pc, #192]	; (8014854 <UART_SetConfig+0x2e4>)
 8014794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801479c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80147a0:	d01a      	beq.n	80147d8 <UART_SetConfig+0x268>
 80147a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80147a6:	d81b      	bhi.n	80147e0 <UART_SetConfig+0x270>
 80147a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80147ac:	d00c      	beq.n	80147c8 <UART_SetConfig+0x258>
 80147ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80147b2:	d815      	bhi.n	80147e0 <UART_SetConfig+0x270>
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d003      	beq.n	80147c0 <UART_SetConfig+0x250>
 80147b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80147bc:	d008      	beq.n	80147d0 <UART_SetConfig+0x260>
 80147be:	e00f      	b.n	80147e0 <UART_SetConfig+0x270>
 80147c0:	2300      	movs	r3, #0
 80147c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80147c6:	e052      	b.n	801486e <UART_SetConfig+0x2fe>
 80147c8:	2302      	movs	r3, #2
 80147ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80147ce:	e04e      	b.n	801486e <UART_SetConfig+0x2fe>
 80147d0:	2304      	movs	r3, #4
 80147d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80147d6:	e04a      	b.n	801486e <UART_SetConfig+0x2fe>
 80147d8:	2308      	movs	r3, #8
 80147da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80147de:	e046      	b.n	801486e <UART_SetConfig+0x2fe>
 80147e0:	2310      	movs	r3, #16
 80147e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80147e6:	e042      	b.n	801486e <UART_SetConfig+0x2fe>
 80147e8:	697b      	ldr	r3, [r7, #20]
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	4a17      	ldr	r2, [pc, #92]	; (801484c <UART_SetConfig+0x2dc>)
 80147ee:	4293      	cmp	r3, r2
 80147f0:	d13a      	bne.n	8014868 <UART_SetConfig+0x2f8>
 80147f2:	4b18      	ldr	r3, [pc, #96]	; (8014854 <UART_SetConfig+0x2e4>)
 80147f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80147f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80147fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8014800:	d01a      	beq.n	8014838 <UART_SetConfig+0x2c8>
 8014802:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8014806:	d81b      	bhi.n	8014840 <UART_SetConfig+0x2d0>
 8014808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801480c:	d00c      	beq.n	8014828 <UART_SetConfig+0x2b8>
 801480e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014812:	d815      	bhi.n	8014840 <UART_SetConfig+0x2d0>
 8014814:	2b00      	cmp	r3, #0
 8014816:	d003      	beq.n	8014820 <UART_SetConfig+0x2b0>
 8014818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801481c:	d008      	beq.n	8014830 <UART_SetConfig+0x2c0>
 801481e:	e00f      	b.n	8014840 <UART_SetConfig+0x2d0>
 8014820:	2300      	movs	r3, #0
 8014822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014826:	e022      	b.n	801486e <UART_SetConfig+0x2fe>
 8014828:	2302      	movs	r3, #2
 801482a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801482e:	e01e      	b.n	801486e <UART_SetConfig+0x2fe>
 8014830:	2304      	movs	r3, #4
 8014832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014836:	e01a      	b.n	801486e <UART_SetConfig+0x2fe>
 8014838:	2308      	movs	r3, #8
 801483a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801483e:	e016      	b.n	801486e <UART_SetConfig+0x2fe>
 8014840:	2310      	movs	r3, #16
 8014842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014846:	e012      	b.n	801486e <UART_SetConfig+0x2fe>
 8014848:	cfff69f3 	.word	0xcfff69f3
 801484c:	40008000 	.word	0x40008000
 8014850:	40013800 	.word	0x40013800
 8014854:	40021000 	.word	0x40021000
 8014858:	40004400 	.word	0x40004400
 801485c:	40004800 	.word	0x40004800
 8014860:	40004c00 	.word	0x40004c00
 8014864:	40005000 	.word	0x40005000
 8014868:	2310      	movs	r3, #16
 801486a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801486e:	697b      	ldr	r3, [r7, #20]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	4aae      	ldr	r2, [pc, #696]	; (8014b2c <UART_SetConfig+0x5bc>)
 8014874:	4293      	cmp	r3, r2
 8014876:	f040 8097 	bne.w	80149a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801487a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801487e:	2b08      	cmp	r3, #8
 8014880:	d823      	bhi.n	80148ca <UART_SetConfig+0x35a>
 8014882:	a201      	add	r2, pc, #4	; (adr r2, 8014888 <UART_SetConfig+0x318>)
 8014884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014888:	080148ad 	.word	0x080148ad
 801488c:	080148cb 	.word	0x080148cb
 8014890:	080148b5 	.word	0x080148b5
 8014894:	080148cb 	.word	0x080148cb
 8014898:	080148bb 	.word	0x080148bb
 801489c:	080148cb 	.word	0x080148cb
 80148a0:	080148cb 	.word	0x080148cb
 80148a4:	080148cb 	.word	0x080148cb
 80148a8:	080148c3 	.word	0x080148c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80148ac:	f7fb faa8 	bl	800fe00 <HAL_RCC_GetPCLK1Freq>
 80148b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80148b2:	e010      	b.n	80148d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80148b4:	4b9e      	ldr	r3, [pc, #632]	; (8014b30 <UART_SetConfig+0x5c0>)
 80148b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80148b8:	e00d      	b.n	80148d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80148ba:	f7fb fa09 	bl	800fcd0 <HAL_RCC_GetSysClockFreq>
 80148be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80148c0:	e009      	b.n	80148d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80148c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80148c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80148c8:	e005      	b.n	80148d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80148ca:	2300      	movs	r3, #0
 80148cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80148ce:	2301      	movs	r3, #1
 80148d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80148d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80148d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d8:	2b00      	cmp	r3, #0
 80148da:	f000 8130 	beq.w	8014b3e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80148de:	697b      	ldr	r3, [r7, #20]
 80148e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148e2:	4a94      	ldr	r2, [pc, #592]	; (8014b34 <UART_SetConfig+0x5c4>)
 80148e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80148e8:	461a      	mov	r2, r3
 80148ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80148f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80148f2:	697b      	ldr	r3, [r7, #20]
 80148f4:	685a      	ldr	r2, [r3, #4]
 80148f6:	4613      	mov	r3, r2
 80148f8:	005b      	lsls	r3, r3, #1
 80148fa:	4413      	add	r3, r2
 80148fc:	69ba      	ldr	r2, [r7, #24]
 80148fe:	429a      	cmp	r2, r3
 8014900:	d305      	bcc.n	801490e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8014902:	697b      	ldr	r3, [r7, #20]
 8014904:	685b      	ldr	r3, [r3, #4]
 8014906:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014908:	69ba      	ldr	r2, [r7, #24]
 801490a:	429a      	cmp	r2, r3
 801490c:	d903      	bls.n	8014916 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801490e:	2301      	movs	r3, #1
 8014910:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8014914:	e113      	b.n	8014b3e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014918:	2200      	movs	r2, #0
 801491a:	60bb      	str	r3, [r7, #8]
 801491c:	60fa      	str	r2, [r7, #12]
 801491e:	697b      	ldr	r3, [r7, #20]
 8014920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014922:	4a84      	ldr	r2, [pc, #528]	; (8014b34 <UART_SetConfig+0x5c4>)
 8014924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014928:	b29b      	uxth	r3, r3
 801492a:	2200      	movs	r2, #0
 801492c:	603b      	str	r3, [r7, #0]
 801492e:	607a      	str	r2, [r7, #4]
 8014930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014934:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014938:	f7ec fa0e 	bl	8000d58 <__aeabi_uldivmod>
 801493c:	4602      	mov	r2, r0
 801493e:	460b      	mov	r3, r1
 8014940:	4610      	mov	r0, r2
 8014942:	4619      	mov	r1, r3
 8014944:	f04f 0200 	mov.w	r2, #0
 8014948:	f04f 0300 	mov.w	r3, #0
 801494c:	020b      	lsls	r3, r1, #8
 801494e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014952:	0202      	lsls	r2, r0, #8
 8014954:	6979      	ldr	r1, [r7, #20]
 8014956:	6849      	ldr	r1, [r1, #4]
 8014958:	0849      	lsrs	r1, r1, #1
 801495a:	2000      	movs	r0, #0
 801495c:	460c      	mov	r4, r1
 801495e:	4605      	mov	r5, r0
 8014960:	eb12 0804 	adds.w	r8, r2, r4
 8014964:	eb43 0905 	adc.w	r9, r3, r5
 8014968:	697b      	ldr	r3, [r7, #20]
 801496a:	685b      	ldr	r3, [r3, #4]
 801496c:	2200      	movs	r2, #0
 801496e:	469a      	mov	sl, r3
 8014970:	4693      	mov	fp, r2
 8014972:	4652      	mov	r2, sl
 8014974:	465b      	mov	r3, fp
 8014976:	4640      	mov	r0, r8
 8014978:	4649      	mov	r1, r9
 801497a:	f7ec f9ed 	bl	8000d58 <__aeabi_uldivmod>
 801497e:	4602      	mov	r2, r0
 8014980:	460b      	mov	r3, r1
 8014982:	4613      	mov	r3, r2
 8014984:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014986:	6a3b      	ldr	r3, [r7, #32]
 8014988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801498c:	d308      	bcc.n	80149a0 <UART_SetConfig+0x430>
 801498e:	6a3b      	ldr	r3, [r7, #32]
 8014990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014994:	d204      	bcs.n	80149a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8014996:	697b      	ldr	r3, [r7, #20]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	6a3a      	ldr	r2, [r7, #32]
 801499c:	60da      	str	r2, [r3, #12]
 801499e:	e0ce      	b.n	8014b3e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80149a0:	2301      	movs	r3, #1
 80149a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80149a6:	e0ca      	b.n	8014b3e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80149a8:	697b      	ldr	r3, [r7, #20]
 80149aa:	69db      	ldr	r3, [r3, #28]
 80149ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80149b0:	d166      	bne.n	8014a80 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80149b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80149b6:	2b08      	cmp	r3, #8
 80149b8:	d827      	bhi.n	8014a0a <UART_SetConfig+0x49a>
 80149ba:	a201      	add	r2, pc, #4	; (adr r2, 80149c0 <UART_SetConfig+0x450>)
 80149bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149c0:	080149e5 	.word	0x080149e5
 80149c4:	080149ed 	.word	0x080149ed
 80149c8:	080149f5 	.word	0x080149f5
 80149cc:	08014a0b 	.word	0x08014a0b
 80149d0:	080149fb 	.word	0x080149fb
 80149d4:	08014a0b 	.word	0x08014a0b
 80149d8:	08014a0b 	.word	0x08014a0b
 80149dc:	08014a0b 	.word	0x08014a0b
 80149e0:	08014a03 	.word	0x08014a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80149e4:	f7fb fa0c 	bl	800fe00 <HAL_RCC_GetPCLK1Freq>
 80149e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80149ea:	e014      	b.n	8014a16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80149ec:	f7fb fa1e 	bl	800fe2c <HAL_RCC_GetPCLK2Freq>
 80149f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80149f2:	e010      	b.n	8014a16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80149f4:	4b4e      	ldr	r3, [pc, #312]	; (8014b30 <UART_SetConfig+0x5c0>)
 80149f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80149f8:	e00d      	b.n	8014a16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80149fa:	f7fb f969 	bl	800fcd0 <HAL_RCC_GetSysClockFreq>
 80149fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8014a00:	e009      	b.n	8014a16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014a08:	e005      	b.n	8014a16 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8014a0e:	2301      	movs	r3, #1
 8014a10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8014a14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	f000 8090 	beq.w	8014b3e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a22:	4a44      	ldr	r2, [pc, #272]	; (8014b34 <UART_SetConfig+0x5c4>)
 8014a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a28:	461a      	mov	r2, r3
 8014a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a30:	005a      	lsls	r2, r3, #1
 8014a32:	697b      	ldr	r3, [r7, #20]
 8014a34:	685b      	ldr	r3, [r3, #4]
 8014a36:	085b      	lsrs	r3, r3, #1
 8014a38:	441a      	add	r2, r3
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	685b      	ldr	r3, [r3, #4]
 8014a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a42:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014a44:	6a3b      	ldr	r3, [r7, #32]
 8014a46:	2b0f      	cmp	r3, #15
 8014a48:	d916      	bls.n	8014a78 <UART_SetConfig+0x508>
 8014a4a:	6a3b      	ldr	r3, [r7, #32]
 8014a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a50:	d212      	bcs.n	8014a78 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014a52:	6a3b      	ldr	r3, [r7, #32]
 8014a54:	b29b      	uxth	r3, r3
 8014a56:	f023 030f 	bic.w	r3, r3, #15
 8014a5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014a5c:	6a3b      	ldr	r3, [r7, #32]
 8014a5e:	085b      	lsrs	r3, r3, #1
 8014a60:	b29b      	uxth	r3, r3
 8014a62:	f003 0307 	and.w	r3, r3, #7
 8014a66:	b29a      	uxth	r2, r3
 8014a68:	8bfb      	ldrh	r3, [r7, #30]
 8014a6a:	4313      	orrs	r3, r2
 8014a6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8014a6e:	697b      	ldr	r3, [r7, #20]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	8bfa      	ldrh	r2, [r7, #30]
 8014a74:	60da      	str	r2, [r3, #12]
 8014a76:	e062      	b.n	8014b3e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8014a78:	2301      	movs	r3, #1
 8014a7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8014a7e:	e05e      	b.n	8014b3e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014a80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014a84:	2b08      	cmp	r3, #8
 8014a86:	d828      	bhi.n	8014ada <UART_SetConfig+0x56a>
 8014a88:	a201      	add	r2, pc, #4	; (adr r2, 8014a90 <UART_SetConfig+0x520>)
 8014a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a8e:	bf00      	nop
 8014a90:	08014ab5 	.word	0x08014ab5
 8014a94:	08014abd 	.word	0x08014abd
 8014a98:	08014ac5 	.word	0x08014ac5
 8014a9c:	08014adb 	.word	0x08014adb
 8014aa0:	08014acb 	.word	0x08014acb
 8014aa4:	08014adb 	.word	0x08014adb
 8014aa8:	08014adb 	.word	0x08014adb
 8014aac:	08014adb 	.word	0x08014adb
 8014ab0:	08014ad3 	.word	0x08014ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014ab4:	f7fb f9a4 	bl	800fe00 <HAL_RCC_GetPCLK1Freq>
 8014ab8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8014aba:	e014      	b.n	8014ae6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014abc:	f7fb f9b6 	bl	800fe2c <HAL_RCC_GetPCLK2Freq>
 8014ac0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8014ac2:	e010      	b.n	8014ae6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014ac4:	4b1a      	ldr	r3, [pc, #104]	; (8014b30 <UART_SetConfig+0x5c0>)
 8014ac6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014ac8:	e00d      	b.n	8014ae6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014aca:	f7fb f901 	bl	800fcd0 <HAL_RCC_GetSysClockFreq>
 8014ace:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8014ad0:	e009      	b.n	8014ae6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014ad6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014ad8:	e005      	b.n	8014ae6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8014ada:	2300      	movs	r3, #0
 8014adc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8014ade:	2301      	movs	r3, #1
 8014ae0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8014ae4:	bf00      	nop
    }

    if (pclk != 0U)
 8014ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d028      	beq.n	8014b3e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014aec:	697b      	ldr	r3, [r7, #20]
 8014aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014af0:	4a10      	ldr	r2, [pc, #64]	; (8014b34 <UART_SetConfig+0x5c4>)
 8014af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014af6:	461a      	mov	r2, r3
 8014af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014afa:	fbb3 f2f2 	udiv	r2, r3, r2
 8014afe:	697b      	ldr	r3, [r7, #20]
 8014b00:	685b      	ldr	r3, [r3, #4]
 8014b02:	085b      	lsrs	r3, r3, #1
 8014b04:	441a      	add	r2, r3
 8014b06:	697b      	ldr	r3, [r7, #20]
 8014b08:	685b      	ldr	r3, [r3, #4]
 8014b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b0e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014b10:	6a3b      	ldr	r3, [r7, #32]
 8014b12:	2b0f      	cmp	r3, #15
 8014b14:	d910      	bls.n	8014b38 <UART_SetConfig+0x5c8>
 8014b16:	6a3b      	ldr	r3, [r7, #32]
 8014b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b1c:	d20c      	bcs.n	8014b38 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014b1e:	6a3b      	ldr	r3, [r7, #32]
 8014b20:	b29a      	uxth	r2, r3
 8014b22:	697b      	ldr	r3, [r7, #20]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	60da      	str	r2, [r3, #12]
 8014b28:	e009      	b.n	8014b3e <UART_SetConfig+0x5ce>
 8014b2a:	bf00      	nop
 8014b2c:	40008000 	.word	0x40008000
 8014b30:	00f42400 	.word	0x00f42400
 8014b34:	08025428 	.word	0x08025428
      }
      else
      {
        ret = HAL_ERROR;
 8014b38:	2301      	movs	r3, #1
 8014b3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014b3e:	697b      	ldr	r3, [r7, #20]
 8014b40:	2201      	movs	r2, #1
 8014b42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8014b46:	697b      	ldr	r3, [r7, #20]
 8014b48:	2201      	movs	r2, #1
 8014b4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014b4e:	697b      	ldr	r3, [r7, #20]
 8014b50:	2200      	movs	r2, #0
 8014b52:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8014b54:	697b      	ldr	r3, [r7, #20]
 8014b56:	2200      	movs	r2, #0
 8014b58:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8014b5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8014b5e:	4618      	mov	r0, r3
 8014b60:	3730      	adds	r7, #48	; 0x30
 8014b62:	46bd      	mov	sp, r7
 8014b64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014b68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014b68:	b480      	push	{r7}
 8014b6a:	b083      	sub	sp, #12
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b74:	f003 0301 	and.w	r3, r3, #1
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d00a      	beq.n	8014b92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	685b      	ldr	r3, [r3, #4]
 8014b82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	430a      	orrs	r2, r1
 8014b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b96:	f003 0302 	and.w	r3, r3, #2
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d00a      	beq.n	8014bb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	685b      	ldr	r3, [r3, #4]
 8014ba4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	430a      	orrs	r2, r1
 8014bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bb8:	f003 0304 	and.w	r3, r3, #4
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d00a      	beq.n	8014bd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	685b      	ldr	r3, [r3, #4]
 8014bc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	430a      	orrs	r2, r1
 8014bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bda:	f003 0308 	and.w	r3, r3, #8
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d00a      	beq.n	8014bf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	685b      	ldr	r3, [r3, #4]
 8014be8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	430a      	orrs	r2, r1
 8014bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bfc:	f003 0310 	and.w	r3, r3, #16
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d00a      	beq.n	8014c1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	689b      	ldr	r3, [r3, #8]
 8014c0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	430a      	orrs	r2, r1
 8014c18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c1e:	f003 0320 	and.w	r3, r3, #32
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d00a      	beq.n	8014c3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	689b      	ldr	r3, [r3, #8]
 8014c2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	430a      	orrs	r2, r1
 8014c3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d01a      	beq.n	8014c7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	685b      	ldr	r3, [r3, #4]
 8014c4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	430a      	orrs	r2, r1
 8014c5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014c66:	d10a      	bne.n	8014c7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	685b      	ldr	r3, [r3, #4]
 8014c6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	430a      	orrs	r2, r1
 8014c7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d00a      	beq.n	8014ca0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	685b      	ldr	r3, [r3, #4]
 8014c90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	430a      	orrs	r2, r1
 8014c9e:	605a      	str	r2, [r3, #4]
  }
}
 8014ca0:	bf00      	nop
 8014ca2:	370c      	adds	r7, #12
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014caa:	4770      	bx	lr

08014cac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b086      	sub	sp, #24
 8014cb0:	af02      	add	r7, sp, #8
 8014cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014cbc:	f7f9 fafc 	bl	800e2b8 <HAL_GetTick>
 8014cc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	f003 0308 	and.w	r3, r3, #8
 8014ccc:	2b08      	cmp	r3, #8
 8014cce:	d10e      	bne.n	8014cee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014cd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014cd4:	9300      	str	r3, [sp, #0]
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014cde:	6878      	ldr	r0, [r7, #4]
 8014ce0:	f000 f82f 	bl	8014d42 <UART_WaitOnFlagUntilTimeout>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d001      	beq.n	8014cee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014cea:	2303      	movs	r3, #3
 8014cec:	e025      	b.n	8014d3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	f003 0304 	and.w	r3, r3, #4
 8014cf8:	2b04      	cmp	r3, #4
 8014cfa:	d10e      	bne.n	8014d1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014cfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014d00:	9300      	str	r3, [sp, #0]
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	2200      	movs	r2, #0
 8014d06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f000 f819 	bl	8014d42 <UART_WaitOnFlagUntilTimeout>
 8014d10:	4603      	mov	r3, r0
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d001      	beq.n	8014d1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014d16:	2303      	movs	r3, #3
 8014d18:	e00f      	b.n	8014d3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	2220      	movs	r2, #32
 8014d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	2220      	movs	r2, #32
 8014d26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	2200      	movs	r2, #0
 8014d34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014d38:	2300      	movs	r3, #0
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3710      	adds	r7, #16
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}

08014d42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014d42:	b580      	push	{r7, lr}
 8014d44:	b09c      	sub	sp, #112	; 0x70
 8014d46:	af00      	add	r7, sp, #0
 8014d48:	60f8      	str	r0, [r7, #12]
 8014d4a:	60b9      	str	r1, [r7, #8]
 8014d4c:	603b      	str	r3, [r7, #0]
 8014d4e:	4613      	mov	r3, r2
 8014d50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014d52:	e0a9      	b.n	8014ea8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d5a:	f000 80a5 	beq.w	8014ea8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014d5e:	f7f9 faab 	bl	800e2b8 <HAL_GetTick>
 8014d62:	4602      	mov	r2, r0
 8014d64:	683b      	ldr	r3, [r7, #0]
 8014d66:	1ad3      	subs	r3, r2, r3
 8014d68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d302      	bcc.n	8014d74 <UART_WaitOnFlagUntilTimeout+0x32>
 8014d6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d140      	bne.n	8014df6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d7c:	e853 3f00 	ldrex	r3, [r3]
 8014d80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014d88:	667b      	str	r3, [r7, #100]	; 0x64
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	461a      	mov	r2, r3
 8014d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014d92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014d94:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014d98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014d9a:	e841 2300 	strex	r3, r2, [r1]
 8014d9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d1e6      	bne.n	8014d74 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	3308      	adds	r3, #8
 8014dac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014db0:	e853 3f00 	ldrex	r3, [r3]
 8014db4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014db8:	f023 0301 	bic.w	r3, r3, #1
 8014dbc:	663b      	str	r3, [r7, #96]	; 0x60
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	3308      	adds	r3, #8
 8014dc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014dc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8014dc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014dce:	e841 2300 	strex	r3, r2, [r1]
 8014dd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d1e5      	bne.n	8014da6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	2220      	movs	r2, #32
 8014dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	2220      	movs	r2, #32
 8014de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	2200      	movs	r2, #0
 8014dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8014df2:	2303      	movs	r3, #3
 8014df4:	e069      	b.n	8014eca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	f003 0304 	and.w	r3, r3, #4
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d051      	beq.n	8014ea8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	69db      	ldr	r3, [r3, #28]
 8014e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014e12:	d149      	bne.n	8014ea8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014e1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e26:	e853 3f00 	ldrex	r3, [r3]
 8014e2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014e32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	461a      	mov	r2, r3
 8014e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8014e3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e44:	e841 2300 	strex	r3, r2, [r1]
 8014e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d1e6      	bne.n	8014e1e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	3308      	adds	r3, #8
 8014e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e58:	697b      	ldr	r3, [r7, #20]
 8014e5a:	e853 3f00 	ldrex	r3, [r3]
 8014e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8014e60:	693b      	ldr	r3, [r7, #16]
 8014e62:	f023 0301 	bic.w	r3, r3, #1
 8014e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	3308      	adds	r3, #8
 8014e6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014e70:	623a      	str	r2, [r7, #32]
 8014e72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e74:	69f9      	ldr	r1, [r7, #28]
 8014e76:	6a3a      	ldr	r2, [r7, #32]
 8014e78:	e841 2300 	strex	r3, r2, [r1]
 8014e7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8014e7e:	69bb      	ldr	r3, [r7, #24]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d1e5      	bne.n	8014e50 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	2220      	movs	r2, #32
 8014e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	2220      	movs	r2, #32
 8014e90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	2220      	movs	r2, #32
 8014e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8014ea4:	2303      	movs	r3, #3
 8014ea6:	e010      	b.n	8014eca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	69da      	ldr	r2, [r3, #28]
 8014eae:	68bb      	ldr	r3, [r7, #8]
 8014eb0:	4013      	ands	r3, r2
 8014eb2:	68ba      	ldr	r2, [r7, #8]
 8014eb4:	429a      	cmp	r2, r3
 8014eb6:	bf0c      	ite	eq
 8014eb8:	2301      	moveq	r3, #1
 8014eba:	2300      	movne	r3, #0
 8014ebc:	b2db      	uxtb	r3, r3
 8014ebe:	461a      	mov	r2, r3
 8014ec0:	79fb      	ldrb	r3, [r7, #7]
 8014ec2:	429a      	cmp	r2, r3
 8014ec4:	f43f af46 	beq.w	8014d54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014ec8:	2300      	movs	r3, #0
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	3770      	adds	r7, #112	; 0x70
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}
	...

08014ed4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b096      	sub	sp, #88	; 0x58
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	60f8      	str	r0, [r7, #12]
 8014edc:	60b9      	str	r1, [r7, #8]
 8014ede:	4613      	mov	r3, r2
 8014ee0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	68ba      	ldr	r2, [r7, #8]
 8014ee6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	88fa      	ldrh	r2, [r7, #6]
 8014eec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	2222      	movs	r2, #34	; 0x22
 8014efc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d02c      	beq.n	8014f62 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f0c:	4a42      	ldr	r2, [pc, #264]	; (8015018 <UART_Start_Receive_DMA+0x144>)
 8014f0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f14:	4a41      	ldr	r2, [pc, #260]	; (801501c <UART_Start_Receive_DMA+0x148>)
 8014f16:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f1c:	4a40      	ldr	r2, [pc, #256]	; (8015020 <UART_Start_Receive_DMA+0x14c>)
 8014f1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f24:	2200      	movs	r2, #0
 8014f26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	3324      	adds	r3, #36	; 0x24
 8014f32:	4619      	mov	r1, r3
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f38:	461a      	mov	r2, r3
 8014f3a:	88fb      	ldrh	r3, [r7, #6]
 8014f3c:	f7f9 fb6e 	bl	800e61c <HAL_DMA_Start_IT>
 8014f40:	4603      	mov	r3, r0
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d00d      	beq.n	8014f62 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	2210      	movs	r2, #16
 8014f4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	2200      	movs	r2, #0
 8014f52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	2220      	movs	r2, #32
 8014f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8014f5e:	2301      	movs	r3, #1
 8014f60:	e055      	b.n	801500e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	2200      	movs	r2, #0
 8014f66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	691b      	ldr	r3, [r3, #16]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d018      	beq.n	8014fa4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f7a:	e853 3f00 	ldrex	r3, [r3]
 8014f7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014f86:	657b      	str	r3, [r7, #84]	; 0x54
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	461a      	mov	r2, r3
 8014f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f90:	64bb      	str	r3, [r7, #72]	; 0x48
 8014f92:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014f98:	e841 2300 	strex	r3, r2, [r1]
 8014f9c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d1e6      	bne.n	8014f72 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	3308      	adds	r3, #8
 8014faa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fae:	e853 3f00 	ldrex	r3, [r3]
 8014fb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb6:	f043 0301 	orr.w	r3, r3, #1
 8014fba:	653b      	str	r3, [r7, #80]	; 0x50
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	3308      	adds	r3, #8
 8014fc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014fc4:	637a      	str	r2, [r7, #52]	; 0x34
 8014fc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014fcc:	e841 2300 	strex	r3, r2, [r1]
 8014fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d1e5      	bne.n	8014fa4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	3308      	adds	r3, #8
 8014fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	e853 3f00 	ldrex	r3, [r3]
 8014fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8014fe8:	693b      	ldr	r3, [r7, #16]
 8014fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	3308      	adds	r3, #8
 8014ff6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014ff8:	623a      	str	r2, [r7, #32]
 8014ffa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ffc:	69f9      	ldr	r1, [r7, #28]
 8014ffe:	6a3a      	ldr	r2, [r7, #32]
 8015000:	e841 2300 	strex	r3, r2, [r1]
 8015004:	61bb      	str	r3, [r7, #24]
   return(result);
 8015006:	69bb      	ldr	r3, [r7, #24]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d1e5      	bne.n	8014fd8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 801500c:	2300      	movs	r3, #0
}
 801500e:	4618      	mov	r0, r3
 8015010:	3758      	adds	r7, #88	; 0x58
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}
 8015016:	bf00      	nop
 8015018:	08015173 	.word	0x08015173
 801501c:	08015299 	.word	0x08015299
 8015020:	080152d1 	.word	0x080152d1

08015024 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8015024:	b480      	push	{r7}
 8015026:	b08f      	sub	sp, #60	; 0x3c
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015032:	6a3b      	ldr	r3, [r7, #32]
 8015034:	e853 3f00 	ldrex	r3, [r3]
 8015038:	61fb      	str	r3, [r7, #28]
   return(result);
 801503a:	69fb      	ldr	r3, [r7, #28]
 801503c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8015040:	637b      	str	r3, [r7, #52]	; 0x34
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	461a      	mov	r2, r3
 8015048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801504a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801504c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801504e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015052:	e841 2300 	strex	r3, r2, [r1]
 8015056:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801505a:	2b00      	cmp	r3, #0
 801505c:	d1e6      	bne.n	801502c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	3308      	adds	r3, #8
 8015064:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	e853 3f00 	ldrex	r3, [r3]
 801506c:	60bb      	str	r3, [r7, #8]
   return(result);
 801506e:	68bb      	ldr	r3, [r7, #8]
 8015070:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8015074:	633b      	str	r3, [r7, #48]	; 0x30
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	3308      	adds	r3, #8
 801507c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801507e:	61ba      	str	r2, [r7, #24]
 8015080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015082:	6979      	ldr	r1, [r7, #20]
 8015084:	69ba      	ldr	r2, [r7, #24]
 8015086:	e841 2300 	strex	r3, r2, [r1]
 801508a:	613b      	str	r3, [r7, #16]
   return(result);
 801508c:	693b      	ldr	r3, [r7, #16]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d1e5      	bne.n	801505e <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	2220      	movs	r2, #32
 8015096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 801509a:	bf00      	nop
 801509c:	373c      	adds	r7, #60	; 0x3c
 801509e:	46bd      	mov	sp, r7
 80150a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a4:	4770      	bx	lr

080150a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80150a6:	b480      	push	{r7}
 80150a8:	b095      	sub	sp, #84	; 0x54
 80150aa:	af00      	add	r7, sp, #0
 80150ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150b6:	e853 3f00 	ldrex	r3, [r3]
 80150ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80150bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80150c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	461a      	mov	r2, r3
 80150ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150cc:	643b      	str	r3, [r7, #64]	; 0x40
 80150ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80150d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80150d4:	e841 2300 	strex	r3, r2, [r1]
 80150d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80150da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d1e6      	bne.n	80150ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	3308      	adds	r3, #8
 80150e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150e8:	6a3b      	ldr	r3, [r7, #32]
 80150ea:	e853 3f00 	ldrex	r3, [r3]
 80150ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80150f0:	69fb      	ldr	r3, [r7, #28]
 80150f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80150f6:	f023 0301 	bic.w	r3, r3, #1
 80150fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	3308      	adds	r3, #8
 8015102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015104:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801510a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801510c:	e841 2300 	strex	r3, r2, [r1]
 8015110:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015114:	2b00      	cmp	r3, #0
 8015116:	d1e3      	bne.n	80150e0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801511c:	2b01      	cmp	r3, #1
 801511e:	d118      	bne.n	8015152 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	e853 3f00 	ldrex	r3, [r3]
 801512c:	60bb      	str	r3, [r7, #8]
   return(result);
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	f023 0310 	bic.w	r3, r3, #16
 8015134:	647b      	str	r3, [r7, #68]	; 0x44
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	461a      	mov	r2, r3
 801513c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801513e:	61bb      	str	r3, [r7, #24]
 8015140:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015142:	6979      	ldr	r1, [r7, #20]
 8015144:	69ba      	ldr	r2, [r7, #24]
 8015146:	e841 2300 	strex	r3, r2, [r1]
 801514a:	613b      	str	r3, [r7, #16]
   return(result);
 801514c:	693b      	ldr	r3, [r7, #16]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d1e6      	bne.n	8015120 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	2220      	movs	r2, #32
 8015156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	2200      	movs	r2, #0
 801515e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	2200      	movs	r2, #0
 8015164:	671a      	str	r2, [r3, #112]	; 0x70
}
 8015166:	bf00      	nop
 8015168:	3754      	adds	r7, #84	; 0x54
 801516a:	46bd      	mov	sp, r7
 801516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015170:	4770      	bx	lr

08015172 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015172:	b580      	push	{r7, lr}
 8015174:	b09c      	sub	sp, #112	; 0x70
 8015176:	af00      	add	r7, sp, #0
 8015178:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801517e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	f003 0320 	and.w	r3, r3, #32
 801518a:	2b00      	cmp	r3, #0
 801518c:	d171      	bne.n	8015272 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 801518e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015190:	2200      	movs	r2, #0
 8015192:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801519c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801519e:	e853 3f00 	ldrex	r3, [r3]
 80151a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80151a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80151a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80151aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80151ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	461a      	mov	r2, r3
 80151b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80151b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80151b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80151ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80151bc:	e841 2300 	strex	r3, r2, [r1]
 80151c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80151c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d1e6      	bne.n	8015196 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80151c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	3308      	adds	r3, #8
 80151ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151d2:	e853 3f00 	ldrex	r3, [r3]
 80151d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80151d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151da:	f023 0301 	bic.w	r3, r3, #1
 80151de:	667b      	str	r3, [r7, #100]	; 0x64
 80151e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	3308      	adds	r3, #8
 80151e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80151e8:	647a      	str	r2, [r7, #68]	; 0x44
 80151ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80151ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80151f0:	e841 2300 	strex	r3, r2, [r1]
 80151f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80151f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d1e5      	bne.n	80151c8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80151fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	3308      	adds	r3, #8
 8015202:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015206:	e853 3f00 	ldrex	r3, [r3]
 801520a:	623b      	str	r3, [r7, #32]
   return(result);
 801520c:	6a3b      	ldr	r3, [r7, #32]
 801520e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015212:	663b      	str	r3, [r7, #96]	; 0x60
 8015214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	3308      	adds	r3, #8
 801521a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801521c:	633a      	str	r2, [r7, #48]	; 0x30
 801521e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015220:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015224:	e841 2300 	strex	r3, r2, [r1]
 8015228:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801522c:	2b00      	cmp	r3, #0
 801522e:	d1e5      	bne.n	80151fc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015232:	2220      	movs	r2, #32
 8015234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801523a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801523c:	2b01      	cmp	r3, #1
 801523e:	d118      	bne.n	8015272 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015246:	693b      	ldr	r3, [r7, #16]
 8015248:	e853 3f00 	ldrex	r3, [r3]
 801524c:	60fb      	str	r3, [r7, #12]
   return(result);
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	f023 0310 	bic.w	r3, r3, #16
 8015254:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	461a      	mov	r2, r3
 801525c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801525e:	61fb      	str	r3, [r7, #28]
 8015260:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015262:	69b9      	ldr	r1, [r7, #24]
 8015264:	69fa      	ldr	r2, [r7, #28]
 8015266:	e841 2300 	strex	r3, r2, [r1]
 801526a:	617b      	str	r3, [r7, #20]
   return(result);
 801526c:	697b      	ldr	r3, [r7, #20]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d1e6      	bne.n	8015240 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015276:	2b01      	cmp	r3, #1
 8015278:	d107      	bne.n	801528a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801527a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801527c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015280:	4619      	mov	r1, r3
 8015282:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8015284:	f7f5 fe68 	bl	800af58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015288:	e002      	b.n	8015290 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801528a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801528c:	f7ff f952 	bl	8014534 <HAL_UART_RxCpltCallback>
}
 8015290:	bf00      	nop
 8015292:	3770      	adds	r7, #112	; 0x70
 8015294:	46bd      	mov	sp, r7
 8015296:	bd80      	pop	{r7, pc}

08015298 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015298:	b580      	push	{r7, lr}
 801529a:	b084      	sub	sp, #16
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152a4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152aa:	2b01      	cmp	r3, #1
 80152ac:	d109      	bne.n	80152c2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80152b4:	085b      	lsrs	r3, r3, #1
 80152b6:	b29b      	uxth	r3, r3
 80152b8:	4619      	mov	r1, r3
 80152ba:	68f8      	ldr	r0, [r7, #12]
 80152bc:	f7f5 fe4c 	bl	800af58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80152c0:	e002      	b.n	80152c8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80152c2:	68f8      	ldr	r0, [r7, #12]
 80152c4:	f7ff f940 	bl	8014548 <HAL_UART_RxHalfCpltCallback>
}
 80152c8:	bf00      	nop
 80152ca:	3710      	adds	r7, #16
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd80      	pop	{r7, pc}

080152d0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b086      	sub	sp, #24
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152dc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80152de:	697b      	ldr	r3, [r7, #20]
 80152e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80152e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80152e6:	697b      	ldr	r3, [r7, #20]
 80152e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80152ec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80152ee:	697b      	ldr	r3, [r7, #20]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	689b      	ldr	r3, [r3, #8]
 80152f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80152f8:	2b80      	cmp	r3, #128	; 0x80
 80152fa:	d109      	bne.n	8015310 <UART_DMAError+0x40>
 80152fc:	693b      	ldr	r3, [r7, #16]
 80152fe:	2b21      	cmp	r3, #33	; 0x21
 8015300:	d106      	bne.n	8015310 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	2200      	movs	r2, #0
 8015306:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801530a:	6978      	ldr	r0, [r7, #20]
 801530c:	f7ff fe8a 	bl	8015024 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8015310:	697b      	ldr	r3, [r7, #20]
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	689b      	ldr	r3, [r3, #8]
 8015316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801531a:	2b40      	cmp	r3, #64	; 0x40
 801531c:	d109      	bne.n	8015332 <UART_DMAError+0x62>
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	2b22      	cmp	r3, #34	; 0x22
 8015322:	d106      	bne.n	8015332 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8015324:	697b      	ldr	r3, [r7, #20]
 8015326:	2200      	movs	r2, #0
 8015328:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801532c:	6978      	ldr	r0, [r7, #20]
 801532e:	f7ff feba 	bl	80150a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8015332:	697b      	ldr	r3, [r7, #20]
 8015334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015338:	f043 0210 	orr.w	r2, r3, #16
 801533c:	697b      	ldr	r3, [r7, #20]
 801533e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015342:	6978      	ldr	r0, [r7, #20]
 8015344:	f7ff f90a 	bl	801455c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015348:	bf00      	nop
 801534a:	3718      	adds	r7, #24
 801534c:	46bd      	mov	sp, r7
 801534e:	bd80      	pop	{r7, pc}

08015350 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b084      	sub	sp, #16
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801535c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	2200      	movs	r2, #0
 8015362:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	2200      	movs	r2, #0
 801536a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801536e:	68f8      	ldr	r0, [r7, #12]
 8015370:	f7ff f8f4 	bl	801455c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015374:	bf00      	nop
 8015376:	3710      	adds	r7, #16
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}

0801537c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b088      	sub	sp, #32
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	e853 3f00 	ldrex	r3, [r3]
 8015390:	60bb      	str	r3, [r7, #8]
   return(result);
 8015392:	68bb      	ldr	r3, [r7, #8]
 8015394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015398:	61fb      	str	r3, [r7, #28]
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	461a      	mov	r2, r3
 80153a0:	69fb      	ldr	r3, [r7, #28]
 80153a2:	61bb      	str	r3, [r7, #24]
 80153a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153a6:	6979      	ldr	r1, [r7, #20]
 80153a8:	69ba      	ldr	r2, [r7, #24]
 80153aa:	e841 2300 	strex	r3, r2, [r1]
 80153ae:	613b      	str	r3, [r7, #16]
   return(result);
 80153b0:	693b      	ldr	r3, [r7, #16]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d1e6      	bne.n	8015384 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2220      	movs	r2, #32
 80153ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	2200      	movs	r2, #0
 80153c2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80153c4:	6878      	ldr	r0, [r7, #4]
 80153c6:	f7ff f8ab 	bl	8014520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80153ca:	bf00      	nop
 80153cc:	3720      	adds	r7, #32
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}

080153d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80153d2:	b480      	push	{r7}
 80153d4:	b083      	sub	sp, #12
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80153da:	bf00      	nop
 80153dc:	370c      	adds	r7, #12
 80153de:	46bd      	mov	sp, r7
 80153e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e4:	4770      	bx	lr

080153e6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80153e6:	b480      	push	{r7}
 80153e8:	b083      	sub	sp, #12
 80153ea:	af00      	add	r7, sp, #0
 80153ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80153ee:	bf00      	nop
 80153f0:	370c      	adds	r7, #12
 80153f2:	46bd      	mov	sp, r7
 80153f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f8:	4770      	bx	lr

080153fa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80153fa:	b480      	push	{r7}
 80153fc:	b083      	sub	sp, #12
 80153fe:	af00      	add	r7, sp, #0
 8015400:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8015402:	bf00      	nop
 8015404:	370c      	adds	r7, #12
 8015406:	46bd      	mov	sp, r7
 8015408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540c:	4770      	bx	lr

0801540e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801540e:	b480      	push	{r7}
 8015410:	b085      	sub	sp, #20
 8015412:	af00      	add	r7, sp, #0
 8015414:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801541c:	2b01      	cmp	r3, #1
 801541e:	d101      	bne.n	8015424 <HAL_UARTEx_DisableFifoMode+0x16>
 8015420:	2302      	movs	r3, #2
 8015422:	e027      	b.n	8015474 <HAL_UARTEx_DisableFifoMode+0x66>
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	2201      	movs	r2, #1
 8015428:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	2224      	movs	r2, #36	; 0x24
 8015430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	681a      	ldr	r2, [r3, #0]
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	f022 0201 	bic.w	r2, r2, #1
 801544a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8015452:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	2200      	movs	r2, #0
 8015458:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	68fa      	ldr	r2, [r7, #12]
 8015460:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	2220      	movs	r2, #32
 8015466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	2200      	movs	r2, #0
 801546e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015472:	2300      	movs	r3, #0
}
 8015474:	4618      	mov	r0, r3
 8015476:	3714      	adds	r7, #20
 8015478:	46bd      	mov	sp, r7
 801547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547e:	4770      	bx	lr

08015480 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b084      	sub	sp, #16
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
 8015488:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015490:	2b01      	cmp	r3, #1
 8015492:	d101      	bne.n	8015498 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8015494:	2302      	movs	r3, #2
 8015496:	e02d      	b.n	80154f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2201      	movs	r2, #1
 801549c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	2224      	movs	r2, #36	; 0x24
 80154a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	681a      	ldr	r2, [r3, #0]
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	f022 0201 	bic.w	r2, r2, #1
 80154be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	689b      	ldr	r3, [r3, #8]
 80154c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	683a      	ldr	r2, [r7, #0]
 80154d0:	430a      	orrs	r2, r1
 80154d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80154d4:	6878      	ldr	r0, [r7, #4]
 80154d6:	f000 f8ab 	bl	8015630 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	68fa      	ldr	r2, [r7, #12]
 80154e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	2220      	movs	r2, #32
 80154e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	2200      	movs	r2, #0
 80154ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80154f2:	2300      	movs	r3, #0
}
 80154f4:	4618      	mov	r0, r3
 80154f6:	3710      	adds	r7, #16
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}

080154fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b084      	sub	sp, #16
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
 8015504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801550c:	2b01      	cmp	r3, #1
 801550e:	d101      	bne.n	8015514 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8015510:	2302      	movs	r3, #2
 8015512:	e02d      	b.n	8015570 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2201      	movs	r2, #1
 8015518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2224      	movs	r2, #36	; 0x24
 8015520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	681a      	ldr	r2, [r3, #0]
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	f022 0201 	bic.w	r2, r2, #1
 801553a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	689b      	ldr	r3, [r3, #8]
 8015542:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	683a      	ldr	r2, [r7, #0]
 801554c:	430a      	orrs	r2, r1
 801554e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015550:	6878      	ldr	r0, [r7, #4]
 8015552:	f000 f86d 	bl	8015630 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	68fa      	ldr	r2, [r7, #12]
 801555c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2220      	movs	r2, #32
 8015562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	2200      	movs	r2, #0
 801556a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801556e:	2300      	movs	r3, #0
}
 8015570:	4618      	mov	r0, r3
 8015572:	3710      	adds	r7, #16
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}

08015578 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b08c      	sub	sp, #48	; 0x30
 801557c:	af00      	add	r7, sp, #0
 801557e:	60f8      	str	r0, [r7, #12]
 8015580:	60b9      	str	r1, [r7, #8]
 8015582:	4613      	mov	r3, r2
 8015584:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801558c:	2b20      	cmp	r3, #32
 801558e:	d14a      	bne.n	8015626 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d002      	beq.n	801559c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8015596:	88fb      	ldrh	r3, [r7, #6]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d101      	bne.n	80155a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 801559c:	2301      	movs	r3, #1
 801559e:	e043      	b.n	8015628 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80155a6:	2b01      	cmp	r3, #1
 80155a8:	d101      	bne.n	80155ae <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 80155aa:	2302      	movs	r3, #2
 80155ac:	e03c      	b.n	8015628 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	2201      	movs	r2, #1
 80155b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	2201      	movs	r2, #1
 80155ba:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80155bc:	88fb      	ldrh	r3, [r7, #6]
 80155be:	461a      	mov	r2, r3
 80155c0:	68b9      	ldr	r1, [r7, #8]
 80155c2:	68f8      	ldr	r0, [r7, #12]
 80155c4:	f7ff fc86 	bl	8014ed4 <UART_Start_Receive_DMA>
 80155c8:	4603      	mov	r3, r0
 80155ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80155ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d124      	bne.n	8015620 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155da:	2b01      	cmp	r3, #1
 80155dc:	d11d      	bne.n	801561a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	2210      	movs	r2, #16
 80155e4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155ec:	69bb      	ldr	r3, [r7, #24]
 80155ee:	e853 3f00 	ldrex	r3, [r3]
 80155f2:	617b      	str	r3, [r7, #20]
   return(result);
 80155f4:	697b      	ldr	r3, [r7, #20]
 80155f6:	f043 0310 	orr.w	r3, r3, #16
 80155fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	461a      	mov	r2, r3
 8015602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015604:	627b      	str	r3, [r7, #36]	; 0x24
 8015606:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015608:	6a39      	ldr	r1, [r7, #32]
 801560a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801560c:	e841 2300 	strex	r3, r2, [r1]
 8015610:	61fb      	str	r3, [r7, #28]
   return(result);
 8015612:	69fb      	ldr	r3, [r7, #28]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d1e6      	bne.n	80155e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8015618:	e002      	b.n	8015620 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801561a:	2301      	movs	r3, #1
 801561c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8015620:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015624:	e000      	b.n	8015628 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8015626:	2302      	movs	r3, #2
  }
}
 8015628:	4618      	mov	r0, r3
 801562a:	3730      	adds	r7, #48	; 0x30
 801562c:	46bd      	mov	sp, r7
 801562e:	bd80      	pop	{r7, pc}

08015630 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015630:	b480      	push	{r7}
 8015632:	b085      	sub	sp, #20
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801563c:	2b00      	cmp	r3, #0
 801563e:	d108      	bne.n	8015652 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	2201      	movs	r2, #1
 8015644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	2201      	movs	r2, #1
 801564c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015650:	e031      	b.n	80156b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015652:	2308      	movs	r3, #8
 8015654:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8015656:	2308      	movs	r3, #8
 8015658:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	689b      	ldr	r3, [r3, #8]
 8015660:	0e5b      	lsrs	r3, r3, #25
 8015662:	b2db      	uxtb	r3, r3
 8015664:	f003 0307 	and.w	r3, r3, #7
 8015668:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	689b      	ldr	r3, [r3, #8]
 8015670:	0f5b      	lsrs	r3, r3, #29
 8015672:	b2db      	uxtb	r3, r3
 8015674:	f003 0307 	and.w	r3, r3, #7
 8015678:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801567a:	7bbb      	ldrb	r3, [r7, #14]
 801567c:	7b3a      	ldrb	r2, [r7, #12]
 801567e:	4911      	ldr	r1, [pc, #68]	; (80156c4 <UARTEx_SetNbDataToProcess+0x94>)
 8015680:	5c8a      	ldrb	r2, [r1, r2]
 8015682:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8015686:	7b3a      	ldrb	r2, [r7, #12]
 8015688:	490f      	ldr	r1, [pc, #60]	; (80156c8 <UARTEx_SetNbDataToProcess+0x98>)
 801568a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801568c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015690:	b29a      	uxth	r2, r3
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015698:	7bfb      	ldrb	r3, [r7, #15]
 801569a:	7b7a      	ldrb	r2, [r7, #13]
 801569c:	4909      	ldr	r1, [pc, #36]	; (80156c4 <UARTEx_SetNbDataToProcess+0x94>)
 801569e:	5c8a      	ldrb	r2, [r1, r2]
 80156a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80156a4:	7b7a      	ldrb	r2, [r7, #13]
 80156a6:	4908      	ldr	r1, [pc, #32]	; (80156c8 <UARTEx_SetNbDataToProcess+0x98>)
 80156a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80156aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80156ae:	b29a      	uxth	r2, r3
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80156b6:	bf00      	nop
 80156b8:	3714      	adds	r7, #20
 80156ba:	46bd      	mov	sp, r7
 80156bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c0:	4770      	bx	lr
 80156c2:	bf00      	nop
 80156c4:	08025440 	.word	0x08025440
 80156c8:	08025448 	.word	0x08025448

080156cc <__NVIC_SetPriority>:
{
 80156cc:	b480      	push	{r7}
 80156ce:	b083      	sub	sp, #12
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	4603      	mov	r3, r0
 80156d4:	6039      	str	r1, [r7, #0]
 80156d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80156d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	db0a      	blt.n	80156f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	b2da      	uxtb	r2, r3
 80156e4:	490c      	ldr	r1, [pc, #48]	; (8015718 <__NVIC_SetPriority+0x4c>)
 80156e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80156ea:	0112      	lsls	r2, r2, #4
 80156ec:	b2d2      	uxtb	r2, r2
 80156ee:	440b      	add	r3, r1
 80156f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80156f4:	e00a      	b.n	801570c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80156f6:	683b      	ldr	r3, [r7, #0]
 80156f8:	b2da      	uxtb	r2, r3
 80156fa:	4908      	ldr	r1, [pc, #32]	; (801571c <__NVIC_SetPriority+0x50>)
 80156fc:	79fb      	ldrb	r3, [r7, #7]
 80156fe:	f003 030f 	and.w	r3, r3, #15
 8015702:	3b04      	subs	r3, #4
 8015704:	0112      	lsls	r2, r2, #4
 8015706:	b2d2      	uxtb	r2, r2
 8015708:	440b      	add	r3, r1
 801570a:	761a      	strb	r2, [r3, #24]
}
 801570c:	bf00      	nop
 801570e:	370c      	adds	r7, #12
 8015710:	46bd      	mov	sp, r7
 8015712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015716:	4770      	bx	lr
 8015718:	e000e100 	.word	0xe000e100
 801571c:	e000ed00 	.word	0xe000ed00

08015720 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015720:	b580      	push	{r7, lr}
 8015722:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015724:	4b05      	ldr	r3, [pc, #20]	; (801573c <SysTick_Handler+0x1c>)
 8015726:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015728:	f002 fe98 	bl	801845c <xTaskGetSchedulerState>
 801572c:	4603      	mov	r3, r0
 801572e:	2b01      	cmp	r3, #1
 8015730:	d001      	beq.n	8015736 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015732:	f003 fe71 	bl	8019418 <xPortSysTickHandler>
  }
}
 8015736:	bf00      	nop
 8015738:	bd80      	pop	{r7, pc}
 801573a:	bf00      	nop
 801573c:	e000e010 	.word	0xe000e010

08015740 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015740:	b580      	push	{r7, lr}
 8015742:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015744:	2100      	movs	r1, #0
 8015746:	f06f 0004 	mvn.w	r0, #4
 801574a:	f7ff ffbf 	bl	80156cc <__NVIC_SetPriority>
#endif
}
 801574e:	bf00      	nop
 8015750:	bd80      	pop	{r7, pc}
	...

08015754 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015754:	b480      	push	{r7}
 8015756:	b083      	sub	sp, #12
 8015758:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801575a:	f3ef 8305 	mrs	r3, IPSR
 801575e:	603b      	str	r3, [r7, #0]
  return(result);
 8015760:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015762:	2b00      	cmp	r3, #0
 8015764:	d003      	beq.n	801576e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015766:	f06f 0305 	mvn.w	r3, #5
 801576a:	607b      	str	r3, [r7, #4]
 801576c:	e00c      	b.n	8015788 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801576e:	4b0a      	ldr	r3, [pc, #40]	; (8015798 <osKernelInitialize+0x44>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d105      	bne.n	8015782 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015776:	4b08      	ldr	r3, [pc, #32]	; (8015798 <osKernelInitialize+0x44>)
 8015778:	2201      	movs	r2, #1
 801577a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801577c:	2300      	movs	r3, #0
 801577e:	607b      	str	r3, [r7, #4]
 8015780:	e002      	b.n	8015788 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015782:	f04f 33ff 	mov.w	r3, #4294967295
 8015786:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015788:	687b      	ldr	r3, [r7, #4]
}
 801578a:	4618      	mov	r0, r3
 801578c:	370c      	adds	r7, #12
 801578e:	46bd      	mov	sp, r7
 8015790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015794:	4770      	bx	lr
 8015796:	bf00      	nop
 8015798:	200049e8 	.word	0x200049e8

0801579c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801579c:	b580      	push	{r7, lr}
 801579e:	b082      	sub	sp, #8
 80157a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80157a2:	f3ef 8305 	mrs	r3, IPSR
 80157a6:	603b      	str	r3, [r7, #0]
  return(result);
 80157a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d003      	beq.n	80157b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80157ae:	f06f 0305 	mvn.w	r3, #5
 80157b2:	607b      	str	r3, [r7, #4]
 80157b4:	e010      	b.n	80157d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80157b6:	4b0b      	ldr	r3, [pc, #44]	; (80157e4 <osKernelStart+0x48>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	2b01      	cmp	r3, #1
 80157bc:	d109      	bne.n	80157d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80157be:	f7ff ffbf 	bl	8015740 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80157c2:	4b08      	ldr	r3, [pc, #32]	; (80157e4 <osKernelStart+0x48>)
 80157c4:	2202      	movs	r2, #2
 80157c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80157c8:	f002 f952 	bl	8017a70 <vTaskStartScheduler>
      stat = osOK;
 80157cc:	2300      	movs	r3, #0
 80157ce:	607b      	str	r3, [r7, #4]
 80157d0:	e002      	b.n	80157d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80157d2:	f04f 33ff 	mov.w	r3, #4294967295
 80157d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80157d8:	687b      	ldr	r3, [r7, #4]
}
 80157da:	4618      	mov	r0, r3
 80157dc:	3708      	adds	r7, #8
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}
 80157e2:	bf00      	nop
 80157e4:	200049e8 	.word	0x200049e8

080157e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b08e      	sub	sp, #56	; 0x38
 80157ec:	af04      	add	r7, sp, #16
 80157ee:	60f8      	str	r0, [r7, #12]
 80157f0:	60b9      	str	r1, [r7, #8]
 80157f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80157f4:	2300      	movs	r3, #0
 80157f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80157f8:	f3ef 8305 	mrs	r3, IPSR
 80157fc:	617b      	str	r3, [r7, #20]
  return(result);
 80157fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015800:	2b00      	cmp	r3, #0
 8015802:	d17e      	bne.n	8015902 <osThreadNew+0x11a>
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d07b      	beq.n	8015902 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801580a:	2380      	movs	r3, #128	; 0x80
 801580c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801580e:	2318      	movs	r3, #24
 8015810:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015812:	2300      	movs	r3, #0
 8015814:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015816:	f04f 33ff 	mov.w	r3, #4294967295
 801581a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d045      	beq.n	80158ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d002      	beq.n	8015830 <osThreadNew+0x48>
        name = attr->name;
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	699b      	ldr	r3, [r3, #24]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d002      	beq.n	801583e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	699b      	ldr	r3, [r3, #24]
 801583c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801583e:	69fb      	ldr	r3, [r7, #28]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d008      	beq.n	8015856 <osThreadNew+0x6e>
 8015844:	69fb      	ldr	r3, [r7, #28]
 8015846:	2b38      	cmp	r3, #56	; 0x38
 8015848:	d805      	bhi.n	8015856 <osThreadNew+0x6e>
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	685b      	ldr	r3, [r3, #4]
 801584e:	f003 0301 	and.w	r3, r3, #1
 8015852:	2b00      	cmp	r3, #0
 8015854:	d001      	beq.n	801585a <osThreadNew+0x72>
        return (NULL);
 8015856:	2300      	movs	r3, #0
 8015858:	e054      	b.n	8015904 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	695b      	ldr	r3, [r3, #20]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d003      	beq.n	801586a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	695b      	ldr	r3, [r3, #20]
 8015866:	089b      	lsrs	r3, r3, #2
 8015868:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	689b      	ldr	r3, [r3, #8]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d00e      	beq.n	8015890 <osThreadNew+0xa8>
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	68db      	ldr	r3, [r3, #12]
 8015876:	2b6b      	cmp	r3, #107	; 0x6b
 8015878:	d90a      	bls.n	8015890 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801587e:	2b00      	cmp	r3, #0
 8015880:	d006      	beq.n	8015890 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	695b      	ldr	r3, [r3, #20]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d002      	beq.n	8015890 <osThreadNew+0xa8>
        mem = 1;
 801588a:	2301      	movs	r3, #1
 801588c:	61bb      	str	r3, [r7, #24]
 801588e:	e010      	b.n	80158b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	689b      	ldr	r3, [r3, #8]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d10c      	bne.n	80158b2 <osThreadNew+0xca>
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	68db      	ldr	r3, [r3, #12]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d108      	bne.n	80158b2 <osThreadNew+0xca>
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	691b      	ldr	r3, [r3, #16]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d104      	bne.n	80158b2 <osThreadNew+0xca>
          mem = 0;
 80158a8:	2300      	movs	r3, #0
 80158aa:	61bb      	str	r3, [r7, #24]
 80158ac:	e001      	b.n	80158b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80158ae:	2300      	movs	r3, #0
 80158b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80158b2:	69bb      	ldr	r3, [r7, #24]
 80158b4:	2b01      	cmp	r3, #1
 80158b6:	d110      	bne.n	80158da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80158bc:	687a      	ldr	r2, [r7, #4]
 80158be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80158c0:	9202      	str	r2, [sp, #8]
 80158c2:	9301      	str	r3, [sp, #4]
 80158c4:	69fb      	ldr	r3, [r7, #28]
 80158c6:	9300      	str	r3, [sp, #0]
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	6a3a      	ldr	r2, [r7, #32]
 80158cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80158ce:	68f8      	ldr	r0, [r7, #12]
 80158d0:	f001 fef8 	bl	80176c4 <xTaskCreateStatic>
 80158d4:	4603      	mov	r3, r0
 80158d6:	613b      	str	r3, [r7, #16]
 80158d8:	e013      	b.n	8015902 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80158da:	69bb      	ldr	r3, [r7, #24]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d110      	bne.n	8015902 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80158e0:	6a3b      	ldr	r3, [r7, #32]
 80158e2:	b29a      	uxth	r2, r3
 80158e4:	f107 0310 	add.w	r3, r7, #16
 80158e8:	9301      	str	r3, [sp, #4]
 80158ea:	69fb      	ldr	r3, [r7, #28]
 80158ec:	9300      	str	r3, [sp, #0]
 80158ee:	68bb      	ldr	r3, [r7, #8]
 80158f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80158f2:	68f8      	ldr	r0, [r7, #12]
 80158f4:	f001 ff43 	bl	801777e <xTaskCreate>
 80158f8:	4603      	mov	r3, r0
 80158fa:	2b01      	cmp	r3, #1
 80158fc:	d001      	beq.n	8015902 <osThreadNew+0x11a>
            hTask = NULL;
 80158fe:	2300      	movs	r3, #0
 8015900:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015902:	693b      	ldr	r3, [r7, #16]
}
 8015904:	4618      	mov	r0, r3
 8015906:	3728      	adds	r7, #40	; 0x28
 8015908:	46bd      	mov	sp, r7
 801590a:	bd80      	pop	{r7, pc}

0801590c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801590c:	b580      	push	{r7, lr}
 801590e:	b084      	sub	sp, #16
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015914:	f3ef 8305 	mrs	r3, IPSR
 8015918:	60bb      	str	r3, [r7, #8]
  return(result);
 801591a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801591c:	2b00      	cmp	r3, #0
 801591e:	d003      	beq.n	8015928 <osDelay+0x1c>
    stat = osErrorISR;
 8015920:	f06f 0305 	mvn.w	r3, #5
 8015924:	60fb      	str	r3, [r7, #12]
 8015926:	e007      	b.n	8015938 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015928:	2300      	movs	r3, #0
 801592a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	2b00      	cmp	r3, #0
 8015930:	d002      	beq.n	8015938 <osDelay+0x2c>
      vTaskDelay(ticks);
 8015932:	6878      	ldr	r0, [r7, #4]
 8015934:	f002 f868 	bl	8017a08 <vTaskDelay>
    }
  }

  return (stat);
 8015938:	68fb      	ldr	r3, [r7, #12]
}
 801593a:	4618      	mov	r0, r3
 801593c:	3710      	adds	r7, #16
 801593e:	46bd      	mov	sp, r7
 8015940:	bd80      	pop	{r7, pc}

08015942 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8015942:	b580      	push	{r7, lr}
 8015944:	b084      	sub	sp, #16
 8015946:	af00      	add	r7, sp, #0
 8015948:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	f003 fb64 	bl	8019018 <pvTimerGetTimerID>
 8015950:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d005      	beq.n	8015964 <TimerCallback+0x22>
    callb->func (callb->arg);
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	68fa      	ldr	r2, [r7, #12]
 801595e:	6852      	ldr	r2, [r2, #4]
 8015960:	4610      	mov	r0, r2
 8015962:	4798      	blx	r3
  }
}
 8015964:	bf00      	nop
 8015966:	3710      	adds	r7, #16
 8015968:	46bd      	mov	sp, r7
 801596a:	bd80      	pop	{r7, pc}

0801596c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 801596c:	b580      	push	{r7, lr}
 801596e:	b08c      	sub	sp, #48	; 0x30
 8015970:	af02      	add	r7, sp, #8
 8015972:	60f8      	str	r0, [r7, #12]
 8015974:	607a      	str	r2, [r7, #4]
 8015976:	603b      	str	r3, [r7, #0]
 8015978:	460b      	mov	r3, r1
 801597a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 801597c:	2300      	movs	r3, #0
 801597e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015980:	f3ef 8305 	mrs	r3, IPSR
 8015984:	613b      	str	r3, [r7, #16]
  return(result);
 8015986:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8015988:	2b00      	cmp	r3, #0
 801598a:	d163      	bne.n	8015a54 <osTimerNew+0xe8>
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d060      	beq.n	8015a54 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8015992:	2008      	movs	r0, #8
 8015994:	f003 fdd0 	bl	8019538 <pvPortMalloc>
 8015998:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 801599a:	697b      	ldr	r3, [r7, #20]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d059      	beq.n	8015a54 <osTimerNew+0xe8>
      callb->func = func;
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	68fa      	ldr	r2, [r7, #12]
 80159a4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80159a6:	697b      	ldr	r3, [r7, #20]
 80159a8:	687a      	ldr	r2, [r7, #4]
 80159aa:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80159ac:	7afb      	ldrb	r3, [r7, #11]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d102      	bne.n	80159b8 <osTimerNew+0x4c>
        reload = pdFALSE;
 80159b2:	2300      	movs	r3, #0
 80159b4:	61fb      	str	r3, [r7, #28]
 80159b6:	e001      	b.n	80159bc <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80159b8:	2301      	movs	r3, #1
 80159ba:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80159bc:	f04f 33ff 	mov.w	r3, #4294967295
 80159c0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80159c2:	2300      	movs	r3, #0
 80159c4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80159c6:	683b      	ldr	r3, [r7, #0]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d01c      	beq.n	8015a06 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80159cc:	683b      	ldr	r3, [r7, #0]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d002      	beq.n	80159da <osTimerNew+0x6e>
          name = attr->name;
 80159d4:	683b      	ldr	r3, [r7, #0]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	689b      	ldr	r3, [r3, #8]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d006      	beq.n	80159f0 <osTimerNew+0x84>
 80159e2:	683b      	ldr	r3, [r7, #0]
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	2b2b      	cmp	r3, #43	; 0x2b
 80159e8:	d902      	bls.n	80159f0 <osTimerNew+0x84>
          mem = 1;
 80159ea:	2301      	movs	r3, #1
 80159ec:	61bb      	str	r3, [r7, #24]
 80159ee:	e00c      	b.n	8015a0a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80159f0:	683b      	ldr	r3, [r7, #0]
 80159f2:	689b      	ldr	r3, [r3, #8]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d108      	bne.n	8015a0a <osTimerNew+0x9e>
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	68db      	ldr	r3, [r3, #12]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d104      	bne.n	8015a0a <osTimerNew+0x9e>
            mem = 0;
 8015a00:	2300      	movs	r3, #0
 8015a02:	61bb      	str	r3, [r7, #24]
 8015a04:	e001      	b.n	8015a0a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8015a06:	2300      	movs	r3, #0
 8015a08:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8015a0a:	69bb      	ldr	r3, [r7, #24]
 8015a0c:	2b01      	cmp	r3, #1
 8015a0e:	d10c      	bne.n	8015a2a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	689b      	ldr	r3, [r3, #8]
 8015a14:	9301      	str	r3, [sp, #4]
 8015a16:	4b12      	ldr	r3, [pc, #72]	; (8015a60 <osTimerNew+0xf4>)
 8015a18:	9300      	str	r3, [sp, #0]
 8015a1a:	697b      	ldr	r3, [r7, #20]
 8015a1c:	69fa      	ldr	r2, [r7, #28]
 8015a1e:	2101      	movs	r1, #1
 8015a20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a22:	f002 ff7a 	bl	801891a <xTimerCreateStatic>
 8015a26:	6238      	str	r0, [r7, #32]
 8015a28:	e00b      	b.n	8015a42 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8015a2a:	69bb      	ldr	r3, [r7, #24]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d108      	bne.n	8015a42 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8015a30:	4b0b      	ldr	r3, [pc, #44]	; (8015a60 <osTimerNew+0xf4>)
 8015a32:	9300      	str	r3, [sp, #0]
 8015a34:	697b      	ldr	r3, [r7, #20]
 8015a36:	69fa      	ldr	r2, [r7, #28]
 8015a38:	2101      	movs	r1, #1
 8015a3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a3c:	f002 ff4c 	bl	80188d8 <xTimerCreate>
 8015a40:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8015a42:	6a3b      	ldr	r3, [r7, #32]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d105      	bne.n	8015a54 <osTimerNew+0xe8>
 8015a48:	697b      	ldr	r3, [r7, #20]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d002      	beq.n	8015a54 <osTimerNew+0xe8>
        vPortFree (callb);
 8015a4e:	6978      	ldr	r0, [r7, #20]
 8015a50:	f003 fe3e 	bl	80196d0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8015a54:	6a3b      	ldr	r3, [r7, #32]
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	3728      	adds	r7, #40	; 0x28
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bd80      	pop	{r7, pc}
 8015a5e:	bf00      	nop
 8015a60:	08015943 	.word	0x08015943

08015a64 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b086      	sub	sp, #24
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015a70:	f3ef 8305 	mrs	r3, IPSR
 8015a74:	60fb      	str	r3, [r7, #12]
  return(result);
 8015a76:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d12d      	bne.n	8015ad8 <osEventFlagsNew+0x74>
    mem = -1;
 8015a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8015a80:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d015      	beq.n	8015ab4 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	689b      	ldr	r3, [r3, #8]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d006      	beq.n	8015a9e <osEventFlagsNew+0x3a>
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	68db      	ldr	r3, [r3, #12]
 8015a94:	2b1f      	cmp	r3, #31
 8015a96:	d902      	bls.n	8015a9e <osEventFlagsNew+0x3a>
        mem = 1;
 8015a98:	2301      	movs	r3, #1
 8015a9a:	613b      	str	r3, [r7, #16]
 8015a9c:	e00c      	b.n	8015ab8 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	689b      	ldr	r3, [r3, #8]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d108      	bne.n	8015ab8 <osEventFlagsNew+0x54>
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	68db      	ldr	r3, [r3, #12]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d104      	bne.n	8015ab8 <osEventFlagsNew+0x54>
          mem = 0;
 8015aae:	2300      	movs	r3, #0
 8015ab0:	613b      	str	r3, [r7, #16]
 8015ab2:	e001      	b.n	8015ab8 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8015ab8:	693b      	ldr	r3, [r7, #16]
 8015aba:	2b01      	cmp	r3, #1
 8015abc:	d106      	bne.n	8015acc <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	689b      	ldr	r3, [r3, #8]
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f000 fb5e 	bl	8016184 <xEventGroupCreateStatic>
 8015ac8:	6178      	str	r0, [r7, #20]
 8015aca:	e005      	b.n	8015ad8 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8015acc:	693b      	ldr	r3, [r7, #16]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d102      	bne.n	8015ad8 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8015ad2:	f000 fb8e 	bl	80161f2 <xEventGroupCreate>
 8015ad6:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8015ad8:	697b      	ldr	r3, [r7, #20]
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	3718      	adds	r7, #24
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bd80      	pop	{r7, pc}
	...

08015ae4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b086      	sub	sp, #24
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
 8015aec:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8015af2:	693b      	ldr	r3, [r7, #16]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d004      	beq.n	8015b02 <osEventFlagsSet+0x1e>
 8015af8:	683b      	ldr	r3, [r7, #0]
 8015afa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d003      	beq.n	8015b0a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8015b02:	f06f 0303 	mvn.w	r3, #3
 8015b06:	617b      	str	r3, [r7, #20]
 8015b08:	e028      	b.n	8015b5c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015b0a:	f3ef 8305 	mrs	r3, IPSR
 8015b0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8015b10:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d01d      	beq.n	8015b52 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8015b16:	2300      	movs	r3, #0
 8015b18:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8015b1a:	f107 0308 	add.w	r3, r7, #8
 8015b1e:	461a      	mov	r2, r3
 8015b20:	6839      	ldr	r1, [r7, #0]
 8015b22:	6938      	ldr	r0, [r7, #16]
 8015b24:	f000 fd86 	bl	8016634 <xEventGroupSetBitsFromISR>
 8015b28:	4603      	mov	r3, r0
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d103      	bne.n	8015b36 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8015b2e:	f06f 0302 	mvn.w	r3, #2
 8015b32:	617b      	str	r3, [r7, #20]
 8015b34:	e012      	b.n	8015b5c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8015b36:	683b      	ldr	r3, [r7, #0]
 8015b38:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8015b3a:	68bb      	ldr	r3, [r7, #8]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d00d      	beq.n	8015b5c <osEventFlagsSet+0x78>
 8015b40:	4b09      	ldr	r3, [pc, #36]	; (8015b68 <osEventFlagsSet+0x84>)
 8015b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b46:	601a      	str	r2, [r3, #0]
 8015b48:	f3bf 8f4f 	dsb	sy
 8015b4c:	f3bf 8f6f 	isb	sy
 8015b50:	e004      	b.n	8015b5c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8015b52:	6839      	ldr	r1, [r7, #0]
 8015b54:	6938      	ldr	r0, [r7, #16]
 8015b56:	f000 fca5 	bl	80164a4 <xEventGroupSetBits>
 8015b5a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8015b5c:	697b      	ldr	r3, [r7, #20]
}
 8015b5e:	4618      	mov	r0, r3
 8015b60:	3718      	adds	r7, #24
 8015b62:	46bd      	mov	sp, r7
 8015b64:	bd80      	pop	{r7, pc}
 8015b66:	bf00      	nop
 8015b68:	e000ed04 	.word	0xe000ed04

08015b6c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b086      	sub	sp, #24
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
 8015b74:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8015b7a:	693b      	ldr	r3, [r7, #16]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d004      	beq.n	8015b8a <osEventFlagsClear+0x1e>
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d003      	beq.n	8015b92 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8015b8a:	f06f 0303 	mvn.w	r3, #3
 8015b8e:	617b      	str	r3, [r7, #20]
 8015b90:	e019      	b.n	8015bc6 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015b92:	f3ef 8305 	mrs	r3, IPSR
 8015b96:	60fb      	str	r3, [r7, #12]
  return(result);
 8015b98:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d00e      	beq.n	8015bbc <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8015b9e:	6938      	ldr	r0, [r7, #16]
 8015ba0:	f000 fc5c 	bl	801645c <xEventGroupGetBitsFromISR>
 8015ba4:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8015ba6:	6839      	ldr	r1, [r7, #0]
 8015ba8:	6938      	ldr	r0, [r7, #16]
 8015baa:	f000 fc43 	bl	8016434 <xEventGroupClearBitsFromISR>
 8015bae:	4603      	mov	r3, r0
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d108      	bne.n	8015bc6 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8015bb4:	f06f 0302 	mvn.w	r3, #2
 8015bb8:	617b      	str	r3, [r7, #20]
 8015bba:	e004      	b.n	8015bc6 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8015bbc:	6839      	ldr	r1, [r7, #0]
 8015bbe:	6938      	ldr	r0, [r7, #16]
 8015bc0:	f000 fc00 	bl	80163c4 <xEventGroupClearBits>
 8015bc4:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8015bc6:	697b      	ldr	r3, [r7, #20]
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	3718      	adds	r7, #24
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}

08015bd0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b08c      	sub	sp, #48	; 0x30
 8015bd4:	af02      	add	r7, sp, #8
 8015bd6:	60f8      	str	r0, [r7, #12]
 8015bd8:	60b9      	str	r1, [r7, #8]
 8015bda:	607a      	str	r2, [r7, #4]
 8015bdc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8015be2:	69bb      	ldr	r3, [r7, #24]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d004      	beq.n	8015bf2 <osEventFlagsWait+0x22>
 8015be8:	68bb      	ldr	r3, [r7, #8]
 8015bea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d003      	beq.n	8015bfa <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8015bf2:	f06f 0303 	mvn.w	r3, #3
 8015bf6:	61fb      	str	r3, [r7, #28]
 8015bf8:	e04b      	b.n	8015c92 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015bfa:	f3ef 8305 	mrs	r3, IPSR
 8015bfe:	617b      	str	r3, [r7, #20]
  return(result);
 8015c00:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d003      	beq.n	8015c0e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8015c06:	f06f 0305 	mvn.w	r3, #5
 8015c0a:	61fb      	str	r3, [r7, #28]
 8015c0c:	e041      	b.n	8015c92 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	f003 0301 	and.w	r3, r3, #1
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d002      	beq.n	8015c1e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8015c18:	2301      	movs	r3, #1
 8015c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8015c1c:	e001      	b.n	8015c22 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	f003 0302 	and.w	r3, r3, #2
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d002      	beq.n	8015c32 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	623b      	str	r3, [r7, #32]
 8015c30:	e001      	b.n	8015c36 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8015c32:	2301      	movs	r3, #1
 8015c34:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	9300      	str	r3, [sp, #0]
 8015c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c3c:	6a3a      	ldr	r2, [r7, #32]
 8015c3e:	68b9      	ldr	r1, [r7, #8]
 8015c40:	69b8      	ldr	r0, [r7, #24]
 8015c42:	f000 faf1 	bl	8016228 <xEventGroupWaitBits>
 8015c46:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	f003 0301 	and.w	r3, r3, #1
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d010      	beq.n	8015c74 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8015c52:	68ba      	ldr	r2, [r7, #8]
 8015c54:	69fb      	ldr	r3, [r7, #28]
 8015c56:	4013      	ands	r3, r2
 8015c58:	68ba      	ldr	r2, [r7, #8]
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	d019      	beq.n	8015c92 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d003      	beq.n	8015c6c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8015c64:	f06f 0301 	mvn.w	r3, #1
 8015c68:	61fb      	str	r3, [r7, #28]
 8015c6a:	e012      	b.n	8015c92 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8015c6c:	f06f 0302 	mvn.w	r3, #2
 8015c70:	61fb      	str	r3, [r7, #28]
 8015c72:	e00e      	b.n	8015c92 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8015c74:	68ba      	ldr	r2, [r7, #8]
 8015c76:	69fb      	ldr	r3, [r7, #28]
 8015c78:	4013      	ands	r3, r2
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d109      	bne.n	8015c92 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d003      	beq.n	8015c8c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8015c84:	f06f 0301 	mvn.w	r3, #1
 8015c88:	61fb      	str	r3, [r7, #28]
 8015c8a:	e002      	b.n	8015c92 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8015c8c:	f06f 0302 	mvn.w	r3, #2
 8015c90:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8015c92:	69fb      	ldr	r3, [r7, #28]
}
 8015c94:	4618      	mov	r0, r3
 8015c96:	3728      	adds	r7, #40	; 0x28
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	bd80      	pop	{r7, pc}

08015c9c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b088      	sub	sp, #32
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ca8:	f3ef 8305 	mrs	r3, IPSR
 8015cac:	60bb      	str	r3, [r7, #8]
  return(result);
 8015cae:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d174      	bne.n	8015d9e <osMutexNew+0x102>
    if (attr != NULL) {
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d003      	beq.n	8015cc2 <osMutexNew+0x26>
      type = attr->attr_bits;
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	685b      	ldr	r3, [r3, #4]
 8015cbe:	61bb      	str	r3, [r7, #24]
 8015cc0:	e001      	b.n	8015cc6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8015cc6:	69bb      	ldr	r3, [r7, #24]
 8015cc8:	f003 0301 	and.w	r3, r3, #1
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d002      	beq.n	8015cd6 <osMutexNew+0x3a>
      rmtx = 1U;
 8015cd0:	2301      	movs	r3, #1
 8015cd2:	617b      	str	r3, [r7, #20]
 8015cd4:	e001      	b.n	8015cda <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8015cda:	69bb      	ldr	r3, [r7, #24]
 8015cdc:	f003 0308 	and.w	r3, r3, #8
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d15c      	bne.n	8015d9e <osMutexNew+0x102>
      mem = -1;
 8015ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8015ce8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d015      	beq.n	8015d1c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	689b      	ldr	r3, [r3, #8]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d006      	beq.n	8015d06 <osMutexNew+0x6a>
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	68db      	ldr	r3, [r3, #12]
 8015cfc:	2b4f      	cmp	r3, #79	; 0x4f
 8015cfe:	d902      	bls.n	8015d06 <osMutexNew+0x6a>
          mem = 1;
 8015d00:	2301      	movs	r3, #1
 8015d02:	613b      	str	r3, [r7, #16]
 8015d04:	e00c      	b.n	8015d20 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	689b      	ldr	r3, [r3, #8]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d108      	bne.n	8015d20 <osMutexNew+0x84>
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	68db      	ldr	r3, [r3, #12]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d104      	bne.n	8015d20 <osMutexNew+0x84>
            mem = 0;
 8015d16:	2300      	movs	r3, #0
 8015d18:	613b      	str	r3, [r7, #16]
 8015d1a:	e001      	b.n	8015d20 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8015d20:	693b      	ldr	r3, [r7, #16]
 8015d22:	2b01      	cmp	r3, #1
 8015d24:	d112      	bne.n	8015d4c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8015d26:	697b      	ldr	r3, [r7, #20]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d007      	beq.n	8015d3c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	689b      	ldr	r3, [r3, #8]
 8015d30:	4619      	mov	r1, r3
 8015d32:	2004      	movs	r0, #4
 8015d34:	f000 feb5 	bl	8016aa2 <xQueueCreateMutexStatic>
 8015d38:	61f8      	str	r0, [r7, #28]
 8015d3a:	e016      	b.n	8015d6a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	689b      	ldr	r3, [r3, #8]
 8015d40:	4619      	mov	r1, r3
 8015d42:	2001      	movs	r0, #1
 8015d44:	f000 fead 	bl	8016aa2 <xQueueCreateMutexStatic>
 8015d48:	61f8      	str	r0, [r7, #28]
 8015d4a:	e00e      	b.n	8015d6a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8015d4c:	693b      	ldr	r3, [r7, #16]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d10b      	bne.n	8015d6a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8015d52:	697b      	ldr	r3, [r7, #20]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d004      	beq.n	8015d62 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8015d58:	2004      	movs	r0, #4
 8015d5a:	f000 fe8a 	bl	8016a72 <xQueueCreateMutex>
 8015d5e:	61f8      	str	r0, [r7, #28]
 8015d60:	e003      	b.n	8015d6a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8015d62:	2001      	movs	r0, #1
 8015d64:	f000 fe85 	bl	8016a72 <xQueueCreateMutex>
 8015d68:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8015d6a:	69fb      	ldr	r3, [r7, #28]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d00c      	beq.n	8015d8a <osMutexNew+0xee>
        if (attr != NULL) {
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d003      	beq.n	8015d7e <osMutexNew+0xe2>
          name = attr->name;
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	60fb      	str	r3, [r7, #12]
 8015d7c:	e001      	b.n	8015d82 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8015d82:	68f9      	ldr	r1, [r7, #12]
 8015d84:	69f8      	ldr	r0, [r7, #28]
 8015d86:	f001 fc3f 	bl	8017608 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8015d8a:	69fb      	ldr	r3, [r7, #28]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d006      	beq.n	8015d9e <osMutexNew+0x102>
 8015d90:	697b      	ldr	r3, [r7, #20]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d003      	beq.n	8015d9e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8015d96:	69fb      	ldr	r3, [r7, #28]
 8015d98:	f043 0301 	orr.w	r3, r3, #1
 8015d9c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8015d9e:	69fb      	ldr	r3, [r7, #28]
}
 8015da0:	4618      	mov	r0, r3
 8015da2:	3720      	adds	r7, #32
 8015da4:	46bd      	mov	sp, r7
 8015da6:	bd80      	pop	{r7, pc}

08015da8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b086      	sub	sp, #24
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
 8015db0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	f023 0301 	bic.w	r3, r3, #1
 8015db8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	f003 0301 	and.w	r3, r3, #1
 8015dc0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015dc6:	f3ef 8305 	mrs	r3, IPSR
 8015dca:	60bb      	str	r3, [r7, #8]
  return(result);
 8015dcc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d003      	beq.n	8015dda <osMutexAcquire+0x32>
    stat = osErrorISR;
 8015dd2:	f06f 0305 	mvn.w	r3, #5
 8015dd6:	617b      	str	r3, [r7, #20]
 8015dd8:	e02c      	b.n	8015e34 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8015dda:	693b      	ldr	r3, [r7, #16]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d103      	bne.n	8015de8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8015de0:	f06f 0303 	mvn.w	r3, #3
 8015de4:	617b      	str	r3, [r7, #20]
 8015de6:	e025      	b.n	8015e34 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d011      	beq.n	8015e12 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8015dee:	6839      	ldr	r1, [r7, #0]
 8015df0:	6938      	ldr	r0, [r7, #16]
 8015df2:	f000 fea5 	bl	8016b40 <xQueueTakeMutexRecursive>
 8015df6:	4603      	mov	r3, r0
 8015df8:	2b01      	cmp	r3, #1
 8015dfa:	d01b      	beq.n	8015e34 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8015dfc:	683b      	ldr	r3, [r7, #0]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d003      	beq.n	8015e0a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8015e02:	f06f 0301 	mvn.w	r3, #1
 8015e06:	617b      	str	r3, [r7, #20]
 8015e08:	e014      	b.n	8015e34 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8015e0a:	f06f 0302 	mvn.w	r3, #2
 8015e0e:	617b      	str	r3, [r7, #20]
 8015e10:	e010      	b.n	8015e34 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8015e12:	6839      	ldr	r1, [r7, #0]
 8015e14:	6938      	ldr	r0, [r7, #16]
 8015e16:	f001 f943 	bl	80170a0 <xQueueSemaphoreTake>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	2b01      	cmp	r3, #1
 8015e1e:	d009      	beq.n	8015e34 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8015e20:	683b      	ldr	r3, [r7, #0]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d003      	beq.n	8015e2e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8015e26:	f06f 0301 	mvn.w	r3, #1
 8015e2a:	617b      	str	r3, [r7, #20]
 8015e2c:	e002      	b.n	8015e34 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8015e2e:	f06f 0302 	mvn.w	r3, #2
 8015e32:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8015e34:	697b      	ldr	r3, [r7, #20]
}
 8015e36:	4618      	mov	r0, r3
 8015e38:	3718      	adds	r7, #24
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	bd80      	pop	{r7, pc}

08015e3e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8015e3e:	b580      	push	{r7, lr}
 8015e40:	b086      	sub	sp, #24
 8015e42:	af00      	add	r7, sp, #0
 8015e44:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	f023 0301 	bic.w	r3, r3, #1
 8015e4c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f003 0301 	and.w	r3, r3, #1
 8015e54:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8015e56:	2300      	movs	r3, #0
 8015e58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e5a:	f3ef 8305 	mrs	r3, IPSR
 8015e5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8015e60:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d003      	beq.n	8015e6e <osMutexRelease+0x30>
    stat = osErrorISR;
 8015e66:	f06f 0305 	mvn.w	r3, #5
 8015e6a:	617b      	str	r3, [r7, #20]
 8015e6c:	e01f      	b.n	8015eae <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8015e6e:	693b      	ldr	r3, [r7, #16]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d103      	bne.n	8015e7c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8015e74:	f06f 0303 	mvn.w	r3, #3
 8015e78:	617b      	str	r3, [r7, #20]
 8015e7a:	e018      	b.n	8015eae <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d009      	beq.n	8015e96 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8015e82:	6938      	ldr	r0, [r7, #16]
 8015e84:	f000 fe28 	bl	8016ad8 <xQueueGiveMutexRecursive>
 8015e88:	4603      	mov	r3, r0
 8015e8a:	2b01      	cmp	r3, #1
 8015e8c:	d00f      	beq.n	8015eae <osMutexRelease+0x70>
        stat = osErrorResource;
 8015e8e:	f06f 0302 	mvn.w	r3, #2
 8015e92:	617b      	str	r3, [r7, #20]
 8015e94:	e00b      	b.n	8015eae <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8015e96:	2300      	movs	r3, #0
 8015e98:	2200      	movs	r2, #0
 8015e9a:	2100      	movs	r1, #0
 8015e9c:	6938      	ldr	r0, [r7, #16]
 8015e9e:	f000 fe85 	bl	8016bac <xQueueGenericSend>
 8015ea2:	4603      	mov	r3, r0
 8015ea4:	2b01      	cmp	r3, #1
 8015ea6:	d002      	beq.n	8015eae <osMutexRelease+0x70>
        stat = osErrorResource;
 8015ea8:	f06f 0302 	mvn.w	r3, #2
 8015eac:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015eae:	697b      	ldr	r3, [r7, #20]
}
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	3718      	adds	r7, #24
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd80      	pop	{r7, pc}

08015eb8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b08a      	sub	sp, #40	; 0x28
 8015ebc:	af02      	add	r7, sp, #8
 8015ebe:	60f8      	str	r0, [r7, #12]
 8015ec0:	60b9      	str	r1, [r7, #8]
 8015ec2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ec8:	f3ef 8305 	mrs	r3, IPSR
 8015ecc:	613b      	str	r3, [r7, #16]
  return(result);
 8015ece:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d15f      	bne.n	8015f94 <osMessageQueueNew+0xdc>
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d05c      	beq.n	8015f94 <osMessageQueueNew+0xdc>
 8015eda:	68bb      	ldr	r3, [r7, #8]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d059      	beq.n	8015f94 <osMessageQueueNew+0xdc>
    mem = -1;
 8015ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ee4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d029      	beq.n	8015f40 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	689b      	ldr	r3, [r3, #8]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d012      	beq.n	8015f1a <osMessageQueueNew+0x62>
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	68db      	ldr	r3, [r3, #12]
 8015ef8:	2b4f      	cmp	r3, #79	; 0x4f
 8015efa:	d90e      	bls.n	8015f1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d00a      	beq.n	8015f1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	695a      	ldr	r2, [r3, #20]
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	68b9      	ldr	r1, [r7, #8]
 8015f0c:	fb01 f303 	mul.w	r3, r1, r3
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d302      	bcc.n	8015f1a <osMessageQueueNew+0x62>
        mem = 1;
 8015f14:	2301      	movs	r3, #1
 8015f16:	61bb      	str	r3, [r7, #24]
 8015f18:	e014      	b.n	8015f44 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	689b      	ldr	r3, [r3, #8]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d110      	bne.n	8015f44 <osMessageQueueNew+0x8c>
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	68db      	ldr	r3, [r3, #12]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d10c      	bne.n	8015f44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d108      	bne.n	8015f44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	695b      	ldr	r3, [r3, #20]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d104      	bne.n	8015f44 <osMessageQueueNew+0x8c>
          mem = 0;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	61bb      	str	r3, [r7, #24]
 8015f3e:	e001      	b.n	8015f44 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8015f40:	2300      	movs	r3, #0
 8015f42:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015f44:	69bb      	ldr	r3, [r7, #24]
 8015f46:	2b01      	cmp	r3, #1
 8015f48:	d10b      	bne.n	8015f62 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	691a      	ldr	r2, [r3, #16]
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	689b      	ldr	r3, [r3, #8]
 8015f52:	2100      	movs	r1, #0
 8015f54:	9100      	str	r1, [sp, #0]
 8015f56:	68b9      	ldr	r1, [r7, #8]
 8015f58:	68f8      	ldr	r0, [r7, #12]
 8015f5a:	f000 fc9b 	bl	8016894 <xQueueGenericCreateStatic>
 8015f5e:	61f8      	str	r0, [r7, #28]
 8015f60:	e008      	b.n	8015f74 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8015f62:	69bb      	ldr	r3, [r7, #24]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d105      	bne.n	8015f74 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8015f68:	2200      	movs	r2, #0
 8015f6a:	68b9      	ldr	r1, [r7, #8]
 8015f6c:	68f8      	ldr	r0, [r7, #12]
 8015f6e:	f000 fd09 	bl	8016984 <xQueueGenericCreate>
 8015f72:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8015f74:	69fb      	ldr	r3, [r7, #28]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d00c      	beq.n	8015f94 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d003      	beq.n	8015f88 <osMessageQueueNew+0xd0>
        name = attr->name;
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	617b      	str	r3, [r7, #20]
 8015f86:	e001      	b.n	8015f8c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8015f88:	2300      	movs	r3, #0
 8015f8a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8015f8c:	6979      	ldr	r1, [r7, #20]
 8015f8e:	69f8      	ldr	r0, [r7, #28]
 8015f90:	f001 fb3a 	bl	8017608 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8015f94:	69fb      	ldr	r3, [r7, #28]
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	3720      	adds	r7, #32
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}
	...

08015fa0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b088      	sub	sp, #32
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	60f8      	str	r0, [r7, #12]
 8015fa8:	60b9      	str	r1, [r7, #8]
 8015faa:	603b      	str	r3, [r7, #0]
 8015fac:	4613      	mov	r3, r2
 8015fae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015fb8:	f3ef 8305 	mrs	r3, IPSR
 8015fbc:	617b      	str	r3, [r7, #20]
  return(result);
 8015fbe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d028      	beq.n	8016016 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015fc4:	69bb      	ldr	r3, [r7, #24]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d005      	beq.n	8015fd6 <osMessageQueuePut+0x36>
 8015fca:	68bb      	ldr	r3, [r7, #8]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d002      	beq.n	8015fd6 <osMessageQueuePut+0x36>
 8015fd0:	683b      	ldr	r3, [r7, #0]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d003      	beq.n	8015fde <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8015fd6:	f06f 0303 	mvn.w	r3, #3
 8015fda:	61fb      	str	r3, [r7, #28]
 8015fdc:	e038      	b.n	8016050 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8015fde:	2300      	movs	r3, #0
 8015fe0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8015fe2:	f107 0210 	add.w	r2, r7, #16
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	68b9      	ldr	r1, [r7, #8]
 8015fea:	69b8      	ldr	r0, [r7, #24]
 8015fec:	f000 fedc 	bl	8016da8 <xQueueGenericSendFromISR>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	2b01      	cmp	r3, #1
 8015ff4:	d003      	beq.n	8015ffe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8015ff6:	f06f 0302 	mvn.w	r3, #2
 8015ffa:	61fb      	str	r3, [r7, #28]
 8015ffc:	e028      	b.n	8016050 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8015ffe:	693b      	ldr	r3, [r7, #16]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d025      	beq.n	8016050 <osMessageQueuePut+0xb0>
 8016004:	4b15      	ldr	r3, [pc, #84]	; (801605c <osMessageQueuePut+0xbc>)
 8016006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801600a:	601a      	str	r2, [r3, #0]
 801600c:	f3bf 8f4f 	dsb	sy
 8016010:	f3bf 8f6f 	isb	sy
 8016014:	e01c      	b.n	8016050 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016016:	69bb      	ldr	r3, [r7, #24]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d002      	beq.n	8016022 <osMessageQueuePut+0x82>
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d103      	bne.n	801602a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8016022:	f06f 0303 	mvn.w	r3, #3
 8016026:	61fb      	str	r3, [r7, #28]
 8016028:	e012      	b.n	8016050 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801602a:	2300      	movs	r3, #0
 801602c:	683a      	ldr	r2, [r7, #0]
 801602e:	68b9      	ldr	r1, [r7, #8]
 8016030:	69b8      	ldr	r0, [r7, #24]
 8016032:	f000 fdbb 	bl	8016bac <xQueueGenericSend>
 8016036:	4603      	mov	r3, r0
 8016038:	2b01      	cmp	r3, #1
 801603a:	d009      	beq.n	8016050 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 801603c:	683b      	ldr	r3, [r7, #0]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d003      	beq.n	801604a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8016042:	f06f 0301 	mvn.w	r3, #1
 8016046:	61fb      	str	r3, [r7, #28]
 8016048:	e002      	b.n	8016050 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801604a:	f06f 0302 	mvn.w	r3, #2
 801604e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8016050:	69fb      	ldr	r3, [r7, #28]
}
 8016052:	4618      	mov	r0, r3
 8016054:	3720      	adds	r7, #32
 8016056:	46bd      	mov	sp, r7
 8016058:	bd80      	pop	{r7, pc}
 801605a:	bf00      	nop
 801605c:	e000ed04 	.word	0xe000ed04

08016060 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8016060:	b580      	push	{r7, lr}
 8016062:	b088      	sub	sp, #32
 8016064:	af00      	add	r7, sp, #0
 8016066:	60f8      	str	r0, [r7, #12]
 8016068:	60b9      	str	r1, [r7, #8]
 801606a:	607a      	str	r2, [r7, #4]
 801606c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8016072:	2300      	movs	r3, #0
 8016074:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016076:	f3ef 8305 	mrs	r3, IPSR
 801607a:	617b      	str	r3, [r7, #20]
  return(result);
 801607c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801607e:	2b00      	cmp	r3, #0
 8016080:	d028      	beq.n	80160d4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016082:	69bb      	ldr	r3, [r7, #24]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d005      	beq.n	8016094 <osMessageQueueGet+0x34>
 8016088:	68bb      	ldr	r3, [r7, #8]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d002      	beq.n	8016094 <osMessageQueueGet+0x34>
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d003      	beq.n	801609c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8016094:	f06f 0303 	mvn.w	r3, #3
 8016098:	61fb      	str	r3, [r7, #28]
 801609a:	e037      	b.n	801610c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801609c:	2300      	movs	r3, #0
 801609e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80160a0:	f107 0310 	add.w	r3, r7, #16
 80160a4:	461a      	mov	r2, r3
 80160a6:	68b9      	ldr	r1, [r7, #8]
 80160a8:	69b8      	ldr	r0, [r7, #24]
 80160aa:	f001 f905 	bl	80172b8 <xQueueReceiveFromISR>
 80160ae:	4603      	mov	r3, r0
 80160b0:	2b01      	cmp	r3, #1
 80160b2:	d003      	beq.n	80160bc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80160b4:	f06f 0302 	mvn.w	r3, #2
 80160b8:	61fb      	str	r3, [r7, #28]
 80160ba:	e027      	b.n	801610c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80160bc:	693b      	ldr	r3, [r7, #16]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d024      	beq.n	801610c <osMessageQueueGet+0xac>
 80160c2:	4b15      	ldr	r3, [pc, #84]	; (8016118 <osMessageQueueGet+0xb8>)
 80160c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80160c8:	601a      	str	r2, [r3, #0]
 80160ca:	f3bf 8f4f 	dsb	sy
 80160ce:	f3bf 8f6f 	isb	sy
 80160d2:	e01b      	b.n	801610c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80160d4:	69bb      	ldr	r3, [r7, #24]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d002      	beq.n	80160e0 <osMessageQueueGet+0x80>
 80160da:	68bb      	ldr	r3, [r7, #8]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d103      	bne.n	80160e8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80160e0:	f06f 0303 	mvn.w	r3, #3
 80160e4:	61fb      	str	r3, [r7, #28]
 80160e6:	e011      	b.n	801610c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80160e8:	683a      	ldr	r2, [r7, #0]
 80160ea:	68b9      	ldr	r1, [r7, #8]
 80160ec:	69b8      	ldr	r0, [r7, #24]
 80160ee:	f000 fef7 	bl	8016ee0 <xQueueReceive>
 80160f2:	4603      	mov	r3, r0
 80160f4:	2b01      	cmp	r3, #1
 80160f6:	d009      	beq.n	801610c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d003      	beq.n	8016106 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80160fe:	f06f 0301 	mvn.w	r3, #1
 8016102:	61fb      	str	r3, [r7, #28]
 8016104:	e002      	b.n	801610c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8016106:	f06f 0302 	mvn.w	r3, #2
 801610a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801610c:	69fb      	ldr	r3, [r7, #28]
}
 801610e:	4618      	mov	r0, r3
 8016110:	3720      	adds	r7, #32
 8016112:	46bd      	mov	sp, r7
 8016114:	bd80      	pop	{r7, pc}
 8016116:	bf00      	nop
 8016118:	e000ed04 	.word	0xe000ed04

0801611c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801611c:	b480      	push	{r7}
 801611e:	b085      	sub	sp, #20
 8016120:	af00      	add	r7, sp, #0
 8016122:	60f8      	str	r0, [r7, #12]
 8016124:	60b9      	str	r1, [r7, #8]
 8016126:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	4a07      	ldr	r2, [pc, #28]	; (8016148 <vApplicationGetIdleTaskMemory+0x2c>)
 801612c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801612e:	68bb      	ldr	r3, [r7, #8]
 8016130:	4a06      	ldr	r2, [pc, #24]	; (801614c <vApplicationGetIdleTaskMemory+0x30>)
 8016132:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	2280      	movs	r2, #128	; 0x80
 8016138:	601a      	str	r2, [r3, #0]
}
 801613a:	bf00      	nop
 801613c:	3714      	adds	r7, #20
 801613e:	46bd      	mov	sp, r7
 8016140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016144:	4770      	bx	lr
 8016146:	bf00      	nop
 8016148:	200049ec 	.word	0x200049ec
 801614c:	20004a58 	.word	0x20004a58

08016150 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016150:	b480      	push	{r7}
 8016152:	b085      	sub	sp, #20
 8016154:	af00      	add	r7, sp, #0
 8016156:	60f8      	str	r0, [r7, #12]
 8016158:	60b9      	str	r1, [r7, #8]
 801615a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	4a07      	ldr	r2, [pc, #28]	; (801617c <vApplicationGetTimerTaskMemory+0x2c>)
 8016160:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016162:	68bb      	ldr	r3, [r7, #8]
 8016164:	4a06      	ldr	r2, [pc, #24]	; (8016180 <vApplicationGetTimerTaskMemory+0x30>)
 8016166:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801616e:	601a      	str	r2, [r3, #0]
}
 8016170:	bf00      	nop
 8016172:	3714      	adds	r7, #20
 8016174:	46bd      	mov	sp, r7
 8016176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617a:	4770      	bx	lr
 801617c:	20004c58 	.word	0x20004c58
 8016180:	20004cc4 	.word	0x20004cc4

08016184 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8016184:	b580      	push	{r7, lr}
 8016186:	b086      	sub	sp, #24
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d10a      	bne.n	80161a8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016196:	f383 8811 	msr	BASEPRI, r3
 801619a:	f3bf 8f6f 	isb	sy
 801619e:	f3bf 8f4f 	dsb	sy
 80161a2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80161a4:	bf00      	nop
 80161a6:	e7fe      	b.n	80161a6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80161a8:	2320      	movs	r3, #32
 80161aa:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80161ac:	68bb      	ldr	r3, [r7, #8]
 80161ae:	2b20      	cmp	r3, #32
 80161b0:	d00a      	beq.n	80161c8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80161b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161b6:	f383 8811 	msr	BASEPRI, r3
 80161ba:	f3bf 8f6f 	isb	sy
 80161be:	f3bf 8f4f 	dsb	sy
 80161c2:	60fb      	str	r3, [r7, #12]
}
 80161c4:	bf00      	nop
 80161c6:	e7fe      	b.n	80161c6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80161cc:	697b      	ldr	r3, [r7, #20]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d00a      	beq.n	80161e8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80161d2:	697b      	ldr	r3, [r7, #20]
 80161d4:	2200      	movs	r2, #0
 80161d6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80161d8:	697b      	ldr	r3, [r7, #20]
 80161da:	3304      	adds	r3, #4
 80161dc:	4618      	mov	r0, r3
 80161de:	f000 fa3d 	bl	801665c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80161e2:	697b      	ldr	r3, [r7, #20]
 80161e4:	2201      	movs	r2, #1
 80161e6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80161e8:	697b      	ldr	r3, [r7, #20]
	}
 80161ea:	4618      	mov	r0, r3
 80161ec:	3718      	adds	r7, #24
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}

080161f2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80161f2:	b580      	push	{r7, lr}
 80161f4:	b082      	sub	sp, #8
 80161f6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80161f8:	2020      	movs	r0, #32
 80161fa:	f003 f99d 	bl	8019538 <pvPortMalloc>
 80161fe:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d00a      	beq.n	801621c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	2200      	movs	r2, #0
 801620a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	3304      	adds	r3, #4
 8016210:	4618      	mov	r0, r3
 8016212:	f000 fa23 	bl	801665c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2200      	movs	r2, #0
 801621a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 801621c:	687b      	ldr	r3, [r7, #4]
	}
 801621e:	4618      	mov	r0, r3
 8016220:	3708      	adds	r7, #8
 8016222:	46bd      	mov	sp, r7
 8016224:	bd80      	pop	{r7, pc}
	...

08016228 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b090      	sub	sp, #64	; 0x40
 801622c:	af00      	add	r7, sp, #0
 801622e:	60f8      	str	r0, [r7, #12]
 8016230:	60b9      	str	r1, [r7, #8]
 8016232:	607a      	str	r2, [r7, #4]
 8016234:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801623a:	2300      	movs	r3, #0
 801623c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801623e:	2300      	movs	r3, #0
 8016240:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d10a      	bne.n	801625e <xEventGroupWaitBits+0x36>
	__asm volatile
 8016248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801624c:	f383 8811 	msr	BASEPRI, r3
 8016250:	f3bf 8f6f 	isb	sy
 8016254:	f3bf 8f4f 	dsb	sy
 8016258:	623b      	str	r3, [r7, #32]
}
 801625a:	bf00      	nop
 801625c:	e7fe      	b.n	801625c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801625e:	68bb      	ldr	r3, [r7, #8]
 8016260:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016264:	2b00      	cmp	r3, #0
 8016266:	d00a      	beq.n	801627e <xEventGroupWaitBits+0x56>
	__asm volatile
 8016268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801626c:	f383 8811 	msr	BASEPRI, r3
 8016270:	f3bf 8f6f 	isb	sy
 8016274:	f3bf 8f4f 	dsb	sy
 8016278:	61fb      	str	r3, [r7, #28]
}
 801627a:	bf00      	nop
 801627c:	e7fe      	b.n	801627c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d10a      	bne.n	801629a <xEventGroupWaitBits+0x72>
	__asm volatile
 8016284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016288:	f383 8811 	msr	BASEPRI, r3
 801628c:	f3bf 8f6f 	isb	sy
 8016290:	f3bf 8f4f 	dsb	sy
 8016294:	61bb      	str	r3, [r7, #24]
}
 8016296:	bf00      	nop
 8016298:	e7fe      	b.n	8016298 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801629a:	f002 f8df 	bl	801845c <xTaskGetSchedulerState>
 801629e:	4603      	mov	r3, r0
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d102      	bne.n	80162aa <xEventGroupWaitBits+0x82>
 80162a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d101      	bne.n	80162ae <xEventGroupWaitBits+0x86>
 80162aa:	2301      	movs	r3, #1
 80162ac:	e000      	b.n	80162b0 <xEventGroupWaitBits+0x88>
 80162ae:	2300      	movs	r3, #0
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d10a      	bne.n	80162ca <xEventGroupWaitBits+0xa2>
	__asm volatile
 80162b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162b8:	f383 8811 	msr	BASEPRI, r3
 80162bc:	f3bf 8f6f 	isb	sy
 80162c0:	f3bf 8f4f 	dsb	sy
 80162c4:	617b      	str	r3, [r7, #20]
}
 80162c6:	bf00      	nop
 80162c8:	e7fe      	b.n	80162c8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80162ca:	f001 fc37 	bl	8017b3c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80162ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80162d4:	683a      	ldr	r2, [r7, #0]
 80162d6:	68b9      	ldr	r1, [r7, #8]
 80162d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162da:	f000 f988 	bl	80165ee <prvTestWaitCondition>
 80162de:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80162e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d00e      	beq.n	8016304 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80162e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80162ea:	2300      	movs	r3, #0
 80162ec:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d028      	beq.n	8016346 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80162f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162f6:	681a      	ldr	r2, [r3, #0]
 80162f8:	68bb      	ldr	r3, [r7, #8]
 80162fa:	43db      	mvns	r3, r3
 80162fc:	401a      	ands	r2, r3
 80162fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016300:	601a      	str	r2, [r3, #0]
 8016302:	e020      	b.n	8016346 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8016304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016306:	2b00      	cmp	r3, #0
 8016308:	d104      	bne.n	8016314 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801630c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801630e:	2301      	movs	r3, #1
 8016310:	633b      	str	r3, [r7, #48]	; 0x30
 8016312:	e018      	b.n	8016346 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d003      	beq.n	8016322 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801631a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801631c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016320:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d003      	beq.n	8016330 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8016328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801632a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801632e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8016330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016332:	1d18      	adds	r0, r3, #4
 8016334:	68ba      	ldr	r2, [r7, #8]
 8016336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016338:	4313      	orrs	r3, r2
 801633a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801633c:	4619      	mov	r1, r3
 801633e:	f001 fdf5 	bl	8017f2c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8016342:	2300      	movs	r3, #0
 8016344:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8016346:	f001 fc07 	bl	8017b58 <xTaskResumeAll>
 801634a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 801634c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801634e:	2b00      	cmp	r3, #0
 8016350:	d031      	beq.n	80163b6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8016352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016354:	2b00      	cmp	r3, #0
 8016356:	d107      	bne.n	8016368 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8016358:	4b19      	ldr	r3, [pc, #100]	; (80163c0 <xEventGroupWaitBits+0x198>)
 801635a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801635e:	601a      	str	r2, [r3, #0]
 8016360:	f3bf 8f4f 	dsb	sy
 8016364:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8016368:	f002 f9ee 	bl	8018748 <uxTaskResetEventItemValue>
 801636c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801636e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016374:	2b00      	cmp	r3, #0
 8016376:	d11a      	bne.n	80163ae <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8016378:	f002 ffbc 	bl	80192f4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 801637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8016382:	683a      	ldr	r2, [r7, #0]
 8016384:	68b9      	ldr	r1, [r7, #8]
 8016386:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016388:	f000 f931 	bl	80165ee <prvTestWaitCondition>
 801638c:	4603      	mov	r3, r0
 801638e:	2b00      	cmp	r3, #0
 8016390:	d009      	beq.n	80163a6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d006      	beq.n	80163a6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8016398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801639a:	681a      	ldr	r2, [r3, #0]
 801639c:	68bb      	ldr	r3, [r7, #8]
 801639e:	43db      	mvns	r3, r3
 80163a0:	401a      	ands	r2, r3
 80163a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163a4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80163a6:	2301      	movs	r3, #1
 80163a8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80163aa:	f002 ffd3 	bl	8019354 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80163ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80163b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80163b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80163b8:	4618      	mov	r0, r3
 80163ba:	3740      	adds	r7, #64	; 0x40
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd80      	pop	{r7, pc}
 80163c0:	e000ed04 	.word	0xe000ed04

080163c4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b086      	sub	sp, #24
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d10a      	bne.n	80163ee <xEventGroupClearBits+0x2a>
	__asm volatile
 80163d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163dc:	f383 8811 	msr	BASEPRI, r3
 80163e0:	f3bf 8f6f 	isb	sy
 80163e4:	f3bf 8f4f 	dsb	sy
 80163e8:	60fb      	str	r3, [r7, #12]
}
 80163ea:	bf00      	nop
 80163ec:	e7fe      	b.n	80163ec <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d00a      	beq.n	801640e <xEventGroupClearBits+0x4a>
	__asm volatile
 80163f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163fc:	f383 8811 	msr	BASEPRI, r3
 8016400:	f3bf 8f6f 	isb	sy
 8016404:	f3bf 8f4f 	dsb	sy
 8016408:	60bb      	str	r3, [r7, #8]
}
 801640a:	bf00      	nop
 801640c:	e7fe      	b.n	801640c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 801640e:	f002 ff71 	bl	80192f4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8016412:	697b      	ldr	r3, [r7, #20]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8016418:	697b      	ldr	r3, [r7, #20]
 801641a:	681a      	ldr	r2, [r3, #0]
 801641c:	683b      	ldr	r3, [r7, #0]
 801641e:	43db      	mvns	r3, r3
 8016420:	401a      	ands	r2, r3
 8016422:	697b      	ldr	r3, [r7, #20]
 8016424:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8016426:	f002 ff95 	bl	8019354 <vPortExitCritical>

	return uxReturn;
 801642a:	693b      	ldr	r3, [r7, #16]
}
 801642c:	4618      	mov	r0, r3
 801642e:	3718      	adds	r7, #24
 8016430:	46bd      	mov	sp, r7
 8016432:	bd80      	pop	{r7, pc}

08016434 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8016434:	b580      	push	{r7, lr}
 8016436:	b084      	sub	sp, #16
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
 801643c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801643e:	2300      	movs	r3, #0
 8016440:	683a      	ldr	r2, [r7, #0]
 8016442:	6879      	ldr	r1, [r7, #4]
 8016444:	4804      	ldr	r0, [pc, #16]	; (8016458 <xEventGroupClearBitsFromISR+0x24>)
 8016446:	f002 fe07 	bl	8019058 <xTimerPendFunctionCallFromISR>
 801644a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 801644c:	68fb      	ldr	r3, [r7, #12]
	}
 801644e:	4618      	mov	r0, r3
 8016450:	3710      	adds	r7, #16
 8016452:	46bd      	mov	sp, r7
 8016454:	bd80      	pop	{r7, pc}
 8016456:	bf00      	nop
 8016458:	080165d5 	.word	0x080165d5

0801645c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 801645c:	b480      	push	{r7}
 801645e:	b089      	sub	sp, #36	; 0x24
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016468:	f3ef 8211 	mrs	r2, BASEPRI
 801646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016470:	f383 8811 	msr	BASEPRI, r3
 8016474:	f3bf 8f6f 	isb	sy
 8016478:	f3bf 8f4f 	dsb	sy
 801647c:	60fa      	str	r2, [r7, #12]
 801647e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016480:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016482:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8016484:	69fb      	ldr	r3, [r7, #28]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	617b      	str	r3, [r7, #20]
 801648a:	69bb      	ldr	r3, [r7, #24]
 801648c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801648e:	693b      	ldr	r3, [r7, #16]
 8016490:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016494:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8016496:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8016498:	4618      	mov	r0, r3
 801649a:	3724      	adds	r7, #36	; 0x24
 801649c:	46bd      	mov	sp, r7
 801649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a2:	4770      	bx	lr

080164a4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b08e      	sub	sp, #56	; 0x38
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
 80164ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80164ae:	2300      	movs	r3, #0
 80164b0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80164b6:	2300      	movs	r3, #0
 80164b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d10a      	bne.n	80164d6 <xEventGroupSetBits+0x32>
	__asm volatile
 80164c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164c4:	f383 8811 	msr	BASEPRI, r3
 80164c8:	f3bf 8f6f 	isb	sy
 80164cc:	f3bf 8f4f 	dsb	sy
 80164d0:	613b      	str	r3, [r7, #16]
}
 80164d2:	bf00      	nop
 80164d4:	e7fe      	b.n	80164d4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80164d6:	683b      	ldr	r3, [r7, #0]
 80164d8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d00a      	beq.n	80164f6 <xEventGroupSetBits+0x52>
	__asm volatile
 80164e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164e4:	f383 8811 	msr	BASEPRI, r3
 80164e8:	f3bf 8f6f 	isb	sy
 80164ec:	f3bf 8f4f 	dsb	sy
 80164f0:	60fb      	str	r3, [r7, #12]
}
 80164f2:	bf00      	nop
 80164f4:	e7fe      	b.n	80164f4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80164f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164f8:	3304      	adds	r3, #4
 80164fa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80164fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fe:	3308      	adds	r3, #8
 8016500:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8016502:	f001 fb1b 	bl	8017b3c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8016506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016508:	68db      	ldr	r3, [r3, #12]
 801650a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 801650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801650e:	681a      	ldr	r2, [r3, #0]
 8016510:	683b      	ldr	r3, [r7, #0]
 8016512:	431a      	orrs	r2, r3
 8016514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016516:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8016518:	e03c      	b.n	8016594 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801651a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801651c:	685b      	ldr	r3, [r3, #4]
 801651e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8016520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8016526:	2300      	movs	r3, #0
 8016528:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801652a:	69bb      	ldr	r3, [r7, #24]
 801652c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016530:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8016532:	69bb      	ldr	r3, [r7, #24]
 8016534:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016538:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801653a:	697b      	ldr	r3, [r7, #20]
 801653c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8016540:	2b00      	cmp	r3, #0
 8016542:	d108      	bne.n	8016556 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8016544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016546:	681a      	ldr	r2, [r3, #0]
 8016548:	69bb      	ldr	r3, [r7, #24]
 801654a:	4013      	ands	r3, r2
 801654c:	2b00      	cmp	r3, #0
 801654e:	d00b      	beq.n	8016568 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8016550:	2301      	movs	r3, #1
 8016552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016554:	e008      	b.n	8016568 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8016556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016558:	681a      	ldr	r2, [r3, #0]
 801655a:	69bb      	ldr	r3, [r7, #24]
 801655c:	4013      	ands	r3, r2
 801655e:	69ba      	ldr	r2, [r7, #24]
 8016560:	429a      	cmp	r2, r3
 8016562:	d101      	bne.n	8016568 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8016564:	2301      	movs	r3, #1
 8016566:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8016568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801656a:	2b00      	cmp	r3, #0
 801656c:	d010      	beq.n	8016590 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801656e:	697b      	ldr	r3, [r7, #20]
 8016570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016574:	2b00      	cmp	r3, #0
 8016576:	d003      	beq.n	8016580 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8016578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801657a:	69bb      	ldr	r3, [r7, #24]
 801657c:	4313      	orrs	r3, r2
 801657e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8016580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016588:	4619      	mov	r1, r3
 801658a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801658c:	f001 fd9a 	bl	80180c4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8016590:	69fb      	ldr	r3, [r7, #28]
 8016592:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8016594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016596:	6a3b      	ldr	r3, [r7, #32]
 8016598:	429a      	cmp	r2, r3
 801659a:	d1be      	bne.n	801651a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801659e:	681a      	ldr	r2, [r3, #0]
 80165a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165a2:	43db      	mvns	r3, r3
 80165a4:	401a      	ands	r2, r3
 80165a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165a8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80165aa:	f001 fad5 	bl	8017b58 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80165ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165b0:	681b      	ldr	r3, [r3, #0]
}
 80165b2:	4618      	mov	r0, r3
 80165b4:	3738      	adds	r7, #56	; 0x38
 80165b6:	46bd      	mov	sp, r7
 80165b8:	bd80      	pop	{r7, pc}

080165ba <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80165ba:	b580      	push	{r7, lr}
 80165bc:	b082      	sub	sp, #8
 80165be:	af00      	add	r7, sp, #0
 80165c0:	6078      	str	r0, [r7, #4]
 80165c2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80165c4:	6839      	ldr	r1, [r7, #0]
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f7ff ff6c 	bl	80164a4 <xEventGroupSetBits>
}
 80165cc:	bf00      	nop
 80165ce:	3708      	adds	r7, #8
 80165d0:	46bd      	mov	sp, r7
 80165d2:	bd80      	pop	{r7, pc}

080165d4 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b082      	sub	sp, #8
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
 80165dc:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80165de:	6839      	ldr	r1, [r7, #0]
 80165e0:	6878      	ldr	r0, [r7, #4]
 80165e2:	f7ff feef 	bl	80163c4 <xEventGroupClearBits>
}
 80165e6:	bf00      	nop
 80165e8:	3708      	adds	r7, #8
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}

080165ee <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80165ee:	b480      	push	{r7}
 80165f0:	b087      	sub	sp, #28
 80165f2:	af00      	add	r7, sp, #0
 80165f4:	60f8      	str	r0, [r7, #12]
 80165f6:	60b9      	str	r1, [r7, #8]
 80165f8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80165fa:	2300      	movs	r3, #0
 80165fc:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d107      	bne.n	8016614 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8016604:	68fa      	ldr	r2, [r7, #12]
 8016606:	68bb      	ldr	r3, [r7, #8]
 8016608:	4013      	ands	r3, r2
 801660a:	2b00      	cmp	r3, #0
 801660c:	d00a      	beq.n	8016624 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801660e:	2301      	movs	r3, #1
 8016610:	617b      	str	r3, [r7, #20]
 8016612:	e007      	b.n	8016624 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8016614:	68fa      	ldr	r2, [r7, #12]
 8016616:	68bb      	ldr	r3, [r7, #8]
 8016618:	4013      	ands	r3, r2
 801661a:	68ba      	ldr	r2, [r7, #8]
 801661c:	429a      	cmp	r2, r3
 801661e:	d101      	bne.n	8016624 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8016620:	2301      	movs	r3, #1
 8016622:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8016624:	697b      	ldr	r3, [r7, #20]
}
 8016626:	4618      	mov	r0, r3
 8016628:	371c      	adds	r7, #28
 801662a:	46bd      	mov	sp, r7
 801662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016630:	4770      	bx	lr
	...

08016634 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8016634:	b580      	push	{r7, lr}
 8016636:	b086      	sub	sp, #24
 8016638:	af00      	add	r7, sp, #0
 801663a:	60f8      	str	r0, [r7, #12]
 801663c:	60b9      	str	r1, [r7, #8]
 801663e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	68ba      	ldr	r2, [r7, #8]
 8016644:	68f9      	ldr	r1, [r7, #12]
 8016646:	4804      	ldr	r0, [pc, #16]	; (8016658 <xEventGroupSetBitsFromISR+0x24>)
 8016648:	f002 fd06 	bl	8019058 <xTimerPendFunctionCallFromISR>
 801664c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801664e:	697b      	ldr	r3, [r7, #20]
	}
 8016650:	4618      	mov	r0, r3
 8016652:	3718      	adds	r7, #24
 8016654:	46bd      	mov	sp, r7
 8016656:	bd80      	pop	{r7, pc}
 8016658:	080165bb 	.word	0x080165bb

0801665c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801665c:	b480      	push	{r7}
 801665e:	b083      	sub	sp, #12
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	f103 0208 	add.w	r2, r3, #8
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	f04f 32ff 	mov.w	r2, #4294967295
 8016674:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	f103 0208 	add.w	r2, r3, #8
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	f103 0208 	add.w	r2, r3, #8
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	2200      	movs	r2, #0
 801668e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016690:	bf00      	nop
 8016692:	370c      	adds	r7, #12
 8016694:	46bd      	mov	sp, r7
 8016696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669a:	4770      	bx	lr

0801669c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801669c:	b480      	push	{r7}
 801669e:	b083      	sub	sp, #12
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	2200      	movs	r2, #0
 80166a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80166aa:	bf00      	nop
 80166ac:	370c      	adds	r7, #12
 80166ae:	46bd      	mov	sp, r7
 80166b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b4:	4770      	bx	lr

080166b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80166b6:	b480      	push	{r7}
 80166b8:	b085      	sub	sp, #20
 80166ba:	af00      	add	r7, sp, #0
 80166bc:	6078      	str	r0, [r7, #4]
 80166be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	685b      	ldr	r3, [r3, #4]
 80166c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	68fa      	ldr	r2, [r7, #12]
 80166ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	689a      	ldr	r2, [r3, #8]
 80166d0:	683b      	ldr	r3, [r7, #0]
 80166d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	689b      	ldr	r3, [r3, #8]
 80166d8:	683a      	ldr	r2, [r7, #0]
 80166da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	683a      	ldr	r2, [r7, #0]
 80166e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80166e2:	683b      	ldr	r3, [r7, #0]
 80166e4:	687a      	ldr	r2, [r7, #4]
 80166e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	1c5a      	adds	r2, r3, #1
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	601a      	str	r2, [r3, #0]
}
 80166f2:	bf00      	nop
 80166f4:	3714      	adds	r7, #20
 80166f6:	46bd      	mov	sp, r7
 80166f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fc:	4770      	bx	lr

080166fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80166fe:	b480      	push	{r7}
 8016700:	b085      	sub	sp, #20
 8016702:	af00      	add	r7, sp, #0
 8016704:	6078      	str	r0, [r7, #4]
 8016706:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016708:	683b      	ldr	r3, [r7, #0]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801670e:	68bb      	ldr	r3, [r7, #8]
 8016710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016714:	d103      	bne.n	801671e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	691b      	ldr	r3, [r3, #16]
 801671a:	60fb      	str	r3, [r7, #12]
 801671c:	e00c      	b.n	8016738 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	3308      	adds	r3, #8
 8016722:	60fb      	str	r3, [r7, #12]
 8016724:	e002      	b.n	801672c <vListInsert+0x2e>
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	685b      	ldr	r3, [r3, #4]
 801672a:	60fb      	str	r3, [r7, #12]
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	685b      	ldr	r3, [r3, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	68ba      	ldr	r2, [r7, #8]
 8016734:	429a      	cmp	r2, r3
 8016736:	d2f6      	bcs.n	8016726 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	685a      	ldr	r2, [r3, #4]
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	685b      	ldr	r3, [r3, #4]
 8016744:	683a      	ldr	r2, [r7, #0]
 8016746:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	68fa      	ldr	r2, [r7, #12]
 801674c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	683a      	ldr	r2, [r7, #0]
 8016752:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016754:	683b      	ldr	r3, [r7, #0]
 8016756:	687a      	ldr	r2, [r7, #4]
 8016758:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	1c5a      	adds	r2, r3, #1
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	601a      	str	r2, [r3, #0]
}
 8016764:	bf00      	nop
 8016766:	3714      	adds	r7, #20
 8016768:	46bd      	mov	sp, r7
 801676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801676e:	4770      	bx	lr

08016770 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016770:	b480      	push	{r7}
 8016772:	b085      	sub	sp, #20
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	691b      	ldr	r3, [r3, #16]
 801677c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	685b      	ldr	r3, [r3, #4]
 8016782:	687a      	ldr	r2, [r7, #4]
 8016784:	6892      	ldr	r2, [r2, #8]
 8016786:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	689b      	ldr	r3, [r3, #8]
 801678c:	687a      	ldr	r2, [r7, #4]
 801678e:	6852      	ldr	r2, [r2, #4]
 8016790:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	685b      	ldr	r3, [r3, #4]
 8016796:	687a      	ldr	r2, [r7, #4]
 8016798:	429a      	cmp	r2, r3
 801679a:	d103      	bne.n	80167a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	689a      	ldr	r2, [r3, #8]
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2200      	movs	r2, #0
 80167a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	1e5a      	subs	r2, r3, #1
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	681b      	ldr	r3, [r3, #0]
}
 80167b8:	4618      	mov	r0, r3
 80167ba:	3714      	adds	r7, #20
 80167bc:	46bd      	mov	sp, r7
 80167be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c2:	4770      	bx	lr

080167c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b084      	sub	sp, #16
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
 80167cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d10a      	bne.n	80167ee <xQueueGenericReset+0x2a>
	__asm volatile
 80167d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167dc:	f383 8811 	msr	BASEPRI, r3
 80167e0:	f3bf 8f6f 	isb	sy
 80167e4:	f3bf 8f4f 	dsb	sy
 80167e8:	60bb      	str	r3, [r7, #8]
}
 80167ea:	bf00      	nop
 80167ec:	e7fe      	b.n	80167ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80167ee:	f002 fd81 	bl	80192f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	681a      	ldr	r2, [r3, #0]
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80167fa:	68f9      	ldr	r1, [r7, #12]
 80167fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80167fe:	fb01 f303 	mul.w	r3, r1, r3
 8016802:	441a      	add	r2, r3
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	2200      	movs	r2, #0
 801680c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	681a      	ldr	r2, [r3, #0]
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	681a      	ldr	r2, [r3, #0]
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801681e:	3b01      	subs	r3, #1
 8016820:	68f9      	ldr	r1, [r7, #12]
 8016822:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016824:	fb01 f303 	mul.w	r3, r1, r3
 8016828:	441a      	add	r2, r3
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	22ff      	movs	r2, #255	; 0xff
 8016832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	22ff      	movs	r2, #255	; 0xff
 801683a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801683e:	683b      	ldr	r3, [r7, #0]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d114      	bne.n	801686e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	691b      	ldr	r3, [r3, #16]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d01a      	beq.n	8016882 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	3310      	adds	r3, #16
 8016850:	4618      	mov	r0, r3
 8016852:	f001 fbd3 	bl	8017ffc <xTaskRemoveFromEventList>
 8016856:	4603      	mov	r3, r0
 8016858:	2b00      	cmp	r3, #0
 801685a:	d012      	beq.n	8016882 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801685c:	4b0c      	ldr	r3, [pc, #48]	; (8016890 <xQueueGenericReset+0xcc>)
 801685e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016862:	601a      	str	r2, [r3, #0]
 8016864:	f3bf 8f4f 	dsb	sy
 8016868:	f3bf 8f6f 	isb	sy
 801686c:	e009      	b.n	8016882 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	3310      	adds	r3, #16
 8016872:	4618      	mov	r0, r3
 8016874:	f7ff fef2 	bl	801665c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	3324      	adds	r3, #36	; 0x24
 801687c:	4618      	mov	r0, r3
 801687e:	f7ff feed 	bl	801665c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016882:	f002 fd67 	bl	8019354 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016886:	2301      	movs	r3, #1
}
 8016888:	4618      	mov	r0, r3
 801688a:	3710      	adds	r7, #16
 801688c:	46bd      	mov	sp, r7
 801688e:	bd80      	pop	{r7, pc}
 8016890:	e000ed04 	.word	0xe000ed04

08016894 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016894:	b580      	push	{r7, lr}
 8016896:	b08e      	sub	sp, #56	; 0x38
 8016898:	af02      	add	r7, sp, #8
 801689a:	60f8      	str	r0, [r7, #12]
 801689c:	60b9      	str	r1, [r7, #8]
 801689e:	607a      	str	r2, [r7, #4]
 80168a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d10a      	bne.n	80168be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80168a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168ac:	f383 8811 	msr	BASEPRI, r3
 80168b0:	f3bf 8f6f 	isb	sy
 80168b4:	f3bf 8f4f 	dsb	sy
 80168b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80168ba:	bf00      	nop
 80168bc:	e7fe      	b.n	80168bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d10a      	bne.n	80168da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80168c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c8:	f383 8811 	msr	BASEPRI, r3
 80168cc:	f3bf 8f6f 	isb	sy
 80168d0:	f3bf 8f4f 	dsb	sy
 80168d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80168d6:	bf00      	nop
 80168d8:	e7fe      	b.n	80168d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d002      	beq.n	80168e6 <xQueueGenericCreateStatic+0x52>
 80168e0:	68bb      	ldr	r3, [r7, #8]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d001      	beq.n	80168ea <xQueueGenericCreateStatic+0x56>
 80168e6:	2301      	movs	r3, #1
 80168e8:	e000      	b.n	80168ec <xQueueGenericCreateStatic+0x58>
 80168ea:	2300      	movs	r3, #0
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d10a      	bne.n	8016906 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80168f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168f4:	f383 8811 	msr	BASEPRI, r3
 80168f8:	f3bf 8f6f 	isb	sy
 80168fc:	f3bf 8f4f 	dsb	sy
 8016900:	623b      	str	r3, [r7, #32]
}
 8016902:	bf00      	nop
 8016904:	e7fe      	b.n	8016904 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d102      	bne.n	8016912 <xQueueGenericCreateStatic+0x7e>
 801690c:	68bb      	ldr	r3, [r7, #8]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d101      	bne.n	8016916 <xQueueGenericCreateStatic+0x82>
 8016912:	2301      	movs	r3, #1
 8016914:	e000      	b.n	8016918 <xQueueGenericCreateStatic+0x84>
 8016916:	2300      	movs	r3, #0
 8016918:	2b00      	cmp	r3, #0
 801691a:	d10a      	bne.n	8016932 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016920:	f383 8811 	msr	BASEPRI, r3
 8016924:	f3bf 8f6f 	isb	sy
 8016928:	f3bf 8f4f 	dsb	sy
 801692c:	61fb      	str	r3, [r7, #28]
}
 801692e:	bf00      	nop
 8016930:	e7fe      	b.n	8016930 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016932:	2350      	movs	r3, #80	; 0x50
 8016934:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016936:	697b      	ldr	r3, [r7, #20]
 8016938:	2b50      	cmp	r3, #80	; 0x50
 801693a:	d00a      	beq.n	8016952 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016940:	f383 8811 	msr	BASEPRI, r3
 8016944:	f3bf 8f6f 	isb	sy
 8016948:	f3bf 8f4f 	dsb	sy
 801694c:	61bb      	str	r3, [r7, #24]
}
 801694e:	bf00      	nop
 8016950:	e7fe      	b.n	8016950 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016952:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016954:	683b      	ldr	r3, [r7, #0]
 8016956:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801695a:	2b00      	cmp	r3, #0
 801695c:	d00d      	beq.n	801697a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016960:	2201      	movs	r2, #1
 8016962:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016966:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801696c:	9300      	str	r3, [sp, #0]
 801696e:	4613      	mov	r3, r2
 8016970:	687a      	ldr	r2, [r7, #4]
 8016972:	68b9      	ldr	r1, [r7, #8]
 8016974:	68f8      	ldr	r0, [r7, #12]
 8016976:	f000 f83f 	bl	80169f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801697c:	4618      	mov	r0, r3
 801697e:	3730      	adds	r7, #48	; 0x30
 8016980:	46bd      	mov	sp, r7
 8016982:	bd80      	pop	{r7, pc}

08016984 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016984:	b580      	push	{r7, lr}
 8016986:	b08a      	sub	sp, #40	; 0x28
 8016988:	af02      	add	r7, sp, #8
 801698a:	60f8      	str	r0, [r7, #12]
 801698c:	60b9      	str	r1, [r7, #8]
 801698e:	4613      	mov	r3, r2
 8016990:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d10a      	bne.n	80169ae <xQueueGenericCreate+0x2a>
	__asm volatile
 8016998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801699c:	f383 8811 	msr	BASEPRI, r3
 80169a0:	f3bf 8f6f 	isb	sy
 80169a4:	f3bf 8f4f 	dsb	sy
 80169a8:	613b      	str	r3, [r7, #16]
}
 80169aa:	bf00      	nop
 80169ac:	e7fe      	b.n	80169ac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	68ba      	ldr	r2, [r7, #8]
 80169b2:	fb02 f303 	mul.w	r3, r2, r3
 80169b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80169b8:	69fb      	ldr	r3, [r7, #28]
 80169ba:	3350      	adds	r3, #80	; 0x50
 80169bc:	4618      	mov	r0, r3
 80169be:	f002 fdbb 	bl	8019538 <pvPortMalloc>
 80169c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80169c4:	69bb      	ldr	r3, [r7, #24]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d011      	beq.n	80169ee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80169ca:	69bb      	ldr	r3, [r7, #24]
 80169cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80169ce:	697b      	ldr	r3, [r7, #20]
 80169d0:	3350      	adds	r3, #80	; 0x50
 80169d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80169d4:	69bb      	ldr	r3, [r7, #24]
 80169d6:	2200      	movs	r2, #0
 80169d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80169dc:	79fa      	ldrb	r2, [r7, #7]
 80169de:	69bb      	ldr	r3, [r7, #24]
 80169e0:	9300      	str	r3, [sp, #0]
 80169e2:	4613      	mov	r3, r2
 80169e4:	697a      	ldr	r2, [r7, #20]
 80169e6:	68b9      	ldr	r1, [r7, #8]
 80169e8:	68f8      	ldr	r0, [r7, #12]
 80169ea:	f000 f805 	bl	80169f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80169ee:	69bb      	ldr	r3, [r7, #24]
	}
 80169f0:	4618      	mov	r0, r3
 80169f2:	3720      	adds	r7, #32
 80169f4:	46bd      	mov	sp, r7
 80169f6:	bd80      	pop	{r7, pc}

080169f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b084      	sub	sp, #16
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	60f8      	str	r0, [r7, #12]
 8016a00:	60b9      	str	r1, [r7, #8]
 8016a02:	607a      	str	r2, [r7, #4]
 8016a04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016a06:	68bb      	ldr	r3, [r7, #8]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d103      	bne.n	8016a14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016a0c:	69bb      	ldr	r3, [r7, #24]
 8016a0e:	69ba      	ldr	r2, [r7, #24]
 8016a10:	601a      	str	r2, [r3, #0]
 8016a12:	e002      	b.n	8016a1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016a14:	69bb      	ldr	r3, [r7, #24]
 8016a16:	687a      	ldr	r2, [r7, #4]
 8016a18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016a1a:	69bb      	ldr	r3, [r7, #24]
 8016a1c:	68fa      	ldr	r2, [r7, #12]
 8016a1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016a20:	69bb      	ldr	r3, [r7, #24]
 8016a22:	68ba      	ldr	r2, [r7, #8]
 8016a24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016a26:	2101      	movs	r1, #1
 8016a28:	69b8      	ldr	r0, [r7, #24]
 8016a2a:	f7ff fecb 	bl	80167c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016a2e:	69bb      	ldr	r3, [r7, #24]
 8016a30:	78fa      	ldrb	r2, [r7, #3]
 8016a32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016a36:	bf00      	nop
 8016a38:	3710      	adds	r7, #16
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	bd80      	pop	{r7, pc}

08016a3e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016a3e:	b580      	push	{r7, lr}
 8016a40:	b082      	sub	sp, #8
 8016a42:	af00      	add	r7, sp, #0
 8016a44:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d00e      	beq.n	8016a6a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	2200      	movs	r2, #0
 8016a50:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	2200      	movs	r2, #0
 8016a56:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016a5e:	2300      	movs	r3, #0
 8016a60:	2200      	movs	r2, #0
 8016a62:	2100      	movs	r1, #0
 8016a64:	6878      	ldr	r0, [r7, #4]
 8016a66:	f000 f8a1 	bl	8016bac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8016a6a:	bf00      	nop
 8016a6c:	3708      	adds	r7, #8
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bd80      	pop	{r7, pc}

08016a72 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8016a72:	b580      	push	{r7, lr}
 8016a74:	b086      	sub	sp, #24
 8016a76:	af00      	add	r7, sp, #0
 8016a78:	4603      	mov	r3, r0
 8016a7a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016a7c:	2301      	movs	r3, #1
 8016a7e:	617b      	str	r3, [r7, #20]
 8016a80:	2300      	movs	r3, #0
 8016a82:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8016a84:	79fb      	ldrb	r3, [r7, #7]
 8016a86:	461a      	mov	r2, r3
 8016a88:	6939      	ldr	r1, [r7, #16]
 8016a8a:	6978      	ldr	r0, [r7, #20]
 8016a8c:	f7ff ff7a 	bl	8016984 <xQueueGenericCreate>
 8016a90:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016a92:	68f8      	ldr	r0, [r7, #12]
 8016a94:	f7ff ffd3 	bl	8016a3e <prvInitialiseMutex>

		return xNewQueue;
 8016a98:	68fb      	ldr	r3, [r7, #12]
	}
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	3718      	adds	r7, #24
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}

08016aa2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8016aa2:	b580      	push	{r7, lr}
 8016aa4:	b088      	sub	sp, #32
 8016aa6:	af02      	add	r7, sp, #8
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	6039      	str	r1, [r7, #0]
 8016aac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016aae:	2301      	movs	r3, #1
 8016ab0:	617b      	str	r3, [r7, #20]
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016ab6:	79fb      	ldrb	r3, [r7, #7]
 8016ab8:	9300      	str	r3, [sp, #0]
 8016aba:	683b      	ldr	r3, [r7, #0]
 8016abc:	2200      	movs	r2, #0
 8016abe:	6939      	ldr	r1, [r7, #16]
 8016ac0:	6978      	ldr	r0, [r7, #20]
 8016ac2:	f7ff fee7 	bl	8016894 <xQueueGenericCreateStatic>
 8016ac6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016ac8:	68f8      	ldr	r0, [r7, #12]
 8016aca:	f7ff ffb8 	bl	8016a3e <prvInitialiseMutex>

		return xNewQueue;
 8016ace:	68fb      	ldr	r3, [r7, #12]
	}
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	3718      	adds	r7, #24
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	bd80      	pop	{r7, pc}

08016ad8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8016ad8:	b590      	push	{r4, r7, lr}
 8016ada:	b087      	sub	sp, #28
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016ae4:	693b      	ldr	r3, [r7, #16]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d10a      	bne.n	8016b00 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8016aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aee:	f383 8811 	msr	BASEPRI, r3
 8016af2:	f3bf 8f6f 	isb	sy
 8016af6:	f3bf 8f4f 	dsb	sy
 8016afa:	60fb      	str	r3, [r7, #12]
}
 8016afc:	bf00      	nop
 8016afe:	e7fe      	b.n	8016afe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016b00:	693b      	ldr	r3, [r7, #16]
 8016b02:	689c      	ldr	r4, [r3, #8]
 8016b04:	f001 fc9a 	bl	801843c <xTaskGetCurrentTaskHandle>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	429c      	cmp	r4, r3
 8016b0c:	d111      	bne.n	8016b32 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8016b0e:	693b      	ldr	r3, [r7, #16]
 8016b10:	68db      	ldr	r3, [r3, #12]
 8016b12:	1e5a      	subs	r2, r3, #1
 8016b14:	693b      	ldr	r3, [r7, #16]
 8016b16:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8016b18:	693b      	ldr	r3, [r7, #16]
 8016b1a:	68db      	ldr	r3, [r3, #12]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d105      	bne.n	8016b2c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8016b20:	2300      	movs	r3, #0
 8016b22:	2200      	movs	r2, #0
 8016b24:	2100      	movs	r1, #0
 8016b26:	6938      	ldr	r0, [r7, #16]
 8016b28:	f000 f840 	bl	8016bac <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8016b2c:	2301      	movs	r3, #1
 8016b2e:	617b      	str	r3, [r7, #20]
 8016b30:	e001      	b.n	8016b36 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8016b32:	2300      	movs	r3, #0
 8016b34:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8016b36:	697b      	ldr	r3, [r7, #20]
	}
 8016b38:	4618      	mov	r0, r3
 8016b3a:	371c      	adds	r7, #28
 8016b3c:	46bd      	mov	sp, r7
 8016b3e:	bd90      	pop	{r4, r7, pc}

08016b40 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8016b40:	b590      	push	{r4, r7, lr}
 8016b42:	b087      	sub	sp, #28
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
 8016b48:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016b4e:	693b      	ldr	r3, [r7, #16]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d10a      	bne.n	8016b6a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8016b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b58:	f383 8811 	msr	BASEPRI, r3
 8016b5c:	f3bf 8f6f 	isb	sy
 8016b60:	f3bf 8f4f 	dsb	sy
 8016b64:	60fb      	str	r3, [r7, #12]
}
 8016b66:	bf00      	nop
 8016b68:	e7fe      	b.n	8016b68 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016b6a:	693b      	ldr	r3, [r7, #16]
 8016b6c:	689c      	ldr	r4, [r3, #8]
 8016b6e:	f001 fc65 	bl	801843c <xTaskGetCurrentTaskHandle>
 8016b72:	4603      	mov	r3, r0
 8016b74:	429c      	cmp	r4, r3
 8016b76:	d107      	bne.n	8016b88 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016b78:	693b      	ldr	r3, [r7, #16]
 8016b7a:	68db      	ldr	r3, [r3, #12]
 8016b7c:	1c5a      	adds	r2, r3, #1
 8016b7e:	693b      	ldr	r3, [r7, #16]
 8016b80:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8016b82:	2301      	movs	r3, #1
 8016b84:	617b      	str	r3, [r7, #20]
 8016b86:	e00c      	b.n	8016ba2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8016b88:	6839      	ldr	r1, [r7, #0]
 8016b8a:	6938      	ldr	r0, [r7, #16]
 8016b8c:	f000 fa88 	bl	80170a0 <xQueueSemaphoreTake>
 8016b90:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8016b92:	697b      	ldr	r3, [r7, #20]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d004      	beq.n	8016ba2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016b98:	693b      	ldr	r3, [r7, #16]
 8016b9a:	68db      	ldr	r3, [r3, #12]
 8016b9c:	1c5a      	adds	r2, r3, #1
 8016b9e:	693b      	ldr	r3, [r7, #16]
 8016ba0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8016ba2:	697b      	ldr	r3, [r7, #20]
	}
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	371c      	adds	r7, #28
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd90      	pop	{r4, r7, pc}

08016bac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b08e      	sub	sp, #56	; 0x38
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	60f8      	str	r0, [r7, #12]
 8016bb4:	60b9      	str	r1, [r7, #8]
 8016bb6:	607a      	str	r2, [r7, #4]
 8016bb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016bba:	2300      	movs	r3, #0
 8016bbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d10a      	bne.n	8016bde <xQueueGenericSend+0x32>
	__asm volatile
 8016bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bcc:	f383 8811 	msr	BASEPRI, r3
 8016bd0:	f3bf 8f6f 	isb	sy
 8016bd4:	f3bf 8f4f 	dsb	sy
 8016bd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016bda:	bf00      	nop
 8016bdc:	e7fe      	b.n	8016bdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016bde:	68bb      	ldr	r3, [r7, #8]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d103      	bne.n	8016bec <xQueueGenericSend+0x40>
 8016be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d101      	bne.n	8016bf0 <xQueueGenericSend+0x44>
 8016bec:	2301      	movs	r3, #1
 8016bee:	e000      	b.n	8016bf2 <xQueueGenericSend+0x46>
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d10a      	bne.n	8016c0c <xQueueGenericSend+0x60>
	__asm volatile
 8016bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bfa:	f383 8811 	msr	BASEPRI, r3
 8016bfe:	f3bf 8f6f 	isb	sy
 8016c02:	f3bf 8f4f 	dsb	sy
 8016c06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016c08:	bf00      	nop
 8016c0a:	e7fe      	b.n	8016c0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016c0c:	683b      	ldr	r3, [r7, #0]
 8016c0e:	2b02      	cmp	r3, #2
 8016c10:	d103      	bne.n	8016c1a <xQueueGenericSend+0x6e>
 8016c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c16:	2b01      	cmp	r3, #1
 8016c18:	d101      	bne.n	8016c1e <xQueueGenericSend+0x72>
 8016c1a:	2301      	movs	r3, #1
 8016c1c:	e000      	b.n	8016c20 <xQueueGenericSend+0x74>
 8016c1e:	2300      	movs	r3, #0
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d10a      	bne.n	8016c3a <xQueueGenericSend+0x8e>
	__asm volatile
 8016c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c28:	f383 8811 	msr	BASEPRI, r3
 8016c2c:	f3bf 8f6f 	isb	sy
 8016c30:	f3bf 8f4f 	dsb	sy
 8016c34:	623b      	str	r3, [r7, #32]
}
 8016c36:	bf00      	nop
 8016c38:	e7fe      	b.n	8016c38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016c3a:	f001 fc0f 	bl	801845c <xTaskGetSchedulerState>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d102      	bne.n	8016c4a <xQueueGenericSend+0x9e>
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d101      	bne.n	8016c4e <xQueueGenericSend+0xa2>
 8016c4a:	2301      	movs	r3, #1
 8016c4c:	e000      	b.n	8016c50 <xQueueGenericSend+0xa4>
 8016c4e:	2300      	movs	r3, #0
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d10a      	bne.n	8016c6a <xQueueGenericSend+0xbe>
	__asm volatile
 8016c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c58:	f383 8811 	msr	BASEPRI, r3
 8016c5c:	f3bf 8f6f 	isb	sy
 8016c60:	f3bf 8f4f 	dsb	sy
 8016c64:	61fb      	str	r3, [r7, #28]
}
 8016c66:	bf00      	nop
 8016c68:	e7fe      	b.n	8016c68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016c6a:	f002 fb43 	bl	80192f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c76:	429a      	cmp	r2, r3
 8016c78:	d302      	bcc.n	8016c80 <xQueueGenericSend+0xd4>
 8016c7a:	683b      	ldr	r3, [r7, #0]
 8016c7c:	2b02      	cmp	r3, #2
 8016c7e:	d129      	bne.n	8016cd4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016c80:	683a      	ldr	r2, [r7, #0]
 8016c82:	68b9      	ldr	r1, [r7, #8]
 8016c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016c86:	f000 fbaf 	bl	80173e8 <prvCopyDataToQueue>
 8016c8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d010      	beq.n	8016cb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c96:	3324      	adds	r3, #36	; 0x24
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f001 f9af 	bl	8017ffc <xTaskRemoveFromEventList>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d013      	beq.n	8016ccc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016ca4:	4b3f      	ldr	r3, [pc, #252]	; (8016da4 <xQueueGenericSend+0x1f8>)
 8016ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016caa:	601a      	str	r2, [r3, #0]
 8016cac:	f3bf 8f4f 	dsb	sy
 8016cb0:	f3bf 8f6f 	isb	sy
 8016cb4:	e00a      	b.n	8016ccc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d007      	beq.n	8016ccc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016cbc:	4b39      	ldr	r3, [pc, #228]	; (8016da4 <xQueueGenericSend+0x1f8>)
 8016cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016cc2:	601a      	str	r2, [r3, #0]
 8016cc4:	f3bf 8f4f 	dsb	sy
 8016cc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016ccc:	f002 fb42 	bl	8019354 <vPortExitCritical>
				return pdPASS;
 8016cd0:	2301      	movs	r3, #1
 8016cd2:	e063      	b.n	8016d9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d103      	bne.n	8016ce2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016cda:	f002 fb3b 	bl	8019354 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016cde:	2300      	movs	r3, #0
 8016ce0:	e05c      	b.n	8016d9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d106      	bne.n	8016cf6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016ce8:	f107 0314 	add.w	r3, r7, #20
 8016cec:	4618      	mov	r0, r3
 8016cee:	f001 fa4b 	bl	8018188 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016cf2:	2301      	movs	r3, #1
 8016cf4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016cf6:	f002 fb2d 	bl	8019354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016cfa:	f000 ff1f 	bl	8017b3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016cfe:	f002 faf9 	bl	80192f4 <vPortEnterCritical>
 8016d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016d08:	b25b      	sxtb	r3, r3
 8016d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d0e:	d103      	bne.n	8016d18 <xQueueGenericSend+0x16c>
 8016d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d12:	2200      	movs	r2, #0
 8016d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016d1e:	b25b      	sxtb	r3, r3
 8016d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d24:	d103      	bne.n	8016d2e <xQueueGenericSend+0x182>
 8016d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d28:	2200      	movs	r2, #0
 8016d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016d2e:	f002 fb11 	bl	8019354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016d32:	1d3a      	adds	r2, r7, #4
 8016d34:	f107 0314 	add.w	r3, r7, #20
 8016d38:	4611      	mov	r1, r2
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f001 fa3a 	bl	80181b4 <xTaskCheckForTimeOut>
 8016d40:	4603      	mov	r3, r0
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d124      	bne.n	8016d90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d48:	f000 fc46 	bl	80175d8 <prvIsQueueFull>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d018      	beq.n	8016d84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d54:	3310      	adds	r3, #16
 8016d56:	687a      	ldr	r2, [r7, #4]
 8016d58:	4611      	mov	r1, r2
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f001 f8c2 	bl	8017ee4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d62:	f000 fbd1 	bl	8017508 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016d66:	f000 fef7 	bl	8017b58 <xTaskResumeAll>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	f47f af7c 	bne.w	8016c6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016d72:	4b0c      	ldr	r3, [pc, #48]	; (8016da4 <xQueueGenericSend+0x1f8>)
 8016d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d78:	601a      	str	r2, [r3, #0]
 8016d7a:	f3bf 8f4f 	dsb	sy
 8016d7e:	f3bf 8f6f 	isb	sy
 8016d82:	e772      	b.n	8016c6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d86:	f000 fbbf 	bl	8017508 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016d8a:	f000 fee5 	bl	8017b58 <xTaskResumeAll>
 8016d8e:	e76c      	b.n	8016c6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d92:	f000 fbb9 	bl	8017508 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016d96:	f000 fedf 	bl	8017b58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016d9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	3738      	adds	r7, #56	; 0x38
 8016da0:	46bd      	mov	sp, r7
 8016da2:	bd80      	pop	{r7, pc}
 8016da4:	e000ed04 	.word	0xe000ed04

08016da8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b090      	sub	sp, #64	; 0x40
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	60f8      	str	r0, [r7, #12]
 8016db0:	60b9      	str	r1, [r7, #8]
 8016db2:	607a      	str	r2, [r7, #4]
 8016db4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d10a      	bne.n	8016dd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8016dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dc4:	f383 8811 	msr	BASEPRI, r3
 8016dc8:	f3bf 8f6f 	isb	sy
 8016dcc:	f3bf 8f4f 	dsb	sy
 8016dd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016dd2:	bf00      	nop
 8016dd4:	e7fe      	b.n	8016dd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016dd6:	68bb      	ldr	r3, [r7, #8]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d103      	bne.n	8016de4 <xQueueGenericSendFromISR+0x3c>
 8016ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d101      	bne.n	8016de8 <xQueueGenericSendFromISR+0x40>
 8016de4:	2301      	movs	r3, #1
 8016de6:	e000      	b.n	8016dea <xQueueGenericSendFromISR+0x42>
 8016de8:	2300      	movs	r3, #0
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d10a      	bne.n	8016e04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016df2:	f383 8811 	msr	BASEPRI, r3
 8016df6:	f3bf 8f6f 	isb	sy
 8016dfa:	f3bf 8f4f 	dsb	sy
 8016dfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016e00:	bf00      	nop
 8016e02:	e7fe      	b.n	8016e02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016e04:	683b      	ldr	r3, [r7, #0]
 8016e06:	2b02      	cmp	r3, #2
 8016e08:	d103      	bne.n	8016e12 <xQueueGenericSendFromISR+0x6a>
 8016e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e0e:	2b01      	cmp	r3, #1
 8016e10:	d101      	bne.n	8016e16 <xQueueGenericSendFromISR+0x6e>
 8016e12:	2301      	movs	r3, #1
 8016e14:	e000      	b.n	8016e18 <xQueueGenericSendFromISR+0x70>
 8016e16:	2300      	movs	r3, #0
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d10a      	bne.n	8016e32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e20:	f383 8811 	msr	BASEPRI, r3
 8016e24:	f3bf 8f6f 	isb	sy
 8016e28:	f3bf 8f4f 	dsb	sy
 8016e2c:	623b      	str	r3, [r7, #32]
}
 8016e2e:	bf00      	nop
 8016e30:	e7fe      	b.n	8016e30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016e32:	f002 fb41 	bl	80194b8 <vPortValidateInterruptPriority>
	__asm volatile
 8016e36:	f3ef 8211 	mrs	r2, BASEPRI
 8016e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e3e:	f383 8811 	msr	BASEPRI, r3
 8016e42:	f3bf 8f6f 	isb	sy
 8016e46:	f3bf 8f4f 	dsb	sy
 8016e4a:	61fa      	str	r2, [r7, #28]
 8016e4c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8016e4e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016e50:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e5a:	429a      	cmp	r2, r3
 8016e5c:	d302      	bcc.n	8016e64 <xQueueGenericSendFromISR+0xbc>
 8016e5e:	683b      	ldr	r3, [r7, #0]
 8016e60:	2b02      	cmp	r3, #2
 8016e62:	d12f      	bne.n	8016ec4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e72:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016e74:	683a      	ldr	r2, [r7, #0]
 8016e76:	68b9      	ldr	r1, [r7, #8]
 8016e78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016e7a:	f000 fab5 	bl	80173e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016e7e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8016e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e86:	d112      	bne.n	8016eae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d016      	beq.n	8016ebe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e92:	3324      	adds	r3, #36	; 0x24
 8016e94:	4618      	mov	r0, r3
 8016e96:	f001 f8b1 	bl	8017ffc <xTaskRemoveFromEventList>
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d00e      	beq.n	8016ebe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d00b      	beq.n	8016ebe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	2201      	movs	r2, #1
 8016eaa:	601a      	str	r2, [r3, #0]
 8016eac:	e007      	b.n	8016ebe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016eae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016eb2:	3301      	adds	r3, #1
 8016eb4:	b2db      	uxtb	r3, r3
 8016eb6:	b25a      	sxtb	r2, r3
 8016eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016ebe:	2301      	movs	r3, #1
 8016ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8016ec2:	e001      	b.n	8016ec8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016eca:	617b      	str	r3, [r7, #20]
	__asm volatile
 8016ecc:	697b      	ldr	r3, [r7, #20]
 8016ece:	f383 8811 	msr	BASEPRI, r3
}
 8016ed2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	3740      	adds	r7, #64	; 0x40
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd80      	pop	{r7, pc}
	...

08016ee0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b08c      	sub	sp, #48	; 0x30
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	60f8      	str	r0, [r7, #12]
 8016ee8:	60b9      	str	r1, [r7, #8]
 8016eea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016eec:	2300      	movs	r3, #0
 8016eee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d10a      	bne.n	8016f10 <xQueueReceive+0x30>
	__asm volatile
 8016efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016efe:	f383 8811 	msr	BASEPRI, r3
 8016f02:	f3bf 8f6f 	isb	sy
 8016f06:	f3bf 8f4f 	dsb	sy
 8016f0a:	623b      	str	r3, [r7, #32]
}
 8016f0c:	bf00      	nop
 8016f0e:	e7fe      	b.n	8016f0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d103      	bne.n	8016f1e <xQueueReceive+0x3e>
 8016f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d101      	bne.n	8016f22 <xQueueReceive+0x42>
 8016f1e:	2301      	movs	r3, #1
 8016f20:	e000      	b.n	8016f24 <xQueueReceive+0x44>
 8016f22:	2300      	movs	r3, #0
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d10a      	bne.n	8016f3e <xQueueReceive+0x5e>
	__asm volatile
 8016f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f2c:	f383 8811 	msr	BASEPRI, r3
 8016f30:	f3bf 8f6f 	isb	sy
 8016f34:	f3bf 8f4f 	dsb	sy
 8016f38:	61fb      	str	r3, [r7, #28]
}
 8016f3a:	bf00      	nop
 8016f3c:	e7fe      	b.n	8016f3c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016f3e:	f001 fa8d 	bl	801845c <xTaskGetSchedulerState>
 8016f42:	4603      	mov	r3, r0
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d102      	bne.n	8016f4e <xQueueReceive+0x6e>
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d101      	bne.n	8016f52 <xQueueReceive+0x72>
 8016f4e:	2301      	movs	r3, #1
 8016f50:	e000      	b.n	8016f54 <xQueueReceive+0x74>
 8016f52:	2300      	movs	r3, #0
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d10a      	bne.n	8016f6e <xQueueReceive+0x8e>
	__asm volatile
 8016f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f5c:	f383 8811 	msr	BASEPRI, r3
 8016f60:	f3bf 8f6f 	isb	sy
 8016f64:	f3bf 8f4f 	dsb	sy
 8016f68:	61bb      	str	r3, [r7, #24]
}
 8016f6a:	bf00      	nop
 8016f6c:	e7fe      	b.n	8016f6c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016f6e:	f002 f9c1 	bl	80192f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d01f      	beq.n	8016fbe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016f7e:	68b9      	ldr	r1, [r7, #8]
 8016f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016f82:	f000 fa9b 	bl	80174bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f88:	1e5a      	subs	r2, r3, #1
 8016f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f90:	691b      	ldr	r3, [r3, #16]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d00f      	beq.n	8016fb6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f98:	3310      	adds	r3, #16
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f001 f82e 	bl	8017ffc <xTaskRemoveFromEventList>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d007      	beq.n	8016fb6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016fa6:	4b3d      	ldr	r3, [pc, #244]	; (801709c <xQueueReceive+0x1bc>)
 8016fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016fac:	601a      	str	r2, [r3, #0]
 8016fae:	f3bf 8f4f 	dsb	sy
 8016fb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016fb6:	f002 f9cd 	bl	8019354 <vPortExitCritical>
				return pdPASS;
 8016fba:	2301      	movs	r3, #1
 8016fbc:	e069      	b.n	8017092 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d103      	bne.n	8016fcc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016fc4:	f002 f9c6 	bl	8019354 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016fc8:	2300      	movs	r3, #0
 8016fca:	e062      	b.n	8017092 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d106      	bne.n	8016fe0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016fd2:	f107 0310 	add.w	r3, r7, #16
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	f001 f8d6 	bl	8018188 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016fdc:	2301      	movs	r3, #1
 8016fde:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016fe0:	f002 f9b8 	bl	8019354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016fe4:	f000 fdaa 	bl	8017b3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016fe8:	f002 f984 	bl	80192f4 <vPortEnterCritical>
 8016fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016ff2:	b25b      	sxtb	r3, r3
 8016ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ff8:	d103      	bne.n	8017002 <xQueueReceive+0x122>
 8016ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017008:	b25b      	sxtb	r3, r3
 801700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801700e:	d103      	bne.n	8017018 <xQueueReceive+0x138>
 8017010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017012:	2200      	movs	r2, #0
 8017014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017018:	f002 f99c 	bl	8019354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801701c:	1d3a      	adds	r2, r7, #4
 801701e:	f107 0310 	add.w	r3, r7, #16
 8017022:	4611      	mov	r1, r2
 8017024:	4618      	mov	r0, r3
 8017026:	f001 f8c5 	bl	80181b4 <xTaskCheckForTimeOut>
 801702a:	4603      	mov	r3, r0
 801702c:	2b00      	cmp	r3, #0
 801702e:	d123      	bne.n	8017078 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017032:	f000 fabb 	bl	80175ac <prvIsQueueEmpty>
 8017036:	4603      	mov	r3, r0
 8017038:	2b00      	cmp	r3, #0
 801703a:	d017      	beq.n	801706c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801703e:	3324      	adds	r3, #36	; 0x24
 8017040:	687a      	ldr	r2, [r7, #4]
 8017042:	4611      	mov	r1, r2
 8017044:	4618      	mov	r0, r3
 8017046:	f000 ff4d 	bl	8017ee4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801704a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801704c:	f000 fa5c 	bl	8017508 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017050:	f000 fd82 	bl	8017b58 <xTaskResumeAll>
 8017054:	4603      	mov	r3, r0
 8017056:	2b00      	cmp	r3, #0
 8017058:	d189      	bne.n	8016f6e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801705a:	4b10      	ldr	r3, [pc, #64]	; (801709c <xQueueReceive+0x1bc>)
 801705c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017060:	601a      	str	r2, [r3, #0]
 8017062:	f3bf 8f4f 	dsb	sy
 8017066:	f3bf 8f6f 	isb	sy
 801706a:	e780      	b.n	8016f6e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801706c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801706e:	f000 fa4b 	bl	8017508 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017072:	f000 fd71 	bl	8017b58 <xTaskResumeAll>
 8017076:	e77a      	b.n	8016f6e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801707a:	f000 fa45 	bl	8017508 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801707e:	f000 fd6b 	bl	8017b58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017084:	f000 fa92 	bl	80175ac <prvIsQueueEmpty>
 8017088:	4603      	mov	r3, r0
 801708a:	2b00      	cmp	r3, #0
 801708c:	f43f af6f 	beq.w	8016f6e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017090:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017092:	4618      	mov	r0, r3
 8017094:	3730      	adds	r7, #48	; 0x30
 8017096:	46bd      	mov	sp, r7
 8017098:	bd80      	pop	{r7, pc}
 801709a:	bf00      	nop
 801709c:	e000ed04 	.word	0xe000ed04

080170a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80170a0:	b580      	push	{r7, lr}
 80170a2:	b08e      	sub	sp, #56	; 0x38
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	6078      	str	r0, [r7, #4]
 80170a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80170aa:	2300      	movs	r3, #0
 80170ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80170b2:	2300      	movs	r3, #0
 80170b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80170b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d10a      	bne.n	80170d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80170bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170c0:	f383 8811 	msr	BASEPRI, r3
 80170c4:	f3bf 8f6f 	isb	sy
 80170c8:	f3bf 8f4f 	dsb	sy
 80170cc:	623b      	str	r3, [r7, #32]
}
 80170ce:	bf00      	nop
 80170d0:	e7fe      	b.n	80170d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80170d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d00a      	beq.n	80170f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80170da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170de:	f383 8811 	msr	BASEPRI, r3
 80170e2:	f3bf 8f6f 	isb	sy
 80170e6:	f3bf 8f4f 	dsb	sy
 80170ea:	61fb      	str	r3, [r7, #28]
}
 80170ec:	bf00      	nop
 80170ee:	e7fe      	b.n	80170ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80170f0:	f001 f9b4 	bl	801845c <xTaskGetSchedulerState>
 80170f4:	4603      	mov	r3, r0
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d102      	bne.n	8017100 <xQueueSemaphoreTake+0x60>
 80170fa:	683b      	ldr	r3, [r7, #0]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d101      	bne.n	8017104 <xQueueSemaphoreTake+0x64>
 8017100:	2301      	movs	r3, #1
 8017102:	e000      	b.n	8017106 <xQueueSemaphoreTake+0x66>
 8017104:	2300      	movs	r3, #0
 8017106:	2b00      	cmp	r3, #0
 8017108:	d10a      	bne.n	8017120 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801710e:	f383 8811 	msr	BASEPRI, r3
 8017112:	f3bf 8f6f 	isb	sy
 8017116:	f3bf 8f4f 	dsb	sy
 801711a:	61bb      	str	r3, [r7, #24]
}
 801711c:	bf00      	nop
 801711e:	e7fe      	b.n	801711e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017120:	f002 f8e8 	bl	80192f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017128:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801712c:	2b00      	cmp	r3, #0
 801712e:	d024      	beq.n	801717a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017132:	1e5a      	subs	r2, r3, #1
 8017134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017136:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	2b00      	cmp	r3, #0
 801713e:	d104      	bne.n	801714a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017140:	f001 fb1a 	bl	8018778 <pvTaskIncrementMutexHeldCount>
 8017144:	4602      	mov	r2, r0
 8017146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017148:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801714a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801714c:	691b      	ldr	r3, [r3, #16]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d00f      	beq.n	8017172 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017154:	3310      	adds	r3, #16
 8017156:	4618      	mov	r0, r3
 8017158:	f000 ff50 	bl	8017ffc <xTaskRemoveFromEventList>
 801715c:	4603      	mov	r3, r0
 801715e:	2b00      	cmp	r3, #0
 8017160:	d007      	beq.n	8017172 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017162:	4b54      	ldr	r3, [pc, #336]	; (80172b4 <xQueueSemaphoreTake+0x214>)
 8017164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017168:	601a      	str	r2, [r3, #0]
 801716a:	f3bf 8f4f 	dsb	sy
 801716e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017172:	f002 f8ef 	bl	8019354 <vPortExitCritical>
				return pdPASS;
 8017176:	2301      	movs	r3, #1
 8017178:	e097      	b.n	80172aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801717a:	683b      	ldr	r3, [r7, #0]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d111      	bne.n	80171a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017182:	2b00      	cmp	r3, #0
 8017184:	d00a      	beq.n	801719c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8017186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801718a:	f383 8811 	msr	BASEPRI, r3
 801718e:	f3bf 8f6f 	isb	sy
 8017192:	f3bf 8f4f 	dsb	sy
 8017196:	617b      	str	r3, [r7, #20]
}
 8017198:	bf00      	nop
 801719a:	e7fe      	b.n	801719a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801719c:	f002 f8da 	bl	8019354 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80171a0:	2300      	movs	r3, #0
 80171a2:	e082      	b.n	80172aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80171a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d106      	bne.n	80171b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80171aa:	f107 030c 	add.w	r3, r7, #12
 80171ae:	4618      	mov	r0, r3
 80171b0:	f000 ffea 	bl	8018188 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80171b4:	2301      	movs	r3, #1
 80171b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80171b8:	f002 f8cc 	bl	8019354 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80171bc:	f000 fcbe 	bl	8017b3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80171c0:	f002 f898 	bl	80192f4 <vPortEnterCritical>
 80171c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80171ca:	b25b      	sxtb	r3, r3
 80171cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171d0:	d103      	bne.n	80171da <xQueueSemaphoreTake+0x13a>
 80171d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171d4:	2200      	movs	r2, #0
 80171d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80171da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80171e0:	b25b      	sxtb	r3, r3
 80171e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171e6:	d103      	bne.n	80171f0 <xQueueSemaphoreTake+0x150>
 80171e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ea:	2200      	movs	r2, #0
 80171ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80171f0:	f002 f8b0 	bl	8019354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80171f4:	463a      	mov	r2, r7
 80171f6:	f107 030c 	add.w	r3, r7, #12
 80171fa:	4611      	mov	r1, r2
 80171fc:	4618      	mov	r0, r3
 80171fe:	f000 ffd9 	bl	80181b4 <xTaskCheckForTimeOut>
 8017202:	4603      	mov	r3, r0
 8017204:	2b00      	cmp	r3, #0
 8017206:	d132      	bne.n	801726e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801720a:	f000 f9cf 	bl	80175ac <prvIsQueueEmpty>
 801720e:	4603      	mov	r3, r0
 8017210:	2b00      	cmp	r3, #0
 8017212:	d026      	beq.n	8017262 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d109      	bne.n	8017230 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801721c:	f002 f86a 	bl	80192f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017222:	689b      	ldr	r3, [r3, #8]
 8017224:	4618      	mov	r0, r3
 8017226:	f001 f937 	bl	8018498 <xTaskPriorityInherit>
 801722a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801722c:	f002 f892 	bl	8019354 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017232:	3324      	adds	r3, #36	; 0x24
 8017234:	683a      	ldr	r2, [r7, #0]
 8017236:	4611      	mov	r1, r2
 8017238:	4618      	mov	r0, r3
 801723a:	f000 fe53 	bl	8017ee4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801723e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017240:	f000 f962 	bl	8017508 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017244:	f000 fc88 	bl	8017b58 <xTaskResumeAll>
 8017248:	4603      	mov	r3, r0
 801724a:	2b00      	cmp	r3, #0
 801724c:	f47f af68 	bne.w	8017120 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8017250:	4b18      	ldr	r3, [pc, #96]	; (80172b4 <xQueueSemaphoreTake+0x214>)
 8017252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017256:	601a      	str	r2, [r3, #0]
 8017258:	f3bf 8f4f 	dsb	sy
 801725c:	f3bf 8f6f 	isb	sy
 8017260:	e75e      	b.n	8017120 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8017262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017264:	f000 f950 	bl	8017508 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017268:	f000 fc76 	bl	8017b58 <xTaskResumeAll>
 801726c:	e758      	b.n	8017120 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801726e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017270:	f000 f94a 	bl	8017508 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017274:	f000 fc70 	bl	8017b58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801727a:	f000 f997 	bl	80175ac <prvIsQueueEmpty>
 801727e:	4603      	mov	r3, r0
 8017280:	2b00      	cmp	r3, #0
 8017282:	f43f af4d 	beq.w	8017120 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8017286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017288:	2b00      	cmp	r3, #0
 801728a:	d00d      	beq.n	80172a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801728c:	f002 f832 	bl	80192f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017292:	f000 f891 	bl	80173b8 <prvGetDisinheritPriorityAfterTimeout>
 8017296:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801729a:	689b      	ldr	r3, [r3, #8]
 801729c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801729e:	4618      	mov	r0, r3
 80172a0:	f001 f9d0 	bl	8018644 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80172a4:	f002 f856 	bl	8019354 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80172a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80172aa:	4618      	mov	r0, r3
 80172ac:	3738      	adds	r7, #56	; 0x38
 80172ae:	46bd      	mov	sp, r7
 80172b0:	bd80      	pop	{r7, pc}
 80172b2:	bf00      	nop
 80172b4:	e000ed04 	.word	0xe000ed04

080172b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b08e      	sub	sp, #56	; 0x38
 80172bc:	af00      	add	r7, sp, #0
 80172be:	60f8      	str	r0, [r7, #12]
 80172c0:	60b9      	str	r1, [r7, #8]
 80172c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80172c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d10a      	bne.n	80172e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80172ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172d2:	f383 8811 	msr	BASEPRI, r3
 80172d6:	f3bf 8f6f 	isb	sy
 80172da:	f3bf 8f4f 	dsb	sy
 80172de:	623b      	str	r3, [r7, #32]
}
 80172e0:	bf00      	nop
 80172e2:	e7fe      	b.n	80172e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80172e4:	68bb      	ldr	r3, [r7, #8]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d103      	bne.n	80172f2 <xQueueReceiveFromISR+0x3a>
 80172ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d101      	bne.n	80172f6 <xQueueReceiveFromISR+0x3e>
 80172f2:	2301      	movs	r3, #1
 80172f4:	e000      	b.n	80172f8 <xQueueReceiveFromISR+0x40>
 80172f6:	2300      	movs	r3, #0
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d10a      	bne.n	8017312 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80172fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017300:	f383 8811 	msr	BASEPRI, r3
 8017304:	f3bf 8f6f 	isb	sy
 8017308:	f3bf 8f4f 	dsb	sy
 801730c:	61fb      	str	r3, [r7, #28]
}
 801730e:	bf00      	nop
 8017310:	e7fe      	b.n	8017310 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017312:	f002 f8d1 	bl	80194b8 <vPortValidateInterruptPriority>
	__asm volatile
 8017316:	f3ef 8211 	mrs	r2, BASEPRI
 801731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801731e:	f383 8811 	msr	BASEPRI, r3
 8017322:	f3bf 8f6f 	isb	sy
 8017326:	f3bf 8f4f 	dsb	sy
 801732a:	61ba      	str	r2, [r7, #24]
 801732c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801732e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017330:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017336:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801733a:	2b00      	cmp	r3, #0
 801733c:	d02f      	beq.n	801739e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017348:	68b9      	ldr	r1, [r7, #8]
 801734a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801734c:	f000 f8b6 	bl	80174bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017352:	1e5a      	subs	r2, r3, #1
 8017354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017356:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017358:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801735c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017360:	d112      	bne.n	8017388 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017364:	691b      	ldr	r3, [r3, #16]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d016      	beq.n	8017398 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801736c:	3310      	adds	r3, #16
 801736e:	4618      	mov	r0, r3
 8017370:	f000 fe44 	bl	8017ffc <xTaskRemoveFromEventList>
 8017374:	4603      	mov	r3, r0
 8017376:	2b00      	cmp	r3, #0
 8017378:	d00e      	beq.n	8017398 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d00b      	beq.n	8017398 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	2201      	movs	r2, #1
 8017384:	601a      	str	r2, [r3, #0]
 8017386:	e007      	b.n	8017398 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801738c:	3301      	adds	r3, #1
 801738e:	b2db      	uxtb	r3, r3
 8017390:	b25a      	sxtb	r2, r3
 8017392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017398:	2301      	movs	r3, #1
 801739a:	637b      	str	r3, [r7, #52]	; 0x34
 801739c:	e001      	b.n	80173a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801739e:	2300      	movs	r3, #0
 80173a0:	637b      	str	r3, [r7, #52]	; 0x34
 80173a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80173a6:	693b      	ldr	r3, [r7, #16]
 80173a8:	f383 8811 	msr	BASEPRI, r3
}
 80173ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80173ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80173b0:	4618      	mov	r0, r3
 80173b2:	3738      	adds	r7, #56	; 0x38
 80173b4:	46bd      	mov	sp, r7
 80173b6:	bd80      	pop	{r7, pc}

080173b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80173b8:	b480      	push	{r7}
 80173ba:	b085      	sub	sp, #20
 80173bc:	af00      	add	r7, sp, #0
 80173be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d006      	beq.n	80173d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80173d2:	60fb      	str	r3, [r7, #12]
 80173d4:	e001      	b.n	80173da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80173d6:	2300      	movs	r3, #0
 80173d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80173da:	68fb      	ldr	r3, [r7, #12]
	}
 80173dc:	4618      	mov	r0, r3
 80173de:	3714      	adds	r7, #20
 80173e0:	46bd      	mov	sp, r7
 80173e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e6:	4770      	bx	lr

080173e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b086      	sub	sp, #24
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	60f8      	str	r0, [r7, #12]
 80173f0:	60b9      	str	r1, [r7, #8]
 80173f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80173f4:	2300      	movs	r3, #0
 80173f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017402:	2b00      	cmp	r3, #0
 8017404:	d10d      	bne.n	8017422 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d14d      	bne.n	80174aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	689b      	ldr	r3, [r3, #8]
 8017412:	4618      	mov	r0, r3
 8017414:	f001 f8a8 	bl	8018568 <xTaskPriorityDisinherit>
 8017418:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	2200      	movs	r2, #0
 801741e:	609a      	str	r2, [r3, #8]
 8017420:	e043      	b.n	80174aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	2b00      	cmp	r3, #0
 8017426:	d119      	bne.n	801745c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	6858      	ldr	r0, [r3, #4]
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017430:	461a      	mov	r2, r3
 8017432:	68b9      	ldr	r1, [r7, #8]
 8017434:	f002 fa96 	bl	8019964 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	685a      	ldr	r2, [r3, #4]
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017440:	441a      	add	r2, r3
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	685a      	ldr	r2, [r3, #4]
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	689b      	ldr	r3, [r3, #8]
 801744e:	429a      	cmp	r2, r3
 8017450:	d32b      	bcc.n	80174aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	681a      	ldr	r2, [r3, #0]
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	605a      	str	r2, [r3, #4]
 801745a:	e026      	b.n	80174aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	68d8      	ldr	r0, [r3, #12]
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017464:	461a      	mov	r2, r3
 8017466:	68b9      	ldr	r1, [r7, #8]
 8017468:	f002 fa7c 	bl	8019964 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	68da      	ldr	r2, [r3, #12]
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017474:	425b      	negs	r3, r3
 8017476:	441a      	add	r2, r3
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	68da      	ldr	r2, [r3, #12]
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	429a      	cmp	r2, r3
 8017486:	d207      	bcs.n	8017498 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	689a      	ldr	r2, [r3, #8]
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017490:	425b      	negs	r3, r3
 8017492:	441a      	add	r2, r3
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	2b02      	cmp	r3, #2
 801749c:	d105      	bne.n	80174aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801749e:	693b      	ldr	r3, [r7, #16]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d002      	beq.n	80174aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80174a4:	693b      	ldr	r3, [r7, #16]
 80174a6:	3b01      	subs	r3, #1
 80174a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80174aa:	693b      	ldr	r3, [r7, #16]
 80174ac:	1c5a      	adds	r2, r3, #1
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80174b2:	697b      	ldr	r3, [r7, #20]
}
 80174b4:	4618      	mov	r0, r3
 80174b6:	3718      	adds	r7, #24
 80174b8:	46bd      	mov	sp, r7
 80174ba:	bd80      	pop	{r7, pc}

080174bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b082      	sub	sp, #8
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
 80174c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d018      	beq.n	8017500 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	68da      	ldr	r2, [r3, #12]
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174d6:	441a      	add	r2, r3
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	68da      	ldr	r2, [r3, #12]
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	689b      	ldr	r3, [r3, #8]
 80174e4:	429a      	cmp	r2, r3
 80174e6:	d303      	bcc.n	80174f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	681a      	ldr	r2, [r3, #0]
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	68d9      	ldr	r1, [r3, #12]
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174f8:	461a      	mov	r2, r3
 80174fa:	6838      	ldr	r0, [r7, #0]
 80174fc:	f002 fa32 	bl	8019964 <memcpy>
	}
}
 8017500:	bf00      	nop
 8017502:	3708      	adds	r7, #8
 8017504:	46bd      	mov	sp, r7
 8017506:	bd80      	pop	{r7, pc}

08017508 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b084      	sub	sp, #16
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017510:	f001 fef0 	bl	80192f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801751a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801751c:	e011      	b.n	8017542 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017522:	2b00      	cmp	r3, #0
 8017524:	d012      	beq.n	801754c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	3324      	adds	r3, #36	; 0x24
 801752a:	4618      	mov	r0, r3
 801752c:	f000 fd66 	bl	8017ffc <xTaskRemoveFromEventList>
 8017530:	4603      	mov	r3, r0
 8017532:	2b00      	cmp	r3, #0
 8017534:	d001      	beq.n	801753a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017536:	f000 fe9f 	bl	8018278 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801753a:	7bfb      	ldrb	r3, [r7, #15]
 801753c:	3b01      	subs	r3, #1
 801753e:	b2db      	uxtb	r3, r3
 8017540:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017546:	2b00      	cmp	r3, #0
 8017548:	dce9      	bgt.n	801751e <prvUnlockQueue+0x16>
 801754a:	e000      	b.n	801754e <prvUnlockQueue+0x46>
					break;
 801754c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	22ff      	movs	r2, #255	; 0xff
 8017552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017556:	f001 fefd 	bl	8019354 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801755a:	f001 fecb 	bl	80192f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017564:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017566:	e011      	b.n	801758c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	691b      	ldr	r3, [r3, #16]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d012      	beq.n	8017596 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	3310      	adds	r3, #16
 8017574:	4618      	mov	r0, r3
 8017576:	f000 fd41 	bl	8017ffc <xTaskRemoveFromEventList>
 801757a:	4603      	mov	r3, r0
 801757c:	2b00      	cmp	r3, #0
 801757e:	d001      	beq.n	8017584 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017580:	f000 fe7a 	bl	8018278 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017584:	7bbb      	ldrb	r3, [r7, #14]
 8017586:	3b01      	subs	r3, #1
 8017588:	b2db      	uxtb	r3, r3
 801758a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801758c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017590:	2b00      	cmp	r3, #0
 8017592:	dce9      	bgt.n	8017568 <prvUnlockQueue+0x60>
 8017594:	e000      	b.n	8017598 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017596:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	22ff      	movs	r2, #255	; 0xff
 801759c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80175a0:	f001 fed8 	bl	8019354 <vPortExitCritical>
}
 80175a4:	bf00      	nop
 80175a6:	3710      	adds	r7, #16
 80175a8:	46bd      	mov	sp, r7
 80175aa:	bd80      	pop	{r7, pc}

080175ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b084      	sub	sp, #16
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80175b4:	f001 fe9e 	bl	80192f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d102      	bne.n	80175c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80175c0:	2301      	movs	r3, #1
 80175c2:	60fb      	str	r3, [r7, #12]
 80175c4:	e001      	b.n	80175ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80175c6:	2300      	movs	r3, #0
 80175c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80175ca:	f001 fec3 	bl	8019354 <vPortExitCritical>

	return xReturn;
 80175ce:	68fb      	ldr	r3, [r7, #12]
}
 80175d0:	4618      	mov	r0, r3
 80175d2:	3710      	adds	r7, #16
 80175d4:	46bd      	mov	sp, r7
 80175d6:	bd80      	pop	{r7, pc}

080175d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	b084      	sub	sp, #16
 80175dc:	af00      	add	r7, sp, #0
 80175de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80175e0:	f001 fe88 	bl	80192f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175ec:	429a      	cmp	r2, r3
 80175ee:	d102      	bne.n	80175f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80175f0:	2301      	movs	r3, #1
 80175f2:	60fb      	str	r3, [r7, #12]
 80175f4:	e001      	b.n	80175fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80175f6:	2300      	movs	r3, #0
 80175f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80175fa:	f001 feab 	bl	8019354 <vPortExitCritical>

	return xReturn;
 80175fe:	68fb      	ldr	r3, [r7, #12]
}
 8017600:	4618      	mov	r0, r3
 8017602:	3710      	adds	r7, #16
 8017604:	46bd      	mov	sp, r7
 8017606:	bd80      	pop	{r7, pc}

08017608 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017608:	b480      	push	{r7}
 801760a:	b085      	sub	sp, #20
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
 8017610:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017612:	2300      	movs	r3, #0
 8017614:	60fb      	str	r3, [r7, #12]
 8017616:	e014      	b.n	8017642 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017618:	4a0f      	ldr	r2, [pc, #60]	; (8017658 <vQueueAddToRegistry+0x50>)
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d10b      	bne.n	801763c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017624:	490c      	ldr	r1, [pc, #48]	; (8017658 <vQueueAddToRegistry+0x50>)
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	683a      	ldr	r2, [r7, #0]
 801762a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801762e:	4a0a      	ldr	r2, [pc, #40]	; (8017658 <vQueueAddToRegistry+0x50>)
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	00db      	lsls	r3, r3, #3
 8017634:	4413      	add	r3, r2
 8017636:	687a      	ldr	r2, [r7, #4]
 8017638:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801763a:	e006      	b.n	801764a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	3301      	adds	r3, #1
 8017640:	60fb      	str	r3, [r7, #12]
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	2b07      	cmp	r3, #7
 8017646:	d9e7      	bls.n	8017618 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017648:	bf00      	nop
 801764a:	bf00      	nop
 801764c:	3714      	adds	r7, #20
 801764e:	46bd      	mov	sp, r7
 8017650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017654:	4770      	bx	lr
 8017656:	bf00      	nop
 8017658:	20005cc4 	.word	0x20005cc4

0801765c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801765c:	b580      	push	{r7, lr}
 801765e:	b086      	sub	sp, #24
 8017660:	af00      	add	r7, sp, #0
 8017662:	60f8      	str	r0, [r7, #12]
 8017664:	60b9      	str	r1, [r7, #8]
 8017666:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801766c:	f001 fe42 	bl	80192f4 <vPortEnterCritical>
 8017670:	697b      	ldr	r3, [r7, #20]
 8017672:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017676:	b25b      	sxtb	r3, r3
 8017678:	f1b3 3fff 	cmp.w	r3, #4294967295
 801767c:	d103      	bne.n	8017686 <vQueueWaitForMessageRestricted+0x2a>
 801767e:	697b      	ldr	r3, [r7, #20]
 8017680:	2200      	movs	r2, #0
 8017682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017686:	697b      	ldr	r3, [r7, #20]
 8017688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801768c:	b25b      	sxtb	r3, r3
 801768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017692:	d103      	bne.n	801769c <vQueueWaitForMessageRestricted+0x40>
 8017694:	697b      	ldr	r3, [r7, #20]
 8017696:	2200      	movs	r2, #0
 8017698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801769c:	f001 fe5a 	bl	8019354 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80176a0:	697b      	ldr	r3, [r7, #20]
 80176a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d106      	bne.n	80176b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80176a8:	697b      	ldr	r3, [r7, #20]
 80176aa:	3324      	adds	r3, #36	; 0x24
 80176ac:	687a      	ldr	r2, [r7, #4]
 80176ae:	68b9      	ldr	r1, [r7, #8]
 80176b0:	4618      	mov	r0, r3
 80176b2:	f000 fc77 	bl	8017fa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80176b6:	6978      	ldr	r0, [r7, #20]
 80176b8:	f7ff ff26 	bl	8017508 <prvUnlockQueue>
	}
 80176bc:	bf00      	nop
 80176be:	3718      	adds	r7, #24
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}

080176c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b08e      	sub	sp, #56	; 0x38
 80176c8:	af04      	add	r7, sp, #16
 80176ca:	60f8      	str	r0, [r7, #12]
 80176cc:	60b9      	str	r1, [r7, #8]
 80176ce:	607a      	str	r2, [r7, #4]
 80176d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80176d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d10a      	bne.n	80176ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80176d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176dc:	f383 8811 	msr	BASEPRI, r3
 80176e0:	f3bf 8f6f 	isb	sy
 80176e4:	f3bf 8f4f 	dsb	sy
 80176e8:	623b      	str	r3, [r7, #32]
}
 80176ea:	bf00      	nop
 80176ec:	e7fe      	b.n	80176ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80176ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d10a      	bne.n	801770a <xTaskCreateStatic+0x46>
	__asm volatile
 80176f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f8:	f383 8811 	msr	BASEPRI, r3
 80176fc:	f3bf 8f6f 	isb	sy
 8017700:	f3bf 8f4f 	dsb	sy
 8017704:	61fb      	str	r3, [r7, #28]
}
 8017706:	bf00      	nop
 8017708:	e7fe      	b.n	8017708 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801770a:	236c      	movs	r3, #108	; 0x6c
 801770c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801770e:	693b      	ldr	r3, [r7, #16]
 8017710:	2b6c      	cmp	r3, #108	; 0x6c
 8017712:	d00a      	beq.n	801772a <xTaskCreateStatic+0x66>
	__asm volatile
 8017714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017718:	f383 8811 	msr	BASEPRI, r3
 801771c:	f3bf 8f6f 	isb	sy
 8017720:	f3bf 8f4f 	dsb	sy
 8017724:	61bb      	str	r3, [r7, #24]
}
 8017726:	bf00      	nop
 8017728:	e7fe      	b.n	8017728 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801772a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801772c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801772e:	2b00      	cmp	r3, #0
 8017730:	d01e      	beq.n	8017770 <xTaskCreateStatic+0xac>
 8017732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017734:	2b00      	cmp	r3, #0
 8017736:	d01b      	beq.n	8017770 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801773a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801773e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017740:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017744:	2202      	movs	r2, #2
 8017746:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801774a:	2300      	movs	r3, #0
 801774c:	9303      	str	r3, [sp, #12]
 801774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017750:	9302      	str	r3, [sp, #8]
 8017752:	f107 0314 	add.w	r3, r7, #20
 8017756:	9301      	str	r3, [sp, #4]
 8017758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801775a:	9300      	str	r3, [sp, #0]
 801775c:	683b      	ldr	r3, [r7, #0]
 801775e:	687a      	ldr	r2, [r7, #4]
 8017760:	68b9      	ldr	r1, [r7, #8]
 8017762:	68f8      	ldr	r0, [r7, #12]
 8017764:	f000 f850 	bl	8017808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801776a:	f000 f8dd 	bl	8017928 <prvAddNewTaskToReadyList>
 801776e:	e001      	b.n	8017774 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017770:	2300      	movs	r3, #0
 8017772:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017774:	697b      	ldr	r3, [r7, #20]
	}
 8017776:	4618      	mov	r0, r3
 8017778:	3728      	adds	r7, #40	; 0x28
 801777a:	46bd      	mov	sp, r7
 801777c:	bd80      	pop	{r7, pc}

0801777e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801777e:	b580      	push	{r7, lr}
 8017780:	b08c      	sub	sp, #48	; 0x30
 8017782:	af04      	add	r7, sp, #16
 8017784:	60f8      	str	r0, [r7, #12]
 8017786:	60b9      	str	r1, [r7, #8]
 8017788:	603b      	str	r3, [r7, #0]
 801778a:	4613      	mov	r3, r2
 801778c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801778e:	88fb      	ldrh	r3, [r7, #6]
 8017790:	009b      	lsls	r3, r3, #2
 8017792:	4618      	mov	r0, r3
 8017794:	f001 fed0 	bl	8019538 <pvPortMalloc>
 8017798:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801779a:	697b      	ldr	r3, [r7, #20]
 801779c:	2b00      	cmp	r3, #0
 801779e:	d00e      	beq.n	80177be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80177a0:	206c      	movs	r0, #108	; 0x6c
 80177a2:	f001 fec9 	bl	8019538 <pvPortMalloc>
 80177a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80177a8:	69fb      	ldr	r3, [r7, #28]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d003      	beq.n	80177b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80177ae:	69fb      	ldr	r3, [r7, #28]
 80177b0:	697a      	ldr	r2, [r7, #20]
 80177b2:	631a      	str	r2, [r3, #48]	; 0x30
 80177b4:	e005      	b.n	80177c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80177b6:	6978      	ldr	r0, [r7, #20]
 80177b8:	f001 ff8a 	bl	80196d0 <vPortFree>
 80177bc:	e001      	b.n	80177c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80177be:	2300      	movs	r3, #0
 80177c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80177c2:	69fb      	ldr	r3, [r7, #28]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d017      	beq.n	80177f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80177c8:	69fb      	ldr	r3, [r7, #28]
 80177ca:	2200      	movs	r2, #0
 80177cc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80177d0:	88fa      	ldrh	r2, [r7, #6]
 80177d2:	2300      	movs	r3, #0
 80177d4:	9303      	str	r3, [sp, #12]
 80177d6:	69fb      	ldr	r3, [r7, #28]
 80177d8:	9302      	str	r3, [sp, #8]
 80177da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177dc:	9301      	str	r3, [sp, #4]
 80177de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177e0:	9300      	str	r3, [sp, #0]
 80177e2:	683b      	ldr	r3, [r7, #0]
 80177e4:	68b9      	ldr	r1, [r7, #8]
 80177e6:	68f8      	ldr	r0, [r7, #12]
 80177e8:	f000 f80e 	bl	8017808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80177ec:	69f8      	ldr	r0, [r7, #28]
 80177ee:	f000 f89b 	bl	8017928 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80177f2:	2301      	movs	r3, #1
 80177f4:	61bb      	str	r3, [r7, #24]
 80177f6:	e002      	b.n	80177fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80177f8:	f04f 33ff 	mov.w	r3, #4294967295
 80177fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80177fe:	69bb      	ldr	r3, [r7, #24]
	}
 8017800:	4618      	mov	r0, r3
 8017802:	3720      	adds	r7, #32
 8017804:	46bd      	mov	sp, r7
 8017806:	bd80      	pop	{r7, pc}

08017808 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017808:	b580      	push	{r7, lr}
 801780a:	b088      	sub	sp, #32
 801780c:	af00      	add	r7, sp, #0
 801780e:	60f8      	str	r0, [r7, #12]
 8017810:	60b9      	str	r1, [r7, #8]
 8017812:	607a      	str	r2, [r7, #4]
 8017814:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017818:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	009b      	lsls	r3, r3, #2
 801781e:	461a      	mov	r2, r3
 8017820:	21a5      	movs	r1, #165	; 0xa5
 8017822:	f002 f8ad 	bl	8019980 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017830:	3b01      	subs	r3, #1
 8017832:	009b      	lsls	r3, r3, #2
 8017834:	4413      	add	r3, r2
 8017836:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017838:	69bb      	ldr	r3, [r7, #24]
 801783a:	f023 0307 	bic.w	r3, r3, #7
 801783e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017840:	69bb      	ldr	r3, [r7, #24]
 8017842:	f003 0307 	and.w	r3, r3, #7
 8017846:	2b00      	cmp	r3, #0
 8017848:	d00a      	beq.n	8017860 <prvInitialiseNewTask+0x58>
	__asm volatile
 801784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801784e:	f383 8811 	msr	BASEPRI, r3
 8017852:	f3bf 8f6f 	isb	sy
 8017856:	f3bf 8f4f 	dsb	sy
 801785a:	617b      	str	r3, [r7, #20]
}
 801785c:	bf00      	nop
 801785e:	e7fe      	b.n	801785e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017860:	68bb      	ldr	r3, [r7, #8]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d01f      	beq.n	80178a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017866:	2300      	movs	r3, #0
 8017868:	61fb      	str	r3, [r7, #28]
 801786a:	e012      	b.n	8017892 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801786c:	68ba      	ldr	r2, [r7, #8]
 801786e:	69fb      	ldr	r3, [r7, #28]
 8017870:	4413      	add	r3, r2
 8017872:	7819      	ldrb	r1, [r3, #0]
 8017874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017876:	69fb      	ldr	r3, [r7, #28]
 8017878:	4413      	add	r3, r2
 801787a:	3334      	adds	r3, #52	; 0x34
 801787c:	460a      	mov	r2, r1
 801787e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017880:	68ba      	ldr	r2, [r7, #8]
 8017882:	69fb      	ldr	r3, [r7, #28]
 8017884:	4413      	add	r3, r2
 8017886:	781b      	ldrb	r3, [r3, #0]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d006      	beq.n	801789a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801788c:	69fb      	ldr	r3, [r7, #28]
 801788e:	3301      	adds	r3, #1
 8017890:	61fb      	str	r3, [r7, #28]
 8017892:	69fb      	ldr	r3, [r7, #28]
 8017894:	2b1f      	cmp	r3, #31
 8017896:	d9e9      	bls.n	801786c <prvInitialiseNewTask+0x64>
 8017898:	e000      	b.n	801789c <prvInitialiseNewTask+0x94>
			{
				break;
 801789a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801789c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801789e:	2200      	movs	r2, #0
 80178a0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80178a4:	e003      	b.n	80178ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80178a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178a8:	2200      	movs	r2, #0
 80178aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80178ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178b0:	2b37      	cmp	r3, #55	; 0x37
 80178b2:	d901      	bls.n	80178b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80178b4:	2337      	movs	r3, #55	; 0x37
 80178b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80178b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80178bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80178be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80178c2:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 80178c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178c6:	2200      	movs	r2, #0
 80178c8:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80178ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178cc:	3304      	adds	r3, #4
 80178ce:	4618      	mov	r0, r3
 80178d0:	f7fe fee4 	bl	801669c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80178d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178d6:	3318      	adds	r3, #24
 80178d8:	4618      	mov	r0, r3
 80178da:	f7fe fedf 	bl	801669c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80178de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80178e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80178ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80178ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80178f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178f6:	2200      	movs	r2, #0
 80178f8:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80178fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178fc:	2200      	movs	r2, #0
 80178fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017902:	683a      	ldr	r2, [r7, #0]
 8017904:	68f9      	ldr	r1, [r7, #12]
 8017906:	69b8      	ldr	r0, [r7, #24]
 8017908:	f001 fbc6 	bl	8019098 <pxPortInitialiseStack>
 801790c:	4602      	mov	r2, r0
 801790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017910:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017914:	2b00      	cmp	r3, #0
 8017916:	d002      	beq.n	801791e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801791a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801791c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801791e:	bf00      	nop
 8017920:	3720      	adds	r7, #32
 8017922:	46bd      	mov	sp, r7
 8017924:	bd80      	pop	{r7, pc}
	...

08017928 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b082      	sub	sp, #8
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017930:	f001 fce0 	bl	80192f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017934:	4b2d      	ldr	r3, [pc, #180]	; (80179ec <prvAddNewTaskToReadyList+0xc4>)
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	3301      	adds	r3, #1
 801793a:	4a2c      	ldr	r2, [pc, #176]	; (80179ec <prvAddNewTaskToReadyList+0xc4>)
 801793c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801793e:	4b2c      	ldr	r3, [pc, #176]	; (80179f0 <prvAddNewTaskToReadyList+0xc8>)
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	2b00      	cmp	r3, #0
 8017944:	d109      	bne.n	801795a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017946:	4a2a      	ldr	r2, [pc, #168]	; (80179f0 <prvAddNewTaskToReadyList+0xc8>)
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801794c:	4b27      	ldr	r3, [pc, #156]	; (80179ec <prvAddNewTaskToReadyList+0xc4>)
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	2b01      	cmp	r3, #1
 8017952:	d110      	bne.n	8017976 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017954:	f000 fcb4 	bl	80182c0 <prvInitialiseTaskLists>
 8017958:	e00d      	b.n	8017976 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801795a:	4b26      	ldr	r3, [pc, #152]	; (80179f4 <prvAddNewTaskToReadyList+0xcc>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	2b00      	cmp	r3, #0
 8017960:	d109      	bne.n	8017976 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017962:	4b23      	ldr	r3, [pc, #140]	; (80179f0 <prvAddNewTaskToReadyList+0xc8>)
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801796c:	429a      	cmp	r2, r3
 801796e:	d802      	bhi.n	8017976 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017970:	4a1f      	ldr	r2, [pc, #124]	; (80179f0 <prvAddNewTaskToReadyList+0xc8>)
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017976:	4b20      	ldr	r3, [pc, #128]	; (80179f8 <prvAddNewTaskToReadyList+0xd0>)
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	3301      	adds	r3, #1
 801797c:	4a1e      	ldr	r2, [pc, #120]	; (80179f8 <prvAddNewTaskToReadyList+0xd0>)
 801797e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017980:	4b1d      	ldr	r3, [pc, #116]	; (80179f8 <prvAddNewTaskToReadyList+0xd0>)
 8017982:	681a      	ldr	r2, [r3, #0]
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801798c:	4b1b      	ldr	r3, [pc, #108]	; (80179fc <prvAddNewTaskToReadyList+0xd4>)
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	429a      	cmp	r2, r3
 8017992:	d903      	bls.n	801799c <prvAddNewTaskToReadyList+0x74>
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017998:	4a18      	ldr	r2, [pc, #96]	; (80179fc <prvAddNewTaskToReadyList+0xd4>)
 801799a:	6013      	str	r3, [r2, #0]
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179a0:	4613      	mov	r3, r2
 80179a2:	009b      	lsls	r3, r3, #2
 80179a4:	4413      	add	r3, r2
 80179a6:	009b      	lsls	r3, r3, #2
 80179a8:	4a15      	ldr	r2, [pc, #84]	; (8017a00 <prvAddNewTaskToReadyList+0xd8>)
 80179aa:	441a      	add	r2, r3
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	3304      	adds	r3, #4
 80179b0:	4619      	mov	r1, r3
 80179b2:	4610      	mov	r0, r2
 80179b4:	f7fe fe7f 	bl	80166b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80179b8:	f001 fccc 	bl	8019354 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80179bc:	4b0d      	ldr	r3, [pc, #52]	; (80179f4 <prvAddNewTaskToReadyList+0xcc>)
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d00e      	beq.n	80179e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80179c4:	4b0a      	ldr	r3, [pc, #40]	; (80179f0 <prvAddNewTaskToReadyList+0xc8>)
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179ce:	429a      	cmp	r2, r3
 80179d0:	d207      	bcs.n	80179e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80179d2:	4b0c      	ldr	r3, [pc, #48]	; (8017a04 <prvAddNewTaskToReadyList+0xdc>)
 80179d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179d8:	601a      	str	r2, [r3, #0]
 80179da:	f3bf 8f4f 	dsb	sy
 80179de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80179e2:	bf00      	nop
 80179e4:	3708      	adds	r7, #8
 80179e6:	46bd      	mov	sp, r7
 80179e8:	bd80      	pop	{r7, pc}
 80179ea:	bf00      	nop
 80179ec:	200061d8 	.word	0x200061d8
 80179f0:	20005d04 	.word	0x20005d04
 80179f4:	200061e4 	.word	0x200061e4
 80179f8:	200061f4 	.word	0x200061f4
 80179fc:	200061e0 	.word	0x200061e0
 8017a00:	20005d08 	.word	0x20005d08
 8017a04:	e000ed04 	.word	0xe000ed04

08017a08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b084      	sub	sp, #16
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017a10:	2300      	movs	r3, #0
 8017a12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d017      	beq.n	8017a4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017a1a:	4b13      	ldr	r3, [pc, #76]	; (8017a68 <vTaskDelay+0x60>)
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d00a      	beq.n	8017a38 <vTaskDelay+0x30>
	__asm volatile
 8017a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a26:	f383 8811 	msr	BASEPRI, r3
 8017a2a:	f3bf 8f6f 	isb	sy
 8017a2e:	f3bf 8f4f 	dsb	sy
 8017a32:	60bb      	str	r3, [r7, #8]
}
 8017a34:	bf00      	nop
 8017a36:	e7fe      	b.n	8017a36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017a38:	f000 f880 	bl	8017b3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017a3c:	2100      	movs	r1, #0
 8017a3e:	6878      	ldr	r0, [r7, #4]
 8017a40:	f000 feae 	bl	80187a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017a44:	f000 f888 	bl	8017b58 <xTaskResumeAll>
 8017a48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d107      	bne.n	8017a60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017a50:	4b06      	ldr	r3, [pc, #24]	; (8017a6c <vTaskDelay+0x64>)
 8017a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a56:	601a      	str	r2, [r3, #0]
 8017a58:	f3bf 8f4f 	dsb	sy
 8017a5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017a60:	bf00      	nop
 8017a62:	3710      	adds	r7, #16
 8017a64:	46bd      	mov	sp, r7
 8017a66:	bd80      	pop	{r7, pc}
 8017a68:	20006200 	.word	0x20006200
 8017a6c:	e000ed04 	.word	0xe000ed04

08017a70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b08a      	sub	sp, #40	; 0x28
 8017a74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017a76:	2300      	movs	r3, #0
 8017a78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017a7e:	463a      	mov	r2, r7
 8017a80:	1d39      	adds	r1, r7, #4
 8017a82:	f107 0308 	add.w	r3, r7, #8
 8017a86:	4618      	mov	r0, r3
 8017a88:	f7fe fb48 	bl	801611c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017a8c:	6839      	ldr	r1, [r7, #0]
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	68ba      	ldr	r2, [r7, #8]
 8017a92:	9202      	str	r2, [sp, #8]
 8017a94:	9301      	str	r3, [sp, #4]
 8017a96:	2300      	movs	r3, #0
 8017a98:	9300      	str	r3, [sp, #0]
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	460a      	mov	r2, r1
 8017a9e:	4921      	ldr	r1, [pc, #132]	; (8017b24 <vTaskStartScheduler+0xb4>)
 8017aa0:	4821      	ldr	r0, [pc, #132]	; (8017b28 <vTaskStartScheduler+0xb8>)
 8017aa2:	f7ff fe0f 	bl	80176c4 <xTaskCreateStatic>
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	4a20      	ldr	r2, [pc, #128]	; (8017b2c <vTaskStartScheduler+0xbc>)
 8017aaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017aac:	4b1f      	ldr	r3, [pc, #124]	; (8017b2c <vTaskStartScheduler+0xbc>)
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d002      	beq.n	8017aba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017ab4:	2301      	movs	r3, #1
 8017ab6:	617b      	str	r3, [r7, #20]
 8017ab8:	e001      	b.n	8017abe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017aba:	2300      	movs	r3, #0
 8017abc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017abe:	697b      	ldr	r3, [r7, #20]
 8017ac0:	2b01      	cmp	r3, #1
 8017ac2:	d102      	bne.n	8017aca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017ac4:	f000 fec0 	bl	8018848 <xTimerCreateTimerTask>
 8017ac8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017aca:	697b      	ldr	r3, [r7, #20]
 8017acc:	2b01      	cmp	r3, #1
 8017ace:	d116      	bne.n	8017afe <vTaskStartScheduler+0x8e>
	__asm volatile
 8017ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ad4:	f383 8811 	msr	BASEPRI, r3
 8017ad8:	f3bf 8f6f 	isb	sy
 8017adc:	f3bf 8f4f 	dsb	sy
 8017ae0:	613b      	str	r3, [r7, #16]
}
 8017ae2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017ae4:	4b12      	ldr	r3, [pc, #72]	; (8017b30 <vTaskStartScheduler+0xc0>)
 8017ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8017aea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017aec:	4b11      	ldr	r3, [pc, #68]	; (8017b34 <vTaskStartScheduler+0xc4>)
 8017aee:	2201      	movs	r2, #1
 8017af0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017af2:	4b11      	ldr	r3, [pc, #68]	; (8017b38 <vTaskStartScheduler+0xc8>)
 8017af4:	2200      	movs	r2, #0
 8017af6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017af8:	f001 fb5a 	bl	80191b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017afc:	e00e      	b.n	8017b1c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017afe:	697b      	ldr	r3, [r7, #20]
 8017b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b04:	d10a      	bne.n	8017b1c <vTaskStartScheduler+0xac>
	__asm volatile
 8017b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b0a:	f383 8811 	msr	BASEPRI, r3
 8017b0e:	f3bf 8f6f 	isb	sy
 8017b12:	f3bf 8f4f 	dsb	sy
 8017b16:	60fb      	str	r3, [r7, #12]
}
 8017b18:	bf00      	nop
 8017b1a:	e7fe      	b.n	8017b1a <vTaskStartScheduler+0xaa>
}
 8017b1c:	bf00      	nop
 8017b1e:	3718      	adds	r7, #24
 8017b20:	46bd      	mov	sp, r7
 8017b22:	bd80      	pop	{r7, pc}
 8017b24:	0802052c 	.word	0x0802052c
 8017b28:	08018291 	.word	0x08018291
 8017b2c:	200061fc 	.word	0x200061fc
 8017b30:	200061f8 	.word	0x200061f8
 8017b34:	200061e4 	.word	0x200061e4
 8017b38:	200061dc 	.word	0x200061dc

08017b3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017b3c:	b480      	push	{r7}
 8017b3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017b40:	4b04      	ldr	r3, [pc, #16]	; (8017b54 <vTaskSuspendAll+0x18>)
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	3301      	adds	r3, #1
 8017b46:	4a03      	ldr	r2, [pc, #12]	; (8017b54 <vTaskSuspendAll+0x18>)
 8017b48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017b4a:	bf00      	nop
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b52:	4770      	bx	lr
 8017b54:	20006200 	.word	0x20006200

08017b58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017b58:	b580      	push	{r7, lr}
 8017b5a:	b084      	sub	sp, #16
 8017b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017b5e:	2300      	movs	r3, #0
 8017b60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017b62:	2300      	movs	r3, #0
 8017b64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017b66:	4b42      	ldr	r3, [pc, #264]	; (8017c70 <xTaskResumeAll+0x118>)
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d10a      	bne.n	8017b84 <xTaskResumeAll+0x2c>
	__asm volatile
 8017b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b72:	f383 8811 	msr	BASEPRI, r3
 8017b76:	f3bf 8f6f 	isb	sy
 8017b7a:	f3bf 8f4f 	dsb	sy
 8017b7e:	603b      	str	r3, [r7, #0]
}
 8017b80:	bf00      	nop
 8017b82:	e7fe      	b.n	8017b82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017b84:	f001 fbb6 	bl	80192f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017b88:	4b39      	ldr	r3, [pc, #228]	; (8017c70 <xTaskResumeAll+0x118>)
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	3b01      	subs	r3, #1
 8017b8e:	4a38      	ldr	r2, [pc, #224]	; (8017c70 <xTaskResumeAll+0x118>)
 8017b90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017b92:	4b37      	ldr	r3, [pc, #220]	; (8017c70 <xTaskResumeAll+0x118>)
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d162      	bne.n	8017c60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017b9a:	4b36      	ldr	r3, [pc, #216]	; (8017c74 <xTaskResumeAll+0x11c>)
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d05e      	beq.n	8017c60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017ba2:	e02f      	b.n	8017c04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ba4:	4b34      	ldr	r3, [pc, #208]	; (8017c78 <xTaskResumeAll+0x120>)
 8017ba6:	68db      	ldr	r3, [r3, #12]
 8017ba8:	68db      	ldr	r3, [r3, #12]
 8017baa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	3318      	adds	r3, #24
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f7fe fddd 	bl	8016770 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	3304      	adds	r3, #4
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f7fe fdd8 	bl	8016770 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bc4:	4b2d      	ldr	r3, [pc, #180]	; (8017c7c <xTaskResumeAll+0x124>)
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	429a      	cmp	r2, r3
 8017bca:	d903      	bls.n	8017bd4 <xTaskResumeAll+0x7c>
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bd0:	4a2a      	ldr	r2, [pc, #168]	; (8017c7c <xTaskResumeAll+0x124>)
 8017bd2:	6013      	str	r3, [r2, #0]
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bd8:	4613      	mov	r3, r2
 8017bda:	009b      	lsls	r3, r3, #2
 8017bdc:	4413      	add	r3, r2
 8017bde:	009b      	lsls	r3, r3, #2
 8017be0:	4a27      	ldr	r2, [pc, #156]	; (8017c80 <xTaskResumeAll+0x128>)
 8017be2:	441a      	add	r2, r3
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	3304      	adds	r3, #4
 8017be8:	4619      	mov	r1, r3
 8017bea:	4610      	mov	r0, r2
 8017bec:	f7fe fd63 	bl	80166b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bf4:	4b23      	ldr	r3, [pc, #140]	; (8017c84 <xTaskResumeAll+0x12c>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bfa:	429a      	cmp	r2, r3
 8017bfc:	d302      	bcc.n	8017c04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8017bfe:	4b22      	ldr	r3, [pc, #136]	; (8017c88 <xTaskResumeAll+0x130>)
 8017c00:	2201      	movs	r2, #1
 8017c02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017c04:	4b1c      	ldr	r3, [pc, #112]	; (8017c78 <xTaskResumeAll+0x120>)
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d1cb      	bne.n	8017ba4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d001      	beq.n	8017c16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017c12:	f000 fbf3 	bl	80183fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017c16:	4b1d      	ldr	r3, [pc, #116]	; (8017c8c <xTaskResumeAll+0x134>)
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d010      	beq.n	8017c44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017c22:	f000 f847 	bl	8017cb4 <xTaskIncrementTick>
 8017c26:	4603      	mov	r3, r0
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d002      	beq.n	8017c32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017c2c:	4b16      	ldr	r3, [pc, #88]	; (8017c88 <xTaskResumeAll+0x130>)
 8017c2e:	2201      	movs	r2, #1
 8017c30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	3b01      	subs	r3, #1
 8017c36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d1f1      	bne.n	8017c22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8017c3e:	4b13      	ldr	r3, [pc, #76]	; (8017c8c <xTaskResumeAll+0x134>)
 8017c40:	2200      	movs	r2, #0
 8017c42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017c44:	4b10      	ldr	r3, [pc, #64]	; (8017c88 <xTaskResumeAll+0x130>)
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d009      	beq.n	8017c60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017c4c:	2301      	movs	r3, #1
 8017c4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017c50:	4b0f      	ldr	r3, [pc, #60]	; (8017c90 <xTaskResumeAll+0x138>)
 8017c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c56:	601a      	str	r2, [r3, #0]
 8017c58:	f3bf 8f4f 	dsb	sy
 8017c5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017c60:	f001 fb78 	bl	8019354 <vPortExitCritical>

	return xAlreadyYielded;
 8017c64:	68bb      	ldr	r3, [r7, #8]
}
 8017c66:	4618      	mov	r0, r3
 8017c68:	3710      	adds	r7, #16
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	bd80      	pop	{r7, pc}
 8017c6e:	bf00      	nop
 8017c70:	20006200 	.word	0x20006200
 8017c74:	200061d8 	.word	0x200061d8
 8017c78:	20006198 	.word	0x20006198
 8017c7c:	200061e0 	.word	0x200061e0
 8017c80:	20005d08 	.word	0x20005d08
 8017c84:	20005d04 	.word	0x20005d04
 8017c88:	200061ec 	.word	0x200061ec
 8017c8c:	200061e8 	.word	0x200061e8
 8017c90:	e000ed04 	.word	0xe000ed04

08017c94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017c94:	b480      	push	{r7}
 8017c96:	b083      	sub	sp, #12
 8017c98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017c9a:	4b05      	ldr	r3, [pc, #20]	; (8017cb0 <xTaskGetTickCount+0x1c>)
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017ca0:	687b      	ldr	r3, [r7, #4]
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	370c      	adds	r7, #12
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cac:	4770      	bx	lr
 8017cae:	bf00      	nop
 8017cb0:	200061dc 	.word	0x200061dc

08017cb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b086      	sub	sp, #24
 8017cb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017cba:	2300      	movs	r3, #0
 8017cbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017cbe:	4b4f      	ldr	r3, [pc, #316]	; (8017dfc <xTaskIncrementTick+0x148>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	f040 808f 	bne.w	8017de6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017cc8:	4b4d      	ldr	r3, [pc, #308]	; (8017e00 <xTaskIncrementTick+0x14c>)
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	3301      	adds	r3, #1
 8017cce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017cd0:	4a4b      	ldr	r2, [pc, #300]	; (8017e00 <xTaskIncrementTick+0x14c>)
 8017cd2:	693b      	ldr	r3, [r7, #16]
 8017cd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017cd6:	693b      	ldr	r3, [r7, #16]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d120      	bne.n	8017d1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017cdc:	4b49      	ldr	r3, [pc, #292]	; (8017e04 <xTaskIncrementTick+0x150>)
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d00a      	beq.n	8017cfc <xTaskIncrementTick+0x48>
	__asm volatile
 8017ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cea:	f383 8811 	msr	BASEPRI, r3
 8017cee:	f3bf 8f6f 	isb	sy
 8017cf2:	f3bf 8f4f 	dsb	sy
 8017cf6:	603b      	str	r3, [r7, #0]
}
 8017cf8:	bf00      	nop
 8017cfa:	e7fe      	b.n	8017cfa <xTaskIncrementTick+0x46>
 8017cfc:	4b41      	ldr	r3, [pc, #260]	; (8017e04 <xTaskIncrementTick+0x150>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	60fb      	str	r3, [r7, #12]
 8017d02:	4b41      	ldr	r3, [pc, #260]	; (8017e08 <xTaskIncrementTick+0x154>)
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	4a3f      	ldr	r2, [pc, #252]	; (8017e04 <xTaskIncrementTick+0x150>)
 8017d08:	6013      	str	r3, [r2, #0]
 8017d0a:	4a3f      	ldr	r2, [pc, #252]	; (8017e08 <xTaskIncrementTick+0x154>)
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	6013      	str	r3, [r2, #0]
 8017d10:	4b3e      	ldr	r3, [pc, #248]	; (8017e0c <xTaskIncrementTick+0x158>)
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	3301      	adds	r3, #1
 8017d16:	4a3d      	ldr	r2, [pc, #244]	; (8017e0c <xTaskIncrementTick+0x158>)
 8017d18:	6013      	str	r3, [r2, #0]
 8017d1a:	f000 fb6f 	bl	80183fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017d1e:	4b3c      	ldr	r3, [pc, #240]	; (8017e10 <xTaskIncrementTick+0x15c>)
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	693a      	ldr	r2, [r7, #16]
 8017d24:	429a      	cmp	r2, r3
 8017d26:	d349      	bcc.n	8017dbc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017d28:	4b36      	ldr	r3, [pc, #216]	; (8017e04 <xTaskIncrementTick+0x150>)
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d104      	bne.n	8017d3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d32:	4b37      	ldr	r3, [pc, #220]	; (8017e10 <xTaskIncrementTick+0x15c>)
 8017d34:	f04f 32ff 	mov.w	r2, #4294967295
 8017d38:	601a      	str	r2, [r3, #0]
					break;
 8017d3a:	e03f      	b.n	8017dbc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d3c:	4b31      	ldr	r3, [pc, #196]	; (8017e04 <xTaskIncrementTick+0x150>)
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	68db      	ldr	r3, [r3, #12]
 8017d42:	68db      	ldr	r3, [r3, #12]
 8017d44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017d46:	68bb      	ldr	r3, [r7, #8]
 8017d48:	685b      	ldr	r3, [r3, #4]
 8017d4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017d4c:	693a      	ldr	r2, [r7, #16]
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	429a      	cmp	r2, r3
 8017d52:	d203      	bcs.n	8017d5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017d54:	4a2e      	ldr	r2, [pc, #184]	; (8017e10 <xTaskIncrementTick+0x15c>)
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017d5a:	e02f      	b.n	8017dbc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017d5c:	68bb      	ldr	r3, [r7, #8]
 8017d5e:	3304      	adds	r3, #4
 8017d60:	4618      	mov	r0, r3
 8017d62:	f7fe fd05 	bl	8016770 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017d66:	68bb      	ldr	r3, [r7, #8]
 8017d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d004      	beq.n	8017d78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017d6e:	68bb      	ldr	r3, [r7, #8]
 8017d70:	3318      	adds	r3, #24
 8017d72:	4618      	mov	r0, r3
 8017d74:	f7fe fcfc 	bl	8016770 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d7c:	4b25      	ldr	r3, [pc, #148]	; (8017e14 <xTaskIncrementTick+0x160>)
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	429a      	cmp	r2, r3
 8017d82:	d903      	bls.n	8017d8c <xTaskIncrementTick+0xd8>
 8017d84:	68bb      	ldr	r3, [r7, #8]
 8017d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d88:	4a22      	ldr	r2, [pc, #136]	; (8017e14 <xTaskIncrementTick+0x160>)
 8017d8a:	6013      	str	r3, [r2, #0]
 8017d8c:	68bb      	ldr	r3, [r7, #8]
 8017d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d90:	4613      	mov	r3, r2
 8017d92:	009b      	lsls	r3, r3, #2
 8017d94:	4413      	add	r3, r2
 8017d96:	009b      	lsls	r3, r3, #2
 8017d98:	4a1f      	ldr	r2, [pc, #124]	; (8017e18 <xTaskIncrementTick+0x164>)
 8017d9a:	441a      	add	r2, r3
 8017d9c:	68bb      	ldr	r3, [r7, #8]
 8017d9e:	3304      	adds	r3, #4
 8017da0:	4619      	mov	r1, r3
 8017da2:	4610      	mov	r0, r2
 8017da4:	f7fe fc87 	bl	80166b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017da8:	68bb      	ldr	r3, [r7, #8]
 8017daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dac:	4b1b      	ldr	r3, [pc, #108]	; (8017e1c <xTaskIncrementTick+0x168>)
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017db2:	429a      	cmp	r2, r3
 8017db4:	d3b8      	bcc.n	8017d28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017db6:	2301      	movs	r3, #1
 8017db8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017dba:	e7b5      	b.n	8017d28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017dbc:	4b17      	ldr	r3, [pc, #92]	; (8017e1c <xTaskIncrementTick+0x168>)
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dc2:	4915      	ldr	r1, [pc, #84]	; (8017e18 <xTaskIncrementTick+0x164>)
 8017dc4:	4613      	mov	r3, r2
 8017dc6:	009b      	lsls	r3, r3, #2
 8017dc8:	4413      	add	r3, r2
 8017dca:	009b      	lsls	r3, r3, #2
 8017dcc:	440b      	add	r3, r1
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	2b01      	cmp	r3, #1
 8017dd2:	d901      	bls.n	8017dd8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017dd4:	2301      	movs	r3, #1
 8017dd6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017dd8:	4b11      	ldr	r3, [pc, #68]	; (8017e20 <xTaskIncrementTick+0x16c>)
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d007      	beq.n	8017df0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8017de0:	2301      	movs	r3, #1
 8017de2:	617b      	str	r3, [r7, #20]
 8017de4:	e004      	b.n	8017df0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017de6:	4b0f      	ldr	r3, [pc, #60]	; (8017e24 <xTaskIncrementTick+0x170>)
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	3301      	adds	r3, #1
 8017dec:	4a0d      	ldr	r2, [pc, #52]	; (8017e24 <xTaskIncrementTick+0x170>)
 8017dee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017df0:	697b      	ldr	r3, [r7, #20]
}
 8017df2:	4618      	mov	r0, r3
 8017df4:	3718      	adds	r7, #24
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bd80      	pop	{r7, pc}
 8017dfa:	bf00      	nop
 8017dfc:	20006200 	.word	0x20006200
 8017e00:	200061dc 	.word	0x200061dc
 8017e04:	20006190 	.word	0x20006190
 8017e08:	20006194 	.word	0x20006194
 8017e0c:	200061f0 	.word	0x200061f0
 8017e10:	200061f8 	.word	0x200061f8
 8017e14:	200061e0 	.word	0x200061e0
 8017e18:	20005d08 	.word	0x20005d08
 8017e1c:	20005d04 	.word	0x20005d04
 8017e20:	200061ec 	.word	0x200061ec
 8017e24:	200061e8 	.word	0x200061e8

08017e28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017e28:	b480      	push	{r7}
 8017e2a:	b085      	sub	sp, #20
 8017e2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017e2e:	4b28      	ldr	r3, [pc, #160]	; (8017ed0 <vTaskSwitchContext+0xa8>)
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d003      	beq.n	8017e3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017e36:	4b27      	ldr	r3, [pc, #156]	; (8017ed4 <vTaskSwitchContext+0xac>)
 8017e38:	2201      	movs	r2, #1
 8017e3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017e3c:	e041      	b.n	8017ec2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8017e3e:	4b25      	ldr	r3, [pc, #148]	; (8017ed4 <vTaskSwitchContext+0xac>)
 8017e40:	2200      	movs	r2, #0
 8017e42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e44:	4b24      	ldr	r3, [pc, #144]	; (8017ed8 <vTaskSwitchContext+0xb0>)
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	60fb      	str	r3, [r7, #12]
 8017e4a:	e010      	b.n	8017e6e <vTaskSwitchContext+0x46>
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d10a      	bne.n	8017e68 <vTaskSwitchContext+0x40>
	__asm volatile
 8017e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e56:	f383 8811 	msr	BASEPRI, r3
 8017e5a:	f3bf 8f6f 	isb	sy
 8017e5e:	f3bf 8f4f 	dsb	sy
 8017e62:	607b      	str	r3, [r7, #4]
}
 8017e64:	bf00      	nop
 8017e66:	e7fe      	b.n	8017e66 <vTaskSwitchContext+0x3e>
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	3b01      	subs	r3, #1
 8017e6c:	60fb      	str	r3, [r7, #12]
 8017e6e:	491b      	ldr	r1, [pc, #108]	; (8017edc <vTaskSwitchContext+0xb4>)
 8017e70:	68fa      	ldr	r2, [r7, #12]
 8017e72:	4613      	mov	r3, r2
 8017e74:	009b      	lsls	r3, r3, #2
 8017e76:	4413      	add	r3, r2
 8017e78:	009b      	lsls	r3, r3, #2
 8017e7a:	440b      	add	r3, r1
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d0e4      	beq.n	8017e4c <vTaskSwitchContext+0x24>
 8017e82:	68fa      	ldr	r2, [r7, #12]
 8017e84:	4613      	mov	r3, r2
 8017e86:	009b      	lsls	r3, r3, #2
 8017e88:	4413      	add	r3, r2
 8017e8a:	009b      	lsls	r3, r3, #2
 8017e8c:	4a13      	ldr	r2, [pc, #76]	; (8017edc <vTaskSwitchContext+0xb4>)
 8017e8e:	4413      	add	r3, r2
 8017e90:	60bb      	str	r3, [r7, #8]
 8017e92:	68bb      	ldr	r3, [r7, #8]
 8017e94:	685b      	ldr	r3, [r3, #4]
 8017e96:	685a      	ldr	r2, [r3, #4]
 8017e98:	68bb      	ldr	r3, [r7, #8]
 8017e9a:	605a      	str	r2, [r3, #4]
 8017e9c:	68bb      	ldr	r3, [r7, #8]
 8017e9e:	685a      	ldr	r2, [r3, #4]
 8017ea0:	68bb      	ldr	r3, [r7, #8]
 8017ea2:	3308      	adds	r3, #8
 8017ea4:	429a      	cmp	r2, r3
 8017ea6:	d104      	bne.n	8017eb2 <vTaskSwitchContext+0x8a>
 8017ea8:	68bb      	ldr	r3, [r7, #8]
 8017eaa:	685b      	ldr	r3, [r3, #4]
 8017eac:	685a      	ldr	r2, [r3, #4]
 8017eae:	68bb      	ldr	r3, [r7, #8]
 8017eb0:	605a      	str	r2, [r3, #4]
 8017eb2:	68bb      	ldr	r3, [r7, #8]
 8017eb4:	685b      	ldr	r3, [r3, #4]
 8017eb6:	68db      	ldr	r3, [r3, #12]
 8017eb8:	4a09      	ldr	r2, [pc, #36]	; (8017ee0 <vTaskSwitchContext+0xb8>)
 8017eba:	6013      	str	r3, [r2, #0]
 8017ebc:	4a06      	ldr	r2, [pc, #24]	; (8017ed8 <vTaskSwitchContext+0xb0>)
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	6013      	str	r3, [r2, #0]
}
 8017ec2:	bf00      	nop
 8017ec4:	3714      	adds	r7, #20
 8017ec6:	46bd      	mov	sp, r7
 8017ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ecc:	4770      	bx	lr
 8017ece:	bf00      	nop
 8017ed0:	20006200 	.word	0x20006200
 8017ed4:	200061ec 	.word	0x200061ec
 8017ed8:	200061e0 	.word	0x200061e0
 8017edc:	20005d08 	.word	0x20005d08
 8017ee0:	20005d04 	.word	0x20005d04

08017ee4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b084      	sub	sp, #16
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	6078      	str	r0, [r7, #4]
 8017eec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d10a      	bne.n	8017f0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ef8:	f383 8811 	msr	BASEPRI, r3
 8017efc:	f3bf 8f6f 	isb	sy
 8017f00:	f3bf 8f4f 	dsb	sy
 8017f04:	60fb      	str	r3, [r7, #12]
}
 8017f06:	bf00      	nop
 8017f08:	e7fe      	b.n	8017f08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017f0a:	4b07      	ldr	r3, [pc, #28]	; (8017f28 <vTaskPlaceOnEventList+0x44>)
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	3318      	adds	r3, #24
 8017f10:	4619      	mov	r1, r3
 8017f12:	6878      	ldr	r0, [r7, #4]
 8017f14:	f7fe fbf3 	bl	80166fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017f18:	2101      	movs	r1, #1
 8017f1a:	6838      	ldr	r0, [r7, #0]
 8017f1c:	f000 fc40 	bl	80187a0 <prvAddCurrentTaskToDelayedList>
}
 8017f20:	bf00      	nop
 8017f22:	3710      	adds	r7, #16
 8017f24:	46bd      	mov	sp, r7
 8017f26:	bd80      	pop	{r7, pc}
 8017f28:	20005d04 	.word	0x20005d04

08017f2c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b086      	sub	sp, #24
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	60f8      	str	r0, [r7, #12]
 8017f34:	60b9      	str	r1, [r7, #8]
 8017f36:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d10a      	bne.n	8017f54 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8017f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f42:	f383 8811 	msr	BASEPRI, r3
 8017f46:	f3bf 8f6f 	isb	sy
 8017f4a:	f3bf 8f4f 	dsb	sy
 8017f4e:	617b      	str	r3, [r7, #20]
}
 8017f50:	bf00      	nop
 8017f52:	e7fe      	b.n	8017f52 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8017f54:	4b11      	ldr	r3, [pc, #68]	; (8017f9c <vTaskPlaceOnUnorderedEventList+0x70>)
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d10a      	bne.n	8017f72 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8017f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f60:	f383 8811 	msr	BASEPRI, r3
 8017f64:	f3bf 8f6f 	isb	sy
 8017f68:	f3bf 8f4f 	dsb	sy
 8017f6c:	613b      	str	r3, [r7, #16]
}
 8017f6e:	bf00      	nop
 8017f70:	e7fe      	b.n	8017f70 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8017f72:	4b0b      	ldr	r3, [pc, #44]	; (8017fa0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	68ba      	ldr	r2, [r7, #8]
 8017f78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8017f7c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017f7e:	4b08      	ldr	r3, [pc, #32]	; (8017fa0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	3318      	adds	r3, #24
 8017f84:	4619      	mov	r1, r3
 8017f86:	68f8      	ldr	r0, [r7, #12]
 8017f88:	f7fe fb95 	bl	80166b6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017f8c:	2101      	movs	r1, #1
 8017f8e:	6878      	ldr	r0, [r7, #4]
 8017f90:	f000 fc06 	bl	80187a0 <prvAddCurrentTaskToDelayedList>
}
 8017f94:	bf00      	nop
 8017f96:	3718      	adds	r7, #24
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	bd80      	pop	{r7, pc}
 8017f9c:	20006200 	.word	0x20006200
 8017fa0:	20005d04 	.word	0x20005d04

08017fa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b086      	sub	sp, #24
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	60f8      	str	r0, [r7, #12]
 8017fac:	60b9      	str	r1, [r7, #8]
 8017fae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d10a      	bne.n	8017fcc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fba:	f383 8811 	msr	BASEPRI, r3
 8017fbe:	f3bf 8f6f 	isb	sy
 8017fc2:	f3bf 8f4f 	dsb	sy
 8017fc6:	617b      	str	r3, [r7, #20]
}
 8017fc8:	bf00      	nop
 8017fca:	e7fe      	b.n	8017fca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017fcc:	4b0a      	ldr	r3, [pc, #40]	; (8017ff8 <vTaskPlaceOnEventListRestricted+0x54>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	3318      	adds	r3, #24
 8017fd2:	4619      	mov	r1, r3
 8017fd4:	68f8      	ldr	r0, [r7, #12]
 8017fd6:	f7fe fb6e 	bl	80166b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d002      	beq.n	8017fe6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8017fe4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017fe6:	6879      	ldr	r1, [r7, #4]
 8017fe8:	68b8      	ldr	r0, [r7, #8]
 8017fea:	f000 fbd9 	bl	80187a0 <prvAddCurrentTaskToDelayedList>
	}
 8017fee:	bf00      	nop
 8017ff0:	3718      	adds	r7, #24
 8017ff2:	46bd      	mov	sp, r7
 8017ff4:	bd80      	pop	{r7, pc}
 8017ff6:	bf00      	nop
 8017ff8:	20005d04 	.word	0x20005d04

08017ffc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	b086      	sub	sp, #24
 8018000:	af00      	add	r7, sp, #0
 8018002:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	68db      	ldr	r3, [r3, #12]
 8018008:	68db      	ldr	r3, [r3, #12]
 801800a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801800c:	693b      	ldr	r3, [r7, #16]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d10a      	bne.n	8018028 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018016:	f383 8811 	msr	BASEPRI, r3
 801801a:	f3bf 8f6f 	isb	sy
 801801e:	f3bf 8f4f 	dsb	sy
 8018022:	60fb      	str	r3, [r7, #12]
}
 8018024:	bf00      	nop
 8018026:	e7fe      	b.n	8018026 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018028:	693b      	ldr	r3, [r7, #16]
 801802a:	3318      	adds	r3, #24
 801802c:	4618      	mov	r0, r3
 801802e:	f7fe fb9f 	bl	8016770 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018032:	4b1e      	ldr	r3, [pc, #120]	; (80180ac <xTaskRemoveFromEventList+0xb0>)
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d11d      	bne.n	8018076 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801803a:	693b      	ldr	r3, [r7, #16]
 801803c:	3304      	adds	r3, #4
 801803e:	4618      	mov	r0, r3
 8018040:	f7fe fb96 	bl	8016770 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018044:	693b      	ldr	r3, [r7, #16]
 8018046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018048:	4b19      	ldr	r3, [pc, #100]	; (80180b0 <xTaskRemoveFromEventList+0xb4>)
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	429a      	cmp	r2, r3
 801804e:	d903      	bls.n	8018058 <xTaskRemoveFromEventList+0x5c>
 8018050:	693b      	ldr	r3, [r7, #16]
 8018052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018054:	4a16      	ldr	r2, [pc, #88]	; (80180b0 <xTaskRemoveFromEventList+0xb4>)
 8018056:	6013      	str	r3, [r2, #0]
 8018058:	693b      	ldr	r3, [r7, #16]
 801805a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801805c:	4613      	mov	r3, r2
 801805e:	009b      	lsls	r3, r3, #2
 8018060:	4413      	add	r3, r2
 8018062:	009b      	lsls	r3, r3, #2
 8018064:	4a13      	ldr	r2, [pc, #76]	; (80180b4 <xTaskRemoveFromEventList+0xb8>)
 8018066:	441a      	add	r2, r3
 8018068:	693b      	ldr	r3, [r7, #16]
 801806a:	3304      	adds	r3, #4
 801806c:	4619      	mov	r1, r3
 801806e:	4610      	mov	r0, r2
 8018070:	f7fe fb21 	bl	80166b6 <vListInsertEnd>
 8018074:	e005      	b.n	8018082 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018076:	693b      	ldr	r3, [r7, #16]
 8018078:	3318      	adds	r3, #24
 801807a:	4619      	mov	r1, r3
 801807c:	480e      	ldr	r0, [pc, #56]	; (80180b8 <xTaskRemoveFromEventList+0xbc>)
 801807e:	f7fe fb1a 	bl	80166b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018082:	693b      	ldr	r3, [r7, #16]
 8018084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018086:	4b0d      	ldr	r3, [pc, #52]	; (80180bc <xTaskRemoveFromEventList+0xc0>)
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801808c:	429a      	cmp	r2, r3
 801808e:	d905      	bls.n	801809c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018090:	2301      	movs	r3, #1
 8018092:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018094:	4b0a      	ldr	r3, [pc, #40]	; (80180c0 <xTaskRemoveFromEventList+0xc4>)
 8018096:	2201      	movs	r2, #1
 8018098:	601a      	str	r2, [r3, #0]
 801809a:	e001      	b.n	80180a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801809c:	2300      	movs	r3, #0
 801809e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80180a0:	697b      	ldr	r3, [r7, #20]
}
 80180a2:	4618      	mov	r0, r3
 80180a4:	3718      	adds	r7, #24
 80180a6:	46bd      	mov	sp, r7
 80180a8:	bd80      	pop	{r7, pc}
 80180aa:	bf00      	nop
 80180ac:	20006200 	.word	0x20006200
 80180b0:	200061e0 	.word	0x200061e0
 80180b4:	20005d08 	.word	0x20005d08
 80180b8:	20006198 	.word	0x20006198
 80180bc:	20005d04 	.word	0x20005d04
 80180c0:	200061ec 	.word	0x200061ec

080180c4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80180c4:	b580      	push	{r7, lr}
 80180c6:	b086      	sub	sp, #24
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
 80180cc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80180ce:	4b29      	ldr	r3, [pc, #164]	; (8018174 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d10a      	bne.n	80180ec <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80180d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180da:	f383 8811 	msr	BASEPRI, r3
 80180de:	f3bf 8f6f 	isb	sy
 80180e2:	f3bf 8f4f 	dsb	sy
 80180e6:	613b      	str	r3, [r7, #16]
}
 80180e8:	bf00      	nop
 80180ea:	e7fe      	b.n	80180ea <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80180ec:	683b      	ldr	r3, [r7, #0]
 80180ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	68db      	ldr	r3, [r3, #12]
 80180fa:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80180fc:	697b      	ldr	r3, [r7, #20]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d10a      	bne.n	8018118 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8018102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018106:	f383 8811 	msr	BASEPRI, r3
 801810a:	f3bf 8f6f 	isb	sy
 801810e:	f3bf 8f4f 	dsb	sy
 8018112:	60fb      	str	r3, [r7, #12]
}
 8018114:	bf00      	nop
 8018116:	e7fe      	b.n	8018116 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8018118:	6878      	ldr	r0, [r7, #4]
 801811a:	f7fe fb29 	bl	8016770 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801811e:	697b      	ldr	r3, [r7, #20]
 8018120:	3304      	adds	r3, #4
 8018122:	4618      	mov	r0, r3
 8018124:	f7fe fb24 	bl	8016770 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8018128:	697b      	ldr	r3, [r7, #20]
 801812a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801812c:	4b12      	ldr	r3, [pc, #72]	; (8018178 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	429a      	cmp	r2, r3
 8018132:	d903      	bls.n	801813c <vTaskRemoveFromUnorderedEventList+0x78>
 8018134:	697b      	ldr	r3, [r7, #20]
 8018136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018138:	4a0f      	ldr	r2, [pc, #60]	; (8018178 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801813a:	6013      	str	r3, [r2, #0]
 801813c:	697b      	ldr	r3, [r7, #20]
 801813e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018140:	4613      	mov	r3, r2
 8018142:	009b      	lsls	r3, r3, #2
 8018144:	4413      	add	r3, r2
 8018146:	009b      	lsls	r3, r3, #2
 8018148:	4a0c      	ldr	r2, [pc, #48]	; (801817c <vTaskRemoveFromUnorderedEventList+0xb8>)
 801814a:	441a      	add	r2, r3
 801814c:	697b      	ldr	r3, [r7, #20]
 801814e:	3304      	adds	r3, #4
 8018150:	4619      	mov	r1, r3
 8018152:	4610      	mov	r0, r2
 8018154:	f7fe faaf 	bl	80166b6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018158:	697b      	ldr	r3, [r7, #20]
 801815a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801815c:	4b08      	ldr	r3, [pc, #32]	; (8018180 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018162:	429a      	cmp	r2, r3
 8018164:	d902      	bls.n	801816c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8018166:	4b07      	ldr	r3, [pc, #28]	; (8018184 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8018168:	2201      	movs	r2, #1
 801816a:	601a      	str	r2, [r3, #0]
	}
}
 801816c:	bf00      	nop
 801816e:	3718      	adds	r7, #24
 8018170:	46bd      	mov	sp, r7
 8018172:	bd80      	pop	{r7, pc}
 8018174:	20006200 	.word	0x20006200
 8018178:	200061e0 	.word	0x200061e0
 801817c:	20005d08 	.word	0x20005d08
 8018180:	20005d04 	.word	0x20005d04
 8018184:	200061ec 	.word	0x200061ec

08018188 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018188:	b480      	push	{r7}
 801818a:	b083      	sub	sp, #12
 801818c:	af00      	add	r7, sp, #0
 801818e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018190:	4b06      	ldr	r3, [pc, #24]	; (80181ac <vTaskInternalSetTimeOutState+0x24>)
 8018192:	681a      	ldr	r2, [r3, #0]
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018198:	4b05      	ldr	r3, [pc, #20]	; (80181b0 <vTaskInternalSetTimeOutState+0x28>)
 801819a:	681a      	ldr	r2, [r3, #0]
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	605a      	str	r2, [r3, #4]
}
 80181a0:	bf00      	nop
 80181a2:	370c      	adds	r7, #12
 80181a4:	46bd      	mov	sp, r7
 80181a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181aa:	4770      	bx	lr
 80181ac:	200061f0 	.word	0x200061f0
 80181b0:	200061dc 	.word	0x200061dc

080181b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	b088      	sub	sp, #32
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	6078      	str	r0, [r7, #4]
 80181bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d10a      	bne.n	80181da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80181c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181c8:	f383 8811 	msr	BASEPRI, r3
 80181cc:	f3bf 8f6f 	isb	sy
 80181d0:	f3bf 8f4f 	dsb	sy
 80181d4:	613b      	str	r3, [r7, #16]
}
 80181d6:	bf00      	nop
 80181d8:	e7fe      	b.n	80181d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80181da:	683b      	ldr	r3, [r7, #0]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d10a      	bne.n	80181f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80181e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181e4:	f383 8811 	msr	BASEPRI, r3
 80181e8:	f3bf 8f6f 	isb	sy
 80181ec:	f3bf 8f4f 	dsb	sy
 80181f0:	60fb      	str	r3, [r7, #12]
}
 80181f2:	bf00      	nop
 80181f4:	e7fe      	b.n	80181f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80181f6:	f001 f87d 	bl	80192f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80181fa:	4b1d      	ldr	r3, [pc, #116]	; (8018270 <xTaskCheckForTimeOut+0xbc>)
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	685b      	ldr	r3, [r3, #4]
 8018204:	69ba      	ldr	r2, [r7, #24]
 8018206:	1ad3      	subs	r3, r2, r3
 8018208:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801820a:	683b      	ldr	r3, [r7, #0]
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018212:	d102      	bne.n	801821a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018214:	2300      	movs	r3, #0
 8018216:	61fb      	str	r3, [r7, #28]
 8018218:	e023      	b.n	8018262 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	681a      	ldr	r2, [r3, #0]
 801821e:	4b15      	ldr	r3, [pc, #84]	; (8018274 <xTaskCheckForTimeOut+0xc0>)
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	429a      	cmp	r2, r3
 8018224:	d007      	beq.n	8018236 <xTaskCheckForTimeOut+0x82>
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	685b      	ldr	r3, [r3, #4]
 801822a:	69ba      	ldr	r2, [r7, #24]
 801822c:	429a      	cmp	r2, r3
 801822e:	d302      	bcc.n	8018236 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018230:	2301      	movs	r3, #1
 8018232:	61fb      	str	r3, [r7, #28]
 8018234:	e015      	b.n	8018262 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018236:	683b      	ldr	r3, [r7, #0]
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	697a      	ldr	r2, [r7, #20]
 801823c:	429a      	cmp	r2, r3
 801823e:	d20b      	bcs.n	8018258 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018240:	683b      	ldr	r3, [r7, #0]
 8018242:	681a      	ldr	r2, [r3, #0]
 8018244:	697b      	ldr	r3, [r7, #20]
 8018246:	1ad2      	subs	r2, r2, r3
 8018248:	683b      	ldr	r3, [r7, #0]
 801824a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801824c:	6878      	ldr	r0, [r7, #4]
 801824e:	f7ff ff9b 	bl	8018188 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018252:	2300      	movs	r3, #0
 8018254:	61fb      	str	r3, [r7, #28]
 8018256:	e004      	b.n	8018262 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018258:	683b      	ldr	r3, [r7, #0]
 801825a:	2200      	movs	r2, #0
 801825c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801825e:	2301      	movs	r3, #1
 8018260:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018262:	f001 f877 	bl	8019354 <vPortExitCritical>

	return xReturn;
 8018266:	69fb      	ldr	r3, [r7, #28]
}
 8018268:	4618      	mov	r0, r3
 801826a:	3720      	adds	r7, #32
 801826c:	46bd      	mov	sp, r7
 801826e:	bd80      	pop	{r7, pc}
 8018270:	200061dc 	.word	0x200061dc
 8018274:	200061f0 	.word	0x200061f0

08018278 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018278:	b480      	push	{r7}
 801827a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801827c:	4b03      	ldr	r3, [pc, #12]	; (801828c <vTaskMissedYield+0x14>)
 801827e:	2201      	movs	r2, #1
 8018280:	601a      	str	r2, [r3, #0]
}
 8018282:	bf00      	nop
 8018284:	46bd      	mov	sp, r7
 8018286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801828a:	4770      	bx	lr
 801828c:	200061ec 	.word	0x200061ec

08018290 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b082      	sub	sp, #8
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018298:	f000 f852 	bl	8018340 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801829c:	4b06      	ldr	r3, [pc, #24]	; (80182b8 <prvIdleTask+0x28>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	2b01      	cmp	r3, #1
 80182a2:	d9f9      	bls.n	8018298 <prvIdleTask+0x8>
			{
				taskYIELD();
 80182a4:	4b05      	ldr	r3, [pc, #20]	; (80182bc <prvIdleTask+0x2c>)
 80182a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80182aa:	601a      	str	r2, [r3, #0]
 80182ac:	f3bf 8f4f 	dsb	sy
 80182b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80182b4:	e7f0      	b.n	8018298 <prvIdleTask+0x8>
 80182b6:	bf00      	nop
 80182b8:	20005d08 	.word	0x20005d08
 80182bc:	e000ed04 	.word	0xe000ed04

080182c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80182c0:	b580      	push	{r7, lr}
 80182c2:	b082      	sub	sp, #8
 80182c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80182c6:	2300      	movs	r3, #0
 80182c8:	607b      	str	r3, [r7, #4]
 80182ca:	e00c      	b.n	80182e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80182cc:	687a      	ldr	r2, [r7, #4]
 80182ce:	4613      	mov	r3, r2
 80182d0:	009b      	lsls	r3, r3, #2
 80182d2:	4413      	add	r3, r2
 80182d4:	009b      	lsls	r3, r3, #2
 80182d6:	4a12      	ldr	r2, [pc, #72]	; (8018320 <prvInitialiseTaskLists+0x60>)
 80182d8:	4413      	add	r3, r2
 80182da:	4618      	mov	r0, r3
 80182dc:	f7fe f9be 	bl	801665c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	3301      	adds	r3, #1
 80182e4:	607b      	str	r3, [r7, #4]
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	2b37      	cmp	r3, #55	; 0x37
 80182ea:	d9ef      	bls.n	80182cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80182ec:	480d      	ldr	r0, [pc, #52]	; (8018324 <prvInitialiseTaskLists+0x64>)
 80182ee:	f7fe f9b5 	bl	801665c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80182f2:	480d      	ldr	r0, [pc, #52]	; (8018328 <prvInitialiseTaskLists+0x68>)
 80182f4:	f7fe f9b2 	bl	801665c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80182f8:	480c      	ldr	r0, [pc, #48]	; (801832c <prvInitialiseTaskLists+0x6c>)
 80182fa:	f7fe f9af 	bl	801665c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80182fe:	480c      	ldr	r0, [pc, #48]	; (8018330 <prvInitialiseTaskLists+0x70>)
 8018300:	f7fe f9ac 	bl	801665c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018304:	480b      	ldr	r0, [pc, #44]	; (8018334 <prvInitialiseTaskLists+0x74>)
 8018306:	f7fe f9a9 	bl	801665c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801830a:	4b0b      	ldr	r3, [pc, #44]	; (8018338 <prvInitialiseTaskLists+0x78>)
 801830c:	4a05      	ldr	r2, [pc, #20]	; (8018324 <prvInitialiseTaskLists+0x64>)
 801830e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018310:	4b0a      	ldr	r3, [pc, #40]	; (801833c <prvInitialiseTaskLists+0x7c>)
 8018312:	4a05      	ldr	r2, [pc, #20]	; (8018328 <prvInitialiseTaskLists+0x68>)
 8018314:	601a      	str	r2, [r3, #0]
}
 8018316:	bf00      	nop
 8018318:	3708      	adds	r7, #8
 801831a:	46bd      	mov	sp, r7
 801831c:	bd80      	pop	{r7, pc}
 801831e:	bf00      	nop
 8018320:	20005d08 	.word	0x20005d08
 8018324:	20006168 	.word	0x20006168
 8018328:	2000617c 	.word	0x2000617c
 801832c:	20006198 	.word	0x20006198
 8018330:	200061ac 	.word	0x200061ac
 8018334:	200061c4 	.word	0x200061c4
 8018338:	20006190 	.word	0x20006190
 801833c:	20006194 	.word	0x20006194

08018340 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018340:	b580      	push	{r7, lr}
 8018342:	b082      	sub	sp, #8
 8018344:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018346:	e019      	b.n	801837c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018348:	f000 ffd4 	bl	80192f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801834c:	4b10      	ldr	r3, [pc, #64]	; (8018390 <prvCheckTasksWaitingTermination+0x50>)
 801834e:	68db      	ldr	r3, [r3, #12]
 8018350:	68db      	ldr	r3, [r3, #12]
 8018352:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	3304      	adds	r3, #4
 8018358:	4618      	mov	r0, r3
 801835a:	f7fe fa09 	bl	8016770 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801835e:	4b0d      	ldr	r3, [pc, #52]	; (8018394 <prvCheckTasksWaitingTermination+0x54>)
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	3b01      	subs	r3, #1
 8018364:	4a0b      	ldr	r2, [pc, #44]	; (8018394 <prvCheckTasksWaitingTermination+0x54>)
 8018366:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018368:	4b0b      	ldr	r3, [pc, #44]	; (8018398 <prvCheckTasksWaitingTermination+0x58>)
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	3b01      	subs	r3, #1
 801836e:	4a0a      	ldr	r2, [pc, #40]	; (8018398 <prvCheckTasksWaitingTermination+0x58>)
 8018370:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018372:	f000 ffef 	bl	8019354 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018376:	6878      	ldr	r0, [r7, #4]
 8018378:	f000 f810 	bl	801839c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801837c:	4b06      	ldr	r3, [pc, #24]	; (8018398 <prvCheckTasksWaitingTermination+0x58>)
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d1e1      	bne.n	8018348 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018384:	bf00      	nop
 8018386:	bf00      	nop
 8018388:	3708      	adds	r7, #8
 801838a:	46bd      	mov	sp, r7
 801838c:	bd80      	pop	{r7, pc}
 801838e:	bf00      	nop
 8018390:	200061ac 	.word	0x200061ac
 8018394:	200061d8 	.word	0x200061d8
 8018398:	200061c0 	.word	0x200061c0

0801839c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801839c:	b580      	push	{r7, lr}
 801839e:	b084      	sub	sp, #16
 80183a0:	af00      	add	r7, sp, #0
 80183a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d108      	bne.n	80183c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80183b2:	4618      	mov	r0, r3
 80183b4:	f001 f98c 	bl	80196d0 <vPortFree>
				vPortFree( pxTCB );
 80183b8:	6878      	ldr	r0, [r7, #4]
 80183ba:	f001 f989 	bl	80196d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80183be:	e018      	b.n	80183f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80183c6:	2b01      	cmp	r3, #1
 80183c8:	d103      	bne.n	80183d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80183ca:	6878      	ldr	r0, [r7, #4]
 80183cc:	f001 f980 	bl	80196d0 <vPortFree>
	}
 80183d0:	e00f      	b.n	80183f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80183d8:	2b02      	cmp	r3, #2
 80183da:	d00a      	beq.n	80183f2 <prvDeleteTCB+0x56>
	__asm volatile
 80183dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183e0:	f383 8811 	msr	BASEPRI, r3
 80183e4:	f3bf 8f6f 	isb	sy
 80183e8:	f3bf 8f4f 	dsb	sy
 80183ec:	60fb      	str	r3, [r7, #12]
}
 80183ee:	bf00      	nop
 80183f0:	e7fe      	b.n	80183f0 <prvDeleteTCB+0x54>
	}
 80183f2:	bf00      	nop
 80183f4:	3710      	adds	r7, #16
 80183f6:	46bd      	mov	sp, r7
 80183f8:	bd80      	pop	{r7, pc}
	...

080183fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80183fc:	b480      	push	{r7}
 80183fe:	b083      	sub	sp, #12
 8018400:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018402:	4b0c      	ldr	r3, [pc, #48]	; (8018434 <prvResetNextTaskUnblockTime+0x38>)
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d104      	bne.n	8018416 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801840c:	4b0a      	ldr	r3, [pc, #40]	; (8018438 <prvResetNextTaskUnblockTime+0x3c>)
 801840e:	f04f 32ff 	mov.w	r2, #4294967295
 8018412:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018414:	e008      	b.n	8018428 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018416:	4b07      	ldr	r3, [pc, #28]	; (8018434 <prvResetNextTaskUnblockTime+0x38>)
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	68db      	ldr	r3, [r3, #12]
 801841c:	68db      	ldr	r3, [r3, #12]
 801841e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	685b      	ldr	r3, [r3, #4]
 8018424:	4a04      	ldr	r2, [pc, #16]	; (8018438 <prvResetNextTaskUnblockTime+0x3c>)
 8018426:	6013      	str	r3, [r2, #0]
}
 8018428:	bf00      	nop
 801842a:	370c      	adds	r7, #12
 801842c:	46bd      	mov	sp, r7
 801842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018432:	4770      	bx	lr
 8018434:	20006190 	.word	0x20006190
 8018438:	200061f8 	.word	0x200061f8

0801843c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801843c:	b480      	push	{r7}
 801843e:	b083      	sub	sp, #12
 8018440:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8018442:	4b05      	ldr	r3, [pc, #20]	; (8018458 <xTaskGetCurrentTaskHandle+0x1c>)
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018448:	687b      	ldr	r3, [r7, #4]
	}
 801844a:	4618      	mov	r0, r3
 801844c:	370c      	adds	r7, #12
 801844e:	46bd      	mov	sp, r7
 8018450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018454:	4770      	bx	lr
 8018456:	bf00      	nop
 8018458:	20005d04 	.word	0x20005d04

0801845c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801845c:	b480      	push	{r7}
 801845e:	b083      	sub	sp, #12
 8018460:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018462:	4b0b      	ldr	r3, [pc, #44]	; (8018490 <xTaskGetSchedulerState+0x34>)
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d102      	bne.n	8018470 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801846a:	2301      	movs	r3, #1
 801846c:	607b      	str	r3, [r7, #4]
 801846e:	e008      	b.n	8018482 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018470:	4b08      	ldr	r3, [pc, #32]	; (8018494 <xTaskGetSchedulerState+0x38>)
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	2b00      	cmp	r3, #0
 8018476:	d102      	bne.n	801847e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018478:	2302      	movs	r3, #2
 801847a:	607b      	str	r3, [r7, #4]
 801847c:	e001      	b.n	8018482 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801847e:	2300      	movs	r3, #0
 8018480:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018482:	687b      	ldr	r3, [r7, #4]
	}
 8018484:	4618      	mov	r0, r3
 8018486:	370c      	adds	r7, #12
 8018488:	46bd      	mov	sp, r7
 801848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801848e:	4770      	bx	lr
 8018490:	200061e4 	.word	0x200061e4
 8018494:	20006200 	.word	0x20006200

08018498 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018498:	b580      	push	{r7, lr}
 801849a:	b084      	sub	sp, #16
 801849c:	af00      	add	r7, sp, #0
 801849e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80184a4:	2300      	movs	r3, #0
 80184a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d051      	beq.n	8018552 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80184ae:	68bb      	ldr	r3, [r7, #8]
 80184b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184b2:	4b2a      	ldr	r3, [pc, #168]	; (801855c <xTaskPriorityInherit+0xc4>)
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184b8:	429a      	cmp	r2, r3
 80184ba:	d241      	bcs.n	8018540 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80184bc:	68bb      	ldr	r3, [r7, #8]
 80184be:	699b      	ldr	r3, [r3, #24]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	db06      	blt.n	80184d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80184c4:	4b25      	ldr	r3, [pc, #148]	; (801855c <xTaskPriorityInherit+0xc4>)
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80184ce:	68bb      	ldr	r3, [r7, #8]
 80184d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80184d2:	68bb      	ldr	r3, [r7, #8]
 80184d4:	6959      	ldr	r1, [r3, #20]
 80184d6:	68bb      	ldr	r3, [r7, #8]
 80184d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184da:	4613      	mov	r3, r2
 80184dc:	009b      	lsls	r3, r3, #2
 80184de:	4413      	add	r3, r2
 80184e0:	009b      	lsls	r3, r3, #2
 80184e2:	4a1f      	ldr	r2, [pc, #124]	; (8018560 <xTaskPriorityInherit+0xc8>)
 80184e4:	4413      	add	r3, r2
 80184e6:	4299      	cmp	r1, r3
 80184e8:	d122      	bne.n	8018530 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80184ea:	68bb      	ldr	r3, [r7, #8]
 80184ec:	3304      	adds	r3, #4
 80184ee:	4618      	mov	r0, r3
 80184f0:	f7fe f93e 	bl	8016770 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80184f4:	4b19      	ldr	r3, [pc, #100]	; (801855c <xTaskPriorityInherit+0xc4>)
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184fa:	68bb      	ldr	r3, [r7, #8]
 80184fc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80184fe:	68bb      	ldr	r3, [r7, #8]
 8018500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018502:	4b18      	ldr	r3, [pc, #96]	; (8018564 <xTaskPriorityInherit+0xcc>)
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	429a      	cmp	r2, r3
 8018508:	d903      	bls.n	8018512 <xTaskPriorityInherit+0x7a>
 801850a:	68bb      	ldr	r3, [r7, #8]
 801850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801850e:	4a15      	ldr	r2, [pc, #84]	; (8018564 <xTaskPriorityInherit+0xcc>)
 8018510:	6013      	str	r3, [r2, #0]
 8018512:	68bb      	ldr	r3, [r7, #8]
 8018514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018516:	4613      	mov	r3, r2
 8018518:	009b      	lsls	r3, r3, #2
 801851a:	4413      	add	r3, r2
 801851c:	009b      	lsls	r3, r3, #2
 801851e:	4a10      	ldr	r2, [pc, #64]	; (8018560 <xTaskPriorityInherit+0xc8>)
 8018520:	441a      	add	r2, r3
 8018522:	68bb      	ldr	r3, [r7, #8]
 8018524:	3304      	adds	r3, #4
 8018526:	4619      	mov	r1, r3
 8018528:	4610      	mov	r0, r2
 801852a:	f7fe f8c4 	bl	80166b6 <vListInsertEnd>
 801852e:	e004      	b.n	801853a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018530:	4b0a      	ldr	r3, [pc, #40]	; (801855c <xTaskPriorityInherit+0xc4>)
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018536:	68bb      	ldr	r3, [r7, #8]
 8018538:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801853a:	2301      	movs	r3, #1
 801853c:	60fb      	str	r3, [r7, #12]
 801853e:	e008      	b.n	8018552 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018540:	68bb      	ldr	r3, [r7, #8]
 8018542:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8018544:	4b05      	ldr	r3, [pc, #20]	; (801855c <xTaskPriorityInherit+0xc4>)
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801854a:	429a      	cmp	r2, r3
 801854c:	d201      	bcs.n	8018552 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801854e:	2301      	movs	r3, #1
 8018550:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018552:	68fb      	ldr	r3, [r7, #12]
	}
 8018554:	4618      	mov	r0, r3
 8018556:	3710      	adds	r7, #16
 8018558:	46bd      	mov	sp, r7
 801855a:	bd80      	pop	{r7, pc}
 801855c:	20005d04 	.word	0x20005d04
 8018560:	20005d08 	.word	0x20005d08
 8018564:	200061e0 	.word	0x200061e0

08018568 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018568:	b580      	push	{r7, lr}
 801856a:	b086      	sub	sp, #24
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018574:	2300      	movs	r3, #0
 8018576:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d056      	beq.n	801862c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801857e:	4b2e      	ldr	r3, [pc, #184]	; (8018638 <xTaskPriorityDisinherit+0xd0>)
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	693a      	ldr	r2, [r7, #16]
 8018584:	429a      	cmp	r2, r3
 8018586:	d00a      	beq.n	801859e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801858c:	f383 8811 	msr	BASEPRI, r3
 8018590:	f3bf 8f6f 	isb	sy
 8018594:	f3bf 8f4f 	dsb	sy
 8018598:	60fb      	str	r3, [r7, #12]
}
 801859a:	bf00      	nop
 801859c:	e7fe      	b.n	801859c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801859e:	693b      	ldr	r3, [r7, #16]
 80185a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d10a      	bne.n	80185bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80185a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185aa:	f383 8811 	msr	BASEPRI, r3
 80185ae:	f3bf 8f6f 	isb	sy
 80185b2:	f3bf 8f4f 	dsb	sy
 80185b6:	60bb      	str	r3, [r7, #8]
}
 80185b8:	bf00      	nop
 80185ba:	e7fe      	b.n	80185ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80185bc:	693b      	ldr	r3, [r7, #16]
 80185be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80185c0:	1e5a      	subs	r2, r3, #1
 80185c2:	693b      	ldr	r3, [r7, #16]
 80185c4:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80185c6:	693b      	ldr	r3, [r7, #16]
 80185c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185ca:	693b      	ldr	r3, [r7, #16]
 80185cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185ce:	429a      	cmp	r2, r3
 80185d0:	d02c      	beq.n	801862c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80185d2:	693b      	ldr	r3, [r7, #16]
 80185d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d128      	bne.n	801862c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80185da:	693b      	ldr	r3, [r7, #16]
 80185dc:	3304      	adds	r3, #4
 80185de:	4618      	mov	r0, r3
 80185e0:	f7fe f8c6 	bl	8016770 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80185e4:	693b      	ldr	r3, [r7, #16]
 80185e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80185e8:	693b      	ldr	r3, [r7, #16]
 80185ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80185ec:	693b      	ldr	r3, [r7, #16]
 80185ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80185f4:	693b      	ldr	r3, [r7, #16]
 80185f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80185f8:	693b      	ldr	r3, [r7, #16]
 80185fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185fc:	4b0f      	ldr	r3, [pc, #60]	; (801863c <xTaskPriorityDisinherit+0xd4>)
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	429a      	cmp	r2, r3
 8018602:	d903      	bls.n	801860c <xTaskPriorityDisinherit+0xa4>
 8018604:	693b      	ldr	r3, [r7, #16]
 8018606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018608:	4a0c      	ldr	r2, [pc, #48]	; (801863c <xTaskPriorityDisinherit+0xd4>)
 801860a:	6013      	str	r3, [r2, #0]
 801860c:	693b      	ldr	r3, [r7, #16]
 801860e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018610:	4613      	mov	r3, r2
 8018612:	009b      	lsls	r3, r3, #2
 8018614:	4413      	add	r3, r2
 8018616:	009b      	lsls	r3, r3, #2
 8018618:	4a09      	ldr	r2, [pc, #36]	; (8018640 <xTaskPriorityDisinherit+0xd8>)
 801861a:	441a      	add	r2, r3
 801861c:	693b      	ldr	r3, [r7, #16]
 801861e:	3304      	adds	r3, #4
 8018620:	4619      	mov	r1, r3
 8018622:	4610      	mov	r0, r2
 8018624:	f7fe f847 	bl	80166b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018628:	2301      	movs	r3, #1
 801862a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801862c:	697b      	ldr	r3, [r7, #20]
	}
 801862e:	4618      	mov	r0, r3
 8018630:	3718      	adds	r7, #24
 8018632:	46bd      	mov	sp, r7
 8018634:	bd80      	pop	{r7, pc}
 8018636:	bf00      	nop
 8018638:	20005d04 	.word	0x20005d04
 801863c:	200061e0 	.word	0x200061e0
 8018640:	20005d08 	.word	0x20005d08

08018644 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018644:	b580      	push	{r7, lr}
 8018646:	b088      	sub	sp, #32
 8018648:	af00      	add	r7, sp, #0
 801864a:	6078      	str	r0, [r7, #4]
 801864c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018652:	2301      	movs	r3, #1
 8018654:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d06a      	beq.n	8018732 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801865c:	69bb      	ldr	r3, [r7, #24]
 801865e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018660:	2b00      	cmp	r3, #0
 8018662:	d10a      	bne.n	801867a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8018664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018668:	f383 8811 	msr	BASEPRI, r3
 801866c:	f3bf 8f6f 	isb	sy
 8018670:	f3bf 8f4f 	dsb	sy
 8018674:	60fb      	str	r3, [r7, #12]
}
 8018676:	bf00      	nop
 8018678:	e7fe      	b.n	8018678 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801867a:	69bb      	ldr	r3, [r7, #24]
 801867c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801867e:	683a      	ldr	r2, [r7, #0]
 8018680:	429a      	cmp	r2, r3
 8018682:	d902      	bls.n	801868a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018684:	683b      	ldr	r3, [r7, #0]
 8018686:	61fb      	str	r3, [r7, #28]
 8018688:	e002      	b.n	8018690 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801868a:	69bb      	ldr	r3, [r7, #24]
 801868c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801868e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018690:	69bb      	ldr	r3, [r7, #24]
 8018692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018694:	69fa      	ldr	r2, [r7, #28]
 8018696:	429a      	cmp	r2, r3
 8018698:	d04b      	beq.n	8018732 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801869a:	69bb      	ldr	r3, [r7, #24]
 801869c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801869e:	697a      	ldr	r2, [r7, #20]
 80186a0:	429a      	cmp	r2, r3
 80186a2:	d146      	bne.n	8018732 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80186a4:	4b25      	ldr	r3, [pc, #148]	; (801873c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	69ba      	ldr	r2, [r7, #24]
 80186aa:	429a      	cmp	r2, r3
 80186ac:	d10a      	bne.n	80186c4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80186ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186b2:	f383 8811 	msr	BASEPRI, r3
 80186b6:	f3bf 8f6f 	isb	sy
 80186ba:	f3bf 8f4f 	dsb	sy
 80186be:	60bb      	str	r3, [r7, #8]
}
 80186c0:	bf00      	nop
 80186c2:	e7fe      	b.n	80186c2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80186c4:	69bb      	ldr	r3, [r7, #24]
 80186c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80186ca:	69bb      	ldr	r3, [r7, #24]
 80186cc:	69fa      	ldr	r2, [r7, #28]
 80186ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80186d0:	69bb      	ldr	r3, [r7, #24]
 80186d2:	699b      	ldr	r3, [r3, #24]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	db04      	blt.n	80186e2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80186d8:	69fb      	ldr	r3, [r7, #28]
 80186da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80186de:	69bb      	ldr	r3, [r7, #24]
 80186e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80186e2:	69bb      	ldr	r3, [r7, #24]
 80186e4:	6959      	ldr	r1, [r3, #20]
 80186e6:	693a      	ldr	r2, [r7, #16]
 80186e8:	4613      	mov	r3, r2
 80186ea:	009b      	lsls	r3, r3, #2
 80186ec:	4413      	add	r3, r2
 80186ee:	009b      	lsls	r3, r3, #2
 80186f0:	4a13      	ldr	r2, [pc, #76]	; (8018740 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80186f2:	4413      	add	r3, r2
 80186f4:	4299      	cmp	r1, r3
 80186f6:	d11c      	bne.n	8018732 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80186f8:	69bb      	ldr	r3, [r7, #24]
 80186fa:	3304      	adds	r3, #4
 80186fc:	4618      	mov	r0, r3
 80186fe:	f7fe f837 	bl	8016770 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018702:	69bb      	ldr	r3, [r7, #24]
 8018704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018706:	4b0f      	ldr	r3, [pc, #60]	; (8018744 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	429a      	cmp	r2, r3
 801870c:	d903      	bls.n	8018716 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801870e:	69bb      	ldr	r3, [r7, #24]
 8018710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018712:	4a0c      	ldr	r2, [pc, #48]	; (8018744 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018714:	6013      	str	r3, [r2, #0]
 8018716:	69bb      	ldr	r3, [r7, #24]
 8018718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801871a:	4613      	mov	r3, r2
 801871c:	009b      	lsls	r3, r3, #2
 801871e:	4413      	add	r3, r2
 8018720:	009b      	lsls	r3, r3, #2
 8018722:	4a07      	ldr	r2, [pc, #28]	; (8018740 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018724:	441a      	add	r2, r3
 8018726:	69bb      	ldr	r3, [r7, #24]
 8018728:	3304      	adds	r3, #4
 801872a:	4619      	mov	r1, r3
 801872c:	4610      	mov	r0, r2
 801872e:	f7fd ffc2 	bl	80166b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018732:	bf00      	nop
 8018734:	3720      	adds	r7, #32
 8018736:	46bd      	mov	sp, r7
 8018738:	bd80      	pop	{r7, pc}
 801873a:	bf00      	nop
 801873c:	20005d04 	.word	0x20005d04
 8018740:	20005d08 	.word	0x20005d08
 8018744:	200061e0 	.word	0x200061e0

08018748 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8018748:	b480      	push	{r7}
 801874a:	b083      	sub	sp, #12
 801874c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801874e:	4b09      	ldr	r3, [pc, #36]	; (8018774 <uxTaskResetEventItemValue+0x2c>)
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	699b      	ldr	r3, [r3, #24]
 8018754:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018756:	4b07      	ldr	r3, [pc, #28]	; (8018774 <uxTaskResetEventItemValue+0x2c>)
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801875c:	4b05      	ldr	r3, [pc, #20]	; (8018774 <uxTaskResetEventItemValue+0x2c>)
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8018764:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8018766:	687b      	ldr	r3, [r7, #4]
}
 8018768:	4618      	mov	r0, r3
 801876a:	370c      	adds	r7, #12
 801876c:	46bd      	mov	sp, r7
 801876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018772:	4770      	bx	lr
 8018774:	20005d04 	.word	0x20005d04

08018778 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018778:	b480      	push	{r7}
 801877a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801877c:	4b07      	ldr	r3, [pc, #28]	; (801879c <pvTaskIncrementMutexHeldCount+0x24>)
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	2b00      	cmp	r3, #0
 8018782:	d004      	beq.n	801878e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018784:	4b05      	ldr	r3, [pc, #20]	; (801879c <pvTaskIncrementMutexHeldCount+0x24>)
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801878a:	3201      	adds	r2, #1
 801878c:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 801878e:	4b03      	ldr	r3, [pc, #12]	; (801879c <pvTaskIncrementMutexHeldCount+0x24>)
 8018790:	681b      	ldr	r3, [r3, #0]
	}
 8018792:	4618      	mov	r0, r3
 8018794:	46bd      	mov	sp, r7
 8018796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801879a:	4770      	bx	lr
 801879c:	20005d04 	.word	0x20005d04

080187a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b084      	sub	sp, #16
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
 80187a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80187aa:	4b21      	ldr	r3, [pc, #132]	; (8018830 <prvAddCurrentTaskToDelayedList+0x90>)
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80187b0:	4b20      	ldr	r3, [pc, #128]	; (8018834 <prvAddCurrentTaskToDelayedList+0x94>)
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	3304      	adds	r3, #4
 80187b6:	4618      	mov	r0, r3
 80187b8:	f7fd ffda 	bl	8016770 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187c2:	d10a      	bne.n	80187da <prvAddCurrentTaskToDelayedList+0x3a>
 80187c4:	683b      	ldr	r3, [r7, #0]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d007      	beq.n	80187da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80187ca:	4b1a      	ldr	r3, [pc, #104]	; (8018834 <prvAddCurrentTaskToDelayedList+0x94>)
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	3304      	adds	r3, #4
 80187d0:	4619      	mov	r1, r3
 80187d2:	4819      	ldr	r0, [pc, #100]	; (8018838 <prvAddCurrentTaskToDelayedList+0x98>)
 80187d4:	f7fd ff6f 	bl	80166b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80187d8:	e026      	b.n	8018828 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80187da:	68fa      	ldr	r2, [r7, #12]
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	4413      	add	r3, r2
 80187e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80187e2:	4b14      	ldr	r3, [pc, #80]	; (8018834 <prvAddCurrentTaskToDelayedList+0x94>)
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	68ba      	ldr	r2, [r7, #8]
 80187e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80187ea:	68ba      	ldr	r2, [r7, #8]
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	429a      	cmp	r2, r3
 80187f0:	d209      	bcs.n	8018806 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80187f2:	4b12      	ldr	r3, [pc, #72]	; (801883c <prvAddCurrentTaskToDelayedList+0x9c>)
 80187f4:	681a      	ldr	r2, [r3, #0]
 80187f6:	4b0f      	ldr	r3, [pc, #60]	; (8018834 <prvAddCurrentTaskToDelayedList+0x94>)
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	3304      	adds	r3, #4
 80187fc:	4619      	mov	r1, r3
 80187fe:	4610      	mov	r0, r2
 8018800:	f7fd ff7d 	bl	80166fe <vListInsert>
}
 8018804:	e010      	b.n	8018828 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018806:	4b0e      	ldr	r3, [pc, #56]	; (8018840 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018808:	681a      	ldr	r2, [r3, #0]
 801880a:	4b0a      	ldr	r3, [pc, #40]	; (8018834 <prvAddCurrentTaskToDelayedList+0x94>)
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	3304      	adds	r3, #4
 8018810:	4619      	mov	r1, r3
 8018812:	4610      	mov	r0, r2
 8018814:	f7fd ff73 	bl	80166fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018818:	4b0a      	ldr	r3, [pc, #40]	; (8018844 <prvAddCurrentTaskToDelayedList+0xa4>)
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	68ba      	ldr	r2, [r7, #8]
 801881e:	429a      	cmp	r2, r3
 8018820:	d202      	bcs.n	8018828 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018822:	4a08      	ldr	r2, [pc, #32]	; (8018844 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018824:	68bb      	ldr	r3, [r7, #8]
 8018826:	6013      	str	r3, [r2, #0]
}
 8018828:	bf00      	nop
 801882a:	3710      	adds	r7, #16
 801882c:	46bd      	mov	sp, r7
 801882e:	bd80      	pop	{r7, pc}
 8018830:	200061dc 	.word	0x200061dc
 8018834:	20005d04 	.word	0x20005d04
 8018838:	200061c4 	.word	0x200061c4
 801883c:	20006194 	.word	0x20006194
 8018840:	20006190 	.word	0x20006190
 8018844:	200061f8 	.word	0x200061f8

08018848 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b08a      	sub	sp, #40	; 0x28
 801884c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801884e:	2300      	movs	r3, #0
 8018850:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018852:	f000 fba1 	bl	8018f98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018856:	4b1c      	ldr	r3, [pc, #112]	; (80188c8 <xTimerCreateTimerTask+0x80>)
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d021      	beq.n	80188a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801885e:	2300      	movs	r3, #0
 8018860:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018862:	2300      	movs	r3, #0
 8018864:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018866:	1d3a      	adds	r2, r7, #4
 8018868:	f107 0108 	add.w	r1, r7, #8
 801886c:	f107 030c 	add.w	r3, r7, #12
 8018870:	4618      	mov	r0, r3
 8018872:	f7fd fc6d 	bl	8016150 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018876:	6879      	ldr	r1, [r7, #4]
 8018878:	68bb      	ldr	r3, [r7, #8]
 801887a:	68fa      	ldr	r2, [r7, #12]
 801887c:	9202      	str	r2, [sp, #8]
 801887e:	9301      	str	r3, [sp, #4]
 8018880:	2302      	movs	r3, #2
 8018882:	9300      	str	r3, [sp, #0]
 8018884:	2300      	movs	r3, #0
 8018886:	460a      	mov	r2, r1
 8018888:	4910      	ldr	r1, [pc, #64]	; (80188cc <xTimerCreateTimerTask+0x84>)
 801888a:	4811      	ldr	r0, [pc, #68]	; (80188d0 <xTimerCreateTimerTask+0x88>)
 801888c:	f7fe ff1a 	bl	80176c4 <xTaskCreateStatic>
 8018890:	4603      	mov	r3, r0
 8018892:	4a10      	ldr	r2, [pc, #64]	; (80188d4 <xTimerCreateTimerTask+0x8c>)
 8018894:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018896:	4b0f      	ldr	r3, [pc, #60]	; (80188d4 <xTimerCreateTimerTask+0x8c>)
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	2b00      	cmp	r3, #0
 801889c:	d001      	beq.n	80188a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801889e:	2301      	movs	r3, #1
 80188a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80188a2:	697b      	ldr	r3, [r7, #20]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d10a      	bne.n	80188be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80188a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188ac:	f383 8811 	msr	BASEPRI, r3
 80188b0:	f3bf 8f6f 	isb	sy
 80188b4:	f3bf 8f4f 	dsb	sy
 80188b8:	613b      	str	r3, [r7, #16]
}
 80188ba:	bf00      	nop
 80188bc:	e7fe      	b.n	80188bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80188be:	697b      	ldr	r3, [r7, #20]
}
 80188c0:	4618      	mov	r0, r3
 80188c2:	3718      	adds	r7, #24
 80188c4:	46bd      	mov	sp, r7
 80188c6:	bd80      	pop	{r7, pc}
 80188c8:	20006234 	.word	0x20006234
 80188cc:	08020534 	.word	0x08020534
 80188d0:	08018b41 	.word	0x08018b41
 80188d4:	20006238 	.word	0x20006238

080188d8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b088      	sub	sp, #32
 80188dc:	af02      	add	r7, sp, #8
 80188de:	60f8      	str	r0, [r7, #12]
 80188e0:	60b9      	str	r1, [r7, #8]
 80188e2:	607a      	str	r2, [r7, #4]
 80188e4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80188e6:	202c      	movs	r0, #44	; 0x2c
 80188e8:	f000 fe26 	bl	8019538 <pvPortMalloc>
 80188ec:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80188ee:	697b      	ldr	r3, [r7, #20]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d00d      	beq.n	8018910 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80188f4:	697b      	ldr	r3, [r7, #20]
 80188f6:	2200      	movs	r2, #0
 80188f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80188fc:	697b      	ldr	r3, [r7, #20]
 80188fe:	9301      	str	r3, [sp, #4]
 8018900:	6a3b      	ldr	r3, [r7, #32]
 8018902:	9300      	str	r3, [sp, #0]
 8018904:	683b      	ldr	r3, [r7, #0]
 8018906:	687a      	ldr	r2, [r7, #4]
 8018908:	68b9      	ldr	r1, [r7, #8]
 801890a:	68f8      	ldr	r0, [r7, #12]
 801890c:	f000 f843 	bl	8018996 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8018910:	697b      	ldr	r3, [r7, #20]
	}
 8018912:	4618      	mov	r0, r3
 8018914:	3718      	adds	r7, #24
 8018916:	46bd      	mov	sp, r7
 8018918:	bd80      	pop	{r7, pc}

0801891a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801891a:	b580      	push	{r7, lr}
 801891c:	b08a      	sub	sp, #40	; 0x28
 801891e:	af02      	add	r7, sp, #8
 8018920:	60f8      	str	r0, [r7, #12]
 8018922:	60b9      	str	r1, [r7, #8]
 8018924:	607a      	str	r2, [r7, #4]
 8018926:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8018928:	232c      	movs	r3, #44	; 0x2c
 801892a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 801892c:	693b      	ldr	r3, [r7, #16]
 801892e:	2b2c      	cmp	r3, #44	; 0x2c
 8018930:	d00a      	beq.n	8018948 <xTimerCreateStatic+0x2e>
	__asm volatile
 8018932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018936:	f383 8811 	msr	BASEPRI, r3
 801893a:	f3bf 8f6f 	isb	sy
 801893e:	f3bf 8f4f 	dsb	sy
 8018942:	61bb      	str	r3, [r7, #24]
}
 8018944:	bf00      	nop
 8018946:	e7fe      	b.n	8018946 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018948:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801894a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801894c:	2b00      	cmp	r3, #0
 801894e:	d10a      	bne.n	8018966 <xTimerCreateStatic+0x4c>
	__asm volatile
 8018950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018954:	f383 8811 	msr	BASEPRI, r3
 8018958:	f3bf 8f6f 	isb	sy
 801895c:	f3bf 8f4f 	dsb	sy
 8018960:	617b      	str	r3, [r7, #20]
}
 8018962:	bf00      	nop
 8018964:	e7fe      	b.n	8018964 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8018966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018968:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801896a:	69fb      	ldr	r3, [r7, #28]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d00d      	beq.n	801898c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8018970:	69fb      	ldr	r3, [r7, #28]
 8018972:	2202      	movs	r2, #2
 8018974:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8018978:	69fb      	ldr	r3, [r7, #28]
 801897a:	9301      	str	r3, [sp, #4]
 801897c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801897e:	9300      	str	r3, [sp, #0]
 8018980:	683b      	ldr	r3, [r7, #0]
 8018982:	687a      	ldr	r2, [r7, #4]
 8018984:	68b9      	ldr	r1, [r7, #8]
 8018986:	68f8      	ldr	r0, [r7, #12]
 8018988:	f000 f805 	bl	8018996 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801898c:	69fb      	ldr	r3, [r7, #28]
	}
 801898e:	4618      	mov	r0, r3
 8018990:	3720      	adds	r7, #32
 8018992:	46bd      	mov	sp, r7
 8018994:	bd80      	pop	{r7, pc}

08018996 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8018996:	b580      	push	{r7, lr}
 8018998:	b086      	sub	sp, #24
 801899a:	af00      	add	r7, sp, #0
 801899c:	60f8      	str	r0, [r7, #12]
 801899e:	60b9      	str	r1, [r7, #8]
 80189a0:	607a      	str	r2, [r7, #4]
 80189a2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80189a4:	68bb      	ldr	r3, [r7, #8]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d10a      	bne.n	80189c0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80189aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189ae:	f383 8811 	msr	BASEPRI, r3
 80189b2:	f3bf 8f6f 	isb	sy
 80189b6:	f3bf 8f4f 	dsb	sy
 80189ba:	617b      	str	r3, [r7, #20]
}
 80189bc:	bf00      	nop
 80189be:	e7fe      	b.n	80189be <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80189c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d01e      	beq.n	8018a04 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80189c6:	f000 fae7 	bl	8018f98 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80189ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189cc:	68fa      	ldr	r2, [r7, #12]
 80189ce:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80189d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189d2:	68ba      	ldr	r2, [r7, #8]
 80189d4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80189d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189d8:	683a      	ldr	r2, [r7, #0]
 80189da:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80189dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189de:	6a3a      	ldr	r2, [r7, #32]
 80189e0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80189e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189e4:	3304      	adds	r3, #4
 80189e6:	4618      	mov	r0, r3
 80189e8:	f7fd fe58 	bl	801669c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d008      	beq.n	8018a04 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80189f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80189f8:	f043 0304 	orr.w	r3, r3, #4
 80189fc:	b2da      	uxtb	r2, r3
 80189fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8018a04:	bf00      	nop
 8018a06:	3718      	adds	r7, #24
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	bd80      	pop	{r7, pc}

08018a0c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018a0c:	b580      	push	{r7, lr}
 8018a0e:	b08a      	sub	sp, #40	; 0x28
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	60f8      	str	r0, [r7, #12]
 8018a14:	60b9      	str	r1, [r7, #8]
 8018a16:	607a      	str	r2, [r7, #4]
 8018a18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d10a      	bne.n	8018a3a <xTimerGenericCommand+0x2e>
	__asm volatile
 8018a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a28:	f383 8811 	msr	BASEPRI, r3
 8018a2c:	f3bf 8f6f 	isb	sy
 8018a30:	f3bf 8f4f 	dsb	sy
 8018a34:	623b      	str	r3, [r7, #32]
}
 8018a36:	bf00      	nop
 8018a38:	e7fe      	b.n	8018a38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018a3a:	4b1a      	ldr	r3, [pc, #104]	; (8018aa4 <xTimerGenericCommand+0x98>)
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d02a      	beq.n	8018a98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018a42:	68bb      	ldr	r3, [r7, #8]
 8018a44:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018a4e:	68bb      	ldr	r3, [r7, #8]
 8018a50:	2b05      	cmp	r3, #5
 8018a52:	dc18      	bgt.n	8018a86 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018a54:	f7ff fd02 	bl	801845c <xTaskGetSchedulerState>
 8018a58:	4603      	mov	r3, r0
 8018a5a:	2b02      	cmp	r3, #2
 8018a5c:	d109      	bne.n	8018a72 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018a5e:	4b11      	ldr	r3, [pc, #68]	; (8018aa4 <xTimerGenericCommand+0x98>)
 8018a60:	6818      	ldr	r0, [r3, #0]
 8018a62:	f107 0110 	add.w	r1, r7, #16
 8018a66:	2300      	movs	r3, #0
 8018a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018a6a:	f7fe f89f 	bl	8016bac <xQueueGenericSend>
 8018a6e:	6278      	str	r0, [r7, #36]	; 0x24
 8018a70:	e012      	b.n	8018a98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018a72:	4b0c      	ldr	r3, [pc, #48]	; (8018aa4 <xTimerGenericCommand+0x98>)
 8018a74:	6818      	ldr	r0, [r3, #0]
 8018a76:	f107 0110 	add.w	r1, r7, #16
 8018a7a:	2300      	movs	r3, #0
 8018a7c:	2200      	movs	r2, #0
 8018a7e:	f7fe f895 	bl	8016bac <xQueueGenericSend>
 8018a82:	6278      	str	r0, [r7, #36]	; 0x24
 8018a84:	e008      	b.n	8018a98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018a86:	4b07      	ldr	r3, [pc, #28]	; (8018aa4 <xTimerGenericCommand+0x98>)
 8018a88:	6818      	ldr	r0, [r3, #0]
 8018a8a:	f107 0110 	add.w	r1, r7, #16
 8018a8e:	2300      	movs	r3, #0
 8018a90:	683a      	ldr	r2, [r7, #0]
 8018a92:	f7fe f989 	bl	8016da8 <xQueueGenericSendFromISR>
 8018a96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	3728      	adds	r7, #40	; 0x28
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	bd80      	pop	{r7, pc}
 8018aa2:	bf00      	nop
 8018aa4:	20006234 	.word	0x20006234

08018aa8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b088      	sub	sp, #32
 8018aac:	af02      	add	r7, sp, #8
 8018aae:	6078      	str	r0, [r7, #4]
 8018ab0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ab2:	4b22      	ldr	r3, [pc, #136]	; (8018b3c <prvProcessExpiredTimer+0x94>)
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	68db      	ldr	r3, [r3, #12]
 8018ab8:	68db      	ldr	r3, [r3, #12]
 8018aba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018abc:	697b      	ldr	r3, [r7, #20]
 8018abe:	3304      	adds	r3, #4
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f7fd fe55 	bl	8016770 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018ac6:	697b      	ldr	r3, [r7, #20]
 8018ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018acc:	f003 0304 	and.w	r3, r3, #4
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d022      	beq.n	8018b1a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018ad4:	697b      	ldr	r3, [r7, #20]
 8018ad6:	699a      	ldr	r2, [r3, #24]
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	18d1      	adds	r1, r2, r3
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	683a      	ldr	r2, [r7, #0]
 8018ae0:	6978      	ldr	r0, [r7, #20]
 8018ae2:	f000 f8d1 	bl	8018c88 <prvInsertTimerInActiveList>
 8018ae6:	4603      	mov	r3, r0
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d01f      	beq.n	8018b2c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018aec:	2300      	movs	r3, #0
 8018aee:	9300      	str	r3, [sp, #0]
 8018af0:	2300      	movs	r3, #0
 8018af2:	687a      	ldr	r2, [r7, #4]
 8018af4:	2100      	movs	r1, #0
 8018af6:	6978      	ldr	r0, [r7, #20]
 8018af8:	f7ff ff88 	bl	8018a0c <xTimerGenericCommand>
 8018afc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018afe:	693b      	ldr	r3, [r7, #16]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d113      	bne.n	8018b2c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b08:	f383 8811 	msr	BASEPRI, r3
 8018b0c:	f3bf 8f6f 	isb	sy
 8018b10:	f3bf 8f4f 	dsb	sy
 8018b14:	60fb      	str	r3, [r7, #12]
}
 8018b16:	bf00      	nop
 8018b18:	e7fe      	b.n	8018b18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018b1a:	697b      	ldr	r3, [r7, #20]
 8018b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b20:	f023 0301 	bic.w	r3, r3, #1
 8018b24:	b2da      	uxtb	r2, r3
 8018b26:	697b      	ldr	r3, [r7, #20]
 8018b28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018b2c:	697b      	ldr	r3, [r7, #20]
 8018b2e:	6a1b      	ldr	r3, [r3, #32]
 8018b30:	6978      	ldr	r0, [r7, #20]
 8018b32:	4798      	blx	r3
}
 8018b34:	bf00      	nop
 8018b36:	3718      	adds	r7, #24
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	bd80      	pop	{r7, pc}
 8018b3c:	2000622c 	.word	0x2000622c

08018b40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b084      	sub	sp, #16
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018b48:	f107 0308 	add.w	r3, r7, #8
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f000 f857 	bl	8018c00 <prvGetNextExpireTime>
 8018b52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018b54:	68bb      	ldr	r3, [r7, #8]
 8018b56:	4619      	mov	r1, r3
 8018b58:	68f8      	ldr	r0, [r7, #12]
 8018b5a:	f000 f803 	bl	8018b64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018b5e:	f000 f8d5 	bl	8018d0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018b62:	e7f1      	b.n	8018b48 <prvTimerTask+0x8>

08018b64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018b64:	b580      	push	{r7, lr}
 8018b66:	b084      	sub	sp, #16
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]
 8018b6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018b6e:	f7fe ffe5 	bl	8017b3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018b72:	f107 0308 	add.w	r3, r7, #8
 8018b76:	4618      	mov	r0, r3
 8018b78:	f000 f866 	bl	8018c48 <prvSampleTimeNow>
 8018b7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018b7e:	68bb      	ldr	r3, [r7, #8]
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d130      	bne.n	8018be6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018b84:	683b      	ldr	r3, [r7, #0]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d10a      	bne.n	8018ba0 <prvProcessTimerOrBlockTask+0x3c>
 8018b8a:	687a      	ldr	r2, [r7, #4]
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	429a      	cmp	r2, r3
 8018b90:	d806      	bhi.n	8018ba0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018b92:	f7fe ffe1 	bl	8017b58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018b96:	68f9      	ldr	r1, [r7, #12]
 8018b98:	6878      	ldr	r0, [r7, #4]
 8018b9a:	f7ff ff85 	bl	8018aa8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018b9e:	e024      	b.n	8018bea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018ba0:	683b      	ldr	r3, [r7, #0]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d008      	beq.n	8018bb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018ba6:	4b13      	ldr	r3, [pc, #76]	; (8018bf4 <prvProcessTimerOrBlockTask+0x90>)
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d101      	bne.n	8018bb4 <prvProcessTimerOrBlockTask+0x50>
 8018bb0:	2301      	movs	r3, #1
 8018bb2:	e000      	b.n	8018bb6 <prvProcessTimerOrBlockTask+0x52>
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018bb8:	4b0f      	ldr	r3, [pc, #60]	; (8018bf8 <prvProcessTimerOrBlockTask+0x94>)
 8018bba:	6818      	ldr	r0, [r3, #0]
 8018bbc:	687a      	ldr	r2, [r7, #4]
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	1ad3      	subs	r3, r2, r3
 8018bc2:	683a      	ldr	r2, [r7, #0]
 8018bc4:	4619      	mov	r1, r3
 8018bc6:	f7fe fd49 	bl	801765c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018bca:	f7fe ffc5 	bl	8017b58 <xTaskResumeAll>
 8018bce:	4603      	mov	r3, r0
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d10a      	bne.n	8018bea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018bd4:	4b09      	ldr	r3, [pc, #36]	; (8018bfc <prvProcessTimerOrBlockTask+0x98>)
 8018bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018bda:	601a      	str	r2, [r3, #0]
 8018bdc:	f3bf 8f4f 	dsb	sy
 8018be0:	f3bf 8f6f 	isb	sy
}
 8018be4:	e001      	b.n	8018bea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018be6:	f7fe ffb7 	bl	8017b58 <xTaskResumeAll>
}
 8018bea:	bf00      	nop
 8018bec:	3710      	adds	r7, #16
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	bd80      	pop	{r7, pc}
 8018bf2:	bf00      	nop
 8018bf4:	20006230 	.word	0x20006230
 8018bf8:	20006234 	.word	0x20006234
 8018bfc:	e000ed04 	.word	0xe000ed04

08018c00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018c00:	b480      	push	{r7}
 8018c02:	b085      	sub	sp, #20
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018c08:	4b0e      	ldr	r3, [pc, #56]	; (8018c44 <prvGetNextExpireTime+0x44>)
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d101      	bne.n	8018c16 <prvGetNextExpireTime+0x16>
 8018c12:	2201      	movs	r2, #1
 8018c14:	e000      	b.n	8018c18 <prvGetNextExpireTime+0x18>
 8018c16:	2200      	movs	r2, #0
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d105      	bne.n	8018c30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018c24:	4b07      	ldr	r3, [pc, #28]	; (8018c44 <prvGetNextExpireTime+0x44>)
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	68db      	ldr	r3, [r3, #12]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	60fb      	str	r3, [r7, #12]
 8018c2e:	e001      	b.n	8018c34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018c30:	2300      	movs	r3, #0
 8018c32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018c34:	68fb      	ldr	r3, [r7, #12]
}
 8018c36:	4618      	mov	r0, r3
 8018c38:	3714      	adds	r7, #20
 8018c3a:	46bd      	mov	sp, r7
 8018c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c40:	4770      	bx	lr
 8018c42:	bf00      	nop
 8018c44:	2000622c 	.word	0x2000622c

08018c48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b084      	sub	sp, #16
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018c50:	f7ff f820 	bl	8017c94 <xTaskGetTickCount>
 8018c54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018c56:	4b0b      	ldr	r3, [pc, #44]	; (8018c84 <prvSampleTimeNow+0x3c>)
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	68fa      	ldr	r2, [r7, #12]
 8018c5c:	429a      	cmp	r2, r3
 8018c5e:	d205      	bcs.n	8018c6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018c60:	f000 f936 	bl	8018ed0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	2201      	movs	r2, #1
 8018c68:	601a      	str	r2, [r3, #0]
 8018c6a:	e002      	b.n	8018c72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	2200      	movs	r2, #0
 8018c70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018c72:	4a04      	ldr	r2, [pc, #16]	; (8018c84 <prvSampleTimeNow+0x3c>)
 8018c74:	68fb      	ldr	r3, [r7, #12]
 8018c76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018c78:	68fb      	ldr	r3, [r7, #12]
}
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	3710      	adds	r7, #16
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	bd80      	pop	{r7, pc}
 8018c82:	bf00      	nop
 8018c84:	2000623c 	.word	0x2000623c

08018c88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b086      	sub	sp, #24
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	60f8      	str	r0, [r7, #12]
 8018c90:	60b9      	str	r1, [r7, #8]
 8018c92:	607a      	str	r2, [r7, #4]
 8018c94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018c96:	2300      	movs	r3, #0
 8018c98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	68ba      	ldr	r2, [r7, #8]
 8018c9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	68fa      	ldr	r2, [r7, #12]
 8018ca4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018ca6:	68ba      	ldr	r2, [r7, #8]
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	429a      	cmp	r2, r3
 8018cac:	d812      	bhi.n	8018cd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018cae:	687a      	ldr	r2, [r7, #4]
 8018cb0:	683b      	ldr	r3, [r7, #0]
 8018cb2:	1ad2      	subs	r2, r2, r3
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	699b      	ldr	r3, [r3, #24]
 8018cb8:	429a      	cmp	r2, r3
 8018cba:	d302      	bcc.n	8018cc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018cbc:	2301      	movs	r3, #1
 8018cbe:	617b      	str	r3, [r7, #20]
 8018cc0:	e01b      	b.n	8018cfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018cc2:	4b10      	ldr	r3, [pc, #64]	; (8018d04 <prvInsertTimerInActiveList+0x7c>)
 8018cc4:	681a      	ldr	r2, [r3, #0]
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	3304      	adds	r3, #4
 8018cca:	4619      	mov	r1, r3
 8018ccc:	4610      	mov	r0, r2
 8018cce:	f7fd fd16 	bl	80166fe <vListInsert>
 8018cd2:	e012      	b.n	8018cfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018cd4:	687a      	ldr	r2, [r7, #4]
 8018cd6:	683b      	ldr	r3, [r7, #0]
 8018cd8:	429a      	cmp	r2, r3
 8018cda:	d206      	bcs.n	8018cea <prvInsertTimerInActiveList+0x62>
 8018cdc:	68ba      	ldr	r2, [r7, #8]
 8018cde:	683b      	ldr	r3, [r7, #0]
 8018ce0:	429a      	cmp	r2, r3
 8018ce2:	d302      	bcc.n	8018cea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018ce4:	2301      	movs	r3, #1
 8018ce6:	617b      	str	r3, [r7, #20]
 8018ce8:	e007      	b.n	8018cfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018cea:	4b07      	ldr	r3, [pc, #28]	; (8018d08 <prvInsertTimerInActiveList+0x80>)
 8018cec:	681a      	ldr	r2, [r3, #0]
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	3304      	adds	r3, #4
 8018cf2:	4619      	mov	r1, r3
 8018cf4:	4610      	mov	r0, r2
 8018cf6:	f7fd fd02 	bl	80166fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018cfa:	697b      	ldr	r3, [r7, #20]
}
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	3718      	adds	r7, #24
 8018d00:	46bd      	mov	sp, r7
 8018d02:	bd80      	pop	{r7, pc}
 8018d04:	20006230 	.word	0x20006230
 8018d08:	2000622c 	.word	0x2000622c

08018d0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	b08e      	sub	sp, #56	; 0x38
 8018d10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018d12:	e0ca      	b.n	8018eaa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	da18      	bge.n	8018d4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018d1a:	1d3b      	adds	r3, r7, #4
 8018d1c:	3304      	adds	r3, #4
 8018d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d10a      	bne.n	8018d3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d2a:	f383 8811 	msr	BASEPRI, r3
 8018d2e:	f3bf 8f6f 	isb	sy
 8018d32:	f3bf 8f4f 	dsb	sy
 8018d36:	61fb      	str	r3, [r7, #28]
}
 8018d38:	bf00      	nop
 8018d3a:	e7fe      	b.n	8018d3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018d42:	6850      	ldr	r0, [r2, #4]
 8018d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018d46:	6892      	ldr	r2, [r2, #8]
 8018d48:	4611      	mov	r1, r2
 8018d4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	f2c0 80aa 	blt.w	8018ea8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d5a:	695b      	ldr	r3, [r3, #20]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d004      	beq.n	8018d6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d62:	3304      	adds	r3, #4
 8018d64:	4618      	mov	r0, r3
 8018d66:	f7fd fd03 	bl	8016770 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018d6a:	463b      	mov	r3, r7
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	f7ff ff6b 	bl	8018c48 <prvSampleTimeNow>
 8018d72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	2b09      	cmp	r3, #9
 8018d78:	f200 8097 	bhi.w	8018eaa <prvProcessReceivedCommands+0x19e>
 8018d7c:	a201      	add	r2, pc, #4	; (adr r2, 8018d84 <prvProcessReceivedCommands+0x78>)
 8018d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d82:	bf00      	nop
 8018d84:	08018dad 	.word	0x08018dad
 8018d88:	08018dad 	.word	0x08018dad
 8018d8c:	08018dad 	.word	0x08018dad
 8018d90:	08018e21 	.word	0x08018e21
 8018d94:	08018e35 	.word	0x08018e35
 8018d98:	08018e7f 	.word	0x08018e7f
 8018d9c:	08018dad 	.word	0x08018dad
 8018da0:	08018dad 	.word	0x08018dad
 8018da4:	08018e21 	.word	0x08018e21
 8018da8:	08018e35 	.word	0x08018e35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018db2:	f043 0301 	orr.w	r3, r3, #1
 8018db6:	b2da      	uxtb	r2, r3
 8018db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018dbe:	68ba      	ldr	r2, [r7, #8]
 8018dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dc2:	699b      	ldr	r3, [r3, #24]
 8018dc4:	18d1      	adds	r1, r2, r3
 8018dc6:	68bb      	ldr	r3, [r7, #8]
 8018dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018dcc:	f7ff ff5c 	bl	8018c88 <prvInsertTimerInActiveList>
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d069      	beq.n	8018eaa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dd8:	6a1b      	ldr	r3, [r3, #32]
 8018dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ddc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018de4:	f003 0304 	and.w	r3, r3, #4
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d05e      	beq.n	8018eaa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018dec:	68ba      	ldr	r2, [r7, #8]
 8018dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018df0:	699b      	ldr	r3, [r3, #24]
 8018df2:	441a      	add	r2, r3
 8018df4:	2300      	movs	r3, #0
 8018df6:	9300      	str	r3, [sp, #0]
 8018df8:	2300      	movs	r3, #0
 8018dfa:	2100      	movs	r1, #0
 8018dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018dfe:	f7ff fe05 	bl	8018a0c <xTimerGenericCommand>
 8018e02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018e04:	6a3b      	ldr	r3, [r7, #32]
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d14f      	bne.n	8018eaa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e0e:	f383 8811 	msr	BASEPRI, r3
 8018e12:	f3bf 8f6f 	isb	sy
 8018e16:	f3bf 8f4f 	dsb	sy
 8018e1a:	61bb      	str	r3, [r7, #24]
}
 8018e1c:	bf00      	nop
 8018e1e:	e7fe      	b.n	8018e1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e26:	f023 0301 	bic.w	r3, r3, #1
 8018e2a:	b2da      	uxtb	r2, r3
 8018e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018e32:	e03a      	b.n	8018eaa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e3a:	f043 0301 	orr.w	r3, r3, #1
 8018e3e:	b2da      	uxtb	r2, r3
 8018e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018e46:	68ba      	ldr	r2, [r7, #8]
 8018e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e4e:	699b      	ldr	r3, [r3, #24]
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d10a      	bne.n	8018e6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e58:	f383 8811 	msr	BASEPRI, r3
 8018e5c:	f3bf 8f6f 	isb	sy
 8018e60:	f3bf 8f4f 	dsb	sy
 8018e64:	617b      	str	r3, [r7, #20]
}
 8018e66:	bf00      	nop
 8018e68:	e7fe      	b.n	8018e68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e6c:	699a      	ldr	r2, [r3, #24]
 8018e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e70:	18d1      	adds	r1, r2, r3
 8018e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018e78:	f7ff ff06 	bl	8018c88 <prvInsertTimerInActiveList>
					break;
 8018e7c:	e015      	b.n	8018eaa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e84:	f003 0302 	and.w	r3, r3, #2
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d103      	bne.n	8018e94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018e8e:	f000 fc1f 	bl	80196d0 <vPortFree>
 8018e92:	e00a      	b.n	8018eaa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e9a:	f023 0301 	bic.w	r3, r3, #1
 8018e9e:	b2da      	uxtb	r2, r3
 8018ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018ea6:	e000      	b.n	8018eaa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018ea8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018eaa:	4b08      	ldr	r3, [pc, #32]	; (8018ecc <prvProcessReceivedCommands+0x1c0>)
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	1d39      	adds	r1, r7, #4
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	4618      	mov	r0, r3
 8018eb4:	f7fe f814 	bl	8016ee0 <xQueueReceive>
 8018eb8:	4603      	mov	r3, r0
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	f47f af2a 	bne.w	8018d14 <prvProcessReceivedCommands+0x8>
	}
}
 8018ec0:	bf00      	nop
 8018ec2:	bf00      	nop
 8018ec4:	3730      	adds	r7, #48	; 0x30
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	bd80      	pop	{r7, pc}
 8018eca:	bf00      	nop
 8018ecc:	20006234 	.word	0x20006234

08018ed0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018ed0:	b580      	push	{r7, lr}
 8018ed2:	b088      	sub	sp, #32
 8018ed4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018ed6:	e048      	b.n	8018f6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018ed8:	4b2d      	ldr	r3, [pc, #180]	; (8018f90 <prvSwitchTimerLists+0xc0>)
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	68db      	ldr	r3, [r3, #12]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ee2:	4b2b      	ldr	r3, [pc, #172]	; (8018f90 <prvSwitchTimerLists+0xc0>)
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	68db      	ldr	r3, [r3, #12]
 8018ee8:	68db      	ldr	r3, [r3, #12]
 8018eea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018eec:	68fb      	ldr	r3, [r7, #12]
 8018eee:	3304      	adds	r3, #4
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	f7fd fc3d 	bl	8016770 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	6a1b      	ldr	r3, [r3, #32]
 8018efa:	68f8      	ldr	r0, [r7, #12]
 8018efc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f04:	f003 0304 	and.w	r3, r3, #4
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d02e      	beq.n	8018f6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	699b      	ldr	r3, [r3, #24]
 8018f10:	693a      	ldr	r2, [r7, #16]
 8018f12:	4413      	add	r3, r2
 8018f14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018f16:	68ba      	ldr	r2, [r7, #8]
 8018f18:	693b      	ldr	r3, [r7, #16]
 8018f1a:	429a      	cmp	r2, r3
 8018f1c:	d90e      	bls.n	8018f3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018f1e:	68fb      	ldr	r3, [r7, #12]
 8018f20:	68ba      	ldr	r2, [r7, #8]
 8018f22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	68fa      	ldr	r2, [r7, #12]
 8018f28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018f2a:	4b19      	ldr	r3, [pc, #100]	; (8018f90 <prvSwitchTimerLists+0xc0>)
 8018f2c:	681a      	ldr	r2, [r3, #0]
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	3304      	adds	r3, #4
 8018f32:	4619      	mov	r1, r3
 8018f34:	4610      	mov	r0, r2
 8018f36:	f7fd fbe2 	bl	80166fe <vListInsert>
 8018f3a:	e016      	b.n	8018f6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	9300      	str	r3, [sp, #0]
 8018f40:	2300      	movs	r3, #0
 8018f42:	693a      	ldr	r2, [r7, #16]
 8018f44:	2100      	movs	r1, #0
 8018f46:	68f8      	ldr	r0, [r7, #12]
 8018f48:	f7ff fd60 	bl	8018a0c <xTimerGenericCommand>
 8018f4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d10a      	bne.n	8018f6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8018f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f58:	f383 8811 	msr	BASEPRI, r3
 8018f5c:	f3bf 8f6f 	isb	sy
 8018f60:	f3bf 8f4f 	dsb	sy
 8018f64:	603b      	str	r3, [r7, #0]
}
 8018f66:	bf00      	nop
 8018f68:	e7fe      	b.n	8018f68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018f6a:	4b09      	ldr	r3, [pc, #36]	; (8018f90 <prvSwitchTimerLists+0xc0>)
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d1b1      	bne.n	8018ed8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018f74:	4b06      	ldr	r3, [pc, #24]	; (8018f90 <prvSwitchTimerLists+0xc0>)
 8018f76:	681b      	ldr	r3, [r3, #0]
 8018f78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018f7a:	4b06      	ldr	r3, [pc, #24]	; (8018f94 <prvSwitchTimerLists+0xc4>)
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	4a04      	ldr	r2, [pc, #16]	; (8018f90 <prvSwitchTimerLists+0xc0>)
 8018f80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018f82:	4a04      	ldr	r2, [pc, #16]	; (8018f94 <prvSwitchTimerLists+0xc4>)
 8018f84:	697b      	ldr	r3, [r7, #20]
 8018f86:	6013      	str	r3, [r2, #0]
}
 8018f88:	bf00      	nop
 8018f8a:	3718      	adds	r7, #24
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	bd80      	pop	{r7, pc}
 8018f90:	2000622c 	.word	0x2000622c
 8018f94:	20006230 	.word	0x20006230

08018f98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b082      	sub	sp, #8
 8018f9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018f9e:	f000 f9a9 	bl	80192f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018fa2:	4b15      	ldr	r3, [pc, #84]	; (8018ff8 <prvCheckForValidListAndQueue+0x60>)
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d120      	bne.n	8018fec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018faa:	4814      	ldr	r0, [pc, #80]	; (8018ffc <prvCheckForValidListAndQueue+0x64>)
 8018fac:	f7fd fb56 	bl	801665c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018fb0:	4813      	ldr	r0, [pc, #76]	; (8019000 <prvCheckForValidListAndQueue+0x68>)
 8018fb2:	f7fd fb53 	bl	801665c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018fb6:	4b13      	ldr	r3, [pc, #76]	; (8019004 <prvCheckForValidListAndQueue+0x6c>)
 8018fb8:	4a10      	ldr	r2, [pc, #64]	; (8018ffc <prvCheckForValidListAndQueue+0x64>)
 8018fba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018fbc:	4b12      	ldr	r3, [pc, #72]	; (8019008 <prvCheckForValidListAndQueue+0x70>)
 8018fbe:	4a10      	ldr	r2, [pc, #64]	; (8019000 <prvCheckForValidListAndQueue+0x68>)
 8018fc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	9300      	str	r3, [sp, #0]
 8018fc6:	4b11      	ldr	r3, [pc, #68]	; (801900c <prvCheckForValidListAndQueue+0x74>)
 8018fc8:	4a11      	ldr	r2, [pc, #68]	; (8019010 <prvCheckForValidListAndQueue+0x78>)
 8018fca:	2110      	movs	r1, #16
 8018fcc:	2040      	movs	r0, #64	; 0x40
 8018fce:	f7fd fc61 	bl	8016894 <xQueueGenericCreateStatic>
 8018fd2:	4603      	mov	r3, r0
 8018fd4:	4a08      	ldr	r2, [pc, #32]	; (8018ff8 <prvCheckForValidListAndQueue+0x60>)
 8018fd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018fd8:	4b07      	ldr	r3, [pc, #28]	; (8018ff8 <prvCheckForValidListAndQueue+0x60>)
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d005      	beq.n	8018fec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018fe0:	4b05      	ldr	r3, [pc, #20]	; (8018ff8 <prvCheckForValidListAndQueue+0x60>)
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	490b      	ldr	r1, [pc, #44]	; (8019014 <prvCheckForValidListAndQueue+0x7c>)
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	f7fe fb0e 	bl	8017608 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018fec:	f000 f9b2 	bl	8019354 <vPortExitCritical>
}
 8018ff0:	bf00      	nop
 8018ff2:	46bd      	mov	sp, r7
 8018ff4:	bd80      	pop	{r7, pc}
 8018ff6:	bf00      	nop
 8018ff8:	20006234 	.word	0x20006234
 8018ffc:	20006204 	.word	0x20006204
 8019000:	20006218 	.word	0x20006218
 8019004:	2000622c 	.word	0x2000622c
 8019008:	20006230 	.word	0x20006230
 801900c:	20006640 	.word	0x20006640
 8019010:	20006240 	.word	0x20006240
 8019014:	0802053c 	.word	0x0802053c

08019018 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b086      	sub	sp, #24
 801901c:	af00      	add	r7, sp, #0
 801901e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	2b00      	cmp	r3, #0
 8019028:	d10a      	bne.n	8019040 <pvTimerGetTimerID+0x28>
	__asm volatile
 801902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801902e:	f383 8811 	msr	BASEPRI, r3
 8019032:	f3bf 8f6f 	isb	sy
 8019036:	f3bf 8f4f 	dsb	sy
 801903a:	60fb      	str	r3, [r7, #12]
}
 801903c:	bf00      	nop
 801903e:	e7fe      	b.n	801903e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8019040:	f000 f958 	bl	80192f4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8019044:	697b      	ldr	r3, [r7, #20]
 8019046:	69db      	ldr	r3, [r3, #28]
 8019048:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801904a:	f000 f983 	bl	8019354 <vPortExitCritical>

	return pvReturn;
 801904e:	693b      	ldr	r3, [r7, #16]
}
 8019050:	4618      	mov	r0, r3
 8019052:	3718      	adds	r7, #24
 8019054:	46bd      	mov	sp, r7
 8019056:	bd80      	pop	{r7, pc}

08019058 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019058:	b580      	push	{r7, lr}
 801905a:	b08a      	sub	sp, #40	; 0x28
 801905c:	af00      	add	r7, sp, #0
 801905e:	60f8      	str	r0, [r7, #12]
 8019060:	60b9      	str	r1, [r7, #8]
 8019062:	607a      	str	r2, [r7, #4]
 8019064:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8019066:	f06f 0301 	mvn.w	r3, #1
 801906a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801906c:	68fb      	ldr	r3, [r7, #12]
 801906e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8019070:	68bb      	ldr	r3, [r7, #8]
 8019072:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019078:	4b06      	ldr	r3, [pc, #24]	; (8019094 <xTimerPendFunctionCallFromISR+0x3c>)
 801907a:	6818      	ldr	r0, [r3, #0]
 801907c:	f107 0114 	add.w	r1, r7, #20
 8019080:	2300      	movs	r3, #0
 8019082:	683a      	ldr	r2, [r7, #0]
 8019084:	f7fd fe90 	bl	8016da8 <xQueueGenericSendFromISR>
 8019088:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801908c:	4618      	mov	r0, r3
 801908e:	3728      	adds	r7, #40	; 0x28
 8019090:	46bd      	mov	sp, r7
 8019092:	bd80      	pop	{r7, pc}
 8019094:	20006234 	.word	0x20006234

08019098 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019098:	b480      	push	{r7}
 801909a:	b085      	sub	sp, #20
 801909c:	af00      	add	r7, sp, #0
 801909e:	60f8      	str	r0, [r7, #12]
 80190a0:	60b9      	str	r1, [r7, #8]
 80190a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	3b04      	subs	r3, #4
 80190a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80190b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	3b04      	subs	r3, #4
 80190b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80190b8:	68bb      	ldr	r3, [r7, #8]
 80190ba:	f023 0201 	bic.w	r2, r3, #1
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80190c2:	68fb      	ldr	r3, [r7, #12]
 80190c4:	3b04      	subs	r3, #4
 80190c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80190c8:	4a0c      	ldr	r2, [pc, #48]	; (80190fc <pxPortInitialiseStack+0x64>)
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	3b14      	subs	r3, #20
 80190d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80190d4:	687a      	ldr	r2, [r7, #4]
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	3b04      	subs	r3, #4
 80190de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	f06f 0202 	mvn.w	r2, #2
 80190e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	3b20      	subs	r3, #32
 80190ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80190ee:	68fb      	ldr	r3, [r7, #12]
}
 80190f0:	4618      	mov	r0, r3
 80190f2:	3714      	adds	r7, #20
 80190f4:	46bd      	mov	sp, r7
 80190f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190fa:	4770      	bx	lr
 80190fc:	08019101 	.word	0x08019101

08019100 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019100:	b480      	push	{r7}
 8019102:	b085      	sub	sp, #20
 8019104:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019106:	2300      	movs	r3, #0
 8019108:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801910a:	4b12      	ldr	r3, [pc, #72]	; (8019154 <prvTaskExitError+0x54>)
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019112:	d00a      	beq.n	801912a <prvTaskExitError+0x2a>
	__asm volatile
 8019114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019118:	f383 8811 	msr	BASEPRI, r3
 801911c:	f3bf 8f6f 	isb	sy
 8019120:	f3bf 8f4f 	dsb	sy
 8019124:	60fb      	str	r3, [r7, #12]
}
 8019126:	bf00      	nop
 8019128:	e7fe      	b.n	8019128 <prvTaskExitError+0x28>
	__asm volatile
 801912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801912e:	f383 8811 	msr	BASEPRI, r3
 8019132:	f3bf 8f6f 	isb	sy
 8019136:	f3bf 8f4f 	dsb	sy
 801913a:	60bb      	str	r3, [r7, #8]
}
 801913c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801913e:	bf00      	nop
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d0fc      	beq.n	8019140 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019146:	bf00      	nop
 8019148:	bf00      	nop
 801914a:	3714      	adds	r7, #20
 801914c:	46bd      	mov	sp, r7
 801914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019152:	4770      	bx	lr
 8019154:	200000a0 	.word	0x200000a0
	...

08019160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019160:	4b07      	ldr	r3, [pc, #28]	; (8019180 <pxCurrentTCBConst2>)
 8019162:	6819      	ldr	r1, [r3, #0]
 8019164:	6808      	ldr	r0, [r1, #0]
 8019166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801916a:	f380 8809 	msr	PSP, r0
 801916e:	f3bf 8f6f 	isb	sy
 8019172:	f04f 0000 	mov.w	r0, #0
 8019176:	f380 8811 	msr	BASEPRI, r0
 801917a:	4770      	bx	lr
 801917c:	f3af 8000 	nop.w

08019180 <pxCurrentTCBConst2>:
 8019180:	20005d04 	.word	0x20005d04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019184:	bf00      	nop
 8019186:	bf00      	nop

08019188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019188:	4808      	ldr	r0, [pc, #32]	; (80191ac <prvPortStartFirstTask+0x24>)
 801918a:	6800      	ldr	r0, [r0, #0]
 801918c:	6800      	ldr	r0, [r0, #0]
 801918e:	f380 8808 	msr	MSP, r0
 8019192:	f04f 0000 	mov.w	r0, #0
 8019196:	f380 8814 	msr	CONTROL, r0
 801919a:	b662      	cpsie	i
 801919c:	b661      	cpsie	f
 801919e:	f3bf 8f4f 	dsb	sy
 80191a2:	f3bf 8f6f 	isb	sy
 80191a6:	df00      	svc	0
 80191a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80191aa:	bf00      	nop
 80191ac:	e000ed08 	.word	0xe000ed08

080191b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b086      	sub	sp, #24
 80191b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80191b6:	4b46      	ldr	r3, [pc, #280]	; (80192d0 <xPortStartScheduler+0x120>)
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	4a46      	ldr	r2, [pc, #280]	; (80192d4 <xPortStartScheduler+0x124>)
 80191bc:	4293      	cmp	r3, r2
 80191be:	d10a      	bne.n	80191d6 <xPortStartScheduler+0x26>
	__asm volatile
 80191c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191c4:	f383 8811 	msr	BASEPRI, r3
 80191c8:	f3bf 8f6f 	isb	sy
 80191cc:	f3bf 8f4f 	dsb	sy
 80191d0:	613b      	str	r3, [r7, #16]
}
 80191d2:	bf00      	nop
 80191d4:	e7fe      	b.n	80191d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80191d6:	4b3e      	ldr	r3, [pc, #248]	; (80192d0 <xPortStartScheduler+0x120>)
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	4a3f      	ldr	r2, [pc, #252]	; (80192d8 <xPortStartScheduler+0x128>)
 80191dc:	4293      	cmp	r3, r2
 80191de:	d10a      	bne.n	80191f6 <xPortStartScheduler+0x46>
	__asm volatile
 80191e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191e4:	f383 8811 	msr	BASEPRI, r3
 80191e8:	f3bf 8f6f 	isb	sy
 80191ec:	f3bf 8f4f 	dsb	sy
 80191f0:	60fb      	str	r3, [r7, #12]
}
 80191f2:	bf00      	nop
 80191f4:	e7fe      	b.n	80191f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80191f6:	4b39      	ldr	r3, [pc, #228]	; (80192dc <xPortStartScheduler+0x12c>)
 80191f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80191fa:	697b      	ldr	r3, [r7, #20]
 80191fc:	781b      	ldrb	r3, [r3, #0]
 80191fe:	b2db      	uxtb	r3, r3
 8019200:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019202:	697b      	ldr	r3, [r7, #20]
 8019204:	22ff      	movs	r2, #255	; 0xff
 8019206:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019208:	697b      	ldr	r3, [r7, #20]
 801920a:	781b      	ldrb	r3, [r3, #0]
 801920c:	b2db      	uxtb	r3, r3
 801920e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019210:	78fb      	ldrb	r3, [r7, #3]
 8019212:	b2db      	uxtb	r3, r3
 8019214:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019218:	b2da      	uxtb	r2, r3
 801921a:	4b31      	ldr	r3, [pc, #196]	; (80192e0 <xPortStartScheduler+0x130>)
 801921c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801921e:	4b31      	ldr	r3, [pc, #196]	; (80192e4 <xPortStartScheduler+0x134>)
 8019220:	2207      	movs	r2, #7
 8019222:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019224:	e009      	b.n	801923a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019226:	4b2f      	ldr	r3, [pc, #188]	; (80192e4 <xPortStartScheduler+0x134>)
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	3b01      	subs	r3, #1
 801922c:	4a2d      	ldr	r2, [pc, #180]	; (80192e4 <xPortStartScheduler+0x134>)
 801922e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019230:	78fb      	ldrb	r3, [r7, #3]
 8019232:	b2db      	uxtb	r3, r3
 8019234:	005b      	lsls	r3, r3, #1
 8019236:	b2db      	uxtb	r3, r3
 8019238:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801923a:	78fb      	ldrb	r3, [r7, #3]
 801923c:	b2db      	uxtb	r3, r3
 801923e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019242:	2b80      	cmp	r3, #128	; 0x80
 8019244:	d0ef      	beq.n	8019226 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019246:	4b27      	ldr	r3, [pc, #156]	; (80192e4 <xPortStartScheduler+0x134>)
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	f1c3 0307 	rsb	r3, r3, #7
 801924e:	2b04      	cmp	r3, #4
 8019250:	d00a      	beq.n	8019268 <xPortStartScheduler+0xb8>
	__asm volatile
 8019252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019256:	f383 8811 	msr	BASEPRI, r3
 801925a:	f3bf 8f6f 	isb	sy
 801925e:	f3bf 8f4f 	dsb	sy
 8019262:	60bb      	str	r3, [r7, #8]
}
 8019264:	bf00      	nop
 8019266:	e7fe      	b.n	8019266 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019268:	4b1e      	ldr	r3, [pc, #120]	; (80192e4 <xPortStartScheduler+0x134>)
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	021b      	lsls	r3, r3, #8
 801926e:	4a1d      	ldr	r2, [pc, #116]	; (80192e4 <xPortStartScheduler+0x134>)
 8019270:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019272:	4b1c      	ldr	r3, [pc, #112]	; (80192e4 <xPortStartScheduler+0x134>)
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801927a:	4a1a      	ldr	r2, [pc, #104]	; (80192e4 <xPortStartScheduler+0x134>)
 801927c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	b2da      	uxtb	r2, r3
 8019282:	697b      	ldr	r3, [r7, #20]
 8019284:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019286:	4b18      	ldr	r3, [pc, #96]	; (80192e8 <xPortStartScheduler+0x138>)
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	4a17      	ldr	r2, [pc, #92]	; (80192e8 <xPortStartScheduler+0x138>)
 801928c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019290:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019292:	4b15      	ldr	r3, [pc, #84]	; (80192e8 <xPortStartScheduler+0x138>)
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	4a14      	ldr	r2, [pc, #80]	; (80192e8 <xPortStartScheduler+0x138>)
 8019298:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801929c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801929e:	f000 f8dd 	bl	801945c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80192a2:	4b12      	ldr	r3, [pc, #72]	; (80192ec <xPortStartScheduler+0x13c>)
 80192a4:	2200      	movs	r2, #0
 80192a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80192a8:	f000 f8fc 	bl	80194a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80192ac:	4b10      	ldr	r3, [pc, #64]	; (80192f0 <xPortStartScheduler+0x140>)
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	4a0f      	ldr	r2, [pc, #60]	; (80192f0 <xPortStartScheduler+0x140>)
 80192b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80192b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80192b8:	f7ff ff66 	bl	8019188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80192bc:	f7fe fdb4 	bl	8017e28 <vTaskSwitchContext>
	prvTaskExitError();
 80192c0:	f7ff ff1e 	bl	8019100 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80192c4:	2300      	movs	r3, #0
}
 80192c6:	4618      	mov	r0, r3
 80192c8:	3718      	adds	r7, #24
 80192ca:	46bd      	mov	sp, r7
 80192cc:	bd80      	pop	{r7, pc}
 80192ce:	bf00      	nop
 80192d0:	e000ed00 	.word	0xe000ed00
 80192d4:	410fc271 	.word	0x410fc271
 80192d8:	410fc270 	.word	0x410fc270
 80192dc:	e000e400 	.word	0xe000e400
 80192e0:	20006690 	.word	0x20006690
 80192e4:	20006694 	.word	0x20006694
 80192e8:	e000ed20 	.word	0xe000ed20
 80192ec:	200000a0 	.word	0x200000a0
 80192f0:	e000ef34 	.word	0xe000ef34

080192f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80192f4:	b480      	push	{r7}
 80192f6:	b083      	sub	sp, #12
 80192f8:	af00      	add	r7, sp, #0
	__asm volatile
 80192fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192fe:	f383 8811 	msr	BASEPRI, r3
 8019302:	f3bf 8f6f 	isb	sy
 8019306:	f3bf 8f4f 	dsb	sy
 801930a:	607b      	str	r3, [r7, #4]
}
 801930c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801930e:	4b0f      	ldr	r3, [pc, #60]	; (801934c <vPortEnterCritical+0x58>)
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	3301      	adds	r3, #1
 8019314:	4a0d      	ldr	r2, [pc, #52]	; (801934c <vPortEnterCritical+0x58>)
 8019316:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019318:	4b0c      	ldr	r3, [pc, #48]	; (801934c <vPortEnterCritical+0x58>)
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	2b01      	cmp	r3, #1
 801931e:	d10f      	bne.n	8019340 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019320:	4b0b      	ldr	r3, [pc, #44]	; (8019350 <vPortEnterCritical+0x5c>)
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	b2db      	uxtb	r3, r3
 8019326:	2b00      	cmp	r3, #0
 8019328:	d00a      	beq.n	8019340 <vPortEnterCritical+0x4c>
	__asm volatile
 801932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801932e:	f383 8811 	msr	BASEPRI, r3
 8019332:	f3bf 8f6f 	isb	sy
 8019336:	f3bf 8f4f 	dsb	sy
 801933a:	603b      	str	r3, [r7, #0]
}
 801933c:	bf00      	nop
 801933e:	e7fe      	b.n	801933e <vPortEnterCritical+0x4a>
	}
}
 8019340:	bf00      	nop
 8019342:	370c      	adds	r7, #12
 8019344:	46bd      	mov	sp, r7
 8019346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801934a:	4770      	bx	lr
 801934c:	200000a0 	.word	0x200000a0
 8019350:	e000ed04 	.word	0xe000ed04

08019354 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019354:	b480      	push	{r7}
 8019356:	b083      	sub	sp, #12
 8019358:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801935a:	4b12      	ldr	r3, [pc, #72]	; (80193a4 <vPortExitCritical+0x50>)
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d10a      	bne.n	8019378 <vPortExitCritical+0x24>
	__asm volatile
 8019362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019366:	f383 8811 	msr	BASEPRI, r3
 801936a:	f3bf 8f6f 	isb	sy
 801936e:	f3bf 8f4f 	dsb	sy
 8019372:	607b      	str	r3, [r7, #4]
}
 8019374:	bf00      	nop
 8019376:	e7fe      	b.n	8019376 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019378:	4b0a      	ldr	r3, [pc, #40]	; (80193a4 <vPortExitCritical+0x50>)
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	3b01      	subs	r3, #1
 801937e:	4a09      	ldr	r2, [pc, #36]	; (80193a4 <vPortExitCritical+0x50>)
 8019380:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019382:	4b08      	ldr	r3, [pc, #32]	; (80193a4 <vPortExitCritical+0x50>)
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d105      	bne.n	8019396 <vPortExitCritical+0x42>
 801938a:	2300      	movs	r3, #0
 801938c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801938e:	683b      	ldr	r3, [r7, #0]
 8019390:	f383 8811 	msr	BASEPRI, r3
}
 8019394:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019396:	bf00      	nop
 8019398:	370c      	adds	r7, #12
 801939a:	46bd      	mov	sp, r7
 801939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a0:	4770      	bx	lr
 80193a2:	bf00      	nop
 80193a4:	200000a0 	.word	0x200000a0
	...

080193b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80193b0:	f3ef 8009 	mrs	r0, PSP
 80193b4:	f3bf 8f6f 	isb	sy
 80193b8:	4b15      	ldr	r3, [pc, #84]	; (8019410 <pxCurrentTCBConst>)
 80193ba:	681a      	ldr	r2, [r3, #0]
 80193bc:	f01e 0f10 	tst.w	lr, #16
 80193c0:	bf08      	it	eq
 80193c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80193c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193ca:	6010      	str	r0, [r2, #0]
 80193cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80193d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80193d4:	f380 8811 	msr	BASEPRI, r0
 80193d8:	f3bf 8f4f 	dsb	sy
 80193dc:	f3bf 8f6f 	isb	sy
 80193e0:	f7fe fd22 	bl	8017e28 <vTaskSwitchContext>
 80193e4:	f04f 0000 	mov.w	r0, #0
 80193e8:	f380 8811 	msr	BASEPRI, r0
 80193ec:	bc09      	pop	{r0, r3}
 80193ee:	6819      	ldr	r1, [r3, #0]
 80193f0:	6808      	ldr	r0, [r1, #0]
 80193f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193f6:	f01e 0f10 	tst.w	lr, #16
 80193fa:	bf08      	it	eq
 80193fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019400:	f380 8809 	msr	PSP, r0
 8019404:	f3bf 8f6f 	isb	sy
 8019408:	4770      	bx	lr
 801940a:	bf00      	nop
 801940c:	f3af 8000 	nop.w

08019410 <pxCurrentTCBConst>:
 8019410:	20005d04 	.word	0x20005d04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019414:	bf00      	nop
 8019416:	bf00      	nop

08019418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b082      	sub	sp, #8
 801941c:	af00      	add	r7, sp, #0
	__asm volatile
 801941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019422:	f383 8811 	msr	BASEPRI, r3
 8019426:	f3bf 8f6f 	isb	sy
 801942a:	f3bf 8f4f 	dsb	sy
 801942e:	607b      	str	r3, [r7, #4]
}
 8019430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019432:	f7fe fc3f 	bl	8017cb4 <xTaskIncrementTick>
 8019436:	4603      	mov	r3, r0
 8019438:	2b00      	cmp	r3, #0
 801943a:	d003      	beq.n	8019444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801943c:	4b06      	ldr	r3, [pc, #24]	; (8019458 <xPortSysTickHandler+0x40>)
 801943e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019442:	601a      	str	r2, [r3, #0]
 8019444:	2300      	movs	r3, #0
 8019446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019448:	683b      	ldr	r3, [r7, #0]
 801944a:	f383 8811 	msr	BASEPRI, r3
}
 801944e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019450:	bf00      	nop
 8019452:	3708      	adds	r7, #8
 8019454:	46bd      	mov	sp, r7
 8019456:	bd80      	pop	{r7, pc}
 8019458:	e000ed04 	.word	0xe000ed04

0801945c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801945c:	b480      	push	{r7}
 801945e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019460:	4b0b      	ldr	r3, [pc, #44]	; (8019490 <vPortSetupTimerInterrupt+0x34>)
 8019462:	2200      	movs	r2, #0
 8019464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019466:	4b0b      	ldr	r3, [pc, #44]	; (8019494 <vPortSetupTimerInterrupt+0x38>)
 8019468:	2200      	movs	r2, #0
 801946a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801946c:	4b0a      	ldr	r3, [pc, #40]	; (8019498 <vPortSetupTimerInterrupt+0x3c>)
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	4a0a      	ldr	r2, [pc, #40]	; (801949c <vPortSetupTimerInterrupt+0x40>)
 8019472:	fba2 2303 	umull	r2, r3, r2, r3
 8019476:	099b      	lsrs	r3, r3, #6
 8019478:	4a09      	ldr	r2, [pc, #36]	; (80194a0 <vPortSetupTimerInterrupt+0x44>)
 801947a:	3b01      	subs	r3, #1
 801947c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801947e:	4b04      	ldr	r3, [pc, #16]	; (8019490 <vPortSetupTimerInterrupt+0x34>)
 8019480:	2207      	movs	r2, #7
 8019482:	601a      	str	r2, [r3, #0]
}
 8019484:	bf00      	nop
 8019486:	46bd      	mov	sp, r7
 8019488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801948c:	4770      	bx	lr
 801948e:	bf00      	nop
 8019490:	e000e010 	.word	0xe000e010
 8019494:	e000e018 	.word	0xe000e018
 8019498:	20000094 	.word	0x20000094
 801949c:	10624dd3 	.word	0x10624dd3
 80194a0:	e000e014 	.word	0xe000e014

080194a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80194a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80194b4 <vPortEnableVFP+0x10>
 80194a8:	6801      	ldr	r1, [r0, #0]
 80194aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80194ae:	6001      	str	r1, [r0, #0]
 80194b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80194b2:	bf00      	nop
 80194b4:	e000ed88 	.word	0xe000ed88

080194b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80194b8:	b480      	push	{r7}
 80194ba:	b085      	sub	sp, #20
 80194bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80194be:	f3ef 8305 	mrs	r3, IPSR
 80194c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	2b0f      	cmp	r3, #15
 80194c8:	d914      	bls.n	80194f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80194ca:	4a17      	ldr	r2, [pc, #92]	; (8019528 <vPortValidateInterruptPriority+0x70>)
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	4413      	add	r3, r2
 80194d0:	781b      	ldrb	r3, [r3, #0]
 80194d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80194d4:	4b15      	ldr	r3, [pc, #84]	; (801952c <vPortValidateInterruptPriority+0x74>)
 80194d6:	781b      	ldrb	r3, [r3, #0]
 80194d8:	7afa      	ldrb	r2, [r7, #11]
 80194da:	429a      	cmp	r2, r3
 80194dc:	d20a      	bcs.n	80194f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80194de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194e2:	f383 8811 	msr	BASEPRI, r3
 80194e6:	f3bf 8f6f 	isb	sy
 80194ea:	f3bf 8f4f 	dsb	sy
 80194ee:	607b      	str	r3, [r7, #4]
}
 80194f0:	bf00      	nop
 80194f2:	e7fe      	b.n	80194f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80194f4:	4b0e      	ldr	r3, [pc, #56]	; (8019530 <vPortValidateInterruptPriority+0x78>)
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80194fc:	4b0d      	ldr	r3, [pc, #52]	; (8019534 <vPortValidateInterruptPriority+0x7c>)
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	429a      	cmp	r2, r3
 8019502:	d90a      	bls.n	801951a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019508:	f383 8811 	msr	BASEPRI, r3
 801950c:	f3bf 8f6f 	isb	sy
 8019510:	f3bf 8f4f 	dsb	sy
 8019514:	603b      	str	r3, [r7, #0]
}
 8019516:	bf00      	nop
 8019518:	e7fe      	b.n	8019518 <vPortValidateInterruptPriority+0x60>
	}
 801951a:	bf00      	nop
 801951c:	3714      	adds	r7, #20
 801951e:	46bd      	mov	sp, r7
 8019520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019524:	4770      	bx	lr
 8019526:	bf00      	nop
 8019528:	e000e3f0 	.word	0xe000e3f0
 801952c:	20006690 	.word	0x20006690
 8019530:	e000ed0c 	.word	0xe000ed0c
 8019534:	20006694 	.word	0x20006694

08019538 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019538:	b580      	push	{r7, lr}
 801953a:	b08a      	sub	sp, #40	; 0x28
 801953c:	af00      	add	r7, sp, #0
 801953e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019540:	2300      	movs	r3, #0
 8019542:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019544:	f7fe fafa 	bl	8017b3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019548:	4b5b      	ldr	r3, [pc, #364]	; (80196b8 <pvPortMalloc+0x180>)
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	2b00      	cmp	r3, #0
 801954e:	d101      	bne.n	8019554 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019550:	f000 f920 	bl	8019794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019554:	4b59      	ldr	r3, [pc, #356]	; (80196bc <pvPortMalloc+0x184>)
 8019556:	681a      	ldr	r2, [r3, #0]
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	4013      	ands	r3, r2
 801955c:	2b00      	cmp	r3, #0
 801955e:	f040 8093 	bne.w	8019688 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	2b00      	cmp	r3, #0
 8019566:	d01d      	beq.n	80195a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019568:	2208      	movs	r2, #8
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	4413      	add	r3, r2
 801956e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	f003 0307 	and.w	r3, r3, #7
 8019576:	2b00      	cmp	r3, #0
 8019578:	d014      	beq.n	80195a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	f023 0307 	bic.w	r3, r3, #7
 8019580:	3308      	adds	r3, #8
 8019582:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	f003 0307 	and.w	r3, r3, #7
 801958a:	2b00      	cmp	r3, #0
 801958c:	d00a      	beq.n	80195a4 <pvPortMalloc+0x6c>
	__asm volatile
 801958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019592:	f383 8811 	msr	BASEPRI, r3
 8019596:	f3bf 8f6f 	isb	sy
 801959a:	f3bf 8f4f 	dsb	sy
 801959e:	617b      	str	r3, [r7, #20]
}
 80195a0:	bf00      	nop
 80195a2:	e7fe      	b.n	80195a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d06e      	beq.n	8019688 <pvPortMalloc+0x150>
 80195aa:	4b45      	ldr	r3, [pc, #276]	; (80196c0 <pvPortMalloc+0x188>)
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	687a      	ldr	r2, [r7, #4]
 80195b0:	429a      	cmp	r2, r3
 80195b2:	d869      	bhi.n	8019688 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80195b4:	4b43      	ldr	r3, [pc, #268]	; (80196c4 <pvPortMalloc+0x18c>)
 80195b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80195b8:	4b42      	ldr	r3, [pc, #264]	; (80196c4 <pvPortMalloc+0x18c>)
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80195be:	e004      	b.n	80195ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80195c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80195c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80195ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195cc:	685b      	ldr	r3, [r3, #4]
 80195ce:	687a      	ldr	r2, [r7, #4]
 80195d0:	429a      	cmp	r2, r3
 80195d2:	d903      	bls.n	80195dc <pvPortMalloc+0xa4>
 80195d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d1f1      	bne.n	80195c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80195dc:	4b36      	ldr	r3, [pc, #216]	; (80196b8 <pvPortMalloc+0x180>)
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80195e2:	429a      	cmp	r2, r3
 80195e4:	d050      	beq.n	8019688 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80195e6:	6a3b      	ldr	r3, [r7, #32]
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	2208      	movs	r2, #8
 80195ec:	4413      	add	r3, r2
 80195ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80195f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195f2:	681a      	ldr	r2, [r3, #0]
 80195f4:	6a3b      	ldr	r3, [r7, #32]
 80195f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80195f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195fa:	685a      	ldr	r2, [r3, #4]
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	1ad2      	subs	r2, r2, r3
 8019600:	2308      	movs	r3, #8
 8019602:	005b      	lsls	r3, r3, #1
 8019604:	429a      	cmp	r2, r3
 8019606:	d91f      	bls.n	8019648 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	4413      	add	r3, r2
 801960e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019610:	69bb      	ldr	r3, [r7, #24]
 8019612:	f003 0307 	and.w	r3, r3, #7
 8019616:	2b00      	cmp	r3, #0
 8019618:	d00a      	beq.n	8019630 <pvPortMalloc+0xf8>
	__asm volatile
 801961a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801961e:	f383 8811 	msr	BASEPRI, r3
 8019622:	f3bf 8f6f 	isb	sy
 8019626:	f3bf 8f4f 	dsb	sy
 801962a:	613b      	str	r3, [r7, #16]
}
 801962c:	bf00      	nop
 801962e:	e7fe      	b.n	801962e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019632:	685a      	ldr	r2, [r3, #4]
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	1ad2      	subs	r2, r2, r3
 8019638:	69bb      	ldr	r3, [r7, #24]
 801963a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801963e:	687a      	ldr	r2, [r7, #4]
 8019640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019642:	69b8      	ldr	r0, [r7, #24]
 8019644:	f000 f90a 	bl	801985c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019648:	4b1d      	ldr	r3, [pc, #116]	; (80196c0 <pvPortMalloc+0x188>)
 801964a:	681a      	ldr	r2, [r3, #0]
 801964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801964e:	685b      	ldr	r3, [r3, #4]
 8019650:	1ad3      	subs	r3, r2, r3
 8019652:	4a1b      	ldr	r2, [pc, #108]	; (80196c0 <pvPortMalloc+0x188>)
 8019654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019656:	4b1a      	ldr	r3, [pc, #104]	; (80196c0 <pvPortMalloc+0x188>)
 8019658:	681a      	ldr	r2, [r3, #0]
 801965a:	4b1b      	ldr	r3, [pc, #108]	; (80196c8 <pvPortMalloc+0x190>)
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	429a      	cmp	r2, r3
 8019660:	d203      	bcs.n	801966a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019662:	4b17      	ldr	r3, [pc, #92]	; (80196c0 <pvPortMalloc+0x188>)
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	4a18      	ldr	r2, [pc, #96]	; (80196c8 <pvPortMalloc+0x190>)
 8019668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801966c:	685a      	ldr	r2, [r3, #4]
 801966e:	4b13      	ldr	r3, [pc, #76]	; (80196bc <pvPortMalloc+0x184>)
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	431a      	orrs	r2, r3
 8019674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801967a:	2200      	movs	r2, #0
 801967c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801967e:	4b13      	ldr	r3, [pc, #76]	; (80196cc <pvPortMalloc+0x194>)
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	3301      	adds	r3, #1
 8019684:	4a11      	ldr	r2, [pc, #68]	; (80196cc <pvPortMalloc+0x194>)
 8019686:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019688:	f7fe fa66 	bl	8017b58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801968c:	69fb      	ldr	r3, [r7, #28]
 801968e:	f003 0307 	and.w	r3, r3, #7
 8019692:	2b00      	cmp	r3, #0
 8019694:	d00a      	beq.n	80196ac <pvPortMalloc+0x174>
	__asm volatile
 8019696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801969a:	f383 8811 	msr	BASEPRI, r3
 801969e:	f3bf 8f6f 	isb	sy
 80196a2:	f3bf 8f4f 	dsb	sy
 80196a6:	60fb      	str	r3, [r7, #12]
}
 80196a8:	bf00      	nop
 80196aa:	e7fe      	b.n	80196aa <pvPortMalloc+0x172>
	return pvReturn;
 80196ac:	69fb      	ldr	r3, [r7, #28]
}
 80196ae:	4618      	mov	r0, r3
 80196b0:	3728      	adds	r7, #40	; 0x28
 80196b2:	46bd      	mov	sp, r7
 80196b4:	bd80      	pop	{r7, pc}
 80196b6:	bf00      	nop
 80196b8:	200373e0 	.word	0x200373e0
 80196bc:	200373f4 	.word	0x200373f4
 80196c0:	200373e4 	.word	0x200373e4
 80196c4:	200373d8 	.word	0x200373d8
 80196c8:	200373e8 	.word	0x200373e8
 80196cc:	200373ec 	.word	0x200373ec

080196d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80196d0:	b580      	push	{r7, lr}
 80196d2:	b086      	sub	sp, #24
 80196d4:	af00      	add	r7, sp, #0
 80196d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d04d      	beq.n	801977e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80196e2:	2308      	movs	r3, #8
 80196e4:	425b      	negs	r3, r3
 80196e6:	697a      	ldr	r2, [r7, #20]
 80196e8:	4413      	add	r3, r2
 80196ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80196ec:	697b      	ldr	r3, [r7, #20]
 80196ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80196f0:	693b      	ldr	r3, [r7, #16]
 80196f2:	685a      	ldr	r2, [r3, #4]
 80196f4:	4b24      	ldr	r3, [pc, #144]	; (8019788 <vPortFree+0xb8>)
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	4013      	ands	r3, r2
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d10a      	bne.n	8019714 <vPortFree+0x44>
	__asm volatile
 80196fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019702:	f383 8811 	msr	BASEPRI, r3
 8019706:	f3bf 8f6f 	isb	sy
 801970a:	f3bf 8f4f 	dsb	sy
 801970e:	60fb      	str	r3, [r7, #12]
}
 8019710:	bf00      	nop
 8019712:	e7fe      	b.n	8019712 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019714:	693b      	ldr	r3, [r7, #16]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d00a      	beq.n	8019732 <vPortFree+0x62>
	__asm volatile
 801971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019720:	f383 8811 	msr	BASEPRI, r3
 8019724:	f3bf 8f6f 	isb	sy
 8019728:	f3bf 8f4f 	dsb	sy
 801972c:	60bb      	str	r3, [r7, #8]
}
 801972e:	bf00      	nop
 8019730:	e7fe      	b.n	8019730 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019732:	693b      	ldr	r3, [r7, #16]
 8019734:	685a      	ldr	r2, [r3, #4]
 8019736:	4b14      	ldr	r3, [pc, #80]	; (8019788 <vPortFree+0xb8>)
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	4013      	ands	r3, r2
 801973c:	2b00      	cmp	r3, #0
 801973e:	d01e      	beq.n	801977e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019740:	693b      	ldr	r3, [r7, #16]
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d11a      	bne.n	801977e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019748:	693b      	ldr	r3, [r7, #16]
 801974a:	685a      	ldr	r2, [r3, #4]
 801974c:	4b0e      	ldr	r3, [pc, #56]	; (8019788 <vPortFree+0xb8>)
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	43db      	mvns	r3, r3
 8019752:	401a      	ands	r2, r3
 8019754:	693b      	ldr	r3, [r7, #16]
 8019756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019758:	f7fe f9f0 	bl	8017b3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801975c:	693b      	ldr	r3, [r7, #16]
 801975e:	685a      	ldr	r2, [r3, #4]
 8019760:	4b0a      	ldr	r3, [pc, #40]	; (801978c <vPortFree+0xbc>)
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	4413      	add	r3, r2
 8019766:	4a09      	ldr	r2, [pc, #36]	; (801978c <vPortFree+0xbc>)
 8019768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801976a:	6938      	ldr	r0, [r7, #16]
 801976c:	f000 f876 	bl	801985c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019770:	4b07      	ldr	r3, [pc, #28]	; (8019790 <vPortFree+0xc0>)
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	3301      	adds	r3, #1
 8019776:	4a06      	ldr	r2, [pc, #24]	; (8019790 <vPortFree+0xc0>)
 8019778:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801977a:	f7fe f9ed 	bl	8017b58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801977e:	bf00      	nop
 8019780:	3718      	adds	r7, #24
 8019782:	46bd      	mov	sp, r7
 8019784:	bd80      	pop	{r7, pc}
 8019786:	bf00      	nop
 8019788:	200373f4 	.word	0x200373f4
 801978c:	200373e4 	.word	0x200373e4
 8019790:	200373f0 	.word	0x200373f0

08019794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019794:	b480      	push	{r7}
 8019796:	b085      	sub	sp, #20
 8019798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801979a:	4b29      	ldr	r3, [pc, #164]	; (8019840 <prvHeapInit+0xac>)
 801979c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801979e:	4b29      	ldr	r3, [pc, #164]	; (8019844 <prvHeapInit+0xb0>)
 80197a0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	f003 0307 	and.w	r3, r3, #7
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d00c      	beq.n	80197c6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	3307      	adds	r3, #7
 80197b0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	f023 0307 	bic.w	r3, r3, #7
 80197b8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80197ba:	68ba      	ldr	r2, [r7, #8]
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	1ad3      	subs	r3, r2, r3
 80197c0:	4a20      	ldr	r2, [pc, #128]	; (8019844 <prvHeapInit+0xb0>)
 80197c2:	4413      	add	r3, r2
 80197c4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80197ca:	4a1f      	ldr	r2, [pc, #124]	; (8019848 <prvHeapInit+0xb4>)
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80197d0:	4b1d      	ldr	r3, [pc, #116]	; (8019848 <prvHeapInit+0xb4>)
 80197d2:	2200      	movs	r2, #0
 80197d4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	68ba      	ldr	r2, [r7, #8]
 80197da:	4413      	add	r3, r2
 80197dc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80197de:	2208      	movs	r2, #8
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	1a9b      	subs	r3, r3, r2
 80197e4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	f023 0307 	bic.w	r3, r3, #7
 80197ec:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	4a16      	ldr	r2, [pc, #88]	; (801984c <prvHeapInit+0xb8>)
 80197f2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80197f4:	4b15      	ldr	r3, [pc, #84]	; (801984c <prvHeapInit+0xb8>)
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	2200      	movs	r2, #0
 80197fa:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80197fc:	4b13      	ldr	r3, [pc, #76]	; (801984c <prvHeapInit+0xb8>)
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	2200      	movs	r2, #0
 8019802:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019808:	683b      	ldr	r3, [r7, #0]
 801980a:	68fa      	ldr	r2, [r7, #12]
 801980c:	1ad2      	subs	r2, r2, r3
 801980e:	683b      	ldr	r3, [r7, #0]
 8019810:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019812:	4b0e      	ldr	r3, [pc, #56]	; (801984c <prvHeapInit+0xb8>)
 8019814:	681a      	ldr	r2, [r3, #0]
 8019816:	683b      	ldr	r3, [r7, #0]
 8019818:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801981a:	683b      	ldr	r3, [r7, #0]
 801981c:	685b      	ldr	r3, [r3, #4]
 801981e:	4a0c      	ldr	r2, [pc, #48]	; (8019850 <prvHeapInit+0xbc>)
 8019820:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019822:	683b      	ldr	r3, [r7, #0]
 8019824:	685b      	ldr	r3, [r3, #4]
 8019826:	4a0b      	ldr	r2, [pc, #44]	; (8019854 <prvHeapInit+0xc0>)
 8019828:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801982a:	4b0b      	ldr	r3, [pc, #44]	; (8019858 <prvHeapInit+0xc4>)
 801982c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019830:	601a      	str	r2, [r3, #0]
}
 8019832:	bf00      	nop
 8019834:	3714      	adds	r7, #20
 8019836:	46bd      	mov	sp, r7
 8019838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801983c:	4770      	bx	lr
 801983e:	bf00      	nop
 8019840:	00030d40 	.word	0x00030d40
 8019844:	20006698 	.word	0x20006698
 8019848:	200373d8 	.word	0x200373d8
 801984c:	200373e0 	.word	0x200373e0
 8019850:	200373e8 	.word	0x200373e8
 8019854:	200373e4 	.word	0x200373e4
 8019858:	200373f4 	.word	0x200373f4

0801985c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801985c:	b480      	push	{r7}
 801985e:	b085      	sub	sp, #20
 8019860:	af00      	add	r7, sp, #0
 8019862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019864:	4b28      	ldr	r3, [pc, #160]	; (8019908 <prvInsertBlockIntoFreeList+0xac>)
 8019866:	60fb      	str	r3, [r7, #12]
 8019868:	e002      	b.n	8019870 <prvInsertBlockIntoFreeList+0x14>
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	60fb      	str	r3, [r7, #12]
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	687a      	ldr	r2, [r7, #4]
 8019876:	429a      	cmp	r2, r3
 8019878:	d8f7      	bhi.n	801986a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	685b      	ldr	r3, [r3, #4]
 8019882:	68ba      	ldr	r2, [r7, #8]
 8019884:	4413      	add	r3, r2
 8019886:	687a      	ldr	r2, [r7, #4]
 8019888:	429a      	cmp	r2, r3
 801988a:	d108      	bne.n	801989e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	685a      	ldr	r2, [r3, #4]
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	685b      	ldr	r3, [r3, #4]
 8019894:	441a      	add	r2, r3
 8019896:	68fb      	ldr	r3, [r7, #12]
 8019898:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801989a:	68fb      	ldr	r3, [r7, #12]
 801989c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	685b      	ldr	r3, [r3, #4]
 80198a6:	68ba      	ldr	r2, [r7, #8]
 80198a8:	441a      	add	r2, r3
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	429a      	cmp	r2, r3
 80198b0:	d118      	bne.n	80198e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80198b2:	68fb      	ldr	r3, [r7, #12]
 80198b4:	681a      	ldr	r2, [r3, #0]
 80198b6:	4b15      	ldr	r3, [pc, #84]	; (801990c <prvInsertBlockIntoFreeList+0xb0>)
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	429a      	cmp	r2, r3
 80198bc:	d00d      	beq.n	80198da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	685a      	ldr	r2, [r3, #4]
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	685b      	ldr	r3, [r3, #4]
 80198c8:	441a      	add	r2, r3
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	681a      	ldr	r2, [r3, #0]
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	601a      	str	r2, [r3, #0]
 80198d8:	e008      	b.n	80198ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80198da:	4b0c      	ldr	r3, [pc, #48]	; (801990c <prvInsertBlockIntoFreeList+0xb0>)
 80198dc:	681a      	ldr	r2, [r3, #0]
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	601a      	str	r2, [r3, #0]
 80198e2:	e003      	b.n	80198ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	681a      	ldr	r2, [r3, #0]
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80198ec:	68fa      	ldr	r2, [r7, #12]
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	429a      	cmp	r2, r3
 80198f2:	d002      	beq.n	80198fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	687a      	ldr	r2, [r7, #4]
 80198f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80198fa:	bf00      	nop
 80198fc:	3714      	adds	r7, #20
 80198fe:	46bd      	mov	sp, r7
 8019900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019904:	4770      	bx	lr
 8019906:	bf00      	nop
 8019908:	200373d8 	.word	0x200373d8
 801990c:	200373e0 	.word	0x200373e0

08019910 <__errno>:
 8019910:	4b01      	ldr	r3, [pc, #4]	; (8019918 <__errno+0x8>)
 8019912:	6818      	ldr	r0, [r3, #0]
 8019914:	4770      	bx	lr
 8019916:	bf00      	nop
 8019918:	200000a4 	.word	0x200000a4

0801991c <__libc_init_array>:
 801991c:	b570      	push	{r4, r5, r6, lr}
 801991e:	4d0d      	ldr	r5, [pc, #52]	; (8019954 <__libc_init_array+0x38>)
 8019920:	4c0d      	ldr	r4, [pc, #52]	; (8019958 <__libc_init_array+0x3c>)
 8019922:	1b64      	subs	r4, r4, r5
 8019924:	10a4      	asrs	r4, r4, #2
 8019926:	2600      	movs	r6, #0
 8019928:	42a6      	cmp	r6, r4
 801992a:	d109      	bne.n	8019940 <__libc_init_array+0x24>
 801992c:	4d0b      	ldr	r5, [pc, #44]	; (801995c <__libc_init_array+0x40>)
 801992e:	4c0c      	ldr	r4, [pc, #48]	; (8019960 <__libc_init_array+0x44>)
 8019930:	f006 fabc 	bl	801feac <_init>
 8019934:	1b64      	subs	r4, r4, r5
 8019936:	10a4      	asrs	r4, r4, #2
 8019938:	2600      	movs	r6, #0
 801993a:	42a6      	cmp	r6, r4
 801993c:	d105      	bne.n	801994a <__libc_init_array+0x2e>
 801993e:	bd70      	pop	{r4, r5, r6, pc}
 8019940:	f855 3b04 	ldr.w	r3, [r5], #4
 8019944:	4798      	blx	r3
 8019946:	3601      	adds	r6, #1
 8019948:	e7ee      	b.n	8019928 <__libc_init_array+0xc>
 801994a:	f855 3b04 	ldr.w	r3, [r5], #4
 801994e:	4798      	blx	r3
 8019950:	3601      	adds	r6, #1
 8019952:	e7f2      	b.n	801993a <__libc_init_array+0x1e>
 8019954:	08025ad8 	.word	0x08025ad8
 8019958:	08025ad8 	.word	0x08025ad8
 801995c:	08025ad8 	.word	0x08025ad8
 8019960:	08025adc 	.word	0x08025adc

08019964 <memcpy>:
 8019964:	440a      	add	r2, r1
 8019966:	4291      	cmp	r1, r2
 8019968:	f100 33ff 	add.w	r3, r0, #4294967295
 801996c:	d100      	bne.n	8019970 <memcpy+0xc>
 801996e:	4770      	bx	lr
 8019970:	b510      	push	{r4, lr}
 8019972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019976:	f803 4f01 	strb.w	r4, [r3, #1]!
 801997a:	4291      	cmp	r1, r2
 801997c:	d1f9      	bne.n	8019972 <memcpy+0xe>
 801997e:	bd10      	pop	{r4, pc}

08019980 <memset>:
 8019980:	4402      	add	r2, r0
 8019982:	4603      	mov	r3, r0
 8019984:	4293      	cmp	r3, r2
 8019986:	d100      	bne.n	801998a <memset+0xa>
 8019988:	4770      	bx	lr
 801998a:	f803 1b01 	strb.w	r1, [r3], #1
 801998e:	e7f9      	b.n	8019984 <memset+0x4>

08019990 <__cvt>:
 8019990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019994:	ec55 4b10 	vmov	r4, r5, d0
 8019998:	2d00      	cmp	r5, #0
 801999a:	460e      	mov	r6, r1
 801999c:	4619      	mov	r1, r3
 801999e:	462b      	mov	r3, r5
 80199a0:	bfbb      	ittet	lt
 80199a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80199a6:	461d      	movlt	r5, r3
 80199a8:	2300      	movge	r3, #0
 80199aa:	232d      	movlt	r3, #45	; 0x2d
 80199ac:	700b      	strb	r3, [r1, #0]
 80199ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80199b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80199b4:	4691      	mov	r9, r2
 80199b6:	f023 0820 	bic.w	r8, r3, #32
 80199ba:	bfbc      	itt	lt
 80199bc:	4622      	movlt	r2, r4
 80199be:	4614      	movlt	r4, r2
 80199c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80199c4:	d005      	beq.n	80199d2 <__cvt+0x42>
 80199c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80199ca:	d100      	bne.n	80199ce <__cvt+0x3e>
 80199cc:	3601      	adds	r6, #1
 80199ce:	2102      	movs	r1, #2
 80199d0:	e000      	b.n	80199d4 <__cvt+0x44>
 80199d2:	2103      	movs	r1, #3
 80199d4:	ab03      	add	r3, sp, #12
 80199d6:	9301      	str	r3, [sp, #4]
 80199d8:	ab02      	add	r3, sp, #8
 80199da:	9300      	str	r3, [sp, #0]
 80199dc:	ec45 4b10 	vmov	d0, r4, r5
 80199e0:	4653      	mov	r3, sl
 80199e2:	4632      	mov	r2, r6
 80199e4:	f001 fdac 	bl	801b540 <_dtoa_r>
 80199e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80199ec:	4607      	mov	r7, r0
 80199ee:	d102      	bne.n	80199f6 <__cvt+0x66>
 80199f0:	f019 0f01 	tst.w	r9, #1
 80199f4:	d022      	beq.n	8019a3c <__cvt+0xac>
 80199f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80199fa:	eb07 0906 	add.w	r9, r7, r6
 80199fe:	d110      	bne.n	8019a22 <__cvt+0x92>
 8019a00:	783b      	ldrb	r3, [r7, #0]
 8019a02:	2b30      	cmp	r3, #48	; 0x30
 8019a04:	d10a      	bne.n	8019a1c <__cvt+0x8c>
 8019a06:	2200      	movs	r2, #0
 8019a08:	2300      	movs	r3, #0
 8019a0a:	4620      	mov	r0, r4
 8019a0c:	4629      	mov	r1, r5
 8019a0e:	f7e7 f873 	bl	8000af8 <__aeabi_dcmpeq>
 8019a12:	b918      	cbnz	r0, 8019a1c <__cvt+0x8c>
 8019a14:	f1c6 0601 	rsb	r6, r6, #1
 8019a18:	f8ca 6000 	str.w	r6, [sl]
 8019a1c:	f8da 3000 	ldr.w	r3, [sl]
 8019a20:	4499      	add	r9, r3
 8019a22:	2200      	movs	r2, #0
 8019a24:	2300      	movs	r3, #0
 8019a26:	4620      	mov	r0, r4
 8019a28:	4629      	mov	r1, r5
 8019a2a:	f7e7 f865 	bl	8000af8 <__aeabi_dcmpeq>
 8019a2e:	b108      	cbz	r0, 8019a34 <__cvt+0xa4>
 8019a30:	f8cd 900c 	str.w	r9, [sp, #12]
 8019a34:	2230      	movs	r2, #48	; 0x30
 8019a36:	9b03      	ldr	r3, [sp, #12]
 8019a38:	454b      	cmp	r3, r9
 8019a3a:	d307      	bcc.n	8019a4c <__cvt+0xbc>
 8019a3c:	9b03      	ldr	r3, [sp, #12]
 8019a3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019a40:	1bdb      	subs	r3, r3, r7
 8019a42:	4638      	mov	r0, r7
 8019a44:	6013      	str	r3, [r2, #0]
 8019a46:	b004      	add	sp, #16
 8019a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a4c:	1c59      	adds	r1, r3, #1
 8019a4e:	9103      	str	r1, [sp, #12]
 8019a50:	701a      	strb	r2, [r3, #0]
 8019a52:	e7f0      	b.n	8019a36 <__cvt+0xa6>

08019a54 <__exponent>:
 8019a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019a56:	4603      	mov	r3, r0
 8019a58:	2900      	cmp	r1, #0
 8019a5a:	bfb8      	it	lt
 8019a5c:	4249      	neglt	r1, r1
 8019a5e:	f803 2b02 	strb.w	r2, [r3], #2
 8019a62:	bfb4      	ite	lt
 8019a64:	222d      	movlt	r2, #45	; 0x2d
 8019a66:	222b      	movge	r2, #43	; 0x2b
 8019a68:	2909      	cmp	r1, #9
 8019a6a:	7042      	strb	r2, [r0, #1]
 8019a6c:	dd2a      	ble.n	8019ac4 <__exponent+0x70>
 8019a6e:	f10d 0407 	add.w	r4, sp, #7
 8019a72:	46a4      	mov	ip, r4
 8019a74:	270a      	movs	r7, #10
 8019a76:	46a6      	mov	lr, r4
 8019a78:	460a      	mov	r2, r1
 8019a7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8019a7e:	fb07 1516 	mls	r5, r7, r6, r1
 8019a82:	3530      	adds	r5, #48	; 0x30
 8019a84:	2a63      	cmp	r2, #99	; 0x63
 8019a86:	f104 34ff 	add.w	r4, r4, #4294967295
 8019a8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019a8e:	4631      	mov	r1, r6
 8019a90:	dcf1      	bgt.n	8019a76 <__exponent+0x22>
 8019a92:	3130      	adds	r1, #48	; 0x30
 8019a94:	f1ae 0502 	sub.w	r5, lr, #2
 8019a98:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019a9c:	1c44      	adds	r4, r0, #1
 8019a9e:	4629      	mov	r1, r5
 8019aa0:	4561      	cmp	r1, ip
 8019aa2:	d30a      	bcc.n	8019aba <__exponent+0x66>
 8019aa4:	f10d 0209 	add.w	r2, sp, #9
 8019aa8:	eba2 020e 	sub.w	r2, r2, lr
 8019aac:	4565      	cmp	r5, ip
 8019aae:	bf88      	it	hi
 8019ab0:	2200      	movhi	r2, #0
 8019ab2:	4413      	add	r3, r2
 8019ab4:	1a18      	subs	r0, r3, r0
 8019ab6:	b003      	add	sp, #12
 8019ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019abe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019ac2:	e7ed      	b.n	8019aa0 <__exponent+0x4c>
 8019ac4:	2330      	movs	r3, #48	; 0x30
 8019ac6:	3130      	adds	r1, #48	; 0x30
 8019ac8:	7083      	strb	r3, [r0, #2]
 8019aca:	70c1      	strb	r1, [r0, #3]
 8019acc:	1d03      	adds	r3, r0, #4
 8019ace:	e7f1      	b.n	8019ab4 <__exponent+0x60>

08019ad0 <_printf_float>:
 8019ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ad4:	ed2d 8b02 	vpush	{d8}
 8019ad8:	b08d      	sub	sp, #52	; 0x34
 8019ada:	460c      	mov	r4, r1
 8019adc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019ae0:	4616      	mov	r6, r2
 8019ae2:	461f      	mov	r7, r3
 8019ae4:	4605      	mov	r5, r0
 8019ae6:	f002 fe89 	bl	801c7fc <_localeconv_r>
 8019aea:	f8d0 a000 	ldr.w	sl, [r0]
 8019aee:	4650      	mov	r0, sl
 8019af0:	f7e6 fb86 	bl	8000200 <strlen>
 8019af4:	2300      	movs	r3, #0
 8019af6:	930a      	str	r3, [sp, #40]	; 0x28
 8019af8:	6823      	ldr	r3, [r4, #0]
 8019afa:	9305      	str	r3, [sp, #20]
 8019afc:	f8d8 3000 	ldr.w	r3, [r8]
 8019b00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019b04:	3307      	adds	r3, #7
 8019b06:	f023 0307 	bic.w	r3, r3, #7
 8019b0a:	f103 0208 	add.w	r2, r3, #8
 8019b0e:	f8c8 2000 	str.w	r2, [r8]
 8019b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019b1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019b1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019b22:	9307      	str	r3, [sp, #28]
 8019b24:	f8cd 8018 	str.w	r8, [sp, #24]
 8019b28:	ee08 0a10 	vmov	s16, r0
 8019b2c:	4b9f      	ldr	r3, [pc, #636]	; (8019dac <_printf_float+0x2dc>)
 8019b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019b32:	f04f 32ff 	mov.w	r2, #4294967295
 8019b36:	f7e7 f811 	bl	8000b5c <__aeabi_dcmpun>
 8019b3a:	bb88      	cbnz	r0, 8019ba0 <_printf_float+0xd0>
 8019b3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019b40:	4b9a      	ldr	r3, [pc, #616]	; (8019dac <_printf_float+0x2dc>)
 8019b42:	f04f 32ff 	mov.w	r2, #4294967295
 8019b46:	f7e6 ffeb 	bl	8000b20 <__aeabi_dcmple>
 8019b4a:	bb48      	cbnz	r0, 8019ba0 <_printf_float+0xd0>
 8019b4c:	2200      	movs	r2, #0
 8019b4e:	2300      	movs	r3, #0
 8019b50:	4640      	mov	r0, r8
 8019b52:	4649      	mov	r1, r9
 8019b54:	f7e6 ffda 	bl	8000b0c <__aeabi_dcmplt>
 8019b58:	b110      	cbz	r0, 8019b60 <_printf_float+0x90>
 8019b5a:	232d      	movs	r3, #45	; 0x2d
 8019b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b60:	4b93      	ldr	r3, [pc, #588]	; (8019db0 <_printf_float+0x2e0>)
 8019b62:	4894      	ldr	r0, [pc, #592]	; (8019db4 <_printf_float+0x2e4>)
 8019b64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019b68:	bf94      	ite	ls
 8019b6a:	4698      	movls	r8, r3
 8019b6c:	4680      	movhi	r8, r0
 8019b6e:	2303      	movs	r3, #3
 8019b70:	6123      	str	r3, [r4, #16]
 8019b72:	9b05      	ldr	r3, [sp, #20]
 8019b74:	f023 0204 	bic.w	r2, r3, #4
 8019b78:	6022      	str	r2, [r4, #0]
 8019b7a:	f04f 0900 	mov.w	r9, #0
 8019b7e:	9700      	str	r7, [sp, #0]
 8019b80:	4633      	mov	r3, r6
 8019b82:	aa0b      	add	r2, sp, #44	; 0x2c
 8019b84:	4621      	mov	r1, r4
 8019b86:	4628      	mov	r0, r5
 8019b88:	f000 f9d8 	bl	8019f3c <_printf_common>
 8019b8c:	3001      	adds	r0, #1
 8019b8e:	f040 8090 	bne.w	8019cb2 <_printf_float+0x1e2>
 8019b92:	f04f 30ff 	mov.w	r0, #4294967295
 8019b96:	b00d      	add	sp, #52	; 0x34
 8019b98:	ecbd 8b02 	vpop	{d8}
 8019b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ba0:	4642      	mov	r2, r8
 8019ba2:	464b      	mov	r3, r9
 8019ba4:	4640      	mov	r0, r8
 8019ba6:	4649      	mov	r1, r9
 8019ba8:	f7e6 ffd8 	bl	8000b5c <__aeabi_dcmpun>
 8019bac:	b140      	cbz	r0, 8019bc0 <_printf_float+0xf0>
 8019bae:	464b      	mov	r3, r9
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	bfbc      	itt	lt
 8019bb4:	232d      	movlt	r3, #45	; 0x2d
 8019bb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019bba:	487f      	ldr	r0, [pc, #508]	; (8019db8 <_printf_float+0x2e8>)
 8019bbc:	4b7f      	ldr	r3, [pc, #508]	; (8019dbc <_printf_float+0x2ec>)
 8019bbe:	e7d1      	b.n	8019b64 <_printf_float+0x94>
 8019bc0:	6863      	ldr	r3, [r4, #4]
 8019bc2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019bc6:	9206      	str	r2, [sp, #24]
 8019bc8:	1c5a      	adds	r2, r3, #1
 8019bca:	d13f      	bne.n	8019c4c <_printf_float+0x17c>
 8019bcc:	2306      	movs	r3, #6
 8019bce:	6063      	str	r3, [r4, #4]
 8019bd0:	9b05      	ldr	r3, [sp, #20]
 8019bd2:	6861      	ldr	r1, [r4, #4]
 8019bd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019bd8:	2300      	movs	r3, #0
 8019bda:	9303      	str	r3, [sp, #12]
 8019bdc:	ab0a      	add	r3, sp, #40	; 0x28
 8019bde:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019be2:	ab09      	add	r3, sp, #36	; 0x24
 8019be4:	ec49 8b10 	vmov	d0, r8, r9
 8019be8:	9300      	str	r3, [sp, #0]
 8019bea:	6022      	str	r2, [r4, #0]
 8019bec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019bf0:	4628      	mov	r0, r5
 8019bf2:	f7ff fecd 	bl	8019990 <__cvt>
 8019bf6:	9b06      	ldr	r3, [sp, #24]
 8019bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019bfa:	2b47      	cmp	r3, #71	; 0x47
 8019bfc:	4680      	mov	r8, r0
 8019bfe:	d108      	bne.n	8019c12 <_printf_float+0x142>
 8019c00:	1cc8      	adds	r0, r1, #3
 8019c02:	db02      	blt.n	8019c0a <_printf_float+0x13a>
 8019c04:	6863      	ldr	r3, [r4, #4]
 8019c06:	4299      	cmp	r1, r3
 8019c08:	dd41      	ble.n	8019c8e <_printf_float+0x1be>
 8019c0a:	f1ab 0b02 	sub.w	fp, fp, #2
 8019c0e:	fa5f fb8b 	uxtb.w	fp, fp
 8019c12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019c16:	d820      	bhi.n	8019c5a <_printf_float+0x18a>
 8019c18:	3901      	subs	r1, #1
 8019c1a:	465a      	mov	r2, fp
 8019c1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019c20:	9109      	str	r1, [sp, #36]	; 0x24
 8019c22:	f7ff ff17 	bl	8019a54 <__exponent>
 8019c26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019c28:	1813      	adds	r3, r2, r0
 8019c2a:	2a01      	cmp	r2, #1
 8019c2c:	4681      	mov	r9, r0
 8019c2e:	6123      	str	r3, [r4, #16]
 8019c30:	dc02      	bgt.n	8019c38 <_printf_float+0x168>
 8019c32:	6822      	ldr	r2, [r4, #0]
 8019c34:	07d2      	lsls	r2, r2, #31
 8019c36:	d501      	bpl.n	8019c3c <_printf_float+0x16c>
 8019c38:	3301      	adds	r3, #1
 8019c3a:	6123      	str	r3, [r4, #16]
 8019c3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	d09c      	beq.n	8019b7e <_printf_float+0xae>
 8019c44:	232d      	movs	r3, #45	; 0x2d
 8019c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c4a:	e798      	b.n	8019b7e <_printf_float+0xae>
 8019c4c:	9a06      	ldr	r2, [sp, #24]
 8019c4e:	2a47      	cmp	r2, #71	; 0x47
 8019c50:	d1be      	bne.n	8019bd0 <_printf_float+0x100>
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d1bc      	bne.n	8019bd0 <_printf_float+0x100>
 8019c56:	2301      	movs	r3, #1
 8019c58:	e7b9      	b.n	8019bce <_printf_float+0xfe>
 8019c5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019c5e:	d118      	bne.n	8019c92 <_printf_float+0x1c2>
 8019c60:	2900      	cmp	r1, #0
 8019c62:	6863      	ldr	r3, [r4, #4]
 8019c64:	dd0b      	ble.n	8019c7e <_printf_float+0x1ae>
 8019c66:	6121      	str	r1, [r4, #16]
 8019c68:	b913      	cbnz	r3, 8019c70 <_printf_float+0x1a0>
 8019c6a:	6822      	ldr	r2, [r4, #0]
 8019c6c:	07d0      	lsls	r0, r2, #31
 8019c6e:	d502      	bpl.n	8019c76 <_printf_float+0x1a6>
 8019c70:	3301      	adds	r3, #1
 8019c72:	440b      	add	r3, r1
 8019c74:	6123      	str	r3, [r4, #16]
 8019c76:	65a1      	str	r1, [r4, #88]	; 0x58
 8019c78:	f04f 0900 	mov.w	r9, #0
 8019c7c:	e7de      	b.n	8019c3c <_printf_float+0x16c>
 8019c7e:	b913      	cbnz	r3, 8019c86 <_printf_float+0x1b6>
 8019c80:	6822      	ldr	r2, [r4, #0]
 8019c82:	07d2      	lsls	r2, r2, #31
 8019c84:	d501      	bpl.n	8019c8a <_printf_float+0x1ba>
 8019c86:	3302      	adds	r3, #2
 8019c88:	e7f4      	b.n	8019c74 <_printf_float+0x1a4>
 8019c8a:	2301      	movs	r3, #1
 8019c8c:	e7f2      	b.n	8019c74 <_printf_float+0x1a4>
 8019c8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c94:	4299      	cmp	r1, r3
 8019c96:	db05      	blt.n	8019ca4 <_printf_float+0x1d4>
 8019c98:	6823      	ldr	r3, [r4, #0]
 8019c9a:	6121      	str	r1, [r4, #16]
 8019c9c:	07d8      	lsls	r0, r3, #31
 8019c9e:	d5ea      	bpl.n	8019c76 <_printf_float+0x1a6>
 8019ca0:	1c4b      	adds	r3, r1, #1
 8019ca2:	e7e7      	b.n	8019c74 <_printf_float+0x1a4>
 8019ca4:	2900      	cmp	r1, #0
 8019ca6:	bfd4      	ite	le
 8019ca8:	f1c1 0202 	rsble	r2, r1, #2
 8019cac:	2201      	movgt	r2, #1
 8019cae:	4413      	add	r3, r2
 8019cb0:	e7e0      	b.n	8019c74 <_printf_float+0x1a4>
 8019cb2:	6823      	ldr	r3, [r4, #0]
 8019cb4:	055a      	lsls	r2, r3, #21
 8019cb6:	d407      	bmi.n	8019cc8 <_printf_float+0x1f8>
 8019cb8:	6923      	ldr	r3, [r4, #16]
 8019cba:	4642      	mov	r2, r8
 8019cbc:	4631      	mov	r1, r6
 8019cbe:	4628      	mov	r0, r5
 8019cc0:	47b8      	blx	r7
 8019cc2:	3001      	adds	r0, #1
 8019cc4:	d12c      	bne.n	8019d20 <_printf_float+0x250>
 8019cc6:	e764      	b.n	8019b92 <_printf_float+0xc2>
 8019cc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019ccc:	f240 80e0 	bls.w	8019e90 <_printf_float+0x3c0>
 8019cd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019cd4:	2200      	movs	r2, #0
 8019cd6:	2300      	movs	r3, #0
 8019cd8:	f7e6 ff0e 	bl	8000af8 <__aeabi_dcmpeq>
 8019cdc:	2800      	cmp	r0, #0
 8019cde:	d034      	beq.n	8019d4a <_printf_float+0x27a>
 8019ce0:	4a37      	ldr	r2, [pc, #220]	; (8019dc0 <_printf_float+0x2f0>)
 8019ce2:	2301      	movs	r3, #1
 8019ce4:	4631      	mov	r1, r6
 8019ce6:	4628      	mov	r0, r5
 8019ce8:	47b8      	blx	r7
 8019cea:	3001      	adds	r0, #1
 8019cec:	f43f af51 	beq.w	8019b92 <_printf_float+0xc2>
 8019cf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019cf4:	429a      	cmp	r2, r3
 8019cf6:	db02      	blt.n	8019cfe <_printf_float+0x22e>
 8019cf8:	6823      	ldr	r3, [r4, #0]
 8019cfa:	07d8      	lsls	r0, r3, #31
 8019cfc:	d510      	bpl.n	8019d20 <_printf_float+0x250>
 8019cfe:	ee18 3a10 	vmov	r3, s16
 8019d02:	4652      	mov	r2, sl
 8019d04:	4631      	mov	r1, r6
 8019d06:	4628      	mov	r0, r5
 8019d08:	47b8      	blx	r7
 8019d0a:	3001      	adds	r0, #1
 8019d0c:	f43f af41 	beq.w	8019b92 <_printf_float+0xc2>
 8019d10:	f04f 0800 	mov.w	r8, #0
 8019d14:	f104 091a 	add.w	r9, r4, #26
 8019d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d1a:	3b01      	subs	r3, #1
 8019d1c:	4543      	cmp	r3, r8
 8019d1e:	dc09      	bgt.n	8019d34 <_printf_float+0x264>
 8019d20:	6823      	ldr	r3, [r4, #0]
 8019d22:	079b      	lsls	r3, r3, #30
 8019d24:	f100 8105 	bmi.w	8019f32 <_printf_float+0x462>
 8019d28:	68e0      	ldr	r0, [r4, #12]
 8019d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019d2c:	4298      	cmp	r0, r3
 8019d2e:	bfb8      	it	lt
 8019d30:	4618      	movlt	r0, r3
 8019d32:	e730      	b.n	8019b96 <_printf_float+0xc6>
 8019d34:	2301      	movs	r3, #1
 8019d36:	464a      	mov	r2, r9
 8019d38:	4631      	mov	r1, r6
 8019d3a:	4628      	mov	r0, r5
 8019d3c:	47b8      	blx	r7
 8019d3e:	3001      	adds	r0, #1
 8019d40:	f43f af27 	beq.w	8019b92 <_printf_float+0xc2>
 8019d44:	f108 0801 	add.w	r8, r8, #1
 8019d48:	e7e6      	b.n	8019d18 <_printf_float+0x248>
 8019d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	dc39      	bgt.n	8019dc4 <_printf_float+0x2f4>
 8019d50:	4a1b      	ldr	r2, [pc, #108]	; (8019dc0 <_printf_float+0x2f0>)
 8019d52:	2301      	movs	r3, #1
 8019d54:	4631      	mov	r1, r6
 8019d56:	4628      	mov	r0, r5
 8019d58:	47b8      	blx	r7
 8019d5a:	3001      	adds	r0, #1
 8019d5c:	f43f af19 	beq.w	8019b92 <_printf_float+0xc2>
 8019d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019d64:	4313      	orrs	r3, r2
 8019d66:	d102      	bne.n	8019d6e <_printf_float+0x29e>
 8019d68:	6823      	ldr	r3, [r4, #0]
 8019d6a:	07d9      	lsls	r1, r3, #31
 8019d6c:	d5d8      	bpl.n	8019d20 <_printf_float+0x250>
 8019d6e:	ee18 3a10 	vmov	r3, s16
 8019d72:	4652      	mov	r2, sl
 8019d74:	4631      	mov	r1, r6
 8019d76:	4628      	mov	r0, r5
 8019d78:	47b8      	blx	r7
 8019d7a:	3001      	adds	r0, #1
 8019d7c:	f43f af09 	beq.w	8019b92 <_printf_float+0xc2>
 8019d80:	f04f 0900 	mov.w	r9, #0
 8019d84:	f104 0a1a 	add.w	sl, r4, #26
 8019d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d8a:	425b      	negs	r3, r3
 8019d8c:	454b      	cmp	r3, r9
 8019d8e:	dc01      	bgt.n	8019d94 <_printf_float+0x2c4>
 8019d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d92:	e792      	b.n	8019cba <_printf_float+0x1ea>
 8019d94:	2301      	movs	r3, #1
 8019d96:	4652      	mov	r2, sl
 8019d98:	4631      	mov	r1, r6
 8019d9a:	4628      	mov	r0, r5
 8019d9c:	47b8      	blx	r7
 8019d9e:	3001      	adds	r0, #1
 8019da0:	f43f aef7 	beq.w	8019b92 <_printf_float+0xc2>
 8019da4:	f109 0901 	add.w	r9, r9, #1
 8019da8:	e7ee      	b.n	8019d88 <_printf_float+0x2b8>
 8019daa:	bf00      	nop
 8019dac:	7fefffff 	.word	0x7fefffff
 8019db0:	08025454 	.word	0x08025454
 8019db4:	08025458 	.word	0x08025458
 8019db8:	08025460 	.word	0x08025460
 8019dbc:	0802545c 	.word	0x0802545c
 8019dc0:	08025464 	.word	0x08025464
 8019dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019dc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019dc8:	429a      	cmp	r2, r3
 8019dca:	bfa8      	it	ge
 8019dcc:	461a      	movge	r2, r3
 8019dce:	2a00      	cmp	r2, #0
 8019dd0:	4691      	mov	r9, r2
 8019dd2:	dc37      	bgt.n	8019e44 <_printf_float+0x374>
 8019dd4:	f04f 0b00 	mov.w	fp, #0
 8019dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019ddc:	f104 021a 	add.w	r2, r4, #26
 8019de0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019de2:	9305      	str	r3, [sp, #20]
 8019de4:	eba3 0309 	sub.w	r3, r3, r9
 8019de8:	455b      	cmp	r3, fp
 8019dea:	dc33      	bgt.n	8019e54 <_printf_float+0x384>
 8019dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019df0:	429a      	cmp	r2, r3
 8019df2:	db3b      	blt.n	8019e6c <_printf_float+0x39c>
 8019df4:	6823      	ldr	r3, [r4, #0]
 8019df6:	07da      	lsls	r2, r3, #31
 8019df8:	d438      	bmi.n	8019e6c <_printf_float+0x39c>
 8019dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019dfc:	9a05      	ldr	r2, [sp, #20]
 8019dfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019e00:	1a9a      	subs	r2, r3, r2
 8019e02:	eba3 0901 	sub.w	r9, r3, r1
 8019e06:	4591      	cmp	r9, r2
 8019e08:	bfa8      	it	ge
 8019e0a:	4691      	movge	r9, r2
 8019e0c:	f1b9 0f00 	cmp.w	r9, #0
 8019e10:	dc35      	bgt.n	8019e7e <_printf_float+0x3ae>
 8019e12:	f04f 0800 	mov.w	r8, #0
 8019e16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019e1a:	f104 0a1a 	add.w	sl, r4, #26
 8019e1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019e22:	1a9b      	subs	r3, r3, r2
 8019e24:	eba3 0309 	sub.w	r3, r3, r9
 8019e28:	4543      	cmp	r3, r8
 8019e2a:	f77f af79 	ble.w	8019d20 <_printf_float+0x250>
 8019e2e:	2301      	movs	r3, #1
 8019e30:	4652      	mov	r2, sl
 8019e32:	4631      	mov	r1, r6
 8019e34:	4628      	mov	r0, r5
 8019e36:	47b8      	blx	r7
 8019e38:	3001      	adds	r0, #1
 8019e3a:	f43f aeaa 	beq.w	8019b92 <_printf_float+0xc2>
 8019e3e:	f108 0801 	add.w	r8, r8, #1
 8019e42:	e7ec      	b.n	8019e1e <_printf_float+0x34e>
 8019e44:	4613      	mov	r3, r2
 8019e46:	4631      	mov	r1, r6
 8019e48:	4642      	mov	r2, r8
 8019e4a:	4628      	mov	r0, r5
 8019e4c:	47b8      	blx	r7
 8019e4e:	3001      	adds	r0, #1
 8019e50:	d1c0      	bne.n	8019dd4 <_printf_float+0x304>
 8019e52:	e69e      	b.n	8019b92 <_printf_float+0xc2>
 8019e54:	2301      	movs	r3, #1
 8019e56:	4631      	mov	r1, r6
 8019e58:	4628      	mov	r0, r5
 8019e5a:	9205      	str	r2, [sp, #20]
 8019e5c:	47b8      	blx	r7
 8019e5e:	3001      	adds	r0, #1
 8019e60:	f43f ae97 	beq.w	8019b92 <_printf_float+0xc2>
 8019e64:	9a05      	ldr	r2, [sp, #20]
 8019e66:	f10b 0b01 	add.w	fp, fp, #1
 8019e6a:	e7b9      	b.n	8019de0 <_printf_float+0x310>
 8019e6c:	ee18 3a10 	vmov	r3, s16
 8019e70:	4652      	mov	r2, sl
 8019e72:	4631      	mov	r1, r6
 8019e74:	4628      	mov	r0, r5
 8019e76:	47b8      	blx	r7
 8019e78:	3001      	adds	r0, #1
 8019e7a:	d1be      	bne.n	8019dfa <_printf_float+0x32a>
 8019e7c:	e689      	b.n	8019b92 <_printf_float+0xc2>
 8019e7e:	9a05      	ldr	r2, [sp, #20]
 8019e80:	464b      	mov	r3, r9
 8019e82:	4442      	add	r2, r8
 8019e84:	4631      	mov	r1, r6
 8019e86:	4628      	mov	r0, r5
 8019e88:	47b8      	blx	r7
 8019e8a:	3001      	adds	r0, #1
 8019e8c:	d1c1      	bne.n	8019e12 <_printf_float+0x342>
 8019e8e:	e680      	b.n	8019b92 <_printf_float+0xc2>
 8019e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e92:	2a01      	cmp	r2, #1
 8019e94:	dc01      	bgt.n	8019e9a <_printf_float+0x3ca>
 8019e96:	07db      	lsls	r3, r3, #31
 8019e98:	d538      	bpl.n	8019f0c <_printf_float+0x43c>
 8019e9a:	2301      	movs	r3, #1
 8019e9c:	4642      	mov	r2, r8
 8019e9e:	4631      	mov	r1, r6
 8019ea0:	4628      	mov	r0, r5
 8019ea2:	47b8      	blx	r7
 8019ea4:	3001      	adds	r0, #1
 8019ea6:	f43f ae74 	beq.w	8019b92 <_printf_float+0xc2>
 8019eaa:	ee18 3a10 	vmov	r3, s16
 8019eae:	4652      	mov	r2, sl
 8019eb0:	4631      	mov	r1, r6
 8019eb2:	4628      	mov	r0, r5
 8019eb4:	47b8      	blx	r7
 8019eb6:	3001      	adds	r0, #1
 8019eb8:	f43f ae6b 	beq.w	8019b92 <_printf_float+0xc2>
 8019ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019ec0:	2200      	movs	r2, #0
 8019ec2:	2300      	movs	r3, #0
 8019ec4:	f7e6 fe18 	bl	8000af8 <__aeabi_dcmpeq>
 8019ec8:	b9d8      	cbnz	r0, 8019f02 <_printf_float+0x432>
 8019eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ecc:	f108 0201 	add.w	r2, r8, #1
 8019ed0:	3b01      	subs	r3, #1
 8019ed2:	4631      	mov	r1, r6
 8019ed4:	4628      	mov	r0, r5
 8019ed6:	47b8      	blx	r7
 8019ed8:	3001      	adds	r0, #1
 8019eda:	d10e      	bne.n	8019efa <_printf_float+0x42a>
 8019edc:	e659      	b.n	8019b92 <_printf_float+0xc2>
 8019ede:	2301      	movs	r3, #1
 8019ee0:	4652      	mov	r2, sl
 8019ee2:	4631      	mov	r1, r6
 8019ee4:	4628      	mov	r0, r5
 8019ee6:	47b8      	blx	r7
 8019ee8:	3001      	adds	r0, #1
 8019eea:	f43f ae52 	beq.w	8019b92 <_printf_float+0xc2>
 8019eee:	f108 0801 	add.w	r8, r8, #1
 8019ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ef4:	3b01      	subs	r3, #1
 8019ef6:	4543      	cmp	r3, r8
 8019ef8:	dcf1      	bgt.n	8019ede <_printf_float+0x40e>
 8019efa:	464b      	mov	r3, r9
 8019efc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019f00:	e6dc      	b.n	8019cbc <_printf_float+0x1ec>
 8019f02:	f04f 0800 	mov.w	r8, #0
 8019f06:	f104 0a1a 	add.w	sl, r4, #26
 8019f0a:	e7f2      	b.n	8019ef2 <_printf_float+0x422>
 8019f0c:	2301      	movs	r3, #1
 8019f0e:	4642      	mov	r2, r8
 8019f10:	e7df      	b.n	8019ed2 <_printf_float+0x402>
 8019f12:	2301      	movs	r3, #1
 8019f14:	464a      	mov	r2, r9
 8019f16:	4631      	mov	r1, r6
 8019f18:	4628      	mov	r0, r5
 8019f1a:	47b8      	blx	r7
 8019f1c:	3001      	adds	r0, #1
 8019f1e:	f43f ae38 	beq.w	8019b92 <_printf_float+0xc2>
 8019f22:	f108 0801 	add.w	r8, r8, #1
 8019f26:	68e3      	ldr	r3, [r4, #12]
 8019f28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019f2a:	1a5b      	subs	r3, r3, r1
 8019f2c:	4543      	cmp	r3, r8
 8019f2e:	dcf0      	bgt.n	8019f12 <_printf_float+0x442>
 8019f30:	e6fa      	b.n	8019d28 <_printf_float+0x258>
 8019f32:	f04f 0800 	mov.w	r8, #0
 8019f36:	f104 0919 	add.w	r9, r4, #25
 8019f3a:	e7f4      	b.n	8019f26 <_printf_float+0x456>

08019f3c <_printf_common>:
 8019f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f40:	4616      	mov	r6, r2
 8019f42:	4699      	mov	r9, r3
 8019f44:	688a      	ldr	r2, [r1, #8]
 8019f46:	690b      	ldr	r3, [r1, #16]
 8019f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019f4c:	4293      	cmp	r3, r2
 8019f4e:	bfb8      	it	lt
 8019f50:	4613      	movlt	r3, r2
 8019f52:	6033      	str	r3, [r6, #0]
 8019f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019f58:	4607      	mov	r7, r0
 8019f5a:	460c      	mov	r4, r1
 8019f5c:	b10a      	cbz	r2, 8019f62 <_printf_common+0x26>
 8019f5e:	3301      	adds	r3, #1
 8019f60:	6033      	str	r3, [r6, #0]
 8019f62:	6823      	ldr	r3, [r4, #0]
 8019f64:	0699      	lsls	r1, r3, #26
 8019f66:	bf42      	ittt	mi
 8019f68:	6833      	ldrmi	r3, [r6, #0]
 8019f6a:	3302      	addmi	r3, #2
 8019f6c:	6033      	strmi	r3, [r6, #0]
 8019f6e:	6825      	ldr	r5, [r4, #0]
 8019f70:	f015 0506 	ands.w	r5, r5, #6
 8019f74:	d106      	bne.n	8019f84 <_printf_common+0x48>
 8019f76:	f104 0a19 	add.w	sl, r4, #25
 8019f7a:	68e3      	ldr	r3, [r4, #12]
 8019f7c:	6832      	ldr	r2, [r6, #0]
 8019f7e:	1a9b      	subs	r3, r3, r2
 8019f80:	42ab      	cmp	r3, r5
 8019f82:	dc26      	bgt.n	8019fd2 <_printf_common+0x96>
 8019f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019f88:	1e13      	subs	r3, r2, #0
 8019f8a:	6822      	ldr	r2, [r4, #0]
 8019f8c:	bf18      	it	ne
 8019f8e:	2301      	movne	r3, #1
 8019f90:	0692      	lsls	r2, r2, #26
 8019f92:	d42b      	bmi.n	8019fec <_printf_common+0xb0>
 8019f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019f98:	4649      	mov	r1, r9
 8019f9a:	4638      	mov	r0, r7
 8019f9c:	47c0      	blx	r8
 8019f9e:	3001      	adds	r0, #1
 8019fa0:	d01e      	beq.n	8019fe0 <_printf_common+0xa4>
 8019fa2:	6823      	ldr	r3, [r4, #0]
 8019fa4:	68e5      	ldr	r5, [r4, #12]
 8019fa6:	6832      	ldr	r2, [r6, #0]
 8019fa8:	f003 0306 	and.w	r3, r3, #6
 8019fac:	2b04      	cmp	r3, #4
 8019fae:	bf08      	it	eq
 8019fb0:	1aad      	subeq	r5, r5, r2
 8019fb2:	68a3      	ldr	r3, [r4, #8]
 8019fb4:	6922      	ldr	r2, [r4, #16]
 8019fb6:	bf0c      	ite	eq
 8019fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019fbc:	2500      	movne	r5, #0
 8019fbe:	4293      	cmp	r3, r2
 8019fc0:	bfc4      	itt	gt
 8019fc2:	1a9b      	subgt	r3, r3, r2
 8019fc4:	18ed      	addgt	r5, r5, r3
 8019fc6:	2600      	movs	r6, #0
 8019fc8:	341a      	adds	r4, #26
 8019fca:	42b5      	cmp	r5, r6
 8019fcc:	d11a      	bne.n	801a004 <_printf_common+0xc8>
 8019fce:	2000      	movs	r0, #0
 8019fd0:	e008      	b.n	8019fe4 <_printf_common+0xa8>
 8019fd2:	2301      	movs	r3, #1
 8019fd4:	4652      	mov	r2, sl
 8019fd6:	4649      	mov	r1, r9
 8019fd8:	4638      	mov	r0, r7
 8019fda:	47c0      	blx	r8
 8019fdc:	3001      	adds	r0, #1
 8019fde:	d103      	bne.n	8019fe8 <_printf_common+0xac>
 8019fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8019fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fe8:	3501      	adds	r5, #1
 8019fea:	e7c6      	b.n	8019f7a <_printf_common+0x3e>
 8019fec:	18e1      	adds	r1, r4, r3
 8019fee:	1c5a      	adds	r2, r3, #1
 8019ff0:	2030      	movs	r0, #48	; 0x30
 8019ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019ff6:	4422      	add	r2, r4
 8019ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a000:	3302      	adds	r3, #2
 801a002:	e7c7      	b.n	8019f94 <_printf_common+0x58>
 801a004:	2301      	movs	r3, #1
 801a006:	4622      	mov	r2, r4
 801a008:	4649      	mov	r1, r9
 801a00a:	4638      	mov	r0, r7
 801a00c:	47c0      	blx	r8
 801a00e:	3001      	adds	r0, #1
 801a010:	d0e6      	beq.n	8019fe0 <_printf_common+0xa4>
 801a012:	3601      	adds	r6, #1
 801a014:	e7d9      	b.n	8019fca <_printf_common+0x8e>
	...

0801a018 <_printf_i>:
 801a018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a01c:	7e0f      	ldrb	r7, [r1, #24]
 801a01e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a020:	2f78      	cmp	r7, #120	; 0x78
 801a022:	4691      	mov	r9, r2
 801a024:	4680      	mov	r8, r0
 801a026:	460c      	mov	r4, r1
 801a028:	469a      	mov	sl, r3
 801a02a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a02e:	d807      	bhi.n	801a040 <_printf_i+0x28>
 801a030:	2f62      	cmp	r7, #98	; 0x62
 801a032:	d80a      	bhi.n	801a04a <_printf_i+0x32>
 801a034:	2f00      	cmp	r7, #0
 801a036:	f000 80d8 	beq.w	801a1ea <_printf_i+0x1d2>
 801a03a:	2f58      	cmp	r7, #88	; 0x58
 801a03c:	f000 80a3 	beq.w	801a186 <_printf_i+0x16e>
 801a040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a048:	e03a      	b.n	801a0c0 <_printf_i+0xa8>
 801a04a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a04e:	2b15      	cmp	r3, #21
 801a050:	d8f6      	bhi.n	801a040 <_printf_i+0x28>
 801a052:	a101      	add	r1, pc, #4	; (adr r1, 801a058 <_printf_i+0x40>)
 801a054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a058:	0801a0b1 	.word	0x0801a0b1
 801a05c:	0801a0c5 	.word	0x0801a0c5
 801a060:	0801a041 	.word	0x0801a041
 801a064:	0801a041 	.word	0x0801a041
 801a068:	0801a041 	.word	0x0801a041
 801a06c:	0801a041 	.word	0x0801a041
 801a070:	0801a0c5 	.word	0x0801a0c5
 801a074:	0801a041 	.word	0x0801a041
 801a078:	0801a041 	.word	0x0801a041
 801a07c:	0801a041 	.word	0x0801a041
 801a080:	0801a041 	.word	0x0801a041
 801a084:	0801a1d1 	.word	0x0801a1d1
 801a088:	0801a0f5 	.word	0x0801a0f5
 801a08c:	0801a1b3 	.word	0x0801a1b3
 801a090:	0801a041 	.word	0x0801a041
 801a094:	0801a041 	.word	0x0801a041
 801a098:	0801a1f3 	.word	0x0801a1f3
 801a09c:	0801a041 	.word	0x0801a041
 801a0a0:	0801a0f5 	.word	0x0801a0f5
 801a0a4:	0801a041 	.word	0x0801a041
 801a0a8:	0801a041 	.word	0x0801a041
 801a0ac:	0801a1bb 	.word	0x0801a1bb
 801a0b0:	682b      	ldr	r3, [r5, #0]
 801a0b2:	1d1a      	adds	r2, r3, #4
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	602a      	str	r2, [r5, #0]
 801a0b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a0bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a0c0:	2301      	movs	r3, #1
 801a0c2:	e0a3      	b.n	801a20c <_printf_i+0x1f4>
 801a0c4:	6820      	ldr	r0, [r4, #0]
 801a0c6:	6829      	ldr	r1, [r5, #0]
 801a0c8:	0606      	lsls	r6, r0, #24
 801a0ca:	f101 0304 	add.w	r3, r1, #4
 801a0ce:	d50a      	bpl.n	801a0e6 <_printf_i+0xce>
 801a0d0:	680e      	ldr	r6, [r1, #0]
 801a0d2:	602b      	str	r3, [r5, #0]
 801a0d4:	2e00      	cmp	r6, #0
 801a0d6:	da03      	bge.n	801a0e0 <_printf_i+0xc8>
 801a0d8:	232d      	movs	r3, #45	; 0x2d
 801a0da:	4276      	negs	r6, r6
 801a0dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a0e0:	485e      	ldr	r0, [pc, #376]	; (801a25c <_printf_i+0x244>)
 801a0e2:	230a      	movs	r3, #10
 801a0e4:	e019      	b.n	801a11a <_printf_i+0x102>
 801a0e6:	680e      	ldr	r6, [r1, #0]
 801a0e8:	602b      	str	r3, [r5, #0]
 801a0ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a0ee:	bf18      	it	ne
 801a0f0:	b236      	sxthne	r6, r6
 801a0f2:	e7ef      	b.n	801a0d4 <_printf_i+0xbc>
 801a0f4:	682b      	ldr	r3, [r5, #0]
 801a0f6:	6820      	ldr	r0, [r4, #0]
 801a0f8:	1d19      	adds	r1, r3, #4
 801a0fa:	6029      	str	r1, [r5, #0]
 801a0fc:	0601      	lsls	r1, r0, #24
 801a0fe:	d501      	bpl.n	801a104 <_printf_i+0xec>
 801a100:	681e      	ldr	r6, [r3, #0]
 801a102:	e002      	b.n	801a10a <_printf_i+0xf2>
 801a104:	0646      	lsls	r6, r0, #25
 801a106:	d5fb      	bpl.n	801a100 <_printf_i+0xe8>
 801a108:	881e      	ldrh	r6, [r3, #0]
 801a10a:	4854      	ldr	r0, [pc, #336]	; (801a25c <_printf_i+0x244>)
 801a10c:	2f6f      	cmp	r7, #111	; 0x6f
 801a10e:	bf0c      	ite	eq
 801a110:	2308      	moveq	r3, #8
 801a112:	230a      	movne	r3, #10
 801a114:	2100      	movs	r1, #0
 801a116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a11a:	6865      	ldr	r5, [r4, #4]
 801a11c:	60a5      	str	r5, [r4, #8]
 801a11e:	2d00      	cmp	r5, #0
 801a120:	bfa2      	ittt	ge
 801a122:	6821      	ldrge	r1, [r4, #0]
 801a124:	f021 0104 	bicge.w	r1, r1, #4
 801a128:	6021      	strge	r1, [r4, #0]
 801a12a:	b90e      	cbnz	r6, 801a130 <_printf_i+0x118>
 801a12c:	2d00      	cmp	r5, #0
 801a12e:	d04d      	beq.n	801a1cc <_printf_i+0x1b4>
 801a130:	4615      	mov	r5, r2
 801a132:	fbb6 f1f3 	udiv	r1, r6, r3
 801a136:	fb03 6711 	mls	r7, r3, r1, r6
 801a13a:	5dc7      	ldrb	r7, [r0, r7]
 801a13c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a140:	4637      	mov	r7, r6
 801a142:	42bb      	cmp	r3, r7
 801a144:	460e      	mov	r6, r1
 801a146:	d9f4      	bls.n	801a132 <_printf_i+0x11a>
 801a148:	2b08      	cmp	r3, #8
 801a14a:	d10b      	bne.n	801a164 <_printf_i+0x14c>
 801a14c:	6823      	ldr	r3, [r4, #0]
 801a14e:	07de      	lsls	r6, r3, #31
 801a150:	d508      	bpl.n	801a164 <_printf_i+0x14c>
 801a152:	6923      	ldr	r3, [r4, #16]
 801a154:	6861      	ldr	r1, [r4, #4]
 801a156:	4299      	cmp	r1, r3
 801a158:	bfde      	ittt	le
 801a15a:	2330      	movle	r3, #48	; 0x30
 801a15c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a160:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a164:	1b52      	subs	r2, r2, r5
 801a166:	6122      	str	r2, [r4, #16]
 801a168:	f8cd a000 	str.w	sl, [sp]
 801a16c:	464b      	mov	r3, r9
 801a16e:	aa03      	add	r2, sp, #12
 801a170:	4621      	mov	r1, r4
 801a172:	4640      	mov	r0, r8
 801a174:	f7ff fee2 	bl	8019f3c <_printf_common>
 801a178:	3001      	adds	r0, #1
 801a17a:	d14c      	bne.n	801a216 <_printf_i+0x1fe>
 801a17c:	f04f 30ff 	mov.w	r0, #4294967295
 801a180:	b004      	add	sp, #16
 801a182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a186:	4835      	ldr	r0, [pc, #212]	; (801a25c <_printf_i+0x244>)
 801a188:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a18c:	6829      	ldr	r1, [r5, #0]
 801a18e:	6823      	ldr	r3, [r4, #0]
 801a190:	f851 6b04 	ldr.w	r6, [r1], #4
 801a194:	6029      	str	r1, [r5, #0]
 801a196:	061d      	lsls	r5, r3, #24
 801a198:	d514      	bpl.n	801a1c4 <_printf_i+0x1ac>
 801a19a:	07df      	lsls	r7, r3, #31
 801a19c:	bf44      	itt	mi
 801a19e:	f043 0320 	orrmi.w	r3, r3, #32
 801a1a2:	6023      	strmi	r3, [r4, #0]
 801a1a4:	b91e      	cbnz	r6, 801a1ae <_printf_i+0x196>
 801a1a6:	6823      	ldr	r3, [r4, #0]
 801a1a8:	f023 0320 	bic.w	r3, r3, #32
 801a1ac:	6023      	str	r3, [r4, #0]
 801a1ae:	2310      	movs	r3, #16
 801a1b0:	e7b0      	b.n	801a114 <_printf_i+0xfc>
 801a1b2:	6823      	ldr	r3, [r4, #0]
 801a1b4:	f043 0320 	orr.w	r3, r3, #32
 801a1b8:	6023      	str	r3, [r4, #0]
 801a1ba:	2378      	movs	r3, #120	; 0x78
 801a1bc:	4828      	ldr	r0, [pc, #160]	; (801a260 <_printf_i+0x248>)
 801a1be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a1c2:	e7e3      	b.n	801a18c <_printf_i+0x174>
 801a1c4:	0659      	lsls	r1, r3, #25
 801a1c6:	bf48      	it	mi
 801a1c8:	b2b6      	uxthmi	r6, r6
 801a1ca:	e7e6      	b.n	801a19a <_printf_i+0x182>
 801a1cc:	4615      	mov	r5, r2
 801a1ce:	e7bb      	b.n	801a148 <_printf_i+0x130>
 801a1d0:	682b      	ldr	r3, [r5, #0]
 801a1d2:	6826      	ldr	r6, [r4, #0]
 801a1d4:	6961      	ldr	r1, [r4, #20]
 801a1d6:	1d18      	adds	r0, r3, #4
 801a1d8:	6028      	str	r0, [r5, #0]
 801a1da:	0635      	lsls	r5, r6, #24
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	d501      	bpl.n	801a1e4 <_printf_i+0x1cc>
 801a1e0:	6019      	str	r1, [r3, #0]
 801a1e2:	e002      	b.n	801a1ea <_printf_i+0x1d2>
 801a1e4:	0670      	lsls	r0, r6, #25
 801a1e6:	d5fb      	bpl.n	801a1e0 <_printf_i+0x1c8>
 801a1e8:	8019      	strh	r1, [r3, #0]
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	6123      	str	r3, [r4, #16]
 801a1ee:	4615      	mov	r5, r2
 801a1f0:	e7ba      	b.n	801a168 <_printf_i+0x150>
 801a1f2:	682b      	ldr	r3, [r5, #0]
 801a1f4:	1d1a      	adds	r2, r3, #4
 801a1f6:	602a      	str	r2, [r5, #0]
 801a1f8:	681d      	ldr	r5, [r3, #0]
 801a1fa:	6862      	ldr	r2, [r4, #4]
 801a1fc:	2100      	movs	r1, #0
 801a1fe:	4628      	mov	r0, r5
 801a200:	f7e6 f806 	bl	8000210 <memchr>
 801a204:	b108      	cbz	r0, 801a20a <_printf_i+0x1f2>
 801a206:	1b40      	subs	r0, r0, r5
 801a208:	6060      	str	r0, [r4, #4]
 801a20a:	6863      	ldr	r3, [r4, #4]
 801a20c:	6123      	str	r3, [r4, #16]
 801a20e:	2300      	movs	r3, #0
 801a210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a214:	e7a8      	b.n	801a168 <_printf_i+0x150>
 801a216:	6923      	ldr	r3, [r4, #16]
 801a218:	462a      	mov	r2, r5
 801a21a:	4649      	mov	r1, r9
 801a21c:	4640      	mov	r0, r8
 801a21e:	47d0      	blx	sl
 801a220:	3001      	adds	r0, #1
 801a222:	d0ab      	beq.n	801a17c <_printf_i+0x164>
 801a224:	6823      	ldr	r3, [r4, #0]
 801a226:	079b      	lsls	r3, r3, #30
 801a228:	d413      	bmi.n	801a252 <_printf_i+0x23a>
 801a22a:	68e0      	ldr	r0, [r4, #12]
 801a22c:	9b03      	ldr	r3, [sp, #12]
 801a22e:	4298      	cmp	r0, r3
 801a230:	bfb8      	it	lt
 801a232:	4618      	movlt	r0, r3
 801a234:	e7a4      	b.n	801a180 <_printf_i+0x168>
 801a236:	2301      	movs	r3, #1
 801a238:	4632      	mov	r2, r6
 801a23a:	4649      	mov	r1, r9
 801a23c:	4640      	mov	r0, r8
 801a23e:	47d0      	blx	sl
 801a240:	3001      	adds	r0, #1
 801a242:	d09b      	beq.n	801a17c <_printf_i+0x164>
 801a244:	3501      	adds	r5, #1
 801a246:	68e3      	ldr	r3, [r4, #12]
 801a248:	9903      	ldr	r1, [sp, #12]
 801a24a:	1a5b      	subs	r3, r3, r1
 801a24c:	42ab      	cmp	r3, r5
 801a24e:	dcf2      	bgt.n	801a236 <_printf_i+0x21e>
 801a250:	e7eb      	b.n	801a22a <_printf_i+0x212>
 801a252:	2500      	movs	r5, #0
 801a254:	f104 0619 	add.w	r6, r4, #25
 801a258:	e7f5      	b.n	801a246 <_printf_i+0x22e>
 801a25a:	bf00      	nop
 801a25c:	08025466 	.word	0x08025466
 801a260:	08025477 	.word	0x08025477

0801a264 <_scanf_float>:
 801a264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a268:	b087      	sub	sp, #28
 801a26a:	4617      	mov	r7, r2
 801a26c:	9303      	str	r3, [sp, #12]
 801a26e:	688b      	ldr	r3, [r1, #8]
 801a270:	1e5a      	subs	r2, r3, #1
 801a272:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a276:	bf83      	ittte	hi
 801a278:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a27c:	195b      	addhi	r3, r3, r5
 801a27e:	9302      	strhi	r3, [sp, #8]
 801a280:	2300      	movls	r3, #0
 801a282:	bf86      	itte	hi
 801a284:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a288:	608b      	strhi	r3, [r1, #8]
 801a28a:	9302      	strls	r3, [sp, #8]
 801a28c:	680b      	ldr	r3, [r1, #0]
 801a28e:	468b      	mov	fp, r1
 801a290:	2500      	movs	r5, #0
 801a292:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a296:	f84b 3b1c 	str.w	r3, [fp], #28
 801a29a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a29e:	4680      	mov	r8, r0
 801a2a0:	460c      	mov	r4, r1
 801a2a2:	465e      	mov	r6, fp
 801a2a4:	46aa      	mov	sl, r5
 801a2a6:	46a9      	mov	r9, r5
 801a2a8:	9501      	str	r5, [sp, #4]
 801a2aa:	68a2      	ldr	r2, [r4, #8]
 801a2ac:	b152      	cbz	r2, 801a2c4 <_scanf_float+0x60>
 801a2ae:	683b      	ldr	r3, [r7, #0]
 801a2b0:	781b      	ldrb	r3, [r3, #0]
 801a2b2:	2b4e      	cmp	r3, #78	; 0x4e
 801a2b4:	d864      	bhi.n	801a380 <_scanf_float+0x11c>
 801a2b6:	2b40      	cmp	r3, #64	; 0x40
 801a2b8:	d83c      	bhi.n	801a334 <_scanf_float+0xd0>
 801a2ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a2be:	b2c8      	uxtb	r0, r1
 801a2c0:	280e      	cmp	r0, #14
 801a2c2:	d93a      	bls.n	801a33a <_scanf_float+0xd6>
 801a2c4:	f1b9 0f00 	cmp.w	r9, #0
 801a2c8:	d003      	beq.n	801a2d2 <_scanf_float+0x6e>
 801a2ca:	6823      	ldr	r3, [r4, #0]
 801a2cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a2d0:	6023      	str	r3, [r4, #0]
 801a2d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a2d6:	f1ba 0f01 	cmp.w	sl, #1
 801a2da:	f200 8113 	bhi.w	801a504 <_scanf_float+0x2a0>
 801a2de:	455e      	cmp	r6, fp
 801a2e0:	f200 8105 	bhi.w	801a4ee <_scanf_float+0x28a>
 801a2e4:	2501      	movs	r5, #1
 801a2e6:	4628      	mov	r0, r5
 801a2e8:	b007      	add	sp, #28
 801a2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a2f2:	2a0d      	cmp	r2, #13
 801a2f4:	d8e6      	bhi.n	801a2c4 <_scanf_float+0x60>
 801a2f6:	a101      	add	r1, pc, #4	; (adr r1, 801a2fc <_scanf_float+0x98>)
 801a2f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a2fc:	0801a43b 	.word	0x0801a43b
 801a300:	0801a2c5 	.word	0x0801a2c5
 801a304:	0801a2c5 	.word	0x0801a2c5
 801a308:	0801a2c5 	.word	0x0801a2c5
 801a30c:	0801a49b 	.word	0x0801a49b
 801a310:	0801a473 	.word	0x0801a473
 801a314:	0801a2c5 	.word	0x0801a2c5
 801a318:	0801a2c5 	.word	0x0801a2c5
 801a31c:	0801a449 	.word	0x0801a449
 801a320:	0801a2c5 	.word	0x0801a2c5
 801a324:	0801a2c5 	.word	0x0801a2c5
 801a328:	0801a2c5 	.word	0x0801a2c5
 801a32c:	0801a2c5 	.word	0x0801a2c5
 801a330:	0801a401 	.word	0x0801a401
 801a334:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a338:	e7db      	b.n	801a2f2 <_scanf_float+0x8e>
 801a33a:	290e      	cmp	r1, #14
 801a33c:	d8c2      	bhi.n	801a2c4 <_scanf_float+0x60>
 801a33e:	a001      	add	r0, pc, #4	; (adr r0, 801a344 <_scanf_float+0xe0>)
 801a340:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a344:	0801a3f3 	.word	0x0801a3f3
 801a348:	0801a2c5 	.word	0x0801a2c5
 801a34c:	0801a3f3 	.word	0x0801a3f3
 801a350:	0801a487 	.word	0x0801a487
 801a354:	0801a2c5 	.word	0x0801a2c5
 801a358:	0801a3a1 	.word	0x0801a3a1
 801a35c:	0801a3dd 	.word	0x0801a3dd
 801a360:	0801a3dd 	.word	0x0801a3dd
 801a364:	0801a3dd 	.word	0x0801a3dd
 801a368:	0801a3dd 	.word	0x0801a3dd
 801a36c:	0801a3dd 	.word	0x0801a3dd
 801a370:	0801a3dd 	.word	0x0801a3dd
 801a374:	0801a3dd 	.word	0x0801a3dd
 801a378:	0801a3dd 	.word	0x0801a3dd
 801a37c:	0801a3dd 	.word	0x0801a3dd
 801a380:	2b6e      	cmp	r3, #110	; 0x6e
 801a382:	d809      	bhi.n	801a398 <_scanf_float+0x134>
 801a384:	2b60      	cmp	r3, #96	; 0x60
 801a386:	d8b2      	bhi.n	801a2ee <_scanf_float+0x8a>
 801a388:	2b54      	cmp	r3, #84	; 0x54
 801a38a:	d077      	beq.n	801a47c <_scanf_float+0x218>
 801a38c:	2b59      	cmp	r3, #89	; 0x59
 801a38e:	d199      	bne.n	801a2c4 <_scanf_float+0x60>
 801a390:	2d07      	cmp	r5, #7
 801a392:	d197      	bne.n	801a2c4 <_scanf_float+0x60>
 801a394:	2508      	movs	r5, #8
 801a396:	e029      	b.n	801a3ec <_scanf_float+0x188>
 801a398:	2b74      	cmp	r3, #116	; 0x74
 801a39a:	d06f      	beq.n	801a47c <_scanf_float+0x218>
 801a39c:	2b79      	cmp	r3, #121	; 0x79
 801a39e:	e7f6      	b.n	801a38e <_scanf_float+0x12a>
 801a3a0:	6821      	ldr	r1, [r4, #0]
 801a3a2:	05c8      	lsls	r0, r1, #23
 801a3a4:	d51a      	bpl.n	801a3dc <_scanf_float+0x178>
 801a3a6:	9b02      	ldr	r3, [sp, #8]
 801a3a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a3ac:	6021      	str	r1, [r4, #0]
 801a3ae:	f109 0901 	add.w	r9, r9, #1
 801a3b2:	b11b      	cbz	r3, 801a3bc <_scanf_float+0x158>
 801a3b4:	3b01      	subs	r3, #1
 801a3b6:	3201      	adds	r2, #1
 801a3b8:	9302      	str	r3, [sp, #8]
 801a3ba:	60a2      	str	r2, [r4, #8]
 801a3bc:	68a3      	ldr	r3, [r4, #8]
 801a3be:	3b01      	subs	r3, #1
 801a3c0:	60a3      	str	r3, [r4, #8]
 801a3c2:	6923      	ldr	r3, [r4, #16]
 801a3c4:	3301      	adds	r3, #1
 801a3c6:	6123      	str	r3, [r4, #16]
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	3b01      	subs	r3, #1
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	607b      	str	r3, [r7, #4]
 801a3d0:	f340 8084 	ble.w	801a4dc <_scanf_float+0x278>
 801a3d4:	683b      	ldr	r3, [r7, #0]
 801a3d6:	3301      	adds	r3, #1
 801a3d8:	603b      	str	r3, [r7, #0]
 801a3da:	e766      	b.n	801a2aa <_scanf_float+0x46>
 801a3dc:	eb1a 0f05 	cmn.w	sl, r5
 801a3e0:	f47f af70 	bne.w	801a2c4 <_scanf_float+0x60>
 801a3e4:	6822      	ldr	r2, [r4, #0]
 801a3e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a3ea:	6022      	str	r2, [r4, #0]
 801a3ec:	f806 3b01 	strb.w	r3, [r6], #1
 801a3f0:	e7e4      	b.n	801a3bc <_scanf_float+0x158>
 801a3f2:	6822      	ldr	r2, [r4, #0]
 801a3f4:	0610      	lsls	r0, r2, #24
 801a3f6:	f57f af65 	bpl.w	801a2c4 <_scanf_float+0x60>
 801a3fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a3fe:	e7f4      	b.n	801a3ea <_scanf_float+0x186>
 801a400:	f1ba 0f00 	cmp.w	sl, #0
 801a404:	d10e      	bne.n	801a424 <_scanf_float+0x1c0>
 801a406:	f1b9 0f00 	cmp.w	r9, #0
 801a40a:	d10e      	bne.n	801a42a <_scanf_float+0x1c6>
 801a40c:	6822      	ldr	r2, [r4, #0]
 801a40e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a412:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a416:	d108      	bne.n	801a42a <_scanf_float+0x1c6>
 801a418:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a41c:	6022      	str	r2, [r4, #0]
 801a41e:	f04f 0a01 	mov.w	sl, #1
 801a422:	e7e3      	b.n	801a3ec <_scanf_float+0x188>
 801a424:	f1ba 0f02 	cmp.w	sl, #2
 801a428:	d055      	beq.n	801a4d6 <_scanf_float+0x272>
 801a42a:	2d01      	cmp	r5, #1
 801a42c:	d002      	beq.n	801a434 <_scanf_float+0x1d0>
 801a42e:	2d04      	cmp	r5, #4
 801a430:	f47f af48 	bne.w	801a2c4 <_scanf_float+0x60>
 801a434:	3501      	adds	r5, #1
 801a436:	b2ed      	uxtb	r5, r5
 801a438:	e7d8      	b.n	801a3ec <_scanf_float+0x188>
 801a43a:	f1ba 0f01 	cmp.w	sl, #1
 801a43e:	f47f af41 	bne.w	801a2c4 <_scanf_float+0x60>
 801a442:	f04f 0a02 	mov.w	sl, #2
 801a446:	e7d1      	b.n	801a3ec <_scanf_float+0x188>
 801a448:	b97d      	cbnz	r5, 801a46a <_scanf_float+0x206>
 801a44a:	f1b9 0f00 	cmp.w	r9, #0
 801a44e:	f47f af3c 	bne.w	801a2ca <_scanf_float+0x66>
 801a452:	6822      	ldr	r2, [r4, #0]
 801a454:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a458:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a45c:	f47f af39 	bne.w	801a2d2 <_scanf_float+0x6e>
 801a460:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a464:	6022      	str	r2, [r4, #0]
 801a466:	2501      	movs	r5, #1
 801a468:	e7c0      	b.n	801a3ec <_scanf_float+0x188>
 801a46a:	2d03      	cmp	r5, #3
 801a46c:	d0e2      	beq.n	801a434 <_scanf_float+0x1d0>
 801a46e:	2d05      	cmp	r5, #5
 801a470:	e7de      	b.n	801a430 <_scanf_float+0x1cc>
 801a472:	2d02      	cmp	r5, #2
 801a474:	f47f af26 	bne.w	801a2c4 <_scanf_float+0x60>
 801a478:	2503      	movs	r5, #3
 801a47a:	e7b7      	b.n	801a3ec <_scanf_float+0x188>
 801a47c:	2d06      	cmp	r5, #6
 801a47e:	f47f af21 	bne.w	801a2c4 <_scanf_float+0x60>
 801a482:	2507      	movs	r5, #7
 801a484:	e7b2      	b.n	801a3ec <_scanf_float+0x188>
 801a486:	6822      	ldr	r2, [r4, #0]
 801a488:	0591      	lsls	r1, r2, #22
 801a48a:	f57f af1b 	bpl.w	801a2c4 <_scanf_float+0x60>
 801a48e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a492:	6022      	str	r2, [r4, #0]
 801a494:	f8cd 9004 	str.w	r9, [sp, #4]
 801a498:	e7a8      	b.n	801a3ec <_scanf_float+0x188>
 801a49a:	6822      	ldr	r2, [r4, #0]
 801a49c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a4a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a4a4:	d006      	beq.n	801a4b4 <_scanf_float+0x250>
 801a4a6:	0550      	lsls	r0, r2, #21
 801a4a8:	f57f af0c 	bpl.w	801a2c4 <_scanf_float+0x60>
 801a4ac:	f1b9 0f00 	cmp.w	r9, #0
 801a4b0:	f43f af0f 	beq.w	801a2d2 <_scanf_float+0x6e>
 801a4b4:	0591      	lsls	r1, r2, #22
 801a4b6:	bf58      	it	pl
 801a4b8:	9901      	ldrpl	r1, [sp, #4]
 801a4ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a4be:	bf58      	it	pl
 801a4c0:	eba9 0101 	subpl.w	r1, r9, r1
 801a4c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a4c8:	bf58      	it	pl
 801a4ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a4ce:	6022      	str	r2, [r4, #0]
 801a4d0:	f04f 0900 	mov.w	r9, #0
 801a4d4:	e78a      	b.n	801a3ec <_scanf_float+0x188>
 801a4d6:	f04f 0a03 	mov.w	sl, #3
 801a4da:	e787      	b.n	801a3ec <_scanf_float+0x188>
 801a4dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a4e0:	4639      	mov	r1, r7
 801a4e2:	4640      	mov	r0, r8
 801a4e4:	4798      	blx	r3
 801a4e6:	2800      	cmp	r0, #0
 801a4e8:	f43f aedf 	beq.w	801a2aa <_scanf_float+0x46>
 801a4ec:	e6ea      	b.n	801a2c4 <_scanf_float+0x60>
 801a4ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a4f6:	463a      	mov	r2, r7
 801a4f8:	4640      	mov	r0, r8
 801a4fa:	4798      	blx	r3
 801a4fc:	6923      	ldr	r3, [r4, #16]
 801a4fe:	3b01      	subs	r3, #1
 801a500:	6123      	str	r3, [r4, #16]
 801a502:	e6ec      	b.n	801a2de <_scanf_float+0x7a>
 801a504:	1e6b      	subs	r3, r5, #1
 801a506:	2b06      	cmp	r3, #6
 801a508:	d825      	bhi.n	801a556 <_scanf_float+0x2f2>
 801a50a:	2d02      	cmp	r5, #2
 801a50c:	d836      	bhi.n	801a57c <_scanf_float+0x318>
 801a50e:	455e      	cmp	r6, fp
 801a510:	f67f aee8 	bls.w	801a2e4 <_scanf_float+0x80>
 801a514:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a518:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a51c:	463a      	mov	r2, r7
 801a51e:	4640      	mov	r0, r8
 801a520:	4798      	blx	r3
 801a522:	6923      	ldr	r3, [r4, #16]
 801a524:	3b01      	subs	r3, #1
 801a526:	6123      	str	r3, [r4, #16]
 801a528:	e7f1      	b.n	801a50e <_scanf_float+0x2aa>
 801a52a:	9802      	ldr	r0, [sp, #8]
 801a52c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a530:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a534:	9002      	str	r0, [sp, #8]
 801a536:	463a      	mov	r2, r7
 801a538:	4640      	mov	r0, r8
 801a53a:	4798      	blx	r3
 801a53c:	6923      	ldr	r3, [r4, #16]
 801a53e:	3b01      	subs	r3, #1
 801a540:	6123      	str	r3, [r4, #16]
 801a542:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a546:	fa5f fa8a 	uxtb.w	sl, sl
 801a54a:	f1ba 0f02 	cmp.w	sl, #2
 801a54e:	d1ec      	bne.n	801a52a <_scanf_float+0x2c6>
 801a550:	3d03      	subs	r5, #3
 801a552:	b2ed      	uxtb	r5, r5
 801a554:	1b76      	subs	r6, r6, r5
 801a556:	6823      	ldr	r3, [r4, #0]
 801a558:	05da      	lsls	r2, r3, #23
 801a55a:	d52f      	bpl.n	801a5bc <_scanf_float+0x358>
 801a55c:	055b      	lsls	r3, r3, #21
 801a55e:	d510      	bpl.n	801a582 <_scanf_float+0x31e>
 801a560:	455e      	cmp	r6, fp
 801a562:	f67f aebf 	bls.w	801a2e4 <_scanf_float+0x80>
 801a566:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a56a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a56e:	463a      	mov	r2, r7
 801a570:	4640      	mov	r0, r8
 801a572:	4798      	blx	r3
 801a574:	6923      	ldr	r3, [r4, #16]
 801a576:	3b01      	subs	r3, #1
 801a578:	6123      	str	r3, [r4, #16]
 801a57a:	e7f1      	b.n	801a560 <_scanf_float+0x2fc>
 801a57c:	46aa      	mov	sl, r5
 801a57e:	9602      	str	r6, [sp, #8]
 801a580:	e7df      	b.n	801a542 <_scanf_float+0x2de>
 801a582:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a586:	6923      	ldr	r3, [r4, #16]
 801a588:	2965      	cmp	r1, #101	; 0x65
 801a58a:	f103 33ff 	add.w	r3, r3, #4294967295
 801a58e:	f106 35ff 	add.w	r5, r6, #4294967295
 801a592:	6123      	str	r3, [r4, #16]
 801a594:	d00c      	beq.n	801a5b0 <_scanf_float+0x34c>
 801a596:	2945      	cmp	r1, #69	; 0x45
 801a598:	d00a      	beq.n	801a5b0 <_scanf_float+0x34c>
 801a59a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a59e:	463a      	mov	r2, r7
 801a5a0:	4640      	mov	r0, r8
 801a5a2:	4798      	blx	r3
 801a5a4:	6923      	ldr	r3, [r4, #16]
 801a5a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a5aa:	3b01      	subs	r3, #1
 801a5ac:	1eb5      	subs	r5, r6, #2
 801a5ae:	6123      	str	r3, [r4, #16]
 801a5b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a5b4:	463a      	mov	r2, r7
 801a5b6:	4640      	mov	r0, r8
 801a5b8:	4798      	blx	r3
 801a5ba:	462e      	mov	r6, r5
 801a5bc:	6825      	ldr	r5, [r4, #0]
 801a5be:	f015 0510 	ands.w	r5, r5, #16
 801a5c2:	d159      	bne.n	801a678 <_scanf_float+0x414>
 801a5c4:	7035      	strb	r5, [r6, #0]
 801a5c6:	6823      	ldr	r3, [r4, #0]
 801a5c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a5cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a5d0:	d11b      	bne.n	801a60a <_scanf_float+0x3a6>
 801a5d2:	9b01      	ldr	r3, [sp, #4]
 801a5d4:	454b      	cmp	r3, r9
 801a5d6:	eba3 0209 	sub.w	r2, r3, r9
 801a5da:	d123      	bne.n	801a624 <_scanf_float+0x3c0>
 801a5dc:	2200      	movs	r2, #0
 801a5de:	4659      	mov	r1, fp
 801a5e0:	4640      	mov	r0, r8
 801a5e2:	f000 fe97 	bl	801b314 <_strtod_r>
 801a5e6:	6822      	ldr	r2, [r4, #0]
 801a5e8:	9b03      	ldr	r3, [sp, #12]
 801a5ea:	f012 0f02 	tst.w	r2, #2
 801a5ee:	ec57 6b10 	vmov	r6, r7, d0
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	d021      	beq.n	801a63a <_scanf_float+0x3d6>
 801a5f6:	9903      	ldr	r1, [sp, #12]
 801a5f8:	1d1a      	adds	r2, r3, #4
 801a5fa:	600a      	str	r2, [r1, #0]
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	e9c3 6700 	strd	r6, r7, [r3]
 801a602:	68e3      	ldr	r3, [r4, #12]
 801a604:	3301      	adds	r3, #1
 801a606:	60e3      	str	r3, [r4, #12]
 801a608:	e66d      	b.n	801a2e6 <_scanf_float+0x82>
 801a60a:	9b04      	ldr	r3, [sp, #16]
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d0e5      	beq.n	801a5dc <_scanf_float+0x378>
 801a610:	9905      	ldr	r1, [sp, #20]
 801a612:	230a      	movs	r3, #10
 801a614:	462a      	mov	r2, r5
 801a616:	3101      	adds	r1, #1
 801a618:	4640      	mov	r0, r8
 801a61a:	f000 ff03 	bl	801b424 <_strtol_r>
 801a61e:	9b04      	ldr	r3, [sp, #16]
 801a620:	9e05      	ldr	r6, [sp, #20]
 801a622:	1ac2      	subs	r2, r0, r3
 801a624:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a628:	429e      	cmp	r6, r3
 801a62a:	bf28      	it	cs
 801a62c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a630:	4912      	ldr	r1, [pc, #72]	; (801a67c <_scanf_float+0x418>)
 801a632:	4630      	mov	r0, r6
 801a634:	f000 f82c 	bl	801a690 <siprintf>
 801a638:	e7d0      	b.n	801a5dc <_scanf_float+0x378>
 801a63a:	9903      	ldr	r1, [sp, #12]
 801a63c:	f012 0f04 	tst.w	r2, #4
 801a640:	f103 0204 	add.w	r2, r3, #4
 801a644:	600a      	str	r2, [r1, #0]
 801a646:	d1d9      	bne.n	801a5fc <_scanf_float+0x398>
 801a648:	f8d3 8000 	ldr.w	r8, [r3]
 801a64c:	ee10 2a10 	vmov	r2, s0
 801a650:	ee10 0a10 	vmov	r0, s0
 801a654:	463b      	mov	r3, r7
 801a656:	4639      	mov	r1, r7
 801a658:	f7e6 fa80 	bl	8000b5c <__aeabi_dcmpun>
 801a65c:	b128      	cbz	r0, 801a66a <_scanf_float+0x406>
 801a65e:	4808      	ldr	r0, [pc, #32]	; (801a680 <_scanf_float+0x41c>)
 801a660:	f000 f810 	bl	801a684 <nanf>
 801a664:	ed88 0a00 	vstr	s0, [r8]
 801a668:	e7cb      	b.n	801a602 <_scanf_float+0x39e>
 801a66a:	4630      	mov	r0, r6
 801a66c:	4639      	mov	r1, r7
 801a66e:	f7e6 fad3 	bl	8000c18 <__aeabi_d2f>
 801a672:	f8c8 0000 	str.w	r0, [r8]
 801a676:	e7c4      	b.n	801a602 <_scanf_float+0x39e>
 801a678:	2500      	movs	r5, #0
 801a67a:	e634      	b.n	801a2e6 <_scanf_float+0x82>
 801a67c:	08025488 	.word	0x08025488
 801a680:	08025890 	.word	0x08025890

0801a684 <nanf>:
 801a684:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a68c <nanf+0x8>
 801a688:	4770      	bx	lr
 801a68a:	bf00      	nop
 801a68c:	7fc00000 	.word	0x7fc00000

0801a690 <siprintf>:
 801a690:	b40e      	push	{r1, r2, r3}
 801a692:	b500      	push	{lr}
 801a694:	b09c      	sub	sp, #112	; 0x70
 801a696:	ab1d      	add	r3, sp, #116	; 0x74
 801a698:	9002      	str	r0, [sp, #8]
 801a69a:	9006      	str	r0, [sp, #24]
 801a69c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a6a0:	4809      	ldr	r0, [pc, #36]	; (801a6c8 <siprintf+0x38>)
 801a6a2:	9107      	str	r1, [sp, #28]
 801a6a4:	9104      	str	r1, [sp, #16]
 801a6a6:	4909      	ldr	r1, [pc, #36]	; (801a6cc <siprintf+0x3c>)
 801a6a8:	f853 2b04 	ldr.w	r2, [r3], #4
 801a6ac:	9105      	str	r1, [sp, #20]
 801a6ae:	6800      	ldr	r0, [r0, #0]
 801a6b0:	9301      	str	r3, [sp, #4]
 801a6b2:	a902      	add	r1, sp, #8
 801a6b4:	f002 fed4 	bl	801d460 <_svfiprintf_r>
 801a6b8:	9b02      	ldr	r3, [sp, #8]
 801a6ba:	2200      	movs	r2, #0
 801a6bc:	701a      	strb	r2, [r3, #0]
 801a6be:	b01c      	add	sp, #112	; 0x70
 801a6c0:	f85d eb04 	ldr.w	lr, [sp], #4
 801a6c4:	b003      	add	sp, #12
 801a6c6:	4770      	bx	lr
 801a6c8:	200000a4 	.word	0x200000a4
 801a6cc:	ffff0208 	.word	0xffff0208

0801a6d0 <sulp>:
 801a6d0:	b570      	push	{r4, r5, r6, lr}
 801a6d2:	4604      	mov	r4, r0
 801a6d4:	460d      	mov	r5, r1
 801a6d6:	ec45 4b10 	vmov	d0, r4, r5
 801a6da:	4616      	mov	r6, r2
 801a6dc:	f002 fc1e 	bl	801cf1c <__ulp>
 801a6e0:	ec51 0b10 	vmov	r0, r1, d0
 801a6e4:	b17e      	cbz	r6, 801a706 <sulp+0x36>
 801a6e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a6ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	dd09      	ble.n	801a706 <sulp+0x36>
 801a6f2:	051b      	lsls	r3, r3, #20
 801a6f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a6f8:	2400      	movs	r4, #0
 801a6fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a6fe:	4622      	mov	r2, r4
 801a700:	462b      	mov	r3, r5
 801a702:	f7e5 ff91 	bl	8000628 <__aeabi_dmul>
 801a706:	bd70      	pop	{r4, r5, r6, pc}

0801a708 <_strtod_l>:
 801a708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a70c:	ed2d 8b02 	vpush	{d8}
 801a710:	b09d      	sub	sp, #116	; 0x74
 801a712:	461f      	mov	r7, r3
 801a714:	2300      	movs	r3, #0
 801a716:	9318      	str	r3, [sp, #96]	; 0x60
 801a718:	4ba2      	ldr	r3, [pc, #648]	; (801a9a4 <_strtod_l+0x29c>)
 801a71a:	9213      	str	r2, [sp, #76]	; 0x4c
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	9305      	str	r3, [sp, #20]
 801a720:	4604      	mov	r4, r0
 801a722:	4618      	mov	r0, r3
 801a724:	4688      	mov	r8, r1
 801a726:	f7e5 fd6b 	bl	8000200 <strlen>
 801a72a:	f04f 0a00 	mov.w	sl, #0
 801a72e:	4605      	mov	r5, r0
 801a730:	f04f 0b00 	mov.w	fp, #0
 801a734:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a738:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a73a:	781a      	ldrb	r2, [r3, #0]
 801a73c:	2a2b      	cmp	r2, #43	; 0x2b
 801a73e:	d04e      	beq.n	801a7de <_strtod_l+0xd6>
 801a740:	d83b      	bhi.n	801a7ba <_strtod_l+0xb2>
 801a742:	2a0d      	cmp	r2, #13
 801a744:	d834      	bhi.n	801a7b0 <_strtod_l+0xa8>
 801a746:	2a08      	cmp	r2, #8
 801a748:	d834      	bhi.n	801a7b4 <_strtod_l+0xac>
 801a74a:	2a00      	cmp	r2, #0
 801a74c:	d03e      	beq.n	801a7cc <_strtod_l+0xc4>
 801a74e:	2300      	movs	r3, #0
 801a750:	930a      	str	r3, [sp, #40]	; 0x28
 801a752:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801a754:	7833      	ldrb	r3, [r6, #0]
 801a756:	2b30      	cmp	r3, #48	; 0x30
 801a758:	f040 80b0 	bne.w	801a8bc <_strtod_l+0x1b4>
 801a75c:	7873      	ldrb	r3, [r6, #1]
 801a75e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a762:	2b58      	cmp	r3, #88	; 0x58
 801a764:	d168      	bne.n	801a838 <_strtod_l+0x130>
 801a766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a768:	9301      	str	r3, [sp, #4]
 801a76a:	ab18      	add	r3, sp, #96	; 0x60
 801a76c:	9702      	str	r7, [sp, #8]
 801a76e:	9300      	str	r3, [sp, #0]
 801a770:	4a8d      	ldr	r2, [pc, #564]	; (801a9a8 <_strtod_l+0x2a0>)
 801a772:	ab19      	add	r3, sp, #100	; 0x64
 801a774:	a917      	add	r1, sp, #92	; 0x5c
 801a776:	4620      	mov	r0, r4
 801a778:	f001 fd38 	bl	801c1ec <__gethex>
 801a77c:	f010 0707 	ands.w	r7, r0, #7
 801a780:	4605      	mov	r5, r0
 801a782:	d005      	beq.n	801a790 <_strtod_l+0x88>
 801a784:	2f06      	cmp	r7, #6
 801a786:	d12c      	bne.n	801a7e2 <_strtod_l+0xda>
 801a788:	3601      	adds	r6, #1
 801a78a:	2300      	movs	r3, #0
 801a78c:	9617      	str	r6, [sp, #92]	; 0x5c
 801a78e:	930a      	str	r3, [sp, #40]	; 0x28
 801a790:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a792:	2b00      	cmp	r3, #0
 801a794:	f040 8590 	bne.w	801b2b8 <_strtod_l+0xbb0>
 801a798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a79a:	b1eb      	cbz	r3, 801a7d8 <_strtod_l+0xd0>
 801a79c:	4652      	mov	r2, sl
 801a79e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a7a2:	ec43 2b10 	vmov	d0, r2, r3
 801a7a6:	b01d      	add	sp, #116	; 0x74
 801a7a8:	ecbd 8b02 	vpop	{d8}
 801a7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7b0:	2a20      	cmp	r2, #32
 801a7b2:	d1cc      	bne.n	801a74e <_strtod_l+0x46>
 801a7b4:	3301      	adds	r3, #1
 801a7b6:	9317      	str	r3, [sp, #92]	; 0x5c
 801a7b8:	e7be      	b.n	801a738 <_strtod_l+0x30>
 801a7ba:	2a2d      	cmp	r2, #45	; 0x2d
 801a7bc:	d1c7      	bne.n	801a74e <_strtod_l+0x46>
 801a7be:	2201      	movs	r2, #1
 801a7c0:	920a      	str	r2, [sp, #40]	; 0x28
 801a7c2:	1c5a      	adds	r2, r3, #1
 801a7c4:	9217      	str	r2, [sp, #92]	; 0x5c
 801a7c6:	785b      	ldrb	r3, [r3, #1]
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	d1c2      	bne.n	801a752 <_strtod_l+0x4a>
 801a7cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a7ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	f040 856e 	bne.w	801b2b4 <_strtod_l+0xbac>
 801a7d8:	4652      	mov	r2, sl
 801a7da:	465b      	mov	r3, fp
 801a7dc:	e7e1      	b.n	801a7a2 <_strtod_l+0x9a>
 801a7de:	2200      	movs	r2, #0
 801a7e0:	e7ee      	b.n	801a7c0 <_strtod_l+0xb8>
 801a7e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a7e4:	b13a      	cbz	r2, 801a7f6 <_strtod_l+0xee>
 801a7e6:	2135      	movs	r1, #53	; 0x35
 801a7e8:	a81a      	add	r0, sp, #104	; 0x68
 801a7ea:	f002 fca2 	bl	801d132 <__copybits>
 801a7ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a7f0:	4620      	mov	r0, r4
 801a7f2:	f002 f861 	bl	801c8b8 <_Bfree>
 801a7f6:	3f01      	subs	r7, #1
 801a7f8:	2f04      	cmp	r7, #4
 801a7fa:	d806      	bhi.n	801a80a <_strtod_l+0x102>
 801a7fc:	e8df f007 	tbb	[pc, r7]
 801a800:	1714030a 	.word	0x1714030a
 801a804:	0a          	.byte	0x0a
 801a805:	00          	.byte	0x00
 801a806:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801a80a:	0728      	lsls	r0, r5, #28
 801a80c:	d5c0      	bpl.n	801a790 <_strtod_l+0x88>
 801a80e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a812:	e7bd      	b.n	801a790 <_strtod_l+0x88>
 801a814:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801a818:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a81a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a81e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a822:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a826:	e7f0      	b.n	801a80a <_strtod_l+0x102>
 801a828:	f8df b180 	ldr.w	fp, [pc, #384]	; 801a9ac <_strtod_l+0x2a4>
 801a82c:	e7ed      	b.n	801a80a <_strtod_l+0x102>
 801a82e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a832:	f04f 3aff 	mov.w	sl, #4294967295
 801a836:	e7e8      	b.n	801a80a <_strtod_l+0x102>
 801a838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a83a:	1c5a      	adds	r2, r3, #1
 801a83c:	9217      	str	r2, [sp, #92]	; 0x5c
 801a83e:	785b      	ldrb	r3, [r3, #1]
 801a840:	2b30      	cmp	r3, #48	; 0x30
 801a842:	d0f9      	beq.n	801a838 <_strtod_l+0x130>
 801a844:	2b00      	cmp	r3, #0
 801a846:	d0a3      	beq.n	801a790 <_strtod_l+0x88>
 801a848:	2301      	movs	r3, #1
 801a84a:	f04f 0900 	mov.w	r9, #0
 801a84e:	9304      	str	r3, [sp, #16]
 801a850:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a852:	9308      	str	r3, [sp, #32]
 801a854:	f8cd 901c 	str.w	r9, [sp, #28]
 801a858:	464f      	mov	r7, r9
 801a85a:	220a      	movs	r2, #10
 801a85c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a85e:	7806      	ldrb	r6, [r0, #0]
 801a860:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a864:	b2d9      	uxtb	r1, r3
 801a866:	2909      	cmp	r1, #9
 801a868:	d92a      	bls.n	801a8c0 <_strtod_l+0x1b8>
 801a86a:	9905      	ldr	r1, [sp, #20]
 801a86c:	462a      	mov	r2, r5
 801a86e:	f002 ff0f 	bl	801d690 <strncmp>
 801a872:	b398      	cbz	r0, 801a8dc <_strtod_l+0x1d4>
 801a874:	2000      	movs	r0, #0
 801a876:	4632      	mov	r2, r6
 801a878:	463d      	mov	r5, r7
 801a87a:	9005      	str	r0, [sp, #20]
 801a87c:	4603      	mov	r3, r0
 801a87e:	2a65      	cmp	r2, #101	; 0x65
 801a880:	d001      	beq.n	801a886 <_strtod_l+0x17e>
 801a882:	2a45      	cmp	r2, #69	; 0x45
 801a884:	d118      	bne.n	801a8b8 <_strtod_l+0x1b0>
 801a886:	b91d      	cbnz	r5, 801a890 <_strtod_l+0x188>
 801a888:	9a04      	ldr	r2, [sp, #16]
 801a88a:	4302      	orrs	r2, r0
 801a88c:	d09e      	beq.n	801a7cc <_strtod_l+0xc4>
 801a88e:	2500      	movs	r5, #0
 801a890:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801a894:	f108 0201 	add.w	r2, r8, #1
 801a898:	9217      	str	r2, [sp, #92]	; 0x5c
 801a89a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a89e:	2a2b      	cmp	r2, #43	; 0x2b
 801a8a0:	d075      	beq.n	801a98e <_strtod_l+0x286>
 801a8a2:	2a2d      	cmp	r2, #45	; 0x2d
 801a8a4:	d07b      	beq.n	801a99e <_strtod_l+0x296>
 801a8a6:	f04f 0c00 	mov.w	ip, #0
 801a8aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a8ae:	2909      	cmp	r1, #9
 801a8b0:	f240 8082 	bls.w	801a9b8 <_strtod_l+0x2b0>
 801a8b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a8b8:	2600      	movs	r6, #0
 801a8ba:	e09d      	b.n	801a9f8 <_strtod_l+0x2f0>
 801a8bc:	2300      	movs	r3, #0
 801a8be:	e7c4      	b.n	801a84a <_strtod_l+0x142>
 801a8c0:	2f08      	cmp	r7, #8
 801a8c2:	bfd8      	it	le
 801a8c4:	9907      	ldrle	r1, [sp, #28]
 801a8c6:	f100 0001 	add.w	r0, r0, #1
 801a8ca:	bfda      	itte	le
 801a8cc:	fb02 3301 	mlale	r3, r2, r1, r3
 801a8d0:	9307      	strle	r3, [sp, #28]
 801a8d2:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a8d6:	3701      	adds	r7, #1
 801a8d8:	9017      	str	r0, [sp, #92]	; 0x5c
 801a8da:	e7bf      	b.n	801a85c <_strtod_l+0x154>
 801a8dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a8de:	195a      	adds	r2, r3, r5
 801a8e0:	9217      	str	r2, [sp, #92]	; 0x5c
 801a8e2:	5d5a      	ldrb	r2, [r3, r5]
 801a8e4:	2f00      	cmp	r7, #0
 801a8e6:	d037      	beq.n	801a958 <_strtod_l+0x250>
 801a8e8:	9005      	str	r0, [sp, #20]
 801a8ea:	463d      	mov	r5, r7
 801a8ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a8f0:	2b09      	cmp	r3, #9
 801a8f2:	d912      	bls.n	801a91a <_strtod_l+0x212>
 801a8f4:	2301      	movs	r3, #1
 801a8f6:	e7c2      	b.n	801a87e <_strtod_l+0x176>
 801a8f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a8fa:	1c5a      	adds	r2, r3, #1
 801a8fc:	9217      	str	r2, [sp, #92]	; 0x5c
 801a8fe:	785a      	ldrb	r2, [r3, #1]
 801a900:	3001      	adds	r0, #1
 801a902:	2a30      	cmp	r2, #48	; 0x30
 801a904:	d0f8      	beq.n	801a8f8 <_strtod_l+0x1f0>
 801a906:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a90a:	2b08      	cmp	r3, #8
 801a90c:	f200 84d9 	bhi.w	801b2c2 <_strtod_l+0xbba>
 801a910:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a912:	9005      	str	r0, [sp, #20]
 801a914:	2000      	movs	r0, #0
 801a916:	9308      	str	r3, [sp, #32]
 801a918:	4605      	mov	r5, r0
 801a91a:	3a30      	subs	r2, #48	; 0x30
 801a91c:	f100 0301 	add.w	r3, r0, #1
 801a920:	d014      	beq.n	801a94c <_strtod_l+0x244>
 801a922:	9905      	ldr	r1, [sp, #20]
 801a924:	4419      	add	r1, r3
 801a926:	9105      	str	r1, [sp, #20]
 801a928:	462b      	mov	r3, r5
 801a92a:	eb00 0e05 	add.w	lr, r0, r5
 801a92e:	210a      	movs	r1, #10
 801a930:	4573      	cmp	r3, lr
 801a932:	d113      	bne.n	801a95c <_strtod_l+0x254>
 801a934:	182b      	adds	r3, r5, r0
 801a936:	2b08      	cmp	r3, #8
 801a938:	f105 0501 	add.w	r5, r5, #1
 801a93c:	4405      	add	r5, r0
 801a93e:	dc1c      	bgt.n	801a97a <_strtod_l+0x272>
 801a940:	9907      	ldr	r1, [sp, #28]
 801a942:	230a      	movs	r3, #10
 801a944:	fb03 2301 	mla	r3, r3, r1, r2
 801a948:	9307      	str	r3, [sp, #28]
 801a94a:	2300      	movs	r3, #0
 801a94c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a94e:	1c51      	adds	r1, r2, #1
 801a950:	9117      	str	r1, [sp, #92]	; 0x5c
 801a952:	7852      	ldrb	r2, [r2, #1]
 801a954:	4618      	mov	r0, r3
 801a956:	e7c9      	b.n	801a8ec <_strtod_l+0x1e4>
 801a958:	4638      	mov	r0, r7
 801a95a:	e7d2      	b.n	801a902 <_strtod_l+0x1fa>
 801a95c:	2b08      	cmp	r3, #8
 801a95e:	dc04      	bgt.n	801a96a <_strtod_l+0x262>
 801a960:	9e07      	ldr	r6, [sp, #28]
 801a962:	434e      	muls	r6, r1
 801a964:	9607      	str	r6, [sp, #28]
 801a966:	3301      	adds	r3, #1
 801a968:	e7e2      	b.n	801a930 <_strtod_l+0x228>
 801a96a:	f103 0c01 	add.w	ip, r3, #1
 801a96e:	f1bc 0f10 	cmp.w	ip, #16
 801a972:	bfd8      	it	le
 801a974:	fb01 f909 	mulle.w	r9, r1, r9
 801a978:	e7f5      	b.n	801a966 <_strtod_l+0x25e>
 801a97a:	2d10      	cmp	r5, #16
 801a97c:	bfdc      	itt	le
 801a97e:	230a      	movle	r3, #10
 801a980:	fb03 2909 	mlale	r9, r3, r9, r2
 801a984:	e7e1      	b.n	801a94a <_strtod_l+0x242>
 801a986:	2300      	movs	r3, #0
 801a988:	9305      	str	r3, [sp, #20]
 801a98a:	2301      	movs	r3, #1
 801a98c:	e77c      	b.n	801a888 <_strtod_l+0x180>
 801a98e:	f04f 0c00 	mov.w	ip, #0
 801a992:	f108 0202 	add.w	r2, r8, #2
 801a996:	9217      	str	r2, [sp, #92]	; 0x5c
 801a998:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a99c:	e785      	b.n	801a8aa <_strtod_l+0x1a2>
 801a99e:	f04f 0c01 	mov.w	ip, #1
 801a9a2:	e7f6      	b.n	801a992 <_strtod_l+0x28a>
 801a9a4:	080256d8 	.word	0x080256d8
 801a9a8:	08025490 	.word	0x08025490
 801a9ac:	7ff00000 	.word	0x7ff00000
 801a9b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a9b2:	1c51      	adds	r1, r2, #1
 801a9b4:	9117      	str	r1, [sp, #92]	; 0x5c
 801a9b6:	7852      	ldrb	r2, [r2, #1]
 801a9b8:	2a30      	cmp	r2, #48	; 0x30
 801a9ba:	d0f9      	beq.n	801a9b0 <_strtod_l+0x2a8>
 801a9bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801a9c0:	2908      	cmp	r1, #8
 801a9c2:	f63f af79 	bhi.w	801a8b8 <_strtod_l+0x1b0>
 801a9c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801a9ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a9cc:	9206      	str	r2, [sp, #24]
 801a9ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a9d0:	1c51      	adds	r1, r2, #1
 801a9d2:	9117      	str	r1, [sp, #92]	; 0x5c
 801a9d4:	7852      	ldrb	r2, [r2, #1]
 801a9d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801a9da:	2e09      	cmp	r6, #9
 801a9dc:	d937      	bls.n	801aa4e <_strtod_l+0x346>
 801a9de:	9e06      	ldr	r6, [sp, #24]
 801a9e0:	1b89      	subs	r1, r1, r6
 801a9e2:	2908      	cmp	r1, #8
 801a9e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a9e8:	dc02      	bgt.n	801a9f0 <_strtod_l+0x2e8>
 801a9ea:	4576      	cmp	r6, lr
 801a9ec:	bfa8      	it	ge
 801a9ee:	4676      	movge	r6, lr
 801a9f0:	f1bc 0f00 	cmp.w	ip, #0
 801a9f4:	d000      	beq.n	801a9f8 <_strtod_l+0x2f0>
 801a9f6:	4276      	negs	r6, r6
 801a9f8:	2d00      	cmp	r5, #0
 801a9fa:	d14d      	bne.n	801aa98 <_strtod_l+0x390>
 801a9fc:	9904      	ldr	r1, [sp, #16]
 801a9fe:	4301      	orrs	r1, r0
 801aa00:	f47f aec6 	bne.w	801a790 <_strtod_l+0x88>
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	f47f aee1 	bne.w	801a7cc <_strtod_l+0xc4>
 801aa0a:	2a69      	cmp	r2, #105	; 0x69
 801aa0c:	d027      	beq.n	801aa5e <_strtod_l+0x356>
 801aa0e:	dc24      	bgt.n	801aa5a <_strtod_l+0x352>
 801aa10:	2a49      	cmp	r2, #73	; 0x49
 801aa12:	d024      	beq.n	801aa5e <_strtod_l+0x356>
 801aa14:	2a4e      	cmp	r2, #78	; 0x4e
 801aa16:	f47f aed9 	bne.w	801a7cc <_strtod_l+0xc4>
 801aa1a:	499f      	ldr	r1, [pc, #636]	; (801ac98 <_strtod_l+0x590>)
 801aa1c:	a817      	add	r0, sp, #92	; 0x5c
 801aa1e:	f001 fe3d 	bl	801c69c <__match>
 801aa22:	2800      	cmp	r0, #0
 801aa24:	f43f aed2 	beq.w	801a7cc <_strtod_l+0xc4>
 801aa28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa2a:	781b      	ldrb	r3, [r3, #0]
 801aa2c:	2b28      	cmp	r3, #40	; 0x28
 801aa2e:	d12d      	bne.n	801aa8c <_strtod_l+0x384>
 801aa30:	499a      	ldr	r1, [pc, #616]	; (801ac9c <_strtod_l+0x594>)
 801aa32:	aa1a      	add	r2, sp, #104	; 0x68
 801aa34:	a817      	add	r0, sp, #92	; 0x5c
 801aa36:	f001 fe45 	bl	801c6c4 <__hexnan>
 801aa3a:	2805      	cmp	r0, #5
 801aa3c:	d126      	bne.n	801aa8c <_strtod_l+0x384>
 801aa3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801aa40:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801aa44:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801aa48:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801aa4c:	e6a0      	b.n	801a790 <_strtod_l+0x88>
 801aa4e:	210a      	movs	r1, #10
 801aa50:	fb01 2e0e 	mla	lr, r1, lr, r2
 801aa54:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801aa58:	e7b9      	b.n	801a9ce <_strtod_l+0x2c6>
 801aa5a:	2a6e      	cmp	r2, #110	; 0x6e
 801aa5c:	e7db      	b.n	801aa16 <_strtod_l+0x30e>
 801aa5e:	4990      	ldr	r1, [pc, #576]	; (801aca0 <_strtod_l+0x598>)
 801aa60:	a817      	add	r0, sp, #92	; 0x5c
 801aa62:	f001 fe1b 	bl	801c69c <__match>
 801aa66:	2800      	cmp	r0, #0
 801aa68:	f43f aeb0 	beq.w	801a7cc <_strtod_l+0xc4>
 801aa6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa6e:	498d      	ldr	r1, [pc, #564]	; (801aca4 <_strtod_l+0x59c>)
 801aa70:	3b01      	subs	r3, #1
 801aa72:	a817      	add	r0, sp, #92	; 0x5c
 801aa74:	9317      	str	r3, [sp, #92]	; 0x5c
 801aa76:	f001 fe11 	bl	801c69c <__match>
 801aa7a:	b910      	cbnz	r0, 801aa82 <_strtod_l+0x37a>
 801aa7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa7e:	3301      	adds	r3, #1
 801aa80:	9317      	str	r3, [sp, #92]	; 0x5c
 801aa82:	f8df b230 	ldr.w	fp, [pc, #560]	; 801acb4 <_strtod_l+0x5ac>
 801aa86:	f04f 0a00 	mov.w	sl, #0
 801aa8a:	e681      	b.n	801a790 <_strtod_l+0x88>
 801aa8c:	4886      	ldr	r0, [pc, #536]	; (801aca8 <_strtod_l+0x5a0>)
 801aa8e:	f002 fde7 	bl	801d660 <nan>
 801aa92:	ec5b ab10 	vmov	sl, fp, d0
 801aa96:	e67b      	b.n	801a790 <_strtod_l+0x88>
 801aa98:	9b05      	ldr	r3, [sp, #20]
 801aa9a:	9807      	ldr	r0, [sp, #28]
 801aa9c:	1af3      	subs	r3, r6, r3
 801aa9e:	2f00      	cmp	r7, #0
 801aaa0:	bf08      	it	eq
 801aaa2:	462f      	moveq	r7, r5
 801aaa4:	2d10      	cmp	r5, #16
 801aaa6:	9306      	str	r3, [sp, #24]
 801aaa8:	46a8      	mov	r8, r5
 801aaaa:	bfa8      	it	ge
 801aaac:	f04f 0810 	movge.w	r8, #16
 801aab0:	f7e5 fd40 	bl	8000534 <__aeabi_ui2d>
 801aab4:	2d09      	cmp	r5, #9
 801aab6:	4682      	mov	sl, r0
 801aab8:	468b      	mov	fp, r1
 801aaba:	dd13      	ble.n	801aae4 <_strtod_l+0x3dc>
 801aabc:	4b7b      	ldr	r3, [pc, #492]	; (801acac <_strtod_l+0x5a4>)
 801aabe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801aac2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801aac6:	f7e5 fdaf 	bl	8000628 <__aeabi_dmul>
 801aaca:	4682      	mov	sl, r0
 801aacc:	4648      	mov	r0, r9
 801aace:	468b      	mov	fp, r1
 801aad0:	f7e5 fd30 	bl	8000534 <__aeabi_ui2d>
 801aad4:	4602      	mov	r2, r0
 801aad6:	460b      	mov	r3, r1
 801aad8:	4650      	mov	r0, sl
 801aada:	4659      	mov	r1, fp
 801aadc:	f7e5 fbee 	bl	80002bc <__adddf3>
 801aae0:	4682      	mov	sl, r0
 801aae2:	468b      	mov	fp, r1
 801aae4:	2d0f      	cmp	r5, #15
 801aae6:	dc38      	bgt.n	801ab5a <_strtod_l+0x452>
 801aae8:	9b06      	ldr	r3, [sp, #24]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	f43f ae50 	beq.w	801a790 <_strtod_l+0x88>
 801aaf0:	dd24      	ble.n	801ab3c <_strtod_l+0x434>
 801aaf2:	2b16      	cmp	r3, #22
 801aaf4:	dc0b      	bgt.n	801ab0e <_strtod_l+0x406>
 801aaf6:	496d      	ldr	r1, [pc, #436]	; (801acac <_strtod_l+0x5a4>)
 801aaf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801aafc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab00:	4652      	mov	r2, sl
 801ab02:	465b      	mov	r3, fp
 801ab04:	f7e5 fd90 	bl	8000628 <__aeabi_dmul>
 801ab08:	4682      	mov	sl, r0
 801ab0a:	468b      	mov	fp, r1
 801ab0c:	e640      	b.n	801a790 <_strtod_l+0x88>
 801ab0e:	9a06      	ldr	r2, [sp, #24]
 801ab10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801ab14:	4293      	cmp	r3, r2
 801ab16:	db20      	blt.n	801ab5a <_strtod_l+0x452>
 801ab18:	4c64      	ldr	r4, [pc, #400]	; (801acac <_strtod_l+0x5a4>)
 801ab1a:	f1c5 050f 	rsb	r5, r5, #15
 801ab1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801ab22:	4652      	mov	r2, sl
 801ab24:	465b      	mov	r3, fp
 801ab26:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab2a:	f7e5 fd7d 	bl	8000628 <__aeabi_dmul>
 801ab2e:	9b06      	ldr	r3, [sp, #24]
 801ab30:	1b5d      	subs	r5, r3, r5
 801ab32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801ab36:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ab3a:	e7e3      	b.n	801ab04 <_strtod_l+0x3fc>
 801ab3c:	9b06      	ldr	r3, [sp, #24]
 801ab3e:	3316      	adds	r3, #22
 801ab40:	db0b      	blt.n	801ab5a <_strtod_l+0x452>
 801ab42:	9b05      	ldr	r3, [sp, #20]
 801ab44:	1b9e      	subs	r6, r3, r6
 801ab46:	4b59      	ldr	r3, [pc, #356]	; (801acac <_strtod_l+0x5a4>)
 801ab48:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801ab4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ab50:	4650      	mov	r0, sl
 801ab52:	4659      	mov	r1, fp
 801ab54:	f7e5 fe92 	bl	800087c <__aeabi_ddiv>
 801ab58:	e7d6      	b.n	801ab08 <_strtod_l+0x400>
 801ab5a:	9b06      	ldr	r3, [sp, #24]
 801ab5c:	eba5 0808 	sub.w	r8, r5, r8
 801ab60:	4498      	add	r8, r3
 801ab62:	f1b8 0f00 	cmp.w	r8, #0
 801ab66:	dd74      	ble.n	801ac52 <_strtod_l+0x54a>
 801ab68:	f018 030f 	ands.w	r3, r8, #15
 801ab6c:	d00a      	beq.n	801ab84 <_strtod_l+0x47c>
 801ab6e:	494f      	ldr	r1, [pc, #316]	; (801acac <_strtod_l+0x5a4>)
 801ab70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ab74:	4652      	mov	r2, sl
 801ab76:	465b      	mov	r3, fp
 801ab78:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab7c:	f7e5 fd54 	bl	8000628 <__aeabi_dmul>
 801ab80:	4682      	mov	sl, r0
 801ab82:	468b      	mov	fp, r1
 801ab84:	f038 080f 	bics.w	r8, r8, #15
 801ab88:	d04f      	beq.n	801ac2a <_strtod_l+0x522>
 801ab8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801ab8e:	dd22      	ble.n	801abd6 <_strtod_l+0x4ce>
 801ab90:	2500      	movs	r5, #0
 801ab92:	462e      	mov	r6, r5
 801ab94:	9507      	str	r5, [sp, #28]
 801ab96:	9505      	str	r5, [sp, #20]
 801ab98:	2322      	movs	r3, #34	; 0x22
 801ab9a:	f8df b118 	ldr.w	fp, [pc, #280]	; 801acb4 <_strtod_l+0x5ac>
 801ab9e:	6023      	str	r3, [r4, #0]
 801aba0:	f04f 0a00 	mov.w	sl, #0
 801aba4:	9b07      	ldr	r3, [sp, #28]
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	f43f adf2 	beq.w	801a790 <_strtod_l+0x88>
 801abac:	9918      	ldr	r1, [sp, #96]	; 0x60
 801abae:	4620      	mov	r0, r4
 801abb0:	f001 fe82 	bl	801c8b8 <_Bfree>
 801abb4:	9905      	ldr	r1, [sp, #20]
 801abb6:	4620      	mov	r0, r4
 801abb8:	f001 fe7e 	bl	801c8b8 <_Bfree>
 801abbc:	4631      	mov	r1, r6
 801abbe:	4620      	mov	r0, r4
 801abc0:	f001 fe7a 	bl	801c8b8 <_Bfree>
 801abc4:	9907      	ldr	r1, [sp, #28]
 801abc6:	4620      	mov	r0, r4
 801abc8:	f001 fe76 	bl	801c8b8 <_Bfree>
 801abcc:	4629      	mov	r1, r5
 801abce:	4620      	mov	r0, r4
 801abd0:	f001 fe72 	bl	801c8b8 <_Bfree>
 801abd4:	e5dc      	b.n	801a790 <_strtod_l+0x88>
 801abd6:	4b36      	ldr	r3, [pc, #216]	; (801acb0 <_strtod_l+0x5a8>)
 801abd8:	9304      	str	r3, [sp, #16]
 801abda:	2300      	movs	r3, #0
 801abdc:	ea4f 1828 	mov.w	r8, r8, asr #4
 801abe0:	4650      	mov	r0, sl
 801abe2:	4659      	mov	r1, fp
 801abe4:	4699      	mov	r9, r3
 801abe6:	f1b8 0f01 	cmp.w	r8, #1
 801abea:	dc21      	bgt.n	801ac30 <_strtod_l+0x528>
 801abec:	b10b      	cbz	r3, 801abf2 <_strtod_l+0x4ea>
 801abee:	4682      	mov	sl, r0
 801abf0:	468b      	mov	fp, r1
 801abf2:	4b2f      	ldr	r3, [pc, #188]	; (801acb0 <_strtod_l+0x5a8>)
 801abf4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801abf8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801abfc:	4652      	mov	r2, sl
 801abfe:	465b      	mov	r3, fp
 801ac00:	e9d9 0100 	ldrd	r0, r1, [r9]
 801ac04:	f7e5 fd10 	bl	8000628 <__aeabi_dmul>
 801ac08:	4b2a      	ldr	r3, [pc, #168]	; (801acb4 <_strtod_l+0x5ac>)
 801ac0a:	460a      	mov	r2, r1
 801ac0c:	400b      	ands	r3, r1
 801ac0e:	492a      	ldr	r1, [pc, #168]	; (801acb8 <_strtod_l+0x5b0>)
 801ac10:	428b      	cmp	r3, r1
 801ac12:	4682      	mov	sl, r0
 801ac14:	d8bc      	bhi.n	801ab90 <_strtod_l+0x488>
 801ac16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ac1a:	428b      	cmp	r3, r1
 801ac1c:	bf86      	itte	hi
 801ac1e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801acbc <_strtod_l+0x5b4>
 801ac22:	f04f 3aff 	movhi.w	sl, #4294967295
 801ac26:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	9304      	str	r3, [sp, #16]
 801ac2e:	e084      	b.n	801ad3a <_strtod_l+0x632>
 801ac30:	f018 0f01 	tst.w	r8, #1
 801ac34:	d005      	beq.n	801ac42 <_strtod_l+0x53a>
 801ac36:	9b04      	ldr	r3, [sp, #16]
 801ac38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac3c:	f7e5 fcf4 	bl	8000628 <__aeabi_dmul>
 801ac40:	2301      	movs	r3, #1
 801ac42:	9a04      	ldr	r2, [sp, #16]
 801ac44:	3208      	adds	r2, #8
 801ac46:	f109 0901 	add.w	r9, r9, #1
 801ac4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801ac4e:	9204      	str	r2, [sp, #16]
 801ac50:	e7c9      	b.n	801abe6 <_strtod_l+0x4de>
 801ac52:	d0ea      	beq.n	801ac2a <_strtod_l+0x522>
 801ac54:	f1c8 0800 	rsb	r8, r8, #0
 801ac58:	f018 020f 	ands.w	r2, r8, #15
 801ac5c:	d00a      	beq.n	801ac74 <_strtod_l+0x56c>
 801ac5e:	4b13      	ldr	r3, [pc, #76]	; (801acac <_strtod_l+0x5a4>)
 801ac60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ac64:	4650      	mov	r0, sl
 801ac66:	4659      	mov	r1, fp
 801ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac6c:	f7e5 fe06 	bl	800087c <__aeabi_ddiv>
 801ac70:	4682      	mov	sl, r0
 801ac72:	468b      	mov	fp, r1
 801ac74:	ea5f 1828 	movs.w	r8, r8, asr #4
 801ac78:	d0d7      	beq.n	801ac2a <_strtod_l+0x522>
 801ac7a:	f1b8 0f1f 	cmp.w	r8, #31
 801ac7e:	dd1f      	ble.n	801acc0 <_strtod_l+0x5b8>
 801ac80:	2500      	movs	r5, #0
 801ac82:	462e      	mov	r6, r5
 801ac84:	9507      	str	r5, [sp, #28]
 801ac86:	9505      	str	r5, [sp, #20]
 801ac88:	2322      	movs	r3, #34	; 0x22
 801ac8a:	f04f 0a00 	mov.w	sl, #0
 801ac8e:	f04f 0b00 	mov.w	fp, #0
 801ac92:	6023      	str	r3, [r4, #0]
 801ac94:	e786      	b.n	801aba4 <_strtod_l+0x49c>
 801ac96:	bf00      	nop
 801ac98:	08025461 	.word	0x08025461
 801ac9c:	080254a4 	.word	0x080254a4
 801aca0:	08025459 	.word	0x08025459
 801aca4:	080255e4 	.word	0x080255e4
 801aca8:	08025890 	.word	0x08025890
 801acac:	08025770 	.word	0x08025770
 801acb0:	08025748 	.word	0x08025748
 801acb4:	7ff00000 	.word	0x7ff00000
 801acb8:	7ca00000 	.word	0x7ca00000
 801acbc:	7fefffff 	.word	0x7fefffff
 801acc0:	f018 0310 	ands.w	r3, r8, #16
 801acc4:	bf18      	it	ne
 801acc6:	236a      	movne	r3, #106	; 0x6a
 801acc8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801b078 <_strtod_l+0x970>
 801accc:	9304      	str	r3, [sp, #16]
 801acce:	4650      	mov	r0, sl
 801acd0:	4659      	mov	r1, fp
 801acd2:	2300      	movs	r3, #0
 801acd4:	f018 0f01 	tst.w	r8, #1
 801acd8:	d004      	beq.n	801ace4 <_strtod_l+0x5dc>
 801acda:	e9d9 2300 	ldrd	r2, r3, [r9]
 801acde:	f7e5 fca3 	bl	8000628 <__aeabi_dmul>
 801ace2:	2301      	movs	r3, #1
 801ace4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801ace8:	f109 0908 	add.w	r9, r9, #8
 801acec:	d1f2      	bne.n	801acd4 <_strtod_l+0x5cc>
 801acee:	b10b      	cbz	r3, 801acf4 <_strtod_l+0x5ec>
 801acf0:	4682      	mov	sl, r0
 801acf2:	468b      	mov	fp, r1
 801acf4:	9b04      	ldr	r3, [sp, #16]
 801acf6:	b1c3      	cbz	r3, 801ad2a <_strtod_l+0x622>
 801acf8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801acfc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	4659      	mov	r1, fp
 801ad04:	dd11      	ble.n	801ad2a <_strtod_l+0x622>
 801ad06:	2b1f      	cmp	r3, #31
 801ad08:	f340 8124 	ble.w	801af54 <_strtod_l+0x84c>
 801ad0c:	2b34      	cmp	r3, #52	; 0x34
 801ad0e:	bfde      	ittt	le
 801ad10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801ad14:	f04f 33ff 	movle.w	r3, #4294967295
 801ad18:	fa03 f202 	lslle.w	r2, r3, r2
 801ad1c:	f04f 0a00 	mov.w	sl, #0
 801ad20:	bfcc      	ite	gt
 801ad22:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801ad26:	ea02 0b01 	andle.w	fp, r2, r1
 801ad2a:	2200      	movs	r2, #0
 801ad2c:	2300      	movs	r3, #0
 801ad2e:	4650      	mov	r0, sl
 801ad30:	4659      	mov	r1, fp
 801ad32:	f7e5 fee1 	bl	8000af8 <__aeabi_dcmpeq>
 801ad36:	2800      	cmp	r0, #0
 801ad38:	d1a2      	bne.n	801ac80 <_strtod_l+0x578>
 801ad3a:	9b07      	ldr	r3, [sp, #28]
 801ad3c:	9300      	str	r3, [sp, #0]
 801ad3e:	9908      	ldr	r1, [sp, #32]
 801ad40:	462b      	mov	r3, r5
 801ad42:	463a      	mov	r2, r7
 801ad44:	4620      	mov	r0, r4
 801ad46:	f001 fe1f 	bl	801c988 <__s2b>
 801ad4a:	9007      	str	r0, [sp, #28]
 801ad4c:	2800      	cmp	r0, #0
 801ad4e:	f43f af1f 	beq.w	801ab90 <_strtod_l+0x488>
 801ad52:	9b05      	ldr	r3, [sp, #20]
 801ad54:	1b9e      	subs	r6, r3, r6
 801ad56:	9b06      	ldr	r3, [sp, #24]
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	bfb4      	ite	lt
 801ad5c:	4633      	movlt	r3, r6
 801ad5e:	2300      	movge	r3, #0
 801ad60:	930c      	str	r3, [sp, #48]	; 0x30
 801ad62:	9b06      	ldr	r3, [sp, #24]
 801ad64:	2500      	movs	r5, #0
 801ad66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ad6a:	9312      	str	r3, [sp, #72]	; 0x48
 801ad6c:	462e      	mov	r6, r5
 801ad6e:	9b07      	ldr	r3, [sp, #28]
 801ad70:	4620      	mov	r0, r4
 801ad72:	6859      	ldr	r1, [r3, #4]
 801ad74:	f001 fd60 	bl	801c838 <_Balloc>
 801ad78:	9005      	str	r0, [sp, #20]
 801ad7a:	2800      	cmp	r0, #0
 801ad7c:	f43f af0c 	beq.w	801ab98 <_strtod_l+0x490>
 801ad80:	9b07      	ldr	r3, [sp, #28]
 801ad82:	691a      	ldr	r2, [r3, #16]
 801ad84:	3202      	adds	r2, #2
 801ad86:	f103 010c 	add.w	r1, r3, #12
 801ad8a:	0092      	lsls	r2, r2, #2
 801ad8c:	300c      	adds	r0, #12
 801ad8e:	f7fe fde9 	bl	8019964 <memcpy>
 801ad92:	ec4b ab10 	vmov	d0, sl, fp
 801ad96:	aa1a      	add	r2, sp, #104	; 0x68
 801ad98:	a919      	add	r1, sp, #100	; 0x64
 801ad9a:	4620      	mov	r0, r4
 801ad9c:	f002 f93a 	bl	801d014 <__d2b>
 801ada0:	ec4b ab18 	vmov	d8, sl, fp
 801ada4:	9018      	str	r0, [sp, #96]	; 0x60
 801ada6:	2800      	cmp	r0, #0
 801ada8:	f43f aef6 	beq.w	801ab98 <_strtod_l+0x490>
 801adac:	2101      	movs	r1, #1
 801adae:	4620      	mov	r0, r4
 801adb0:	f001 fe84 	bl	801cabc <__i2b>
 801adb4:	4606      	mov	r6, r0
 801adb6:	2800      	cmp	r0, #0
 801adb8:	f43f aeee 	beq.w	801ab98 <_strtod_l+0x490>
 801adbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801adbe:	9904      	ldr	r1, [sp, #16]
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	bfab      	itete	ge
 801adc4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801adc6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801adc8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801adca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801adce:	bfac      	ite	ge
 801add0:	eb03 0902 	addge.w	r9, r3, r2
 801add4:	1ad7      	sublt	r7, r2, r3
 801add6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801add8:	eba3 0801 	sub.w	r8, r3, r1
 801addc:	4490      	add	r8, r2
 801adde:	4ba1      	ldr	r3, [pc, #644]	; (801b064 <_strtod_l+0x95c>)
 801ade0:	f108 38ff 	add.w	r8, r8, #4294967295
 801ade4:	4598      	cmp	r8, r3
 801ade6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801adea:	f280 80c7 	bge.w	801af7c <_strtod_l+0x874>
 801adee:	eba3 0308 	sub.w	r3, r3, r8
 801adf2:	2b1f      	cmp	r3, #31
 801adf4:	eba2 0203 	sub.w	r2, r2, r3
 801adf8:	f04f 0101 	mov.w	r1, #1
 801adfc:	f300 80b1 	bgt.w	801af62 <_strtod_l+0x85a>
 801ae00:	fa01 f303 	lsl.w	r3, r1, r3
 801ae04:	930d      	str	r3, [sp, #52]	; 0x34
 801ae06:	2300      	movs	r3, #0
 801ae08:	9308      	str	r3, [sp, #32]
 801ae0a:	eb09 0802 	add.w	r8, r9, r2
 801ae0e:	9b04      	ldr	r3, [sp, #16]
 801ae10:	45c1      	cmp	r9, r8
 801ae12:	4417      	add	r7, r2
 801ae14:	441f      	add	r7, r3
 801ae16:	464b      	mov	r3, r9
 801ae18:	bfa8      	it	ge
 801ae1a:	4643      	movge	r3, r8
 801ae1c:	42bb      	cmp	r3, r7
 801ae1e:	bfa8      	it	ge
 801ae20:	463b      	movge	r3, r7
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	bfc2      	ittt	gt
 801ae26:	eba8 0803 	subgt.w	r8, r8, r3
 801ae2a:	1aff      	subgt	r7, r7, r3
 801ae2c:	eba9 0903 	subgt.w	r9, r9, r3
 801ae30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	dd17      	ble.n	801ae66 <_strtod_l+0x75e>
 801ae36:	4631      	mov	r1, r6
 801ae38:	461a      	mov	r2, r3
 801ae3a:	4620      	mov	r0, r4
 801ae3c:	f001 fefe 	bl	801cc3c <__pow5mult>
 801ae40:	4606      	mov	r6, r0
 801ae42:	2800      	cmp	r0, #0
 801ae44:	f43f aea8 	beq.w	801ab98 <_strtod_l+0x490>
 801ae48:	4601      	mov	r1, r0
 801ae4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ae4c:	4620      	mov	r0, r4
 801ae4e:	f001 fe4b 	bl	801cae8 <__multiply>
 801ae52:	900b      	str	r0, [sp, #44]	; 0x2c
 801ae54:	2800      	cmp	r0, #0
 801ae56:	f43f ae9f 	beq.w	801ab98 <_strtod_l+0x490>
 801ae5a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ae5c:	4620      	mov	r0, r4
 801ae5e:	f001 fd2b 	bl	801c8b8 <_Bfree>
 801ae62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae64:	9318      	str	r3, [sp, #96]	; 0x60
 801ae66:	f1b8 0f00 	cmp.w	r8, #0
 801ae6a:	f300 808c 	bgt.w	801af86 <_strtod_l+0x87e>
 801ae6e:	9b06      	ldr	r3, [sp, #24]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	dd08      	ble.n	801ae86 <_strtod_l+0x77e>
 801ae74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ae76:	9905      	ldr	r1, [sp, #20]
 801ae78:	4620      	mov	r0, r4
 801ae7a:	f001 fedf 	bl	801cc3c <__pow5mult>
 801ae7e:	9005      	str	r0, [sp, #20]
 801ae80:	2800      	cmp	r0, #0
 801ae82:	f43f ae89 	beq.w	801ab98 <_strtod_l+0x490>
 801ae86:	2f00      	cmp	r7, #0
 801ae88:	dd08      	ble.n	801ae9c <_strtod_l+0x794>
 801ae8a:	9905      	ldr	r1, [sp, #20]
 801ae8c:	463a      	mov	r2, r7
 801ae8e:	4620      	mov	r0, r4
 801ae90:	f001 ff2e 	bl	801ccf0 <__lshift>
 801ae94:	9005      	str	r0, [sp, #20]
 801ae96:	2800      	cmp	r0, #0
 801ae98:	f43f ae7e 	beq.w	801ab98 <_strtod_l+0x490>
 801ae9c:	f1b9 0f00 	cmp.w	r9, #0
 801aea0:	dd08      	ble.n	801aeb4 <_strtod_l+0x7ac>
 801aea2:	4631      	mov	r1, r6
 801aea4:	464a      	mov	r2, r9
 801aea6:	4620      	mov	r0, r4
 801aea8:	f001 ff22 	bl	801ccf0 <__lshift>
 801aeac:	4606      	mov	r6, r0
 801aeae:	2800      	cmp	r0, #0
 801aeb0:	f43f ae72 	beq.w	801ab98 <_strtod_l+0x490>
 801aeb4:	9a05      	ldr	r2, [sp, #20]
 801aeb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801aeb8:	4620      	mov	r0, r4
 801aeba:	f001 ffa5 	bl	801ce08 <__mdiff>
 801aebe:	4605      	mov	r5, r0
 801aec0:	2800      	cmp	r0, #0
 801aec2:	f43f ae69 	beq.w	801ab98 <_strtod_l+0x490>
 801aec6:	68c3      	ldr	r3, [r0, #12]
 801aec8:	930b      	str	r3, [sp, #44]	; 0x2c
 801aeca:	2300      	movs	r3, #0
 801aecc:	60c3      	str	r3, [r0, #12]
 801aece:	4631      	mov	r1, r6
 801aed0:	f001 ff7e 	bl	801cdd0 <__mcmp>
 801aed4:	2800      	cmp	r0, #0
 801aed6:	da60      	bge.n	801af9a <_strtod_l+0x892>
 801aed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aeda:	ea53 030a 	orrs.w	r3, r3, sl
 801aede:	f040 8082 	bne.w	801afe6 <_strtod_l+0x8de>
 801aee2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d17d      	bne.n	801afe6 <_strtod_l+0x8de>
 801aeea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801aeee:	0d1b      	lsrs	r3, r3, #20
 801aef0:	051b      	lsls	r3, r3, #20
 801aef2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801aef6:	d976      	bls.n	801afe6 <_strtod_l+0x8de>
 801aef8:	696b      	ldr	r3, [r5, #20]
 801aefa:	b913      	cbnz	r3, 801af02 <_strtod_l+0x7fa>
 801aefc:	692b      	ldr	r3, [r5, #16]
 801aefe:	2b01      	cmp	r3, #1
 801af00:	dd71      	ble.n	801afe6 <_strtod_l+0x8de>
 801af02:	4629      	mov	r1, r5
 801af04:	2201      	movs	r2, #1
 801af06:	4620      	mov	r0, r4
 801af08:	f001 fef2 	bl	801ccf0 <__lshift>
 801af0c:	4631      	mov	r1, r6
 801af0e:	4605      	mov	r5, r0
 801af10:	f001 ff5e 	bl	801cdd0 <__mcmp>
 801af14:	2800      	cmp	r0, #0
 801af16:	dd66      	ble.n	801afe6 <_strtod_l+0x8de>
 801af18:	9904      	ldr	r1, [sp, #16]
 801af1a:	4a53      	ldr	r2, [pc, #332]	; (801b068 <_strtod_l+0x960>)
 801af1c:	465b      	mov	r3, fp
 801af1e:	2900      	cmp	r1, #0
 801af20:	f000 8081 	beq.w	801b026 <_strtod_l+0x91e>
 801af24:	ea02 010b 	and.w	r1, r2, fp
 801af28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801af2c:	dc7b      	bgt.n	801b026 <_strtod_l+0x91e>
 801af2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801af32:	f77f aea9 	ble.w	801ac88 <_strtod_l+0x580>
 801af36:	4b4d      	ldr	r3, [pc, #308]	; (801b06c <_strtod_l+0x964>)
 801af38:	4650      	mov	r0, sl
 801af3a:	4659      	mov	r1, fp
 801af3c:	2200      	movs	r2, #0
 801af3e:	f7e5 fb73 	bl	8000628 <__aeabi_dmul>
 801af42:	460b      	mov	r3, r1
 801af44:	4303      	orrs	r3, r0
 801af46:	bf08      	it	eq
 801af48:	2322      	moveq	r3, #34	; 0x22
 801af4a:	4682      	mov	sl, r0
 801af4c:	468b      	mov	fp, r1
 801af4e:	bf08      	it	eq
 801af50:	6023      	streq	r3, [r4, #0]
 801af52:	e62b      	b.n	801abac <_strtod_l+0x4a4>
 801af54:	f04f 32ff 	mov.w	r2, #4294967295
 801af58:	fa02 f303 	lsl.w	r3, r2, r3
 801af5c:	ea03 0a0a 	and.w	sl, r3, sl
 801af60:	e6e3      	b.n	801ad2a <_strtod_l+0x622>
 801af62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801af66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801af6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801af6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801af72:	fa01 f308 	lsl.w	r3, r1, r8
 801af76:	9308      	str	r3, [sp, #32]
 801af78:	910d      	str	r1, [sp, #52]	; 0x34
 801af7a:	e746      	b.n	801ae0a <_strtod_l+0x702>
 801af7c:	2300      	movs	r3, #0
 801af7e:	9308      	str	r3, [sp, #32]
 801af80:	2301      	movs	r3, #1
 801af82:	930d      	str	r3, [sp, #52]	; 0x34
 801af84:	e741      	b.n	801ae0a <_strtod_l+0x702>
 801af86:	9918      	ldr	r1, [sp, #96]	; 0x60
 801af88:	4642      	mov	r2, r8
 801af8a:	4620      	mov	r0, r4
 801af8c:	f001 feb0 	bl	801ccf0 <__lshift>
 801af90:	9018      	str	r0, [sp, #96]	; 0x60
 801af92:	2800      	cmp	r0, #0
 801af94:	f47f af6b 	bne.w	801ae6e <_strtod_l+0x766>
 801af98:	e5fe      	b.n	801ab98 <_strtod_l+0x490>
 801af9a:	465f      	mov	r7, fp
 801af9c:	d16e      	bne.n	801b07c <_strtod_l+0x974>
 801af9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801afa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801afa4:	b342      	cbz	r2, 801aff8 <_strtod_l+0x8f0>
 801afa6:	4a32      	ldr	r2, [pc, #200]	; (801b070 <_strtod_l+0x968>)
 801afa8:	4293      	cmp	r3, r2
 801afaa:	d128      	bne.n	801affe <_strtod_l+0x8f6>
 801afac:	9b04      	ldr	r3, [sp, #16]
 801afae:	4651      	mov	r1, sl
 801afb0:	b1eb      	cbz	r3, 801afee <_strtod_l+0x8e6>
 801afb2:	4b2d      	ldr	r3, [pc, #180]	; (801b068 <_strtod_l+0x960>)
 801afb4:	403b      	ands	r3, r7
 801afb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801afba:	f04f 32ff 	mov.w	r2, #4294967295
 801afbe:	d819      	bhi.n	801aff4 <_strtod_l+0x8ec>
 801afc0:	0d1b      	lsrs	r3, r3, #20
 801afc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801afc6:	fa02 f303 	lsl.w	r3, r2, r3
 801afca:	4299      	cmp	r1, r3
 801afcc:	d117      	bne.n	801affe <_strtod_l+0x8f6>
 801afce:	4b29      	ldr	r3, [pc, #164]	; (801b074 <_strtod_l+0x96c>)
 801afd0:	429f      	cmp	r7, r3
 801afd2:	d102      	bne.n	801afda <_strtod_l+0x8d2>
 801afd4:	3101      	adds	r1, #1
 801afd6:	f43f addf 	beq.w	801ab98 <_strtod_l+0x490>
 801afda:	4b23      	ldr	r3, [pc, #140]	; (801b068 <_strtod_l+0x960>)
 801afdc:	403b      	ands	r3, r7
 801afde:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801afe2:	f04f 0a00 	mov.w	sl, #0
 801afe6:	9b04      	ldr	r3, [sp, #16]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d1a4      	bne.n	801af36 <_strtod_l+0x82e>
 801afec:	e5de      	b.n	801abac <_strtod_l+0x4a4>
 801afee:	f04f 33ff 	mov.w	r3, #4294967295
 801aff2:	e7ea      	b.n	801afca <_strtod_l+0x8c2>
 801aff4:	4613      	mov	r3, r2
 801aff6:	e7e8      	b.n	801afca <_strtod_l+0x8c2>
 801aff8:	ea53 030a 	orrs.w	r3, r3, sl
 801affc:	d08c      	beq.n	801af18 <_strtod_l+0x810>
 801affe:	9b08      	ldr	r3, [sp, #32]
 801b000:	b1db      	cbz	r3, 801b03a <_strtod_l+0x932>
 801b002:	423b      	tst	r3, r7
 801b004:	d0ef      	beq.n	801afe6 <_strtod_l+0x8de>
 801b006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b008:	9a04      	ldr	r2, [sp, #16]
 801b00a:	4650      	mov	r0, sl
 801b00c:	4659      	mov	r1, fp
 801b00e:	b1c3      	cbz	r3, 801b042 <_strtod_l+0x93a>
 801b010:	f7ff fb5e 	bl	801a6d0 <sulp>
 801b014:	4602      	mov	r2, r0
 801b016:	460b      	mov	r3, r1
 801b018:	ec51 0b18 	vmov	r0, r1, d8
 801b01c:	f7e5 f94e 	bl	80002bc <__adddf3>
 801b020:	4682      	mov	sl, r0
 801b022:	468b      	mov	fp, r1
 801b024:	e7df      	b.n	801afe6 <_strtod_l+0x8de>
 801b026:	4013      	ands	r3, r2
 801b028:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b02c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b030:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b034:	f04f 3aff 	mov.w	sl, #4294967295
 801b038:	e7d5      	b.n	801afe6 <_strtod_l+0x8de>
 801b03a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b03c:	ea13 0f0a 	tst.w	r3, sl
 801b040:	e7e0      	b.n	801b004 <_strtod_l+0x8fc>
 801b042:	f7ff fb45 	bl	801a6d0 <sulp>
 801b046:	4602      	mov	r2, r0
 801b048:	460b      	mov	r3, r1
 801b04a:	ec51 0b18 	vmov	r0, r1, d8
 801b04e:	f7e5 f933 	bl	80002b8 <__aeabi_dsub>
 801b052:	2200      	movs	r2, #0
 801b054:	2300      	movs	r3, #0
 801b056:	4682      	mov	sl, r0
 801b058:	468b      	mov	fp, r1
 801b05a:	f7e5 fd4d 	bl	8000af8 <__aeabi_dcmpeq>
 801b05e:	2800      	cmp	r0, #0
 801b060:	d0c1      	beq.n	801afe6 <_strtod_l+0x8de>
 801b062:	e611      	b.n	801ac88 <_strtod_l+0x580>
 801b064:	fffffc02 	.word	0xfffffc02
 801b068:	7ff00000 	.word	0x7ff00000
 801b06c:	39500000 	.word	0x39500000
 801b070:	000fffff 	.word	0x000fffff
 801b074:	7fefffff 	.word	0x7fefffff
 801b078:	080254b8 	.word	0x080254b8
 801b07c:	4631      	mov	r1, r6
 801b07e:	4628      	mov	r0, r5
 801b080:	f002 f824 	bl	801d0cc <__ratio>
 801b084:	ec59 8b10 	vmov	r8, r9, d0
 801b088:	ee10 0a10 	vmov	r0, s0
 801b08c:	2200      	movs	r2, #0
 801b08e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b092:	4649      	mov	r1, r9
 801b094:	f7e5 fd44 	bl	8000b20 <__aeabi_dcmple>
 801b098:	2800      	cmp	r0, #0
 801b09a:	d07a      	beq.n	801b192 <_strtod_l+0xa8a>
 801b09c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	d04a      	beq.n	801b138 <_strtod_l+0xa30>
 801b0a2:	4b95      	ldr	r3, [pc, #596]	; (801b2f8 <_strtod_l+0xbf0>)
 801b0a4:	2200      	movs	r2, #0
 801b0a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b0aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b2f8 <_strtod_l+0xbf0>
 801b0ae:	f04f 0800 	mov.w	r8, #0
 801b0b2:	4b92      	ldr	r3, [pc, #584]	; (801b2fc <_strtod_l+0xbf4>)
 801b0b4:	403b      	ands	r3, r7
 801b0b6:	930d      	str	r3, [sp, #52]	; 0x34
 801b0b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b0ba:	4b91      	ldr	r3, [pc, #580]	; (801b300 <_strtod_l+0xbf8>)
 801b0bc:	429a      	cmp	r2, r3
 801b0be:	f040 80b0 	bne.w	801b222 <_strtod_l+0xb1a>
 801b0c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b0c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b0ca:	ec4b ab10 	vmov	d0, sl, fp
 801b0ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b0d2:	f001 ff23 	bl	801cf1c <__ulp>
 801b0d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b0da:	ec53 2b10 	vmov	r2, r3, d0
 801b0de:	f7e5 faa3 	bl	8000628 <__aeabi_dmul>
 801b0e2:	4652      	mov	r2, sl
 801b0e4:	465b      	mov	r3, fp
 801b0e6:	f7e5 f8e9 	bl	80002bc <__adddf3>
 801b0ea:	460b      	mov	r3, r1
 801b0ec:	4983      	ldr	r1, [pc, #524]	; (801b2fc <_strtod_l+0xbf4>)
 801b0ee:	4a85      	ldr	r2, [pc, #532]	; (801b304 <_strtod_l+0xbfc>)
 801b0f0:	4019      	ands	r1, r3
 801b0f2:	4291      	cmp	r1, r2
 801b0f4:	4682      	mov	sl, r0
 801b0f6:	d960      	bls.n	801b1ba <_strtod_l+0xab2>
 801b0f8:	ee18 3a90 	vmov	r3, s17
 801b0fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b100:	4293      	cmp	r3, r2
 801b102:	d104      	bne.n	801b10e <_strtod_l+0xa06>
 801b104:	ee18 3a10 	vmov	r3, s16
 801b108:	3301      	adds	r3, #1
 801b10a:	f43f ad45 	beq.w	801ab98 <_strtod_l+0x490>
 801b10e:	f8df b200 	ldr.w	fp, [pc, #512]	; 801b310 <_strtod_l+0xc08>
 801b112:	f04f 3aff 	mov.w	sl, #4294967295
 801b116:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b118:	4620      	mov	r0, r4
 801b11a:	f001 fbcd 	bl	801c8b8 <_Bfree>
 801b11e:	9905      	ldr	r1, [sp, #20]
 801b120:	4620      	mov	r0, r4
 801b122:	f001 fbc9 	bl	801c8b8 <_Bfree>
 801b126:	4631      	mov	r1, r6
 801b128:	4620      	mov	r0, r4
 801b12a:	f001 fbc5 	bl	801c8b8 <_Bfree>
 801b12e:	4629      	mov	r1, r5
 801b130:	4620      	mov	r0, r4
 801b132:	f001 fbc1 	bl	801c8b8 <_Bfree>
 801b136:	e61a      	b.n	801ad6e <_strtod_l+0x666>
 801b138:	f1ba 0f00 	cmp.w	sl, #0
 801b13c:	d11b      	bne.n	801b176 <_strtod_l+0xa6e>
 801b13e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b142:	b9f3      	cbnz	r3, 801b182 <_strtod_l+0xa7a>
 801b144:	4b6c      	ldr	r3, [pc, #432]	; (801b2f8 <_strtod_l+0xbf0>)
 801b146:	2200      	movs	r2, #0
 801b148:	4640      	mov	r0, r8
 801b14a:	4649      	mov	r1, r9
 801b14c:	f7e5 fcde 	bl	8000b0c <__aeabi_dcmplt>
 801b150:	b9d0      	cbnz	r0, 801b188 <_strtod_l+0xa80>
 801b152:	4640      	mov	r0, r8
 801b154:	4649      	mov	r1, r9
 801b156:	4b6c      	ldr	r3, [pc, #432]	; (801b308 <_strtod_l+0xc00>)
 801b158:	2200      	movs	r2, #0
 801b15a:	f7e5 fa65 	bl	8000628 <__aeabi_dmul>
 801b15e:	4680      	mov	r8, r0
 801b160:	4689      	mov	r9, r1
 801b162:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b166:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801b16a:	9315      	str	r3, [sp, #84]	; 0x54
 801b16c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b170:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b174:	e79d      	b.n	801b0b2 <_strtod_l+0x9aa>
 801b176:	f1ba 0f01 	cmp.w	sl, #1
 801b17a:	d102      	bne.n	801b182 <_strtod_l+0xa7a>
 801b17c:	2f00      	cmp	r7, #0
 801b17e:	f43f ad83 	beq.w	801ac88 <_strtod_l+0x580>
 801b182:	4b62      	ldr	r3, [pc, #392]	; (801b30c <_strtod_l+0xc04>)
 801b184:	2200      	movs	r2, #0
 801b186:	e78e      	b.n	801b0a6 <_strtod_l+0x99e>
 801b188:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801b308 <_strtod_l+0xc00>
 801b18c:	f04f 0800 	mov.w	r8, #0
 801b190:	e7e7      	b.n	801b162 <_strtod_l+0xa5a>
 801b192:	4b5d      	ldr	r3, [pc, #372]	; (801b308 <_strtod_l+0xc00>)
 801b194:	4640      	mov	r0, r8
 801b196:	4649      	mov	r1, r9
 801b198:	2200      	movs	r2, #0
 801b19a:	f7e5 fa45 	bl	8000628 <__aeabi_dmul>
 801b19e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b1a0:	4680      	mov	r8, r0
 801b1a2:	4689      	mov	r9, r1
 801b1a4:	b933      	cbnz	r3, 801b1b4 <_strtod_l+0xaac>
 801b1a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b1aa:	900e      	str	r0, [sp, #56]	; 0x38
 801b1ac:	930f      	str	r3, [sp, #60]	; 0x3c
 801b1ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801b1b2:	e7dd      	b.n	801b170 <_strtod_l+0xa68>
 801b1b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801b1b8:	e7f9      	b.n	801b1ae <_strtod_l+0xaa6>
 801b1ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b1be:	9b04      	ldr	r3, [sp, #16]
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d1a8      	bne.n	801b116 <_strtod_l+0xa0e>
 801b1c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b1c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b1ca:	0d1b      	lsrs	r3, r3, #20
 801b1cc:	051b      	lsls	r3, r3, #20
 801b1ce:	429a      	cmp	r2, r3
 801b1d0:	d1a1      	bne.n	801b116 <_strtod_l+0xa0e>
 801b1d2:	4640      	mov	r0, r8
 801b1d4:	4649      	mov	r1, r9
 801b1d6:	f7e5 fdd7 	bl	8000d88 <__aeabi_d2lz>
 801b1da:	f7e5 f9f7 	bl	80005cc <__aeabi_l2d>
 801b1de:	4602      	mov	r2, r0
 801b1e0:	460b      	mov	r3, r1
 801b1e2:	4640      	mov	r0, r8
 801b1e4:	4649      	mov	r1, r9
 801b1e6:	f7e5 f867 	bl	80002b8 <__aeabi_dsub>
 801b1ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b1ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b1f0:	ea43 030a 	orr.w	r3, r3, sl
 801b1f4:	4313      	orrs	r3, r2
 801b1f6:	4680      	mov	r8, r0
 801b1f8:	4689      	mov	r9, r1
 801b1fa:	d055      	beq.n	801b2a8 <_strtod_l+0xba0>
 801b1fc:	a336      	add	r3, pc, #216	; (adr r3, 801b2d8 <_strtod_l+0xbd0>)
 801b1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b202:	f7e5 fc83 	bl	8000b0c <__aeabi_dcmplt>
 801b206:	2800      	cmp	r0, #0
 801b208:	f47f acd0 	bne.w	801abac <_strtod_l+0x4a4>
 801b20c:	a334      	add	r3, pc, #208	; (adr r3, 801b2e0 <_strtod_l+0xbd8>)
 801b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b212:	4640      	mov	r0, r8
 801b214:	4649      	mov	r1, r9
 801b216:	f7e5 fc97 	bl	8000b48 <__aeabi_dcmpgt>
 801b21a:	2800      	cmp	r0, #0
 801b21c:	f43f af7b 	beq.w	801b116 <_strtod_l+0xa0e>
 801b220:	e4c4      	b.n	801abac <_strtod_l+0x4a4>
 801b222:	9b04      	ldr	r3, [sp, #16]
 801b224:	b333      	cbz	r3, 801b274 <_strtod_l+0xb6c>
 801b226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b228:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b22c:	d822      	bhi.n	801b274 <_strtod_l+0xb6c>
 801b22e:	a32e      	add	r3, pc, #184	; (adr r3, 801b2e8 <_strtod_l+0xbe0>)
 801b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b234:	4640      	mov	r0, r8
 801b236:	4649      	mov	r1, r9
 801b238:	f7e5 fc72 	bl	8000b20 <__aeabi_dcmple>
 801b23c:	b1a0      	cbz	r0, 801b268 <_strtod_l+0xb60>
 801b23e:	4649      	mov	r1, r9
 801b240:	4640      	mov	r0, r8
 801b242:	f7e5 fcc9 	bl	8000bd8 <__aeabi_d2uiz>
 801b246:	2801      	cmp	r0, #1
 801b248:	bf38      	it	cc
 801b24a:	2001      	movcc	r0, #1
 801b24c:	f7e5 f972 	bl	8000534 <__aeabi_ui2d>
 801b250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b252:	4680      	mov	r8, r0
 801b254:	4689      	mov	r9, r1
 801b256:	bb23      	cbnz	r3, 801b2a2 <_strtod_l+0xb9a>
 801b258:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b25c:	9010      	str	r0, [sp, #64]	; 0x40
 801b25e:	9311      	str	r3, [sp, #68]	; 0x44
 801b260:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b264:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b26a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b26c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b270:	1a9b      	subs	r3, r3, r2
 801b272:	9309      	str	r3, [sp, #36]	; 0x24
 801b274:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b278:	eeb0 0a48 	vmov.f32	s0, s16
 801b27c:	eef0 0a68 	vmov.f32	s1, s17
 801b280:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b284:	f001 fe4a 	bl	801cf1c <__ulp>
 801b288:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b28c:	ec53 2b10 	vmov	r2, r3, d0
 801b290:	f7e5 f9ca 	bl	8000628 <__aeabi_dmul>
 801b294:	ec53 2b18 	vmov	r2, r3, d8
 801b298:	f7e5 f810 	bl	80002bc <__adddf3>
 801b29c:	4682      	mov	sl, r0
 801b29e:	468b      	mov	fp, r1
 801b2a0:	e78d      	b.n	801b1be <_strtod_l+0xab6>
 801b2a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801b2a6:	e7db      	b.n	801b260 <_strtod_l+0xb58>
 801b2a8:	a311      	add	r3, pc, #68	; (adr r3, 801b2f0 <_strtod_l+0xbe8>)
 801b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2ae:	f7e5 fc2d 	bl	8000b0c <__aeabi_dcmplt>
 801b2b2:	e7b2      	b.n	801b21a <_strtod_l+0xb12>
 801b2b4:	2300      	movs	r3, #0
 801b2b6:	930a      	str	r3, [sp, #40]	; 0x28
 801b2b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b2ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b2bc:	6013      	str	r3, [r2, #0]
 801b2be:	f7ff ba6b 	b.w	801a798 <_strtod_l+0x90>
 801b2c2:	2a65      	cmp	r2, #101	; 0x65
 801b2c4:	f43f ab5f 	beq.w	801a986 <_strtod_l+0x27e>
 801b2c8:	2a45      	cmp	r2, #69	; 0x45
 801b2ca:	f43f ab5c 	beq.w	801a986 <_strtod_l+0x27e>
 801b2ce:	2301      	movs	r3, #1
 801b2d0:	f7ff bb94 	b.w	801a9fc <_strtod_l+0x2f4>
 801b2d4:	f3af 8000 	nop.w
 801b2d8:	94a03595 	.word	0x94a03595
 801b2dc:	3fdfffff 	.word	0x3fdfffff
 801b2e0:	35afe535 	.word	0x35afe535
 801b2e4:	3fe00000 	.word	0x3fe00000
 801b2e8:	ffc00000 	.word	0xffc00000
 801b2ec:	41dfffff 	.word	0x41dfffff
 801b2f0:	94a03595 	.word	0x94a03595
 801b2f4:	3fcfffff 	.word	0x3fcfffff
 801b2f8:	3ff00000 	.word	0x3ff00000
 801b2fc:	7ff00000 	.word	0x7ff00000
 801b300:	7fe00000 	.word	0x7fe00000
 801b304:	7c9fffff 	.word	0x7c9fffff
 801b308:	3fe00000 	.word	0x3fe00000
 801b30c:	bff00000 	.word	0xbff00000
 801b310:	7fefffff 	.word	0x7fefffff

0801b314 <_strtod_r>:
 801b314:	4b01      	ldr	r3, [pc, #4]	; (801b31c <_strtod_r+0x8>)
 801b316:	f7ff b9f7 	b.w	801a708 <_strtod_l>
 801b31a:	bf00      	nop
 801b31c:	2000010c 	.word	0x2000010c

0801b320 <_strtol_l.constprop.0>:
 801b320:	2b01      	cmp	r3, #1
 801b322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b326:	d001      	beq.n	801b32c <_strtol_l.constprop.0+0xc>
 801b328:	2b24      	cmp	r3, #36	; 0x24
 801b32a:	d906      	bls.n	801b33a <_strtol_l.constprop.0+0x1a>
 801b32c:	f7fe faf0 	bl	8019910 <__errno>
 801b330:	2316      	movs	r3, #22
 801b332:	6003      	str	r3, [r0, #0]
 801b334:	2000      	movs	r0, #0
 801b336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b33a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801b420 <_strtol_l.constprop.0+0x100>
 801b33e:	460d      	mov	r5, r1
 801b340:	462e      	mov	r6, r5
 801b342:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b346:	f814 700c 	ldrb.w	r7, [r4, ip]
 801b34a:	f017 0708 	ands.w	r7, r7, #8
 801b34e:	d1f7      	bne.n	801b340 <_strtol_l.constprop.0+0x20>
 801b350:	2c2d      	cmp	r4, #45	; 0x2d
 801b352:	d132      	bne.n	801b3ba <_strtol_l.constprop.0+0x9a>
 801b354:	782c      	ldrb	r4, [r5, #0]
 801b356:	2701      	movs	r7, #1
 801b358:	1cb5      	adds	r5, r6, #2
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d05b      	beq.n	801b416 <_strtol_l.constprop.0+0xf6>
 801b35e:	2b10      	cmp	r3, #16
 801b360:	d109      	bne.n	801b376 <_strtol_l.constprop.0+0x56>
 801b362:	2c30      	cmp	r4, #48	; 0x30
 801b364:	d107      	bne.n	801b376 <_strtol_l.constprop.0+0x56>
 801b366:	782c      	ldrb	r4, [r5, #0]
 801b368:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b36c:	2c58      	cmp	r4, #88	; 0x58
 801b36e:	d14d      	bne.n	801b40c <_strtol_l.constprop.0+0xec>
 801b370:	786c      	ldrb	r4, [r5, #1]
 801b372:	2310      	movs	r3, #16
 801b374:	3502      	adds	r5, #2
 801b376:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b37a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b37e:	f04f 0c00 	mov.w	ip, #0
 801b382:	fbb8 f9f3 	udiv	r9, r8, r3
 801b386:	4666      	mov	r6, ip
 801b388:	fb03 8a19 	mls	sl, r3, r9, r8
 801b38c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801b390:	f1be 0f09 	cmp.w	lr, #9
 801b394:	d816      	bhi.n	801b3c4 <_strtol_l.constprop.0+0xa4>
 801b396:	4674      	mov	r4, lr
 801b398:	42a3      	cmp	r3, r4
 801b39a:	dd24      	ble.n	801b3e6 <_strtol_l.constprop.0+0xc6>
 801b39c:	f1bc 0f00 	cmp.w	ip, #0
 801b3a0:	db1e      	blt.n	801b3e0 <_strtol_l.constprop.0+0xc0>
 801b3a2:	45b1      	cmp	r9, r6
 801b3a4:	d31c      	bcc.n	801b3e0 <_strtol_l.constprop.0+0xc0>
 801b3a6:	d101      	bne.n	801b3ac <_strtol_l.constprop.0+0x8c>
 801b3a8:	45a2      	cmp	sl, r4
 801b3aa:	db19      	blt.n	801b3e0 <_strtol_l.constprop.0+0xc0>
 801b3ac:	fb06 4603 	mla	r6, r6, r3, r4
 801b3b0:	f04f 0c01 	mov.w	ip, #1
 801b3b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b3b8:	e7e8      	b.n	801b38c <_strtol_l.constprop.0+0x6c>
 801b3ba:	2c2b      	cmp	r4, #43	; 0x2b
 801b3bc:	bf04      	itt	eq
 801b3be:	782c      	ldrbeq	r4, [r5, #0]
 801b3c0:	1cb5      	addeq	r5, r6, #2
 801b3c2:	e7ca      	b.n	801b35a <_strtol_l.constprop.0+0x3a>
 801b3c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801b3c8:	f1be 0f19 	cmp.w	lr, #25
 801b3cc:	d801      	bhi.n	801b3d2 <_strtol_l.constprop.0+0xb2>
 801b3ce:	3c37      	subs	r4, #55	; 0x37
 801b3d0:	e7e2      	b.n	801b398 <_strtol_l.constprop.0+0x78>
 801b3d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801b3d6:	f1be 0f19 	cmp.w	lr, #25
 801b3da:	d804      	bhi.n	801b3e6 <_strtol_l.constprop.0+0xc6>
 801b3dc:	3c57      	subs	r4, #87	; 0x57
 801b3de:	e7db      	b.n	801b398 <_strtol_l.constprop.0+0x78>
 801b3e0:	f04f 3cff 	mov.w	ip, #4294967295
 801b3e4:	e7e6      	b.n	801b3b4 <_strtol_l.constprop.0+0x94>
 801b3e6:	f1bc 0f00 	cmp.w	ip, #0
 801b3ea:	da05      	bge.n	801b3f8 <_strtol_l.constprop.0+0xd8>
 801b3ec:	2322      	movs	r3, #34	; 0x22
 801b3ee:	6003      	str	r3, [r0, #0]
 801b3f0:	4646      	mov	r6, r8
 801b3f2:	b942      	cbnz	r2, 801b406 <_strtol_l.constprop.0+0xe6>
 801b3f4:	4630      	mov	r0, r6
 801b3f6:	e79e      	b.n	801b336 <_strtol_l.constprop.0+0x16>
 801b3f8:	b107      	cbz	r7, 801b3fc <_strtol_l.constprop.0+0xdc>
 801b3fa:	4276      	negs	r6, r6
 801b3fc:	2a00      	cmp	r2, #0
 801b3fe:	d0f9      	beq.n	801b3f4 <_strtol_l.constprop.0+0xd4>
 801b400:	f1bc 0f00 	cmp.w	ip, #0
 801b404:	d000      	beq.n	801b408 <_strtol_l.constprop.0+0xe8>
 801b406:	1e69      	subs	r1, r5, #1
 801b408:	6011      	str	r1, [r2, #0]
 801b40a:	e7f3      	b.n	801b3f4 <_strtol_l.constprop.0+0xd4>
 801b40c:	2430      	movs	r4, #48	; 0x30
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d1b1      	bne.n	801b376 <_strtol_l.constprop.0+0x56>
 801b412:	2308      	movs	r3, #8
 801b414:	e7af      	b.n	801b376 <_strtol_l.constprop.0+0x56>
 801b416:	2c30      	cmp	r4, #48	; 0x30
 801b418:	d0a5      	beq.n	801b366 <_strtol_l.constprop.0+0x46>
 801b41a:	230a      	movs	r3, #10
 801b41c:	e7ab      	b.n	801b376 <_strtol_l.constprop.0+0x56>
 801b41e:	bf00      	nop
 801b420:	080254e1 	.word	0x080254e1

0801b424 <_strtol_r>:
 801b424:	f7ff bf7c 	b.w	801b320 <_strtol_l.constprop.0>

0801b428 <quorem>:
 801b428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b42c:	6903      	ldr	r3, [r0, #16]
 801b42e:	690c      	ldr	r4, [r1, #16]
 801b430:	42a3      	cmp	r3, r4
 801b432:	4607      	mov	r7, r0
 801b434:	f2c0 8081 	blt.w	801b53a <quorem+0x112>
 801b438:	3c01      	subs	r4, #1
 801b43a:	f101 0814 	add.w	r8, r1, #20
 801b43e:	f100 0514 	add.w	r5, r0, #20
 801b442:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b446:	9301      	str	r3, [sp, #4]
 801b448:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b44c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b450:	3301      	adds	r3, #1
 801b452:	429a      	cmp	r2, r3
 801b454:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b458:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b45c:	fbb2 f6f3 	udiv	r6, r2, r3
 801b460:	d331      	bcc.n	801b4c6 <quorem+0x9e>
 801b462:	f04f 0e00 	mov.w	lr, #0
 801b466:	4640      	mov	r0, r8
 801b468:	46ac      	mov	ip, r5
 801b46a:	46f2      	mov	sl, lr
 801b46c:	f850 2b04 	ldr.w	r2, [r0], #4
 801b470:	b293      	uxth	r3, r2
 801b472:	fb06 e303 	mla	r3, r6, r3, lr
 801b476:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b47a:	b29b      	uxth	r3, r3
 801b47c:	ebaa 0303 	sub.w	r3, sl, r3
 801b480:	f8dc a000 	ldr.w	sl, [ip]
 801b484:	0c12      	lsrs	r2, r2, #16
 801b486:	fa13 f38a 	uxtah	r3, r3, sl
 801b48a:	fb06 e202 	mla	r2, r6, r2, lr
 801b48e:	9300      	str	r3, [sp, #0]
 801b490:	9b00      	ldr	r3, [sp, #0]
 801b492:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b496:	b292      	uxth	r2, r2
 801b498:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b49c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b4a0:	f8bd 3000 	ldrh.w	r3, [sp]
 801b4a4:	4581      	cmp	r9, r0
 801b4a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b4aa:	f84c 3b04 	str.w	r3, [ip], #4
 801b4ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b4b2:	d2db      	bcs.n	801b46c <quorem+0x44>
 801b4b4:	f855 300b 	ldr.w	r3, [r5, fp]
 801b4b8:	b92b      	cbnz	r3, 801b4c6 <quorem+0x9e>
 801b4ba:	9b01      	ldr	r3, [sp, #4]
 801b4bc:	3b04      	subs	r3, #4
 801b4be:	429d      	cmp	r5, r3
 801b4c0:	461a      	mov	r2, r3
 801b4c2:	d32e      	bcc.n	801b522 <quorem+0xfa>
 801b4c4:	613c      	str	r4, [r7, #16]
 801b4c6:	4638      	mov	r0, r7
 801b4c8:	f001 fc82 	bl	801cdd0 <__mcmp>
 801b4cc:	2800      	cmp	r0, #0
 801b4ce:	db24      	blt.n	801b51a <quorem+0xf2>
 801b4d0:	3601      	adds	r6, #1
 801b4d2:	4628      	mov	r0, r5
 801b4d4:	f04f 0c00 	mov.w	ip, #0
 801b4d8:	f858 2b04 	ldr.w	r2, [r8], #4
 801b4dc:	f8d0 e000 	ldr.w	lr, [r0]
 801b4e0:	b293      	uxth	r3, r2
 801b4e2:	ebac 0303 	sub.w	r3, ip, r3
 801b4e6:	0c12      	lsrs	r2, r2, #16
 801b4e8:	fa13 f38e 	uxtah	r3, r3, lr
 801b4ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b4f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b4f4:	b29b      	uxth	r3, r3
 801b4f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b4fa:	45c1      	cmp	r9, r8
 801b4fc:	f840 3b04 	str.w	r3, [r0], #4
 801b500:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b504:	d2e8      	bcs.n	801b4d8 <quorem+0xb0>
 801b506:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b50a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b50e:	b922      	cbnz	r2, 801b51a <quorem+0xf2>
 801b510:	3b04      	subs	r3, #4
 801b512:	429d      	cmp	r5, r3
 801b514:	461a      	mov	r2, r3
 801b516:	d30a      	bcc.n	801b52e <quorem+0x106>
 801b518:	613c      	str	r4, [r7, #16]
 801b51a:	4630      	mov	r0, r6
 801b51c:	b003      	add	sp, #12
 801b51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b522:	6812      	ldr	r2, [r2, #0]
 801b524:	3b04      	subs	r3, #4
 801b526:	2a00      	cmp	r2, #0
 801b528:	d1cc      	bne.n	801b4c4 <quorem+0x9c>
 801b52a:	3c01      	subs	r4, #1
 801b52c:	e7c7      	b.n	801b4be <quorem+0x96>
 801b52e:	6812      	ldr	r2, [r2, #0]
 801b530:	3b04      	subs	r3, #4
 801b532:	2a00      	cmp	r2, #0
 801b534:	d1f0      	bne.n	801b518 <quorem+0xf0>
 801b536:	3c01      	subs	r4, #1
 801b538:	e7eb      	b.n	801b512 <quorem+0xea>
 801b53a:	2000      	movs	r0, #0
 801b53c:	e7ee      	b.n	801b51c <quorem+0xf4>
	...

0801b540 <_dtoa_r>:
 801b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b544:	ed2d 8b04 	vpush	{d8-d9}
 801b548:	ec57 6b10 	vmov	r6, r7, d0
 801b54c:	b093      	sub	sp, #76	; 0x4c
 801b54e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b550:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b554:	9106      	str	r1, [sp, #24]
 801b556:	ee10 aa10 	vmov	sl, s0
 801b55a:	4604      	mov	r4, r0
 801b55c:	9209      	str	r2, [sp, #36]	; 0x24
 801b55e:	930c      	str	r3, [sp, #48]	; 0x30
 801b560:	46bb      	mov	fp, r7
 801b562:	b975      	cbnz	r5, 801b582 <_dtoa_r+0x42>
 801b564:	2010      	movs	r0, #16
 801b566:	f001 f94d 	bl	801c804 <malloc>
 801b56a:	4602      	mov	r2, r0
 801b56c:	6260      	str	r0, [r4, #36]	; 0x24
 801b56e:	b920      	cbnz	r0, 801b57a <_dtoa_r+0x3a>
 801b570:	4ba7      	ldr	r3, [pc, #668]	; (801b810 <_dtoa_r+0x2d0>)
 801b572:	21ea      	movs	r1, #234	; 0xea
 801b574:	48a7      	ldr	r0, [pc, #668]	; (801b814 <_dtoa_r+0x2d4>)
 801b576:	f002 f8ad 	bl	801d6d4 <__assert_func>
 801b57a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b57e:	6005      	str	r5, [r0, #0]
 801b580:	60c5      	str	r5, [r0, #12]
 801b582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b584:	6819      	ldr	r1, [r3, #0]
 801b586:	b151      	cbz	r1, 801b59e <_dtoa_r+0x5e>
 801b588:	685a      	ldr	r2, [r3, #4]
 801b58a:	604a      	str	r2, [r1, #4]
 801b58c:	2301      	movs	r3, #1
 801b58e:	4093      	lsls	r3, r2
 801b590:	608b      	str	r3, [r1, #8]
 801b592:	4620      	mov	r0, r4
 801b594:	f001 f990 	bl	801c8b8 <_Bfree>
 801b598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b59a:	2200      	movs	r2, #0
 801b59c:	601a      	str	r2, [r3, #0]
 801b59e:	1e3b      	subs	r3, r7, #0
 801b5a0:	bfaa      	itet	ge
 801b5a2:	2300      	movge	r3, #0
 801b5a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b5a8:	f8c8 3000 	strge.w	r3, [r8]
 801b5ac:	4b9a      	ldr	r3, [pc, #616]	; (801b818 <_dtoa_r+0x2d8>)
 801b5ae:	bfbc      	itt	lt
 801b5b0:	2201      	movlt	r2, #1
 801b5b2:	f8c8 2000 	strlt.w	r2, [r8]
 801b5b6:	ea33 030b 	bics.w	r3, r3, fp
 801b5ba:	d11b      	bne.n	801b5f4 <_dtoa_r+0xb4>
 801b5bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b5be:	f242 730f 	movw	r3, #9999	; 0x270f
 801b5c2:	6013      	str	r3, [r2, #0]
 801b5c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b5c8:	4333      	orrs	r3, r6
 801b5ca:	f000 8592 	beq.w	801c0f2 <_dtoa_r+0xbb2>
 801b5ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b5d0:	b963      	cbnz	r3, 801b5ec <_dtoa_r+0xac>
 801b5d2:	4b92      	ldr	r3, [pc, #584]	; (801b81c <_dtoa_r+0x2dc>)
 801b5d4:	e022      	b.n	801b61c <_dtoa_r+0xdc>
 801b5d6:	4b92      	ldr	r3, [pc, #584]	; (801b820 <_dtoa_r+0x2e0>)
 801b5d8:	9301      	str	r3, [sp, #4]
 801b5da:	3308      	adds	r3, #8
 801b5dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b5de:	6013      	str	r3, [r2, #0]
 801b5e0:	9801      	ldr	r0, [sp, #4]
 801b5e2:	b013      	add	sp, #76	; 0x4c
 801b5e4:	ecbd 8b04 	vpop	{d8-d9}
 801b5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ec:	4b8b      	ldr	r3, [pc, #556]	; (801b81c <_dtoa_r+0x2dc>)
 801b5ee:	9301      	str	r3, [sp, #4]
 801b5f0:	3303      	adds	r3, #3
 801b5f2:	e7f3      	b.n	801b5dc <_dtoa_r+0x9c>
 801b5f4:	2200      	movs	r2, #0
 801b5f6:	2300      	movs	r3, #0
 801b5f8:	4650      	mov	r0, sl
 801b5fa:	4659      	mov	r1, fp
 801b5fc:	f7e5 fa7c 	bl	8000af8 <__aeabi_dcmpeq>
 801b600:	ec4b ab19 	vmov	d9, sl, fp
 801b604:	4680      	mov	r8, r0
 801b606:	b158      	cbz	r0, 801b620 <_dtoa_r+0xe0>
 801b608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b60a:	2301      	movs	r3, #1
 801b60c:	6013      	str	r3, [r2, #0]
 801b60e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b610:	2b00      	cmp	r3, #0
 801b612:	f000 856b 	beq.w	801c0ec <_dtoa_r+0xbac>
 801b616:	4883      	ldr	r0, [pc, #524]	; (801b824 <_dtoa_r+0x2e4>)
 801b618:	6018      	str	r0, [r3, #0]
 801b61a:	1e43      	subs	r3, r0, #1
 801b61c:	9301      	str	r3, [sp, #4]
 801b61e:	e7df      	b.n	801b5e0 <_dtoa_r+0xa0>
 801b620:	ec4b ab10 	vmov	d0, sl, fp
 801b624:	aa10      	add	r2, sp, #64	; 0x40
 801b626:	a911      	add	r1, sp, #68	; 0x44
 801b628:	4620      	mov	r0, r4
 801b62a:	f001 fcf3 	bl	801d014 <__d2b>
 801b62e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801b632:	ee08 0a10 	vmov	s16, r0
 801b636:	2d00      	cmp	r5, #0
 801b638:	f000 8084 	beq.w	801b744 <_dtoa_r+0x204>
 801b63c:	ee19 3a90 	vmov	r3, s19
 801b640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b644:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b648:	4656      	mov	r6, sl
 801b64a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b64e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b652:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b656:	4b74      	ldr	r3, [pc, #464]	; (801b828 <_dtoa_r+0x2e8>)
 801b658:	2200      	movs	r2, #0
 801b65a:	4630      	mov	r0, r6
 801b65c:	4639      	mov	r1, r7
 801b65e:	f7e4 fe2b 	bl	80002b8 <__aeabi_dsub>
 801b662:	a365      	add	r3, pc, #404	; (adr r3, 801b7f8 <_dtoa_r+0x2b8>)
 801b664:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b668:	f7e4 ffde 	bl	8000628 <__aeabi_dmul>
 801b66c:	a364      	add	r3, pc, #400	; (adr r3, 801b800 <_dtoa_r+0x2c0>)
 801b66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b672:	f7e4 fe23 	bl	80002bc <__adddf3>
 801b676:	4606      	mov	r6, r0
 801b678:	4628      	mov	r0, r5
 801b67a:	460f      	mov	r7, r1
 801b67c:	f7e4 ff6a 	bl	8000554 <__aeabi_i2d>
 801b680:	a361      	add	r3, pc, #388	; (adr r3, 801b808 <_dtoa_r+0x2c8>)
 801b682:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b686:	f7e4 ffcf 	bl	8000628 <__aeabi_dmul>
 801b68a:	4602      	mov	r2, r0
 801b68c:	460b      	mov	r3, r1
 801b68e:	4630      	mov	r0, r6
 801b690:	4639      	mov	r1, r7
 801b692:	f7e4 fe13 	bl	80002bc <__adddf3>
 801b696:	4606      	mov	r6, r0
 801b698:	460f      	mov	r7, r1
 801b69a:	f7e5 fa75 	bl	8000b88 <__aeabi_d2iz>
 801b69e:	2200      	movs	r2, #0
 801b6a0:	9000      	str	r0, [sp, #0]
 801b6a2:	2300      	movs	r3, #0
 801b6a4:	4630      	mov	r0, r6
 801b6a6:	4639      	mov	r1, r7
 801b6a8:	f7e5 fa30 	bl	8000b0c <__aeabi_dcmplt>
 801b6ac:	b150      	cbz	r0, 801b6c4 <_dtoa_r+0x184>
 801b6ae:	9800      	ldr	r0, [sp, #0]
 801b6b0:	f7e4 ff50 	bl	8000554 <__aeabi_i2d>
 801b6b4:	4632      	mov	r2, r6
 801b6b6:	463b      	mov	r3, r7
 801b6b8:	f7e5 fa1e 	bl	8000af8 <__aeabi_dcmpeq>
 801b6bc:	b910      	cbnz	r0, 801b6c4 <_dtoa_r+0x184>
 801b6be:	9b00      	ldr	r3, [sp, #0]
 801b6c0:	3b01      	subs	r3, #1
 801b6c2:	9300      	str	r3, [sp, #0]
 801b6c4:	9b00      	ldr	r3, [sp, #0]
 801b6c6:	2b16      	cmp	r3, #22
 801b6c8:	d85a      	bhi.n	801b780 <_dtoa_r+0x240>
 801b6ca:	9a00      	ldr	r2, [sp, #0]
 801b6cc:	4b57      	ldr	r3, [pc, #348]	; (801b82c <_dtoa_r+0x2ec>)
 801b6ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6d6:	ec51 0b19 	vmov	r0, r1, d9
 801b6da:	f7e5 fa17 	bl	8000b0c <__aeabi_dcmplt>
 801b6de:	2800      	cmp	r0, #0
 801b6e0:	d050      	beq.n	801b784 <_dtoa_r+0x244>
 801b6e2:	9b00      	ldr	r3, [sp, #0]
 801b6e4:	3b01      	subs	r3, #1
 801b6e6:	9300      	str	r3, [sp, #0]
 801b6e8:	2300      	movs	r3, #0
 801b6ea:	930b      	str	r3, [sp, #44]	; 0x2c
 801b6ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b6ee:	1b5d      	subs	r5, r3, r5
 801b6f0:	1e6b      	subs	r3, r5, #1
 801b6f2:	9305      	str	r3, [sp, #20]
 801b6f4:	bf45      	ittet	mi
 801b6f6:	f1c5 0301 	rsbmi	r3, r5, #1
 801b6fa:	9304      	strmi	r3, [sp, #16]
 801b6fc:	2300      	movpl	r3, #0
 801b6fe:	2300      	movmi	r3, #0
 801b700:	bf4c      	ite	mi
 801b702:	9305      	strmi	r3, [sp, #20]
 801b704:	9304      	strpl	r3, [sp, #16]
 801b706:	9b00      	ldr	r3, [sp, #0]
 801b708:	2b00      	cmp	r3, #0
 801b70a:	db3d      	blt.n	801b788 <_dtoa_r+0x248>
 801b70c:	9b05      	ldr	r3, [sp, #20]
 801b70e:	9a00      	ldr	r2, [sp, #0]
 801b710:	920a      	str	r2, [sp, #40]	; 0x28
 801b712:	4413      	add	r3, r2
 801b714:	9305      	str	r3, [sp, #20]
 801b716:	2300      	movs	r3, #0
 801b718:	9307      	str	r3, [sp, #28]
 801b71a:	9b06      	ldr	r3, [sp, #24]
 801b71c:	2b09      	cmp	r3, #9
 801b71e:	f200 8089 	bhi.w	801b834 <_dtoa_r+0x2f4>
 801b722:	2b05      	cmp	r3, #5
 801b724:	bfc4      	itt	gt
 801b726:	3b04      	subgt	r3, #4
 801b728:	9306      	strgt	r3, [sp, #24]
 801b72a:	9b06      	ldr	r3, [sp, #24]
 801b72c:	f1a3 0302 	sub.w	r3, r3, #2
 801b730:	bfcc      	ite	gt
 801b732:	2500      	movgt	r5, #0
 801b734:	2501      	movle	r5, #1
 801b736:	2b03      	cmp	r3, #3
 801b738:	f200 8087 	bhi.w	801b84a <_dtoa_r+0x30a>
 801b73c:	e8df f003 	tbb	[pc, r3]
 801b740:	59383a2d 	.word	0x59383a2d
 801b744:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b748:	441d      	add	r5, r3
 801b74a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b74e:	2b20      	cmp	r3, #32
 801b750:	bfc1      	itttt	gt
 801b752:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b756:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b75a:	fa0b f303 	lslgt.w	r3, fp, r3
 801b75e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b762:	bfda      	itte	le
 801b764:	f1c3 0320 	rsble	r3, r3, #32
 801b768:	fa06 f003 	lslle.w	r0, r6, r3
 801b76c:	4318      	orrgt	r0, r3
 801b76e:	f7e4 fee1 	bl	8000534 <__aeabi_ui2d>
 801b772:	2301      	movs	r3, #1
 801b774:	4606      	mov	r6, r0
 801b776:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b77a:	3d01      	subs	r5, #1
 801b77c:	930e      	str	r3, [sp, #56]	; 0x38
 801b77e:	e76a      	b.n	801b656 <_dtoa_r+0x116>
 801b780:	2301      	movs	r3, #1
 801b782:	e7b2      	b.n	801b6ea <_dtoa_r+0x1aa>
 801b784:	900b      	str	r0, [sp, #44]	; 0x2c
 801b786:	e7b1      	b.n	801b6ec <_dtoa_r+0x1ac>
 801b788:	9b04      	ldr	r3, [sp, #16]
 801b78a:	9a00      	ldr	r2, [sp, #0]
 801b78c:	1a9b      	subs	r3, r3, r2
 801b78e:	9304      	str	r3, [sp, #16]
 801b790:	4253      	negs	r3, r2
 801b792:	9307      	str	r3, [sp, #28]
 801b794:	2300      	movs	r3, #0
 801b796:	930a      	str	r3, [sp, #40]	; 0x28
 801b798:	e7bf      	b.n	801b71a <_dtoa_r+0x1da>
 801b79a:	2300      	movs	r3, #0
 801b79c:	9308      	str	r3, [sp, #32]
 801b79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	dc55      	bgt.n	801b850 <_dtoa_r+0x310>
 801b7a4:	2301      	movs	r3, #1
 801b7a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b7aa:	461a      	mov	r2, r3
 801b7ac:	9209      	str	r2, [sp, #36]	; 0x24
 801b7ae:	e00c      	b.n	801b7ca <_dtoa_r+0x28a>
 801b7b0:	2301      	movs	r3, #1
 801b7b2:	e7f3      	b.n	801b79c <_dtoa_r+0x25c>
 801b7b4:	2300      	movs	r3, #0
 801b7b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b7b8:	9308      	str	r3, [sp, #32]
 801b7ba:	9b00      	ldr	r3, [sp, #0]
 801b7bc:	4413      	add	r3, r2
 801b7be:	9302      	str	r3, [sp, #8]
 801b7c0:	3301      	adds	r3, #1
 801b7c2:	2b01      	cmp	r3, #1
 801b7c4:	9303      	str	r3, [sp, #12]
 801b7c6:	bfb8      	it	lt
 801b7c8:	2301      	movlt	r3, #1
 801b7ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b7cc:	2200      	movs	r2, #0
 801b7ce:	6042      	str	r2, [r0, #4]
 801b7d0:	2204      	movs	r2, #4
 801b7d2:	f102 0614 	add.w	r6, r2, #20
 801b7d6:	429e      	cmp	r6, r3
 801b7d8:	6841      	ldr	r1, [r0, #4]
 801b7da:	d93d      	bls.n	801b858 <_dtoa_r+0x318>
 801b7dc:	4620      	mov	r0, r4
 801b7de:	f001 f82b 	bl	801c838 <_Balloc>
 801b7e2:	9001      	str	r0, [sp, #4]
 801b7e4:	2800      	cmp	r0, #0
 801b7e6:	d13b      	bne.n	801b860 <_dtoa_r+0x320>
 801b7e8:	4b11      	ldr	r3, [pc, #68]	; (801b830 <_dtoa_r+0x2f0>)
 801b7ea:	4602      	mov	r2, r0
 801b7ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b7f0:	e6c0      	b.n	801b574 <_dtoa_r+0x34>
 801b7f2:	2301      	movs	r3, #1
 801b7f4:	e7df      	b.n	801b7b6 <_dtoa_r+0x276>
 801b7f6:	bf00      	nop
 801b7f8:	636f4361 	.word	0x636f4361
 801b7fc:	3fd287a7 	.word	0x3fd287a7
 801b800:	8b60c8b3 	.word	0x8b60c8b3
 801b804:	3fc68a28 	.word	0x3fc68a28
 801b808:	509f79fb 	.word	0x509f79fb
 801b80c:	3fd34413 	.word	0x3fd34413
 801b810:	080255ee 	.word	0x080255ee
 801b814:	08025605 	.word	0x08025605
 801b818:	7ff00000 	.word	0x7ff00000
 801b81c:	080255ea 	.word	0x080255ea
 801b820:	080255e1 	.word	0x080255e1
 801b824:	08025465 	.word	0x08025465
 801b828:	3ff80000 	.word	0x3ff80000
 801b82c:	08025770 	.word	0x08025770
 801b830:	08025660 	.word	0x08025660
 801b834:	2501      	movs	r5, #1
 801b836:	2300      	movs	r3, #0
 801b838:	9306      	str	r3, [sp, #24]
 801b83a:	9508      	str	r5, [sp, #32]
 801b83c:	f04f 33ff 	mov.w	r3, #4294967295
 801b840:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b844:	2200      	movs	r2, #0
 801b846:	2312      	movs	r3, #18
 801b848:	e7b0      	b.n	801b7ac <_dtoa_r+0x26c>
 801b84a:	2301      	movs	r3, #1
 801b84c:	9308      	str	r3, [sp, #32]
 801b84e:	e7f5      	b.n	801b83c <_dtoa_r+0x2fc>
 801b850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b852:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b856:	e7b8      	b.n	801b7ca <_dtoa_r+0x28a>
 801b858:	3101      	adds	r1, #1
 801b85a:	6041      	str	r1, [r0, #4]
 801b85c:	0052      	lsls	r2, r2, #1
 801b85e:	e7b8      	b.n	801b7d2 <_dtoa_r+0x292>
 801b860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b862:	9a01      	ldr	r2, [sp, #4]
 801b864:	601a      	str	r2, [r3, #0]
 801b866:	9b03      	ldr	r3, [sp, #12]
 801b868:	2b0e      	cmp	r3, #14
 801b86a:	f200 809d 	bhi.w	801b9a8 <_dtoa_r+0x468>
 801b86e:	2d00      	cmp	r5, #0
 801b870:	f000 809a 	beq.w	801b9a8 <_dtoa_r+0x468>
 801b874:	9b00      	ldr	r3, [sp, #0]
 801b876:	2b00      	cmp	r3, #0
 801b878:	dd32      	ble.n	801b8e0 <_dtoa_r+0x3a0>
 801b87a:	4ab7      	ldr	r2, [pc, #732]	; (801bb58 <_dtoa_r+0x618>)
 801b87c:	f003 030f 	and.w	r3, r3, #15
 801b880:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b884:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b888:	9b00      	ldr	r3, [sp, #0]
 801b88a:	05d8      	lsls	r0, r3, #23
 801b88c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801b890:	d516      	bpl.n	801b8c0 <_dtoa_r+0x380>
 801b892:	4bb2      	ldr	r3, [pc, #712]	; (801bb5c <_dtoa_r+0x61c>)
 801b894:	ec51 0b19 	vmov	r0, r1, d9
 801b898:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b89c:	f7e4 ffee 	bl	800087c <__aeabi_ddiv>
 801b8a0:	f007 070f 	and.w	r7, r7, #15
 801b8a4:	4682      	mov	sl, r0
 801b8a6:	468b      	mov	fp, r1
 801b8a8:	2503      	movs	r5, #3
 801b8aa:	4eac      	ldr	r6, [pc, #688]	; (801bb5c <_dtoa_r+0x61c>)
 801b8ac:	b957      	cbnz	r7, 801b8c4 <_dtoa_r+0x384>
 801b8ae:	4642      	mov	r2, r8
 801b8b0:	464b      	mov	r3, r9
 801b8b2:	4650      	mov	r0, sl
 801b8b4:	4659      	mov	r1, fp
 801b8b6:	f7e4 ffe1 	bl	800087c <__aeabi_ddiv>
 801b8ba:	4682      	mov	sl, r0
 801b8bc:	468b      	mov	fp, r1
 801b8be:	e028      	b.n	801b912 <_dtoa_r+0x3d2>
 801b8c0:	2502      	movs	r5, #2
 801b8c2:	e7f2      	b.n	801b8aa <_dtoa_r+0x36a>
 801b8c4:	07f9      	lsls	r1, r7, #31
 801b8c6:	d508      	bpl.n	801b8da <_dtoa_r+0x39a>
 801b8c8:	4640      	mov	r0, r8
 801b8ca:	4649      	mov	r1, r9
 801b8cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b8d0:	f7e4 feaa 	bl	8000628 <__aeabi_dmul>
 801b8d4:	3501      	adds	r5, #1
 801b8d6:	4680      	mov	r8, r0
 801b8d8:	4689      	mov	r9, r1
 801b8da:	107f      	asrs	r7, r7, #1
 801b8dc:	3608      	adds	r6, #8
 801b8de:	e7e5      	b.n	801b8ac <_dtoa_r+0x36c>
 801b8e0:	f000 809b 	beq.w	801ba1a <_dtoa_r+0x4da>
 801b8e4:	9b00      	ldr	r3, [sp, #0]
 801b8e6:	4f9d      	ldr	r7, [pc, #628]	; (801bb5c <_dtoa_r+0x61c>)
 801b8e8:	425e      	negs	r6, r3
 801b8ea:	4b9b      	ldr	r3, [pc, #620]	; (801bb58 <_dtoa_r+0x618>)
 801b8ec:	f006 020f 	and.w	r2, r6, #15
 801b8f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8f8:	ec51 0b19 	vmov	r0, r1, d9
 801b8fc:	f7e4 fe94 	bl	8000628 <__aeabi_dmul>
 801b900:	1136      	asrs	r6, r6, #4
 801b902:	4682      	mov	sl, r0
 801b904:	468b      	mov	fp, r1
 801b906:	2300      	movs	r3, #0
 801b908:	2502      	movs	r5, #2
 801b90a:	2e00      	cmp	r6, #0
 801b90c:	d17a      	bne.n	801ba04 <_dtoa_r+0x4c4>
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d1d3      	bne.n	801b8ba <_dtoa_r+0x37a>
 801b912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b914:	2b00      	cmp	r3, #0
 801b916:	f000 8082 	beq.w	801ba1e <_dtoa_r+0x4de>
 801b91a:	4b91      	ldr	r3, [pc, #580]	; (801bb60 <_dtoa_r+0x620>)
 801b91c:	2200      	movs	r2, #0
 801b91e:	4650      	mov	r0, sl
 801b920:	4659      	mov	r1, fp
 801b922:	f7e5 f8f3 	bl	8000b0c <__aeabi_dcmplt>
 801b926:	2800      	cmp	r0, #0
 801b928:	d079      	beq.n	801ba1e <_dtoa_r+0x4de>
 801b92a:	9b03      	ldr	r3, [sp, #12]
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	d076      	beq.n	801ba1e <_dtoa_r+0x4de>
 801b930:	9b02      	ldr	r3, [sp, #8]
 801b932:	2b00      	cmp	r3, #0
 801b934:	dd36      	ble.n	801b9a4 <_dtoa_r+0x464>
 801b936:	9b00      	ldr	r3, [sp, #0]
 801b938:	4650      	mov	r0, sl
 801b93a:	4659      	mov	r1, fp
 801b93c:	1e5f      	subs	r7, r3, #1
 801b93e:	2200      	movs	r2, #0
 801b940:	4b88      	ldr	r3, [pc, #544]	; (801bb64 <_dtoa_r+0x624>)
 801b942:	f7e4 fe71 	bl	8000628 <__aeabi_dmul>
 801b946:	9e02      	ldr	r6, [sp, #8]
 801b948:	4682      	mov	sl, r0
 801b94a:	468b      	mov	fp, r1
 801b94c:	3501      	adds	r5, #1
 801b94e:	4628      	mov	r0, r5
 801b950:	f7e4 fe00 	bl	8000554 <__aeabi_i2d>
 801b954:	4652      	mov	r2, sl
 801b956:	465b      	mov	r3, fp
 801b958:	f7e4 fe66 	bl	8000628 <__aeabi_dmul>
 801b95c:	4b82      	ldr	r3, [pc, #520]	; (801bb68 <_dtoa_r+0x628>)
 801b95e:	2200      	movs	r2, #0
 801b960:	f7e4 fcac 	bl	80002bc <__adddf3>
 801b964:	46d0      	mov	r8, sl
 801b966:	46d9      	mov	r9, fp
 801b968:	4682      	mov	sl, r0
 801b96a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801b96e:	2e00      	cmp	r6, #0
 801b970:	d158      	bne.n	801ba24 <_dtoa_r+0x4e4>
 801b972:	4b7e      	ldr	r3, [pc, #504]	; (801bb6c <_dtoa_r+0x62c>)
 801b974:	2200      	movs	r2, #0
 801b976:	4640      	mov	r0, r8
 801b978:	4649      	mov	r1, r9
 801b97a:	f7e4 fc9d 	bl	80002b8 <__aeabi_dsub>
 801b97e:	4652      	mov	r2, sl
 801b980:	465b      	mov	r3, fp
 801b982:	4680      	mov	r8, r0
 801b984:	4689      	mov	r9, r1
 801b986:	f7e5 f8df 	bl	8000b48 <__aeabi_dcmpgt>
 801b98a:	2800      	cmp	r0, #0
 801b98c:	f040 8295 	bne.w	801beba <_dtoa_r+0x97a>
 801b990:	4652      	mov	r2, sl
 801b992:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b996:	4640      	mov	r0, r8
 801b998:	4649      	mov	r1, r9
 801b99a:	f7e5 f8b7 	bl	8000b0c <__aeabi_dcmplt>
 801b99e:	2800      	cmp	r0, #0
 801b9a0:	f040 8289 	bne.w	801beb6 <_dtoa_r+0x976>
 801b9a4:	ec5b ab19 	vmov	sl, fp, d9
 801b9a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	f2c0 8148 	blt.w	801bc40 <_dtoa_r+0x700>
 801b9b0:	9a00      	ldr	r2, [sp, #0]
 801b9b2:	2a0e      	cmp	r2, #14
 801b9b4:	f300 8144 	bgt.w	801bc40 <_dtoa_r+0x700>
 801b9b8:	4b67      	ldr	r3, [pc, #412]	; (801bb58 <_dtoa_r+0x618>)
 801b9ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b9be:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b9c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	f280 80d5 	bge.w	801bb74 <_dtoa_r+0x634>
 801b9ca:	9b03      	ldr	r3, [sp, #12]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	f300 80d1 	bgt.w	801bb74 <_dtoa_r+0x634>
 801b9d2:	f040 826f 	bne.w	801beb4 <_dtoa_r+0x974>
 801b9d6:	4b65      	ldr	r3, [pc, #404]	; (801bb6c <_dtoa_r+0x62c>)
 801b9d8:	2200      	movs	r2, #0
 801b9da:	4640      	mov	r0, r8
 801b9dc:	4649      	mov	r1, r9
 801b9de:	f7e4 fe23 	bl	8000628 <__aeabi_dmul>
 801b9e2:	4652      	mov	r2, sl
 801b9e4:	465b      	mov	r3, fp
 801b9e6:	f7e5 f8a5 	bl	8000b34 <__aeabi_dcmpge>
 801b9ea:	9e03      	ldr	r6, [sp, #12]
 801b9ec:	4637      	mov	r7, r6
 801b9ee:	2800      	cmp	r0, #0
 801b9f0:	f040 8245 	bne.w	801be7e <_dtoa_r+0x93e>
 801b9f4:	9d01      	ldr	r5, [sp, #4]
 801b9f6:	2331      	movs	r3, #49	; 0x31
 801b9f8:	f805 3b01 	strb.w	r3, [r5], #1
 801b9fc:	9b00      	ldr	r3, [sp, #0]
 801b9fe:	3301      	adds	r3, #1
 801ba00:	9300      	str	r3, [sp, #0]
 801ba02:	e240      	b.n	801be86 <_dtoa_r+0x946>
 801ba04:	07f2      	lsls	r2, r6, #31
 801ba06:	d505      	bpl.n	801ba14 <_dtoa_r+0x4d4>
 801ba08:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ba0c:	f7e4 fe0c 	bl	8000628 <__aeabi_dmul>
 801ba10:	3501      	adds	r5, #1
 801ba12:	2301      	movs	r3, #1
 801ba14:	1076      	asrs	r6, r6, #1
 801ba16:	3708      	adds	r7, #8
 801ba18:	e777      	b.n	801b90a <_dtoa_r+0x3ca>
 801ba1a:	2502      	movs	r5, #2
 801ba1c:	e779      	b.n	801b912 <_dtoa_r+0x3d2>
 801ba1e:	9f00      	ldr	r7, [sp, #0]
 801ba20:	9e03      	ldr	r6, [sp, #12]
 801ba22:	e794      	b.n	801b94e <_dtoa_r+0x40e>
 801ba24:	9901      	ldr	r1, [sp, #4]
 801ba26:	4b4c      	ldr	r3, [pc, #304]	; (801bb58 <_dtoa_r+0x618>)
 801ba28:	4431      	add	r1, r6
 801ba2a:	910d      	str	r1, [sp, #52]	; 0x34
 801ba2c:	9908      	ldr	r1, [sp, #32]
 801ba2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801ba32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ba36:	2900      	cmp	r1, #0
 801ba38:	d043      	beq.n	801bac2 <_dtoa_r+0x582>
 801ba3a:	494d      	ldr	r1, [pc, #308]	; (801bb70 <_dtoa_r+0x630>)
 801ba3c:	2000      	movs	r0, #0
 801ba3e:	f7e4 ff1d 	bl	800087c <__aeabi_ddiv>
 801ba42:	4652      	mov	r2, sl
 801ba44:	465b      	mov	r3, fp
 801ba46:	f7e4 fc37 	bl	80002b8 <__aeabi_dsub>
 801ba4a:	9d01      	ldr	r5, [sp, #4]
 801ba4c:	4682      	mov	sl, r0
 801ba4e:	468b      	mov	fp, r1
 801ba50:	4649      	mov	r1, r9
 801ba52:	4640      	mov	r0, r8
 801ba54:	f7e5 f898 	bl	8000b88 <__aeabi_d2iz>
 801ba58:	4606      	mov	r6, r0
 801ba5a:	f7e4 fd7b 	bl	8000554 <__aeabi_i2d>
 801ba5e:	4602      	mov	r2, r0
 801ba60:	460b      	mov	r3, r1
 801ba62:	4640      	mov	r0, r8
 801ba64:	4649      	mov	r1, r9
 801ba66:	f7e4 fc27 	bl	80002b8 <__aeabi_dsub>
 801ba6a:	3630      	adds	r6, #48	; 0x30
 801ba6c:	f805 6b01 	strb.w	r6, [r5], #1
 801ba70:	4652      	mov	r2, sl
 801ba72:	465b      	mov	r3, fp
 801ba74:	4680      	mov	r8, r0
 801ba76:	4689      	mov	r9, r1
 801ba78:	f7e5 f848 	bl	8000b0c <__aeabi_dcmplt>
 801ba7c:	2800      	cmp	r0, #0
 801ba7e:	d163      	bne.n	801bb48 <_dtoa_r+0x608>
 801ba80:	4642      	mov	r2, r8
 801ba82:	464b      	mov	r3, r9
 801ba84:	4936      	ldr	r1, [pc, #216]	; (801bb60 <_dtoa_r+0x620>)
 801ba86:	2000      	movs	r0, #0
 801ba88:	f7e4 fc16 	bl	80002b8 <__aeabi_dsub>
 801ba8c:	4652      	mov	r2, sl
 801ba8e:	465b      	mov	r3, fp
 801ba90:	f7e5 f83c 	bl	8000b0c <__aeabi_dcmplt>
 801ba94:	2800      	cmp	r0, #0
 801ba96:	f040 80b5 	bne.w	801bc04 <_dtoa_r+0x6c4>
 801ba9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba9c:	429d      	cmp	r5, r3
 801ba9e:	d081      	beq.n	801b9a4 <_dtoa_r+0x464>
 801baa0:	4b30      	ldr	r3, [pc, #192]	; (801bb64 <_dtoa_r+0x624>)
 801baa2:	2200      	movs	r2, #0
 801baa4:	4650      	mov	r0, sl
 801baa6:	4659      	mov	r1, fp
 801baa8:	f7e4 fdbe 	bl	8000628 <__aeabi_dmul>
 801baac:	4b2d      	ldr	r3, [pc, #180]	; (801bb64 <_dtoa_r+0x624>)
 801baae:	4682      	mov	sl, r0
 801bab0:	468b      	mov	fp, r1
 801bab2:	4640      	mov	r0, r8
 801bab4:	4649      	mov	r1, r9
 801bab6:	2200      	movs	r2, #0
 801bab8:	f7e4 fdb6 	bl	8000628 <__aeabi_dmul>
 801babc:	4680      	mov	r8, r0
 801babe:	4689      	mov	r9, r1
 801bac0:	e7c6      	b.n	801ba50 <_dtoa_r+0x510>
 801bac2:	4650      	mov	r0, sl
 801bac4:	4659      	mov	r1, fp
 801bac6:	f7e4 fdaf 	bl	8000628 <__aeabi_dmul>
 801baca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bacc:	9d01      	ldr	r5, [sp, #4]
 801bace:	930f      	str	r3, [sp, #60]	; 0x3c
 801bad0:	4682      	mov	sl, r0
 801bad2:	468b      	mov	fp, r1
 801bad4:	4649      	mov	r1, r9
 801bad6:	4640      	mov	r0, r8
 801bad8:	f7e5 f856 	bl	8000b88 <__aeabi_d2iz>
 801badc:	4606      	mov	r6, r0
 801bade:	f7e4 fd39 	bl	8000554 <__aeabi_i2d>
 801bae2:	3630      	adds	r6, #48	; 0x30
 801bae4:	4602      	mov	r2, r0
 801bae6:	460b      	mov	r3, r1
 801bae8:	4640      	mov	r0, r8
 801baea:	4649      	mov	r1, r9
 801baec:	f7e4 fbe4 	bl	80002b8 <__aeabi_dsub>
 801baf0:	f805 6b01 	strb.w	r6, [r5], #1
 801baf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801baf6:	429d      	cmp	r5, r3
 801baf8:	4680      	mov	r8, r0
 801bafa:	4689      	mov	r9, r1
 801bafc:	f04f 0200 	mov.w	r2, #0
 801bb00:	d124      	bne.n	801bb4c <_dtoa_r+0x60c>
 801bb02:	4b1b      	ldr	r3, [pc, #108]	; (801bb70 <_dtoa_r+0x630>)
 801bb04:	4650      	mov	r0, sl
 801bb06:	4659      	mov	r1, fp
 801bb08:	f7e4 fbd8 	bl	80002bc <__adddf3>
 801bb0c:	4602      	mov	r2, r0
 801bb0e:	460b      	mov	r3, r1
 801bb10:	4640      	mov	r0, r8
 801bb12:	4649      	mov	r1, r9
 801bb14:	f7e5 f818 	bl	8000b48 <__aeabi_dcmpgt>
 801bb18:	2800      	cmp	r0, #0
 801bb1a:	d173      	bne.n	801bc04 <_dtoa_r+0x6c4>
 801bb1c:	4652      	mov	r2, sl
 801bb1e:	465b      	mov	r3, fp
 801bb20:	4913      	ldr	r1, [pc, #76]	; (801bb70 <_dtoa_r+0x630>)
 801bb22:	2000      	movs	r0, #0
 801bb24:	f7e4 fbc8 	bl	80002b8 <__aeabi_dsub>
 801bb28:	4602      	mov	r2, r0
 801bb2a:	460b      	mov	r3, r1
 801bb2c:	4640      	mov	r0, r8
 801bb2e:	4649      	mov	r1, r9
 801bb30:	f7e4 ffec 	bl	8000b0c <__aeabi_dcmplt>
 801bb34:	2800      	cmp	r0, #0
 801bb36:	f43f af35 	beq.w	801b9a4 <_dtoa_r+0x464>
 801bb3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bb3c:	1e6b      	subs	r3, r5, #1
 801bb3e:	930f      	str	r3, [sp, #60]	; 0x3c
 801bb40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bb44:	2b30      	cmp	r3, #48	; 0x30
 801bb46:	d0f8      	beq.n	801bb3a <_dtoa_r+0x5fa>
 801bb48:	9700      	str	r7, [sp, #0]
 801bb4a:	e049      	b.n	801bbe0 <_dtoa_r+0x6a0>
 801bb4c:	4b05      	ldr	r3, [pc, #20]	; (801bb64 <_dtoa_r+0x624>)
 801bb4e:	f7e4 fd6b 	bl	8000628 <__aeabi_dmul>
 801bb52:	4680      	mov	r8, r0
 801bb54:	4689      	mov	r9, r1
 801bb56:	e7bd      	b.n	801bad4 <_dtoa_r+0x594>
 801bb58:	08025770 	.word	0x08025770
 801bb5c:	08025748 	.word	0x08025748
 801bb60:	3ff00000 	.word	0x3ff00000
 801bb64:	40240000 	.word	0x40240000
 801bb68:	401c0000 	.word	0x401c0000
 801bb6c:	40140000 	.word	0x40140000
 801bb70:	3fe00000 	.word	0x3fe00000
 801bb74:	9d01      	ldr	r5, [sp, #4]
 801bb76:	4656      	mov	r6, sl
 801bb78:	465f      	mov	r7, fp
 801bb7a:	4642      	mov	r2, r8
 801bb7c:	464b      	mov	r3, r9
 801bb7e:	4630      	mov	r0, r6
 801bb80:	4639      	mov	r1, r7
 801bb82:	f7e4 fe7b 	bl	800087c <__aeabi_ddiv>
 801bb86:	f7e4 ffff 	bl	8000b88 <__aeabi_d2iz>
 801bb8a:	4682      	mov	sl, r0
 801bb8c:	f7e4 fce2 	bl	8000554 <__aeabi_i2d>
 801bb90:	4642      	mov	r2, r8
 801bb92:	464b      	mov	r3, r9
 801bb94:	f7e4 fd48 	bl	8000628 <__aeabi_dmul>
 801bb98:	4602      	mov	r2, r0
 801bb9a:	460b      	mov	r3, r1
 801bb9c:	4630      	mov	r0, r6
 801bb9e:	4639      	mov	r1, r7
 801bba0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801bba4:	f7e4 fb88 	bl	80002b8 <__aeabi_dsub>
 801bba8:	f805 6b01 	strb.w	r6, [r5], #1
 801bbac:	9e01      	ldr	r6, [sp, #4]
 801bbae:	9f03      	ldr	r7, [sp, #12]
 801bbb0:	1bae      	subs	r6, r5, r6
 801bbb2:	42b7      	cmp	r7, r6
 801bbb4:	4602      	mov	r2, r0
 801bbb6:	460b      	mov	r3, r1
 801bbb8:	d135      	bne.n	801bc26 <_dtoa_r+0x6e6>
 801bbba:	f7e4 fb7f 	bl	80002bc <__adddf3>
 801bbbe:	4642      	mov	r2, r8
 801bbc0:	464b      	mov	r3, r9
 801bbc2:	4606      	mov	r6, r0
 801bbc4:	460f      	mov	r7, r1
 801bbc6:	f7e4 ffbf 	bl	8000b48 <__aeabi_dcmpgt>
 801bbca:	b9d0      	cbnz	r0, 801bc02 <_dtoa_r+0x6c2>
 801bbcc:	4642      	mov	r2, r8
 801bbce:	464b      	mov	r3, r9
 801bbd0:	4630      	mov	r0, r6
 801bbd2:	4639      	mov	r1, r7
 801bbd4:	f7e4 ff90 	bl	8000af8 <__aeabi_dcmpeq>
 801bbd8:	b110      	cbz	r0, 801bbe0 <_dtoa_r+0x6a0>
 801bbda:	f01a 0f01 	tst.w	sl, #1
 801bbde:	d110      	bne.n	801bc02 <_dtoa_r+0x6c2>
 801bbe0:	4620      	mov	r0, r4
 801bbe2:	ee18 1a10 	vmov	r1, s16
 801bbe6:	f000 fe67 	bl	801c8b8 <_Bfree>
 801bbea:	2300      	movs	r3, #0
 801bbec:	9800      	ldr	r0, [sp, #0]
 801bbee:	702b      	strb	r3, [r5, #0]
 801bbf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bbf2:	3001      	adds	r0, #1
 801bbf4:	6018      	str	r0, [r3, #0]
 801bbf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	f43f acf1 	beq.w	801b5e0 <_dtoa_r+0xa0>
 801bbfe:	601d      	str	r5, [r3, #0]
 801bc00:	e4ee      	b.n	801b5e0 <_dtoa_r+0xa0>
 801bc02:	9f00      	ldr	r7, [sp, #0]
 801bc04:	462b      	mov	r3, r5
 801bc06:	461d      	mov	r5, r3
 801bc08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bc0c:	2a39      	cmp	r2, #57	; 0x39
 801bc0e:	d106      	bne.n	801bc1e <_dtoa_r+0x6de>
 801bc10:	9a01      	ldr	r2, [sp, #4]
 801bc12:	429a      	cmp	r2, r3
 801bc14:	d1f7      	bne.n	801bc06 <_dtoa_r+0x6c6>
 801bc16:	9901      	ldr	r1, [sp, #4]
 801bc18:	2230      	movs	r2, #48	; 0x30
 801bc1a:	3701      	adds	r7, #1
 801bc1c:	700a      	strb	r2, [r1, #0]
 801bc1e:	781a      	ldrb	r2, [r3, #0]
 801bc20:	3201      	adds	r2, #1
 801bc22:	701a      	strb	r2, [r3, #0]
 801bc24:	e790      	b.n	801bb48 <_dtoa_r+0x608>
 801bc26:	4ba6      	ldr	r3, [pc, #664]	; (801bec0 <_dtoa_r+0x980>)
 801bc28:	2200      	movs	r2, #0
 801bc2a:	f7e4 fcfd 	bl	8000628 <__aeabi_dmul>
 801bc2e:	2200      	movs	r2, #0
 801bc30:	2300      	movs	r3, #0
 801bc32:	4606      	mov	r6, r0
 801bc34:	460f      	mov	r7, r1
 801bc36:	f7e4 ff5f 	bl	8000af8 <__aeabi_dcmpeq>
 801bc3a:	2800      	cmp	r0, #0
 801bc3c:	d09d      	beq.n	801bb7a <_dtoa_r+0x63a>
 801bc3e:	e7cf      	b.n	801bbe0 <_dtoa_r+0x6a0>
 801bc40:	9a08      	ldr	r2, [sp, #32]
 801bc42:	2a00      	cmp	r2, #0
 801bc44:	f000 80d7 	beq.w	801bdf6 <_dtoa_r+0x8b6>
 801bc48:	9a06      	ldr	r2, [sp, #24]
 801bc4a:	2a01      	cmp	r2, #1
 801bc4c:	f300 80ba 	bgt.w	801bdc4 <_dtoa_r+0x884>
 801bc50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bc52:	2a00      	cmp	r2, #0
 801bc54:	f000 80b2 	beq.w	801bdbc <_dtoa_r+0x87c>
 801bc58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bc5c:	9e07      	ldr	r6, [sp, #28]
 801bc5e:	9d04      	ldr	r5, [sp, #16]
 801bc60:	9a04      	ldr	r2, [sp, #16]
 801bc62:	441a      	add	r2, r3
 801bc64:	9204      	str	r2, [sp, #16]
 801bc66:	9a05      	ldr	r2, [sp, #20]
 801bc68:	2101      	movs	r1, #1
 801bc6a:	441a      	add	r2, r3
 801bc6c:	4620      	mov	r0, r4
 801bc6e:	9205      	str	r2, [sp, #20]
 801bc70:	f000 ff24 	bl	801cabc <__i2b>
 801bc74:	4607      	mov	r7, r0
 801bc76:	2d00      	cmp	r5, #0
 801bc78:	dd0c      	ble.n	801bc94 <_dtoa_r+0x754>
 801bc7a:	9b05      	ldr	r3, [sp, #20]
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	dd09      	ble.n	801bc94 <_dtoa_r+0x754>
 801bc80:	42ab      	cmp	r3, r5
 801bc82:	9a04      	ldr	r2, [sp, #16]
 801bc84:	bfa8      	it	ge
 801bc86:	462b      	movge	r3, r5
 801bc88:	1ad2      	subs	r2, r2, r3
 801bc8a:	9204      	str	r2, [sp, #16]
 801bc8c:	9a05      	ldr	r2, [sp, #20]
 801bc8e:	1aed      	subs	r5, r5, r3
 801bc90:	1ad3      	subs	r3, r2, r3
 801bc92:	9305      	str	r3, [sp, #20]
 801bc94:	9b07      	ldr	r3, [sp, #28]
 801bc96:	b31b      	cbz	r3, 801bce0 <_dtoa_r+0x7a0>
 801bc98:	9b08      	ldr	r3, [sp, #32]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	f000 80af 	beq.w	801bdfe <_dtoa_r+0x8be>
 801bca0:	2e00      	cmp	r6, #0
 801bca2:	dd13      	ble.n	801bccc <_dtoa_r+0x78c>
 801bca4:	4639      	mov	r1, r7
 801bca6:	4632      	mov	r2, r6
 801bca8:	4620      	mov	r0, r4
 801bcaa:	f000 ffc7 	bl	801cc3c <__pow5mult>
 801bcae:	ee18 2a10 	vmov	r2, s16
 801bcb2:	4601      	mov	r1, r0
 801bcb4:	4607      	mov	r7, r0
 801bcb6:	4620      	mov	r0, r4
 801bcb8:	f000 ff16 	bl	801cae8 <__multiply>
 801bcbc:	ee18 1a10 	vmov	r1, s16
 801bcc0:	4680      	mov	r8, r0
 801bcc2:	4620      	mov	r0, r4
 801bcc4:	f000 fdf8 	bl	801c8b8 <_Bfree>
 801bcc8:	ee08 8a10 	vmov	s16, r8
 801bccc:	9b07      	ldr	r3, [sp, #28]
 801bcce:	1b9a      	subs	r2, r3, r6
 801bcd0:	d006      	beq.n	801bce0 <_dtoa_r+0x7a0>
 801bcd2:	ee18 1a10 	vmov	r1, s16
 801bcd6:	4620      	mov	r0, r4
 801bcd8:	f000 ffb0 	bl	801cc3c <__pow5mult>
 801bcdc:	ee08 0a10 	vmov	s16, r0
 801bce0:	2101      	movs	r1, #1
 801bce2:	4620      	mov	r0, r4
 801bce4:	f000 feea 	bl	801cabc <__i2b>
 801bce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	4606      	mov	r6, r0
 801bcee:	f340 8088 	ble.w	801be02 <_dtoa_r+0x8c2>
 801bcf2:	461a      	mov	r2, r3
 801bcf4:	4601      	mov	r1, r0
 801bcf6:	4620      	mov	r0, r4
 801bcf8:	f000 ffa0 	bl	801cc3c <__pow5mult>
 801bcfc:	9b06      	ldr	r3, [sp, #24]
 801bcfe:	2b01      	cmp	r3, #1
 801bd00:	4606      	mov	r6, r0
 801bd02:	f340 8081 	ble.w	801be08 <_dtoa_r+0x8c8>
 801bd06:	f04f 0800 	mov.w	r8, #0
 801bd0a:	6933      	ldr	r3, [r6, #16]
 801bd0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801bd10:	6918      	ldr	r0, [r3, #16]
 801bd12:	f000 fe83 	bl	801ca1c <__hi0bits>
 801bd16:	f1c0 0020 	rsb	r0, r0, #32
 801bd1a:	9b05      	ldr	r3, [sp, #20]
 801bd1c:	4418      	add	r0, r3
 801bd1e:	f010 001f 	ands.w	r0, r0, #31
 801bd22:	f000 8092 	beq.w	801be4a <_dtoa_r+0x90a>
 801bd26:	f1c0 0320 	rsb	r3, r0, #32
 801bd2a:	2b04      	cmp	r3, #4
 801bd2c:	f340 808a 	ble.w	801be44 <_dtoa_r+0x904>
 801bd30:	f1c0 001c 	rsb	r0, r0, #28
 801bd34:	9b04      	ldr	r3, [sp, #16]
 801bd36:	4403      	add	r3, r0
 801bd38:	9304      	str	r3, [sp, #16]
 801bd3a:	9b05      	ldr	r3, [sp, #20]
 801bd3c:	4403      	add	r3, r0
 801bd3e:	4405      	add	r5, r0
 801bd40:	9305      	str	r3, [sp, #20]
 801bd42:	9b04      	ldr	r3, [sp, #16]
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	dd07      	ble.n	801bd58 <_dtoa_r+0x818>
 801bd48:	ee18 1a10 	vmov	r1, s16
 801bd4c:	461a      	mov	r2, r3
 801bd4e:	4620      	mov	r0, r4
 801bd50:	f000 ffce 	bl	801ccf0 <__lshift>
 801bd54:	ee08 0a10 	vmov	s16, r0
 801bd58:	9b05      	ldr	r3, [sp, #20]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	dd05      	ble.n	801bd6a <_dtoa_r+0x82a>
 801bd5e:	4631      	mov	r1, r6
 801bd60:	461a      	mov	r2, r3
 801bd62:	4620      	mov	r0, r4
 801bd64:	f000 ffc4 	bl	801ccf0 <__lshift>
 801bd68:	4606      	mov	r6, r0
 801bd6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d06e      	beq.n	801be4e <_dtoa_r+0x90e>
 801bd70:	ee18 0a10 	vmov	r0, s16
 801bd74:	4631      	mov	r1, r6
 801bd76:	f001 f82b 	bl	801cdd0 <__mcmp>
 801bd7a:	2800      	cmp	r0, #0
 801bd7c:	da67      	bge.n	801be4e <_dtoa_r+0x90e>
 801bd7e:	9b00      	ldr	r3, [sp, #0]
 801bd80:	3b01      	subs	r3, #1
 801bd82:	ee18 1a10 	vmov	r1, s16
 801bd86:	9300      	str	r3, [sp, #0]
 801bd88:	220a      	movs	r2, #10
 801bd8a:	2300      	movs	r3, #0
 801bd8c:	4620      	mov	r0, r4
 801bd8e:	f000 fdb5 	bl	801c8fc <__multadd>
 801bd92:	9b08      	ldr	r3, [sp, #32]
 801bd94:	ee08 0a10 	vmov	s16, r0
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	f000 81b1 	beq.w	801c100 <_dtoa_r+0xbc0>
 801bd9e:	2300      	movs	r3, #0
 801bda0:	4639      	mov	r1, r7
 801bda2:	220a      	movs	r2, #10
 801bda4:	4620      	mov	r0, r4
 801bda6:	f000 fda9 	bl	801c8fc <__multadd>
 801bdaa:	9b02      	ldr	r3, [sp, #8]
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	4607      	mov	r7, r0
 801bdb0:	f300 808e 	bgt.w	801bed0 <_dtoa_r+0x990>
 801bdb4:	9b06      	ldr	r3, [sp, #24]
 801bdb6:	2b02      	cmp	r3, #2
 801bdb8:	dc51      	bgt.n	801be5e <_dtoa_r+0x91e>
 801bdba:	e089      	b.n	801bed0 <_dtoa_r+0x990>
 801bdbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bdbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801bdc2:	e74b      	b.n	801bc5c <_dtoa_r+0x71c>
 801bdc4:	9b03      	ldr	r3, [sp, #12]
 801bdc6:	1e5e      	subs	r6, r3, #1
 801bdc8:	9b07      	ldr	r3, [sp, #28]
 801bdca:	42b3      	cmp	r3, r6
 801bdcc:	bfbf      	itttt	lt
 801bdce:	9b07      	ldrlt	r3, [sp, #28]
 801bdd0:	9607      	strlt	r6, [sp, #28]
 801bdd2:	1af2      	sublt	r2, r6, r3
 801bdd4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bdd6:	bfb6      	itet	lt
 801bdd8:	189b      	addlt	r3, r3, r2
 801bdda:	1b9e      	subge	r6, r3, r6
 801bddc:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bdde:	9b03      	ldr	r3, [sp, #12]
 801bde0:	bfb8      	it	lt
 801bde2:	2600      	movlt	r6, #0
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	bfb7      	itett	lt
 801bde8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801bdec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801bdf0:	1a9d      	sublt	r5, r3, r2
 801bdf2:	2300      	movlt	r3, #0
 801bdf4:	e734      	b.n	801bc60 <_dtoa_r+0x720>
 801bdf6:	9e07      	ldr	r6, [sp, #28]
 801bdf8:	9d04      	ldr	r5, [sp, #16]
 801bdfa:	9f08      	ldr	r7, [sp, #32]
 801bdfc:	e73b      	b.n	801bc76 <_dtoa_r+0x736>
 801bdfe:	9a07      	ldr	r2, [sp, #28]
 801be00:	e767      	b.n	801bcd2 <_dtoa_r+0x792>
 801be02:	9b06      	ldr	r3, [sp, #24]
 801be04:	2b01      	cmp	r3, #1
 801be06:	dc18      	bgt.n	801be3a <_dtoa_r+0x8fa>
 801be08:	f1ba 0f00 	cmp.w	sl, #0
 801be0c:	d115      	bne.n	801be3a <_dtoa_r+0x8fa>
 801be0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801be12:	b993      	cbnz	r3, 801be3a <_dtoa_r+0x8fa>
 801be14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801be18:	0d1b      	lsrs	r3, r3, #20
 801be1a:	051b      	lsls	r3, r3, #20
 801be1c:	b183      	cbz	r3, 801be40 <_dtoa_r+0x900>
 801be1e:	9b04      	ldr	r3, [sp, #16]
 801be20:	3301      	adds	r3, #1
 801be22:	9304      	str	r3, [sp, #16]
 801be24:	9b05      	ldr	r3, [sp, #20]
 801be26:	3301      	adds	r3, #1
 801be28:	9305      	str	r3, [sp, #20]
 801be2a:	f04f 0801 	mov.w	r8, #1
 801be2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801be30:	2b00      	cmp	r3, #0
 801be32:	f47f af6a 	bne.w	801bd0a <_dtoa_r+0x7ca>
 801be36:	2001      	movs	r0, #1
 801be38:	e76f      	b.n	801bd1a <_dtoa_r+0x7da>
 801be3a:	f04f 0800 	mov.w	r8, #0
 801be3e:	e7f6      	b.n	801be2e <_dtoa_r+0x8ee>
 801be40:	4698      	mov	r8, r3
 801be42:	e7f4      	b.n	801be2e <_dtoa_r+0x8ee>
 801be44:	f43f af7d 	beq.w	801bd42 <_dtoa_r+0x802>
 801be48:	4618      	mov	r0, r3
 801be4a:	301c      	adds	r0, #28
 801be4c:	e772      	b.n	801bd34 <_dtoa_r+0x7f4>
 801be4e:	9b03      	ldr	r3, [sp, #12]
 801be50:	2b00      	cmp	r3, #0
 801be52:	dc37      	bgt.n	801bec4 <_dtoa_r+0x984>
 801be54:	9b06      	ldr	r3, [sp, #24]
 801be56:	2b02      	cmp	r3, #2
 801be58:	dd34      	ble.n	801bec4 <_dtoa_r+0x984>
 801be5a:	9b03      	ldr	r3, [sp, #12]
 801be5c:	9302      	str	r3, [sp, #8]
 801be5e:	9b02      	ldr	r3, [sp, #8]
 801be60:	b96b      	cbnz	r3, 801be7e <_dtoa_r+0x93e>
 801be62:	4631      	mov	r1, r6
 801be64:	2205      	movs	r2, #5
 801be66:	4620      	mov	r0, r4
 801be68:	f000 fd48 	bl	801c8fc <__multadd>
 801be6c:	4601      	mov	r1, r0
 801be6e:	4606      	mov	r6, r0
 801be70:	ee18 0a10 	vmov	r0, s16
 801be74:	f000 ffac 	bl	801cdd0 <__mcmp>
 801be78:	2800      	cmp	r0, #0
 801be7a:	f73f adbb 	bgt.w	801b9f4 <_dtoa_r+0x4b4>
 801be7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be80:	9d01      	ldr	r5, [sp, #4]
 801be82:	43db      	mvns	r3, r3
 801be84:	9300      	str	r3, [sp, #0]
 801be86:	f04f 0800 	mov.w	r8, #0
 801be8a:	4631      	mov	r1, r6
 801be8c:	4620      	mov	r0, r4
 801be8e:	f000 fd13 	bl	801c8b8 <_Bfree>
 801be92:	2f00      	cmp	r7, #0
 801be94:	f43f aea4 	beq.w	801bbe0 <_dtoa_r+0x6a0>
 801be98:	f1b8 0f00 	cmp.w	r8, #0
 801be9c:	d005      	beq.n	801beaa <_dtoa_r+0x96a>
 801be9e:	45b8      	cmp	r8, r7
 801bea0:	d003      	beq.n	801beaa <_dtoa_r+0x96a>
 801bea2:	4641      	mov	r1, r8
 801bea4:	4620      	mov	r0, r4
 801bea6:	f000 fd07 	bl	801c8b8 <_Bfree>
 801beaa:	4639      	mov	r1, r7
 801beac:	4620      	mov	r0, r4
 801beae:	f000 fd03 	bl	801c8b8 <_Bfree>
 801beb2:	e695      	b.n	801bbe0 <_dtoa_r+0x6a0>
 801beb4:	2600      	movs	r6, #0
 801beb6:	4637      	mov	r7, r6
 801beb8:	e7e1      	b.n	801be7e <_dtoa_r+0x93e>
 801beba:	9700      	str	r7, [sp, #0]
 801bebc:	4637      	mov	r7, r6
 801bebe:	e599      	b.n	801b9f4 <_dtoa_r+0x4b4>
 801bec0:	40240000 	.word	0x40240000
 801bec4:	9b08      	ldr	r3, [sp, #32]
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	f000 80ca 	beq.w	801c060 <_dtoa_r+0xb20>
 801becc:	9b03      	ldr	r3, [sp, #12]
 801bece:	9302      	str	r3, [sp, #8]
 801bed0:	2d00      	cmp	r5, #0
 801bed2:	dd05      	ble.n	801bee0 <_dtoa_r+0x9a0>
 801bed4:	4639      	mov	r1, r7
 801bed6:	462a      	mov	r2, r5
 801bed8:	4620      	mov	r0, r4
 801beda:	f000 ff09 	bl	801ccf0 <__lshift>
 801bede:	4607      	mov	r7, r0
 801bee0:	f1b8 0f00 	cmp.w	r8, #0
 801bee4:	d05b      	beq.n	801bf9e <_dtoa_r+0xa5e>
 801bee6:	6879      	ldr	r1, [r7, #4]
 801bee8:	4620      	mov	r0, r4
 801beea:	f000 fca5 	bl	801c838 <_Balloc>
 801beee:	4605      	mov	r5, r0
 801bef0:	b928      	cbnz	r0, 801befe <_dtoa_r+0x9be>
 801bef2:	4b87      	ldr	r3, [pc, #540]	; (801c110 <_dtoa_r+0xbd0>)
 801bef4:	4602      	mov	r2, r0
 801bef6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801befa:	f7ff bb3b 	b.w	801b574 <_dtoa_r+0x34>
 801befe:	693a      	ldr	r2, [r7, #16]
 801bf00:	3202      	adds	r2, #2
 801bf02:	0092      	lsls	r2, r2, #2
 801bf04:	f107 010c 	add.w	r1, r7, #12
 801bf08:	300c      	adds	r0, #12
 801bf0a:	f7fd fd2b 	bl	8019964 <memcpy>
 801bf0e:	2201      	movs	r2, #1
 801bf10:	4629      	mov	r1, r5
 801bf12:	4620      	mov	r0, r4
 801bf14:	f000 feec 	bl	801ccf0 <__lshift>
 801bf18:	9b01      	ldr	r3, [sp, #4]
 801bf1a:	f103 0901 	add.w	r9, r3, #1
 801bf1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801bf22:	4413      	add	r3, r2
 801bf24:	9305      	str	r3, [sp, #20]
 801bf26:	f00a 0301 	and.w	r3, sl, #1
 801bf2a:	46b8      	mov	r8, r7
 801bf2c:	9304      	str	r3, [sp, #16]
 801bf2e:	4607      	mov	r7, r0
 801bf30:	4631      	mov	r1, r6
 801bf32:	ee18 0a10 	vmov	r0, s16
 801bf36:	f7ff fa77 	bl	801b428 <quorem>
 801bf3a:	4641      	mov	r1, r8
 801bf3c:	9002      	str	r0, [sp, #8]
 801bf3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801bf42:	ee18 0a10 	vmov	r0, s16
 801bf46:	f000 ff43 	bl	801cdd0 <__mcmp>
 801bf4a:	463a      	mov	r2, r7
 801bf4c:	9003      	str	r0, [sp, #12]
 801bf4e:	4631      	mov	r1, r6
 801bf50:	4620      	mov	r0, r4
 801bf52:	f000 ff59 	bl	801ce08 <__mdiff>
 801bf56:	68c2      	ldr	r2, [r0, #12]
 801bf58:	f109 3bff 	add.w	fp, r9, #4294967295
 801bf5c:	4605      	mov	r5, r0
 801bf5e:	bb02      	cbnz	r2, 801bfa2 <_dtoa_r+0xa62>
 801bf60:	4601      	mov	r1, r0
 801bf62:	ee18 0a10 	vmov	r0, s16
 801bf66:	f000 ff33 	bl	801cdd0 <__mcmp>
 801bf6a:	4602      	mov	r2, r0
 801bf6c:	4629      	mov	r1, r5
 801bf6e:	4620      	mov	r0, r4
 801bf70:	9207      	str	r2, [sp, #28]
 801bf72:	f000 fca1 	bl	801c8b8 <_Bfree>
 801bf76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801bf7a:	ea43 0102 	orr.w	r1, r3, r2
 801bf7e:	9b04      	ldr	r3, [sp, #16]
 801bf80:	430b      	orrs	r3, r1
 801bf82:	464d      	mov	r5, r9
 801bf84:	d10f      	bne.n	801bfa6 <_dtoa_r+0xa66>
 801bf86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bf8a:	d02a      	beq.n	801bfe2 <_dtoa_r+0xaa2>
 801bf8c:	9b03      	ldr	r3, [sp, #12]
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	dd02      	ble.n	801bf98 <_dtoa_r+0xa58>
 801bf92:	9b02      	ldr	r3, [sp, #8]
 801bf94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801bf98:	f88b a000 	strb.w	sl, [fp]
 801bf9c:	e775      	b.n	801be8a <_dtoa_r+0x94a>
 801bf9e:	4638      	mov	r0, r7
 801bfa0:	e7ba      	b.n	801bf18 <_dtoa_r+0x9d8>
 801bfa2:	2201      	movs	r2, #1
 801bfa4:	e7e2      	b.n	801bf6c <_dtoa_r+0xa2c>
 801bfa6:	9b03      	ldr	r3, [sp, #12]
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	db04      	blt.n	801bfb6 <_dtoa_r+0xa76>
 801bfac:	9906      	ldr	r1, [sp, #24]
 801bfae:	430b      	orrs	r3, r1
 801bfb0:	9904      	ldr	r1, [sp, #16]
 801bfb2:	430b      	orrs	r3, r1
 801bfb4:	d122      	bne.n	801bffc <_dtoa_r+0xabc>
 801bfb6:	2a00      	cmp	r2, #0
 801bfb8:	ddee      	ble.n	801bf98 <_dtoa_r+0xa58>
 801bfba:	ee18 1a10 	vmov	r1, s16
 801bfbe:	2201      	movs	r2, #1
 801bfc0:	4620      	mov	r0, r4
 801bfc2:	f000 fe95 	bl	801ccf0 <__lshift>
 801bfc6:	4631      	mov	r1, r6
 801bfc8:	ee08 0a10 	vmov	s16, r0
 801bfcc:	f000 ff00 	bl	801cdd0 <__mcmp>
 801bfd0:	2800      	cmp	r0, #0
 801bfd2:	dc03      	bgt.n	801bfdc <_dtoa_r+0xa9c>
 801bfd4:	d1e0      	bne.n	801bf98 <_dtoa_r+0xa58>
 801bfd6:	f01a 0f01 	tst.w	sl, #1
 801bfda:	d0dd      	beq.n	801bf98 <_dtoa_r+0xa58>
 801bfdc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bfe0:	d1d7      	bne.n	801bf92 <_dtoa_r+0xa52>
 801bfe2:	2339      	movs	r3, #57	; 0x39
 801bfe4:	f88b 3000 	strb.w	r3, [fp]
 801bfe8:	462b      	mov	r3, r5
 801bfea:	461d      	mov	r5, r3
 801bfec:	3b01      	subs	r3, #1
 801bfee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801bff2:	2a39      	cmp	r2, #57	; 0x39
 801bff4:	d071      	beq.n	801c0da <_dtoa_r+0xb9a>
 801bff6:	3201      	adds	r2, #1
 801bff8:	701a      	strb	r2, [r3, #0]
 801bffa:	e746      	b.n	801be8a <_dtoa_r+0x94a>
 801bffc:	2a00      	cmp	r2, #0
 801bffe:	dd07      	ble.n	801c010 <_dtoa_r+0xad0>
 801c000:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c004:	d0ed      	beq.n	801bfe2 <_dtoa_r+0xaa2>
 801c006:	f10a 0301 	add.w	r3, sl, #1
 801c00a:	f88b 3000 	strb.w	r3, [fp]
 801c00e:	e73c      	b.n	801be8a <_dtoa_r+0x94a>
 801c010:	9b05      	ldr	r3, [sp, #20]
 801c012:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c016:	4599      	cmp	r9, r3
 801c018:	d047      	beq.n	801c0aa <_dtoa_r+0xb6a>
 801c01a:	ee18 1a10 	vmov	r1, s16
 801c01e:	2300      	movs	r3, #0
 801c020:	220a      	movs	r2, #10
 801c022:	4620      	mov	r0, r4
 801c024:	f000 fc6a 	bl	801c8fc <__multadd>
 801c028:	45b8      	cmp	r8, r7
 801c02a:	ee08 0a10 	vmov	s16, r0
 801c02e:	f04f 0300 	mov.w	r3, #0
 801c032:	f04f 020a 	mov.w	r2, #10
 801c036:	4641      	mov	r1, r8
 801c038:	4620      	mov	r0, r4
 801c03a:	d106      	bne.n	801c04a <_dtoa_r+0xb0a>
 801c03c:	f000 fc5e 	bl	801c8fc <__multadd>
 801c040:	4680      	mov	r8, r0
 801c042:	4607      	mov	r7, r0
 801c044:	f109 0901 	add.w	r9, r9, #1
 801c048:	e772      	b.n	801bf30 <_dtoa_r+0x9f0>
 801c04a:	f000 fc57 	bl	801c8fc <__multadd>
 801c04e:	4639      	mov	r1, r7
 801c050:	4680      	mov	r8, r0
 801c052:	2300      	movs	r3, #0
 801c054:	220a      	movs	r2, #10
 801c056:	4620      	mov	r0, r4
 801c058:	f000 fc50 	bl	801c8fc <__multadd>
 801c05c:	4607      	mov	r7, r0
 801c05e:	e7f1      	b.n	801c044 <_dtoa_r+0xb04>
 801c060:	9b03      	ldr	r3, [sp, #12]
 801c062:	9302      	str	r3, [sp, #8]
 801c064:	9d01      	ldr	r5, [sp, #4]
 801c066:	ee18 0a10 	vmov	r0, s16
 801c06a:	4631      	mov	r1, r6
 801c06c:	f7ff f9dc 	bl	801b428 <quorem>
 801c070:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c074:	9b01      	ldr	r3, [sp, #4]
 801c076:	f805 ab01 	strb.w	sl, [r5], #1
 801c07a:	1aea      	subs	r2, r5, r3
 801c07c:	9b02      	ldr	r3, [sp, #8]
 801c07e:	4293      	cmp	r3, r2
 801c080:	dd09      	ble.n	801c096 <_dtoa_r+0xb56>
 801c082:	ee18 1a10 	vmov	r1, s16
 801c086:	2300      	movs	r3, #0
 801c088:	220a      	movs	r2, #10
 801c08a:	4620      	mov	r0, r4
 801c08c:	f000 fc36 	bl	801c8fc <__multadd>
 801c090:	ee08 0a10 	vmov	s16, r0
 801c094:	e7e7      	b.n	801c066 <_dtoa_r+0xb26>
 801c096:	9b02      	ldr	r3, [sp, #8]
 801c098:	2b00      	cmp	r3, #0
 801c09a:	bfc8      	it	gt
 801c09c:	461d      	movgt	r5, r3
 801c09e:	9b01      	ldr	r3, [sp, #4]
 801c0a0:	bfd8      	it	le
 801c0a2:	2501      	movle	r5, #1
 801c0a4:	441d      	add	r5, r3
 801c0a6:	f04f 0800 	mov.w	r8, #0
 801c0aa:	ee18 1a10 	vmov	r1, s16
 801c0ae:	2201      	movs	r2, #1
 801c0b0:	4620      	mov	r0, r4
 801c0b2:	f000 fe1d 	bl	801ccf0 <__lshift>
 801c0b6:	4631      	mov	r1, r6
 801c0b8:	ee08 0a10 	vmov	s16, r0
 801c0bc:	f000 fe88 	bl	801cdd0 <__mcmp>
 801c0c0:	2800      	cmp	r0, #0
 801c0c2:	dc91      	bgt.n	801bfe8 <_dtoa_r+0xaa8>
 801c0c4:	d102      	bne.n	801c0cc <_dtoa_r+0xb8c>
 801c0c6:	f01a 0f01 	tst.w	sl, #1
 801c0ca:	d18d      	bne.n	801bfe8 <_dtoa_r+0xaa8>
 801c0cc:	462b      	mov	r3, r5
 801c0ce:	461d      	mov	r5, r3
 801c0d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c0d4:	2a30      	cmp	r2, #48	; 0x30
 801c0d6:	d0fa      	beq.n	801c0ce <_dtoa_r+0xb8e>
 801c0d8:	e6d7      	b.n	801be8a <_dtoa_r+0x94a>
 801c0da:	9a01      	ldr	r2, [sp, #4]
 801c0dc:	429a      	cmp	r2, r3
 801c0de:	d184      	bne.n	801bfea <_dtoa_r+0xaaa>
 801c0e0:	9b00      	ldr	r3, [sp, #0]
 801c0e2:	3301      	adds	r3, #1
 801c0e4:	9300      	str	r3, [sp, #0]
 801c0e6:	2331      	movs	r3, #49	; 0x31
 801c0e8:	7013      	strb	r3, [r2, #0]
 801c0ea:	e6ce      	b.n	801be8a <_dtoa_r+0x94a>
 801c0ec:	4b09      	ldr	r3, [pc, #36]	; (801c114 <_dtoa_r+0xbd4>)
 801c0ee:	f7ff ba95 	b.w	801b61c <_dtoa_r+0xdc>
 801c0f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	f47f aa6e 	bne.w	801b5d6 <_dtoa_r+0x96>
 801c0fa:	4b07      	ldr	r3, [pc, #28]	; (801c118 <_dtoa_r+0xbd8>)
 801c0fc:	f7ff ba8e 	b.w	801b61c <_dtoa_r+0xdc>
 801c100:	9b02      	ldr	r3, [sp, #8]
 801c102:	2b00      	cmp	r3, #0
 801c104:	dcae      	bgt.n	801c064 <_dtoa_r+0xb24>
 801c106:	9b06      	ldr	r3, [sp, #24]
 801c108:	2b02      	cmp	r3, #2
 801c10a:	f73f aea8 	bgt.w	801be5e <_dtoa_r+0x91e>
 801c10e:	e7a9      	b.n	801c064 <_dtoa_r+0xb24>
 801c110:	08025660 	.word	0x08025660
 801c114:	08025464 	.word	0x08025464
 801c118:	080255e1 	.word	0x080255e1

0801c11c <rshift>:
 801c11c:	6903      	ldr	r3, [r0, #16]
 801c11e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c122:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c126:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c12a:	f100 0414 	add.w	r4, r0, #20
 801c12e:	dd45      	ble.n	801c1bc <rshift+0xa0>
 801c130:	f011 011f 	ands.w	r1, r1, #31
 801c134:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c138:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c13c:	d10c      	bne.n	801c158 <rshift+0x3c>
 801c13e:	f100 0710 	add.w	r7, r0, #16
 801c142:	4629      	mov	r1, r5
 801c144:	42b1      	cmp	r1, r6
 801c146:	d334      	bcc.n	801c1b2 <rshift+0x96>
 801c148:	1a9b      	subs	r3, r3, r2
 801c14a:	009b      	lsls	r3, r3, #2
 801c14c:	1eea      	subs	r2, r5, #3
 801c14e:	4296      	cmp	r6, r2
 801c150:	bf38      	it	cc
 801c152:	2300      	movcc	r3, #0
 801c154:	4423      	add	r3, r4
 801c156:	e015      	b.n	801c184 <rshift+0x68>
 801c158:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c15c:	f1c1 0820 	rsb	r8, r1, #32
 801c160:	40cf      	lsrs	r7, r1
 801c162:	f105 0e04 	add.w	lr, r5, #4
 801c166:	46a1      	mov	r9, r4
 801c168:	4576      	cmp	r6, lr
 801c16a:	46f4      	mov	ip, lr
 801c16c:	d815      	bhi.n	801c19a <rshift+0x7e>
 801c16e:	1a9a      	subs	r2, r3, r2
 801c170:	0092      	lsls	r2, r2, #2
 801c172:	3a04      	subs	r2, #4
 801c174:	3501      	adds	r5, #1
 801c176:	42ae      	cmp	r6, r5
 801c178:	bf38      	it	cc
 801c17a:	2200      	movcc	r2, #0
 801c17c:	18a3      	adds	r3, r4, r2
 801c17e:	50a7      	str	r7, [r4, r2]
 801c180:	b107      	cbz	r7, 801c184 <rshift+0x68>
 801c182:	3304      	adds	r3, #4
 801c184:	1b1a      	subs	r2, r3, r4
 801c186:	42a3      	cmp	r3, r4
 801c188:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c18c:	bf08      	it	eq
 801c18e:	2300      	moveq	r3, #0
 801c190:	6102      	str	r2, [r0, #16]
 801c192:	bf08      	it	eq
 801c194:	6143      	streq	r3, [r0, #20]
 801c196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c19a:	f8dc c000 	ldr.w	ip, [ip]
 801c19e:	fa0c fc08 	lsl.w	ip, ip, r8
 801c1a2:	ea4c 0707 	orr.w	r7, ip, r7
 801c1a6:	f849 7b04 	str.w	r7, [r9], #4
 801c1aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c1ae:	40cf      	lsrs	r7, r1
 801c1b0:	e7da      	b.n	801c168 <rshift+0x4c>
 801c1b2:	f851 cb04 	ldr.w	ip, [r1], #4
 801c1b6:	f847 cf04 	str.w	ip, [r7, #4]!
 801c1ba:	e7c3      	b.n	801c144 <rshift+0x28>
 801c1bc:	4623      	mov	r3, r4
 801c1be:	e7e1      	b.n	801c184 <rshift+0x68>

0801c1c0 <__hexdig_fun>:
 801c1c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c1c4:	2b09      	cmp	r3, #9
 801c1c6:	d802      	bhi.n	801c1ce <__hexdig_fun+0xe>
 801c1c8:	3820      	subs	r0, #32
 801c1ca:	b2c0      	uxtb	r0, r0
 801c1cc:	4770      	bx	lr
 801c1ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c1d2:	2b05      	cmp	r3, #5
 801c1d4:	d801      	bhi.n	801c1da <__hexdig_fun+0x1a>
 801c1d6:	3847      	subs	r0, #71	; 0x47
 801c1d8:	e7f7      	b.n	801c1ca <__hexdig_fun+0xa>
 801c1da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c1de:	2b05      	cmp	r3, #5
 801c1e0:	d801      	bhi.n	801c1e6 <__hexdig_fun+0x26>
 801c1e2:	3827      	subs	r0, #39	; 0x27
 801c1e4:	e7f1      	b.n	801c1ca <__hexdig_fun+0xa>
 801c1e6:	2000      	movs	r0, #0
 801c1e8:	4770      	bx	lr
	...

0801c1ec <__gethex>:
 801c1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1f0:	ed2d 8b02 	vpush	{d8}
 801c1f4:	b089      	sub	sp, #36	; 0x24
 801c1f6:	ee08 0a10 	vmov	s16, r0
 801c1fa:	9304      	str	r3, [sp, #16]
 801c1fc:	4bb4      	ldr	r3, [pc, #720]	; (801c4d0 <__gethex+0x2e4>)
 801c1fe:	681b      	ldr	r3, [r3, #0]
 801c200:	9301      	str	r3, [sp, #4]
 801c202:	4618      	mov	r0, r3
 801c204:	468b      	mov	fp, r1
 801c206:	4690      	mov	r8, r2
 801c208:	f7e3 fffa 	bl	8000200 <strlen>
 801c20c:	9b01      	ldr	r3, [sp, #4]
 801c20e:	f8db 2000 	ldr.w	r2, [fp]
 801c212:	4403      	add	r3, r0
 801c214:	4682      	mov	sl, r0
 801c216:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c21a:	9305      	str	r3, [sp, #20]
 801c21c:	1c93      	adds	r3, r2, #2
 801c21e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c222:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c226:	32fe      	adds	r2, #254	; 0xfe
 801c228:	18d1      	adds	r1, r2, r3
 801c22a:	461f      	mov	r7, r3
 801c22c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c230:	9100      	str	r1, [sp, #0]
 801c232:	2830      	cmp	r0, #48	; 0x30
 801c234:	d0f8      	beq.n	801c228 <__gethex+0x3c>
 801c236:	f7ff ffc3 	bl	801c1c0 <__hexdig_fun>
 801c23a:	4604      	mov	r4, r0
 801c23c:	2800      	cmp	r0, #0
 801c23e:	d13a      	bne.n	801c2b6 <__gethex+0xca>
 801c240:	9901      	ldr	r1, [sp, #4]
 801c242:	4652      	mov	r2, sl
 801c244:	4638      	mov	r0, r7
 801c246:	f001 fa23 	bl	801d690 <strncmp>
 801c24a:	4605      	mov	r5, r0
 801c24c:	2800      	cmp	r0, #0
 801c24e:	d168      	bne.n	801c322 <__gethex+0x136>
 801c250:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c254:	eb07 060a 	add.w	r6, r7, sl
 801c258:	f7ff ffb2 	bl	801c1c0 <__hexdig_fun>
 801c25c:	2800      	cmp	r0, #0
 801c25e:	d062      	beq.n	801c326 <__gethex+0x13a>
 801c260:	4633      	mov	r3, r6
 801c262:	7818      	ldrb	r0, [r3, #0]
 801c264:	2830      	cmp	r0, #48	; 0x30
 801c266:	461f      	mov	r7, r3
 801c268:	f103 0301 	add.w	r3, r3, #1
 801c26c:	d0f9      	beq.n	801c262 <__gethex+0x76>
 801c26e:	f7ff ffa7 	bl	801c1c0 <__hexdig_fun>
 801c272:	2301      	movs	r3, #1
 801c274:	fab0 f480 	clz	r4, r0
 801c278:	0964      	lsrs	r4, r4, #5
 801c27a:	4635      	mov	r5, r6
 801c27c:	9300      	str	r3, [sp, #0]
 801c27e:	463a      	mov	r2, r7
 801c280:	4616      	mov	r6, r2
 801c282:	3201      	adds	r2, #1
 801c284:	7830      	ldrb	r0, [r6, #0]
 801c286:	f7ff ff9b 	bl	801c1c0 <__hexdig_fun>
 801c28a:	2800      	cmp	r0, #0
 801c28c:	d1f8      	bne.n	801c280 <__gethex+0x94>
 801c28e:	9901      	ldr	r1, [sp, #4]
 801c290:	4652      	mov	r2, sl
 801c292:	4630      	mov	r0, r6
 801c294:	f001 f9fc 	bl	801d690 <strncmp>
 801c298:	b980      	cbnz	r0, 801c2bc <__gethex+0xd0>
 801c29a:	b94d      	cbnz	r5, 801c2b0 <__gethex+0xc4>
 801c29c:	eb06 050a 	add.w	r5, r6, sl
 801c2a0:	462a      	mov	r2, r5
 801c2a2:	4616      	mov	r6, r2
 801c2a4:	3201      	adds	r2, #1
 801c2a6:	7830      	ldrb	r0, [r6, #0]
 801c2a8:	f7ff ff8a 	bl	801c1c0 <__hexdig_fun>
 801c2ac:	2800      	cmp	r0, #0
 801c2ae:	d1f8      	bne.n	801c2a2 <__gethex+0xb6>
 801c2b0:	1bad      	subs	r5, r5, r6
 801c2b2:	00ad      	lsls	r5, r5, #2
 801c2b4:	e004      	b.n	801c2c0 <__gethex+0xd4>
 801c2b6:	2400      	movs	r4, #0
 801c2b8:	4625      	mov	r5, r4
 801c2ba:	e7e0      	b.n	801c27e <__gethex+0x92>
 801c2bc:	2d00      	cmp	r5, #0
 801c2be:	d1f7      	bne.n	801c2b0 <__gethex+0xc4>
 801c2c0:	7833      	ldrb	r3, [r6, #0]
 801c2c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c2c6:	2b50      	cmp	r3, #80	; 0x50
 801c2c8:	d13b      	bne.n	801c342 <__gethex+0x156>
 801c2ca:	7873      	ldrb	r3, [r6, #1]
 801c2cc:	2b2b      	cmp	r3, #43	; 0x2b
 801c2ce:	d02c      	beq.n	801c32a <__gethex+0x13e>
 801c2d0:	2b2d      	cmp	r3, #45	; 0x2d
 801c2d2:	d02e      	beq.n	801c332 <__gethex+0x146>
 801c2d4:	1c71      	adds	r1, r6, #1
 801c2d6:	f04f 0900 	mov.w	r9, #0
 801c2da:	7808      	ldrb	r0, [r1, #0]
 801c2dc:	f7ff ff70 	bl	801c1c0 <__hexdig_fun>
 801c2e0:	1e43      	subs	r3, r0, #1
 801c2e2:	b2db      	uxtb	r3, r3
 801c2e4:	2b18      	cmp	r3, #24
 801c2e6:	d82c      	bhi.n	801c342 <__gethex+0x156>
 801c2e8:	f1a0 0210 	sub.w	r2, r0, #16
 801c2ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c2f0:	f7ff ff66 	bl	801c1c0 <__hexdig_fun>
 801c2f4:	1e43      	subs	r3, r0, #1
 801c2f6:	b2db      	uxtb	r3, r3
 801c2f8:	2b18      	cmp	r3, #24
 801c2fa:	d91d      	bls.n	801c338 <__gethex+0x14c>
 801c2fc:	f1b9 0f00 	cmp.w	r9, #0
 801c300:	d000      	beq.n	801c304 <__gethex+0x118>
 801c302:	4252      	negs	r2, r2
 801c304:	4415      	add	r5, r2
 801c306:	f8cb 1000 	str.w	r1, [fp]
 801c30a:	b1e4      	cbz	r4, 801c346 <__gethex+0x15a>
 801c30c:	9b00      	ldr	r3, [sp, #0]
 801c30e:	2b00      	cmp	r3, #0
 801c310:	bf14      	ite	ne
 801c312:	2700      	movne	r7, #0
 801c314:	2706      	moveq	r7, #6
 801c316:	4638      	mov	r0, r7
 801c318:	b009      	add	sp, #36	; 0x24
 801c31a:	ecbd 8b02 	vpop	{d8}
 801c31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c322:	463e      	mov	r6, r7
 801c324:	4625      	mov	r5, r4
 801c326:	2401      	movs	r4, #1
 801c328:	e7ca      	b.n	801c2c0 <__gethex+0xd4>
 801c32a:	f04f 0900 	mov.w	r9, #0
 801c32e:	1cb1      	adds	r1, r6, #2
 801c330:	e7d3      	b.n	801c2da <__gethex+0xee>
 801c332:	f04f 0901 	mov.w	r9, #1
 801c336:	e7fa      	b.n	801c32e <__gethex+0x142>
 801c338:	230a      	movs	r3, #10
 801c33a:	fb03 0202 	mla	r2, r3, r2, r0
 801c33e:	3a10      	subs	r2, #16
 801c340:	e7d4      	b.n	801c2ec <__gethex+0x100>
 801c342:	4631      	mov	r1, r6
 801c344:	e7df      	b.n	801c306 <__gethex+0x11a>
 801c346:	1bf3      	subs	r3, r6, r7
 801c348:	3b01      	subs	r3, #1
 801c34a:	4621      	mov	r1, r4
 801c34c:	2b07      	cmp	r3, #7
 801c34e:	dc0b      	bgt.n	801c368 <__gethex+0x17c>
 801c350:	ee18 0a10 	vmov	r0, s16
 801c354:	f000 fa70 	bl	801c838 <_Balloc>
 801c358:	4604      	mov	r4, r0
 801c35a:	b940      	cbnz	r0, 801c36e <__gethex+0x182>
 801c35c:	4b5d      	ldr	r3, [pc, #372]	; (801c4d4 <__gethex+0x2e8>)
 801c35e:	4602      	mov	r2, r0
 801c360:	21de      	movs	r1, #222	; 0xde
 801c362:	485d      	ldr	r0, [pc, #372]	; (801c4d8 <__gethex+0x2ec>)
 801c364:	f001 f9b6 	bl	801d6d4 <__assert_func>
 801c368:	3101      	adds	r1, #1
 801c36a:	105b      	asrs	r3, r3, #1
 801c36c:	e7ee      	b.n	801c34c <__gethex+0x160>
 801c36e:	f100 0914 	add.w	r9, r0, #20
 801c372:	f04f 0b00 	mov.w	fp, #0
 801c376:	f1ca 0301 	rsb	r3, sl, #1
 801c37a:	f8cd 9008 	str.w	r9, [sp, #8]
 801c37e:	f8cd b000 	str.w	fp, [sp]
 801c382:	9306      	str	r3, [sp, #24]
 801c384:	42b7      	cmp	r7, r6
 801c386:	d340      	bcc.n	801c40a <__gethex+0x21e>
 801c388:	9802      	ldr	r0, [sp, #8]
 801c38a:	9b00      	ldr	r3, [sp, #0]
 801c38c:	f840 3b04 	str.w	r3, [r0], #4
 801c390:	eba0 0009 	sub.w	r0, r0, r9
 801c394:	1080      	asrs	r0, r0, #2
 801c396:	0146      	lsls	r6, r0, #5
 801c398:	6120      	str	r0, [r4, #16]
 801c39a:	4618      	mov	r0, r3
 801c39c:	f000 fb3e 	bl	801ca1c <__hi0bits>
 801c3a0:	1a30      	subs	r0, r6, r0
 801c3a2:	f8d8 6000 	ldr.w	r6, [r8]
 801c3a6:	42b0      	cmp	r0, r6
 801c3a8:	dd63      	ble.n	801c472 <__gethex+0x286>
 801c3aa:	1b87      	subs	r7, r0, r6
 801c3ac:	4639      	mov	r1, r7
 801c3ae:	4620      	mov	r0, r4
 801c3b0:	f000 fee2 	bl	801d178 <__any_on>
 801c3b4:	4682      	mov	sl, r0
 801c3b6:	b1a8      	cbz	r0, 801c3e4 <__gethex+0x1f8>
 801c3b8:	1e7b      	subs	r3, r7, #1
 801c3ba:	1159      	asrs	r1, r3, #5
 801c3bc:	f003 021f 	and.w	r2, r3, #31
 801c3c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c3c4:	f04f 0a01 	mov.w	sl, #1
 801c3c8:	fa0a f202 	lsl.w	r2, sl, r2
 801c3cc:	420a      	tst	r2, r1
 801c3ce:	d009      	beq.n	801c3e4 <__gethex+0x1f8>
 801c3d0:	4553      	cmp	r3, sl
 801c3d2:	dd05      	ble.n	801c3e0 <__gethex+0x1f4>
 801c3d4:	1eb9      	subs	r1, r7, #2
 801c3d6:	4620      	mov	r0, r4
 801c3d8:	f000 fece 	bl	801d178 <__any_on>
 801c3dc:	2800      	cmp	r0, #0
 801c3de:	d145      	bne.n	801c46c <__gethex+0x280>
 801c3e0:	f04f 0a02 	mov.w	sl, #2
 801c3e4:	4639      	mov	r1, r7
 801c3e6:	4620      	mov	r0, r4
 801c3e8:	f7ff fe98 	bl	801c11c <rshift>
 801c3ec:	443d      	add	r5, r7
 801c3ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c3f2:	42ab      	cmp	r3, r5
 801c3f4:	da4c      	bge.n	801c490 <__gethex+0x2a4>
 801c3f6:	ee18 0a10 	vmov	r0, s16
 801c3fa:	4621      	mov	r1, r4
 801c3fc:	f000 fa5c 	bl	801c8b8 <_Bfree>
 801c400:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c402:	2300      	movs	r3, #0
 801c404:	6013      	str	r3, [r2, #0]
 801c406:	27a3      	movs	r7, #163	; 0xa3
 801c408:	e785      	b.n	801c316 <__gethex+0x12a>
 801c40a:	1e73      	subs	r3, r6, #1
 801c40c:	9a05      	ldr	r2, [sp, #20]
 801c40e:	9303      	str	r3, [sp, #12]
 801c410:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c414:	4293      	cmp	r3, r2
 801c416:	d019      	beq.n	801c44c <__gethex+0x260>
 801c418:	f1bb 0f20 	cmp.w	fp, #32
 801c41c:	d107      	bne.n	801c42e <__gethex+0x242>
 801c41e:	9b02      	ldr	r3, [sp, #8]
 801c420:	9a00      	ldr	r2, [sp, #0]
 801c422:	f843 2b04 	str.w	r2, [r3], #4
 801c426:	9302      	str	r3, [sp, #8]
 801c428:	2300      	movs	r3, #0
 801c42a:	9300      	str	r3, [sp, #0]
 801c42c:	469b      	mov	fp, r3
 801c42e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c432:	f7ff fec5 	bl	801c1c0 <__hexdig_fun>
 801c436:	9b00      	ldr	r3, [sp, #0]
 801c438:	f000 000f 	and.w	r0, r0, #15
 801c43c:	fa00 f00b 	lsl.w	r0, r0, fp
 801c440:	4303      	orrs	r3, r0
 801c442:	9300      	str	r3, [sp, #0]
 801c444:	f10b 0b04 	add.w	fp, fp, #4
 801c448:	9b03      	ldr	r3, [sp, #12]
 801c44a:	e00d      	b.n	801c468 <__gethex+0x27c>
 801c44c:	9b03      	ldr	r3, [sp, #12]
 801c44e:	9a06      	ldr	r2, [sp, #24]
 801c450:	4413      	add	r3, r2
 801c452:	42bb      	cmp	r3, r7
 801c454:	d3e0      	bcc.n	801c418 <__gethex+0x22c>
 801c456:	4618      	mov	r0, r3
 801c458:	9901      	ldr	r1, [sp, #4]
 801c45a:	9307      	str	r3, [sp, #28]
 801c45c:	4652      	mov	r2, sl
 801c45e:	f001 f917 	bl	801d690 <strncmp>
 801c462:	9b07      	ldr	r3, [sp, #28]
 801c464:	2800      	cmp	r0, #0
 801c466:	d1d7      	bne.n	801c418 <__gethex+0x22c>
 801c468:	461e      	mov	r6, r3
 801c46a:	e78b      	b.n	801c384 <__gethex+0x198>
 801c46c:	f04f 0a03 	mov.w	sl, #3
 801c470:	e7b8      	b.n	801c3e4 <__gethex+0x1f8>
 801c472:	da0a      	bge.n	801c48a <__gethex+0x29e>
 801c474:	1a37      	subs	r7, r6, r0
 801c476:	4621      	mov	r1, r4
 801c478:	ee18 0a10 	vmov	r0, s16
 801c47c:	463a      	mov	r2, r7
 801c47e:	f000 fc37 	bl	801ccf0 <__lshift>
 801c482:	1bed      	subs	r5, r5, r7
 801c484:	4604      	mov	r4, r0
 801c486:	f100 0914 	add.w	r9, r0, #20
 801c48a:	f04f 0a00 	mov.w	sl, #0
 801c48e:	e7ae      	b.n	801c3ee <__gethex+0x202>
 801c490:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c494:	42a8      	cmp	r0, r5
 801c496:	dd72      	ble.n	801c57e <__gethex+0x392>
 801c498:	1b45      	subs	r5, r0, r5
 801c49a:	42ae      	cmp	r6, r5
 801c49c:	dc36      	bgt.n	801c50c <__gethex+0x320>
 801c49e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c4a2:	2b02      	cmp	r3, #2
 801c4a4:	d02a      	beq.n	801c4fc <__gethex+0x310>
 801c4a6:	2b03      	cmp	r3, #3
 801c4a8:	d02c      	beq.n	801c504 <__gethex+0x318>
 801c4aa:	2b01      	cmp	r3, #1
 801c4ac:	d11c      	bne.n	801c4e8 <__gethex+0x2fc>
 801c4ae:	42ae      	cmp	r6, r5
 801c4b0:	d11a      	bne.n	801c4e8 <__gethex+0x2fc>
 801c4b2:	2e01      	cmp	r6, #1
 801c4b4:	d112      	bne.n	801c4dc <__gethex+0x2f0>
 801c4b6:	9a04      	ldr	r2, [sp, #16]
 801c4b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c4bc:	6013      	str	r3, [r2, #0]
 801c4be:	2301      	movs	r3, #1
 801c4c0:	6123      	str	r3, [r4, #16]
 801c4c2:	f8c9 3000 	str.w	r3, [r9]
 801c4c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c4c8:	2762      	movs	r7, #98	; 0x62
 801c4ca:	601c      	str	r4, [r3, #0]
 801c4cc:	e723      	b.n	801c316 <__gethex+0x12a>
 801c4ce:	bf00      	nop
 801c4d0:	080256d8 	.word	0x080256d8
 801c4d4:	08025660 	.word	0x08025660
 801c4d8:	08025671 	.word	0x08025671
 801c4dc:	1e71      	subs	r1, r6, #1
 801c4de:	4620      	mov	r0, r4
 801c4e0:	f000 fe4a 	bl	801d178 <__any_on>
 801c4e4:	2800      	cmp	r0, #0
 801c4e6:	d1e6      	bne.n	801c4b6 <__gethex+0x2ca>
 801c4e8:	ee18 0a10 	vmov	r0, s16
 801c4ec:	4621      	mov	r1, r4
 801c4ee:	f000 f9e3 	bl	801c8b8 <_Bfree>
 801c4f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c4f4:	2300      	movs	r3, #0
 801c4f6:	6013      	str	r3, [r2, #0]
 801c4f8:	2750      	movs	r7, #80	; 0x50
 801c4fa:	e70c      	b.n	801c316 <__gethex+0x12a>
 801c4fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d1f2      	bne.n	801c4e8 <__gethex+0x2fc>
 801c502:	e7d8      	b.n	801c4b6 <__gethex+0x2ca>
 801c504:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c506:	2b00      	cmp	r3, #0
 801c508:	d1d5      	bne.n	801c4b6 <__gethex+0x2ca>
 801c50a:	e7ed      	b.n	801c4e8 <__gethex+0x2fc>
 801c50c:	1e6f      	subs	r7, r5, #1
 801c50e:	f1ba 0f00 	cmp.w	sl, #0
 801c512:	d131      	bne.n	801c578 <__gethex+0x38c>
 801c514:	b127      	cbz	r7, 801c520 <__gethex+0x334>
 801c516:	4639      	mov	r1, r7
 801c518:	4620      	mov	r0, r4
 801c51a:	f000 fe2d 	bl	801d178 <__any_on>
 801c51e:	4682      	mov	sl, r0
 801c520:	117b      	asrs	r3, r7, #5
 801c522:	2101      	movs	r1, #1
 801c524:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c528:	f007 071f 	and.w	r7, r7, #31
 801c52c:	fa01 f707 	lsl.w	r7, r1, r7
 801c530:	421f      	tst	r7, r3
 801c532:	4629      	mov	r1, r5
 801c534:	4620      	mov	r0, r4
 801c536:	bf18      	it	ne
 801c538:	f04a 0a02 	orrne.w	sl, sl, #2
 801c53c:	1b76      	subs	r6, r6, r5
 801c53e:	f7ff fded 	bl	801c11c <rshift>
 801c542:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c546:	2702      	movs	r7, #2
 801c548:	f1ba 0f00 	cmp.w	sl, #0
 801c54c:	d048      	beq.n	801c5e0 <__gethex+0x3f4>
 801c54e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c552:	2b02      	cmp	r3, #2
 801c554:	d015      	beq.n	801c582 <__gethex+0x396>
 801c556:	2b03      	cmp	r3, #3
 801c558:	d017      	beq.n	801c58a <__gethex+0x39e>
 801c55a:	2b01      	cmp	r3, #1
 801c55c:	d109      	bne.n	801c572 <__gethex+0x386>
 801c55e:	f01a 0f02 	tst.w	sl, #2
 801c562:	d006      	beq.n	801c572 <__gethex+0x386>
 801c564:	f8d9 0000 	ldr.w	r0, [r9]
 801c568:	ea4a 0a00 	orr.w	sl, sl, r0
 801c56c:	f01a 0f01 	tst.w	sl, #1
 801c570:	d10e      	bne.n	801c590 <__gethex+0x3a4>
 801c572:	f047 0710 	orr.w	r7, r7, #16
 801c576:	e033      	b.n	801c5e0 <__gethex+0x3f4>
 801c578:	f04f 0a01 	mov.w	sl, #1
 801c57c:	e7d0      	b.n	801c520 <__gethex+0x334>
 801c57e:	2701      	movs	r7, #1
 801c580:	e7e2      	b.n	801c548 <__gethex+0x35c>
 801c582:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c584:	f1c3 0301 	rsb	r3, r3, #1
 801c588:	9315      	str	r3, [sp, #84]	; 0x54
 801c58a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d0f0      	beq.n	801c572 <__gethex+0x386>
 801c590:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c594:	f104 0314 	add.w	r3, r4, #20
 801c598:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c59c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c5a0:	f04f 0c00 	mov.w	ip, #0
 801c5a4:	4618      	mov	r0, r3
 801c5a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c5aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c5ae:	d01c      	beq.n	801c5ea <__gethex+0x3fe>
 801c5b0:	3201      	adds	r2, #1
 801c5b2:	6002      	str	r2, [r0, #0]
 801c5b4:	2f02      	cmp	r7, #2
 801c5b6:	f104 0314 	add.w	r3, r4, #20
 801c5ba:	d13f      	bne.n	801c63c <__gethex+0x450>
 801c5bc:	f8d8 2000 	ldr.w	r2, [r8]
 801c5c0:	3a01      	subs	r2, #1
 801c5c2:	42b2      	cmp	r2, r6
 801c5c4:	d10a      	bne.n	801c5dc <__gethex+0x3f0>
 801c5c6:	1171      	asrs	r1, r6, #5
 801c5c8:	2201      	movs	r2, #1
 801c5ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c5ce:	f006 061f 	and.w	r6, r6, #31
 801c5d2:	fa02 f606 	lsl.w	r6, r2, r6
 801c5d6:	421e      	tst	r6, r3
 801c5d8:	bf18      	it	ne
 801c5da:	4617      	movne	r7, r2
 801c5dc:	f047 0720 	orr.w	r7, r7, #32
 801c5e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c5e2:	601c      	str	r4, [r3, #0]
 801c5e4:	9b04      	ldr	r3, [sp, #16]
 801c5e6:	601d      	str	r5, [r3, #0]
 801c5e8:	e695      	b.n	801c316 <__gethex+0x12a>
 801c5ea:	4299      	cmp	r1, r3
 801c5ec:	f843 cc04 	str.w	ip, [r3, #-4]
 801c5f0:	d8d8      	bhi.n	801c5a4 <__gethex+0x3b8>
 801c5f2:	68a3      	ldr	r3, [r4, #8]
 801c5f4:	459b      	cmp	fp, r3
 801c5f6:	db19      	blt.n	801c62c <__gethex+0x440>
 801c5f8:	6861      	ldr	r1, [r4, #4]
 801c5fa:	ee18 0a10 	vmov	r0, s16
 801c5fe:	3101      	adds	r1, #1
 801c600:	f000 f91a 	bl	801c838 <_Balloc>
 801c604:	4681      	mov	r9, r0
 801c606:	b918      	cbnz	r0, 801c610 <__gethex+0x424>
 801c608:	4b1a      	ldr	r3, [pc, #104]	; (801c674 <__gethex+0x488>)
 801c60a:	4602      	mov	r2, r0
 801c60c:	2184      	movs	r1, #132	; 0x84
 801c60e:	e6a8      	b.n	801c362 <__gethex+0x176>
 801c610:	6922      	ldr	r2, [r4, #16]
 801c612:	3202      	adds	r2, #2
 801c614:	f104 010c 	add.w	r1, r4, #12
 801c618:	0092      	lsls	r2, r2, #2
 801c61a:	300c      	adds	r0, #12
 801c61c:	f7fd f9a2 	bl	8019964 <memcpy>
 801c620:	4621      	mov	r1, r4
 801c622:	ee18 0a10 	vmov	r0, s16
 801c626:	f000 f947 	bl	801c8b8 <_Bfree>
 801c62a:	464c      	mov	r4, r9
 801c62c:	6923      	ldr	r3, [r4, #16]
 801c62e:	1c5a      	adds	r2, r3, #1
 801c630:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c634:	6122      	str	r2, [r4, #16]
 801c636:	2201      	movs	r2, #1
 801c638:	615a      	str	r2, [r3, #20]
 801c63a:	e7bb      	b.n	801c5b4 <__gethex+0x3c8>
 801c63c:	6922      	ldr	r2, [r4, #16]
 801c63e:	455a      	cmp	r2, fp
 801c640:	dd0b      	ble.n	801c65a <__gethex+0x46e>
 801c642:	2101      	movs	r1, #1
 801c644:	4620      	mov	r0, r4
 801c646:	f7ff fd69 	bl	801c11c <rshift>
 801c64a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c64e:	3501      	adds	r5, #1
 801c650:	42ab      	cmp	r3, r5
 801c652:	f6ff aed0 	blt.w	801c3f6 <__gethex+0x20a>
 801c656:	2701      	movs	r7, #1
 801c658:	e7c0      	b.n	801c5dc <__gethex+0x3f0>
 801c65a:	f016 061f 	ands.w	r6, r6, #31
 801c65e:	d0fa      	beq.n	801c656 <__gethex+0x46a>
 801c660:	4453      	add	r3, sl
 801c662:	f1c6 0620 	rsb	r6, r6, #32
 801c666:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c66a:	f000 f9d7 	bl	801ca1c <__hi0bits>
 801c66e:	42b0      	cmp	r0, r6
 801c670:	dbe7      	blt.n	801c642 <__gethex+0x456>
 801c672:	e7f0      	b.n	801c656 <__gethex+0x46a>
 801c674:	08025660 	.word	0x08025660

0801c678 <L_shift>:
 801c678:	f1c2 0208 	rsb	r2, r2, #8
 801c67c:	0092      	lsls	r2, r2, #2
 801c67e:	b570      	push	{r4, r5, r6, lr}
 801c680:	f1c2 0620 	rsb	r6, r2, #32
 801c684:	6843      	ldr	r3, [r0, #4]
 801c686:	6804      	ldr	r4, [r0, #0]
 801c688:	fa03 f506 	lsl.w	r5, r3, r6
 801c68c:	432c      	orrs	r4, r5
 801c68e:	40d3      	lsrs	r3, r2
 801c690:	6004      	str	r4, [r0, #0]
 801c692:	f840 3f04 	str.w	r3, [r0, #4]!
 801c696:	4288      	cmp	r0, r1
 801c698:	d3f4      	bcc.n	801c684 <L_shift+0xc>
 801c69a:	bd70      	pop	{r4, r5, r6, pc}

0801c69c <__match>:
 801c69c:	b530      	push	{r4, r5, lr}
 801c69e:	6803      	ldr	r3, [r0, #0]
 801c6a0:	3301      	adds	r3, #1
 801c6a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c6a6:	b914      	cbnz	r4, 801c6ae <__match+0x12>
 801c6a8:	6003      	str	r3, [r0, #0]
 801c6aa:	2001      	movs	r0, #1
 801c6ac:	bd30      	pop	{r4, r5, pc}
 801c6ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c6b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c6b6:	2d19      	cmp	r5, #25
 801c6b8:	bf98      	it	ls
 801c6ba:	3220      	addls	r2, #32
 801c6bc:	42a2      	cmp	r2, r4
 801c6be:	d0f0      	beq.n	801c6a2 <__match+0x6>
 801c6c0:	2000      	movs	r0, #0
 801c6c2:	e7f3      	b.n	801c6ac <__match+0x10>

0801c6c4 <__hexnan>:
 801c6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6c8:	680b      	ldr	r3, [r1, #0]
 801c6ca:	115e      	asrs	r6, r3, #5
 801c6cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c6d0:	f013 031f 	ands.w	r3, r3, #31
 801c6d4:	b087      	sub	sp, #28
 801c6d6:	bf18      	it	ne
 801c6d8:	3604      	addne	r6, #4
 801c6da:	2500      	movs	r5, #0
 801c6dc:	1f37      	subs	r7, r6, #4
 801c6de:	4690      	mov	r8, r2
 801c6e0:	6802      	ldr	r2, [r0, #0]
 801c6e2:	9301      	str	r3, [sp, #4]
 801c6e4:	4682      	mov	sl, r0
 801c6e6:	f846 5c04 	str.w	r5, [r6, #-4]
 801c6ea:	46b9      	mov	r9, r7
 801c6ec:	463c      	mov	r4, r7
 801c6ee:	9502      	str	r5, [sp, #8]
 801c6f0:	46ab      	mov	fp, r5
 801c6f2:	7851      	ldrb	r1, [r2, #1]
 801c6f4:	1c53      	adds	r3, r2, #1
 801c6f6:	9303      	str	r3, [sp, #12]
 801c6f8:	b341      	cbz	r1, 801c74c <__hexnan+0x88>
 801c6fa:	4608      	mov	r0, r1
 801c6fc:	9205      	str	r2, [sp, #20]
 801c6fe:	9104      	str	r1, [sp, #16]
 801c700:	f7ff fd5e 	bl	801c1c0 <__hexdig_fun>
 801c704:	2800      	cmp	r0, #0
 801c706:	d14f      	bne.n	801c7a8 <__hexnan+0xe4>
 801c708:	9904      	ldr	r1, [sp, #16]
 801c70a:	9a05      	ldr	r2, [sp, #20]
 801c70c:	2920      	cmp	r1, #32
 801c70e:	d818      	bhi.n	801c742 <__hexnan+0x7e>
 801c710:	9b02      	ldr	r3, [sp, #8]
 801c712:	459b      	cmp	fp, r3
 801c714:	dd13      	ble.n	801c73e <__hexnan+0x7a>
 801c716:	454c      	cmp	r4, r9
 801c718:	d206      	bcs.n	801c728 <__hexnan+0x64>
 801c71a:	2d07      	cmp	r5, #7
 801c71c:	dc04      	bgt.n	801c728 <__hexnan+0x64>
 801c71e:	462a      	mov	r2, r5
 801c720:	4649      	mov	r1, r9
 801c722:	4620      	mov	r0, r4
 801c724:	f7ff ffa8 	bl	801c678 <L_shift>
 801c728:	4544      	cmp	r4, r8
 801c72a:	d950      	bls.n	801c7ce <__hexnan+0x10a>
 801c72c:	2300      	movs	r3, #0
 801c72e:	f1a4 0904 	sub.w	r9, r4, #4
 801c732:	f844 3c04 	str.w	r3, [r4, #-4]
 801c736:	f8cd b008 	str.w	fp, [sp, #8]
 801c73a:	464c      	mov	r4, r9
 801c73c:	461d      	mov	r5, r3
 801c73e:	9a03      	ldr	r2, [sp, #12]
 801c740:	e7d7      	b.n	801c6f2 <__hexnan+0x2e>
 801c742:	2929      	cmp	r1, #41	; 0x29
 801c744:	d156      	bne.n	801c7f4 <__hexnan+0x130>
 801c746:	3202      	adds	r2, #2
 801c748:	f8ca 2000 	str.w	r2, [sl]
 801c74c:	f1bb 0f00 	cmp.w	fp, #0
 801c750:	d050      	beq.n	801c7f4 <__hexnan+0x130>
 801c752:	454c      	cmp	r4, r9
 801c754:	d206      	bcs.n	801c764 <__hexnan+0xa0>
 801c756:	2d07      	cmp	r5, #7
 801c758:	dc04      	bgt.n	801c764 <__hexnan+0xa0>
 801c75a:	462a      	mov	r2, r5
 801c75c:	4649      	mov	r1, r9
 801c75e:	4620      	mov	r0, r4
 801c760:	f7ff ff8a 	bl	801c678 <L_shift>
 801c764:	4544      	cmp	r4, r8
 801c766:	d934      	bls.n	801c7d2 <__hexnan+0x10e>
 801c768:	f1a8 0204 	sub.w	r2, r8, #4
 801c76c:	4623      	mov	r3, r4
 801c76e:	f853 1b04 	ldr.w	r1, [r3], #4
 801c772:	f842 1f04 	str.w	r1, [r2, #4]!
 801c776:	429f      	cmp	r7, r3
 801c778:	d2f9      	bcs.n	801c76e <__hexnan+0xaa>
 801c77a:	1b3b      	subs	r3, r7, r4
 801c77c:	f023 0303 	bic.w	r3, r3, #3
 801c780:	3304      	adds	r3, #4
 801c782:	3401      	adds	r4, #1
 801c784:	3e03      	subs	r6, #3
 801c786:	42b4      	cmp	r4, r6
 801c788:	bf88      	it	hi
 801c78a:	2304      	movhi	r3, #4
 801c78c:	4443      	add	r3, r8
 801c78e:	2200      	movs	r2, #0
 801c790:	f843 2b04 	str.w	r2, [r3], #4
 801c794:	429f      	cmp	r7, r3
 801c796:	d2fb      	bcs.n	801c790 <__hexnan+0xcc>
 801c798:	683b      	ldr	r3, [r7, #0]
 801c79a:	b91b      	cbnz	r3, 801c7a4 <__hexnan+0xe0>
 801c79c:	4547      	cmp	r7, r8
 801c79e:	d127      	bne.n	801c7f0 <__hexnan+0x12c>
 801c7a0:	2301      	movs	r3, #1
 801c7a2:	603b      	str	r3, [r7, #0]
 801c7a4:	2005      	movs	r0, #5
 801c7a6:	e026      	b.n	801c7f6 <__hexnan+0x132>
 801c7a8:	3501      	adds	r5, #1
 801c7aa:	2d08      	cmp	r5, #8
 801c7ac:	f10b 0b01 	add.w	fp, fp, #1
 801c7b0:	dd06      	ble.n	801c7c0 <__hexnan+0xfc>
 801c7b2:	4544      	cmp	r4, r8
 801c7b4:	d9c3      	bls.n	801c73e <__hexnan+0x7a>
 801c7b6:	2300      	movs	r3, #0
 801c7b8:	f844 3c04 	str.w	r3, [r4, #-4]
 801c7bc:	2501      	movs	r5, #1
 801c7be:	3c04      	subs	r4, #4
 801c7c0:	6822      	ldr	r2, [r4, #0]
 801c7c2:	f000 000f 	and.w	r0, r0, #15
 801c7c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801c7ca:	6022      	str	r2, [r4, #0]
 801c7cc:	e7b7      	b.n	801c73e <__hexnan+0x7a>
 801c7ce:	2508      	movs	r5, #8
 801c7d0:	e7b5      	b.n	801c73e <__hexnan+0x7a>
 801c7d2:	9b01      	ldr	r3, [sp, #4]
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d0df      	beq.n	801c798 <__hexnan+0xd4>
 801c7d8:	f04f 32ff 	mov.w	r2, #4294967295
 801c7dc:	f1c3 0320 	rsb	r3, r3, #32
 801c7e0:	fa22 f303 	lsr.w	r3, r2, r3
 801c7e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c7e8:	401a      	ands	r2, r3
 801c7ea:	f846 2c04 	str.w	r2, [r6, #-4]
 801c7ee:	e7d3      	b.n	801c798 <__hexnan+0xd4>
 801c7f0:	3f04      	subs	r7, #4
 801c7f2:	e7d1      	b.n	801c798 <__hexnan+0xd4>
 801c7f4:	2004      	movs	r0, #4
 801c7f6:	b007      	add	sp, #28
 801c7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c7fc <_localeconv_r>:
 801c7fc:	4800      	ldr	r0, [pc, #0]	; (801c800 <_localeconv_r+0x4>)
 801c7fe:	4770      	bx	lr
 801c800:	200001fc 	.word	0x200001fc

0801c804 <malloc>:
 801c804:	4b02      	ldr	r3, [pc, #8]	; (801c810 <malloc+0xc>)
 801c806:	4601      	mov	r1, r0
 801c808:	6818      	ldr	r0, [r3, #0]
 801c80a:	f000 bd59 	b.w	801d2c0 <_malloc_r>
 801c80e:	bf00      	nop
 801c810:	200000a4 	.word	0x200000a4

0801c814 <__ascii_mbtowc>:
 801c814:	b082      	sub	sp, #8
 801c816:	b901      	cbnz	r1, 801c81a <__ascii_mbtowc+0x6>
 801c818:	a901      	add	r1, sp, #4
 801c81a:	b142      	cbz	r2, 801c82e <__ascii_mbtowc+0x1a>
 801c81c:	b14b      	cbz	r3, 801c832 <__ascii_mbtowc+0x1e>
 801c81e:	7813      	ldrb	r3, [r2, #0]
 801c820:	600b      	str	r3, [r1, #0]
 801c822:	7812      	ldrb	r2, [r2, #0]
 801c824:	1e10      	subs	r0, r2, #0
 801c826:	bf18      	it	ne
 801c828:	2001      	movne	r0, #1
 801c82a:	b002      	add	sp, #8
 801c82c:	4770      	bx	lr
 801c82e:	4610      	mov	r0, r2
 801c830:	e7fb      	b.n	801c82a <__ascii_mbtowc+0x16>
 801c832:	f06f 0001 	mvn.w	r0, #1
 801c836:	e7f8      	b.n	801c82a <__ascii_mbtowc+0x16>

0801c838 <_Balloc>:
 801c838:	b570      	push	{r4, r5, r6, lr}
 801c83a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c83c:	4604      	mov	r4, r0
 801c83e:	460d      	mov	r5, r1
 801c840:	b976      	cbnz	r6, 801c860 <_Balloc+0x28>
 801c842:	2010      	movs	r0, #16
 801c844:	f7ff ffde 	bl	801c804 <malloc>
 801c848:	4602      	mov	r2, r0
 801c84a:	6260      	str	r0, [r4, #36]	; 0x24
 801c84c:	b920      	cbnz	r0, 801c858 <_Balloc+0x20>
 801c84e:	4b18      	ldr	r3, [pc, #96]	; (801c8b0 <_Balloc+0x78>)
 801c850:	4818      	ldr	r0, [pc, #96]	; (801c8b4 <_Balloc+0x7c>)
 801c852:	2166      	movs	r1, #102	; 0x66
 801c854:	f000 ff3e 	bl	801d6d4 <__assert_func>
 801c858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c85c:	6006      	str	r6, [r0, #0]
 801c85e:	60c6      	str	r6, [r0, #12]
 801c860:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c862:	68f3      	ldr	r3, [r6, #12]
 801c864:	b183      	cbz	r3, 801c888 <_Balloc+0x50>
 801c866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c868:	68db      	ldr	r3, [r3, #12]
 801c86a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c86e:	b9b8      	cbnz	r0, 801c8a0 <_Balloc+0x68>
 801c870:	2101      	movs	r1, #1
 801c872:	fa01 f605 	lsl.w	r6, r1, r5
 801c876:	1d72      	adds	r2, r6, #5
 801c878:	0092      	lsls	r2, r2, #2
 801c87a:	4620      	mov	r0, r4
 801c87c:	f000 fc9d 	bl	801d1ba <_calloc_r>
 801c880:	b160      	cbz	r0, 801c89c <_Balloc+0x64>
 801c882:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c886:	e00e      	b.n	801c8a6 <_Balloc+0x6e>
 801c888:	2221      	movs	r2, #33	; 0x21
 801c88a:	2104      	movs	r1, #4
 801c88c:	4620      	mov	r0, r4
 801c88e:	f000 fc94 	bl	801d1ba <_calloc_r>
 801c892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c894:	60f0      	str	r0, [r6, #12]
 801c896:	68db      	ldr	r3, [r3, #12]
 801c898:	2b00      	cmp	r3, #0
 801c89a:	d1e4      	bne.n	801c866 <_Balloc+0x2e>
 801c89c:	2000      	movs	r0, #0
 801c89e:	bd70      	pop	{r4, r5, r6, pc}
 801c8a0:	6802      	ldr	r2, [r0, #0]
 801c8a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c8a6:	2300      	movs	r3, #0
 801c8a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c8ac:	e7f7      	b.n	801c89e <_Balloc+0x66>
 801c8ae:	bf00      	nop
 801c8b0:	080255ee 	.word	0x080255ee
 801c8b4:	080256ec 	.word	0x080256ec

0801c8b8 <_Bfree>:
 801c8b8:	b570      	push	{r4, r5, r6, lr}
 801c8ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c8bc:	4605      	mov	r5, r0
 801c8be:	460c      	mov	r4, r1
 801c8c0:	b976      	cbnz	r6, 801c8e0 <_Bfree+0x28>
 801c8c2:	2010      	movs	r0, #16
 801c8c4:	f7ff ff9e 	bl	801c804 <malloc>
 801c8c8:	4602      	mov	r2, r0
 801c8ca:	6268      	str	r0, [r5, #36]	; 0x24
 801c8cc:	b920      	cbnz	r0, 801c8d8 <_Bfree+0x20>
 801c8ce:	4b09      	ldr	r3, [pc, #36]	; (801c8f4 <_Bfree+0x3c>)
 801c8d0:	4809      	ldr	r0, [pc, #36]	; (801c8f8 <_Bfree+0x40>)
 801c8d2:	218a      	movs	r1, #138	; 0x8a
 801c8d4:	f000 fefe 	bl	801d6d4 <__assert_func>
 801c8d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c8dc:	6006      	str	r6, [r0, #0]
 801c8de:	60c6      	str	r6, [r0, #12]
 801c8e0:	b13c      	cbz	r4, 801c8f2 <_Bfree+0x3a>
 801c8e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c8e4:	6862      	ldr	r2, [r4, #4]
 801c8e6:	68db      	ldr	r3, [r3, #12]
 801c8e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c8ec:	6021      	str	r1, [r4, #0]
 801c8ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c8f2:	bd70      	pop	{r4, r5, r6, pc}
 801c8f4:	080255ee 	.word	0x080255ee
 801c8f8:	080256ec 	.word	0x080256ec

0801c8fc <__multadd>:
 801c8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c900:	690d      	ldr	r5, [r1, #16]
 801c902:	4607      	mov	r7, r0
 801c904:	460c      	mov	r4, r1
 801c906:	461e      	mov	r6, r3
 801c908:	f101 0c14 	add.w	ip, r1, #20
 801c90c:	2000      	movs	r0, #0
 801c90e:	f8dc 3000 	ldr.w	r3, [ip]
 801c912:	b299      	uxth	r1, r3
 801c914:	fb02 6101 	mla	r1, r2, r1, r6
 801c918:	0c1e      	lsrs	r6, r3, #16
 801c91a:	0c0b      	lsrs	r3, r1, #16
 801c91c:	fb02 3306 	mla	r3, r2, r6, r3
 801c920:	b289      	uxth	r1, r1
 801c922:	3001      	adds	r0, #1
 801c924:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c928:	4285      	cmp	r5, r0
 801c92a:	f84c 1b04 	str.w	r1, [ip], #4
 801c92e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c932:	dcec      	bgt.n	801c90e <__multadd+0x12>
 801c934:	b30e      	cbz	r6, 801c97a <__multadd+0x7e>
 801c936:	68a3      	ldr	r3, [r4, #8]
 801c938:	42ab      	cmp	r3, r5
 801c93a:	dc19      	bgt.n	801c970 <__multadd+0x74>
 801c93c:	6861      	ldr	r1, [r4, #4]
 801c93e:	4638      	mov	r0, r7
 801c940:	3101      	adds	r1, #1
 801c942:	f7ff ff79 	bl	801c838 <_Balloc>
 801c946:	4680      	mov	r8, r0
 801c948:	b928      	cbnz	r0, 801c956 <__multadd+0x5a>
 801c94a:	4602      	mov	r2, r0
 801c94c:	4b0c      	ldr	r3, [pc, #48]	; (801c980 <__multadd+0x84>)
 801c94e:	480d      	ldr	r0, [pc, #52]	; (801c984 <__multadd+0x88>)
 801c950:	21b5      	movs	r1, #181	; 0xb5
 801c952:	f000 febf 	bl	801d6d4 <__assert_func>
 801c956:	6922      	ldr	r2, [r4, #16]
 801c958:	3202      	adds	r2, #2
 801c95a:	f104 010c 	add.w	r1, r4, #12
 801c95e:	0092      	lsls	r2, r2, #2
 801c960:	300c      	adds	r0, #12
 801c962:	f7fc ffff 	bl	8019964 <memcpy>
 801c966:	4621      	mov	r1, r4
 801c968:	4638      	mov	r0, r7
 801c96a:	f7ff ffa5 	bl	801c8b8 <_Bfree>
 801c96e:	4644      	mov	r4, r8
 801c970:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c974:	3501      	adds	r5, #1
 801c976:	615e      	str	r6, [r3, #20]
 801c978:	6125      	str	r5, [r4, #16]
 801c97a:	4620      	mov	r0, r4
 801c97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c980:	08025660 	.word	0x08025660
 801c984:	080256ec 	.word	0x080256ec

0801c988 <__s2b>:
 801c988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c98c:	460c      	mov	r4, r1
 801c98e:	4615      	mov	r5, r2
 801c990:	461f      	mov	r7, r3
 801c992:	2209      	movs	r2, #9
 801c994:	3308      	adds	r3, #8
 801c996:	4606      	mov	r6, r0
 801c998:	fb93 f3f2 	sdiv	r3, r3, r2
 801c99c:	2100      	movs	r1, #0
 801c99e:	2201      	movs	r2, #1
 801c9a0:	429a      	cmp	r2, r3
 801c9a2:	db09      	blt.n	801c9b8 <__s2b+0x30>
 801c9a4:	4630      	mov	r0, r6
 801c9a6:	f7ff ff47 	bl	801c838 <_Balloc>
 801c9aa:	b940      	cbnz	r0, 801c9be <__s2b+0x36>
 801c9ac:	4602      	mov	r2, r0
 801c9ae:	4b19      	ldr	r3, [pc, #100]	; (801ca14 <__s2b+0x8c>)
 801c9b0:	4819      	ldr	r0, [pc, #100]	; (801ca18 <__s2b+0x90>)
 801c9b2:	21ce      	movs	r1, #206	; 0xce
 801c9b4:	f000 fe8e 	bl	801d6d4 <__assert_func>
 801c9b8:	0052      	lsls	r2, r2, #1
 801c9ba:	3101      	adds	r1, #1
 801c9bc:	e7f0      	b.n	801c9a0 <__s2b+0x18>
 801c9be:	9b08      	ldr	r3, [sp, #32]
 801c9c0:	6143      	str	r3, [r0, #20]
 801c9c2:	2d09      	cmp	r5, #9
 801c9c4:	f04f 0301 	mov.w	r3, #1
 801c9c8:	6103      	str	r3, [r0, #16]
 801c9ca:	dd16      	ble.n	801c9fa <__s2b+0x72>
 801c9cc:	f104 0909 	add.w	r9, r4, #9
 801c9d0:	46c8      	mov	r8, r9
 801c9d2:	442c      	add	r4, r5
 801c9d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c9d8:	4601      	mov	r1, r0
 801c9da:	3b30      	subs	r3, #48	; 0x30
 801c9dc:	220a      	movs	r2, #10
 801c9de:	4630      	mov	r0, r6
 801c9e0:	f7ff ff8c 	bl	801c8fc <__multadd>
 801c9e4:	45a0      	cmp	r8, r4
 801c9e6:	d1f5      	bne.n	801c9d4 <__s2b+0x4c>
 801c9e8:	f1a5 0408 	sub.w	r4, r5, #8
 801c9ec:	444c      	add	r4, r9
 801c9ee:	1b2d      	subs	r5, r5, r4
 801c9f0:	1963      	adds	r3, r4, r5
 801c9f2:	42bb      	cmp	r3, r7
 801c9f4:	db04      	blt.n	801ca00 <__s2b+0x78>
 801c9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c9fa:	340a      	adds	r4, #10
 801c9fc:	2509      	movs	r5, #9
 801c9fe:	e7f6      	b.n	801c9ee <__s2b+0x66>
 801ca00:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ca04:	4601      	mov	r1, r0
 801ca06:	3b30      	subs	r3, #48	; 0x30
 801ca08:	220a      	movs	r2, #10
 801ca0a:	4630      	mov	r0, r6
 801ca0c:	f7ff ff76 	bl	801c8fc <__multadd>
 801ca10:	e7ee      	b.n	801c9f0 <__s2b+0x68>
 801ca12:	bf00      	nop
 801ca14:	08025660 	.word	0x08025660
 801ca18:	080256ec 	.word	0x080256ec

0801ca1c <__hi0bits>:
 801ca1c:	0c03      	lsrs	r3, r0, #16
 801ca1e:	041b      	lsls	r3, r3, #16
 801ca20:	b9d3      	cbnz	r3, 801ca58 <__hi0bits+0x3c>
 801ca22:	0400      	lsls	r0, r0, #16
 801ca24:	2310      	movs	r3, #16
 801ca26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ca2a:	bf04      	itt	eq
 801ca2c:	0200      	lsleq	r0, r0, #8
 801ca2e:	3308      	addeq	r3, #8
 801ca30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ca34:	bf04      	itt	eq
 801ca36:	0100      	lsleq	r0, r0, #4
 801ca38:	3304      	addeq	r3, #4
 801ca3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ca3e:	bf04      	itt	eq
 801ca40:	0080      	lsleq	r0, r0, #2
 801ca42:	3302      	addeq	r3, #2
 801ca44:	2800      	cmp	r0, #0
 801ca46:	db05      	blt.n	801ca54 <__hi0bits+0x38>
 801ca48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ca4c:	f103 0301 	add.w	r3, r3, #1
 801ca50:	bf08      	it	eq
 801ca52:	2320      	moveq	r3, #32
 801ca54:	4618      	mov	r0, r3
 801ca56:	4770      	bx	lr
 801ca58:	2300      	movs	r3, #0
 801ca5a:	e7e4      	b.n	801ca26 <__hi0bits+0xa>

0801ca5c <__lo0bits>:
 801ca5c:	6803      	ldr	r3, [r0, #0]
 801ca5e:	f013 0207 	ands.w	r2, r3, #7
 801ca62:	4601      	mov	r1, r0
 801ca64:	d00b      	beq.n	801ca7e <__lo0bits+0x22>
 801ca66:	07da      	lsls	r2, r3, #31
 801ca68:	d423      	bmi.n	801cab2 <__lo0bits+0x56>
 801ca6a:	0798      	lsls	r0, r3, #30
 801ca6c:	bf49      	itett	mi
 801ca6e:	085b      	lsrmi	r3, r3, #1
 801ca70:	089b      	lsrpl	r3, r3, #2
 801ca72:	2001      	movmi	r0, #1
 801ca74:	600b      	strmi	r3, [r1, #0]
 801ca76:	bf5c      	itt	pl
 801ca78:	600b      	strpl	r3, [r1, #0]
 801ca7a:	2002      	movpl	r0, #2
 801ca7c:	4770      	bx	lr
 801ca7e:	b298      	uxth	r0, r3
 801ca80:	b9a8      	cbnz	r0, 801caae <__lo0bits+0x52>
 801ca82:	0c1b      	lsrs	r3, r3, #16
 801ca84:	2010      	movs	r0, #16
 801ca86:	b2da      	uxtb	r2, r3
 801ca88:	b90a      	cbnz	r2, 801ca8e <__lo0bits+0x32>
 801ca8a:	3008      	adds	r0, #8
 801ca8c:	0a1b      	lsrs	r3, r3, #8
 801ca8e:	071a      	lsls	r2, r3, #28
 801ca90:	bf04      	itt	eq
 801ca92:	091b      	lsreq	r3, r3, #4
 801ca94:	3004      	addeq	r0, #4
 801ca96:	079a      	lsls	r2, r3, #30
 801ca98:	bf04      	itt	eq
 801ca9a:	089b      	lsreq	r3, r3, #2
 801ca9c:	3002      	addeq	r0, #2
 801ca9e:	07da      	lsls	r2, r3, #31
 801caa0:	d403      	bmi.n	801caaa <__lo0bits+0x4e>
 801caa2:	085b      	lsrs	r3, r3, #1
 801caa4:	f100 0001 	add.w	r0, r0, #1
 801caa8:	d005      	beq.n	801cab6 <__lo0bits+0x5a>
 801caaa:	600b      	str	r3, [r1, #0]
 801caac:	4770      	bx	lr
 801caae:	4610      	mov	r0, r2
 801cab0:	e7e9      	b.n	801ca86 <__lo0bits+0x2a>
 801cab2:	2000      	movs	r0, #0
 801cab4:	4770      	bx	lr
 801cab6:	2020      	movs	r0, #32
 801cab8:	4770      	bx	lr
	...

0801cabc <__i2b>:
 801cabc:	b510      	push	{r4, lr}
 801cabe:	460c      	mov	r4, r1
 801cac0:	2101      	movs	r1, #1
 801cac2:	f7ff feb9 	bl	801c838 <_Balloc>
 801cac6:	4602      	mov	r2, r0
 801cac8:	b928      	cbnz	r0, 801cad6 <__i2b+0x1a>
 801caca:	4b05      	ldr	r3, [pc, #20]	; (801cae0 <__i2b+0x24>)
 801cacc:	4805      	ldr	r0, [pc, #20]	; (801cae4 <__i2b+0x28>)
 801cace:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801cad2:	f000 fdff 	bl	801d6d4 <__assert_func>
 801cad6:	2301      	movs	r3, #1
 801cad8:	6144      	str	r4, [r0, #20]
 801cada:	6103      	str	r3, [r0, #16]
 801cadc:	bd10      	pop	{r4, pc}
 801cade:	bf00      	nop
 801cae0:	08025660 	.word	0x08025660
 801cae4:	080256ec 	.word	0x080256ec

0801cae8 <__multiply>:
 801cae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801caec:	4691      	mov	r9, r2
 801caee:	690a      	ldr	r2, [r1, #16]
 801caf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801caf4:	429a      	cmp	r2, r3
 801caf6:	bfb8      	it	lt
 801caf8:	460b      	movlt	r3, r1
 801cafa:	460c      	mov	r4, r1
 801cafc:	bfbc      	itt	lt
 801cafe:	464c      	movlt	r4, r9
 801cb00:	4699      	movlt	r9, r3
 801cb02:	6927      	ldr	r7, [r4, #16]
 801cb04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cb08:	68a3      	ldr	r3, [r4, #8]
 801cb0a:	6861      	ldr	r1, [r4, #4]
 801cb0c:	eb07 060a 	add.w	r6, r7, sl
 801cb10:	42b3      	cmp	r3, r6
 801cb12:	b085      	sub	sp, #20
 801cb14:	bfb8      	it	lt
 801cb16:	3101      	addlt	r1, #1
 801cb18:	f7ff fe8e 	bl	801c838 <_Balloc>
 801cb1c:	b930      	cbnz	r0, 801cb2c <__multiply+0x44>
 801cb1e:	4602      	mov	r2, r0
 801cb20:	4b44      	ldr	r3, [pc, #272]	; (801cc34 <__multiply+0x14c>)
 801cb22:	4845      	ldr	r0, [pc, #276]	; (801cc38 <__multiply+0x150>)
 801cb24:	f240 115d 	movw	r1, #349	; 0x15d
 801cb28:	f000 fdd4 	bl	801d6d4 <__assert_func>
 801cb2c:	f100 0514 	add.w	r5, r0, #20
 801cb30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cb34:	462b      	mov	r3, r5
 801cb36:	2200      	movs	r2, #0
 801cb38:	4543      	cmp	r3, r8
 801cb3a:	d321      	bcc.n	801cb80 <__multiply+0x98>
 801cb3c:	f104 0314 	add.w	r3, r4, #20
 801cb40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cb44:	f109 0314 	add.w	r3, r9, #20
 801cb48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cb4c:	9202      	str	r2, [sp, #8]
 801cb4e:	1b3a      	subs	r2, r7, r4
 801cb50:	3a15      	subs	r2, #21
 801cb52:	f022 0203 	bic.w	r2, r2, #3
 801cb56:	3204      	adds	r2, #4
 801cb58:	f104 0115 	add.w	r1, r4, #21
 801cb5c:	428f      	cmp	r7, r1
 801cb5e:	bf38      	it	cc
 801cb60:	2204      	movcc	r2, #4
 801cb62:	9201      	str	r2, [sp, #4]
 801cb64:	9a02      	ldr	r2, [sp, #8]
 801cb66:	9303      	str	r3, [sp, #12]
 801cb68:	429a      	cmp	r2, r3
 801cb6a:	d80c      	bhi.n	801cb86 <__multiply+0x9e>
 801cb6c:	2e00      	cmp	r6, #0
 801cb6e:	dd03      	ble.n	801cb78 <__multiply+0x90>
 801cb70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	d05a      	beq.n	801cc2e <__multiply+0x146>
 801cb78:	6106      	str	r6, [r0, #16]
 801cb7a:	b005      	add	sp, #20
 801cb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb80:	f843 2b04 	str.w	r2, [r3], #4
 801cb84:	e7d8      	b.n	801cb38 <__multiply+0x50>
 801cb86:	f8b3 a000 	ldrh.w	sl, [r3]
 801cb8a:	f1ba 0f00 	cmp.w	sl, #0
 801cb8e:	d024      	beq.n	801cbda <__multiply+0xf2>
 801cb90:	f104 0e14 	add.w	lr, r4, #20
 801cb94:	46a9      	mov	r9, r5
 801cb96:	f04f 0c00 	mov.w	ip, #0
 801cb9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801cb9e:	f8d9 1000 	ldr.w	r1, [r9]
 801cba2:	fa1f fb82 	uxth.w	fp, r2
 801cba6:	b289      	uxth	r1, r1
 801cba8:	fb0a 110b 	mla	r1, sl, fp, r1
 801cbac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801cbb0:	f8d9 2000 	ldr.w	r2, [r9]
 801cbb4:	4461      	add	r1, ip
 801cbb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cbba:	fb0a c20b 	mla	r2, sl, fp, ip
 801cbbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cbc2:	b289      	uxth	r1, r1
 801cbc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801cbc8:	4577      	cmp	r7, lr
 801cbca:	f849 1b04 	str.w	r1, [r9], #4
 801cbce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cbd2:	d8e2      	bhi.n	801cb9a <__multiply+0xb2>
 801cbd4:	9a01      	ldr	r2, [sp, #4]
 801cbd6:	f845 c002 	str.w	ip, [r5, r2]
 801cbda:	9a03      	ldr	r2, [sp, #12]
 801cbdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801cbe0:	3304      	adds	r3, #4
 801cbe2:	f1b9 0f00 	cmp.w	r9, #0
 801cbe6:	d020      	beq.n	801cc2a <__multiply+0x142>
 801cbe8:	6829      	ldr	r1, [r5, #0]
 801cbea:	f104 0c14 	add.w	ip, r4, #20
 801cbee:	46ae      	mov	lr, r5
 801cbf0:	f04f 0a00 	mov.w	sl, #0
 801cbf4:	f8bc b000 	ldrh.w	fp, [ip]
 801cbf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801cbfc:	fb09 220b 	mla	r2, r9, fp, r2
 801cc00:	4492      	add	sl, r2
 801cc02:	b289      	uxth	r1, r1
 801cc04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801cc08:	f84e 1b04 	str.w	r1, [lr], #4
 801cc0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 801cc10:	f8be 1000 	ldrh.w	r1, [lr]
 801cc14:	0c12      	lsrs	r2, r2, #16
 801cc16:	fb09 1102 	mla	r1, r9, r2, r1
 801cc1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801cc1e:	4567      	cmp	r7, ip
 801cc20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801cc24:	d8e6      	bhi.n	801cbf4 <__multiply+0x10c>
 801cc26:	9a01      	ldr	r2, [sp, #4]
 801cc28:	50a9      	str	r1, [r5, r2]
 801cc2a:	3504      	adds	r5, #4
 801cc2c:	e79a      	b.n	801cb64 <__multiply+0x7c>
 801cc2e:	3e01      	subs	r6, #1
 801cc30:	e79c      	b.n	801cb6c <__multiply+0x84>
 801cc32:	bf00      	nop
 801cc34:	08025660 	.word	0x08025660
 801cc38:	080256ec 	.word	0x080256ec

0801cc3c <__pow5mult>:
 801cc3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc40:	4615      	mov	r5, r2
 801cc42:	f012 0203 	ands.w	r2, r2, #3
 801cc46:	4606      	mov	r6, r0
 801cc48:	460f      	mov	r7, r1
 801cc4a:	d007      	beq.n	801cc5c <__pow5mult+0x20>
 801cc4c:	4c25      	ldr	r4, [pc, #148]	; (801cce4 <__pow5mult+0xa8>)
 801cc4e:	3a01      	subs	r2, #1
 801cc50:	2300      	movs	r3, #0
 801cc52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cc56:	f7ff fe51 	bl	801c8fc <__multadd>
 801cc5a:	4607      	mov	r7, r0
 801cc5c:	10ad      	asrs	r5, r5, #2
 801cc5e:	d03d      	beq.n	801ccdc <__pow5mult+0xa0>
 801cc60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cc62:	b97c      	cbnz	r4, 801cc84 <__pow5mult+0x48>
 801cc64:	2010      	movs	r0, #16
 801cc66:	f7ff fdcd 	bl	801c804 <malloc>
 801cc6a:	4602      	mov	r2, r0
 801cc6c:	6270      	str	r0, [r6, #36]	; 0x24
 801cc6e:	b928      	cbnz	r0, 801cc7c <__pow5mult+0x40>
 801cc70:	4b1d      	ldr	r3, [pc, #116]	; (801cce8 <__pow5mult+0xac>)
 801cc72:	481e      	ldr	r0, [pc, #120]	; (801ccec <__pow5mult+0xb0>)
 801cc74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801cc78:	f000 fd2c 	bl	801d6d4 <__assert_func>
 801cc7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cc80:	6004      	str	r4, [r0, #0]
 801cc82:	60c4      	str	r4, [r0, #12]
 801cc84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cc88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cc8c:	b94c      	cbnz	r4, 801cca2 <__pow5mult+0x66>
 801cc8e:	f240 2171 	movw	r1, #625	; 0x271
 801cc92:	4630      	mov	r0, r6
 801cc94:	f7ff ff12 	bl	801cabc <__i2b>
 801cc98:	2300      	movs	r3, #0
 801cc9a:	f8c8 0008 	str.w	r0, [r8, #8]
 801cc9e:	4604      	mov	r4, r0
 801cca0:	6003      	str	r3, [r0, #0]
 801cca2:	f04f 0900 	mov.w	r9, #0
 801cca6:	07eb      	lsls	r3, r5, #31
 801cca8:	d50a      	bpl.n	801ccc0 <__pow5mult+0x84>
 801ccaa:	4639      	mov	r1, r7
 801ccac:	4622      	mov	r2, r4
 801ccae:	4630      	mov	r0, r6
 801ccb0:	f7ff ff1a 	bl	801cae8 <__multiply>
 801ccb4:	4639      	mov	r1, r7
 801ccb6:	4680      	mov	r8, r0
 801ccb8:	4630      	mov	r0, r6
 801ccba:	f7ff fdfd 	bl	801c8b8 <_Bfree>
 801ccbe:	4647      	mov	r7, r8
 801ccc0:	106d      	asrs	r5, r5, #1
 801ccc2:	d00b      	beq.n	801ccdc <__pow5mult+0xa0>
 801ccc4:	6820      	ldr	r0, [r4, #0]
 801ccc6:	b938      	cbnz	r0, 801ccd8 <__pow5mult+0x9c>
 801ccc8:	4622      	mov	r2, r4
 801ccca:	4621      	mov	r1, r4
 801cccc:	4630      	mov	r0, r6
 801ccce:	f7ff ff0b 	bl	801cae8 <__multiply>
 801ccd2:	6020      	str	r0, [r4, #0]
 801ccd4:	f8c0 9000 	str.w	r9, [r0]
 801ccd8:	4604      	mov	r4, r0
 801ccda:	e7e4      	b.n	801cca6 <__pow5mult+0x6a>
 801ccdc:	4638      	mov	r0, r7
 801ccde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cce2:	bf00      	nop
 801cce4:	08025838 	.word	0x08025838
 801cce8:	080255ee 	.word	0x080255ee
 801ccec:	080256ec 	.word	0x080256ec

0801ccf0 <__lshift>:
 801ccf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ccf4:	460c      	mov	r4, r1
 801ccf6:	6849      	ldr	r1, [r1, #4]
 801ccf8:	6923      	ldr	r3, [r4, #16]
 801ccfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ccfe:	68a3      	ldr	r3, [r4, #8]
 801cd00:	4607      	mov	r7, r0
 801cd02:	4691      	mov	r9, r2
 801cd04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cd08:	f108 0601 	add.w	r6, r8, #1
 801cd0c:	42b3      	cmp	r3, r6
 801cd0e:	db0b      	blt.n	801cd28 <__lshift+0x38>
 801cd10:	4638      	mov	r0, r7
 801cd12:	f7ff fd91 	bl	801c838 <_Balloc>
 801cd16:	4605      	mov	r5, r0
 801cd18:	b948      	cbnz	r0, 801cd2e <__lshift+0x3e>
 801cd1a:	4602      	mov	r2, r0
 801cd1c:	4b2a      	ldr	r3, [pc, #168]	; (801cdc8 <__lshift+0xd8>)
 801cd1e:	482b      	ldr	r0, [pc, #172]	; (801cdcc <__lshift+0xdc>)
 801cd20:	f240 11d9 	movw	r1, #473	; 0x1d9
 801cd24:	f000 fcd6 	bl	801d6d4 <__assert_func>
 801cd28:	3101      	adds	r1, #1
 801cd2a:	005b      	lsls	r3, r3, #1
 801cd2c:	e7ee      	b.n	801cd0c <__lshift+0x1c>
 801cd2e:	2300      	movs	r3, #0
 801cd30:	f100 0114 	add.w	r1, r0, #20
 801cd34:	f100 0210 	add.w	r2, r0, #16
 801cd38:	4618      	mov	r0, r3
 801cd3a:	4553      	cmp	r3, sl
 801cd3c:	db37      	blt.n	801cdae <__lshift+0xbe>
 801cd3e:	6920      	ldr	r0, [r4, #16]
 801cd40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cd44:	f104 0314 	add.w	r3, r4, #20
 801cd48:	f019 091f 	ands.w	r9, r9, #31
 801cd4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cd50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801cd54:	d02f      	beq.n	801cdb6 <__lshift+0xc6>
 801cd56:	f1c9 0e20 	rsb	lr, r9, #32
 801cd5a:	468a      	mov	sl, r1
 801cd5c:	f04f 0c00 	mov.w	ip, #0
 801cd60:	681a      	ldr	r2, [r3, #0]
 801cd62:	fa02 f209 	lsl.w	r2, r2, r9
 801cd66:	ea42 020c 	orr.w	r2, r2, ip
 801cd6a:	f84a 2b04 	str.w	r2, [sl], #4
 801cd6e:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd72:	4298      	cmp	r0, r3
 801cd74:	fa22 fc0e 	lsr.w	ip, r2, lr
 801cd78:	d8f2      	bhi.n	801cd60 <__lshift+0x70>
 801cd7a:	1b03      	subs	r3, r0, r4
 801cd7c:	3b15      	subs	r3, #21
 801cd7e:	f023 0303 	bic.w	r3, r3, #3
 801cd82:	3304      	adds	r3, #4
 801cd84:	f104 0215 	add.w	r2, r4, #21
 801cd88:	4290      	cmp	r0, r2
 801cd8a:	bf38      	it	cc
 801cd8c:	2304      	movcc	r3, #4
 801cd8e:	f841 c003 	str.w	ip, [r1, r3]
 801cd92:	f1bc 0f00 	cmp.w	ip, #0
 801cd96:	d001      	beq.n	801cd9c <__lshift+0xac>
 801cd98:	f108 0602 	add.w	r6, r8, #2
 801cd9c:	3e01      	subs	r6, #1
 801cd9e:	4638      	mov	r0, r7
 801cda0:	612e      	str	r6, [r5, #16]
 801cda2:	4621      	mov	r1, r4
 801cda4:	f7ff fd88 	bl	801c8b8 <_Bfree>
 801cda8:	4628      	mov	r0, r5
 801cdaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cdae:	f842 0f04 	str.w	r0, [r2, #4]!
 801cdb2:	3301      	adds	r3, #1
 801cdb4:	e7c1      	b.n	801cd3a <__lshift+0x4a>
 801cdb6:	3904      	subs	r1, #4
 801cdb8:	f853 2b04 	ldr.w	r2, [r3], #4
 801cdbc:	f841 2f04 	str.w	r2, [r1, #4]!
 801cdc0:	4298      	cmp	r0, r3
 801cdc2:	d8f9      	bhi.n	801cdb8 <__lshift+0xc8>
 801cdc4:	e7ea      	b.n	801cd9c <__lshift+0xac>
 801cdc6:	bf00      	nop
 801cdc8:	08025660 	.word	0x08025660
 801cdcc:	080256ec 	.word	0x080256ec

0801cdd0 <__mcmp>:
 801cdd0:	b530      	push	{r4, r5, lr}
 801cdd2:	6902      	ldr	r2, [r0, #16]
 801cdd4:	690c      	ldr	r4, [r1, #16]
 801cdd6:	1b12      	subs	r2, r2, r4
 801cdd8:	d10e      	bne.n	801cdf8 <__mcmp+0x28>
 801cdda:	f100 0314 	add.w	r3, r0, #20
 801cdde:	3114      	adds	r1, #20
 801cde0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801cde4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801cde8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801cdec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801cdf0:	42a5      	cmp	r5, r4
 801cdf2:	d003      	beq.n	801cdfc <__mcmp+0x2c>
 801cdf4:	d305      	bcc.n	801ce02 <__mcmp+0x32>
 801cdf6:	2201      	movs	r2, #1
 801cdf8:	4610      	mov	r0, r2
 801cdfa:	bd30      	pop	{r4, r5, pc}
 801cdfc:	4283      	cmp	r3, r0
 801cdfe:	d3f3      	bcc.n	801cde8 <__mcmp+0x18>
 801ce00:	e7fa      	b.n	801cdf8 <__mcmp+0x28>
 801ce02:	f04f 32ff 	mov.w	r2, #4294967295
 801ce06:	e7f7      	b.n	801cdf8 <__mcmp+0x28>

0801ce08 <__mdiff>:
 801ce08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce0c:	460c      	mov	r4, r1
 801ce0e:	4606      	mov	r6, r0
 801ce10:	4611      	mov	r1, r2
 801ce12:	4620      	mov	r0, r4
 801ce14:	4690      	mov	r8, r2
 801ce16:	f7ff ffdb 	bl	801cdd0 <__mcmp>
 801ce1a:	1e05      	subs	r5, r0, #0
 801ce1c:	d110      	bne.n	801ce40 <__mdiff+0x38>
 801ce1e:	4629      	mov	r1, r5
 801ce20:	4630      	mov	r0, r6
 801ce22:	f7ff fd09 	bl	801c838 <_Balloc>
 801ce26:	b930      	cbnz	r0, 801ce36 <__mdiff+0x2e>
 801ce28:	4b3a      	ldr	r3, [pc, #232]	; (801cf14 <__mdiff+0x10c>)
 801ce2a:	4602      	mov	r2, r0
 801ce2c:	f240 2132 	movw	r1, #562	; 0x232
 801ce30:	4839      	ldr	r0, [pc, #228]	; (801cf18 <__mdiff+0x110>)
 801ce32:	f000 fc4f 	bl	801d6d4 <__assert_func>
 801ce36:	2301      	movs	r3, #1
 801ce38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ce3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce40:	bfa4      	itt	ge
 801ce42:	4643      	movge	r3, r8
 801ce44:	46a0      	movge	r8, r4
 801ce46:	4630      	mov	r0, r6
 801ce48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ce4c:	bfa6      	itte	ge
 801ce4e:	461c      	movge	r4, r3
 801ce50:	2500      	movge	r5, #0
 801ce52:	2501      	movlt	r5, #1
 801ce54:	f7ff fcf0 	bl	801c838 <_Balloc>
 801ce58:	b920      	cbnz	r0, 801ce64 <__mdiff+0x5c>
 801ce5a:	4b2e      	ldr	r3, [pc, #184]	; (801cf14 <__mdiff+0x10c>)
 801ce5c:	4602      	mov	r2, r0
 801ce5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 801ce62:	e7e5      	b.n	801ce30 <__mdiff+0x28>
 801ce64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ce68:	6926      	ldr	r6, [r4, #16]
 801ce6a:	60c5      	str	r5, [r0, #12]
 801ce6c:	f104 0914 	add.w	r9, r4, #20
 801ce70:	f108 0514 	add.w	r5, r8, #20
 801ce74:	f100 0e14 	add.w	lr, r0, #20
 801ce78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801ce7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801ce80:	f108 0210 	add.w	r2, r8, #16
 801ce84:	46f2      	mov	sl, lr
 801ce86:	2100      	movs	r1, #0
 801ce88:	f859 3b04 	ldr.w	r3, [r9], #4
 801ce8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ce90:	fa1f f883 	uxth.w	r8, r3
 801ce94:	fa11 f18b 	uxtah	r1, r1, fp
 801ce98:	0c1b      	lsrs	r3, r3, #16
 801ce9a:	eba1 0808 	sub.w	r8, r1, r8
 801ce9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801cea2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801cea6:	fa1f f888 	uxth.w	r8, r8
 801ceaa:	1419      	asrs	r1, r3, #16
 801ceac:	454e      	cmp	r6, r9
 801ceae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ceb2:	f84a 3b04 	str.w	r3, [sl], #4
 801ceb6:	d8e7      	bhi.n	801ce88 <__mdiff+0x80>
 801ceb8:	1b33      	subs	r3, r6, r4
 801ceba:	3b15      	subs	r3, #21
 801cebc:	f023 0303 	bic.w	r3, r3, #3
 801cec0:	3304      	adds	r3, #4
 801cec2:	3415      	adds	r4, #21
 801cec4:	42a6      	cmp	r6, r4
 801cec6:	bf38      	it	cc
 801cec8:	2304      	movcc	r3, #4
 801ceca:	441d      	add	r5, r3
 801cecc:	4473      	add	r3, lr
 801cece:	469e      	mov	lr, r3
 801ced0:	462e      	mov	r6, r5
 801ced2:	4566      	cmp	r6, ip
 801ced4:	d30e      	bcc.n	801cef4 <__mdiff+0xec>
 801ced6:	f10c 0203 	add.w	r2, ip, #3
 801ceda:	1b52      	subs	r2, r2, r5
 801cedc:	f022 0203 	bic.w	r2, r2, #3
 801cee0:	3d03      	subs	r5, #3
 801cee2:	45ac      	cmp	ip, r5
 801cee4:	bf38      	it	cc
 801cee6:	2200      	movcc	r2, #0
 801cee8:	441a      	add	r2, r3
 801ceea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ceee:	b17b      	cbz	r3, 801cf10 <__mdiff+0x108>
 801cef0:	6107      	str	r7, [r0, #16]
 801cef2:	e7a3      	b.n	801ce3c <__mdiff+0x34>
 801cef4:	f856 8b04 	ldr.w	r8, [r6], #4
 801cef8:	fa11 f288 	uxtah	r2, r1, r8
 801cefc:	1414      	asrs	r4, r2, #16
 801cefe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801cf02:	b292      	uxth	r2, r2
 801cf04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801cf08:	f84e 2b04 	str.w	r2, [lr], #4
 801cf0c:	1421      	asrs	r1, r4, #16
 801cf0e:	e7e0      	b.n	801ced2 <__mdiff+0xca>
 801cf10:	3f01      	subs	r7, #1
 801cf12:	e7ea      	b.n	801ceea <__mdiff+0xe2>
 801cf14:	08025660 	.word	0x08025660
 801cf18:	080256ec 	.word	0x080256ec

0801cf1c <__ulp>:
 801cf1c:	b082      	sub	sp, #8
 801cf1e:	ed8d 0b00 	vstr	d0, [sp]
 801cf22:	9b01      	ldr	r3, [sp, #4]
 801cf24:	4912      	ldr	r1, [pc, #72]	; (801cf70 <__ulp+0x54>)
 801cf26:	4019      	ands	r1, r3
 801cf28:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801cf2c:	2900      	cmp	r1, #0
 801cf2e:	dd05      	ble.n	801cf3c <__ulp+0x20>
 801cf30:	2200      	movs	r2, #0
 801cf32:	460b      	mov	r3, r1
 801cf34:	ec43 2b10 	vmov	d0, r2, r3
 801cf38:	b002      	add	sp, #8
 801cf3a:	4770      	bx	lr
 801cf3c:	4249      	negs	r1, r1
 801cf3e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801cf42:	ea4f 5021 	mov.w	r0, r1, asr #20
 801cf46:	f04f 0200 	mov.w	r2, #0
 801cf4a:	f04f 0300 	mov.w	r3, #0
 801cf4e:	da04      	bge.n	801cf5a <__ulp+0x3e>
 801cf50:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801cf54:	fa41 f300 	asr.w	r3, r1, r0
 801cf58:	e7ec      	b.n	801cf34 <__ulp+0x18>
 801cf5a:	f1a0 0114 	sub.w	r1, r0, #20
 801cf5e:	291e      	cmp	r1, #30
 801cf60:	bfda      	itte	le
 801cf62:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801cf66:	fa20 f101 	lsrle.w	r1, r0, r1
 801cf6a:	2101      	movgt	r1, #1
 801cf6c:	460a      	mov	r2, r1
 801cf6e:	e7e1      	b.n	801cf34 <__ulp+0x18>
 801cf70:	7ff00000 	.word	0x7ff00000

0801cf74 <__b2d>:
 801cf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf76:	6905      	ldr	r5, [r0, #16]
 801cf78:	f100 0714 	add.w	r7, r0, #20
 801cf7c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801cf80:	1f2e      	subs	r6, r5, #4
 801cf82:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801cf86:	4620      	mov	r0, r4
 801cf88:	f7ff fd48 	bl	801ca1c <__hi0bits>
 801cf8c:	f1c0 0320 	rsb	r3, r0, #32
 801cf90:	280a      	cmp	r0, #10
 801cf92:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801d010 <__b2d+0x9c>
 801cf96:	600b      	str	r3, [r1, #0]
 801cf98:	dc14      	bgt.n	801cfc4 <__b2d+0x50>
 801cf9a:	f1c0 0e0b 	rsb	lr, r0, #11
 801cf9e:	fa24 f10e 	lsr.w	r1, r4, lr
 801cfa2:	42b7      	cmp	r7, r6
 801cfa4:	ea41 030c 	orr.w	r3, r1, ip
 801cfa8:	bf34      	ite	cc
 801cfaa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cfae:	2100      	movcs	r1, #0
 801cfb0:	3015      	adds	r0, #21
 801cfb2:	fa04 f000 	lsl.w	r0, r4, r0
 801cfb6:	fa21 f10e 	lsr.w	r1, r1, lr
 801cfba:	ea40 0201 	orr.w	r2, r0, r1
 801cfbe:	ec43 2b10 	vmov	d0, r2, r3
 801cfc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfc4:	42b7      	cmp	r7, r6
 801cfc6:	bf3a      	itte	cc
 801cfc8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cfcc:	f1a5 0608 	subcc.w	r6, r5, #8
 801cfd0:	2100      	movcs	r1, #0
 801cfd2:	380b      	subs	r0, #11
 801cfd4:	d017      	beq.n	801d006 <__b2d+0x92>
 801cfd6:	f1c0 0c20 	rsb	ip, r0, #32
 801cfda:	fa04 f500 	lsl.w	r5, r4, r0
 801cfde:	42be      	cmp	r6, r7
 801cfe0:	fa21 f40c 	lsr.w	r4, r1, ip
 801cfe4:	ea45 0504 	orr.w	r5, r5, r4
 801cfe8:	bf8c      	ite	hi
 801cfea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801cfee:	2400      	movls	r4, #0
 801cff0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801cff4:	fa01 f000 	lsl.w	r0, r1, r0
 801cff8:	fa24 f40c 	lsr.w	r4, r4, ip
 801cffc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d000:	ea40 0204 	orr.w	r2, r0, r4
 801d004:	e7db      	b.n	801cfbe <__b2d+0x4a>
 801d006:	ea44 030c 	orr.w	r3, r4, ip
 801d00a:	460a      	mov	r2, r1
 801d00c:	e7d7      	b.n	801cfbe <__b2d+0x4a>
 801d00e:	bf00      	nop
 801d010:	3ff00000 	.word	0x3ff00000

0801d014 <__d2b>:
 801d014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d018:	4689      	mov	r9, r1
 801d01a:	2101      	movs	r1, #1
 801d01c:	ec57 6b10 	vmov	r6, r7, d0
 801d020:	4690      	mov	r8, r2
 801d022:	f7ff fc09 	bl	801c838 <_Balloc>
 801d026:	4604      	mov	r4, r0
 801d028:	b930      	cbnz	r0, 801d038 <__d2b+0x24>
 801d02a:	4602      	mov	r2, r0
 801d02c:	4b25      	ldr	r3, [pc, #148]	; (801d0c4 <__d2b+0xb0>)
 801d02e:	4826      	ldr	r0, [pc, #152]	; (801d0c8 <__d2b+0xb4>)
 801d030:	f240 310a 	movw	r1, #778	; 0x30a
 801d034:	f000 fb4e 	bl	801d6d4 <__assert_func>
 801d038:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d03c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d040:	bb35      	cbnz	r5, 801d090 <__d2b+0x7c>
 801d042:	2e00      	cmp	r6, #0
 801d044:	9301      	str	r3, [sp, #4]
 801d046:	d028      	beq.n	801d09a <__d2b+0x86>
 801d048:	4668      	mov	r0, sp
 801d04a:	9600      	str	r6, [sp, #0]
 801d04c:	f7ff fd06 	bl	801ca5c <__lo0bits>
 801d050:	9900      	ldr	r1, [sp, #0]
 801d052:	b300      	cbz	r0, 801d096 <__d2b+0x82>
 801d054:	9a01      	ldr	r2, [sp, #4]
 801d056:	f1c0 0320 	rsb	r3, r0, #32
 801d05a:	fa02 f303 	lsl.w	r3, r2, r3
 801d05e:	430b      	orrs	r3, r1
 801d060:	40c2      	lsrs	r2, r0
 801d062:	6163      	str	r3, [r4, #20]
 801d064:	9201      	str	r2, [sp, #4]
 801d066:	9b01      	ldr	r3, [sp, #4]
 801d068:	61a3      	str	r3, [r4, #24]
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	bf14      	ite	ne
 801d06e:	2202      	movne	r2, #2
 801d070:	2201      	moveq	r2, #1
 801d072:	6122      	str	r2, [r4, #16]
 801d074:	b1d5      	cbz	r5, 801d0ac <__d2b+0x98>
 801d076:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d07a:	4405      	add	r5, r0
 801d07c:	f8c9 5000 	str.w	r5, [r9]
 801d080:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d084:	f8c8 0000 	str.w	r0, [r8]
 801d088:	4620      	mov	r0, r4
 801d08a:	b003      	add	sp, #12
 801d08c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d094:	e7d5      	b.n	801d042 <__d2b+0x2e>
 801d096:	6161      	str	r1, [r4, #20]
 801d098:	e7e5      	b.n	801d066 <__d2b+0x52>
 801d09a:	a801      	add	r0, sp, #4
 801d09c:	f7ff fcde 	bl	801ca5c <__lo0bits>
 801d0a0:	9b01      	ldr	r3, [sp, #4]
 801d0a2:	6163      	str	r3, [r4, #20]
 801d0a4:	2201      	movs	r2, #1
 801d0a6:	6122      	str	r2, [r4, #16]
 801d0a8:	3020      	adds	r0, #32
 801d0aa:	e7e3      	b.n	801d074 <__d2b+0x60>
 801d0ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d0b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d0b4:	f8c9 0000 	str.w	r0, [r9]
 801d0b8:	6918      	ldr	r0, [r3, #16]
 801d0ba:	f7ff fcaf 	bl	801ca1c <__hi0bits>
 801d0be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d0c2:	e7df      	b.n	801d084 <__d2b+0x70>
 801d0c4:	08025660 	.word	0x08025660
 801d0c8:	080256ec 	.word	0x080256ec

0801d0cc <__ratio>:
 801d0cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0d0:	4688      	mov	r8, r1
 801d0d2:	4669      	mov	r1, sp
 801d0d4:	4681      	mov	r9, r0
 801d0d6:	f7ff ff4d 	bl	801cf74 <__b2d>
 801d0da:	a901      	add	r1, sp, #4
 801d0dc:	4640      	mov	r0, r8
 801d0de:	ec55 4b10 	vmov	r4, r5, d0
 801d0e2:	f7ff ff47 	bl	801cf74 <__b2d>
 801d0e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d0ea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d0ee:	eba3 0c02 	sub.w	ip, r3, r2
 801d0f2:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d0f6:	1a9b      	subs	r3, r3, r2
 801d0f8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d0fc:	ec51 0b10 	vmov	r0, r1, d0
 801d100:	2b00      	cmp	r3, #0
 801d102:	bfd6      	itet	le
 801d104:	460a      	movle	r2, r1
 801d106:	462a      	movgt	r2, r5
 801d108:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d10c:	468b      	mov	fp, r1
 801d10e:	462f      	mov	r7, r5
 801d110:	bfd4      	ite	le
 801d112:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d116:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d11a:	4620      	mov	r0, r4
 801d11c:	ee10 2a10 	vmov	r2, s0
 801d120:	465b      	mov	r3, fp
 801d122:	4639      	mov	r1, r7
 801d124:	f7e3 fbaa 	bl	800087c <__aeabi_ddiv>
 801d128:	ec41 0b10 	vmov	d0, r0, r1
 801d12c:	b003      	add	sp, #12
 801d12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d132 <__copybits>:
 801d132:	3901      	subs	r1, #1
 801d134:	b570      	push	{r4, r5, r6, lr}
 801d136:	1149      	asrs	r1, r1, #5
 801d138:	6914      	ldr	r4, [r2, #16]
 801d13a:	3101      	adds	r1, #1
 801d13c:	f102 0314 	add.w	r3, r2, #20
 801d140:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d144:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d148:	1f05      	subs	r5, r0, #4
 801d14a:	42a3      	cmp	r3, r4
 801d14c:	d30c      	bcc.n	801d168 <__copybits+0x36>
 801d14e:	1aa3      	subs	r3, r4, r2
 801d150:	3b11      	subs	r3, #17
 801d152:	f023 0303 	bic.w	r3, r3, #3
 801d156:	3211      	adds	r2, #17
 801d158:	42a2      	cmp	r2, r4
 801d15a:	bf88      	it	hi
 801d15c:	2300      	movhi	r3, #0
 801d15e:	4418      	add	r0, r3
 801d160:	2300      	movs	r3, #0
 801d162:	4288      	cmp	r0, r1
 801d164:	d305      	bcc.n	801d172 <__copybits+0x40>
 801d166:	bd70      	pop	{r4, r5, r6, pc}
 801d168:	f853 6b04 	ldr.w	r6, [r3], #4
 801d16c:	f845 6f04 	str.w	r6, [r5, #4]!
 801d170:	e7eb      	b.n	801d14a <__copybits+0x18>
 801d172:	f840 3b04 	str.w	r3, [r0], #4
 801d176:	e7f4      	b.n	801d162 <__copybits+0x30>

0801d178 <__any_on>:
 801d178:	f100 0214 	add.w	r2, r0, #20
 801d17c:	6900      	ldr	r0, [r0, #16]
 801d17e:	114b      	asrs	r3, r1, #5
 801d180:	4298      	cmp	r0, r3
 801d182:	b510      	push	{r4, lr}
 801d184:	db11      	blt.n	801d1aa <__any_on+0x32>
 801d186:	dd0a      	ble.n	801d19e <__any_on+0x26>
 801d188:	f011 011f 	ands.w	r1, r1, #31
 801d18c:	d007      	beq.n	801d19e <__any_on+0x26>
 801d18e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d192:	fa24 f001 	lsr.w	r0, r4, r1
 801d196:	fa00 f101 	lsl.w	r1, r0, r1
 801d19a:	428c      	cmp	r4, r1
 801d19c:	d10b      	bne.n	801d1b6 <__any_on+0x3e>
 801d19e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d1a2:	4293      	cmp	r3, r2
 801d1a4:	d803      	bhi.n	801d1ae <__any_on+0x36>
 801d1a6:	2000      	movs	r0, #0
 801d1a8:	bd10      	pop	{r4, pc}
 801d1aa:	4603      	mov	r3, r0
 801d1ac:	e7f7      	b.n	801d19e <__any_on+0x26>
 801d1ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d1b2:	2900      	cmp	r1, #0
 801d1b4:	d0f5      	beq.n	801d1a2 <__any_on+0x2a>
 801d1b6:	2001      	movs	r0, #1
 801d1b8:	e7f6      	b.n	801d1a8 <__any_on+0x30>

0801d1ba <_calloc_r>:
 801d1ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d1bc:	fba1 2402 	umull	r2, r4, r1, r2
 801d1c0:	b94c      	cbnz	r4, 801d1d6 <_calloc_r+0x1c>
 801d1c2:	4611      	mov	r1, r2
 801d1c4:	9201      	str	r2, [sp, #4]
 801d1c6:	f000 f87b 	bl	801d2c0 <_malloc_r>
 801d1ca:	9a01      	ldr	r2, [sp, #4]
 801d1cc:	4605      	mov	r5, r0
 801d1ce:	b930      	cbnz	r0, 801d1de <_calloc_r+0x24>
 801d1d0:	4628      	mov	r0, r5
 801d1d2:	b003      	add	sp, #12
 801d1d4:	bd30      	pop	{r4, r5, pc}
 801d1d6:	220c      	movs	r2, #12
 801d1d8:	6002      	str	r2, [r0, #0]
 801d1da:	2500      	movs	r5, #0
 801d1dc:	e7f8      	b.n	801d1d0 <_calloc_r+0x16>
 801d1de:	4621      	mov	r1, r4
 801d1e0:	f7fc fbce 	bl	8019980 <memset>
 801d1e4:	e7f4      	b.n	801d1d0 <_calloc_r+0x16>
	...

0801d1e8 <_free_r>:
 801d1e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d1ea:	2900      	cmp	r1, #0
 801d1ec:	d044      	beq.n	801d278 <_free_r+0x90>
 801d1ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d1f2:	9001      	str	r0, [sp, #4]
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	f1a1 0404 	sub.w	r4, r1, #4
 801d1fa:	bfb8      	it	lt
 801d1fc:	18e4      	addlt	r4, r4, r3
 801d1fe:	f000 fab3 	bl	801d768 <__malloc_lock>
 801d202:	4a1e      	ldr	r2, [pc, #120]	; (801d27c <_free_r+0x94>)
 801d204:	9801      	ldr	r0, [sp, #4]
 801d206:	6813      	ldr	r3, [r2, #0]
 801d208:	b933      	cbnz	r3, 801d218 <_free_r+0x30>
 801d20a:	6063      	str	r3, [r4, #4]
 801d20c:	6014      	str	r4, [r2, #0]
 801d20e:	b003      	add	sp, #12
 801d210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d214:	f000 baae 	b.w	801d774 <__malloc_unlock>
 801d218:	42a3      	cmp	r3, r4
 801d21a:	d908      	bls.n	801d22e <_free_r+0x46>
 801d21c:	6825      	ldr	r5, [r4, #0]
 801d21e:	1961      	adds	r1, r4, r5
 801d220:	428b      	cmp	r3, r1
 801d222:	bf01      	itttt	eq
 801d224:	6819      	ldreq	r1, [r3, #0]
 801d226:	685b      	ldreq	r3, [r3, #4]
 801d228:	1949      	addeq	r1, r1, r5
 801d22a:	6021      	streq	r1, [r4, #0]
 801d22c:	e7ed      	b.n	801d20a <_free_r+0x22>
 801d22e:	461a      	mov	r2, r3
 801d230:	685b      	ldr	r3, [r3, #4]
 801d232:	b10b      	cbz	r3, 801d238 <_free_r+0x50>
 801d234:	42a3      	cmp	r3, r4
 801d236:	d9fa      	bls.n	801d22e <_free_r+0x46>
 801d238:	6811      	ldr	r1, [r2, #0]
 801d23a:	1855      	adds	r5, r2, r1
 801d23c:	42a5      	cmp	r5, r4
 801d23e:	d10b      	bne.n	801d258 <_free_r+0x70>
 801d240:	6824      	ldr	r4, [r4, #0]
 801d242:	4421      	add	r1, r4
 801d244:	1854      	adds	r4, r2, r1
 801d246:	42a3      	cmp	r3, r4
 801d248:	6011      	str	r1, [r2, #0]
 801d24a:	d1e0      	bne.n	801d20e <_free_r+0x26>
 801d24c:	681c      	ldr	r4, [r3, #0]
 801d24e:	685b      	ldr	r3, [r3, #4]
 801d250:	6053      	str	r3, [r2, #4]
 801d252:	4421      	add	r1, r4
 801d254:	6011      	str	r1, [r2, #0]
 801d256:	e7da      	b.n	801d20e <_free_r+0x26>
 801d258:	d902      	bls.n	801d260 <_free_r+0x78>
 801d25a:	230c      	movs	r3, #12
 801d25c:	6003      	str	r3, [r0, #0]
 801d25e:	e7d6      	b.n	801d20e <_free_r+0x26>
 801d260:	6825      	ldr	r5, [r4, #0]
 801d262:	1961      	adds	r1, r4, r5
 801d264:	428b      	cmp	r3, r1
 801d266:	bf04      	itt	eq
 801d268:	6819      	ldreq	r1, [r3, #0]
 801d26a:	685b      	ldreq	r3, [r3, #4]
 801d26c:	6063      	str	r3, [r4, #4]
 801d26e:	bf04      	itt	eq
 801d270:	1949      	addeq	r1, r1, r5
 801d272:	6021      	streq	r1, [r4, #0]
 801d274:	6054      	str	r4, [r2, #4]
 801d276:	e7ca      	b.n	801d20e <_free_r+0x26>
 801d278:	b003      	add	sp, #12
 801d27a:	bd30      	pop	{r4, r5, pc}
 801d27c:	200373f8 	.word	0x200373f8

0801d280 <sbrk_aligned>:
 801d280:	b570      	push	{r4, r5, r6, lr}
 801d282:	4e0e      	ldr	r6, [pc, #56]	; (801d2bc <sbrk_aligned+0x3c>)
 801d284:	460c      	mov	r4, r1
 801d286:	6831      	ldr	r1, [r6, #0]
 801d288:	4605      	mov	r5, r0
 801d28a:	b911      	cbnz	r1, 801d292 <sbrk_aligned+0x12>
 801d28c:	f000 f9f0 	bl	801d670 <_sbrk_r>
 801d290:	6030      	str	r0, [r6, #0]
 801d292:	4621      	mov	r1, r4
 801d294:	4628      	mov	r0, r5
 801d296:	f000 f9eb 	bl	801d670 <_sbrk_r>
 801d29a:	1c43      	adds	r3, r0, #1
 801d29c:	d00a      	beq.n	801d2b4 <sbrk_aligned+0x34>
 801d29e:	1cc4      	adds	r4, r0, #3
 801d2a0:	f024 0403 	bic.w	r4, r4, #3
 801d2a4:	42a0      	cmp	r0, r4
 801d2a6:	d007      	beq.n	801d2b8 <sbrk_aligned+0x38>
 801d2a8:	1a21      	subs	r1, r4, r0
 801d2aa:	4628      	mov	r0, r5
 801d2ac:	f000 f9e0 	bl	801d670 <_sbrk_r>
 801d2b0:	3001      	adds	r0, #1
 801d2b2:	d101      	bne.n	801d2b8 <sbrk_aligned+0x38>
 801d2b4:	f04f 34ff 	mov.w	r4, #4294967295
 801d2b8:	4620      	mov	r0, r4
 801d2ba:	bd70      	pop	{r4, r5, r6, pc}
 801d2bc:	200373fc 	.word	0x200373fc

0801d2c0 <_malloc_r>:
 801d2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2c4:	1ccd      	adds	r5, r1, #3
 801d2c6:	f025 0503 	bic.w	r5, r5, #3
 801d2ca:	3508      	adds	r5, #8
 801d2cc:	2d0c      	cmp	r5, #12
 801d2ce:	bf38      	it	cc
 801d2d0:	250c      	movcc	r5, #12
 801d2d2:	2d00      	cmp	r5, #0
 801d2d4:	4607      	mov	r7, r0
 801d2d6:	db01      	blt.n	801d2dc <_malloc_r+0x1c>
 801d2d8:	42a9      	cmp	r1, r5
 801d2da:	d905      	bls.n	801d2e8 <_malloc_r+0x28>
 801d2dc:	230c      	movs	r3, #12
 801d2de:	603b      	str	r3, [r7, #0]
 801d2e0:	2600      	movs	r6, #0
 801d2e2:	4630      	mov	r0, r6
 801d2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2e8:	4e2e      	ldr	r6, [pc, #184]	; (801d3a4 <_malloc_r+0xe4>)
 801d2ea:	f000 fa3d 	bl	801d768 <__malloc_lock>
 801d2ee:	6833      	ldr	r3, [r6, #0]
 801d2f0:	461c      	mov	r4, r3
 801d2f2:	bb34      	cbnz	r4, 801d342 <_malloc_r+0x82>
 801d2f4:	4629      	mov	r1, r5
 801d2f6:	4638      	mov	r0, r7
 801d2f8:	f7ff ffc2 	bl	801d280 <sbrk_aligned>
 801d2fc:	1c43      	adds	r3, r0, #1
 801d2fe:	4604      	mov	r4, r0
 801d300:	d14d      	bne.n	801d39e <_malloc_r+0xde>
 801d302:	6834      	ldr	r4, [r6, #0]
 801d304:	4626      	mov	r6, r4
 801d306:	2e00      	cmp	r6, #0
 801d308:	d140      	bne.n	801d38c <_malloc_r+0xcc>
 801d30a:	6823      	ldr	r3, [r4, #0]
 801d30c:	4631      	mov	r1, r6
 801d30e:	4638      	mov	r0, r7
 801d310:	eb04 0803 	add.w	r8, r4, r3
 801d314:	f000 f9ac 	bl	801d670 <_sbrk_r>
 801d318:	4580      	cmp	r8, r0
 801d31a:	d13a      	bne.n	801d392 <_malloc_r+0xd2>
 801d31c:	6821      	ldr	r1, [r4, #0]
 801d31e:	3503      	adds	r5, #3
 801d320:	1a6d      	subs	r5, r5, r1
 801d322:	f025 0503 	bic.w	r5, r5, #3
 801d326:	3508      	adds	r5, #8
 801d328:	2d0c      	cmp	r5, #12
 801d32a:	bf38      	it	cc
 801d32c:	250c      	movcc	r5, #12
 801d32e:	4629      	mov	r1, r5
 801d330:	4638      	mov	r0, r7
 801d332:	f7ff ffa5 	bl	801d280 <sbrk_aligned>
 801d336:	3001      	adds	r0, #1
 801d338:	d02b      	beq.n	801d392 <_malloc_r+0xd2>
 801d33a:	6823      	ldr	r3, [r4, #0]
 801d33c:	442b      	add	r3, r5
 801d33e:	6023      	str	r3, [r4, #0]
 801d340:	e00e      	b.n	801d360 <_malloc_r+0xa0>
 801d342:	6822      	ldr	r2, [r4, #0]
 801d344:	1b52      	subs	r2, r2, r5
 801d346:	d41e      	bmi.n	801d386 <_malloc_r+0xc6>
 801d348:	2a0b      	cmp	r2, #11
 801d34a:	d916      	bls.n	801d37a <_malloc_r+0xba>
 801d34c:	1961      	adds	r1, r4, r5
 801d34e:	42a3      	cmp	r3, r4
 801d350:	6025      	str	r5, [r4, #0]
 801d352:	bf18      	it	ne
 801d354:	6059      	strne	r1, [r3, #4]
 801d356:	6863      	ldr	r3, [r4, #4]
 801d358:	bf08      	it	eq
 801d35a:	6031      	streq	r1, [r6, #0]
 801d35c:	5162      	str	r2, [r4, r5]
 801d35e:	604b      	str	r3, [r1, #4]
 801d360:	4638      	mov	r0, r7
 801d362:	f104 060b 	add.w	r6, r4, #11
 801d366:	f000 fa05 	bl	801d774 <__malloc_unlock>
 801d36a:	f026 0607 	bic.w	r6, r6, #7
 801d36e:	1d23      	adds	r3, r4, #4
 801d370:	1af2      	subs	r2, r6, r3
 801d372:	d0b6      	beq.n	801d2e2 <_malloc_r+0x22>
 801d374:	1b9b      	subs	r3, r3, r6
 801d376:	50a3      	str	r3, [r4, r2]
 801d378:	e7b3      	b.n	801d2e2 <_malloc_r+0x22>
 801d37a:	6862      	ldr	r2, [r4, #4]
 801d37c:	42a3      	cmp	r3, r4
 801d37e:	bf0c      	ite	eq
 801d380:	6032      	streq	r2, [r6, #0]
 801d382:	605a      	strne	r2, [r3, #4]
 801d384:	e7ec      	b.n	801d360 <_malloc_r+0xa0>
 801d386:	4623      	mov	r3, r4
 801d388:	6864      	ldr	r4, [r4, #4]
 801d38a:	e7b2      	b.n	801d2f2 <_malloc_r+0x32>
 801d38c:	4634      	mov	r4, r6
 801d38e:	6876      	ldr	r6, [r6, #4]
 801d390:	e7b9      	b.n	801d306 <_malloc_r+0x46>
 801d392:	230c      	movs	r3, #12
 801d394:	603b      	str	r3, [r7, #0]
 801d396:	4638      	mov	r0, r7
 801d398:	f000 f9ec 	bl	801d774 <__malloc_unlock>
 801d39c:	e7a1      	b.n	801d2e2 <_malloc_r+0x22>
 801d39e:	6025      	str	r5, [r4, #0]
 801d3a0:	e7de      	b.n	801d360 <_malloc_r+0xa0>
 801d3a2:	bf00      	nop
 801d3a4:	200373f8 	.word	0x200373f8

0801d3a8 <__ssputs_r>:
 801d3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d3ac:	688e      	ldr	r6, [r1, #8]
 801d3ae:	429e      	cmp	r6, r3
 801d3b0:	4682      	mov	sl, r0
 801d3b2:	460c      	mov	r4, r1
 801d3b4:	4690      	mov	r8, r2
 801d3b6:	461f      	mov	r7, r3
 801d3b8:	d838      	bhi.n	801d42c <__ssputs_r+0x84>
 801d3ba:	898a      	ldrh	r2, [r1, #12]
 801d3bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d3c0:	d032      	beq.n	801d428 <__ssputs_r+0x80>
 801d3c2:	6825      	ldr	r5, [r4, #0]
 801d3c4:	6909      	ldr	r1, [r1, #16]
 801d3c6:	eba5 0901 	sub.w	r9, r5, r1
 801d3ca:	6965      	ldr	r5, [r4, #20]
 801d3cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d3d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d3d4:	3301      	adds	r3, #1
 801d3d6:	444b      	add	r3, r9
 801d3d8:	106d      	asrs	r5, r5, #1
 801d3da:	429d      	cmp	r5, r3
 801d3dc:	bf38      	it	cc
 801d3de:	461d      	movcc	r5, r3
 801d3e0:	0553      	lsls	r3, r2, #21
 801d3e2:	d531      	bpl.n	801d448 <__ssputs_r+0xa0>
 801d3e4:	4629      	mov	r1, r5
 801d3e6:	f7ff ff6b 	bl	801d2c0 <_malloc_r>
 801d3ea:	4606      	mov	r6, r0
 801d3ec:	b950      	cbnz	r0, 801d404 <__ssputs_r+0x5c>
 801d3ee:	230c      	movs	r3, #12
 801d3f0:	f8ca 3000 	str.w	r3, [sl]
 801d3f4:	89a3      	ldrh	r3, [r4, #12]
 801d3f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d3fa:	81a3      	strh	r3, [r4, #12]
 801d3fc:	f04f 30ff 	mov.w	r0, #4294967295
 801d400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d404:	6921      	ldr	r1, [r4, #16]
 801d406:	464a      	mov	r2, r9
 801d408:	f7fc faac 	bl	8019964 <memcpy>
 801d40c:	89a3      	ldrh	r3, [r4, #12]
 801d40e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d416:	81a3      	strh	r3, [r4, #12]
 801d418:	6126      	str	r6, [r4, #16]
 801d41a:	6165      	str	r5, [r4, #20]
 801d41c:	444e      	add	r6, r9
 801d41e:	eba5 0509 	sub.w	r5, r5, r9
 801d422:	6026      	str	r6, [r4, #0]
 801d424:	60a5      	str	r5, [r4, #8]
 801d426:	463e      	mov	r6, r7
 801d428:	42be      	cmp	r6, r7
 801d42a:	d900      	bls.n	801d42e <__ssputs_r+0x86>
 801d42c:	463e      	mov	r6, r7
 801d42e:	6820      	ldr	r0, [r4, #0]
 801d430:	4632      	mov	r2, r6
 801d432:	4641      	mov	r1, r8
 801d434:	f000 f97e 	bl	801d734 <memmove>
 801d438:	68a3      	ldr	r3, [r4, #8]
 801d43a:	1b9b      	subs	r3, r3, r6
 801d43c:	60a3      	str	r3, [r4, #8]
 801d43e:	6823      	ldr	r3, [r4, #0]
 801d440:	4433      	add	r3, r6
 801d442:	6023      	str	r3, [r4, #0]
 801d444:	2000      	movs	r0, #0
 801d446:	e7db      	b.n	801d400 <__ssputs_r+0x58>
 801d448:	462a      	mov	r2, r5
 801d44a:	f000 f999 	bl	801d780 <_realloc_r>
 801d44e:	4606      	mov	r6, r0
 801d450:	2800      	cmp	r0, #0
 801d452:	d1e1      	bne.n	801d418 <__ssputs_r+0x70>
 801d454:	6921      	ldr	r1, [r4, #16]
 801d456:	4650      	mov	r0, sl
 801d458:	f7ff fec6 	bl	801d1e8 <_free_r>
 801d45c:	e7c7      	b.n	801d3ee <__ssputs_r+0x46>
	...

0801d460 <_svfiprintf_r>:
 801d460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d464:	4698      	mov	r8, r3
 801d466:	898b      	ldrh	r3, [r1, #12]
 801d468:	061b      	lsls	r3, r3, #24
 801d46a:	b09d      	sub	sp, #116	; 0x74
 801d46c:	4607      	mov	r7, r0
 801d46e:	460d      	mov	r5, r1
 801d470:	4614      	mov	r4, r2
 801d472:	d50e      	bpl.n	801d492 <_svfiprintf_r+0x32>
 801d474:	690b      	ldr	r3, [r1, #16]
 801d476:	b963      	cbnz	r3, 801d492 <_svfiprintf_r+0x32>
 801d478:	2140      	movs	r1, #64	; 0x40
 801d47a:	f7ff ff21 	bl	801d2c0 <_malloc_r>
 801d47e:	6028      	str	r0, [r5, #0]
 801d480:	6128      	str	r0, [r5, #16]
 801d482:	b920      	cbnz	r0, 801d48e <_svfiprintf_r+0x2e>
 801d484:	230c      	movs	r3, #12
 801d486:	603b      	str	r3, [r7, #0]
 801d488:	f04f 30ff 	mov.w	r0, #4294967295
 801d48c:	e0d1      	b.n	801d632 <_svfiprintf_r+0x1d2>
 801d48e:	2340      	movs	r3, #64	; 0x40
 801d490:	616b      	str	r3, [r5, #20]
 801d492:	2300      	movs	r3, #0
 801d494:	9309      	str	r3, [sp, #36]	; 0x24
 801d496:	2320      	movs	r3, #32
 801d498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d49c:	f8cd 800c 	str.w	r8, [sp, #12]
 801d4a0:	2330      	movs	r3, #48	; 0x30
 801d4a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d64c <_svfiprintf_r+0x1ec>
 801d4a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d4aa:	f04f 0901 	mov.w	r9, #1
 801d4ae:	4623      	mov	r3, r4
 801d4b0:	469a      	mov	sl, r3
 801d4b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4b6:	b10a      	cbz	r2, 801d4bc <_svfiprintf_r+0x5c>
 801d4b8:	2a25      	cmp	r2, #37	; 0x25
 801d4ba:	d1f9      	bne.n	801d4b0 <_svfiprintf_r+0x50>
 801d4bc:	ebba 0b04 	subs.w	fp, sl, r4
 801d4c0:	d00b      	beq.n	801d4da <_svfiprintf_r+0x7a>
 801d4c2:	465b      	mov	r3, fp
 801d4c4:	4622      	mov	r2, r4
 801d4c6:	4629      	mov	r1, r5
 801d4c8:	4638      	mov	r0, r7
 801d4ca:	f7ff ff6d 	bl	801d3a8 <__ssputs_r>
 801d4ce:	3001      	adds	r0, #1
 801d4d0:	f000 80aa 	beq.w	801d628 <_svfiprintf_r+0x1c8>
 801d4d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d4d6:	445a      	add	r2, fp
 801d4d8:	9209      	str	r2, [sp, #36]	; 0x24
 801d4da:	f89a 3000 	ldrb.w	r3, [sl]
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	f000 80a2 	beq.w	801d628 <_svfiprintf_r+0x1c8>
 801d4e4:	2300      	movs	r3, #0
 801d4e6:	f04f 32ff 	mov.w	r2, #4294967295
 801d4ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d4ee:	f10a 0a01 	add.w	sl, sl, #1
 801d4f2:	9304      	str	r3, [sp, #16]
 801d4f4:	9307      	str	r3, [sp, #28]
 801d4f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d4fa:	931a      	str	r3, [sp, #104]	; 0x68
 801d4fc:	4654      	mov	r4, sl
 801d4fe:	2205      	movs	r2, #5
 801d500:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d504:	4851      	ldr	r0, [pc, #324]	; (801d64c <_svfiprintf_r+0x1ec>)
 801d506:	f7e2 fe83 	bl	8000210 <memchr>
 801d50a:	9a04      	ldr	r2, [sp, #16]
 801d50c:	b9d8      	cbnz	r0, 801d546 <_svfiprintf_r+0xe6>
 801d50e:	06d0      	lsls	r0, r2, #27
 801d510:	bf44      	itt	mi
 801d512:	2320      	movmi	r3, #32
 801d514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d518:	0711      	lsls	r1, r2, #28
 801d51a:	bf44      	itt	mi
 801d51c:	232b      	movmi	r3, #43	; 0x2b
 801d51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d522:	f89a 3000 	ldrb.w	r3, [sl]
 801d526:	2b2a      	cmp	r3, #42	; 0x2a
 801d528:	d015      	beq.n	801d556 <_svfiprintf_r+0xf6>
 801d52a:	9a07      	ldr	r2, [sp, #28]
 801d52c:	4654      	mov	r4, sl
 801d52e:	2000      	movs	r0, #0
 801d530:	f04f 0c0a 	mov.w	ip, #10
 801d534:	4621      	mov	r1, r4
 801d536:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d53a:	3b30      	subs	r3, #48	; 0x30
 801d53c:	2b09      	cmp	r3, #9
 801d53e:	d94e      	bls.n	801d5de <_svfiprintf_r+0x17e>
 801d540:	b1b0      	cbz	r0, 801d570 <_svfiprintf_r+0x110>
 801d542:	9207      	str	r2, [sp, #28]
 801d544:	e014      	b.n	801d570 <_svfiprintf_r+0x110>
 801d546:	eba0 0308 	sub.w	r3, r0, r8
 801d54a:	fa09 f303 	lsl.w	r3, r9, r3
 801d54e:	4313      	orrs	r3, r2
 801d550:	9304      	str	r3, [sp, #16]
 801d552:	46a2      	mov	sl, r4
 801d554:	e7d2      	b.n	801d4fc <_svfiprintf_r+0x9c>
 801d556:	9b03      	ldr	r3, [sp, #12]
 801d558:	1d19      	adds	r1, r3, #4
 801d55a:	681b      	ldr	r3, [r3, #0]
 801d55c:	9103      	str	r1, [sp, #12]
 801d55e:	2b00      	cmp	r3, #0
 801d560:	bfbb      	ittet	lt
 801d562:	425b      	neglt	r3, r3
 801d564:	f042 0202 	orrlt.w	r2, r2, #2
 801d568:	9307      	strge	r3, [sp, #28]
 801d56a:	9307      	strlt	r3, [sp, #28]
 801d56c:	bfb8      	it	lt
 801d56e:	9204      	strlt	r2, [sp, #16]
 801d570:	7823      	ldrb	r3, [r4, #0]
 801d572:	2b2e      	cmp	r3, #46	; 0x2e
 801d574:	d10c      	bne.n	801d590 <_svfiprintf_r+0x130>
 801d576:	7863      	ldrb	r3, [r4, #1]
 801d578:	2b2a      	cmp	r3, #42	; 0x2a
 801d57a:	d135      	bne.n	801d5e8 <_svfiprintf_r+0x188>
 801d57c:	9b03      	ldr	r3, [sp, #12]
 801d57e:	1d1a      	adds	r2, r3, #4
 801d580:	681b      	ldr	r3, [r3, #0]
 801d582:	9203      	str	r2, [sp, #12]
 801d584:	2b00      	cmp	r3, #0
 801d586:	bfb8      	it	lt
 801d588:	f04f 33ff 	movlt.w	r3, #4294967295
 801d58c:	3402      	adds	r4, #2
 801d58e:	9305      	str	r3, [sp, #20]
 801d590:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d65c <_svfiprintf_r+0x1fc>
 801d594:	7821      	ldrb	r1, [r4, #0]
 801d596:	2203      	movs	r2, #3
 801d598:	4650      	mov	r0, sl
 801d59a:	f7e2 fe39 	bl	8000210 <memchr>
 801d59e:	b140      	cbz	r0, 801d5b2 <_svfiprintf_r+0x152>
 801d5a0:	2340      	movs	r3, #64	; 0x40
 801d5a2:	eba0 000a 	sub.w	r0, r0, sl
 801d5a6:	fa03 f000 	lsl.w	r0, r3, r0
 801d5aa:	9b04      	ldr	r3, [sp, #16]
 801d5ac:	4303      	orrs	r3, r0
 801d5ae:	3401      	adds	r4, #1
 801d5b0:	9304      	str	r3, [sp, #16]
 801d5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d5b6:	4826      	ldr	r0, [pc, #152]	; (801d650 <_svfiprintf_r+0x1f0>)
 801d5b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d5bc:	2206      	movs	r2, #6
 801d5be:	f7e2 fe27 	bl	8000210 <memchr>
 801d5c2:	2800      	cmp	r0, #0
 801d5c4:	d038      	beq.n	801d638 <_svfiprintf_r+0x1d8>
 801d5c6:	4b23      	ldr	r3, [pc, #140]	; (801d654 <_svfiprintf_r+0x1f4>)
 801d5c8:	bb1b      	cbnz	r3, 801d612 <_svfiprintf_r+0x1b2>
 801d5ca:	9b03      	ldr	r3, [sp, #12]
 801d5cc:	3307      	adds	r3, #7
 801d5ce:	f023 0307 	bic.w	r3, r3, #7
 801d5d2:	3308      	adds	r3, #8
 801d5d4:	9303      	str	r3, [sp, #12]
 801d5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5d8:	4433      	add	r3, r6
 801d5da:	9309      	str	r3, [sp, #36]	; 0x24
 801d5dc:	e767      	b.n	801d4ae <_svfiprintf_r+0x4e>
 801d5de:	fb0c 3202 	mla	r2, ip, r2, r3
 801d5e2:	460c      	mov	r4, r1
 801d5e4:	2001      	movs	r0, #1
 801d5e6:	e7a5      	b.n	801d534 <_svfiprintf_r+0xd4>
 801d5e8:	2300      	movs	r3, #0
 801d5ea:	3401      	adds	r4, #1
 801d5ec:	9305      	str	r3, [sp, #20]
 801d5ee:	4619      	mov	r1, r3
 801d5f0:	f04f 0c0a 	mov.w	ip, #10
 801d5f4:	4620      	mov	r0, r4
 801d5f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d5fa:	3a30      	subs	r2, #48	; 0x30
 801d5fc:	2a09      	cmp	r2, #9
 801d5fe:	d903      	bls.n	801d608 <_svfiprintf_r+0x1a8>
 801d600:	2b00      	cmp	r3, #0
 801d602:	d0c5      	beq.n	801d590 <_svfiprintf_r+0x130>
 801d604:	9105      	str	r1, [sp, #20]
 801d606:	e7c3      	b.n	801d590 <_svfiprintf_r+0x130>
 801d608:	fb0c 2101 	mla	r1, ip, r1, r2
 801d60c:	4604      	mov	r4, r0
 801d60e:	2301      	movs	r3, #1
 801d610:	e7f0      	b.n	801d5f4 <_svfiprintf_r+0x194>
 801d612:	ab03      	add	r3, sp, #12
 801d614:	9300      	str	r3, [sp, #0]
 801d616:	462a      	mov	r2, r5
 801d618:	4b0f      	ldr	r3, [pc, #60]	; (801d658 <_svfiprintf_r+0x1f8>)
 801d61a:	a904      	add	r1, sp, #16
 801d61c:	4638      	mov	r0, r7
 801d61e:	f7fc fa57 	bl	8019ad0 <_printf_float>
 801d622:	1c42      	adds	r2, r0, #1
 801d624:	4606      	mov	r6, r0
 801d626:	d1d6      	bne.n	801d5d6 <_svfiprintf_r+0x176>
 801d628:	89ab      	ldrh	r3, [r5, #12]
 801d62a:	065b      	lsls	r3, r3, #25
 801d62c:	f53f af2c 	bmi.w	801d488 <_svfiprintf_r+0x28>
 801d630:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d632:	b01d      	add	sp, #116	; 0x74
 801d634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d638:	ab03      	add	r3, sp, #12
 801d63a:	9300      	str	r3, [sp, #0]
 801d63c:	462a      	mov	r2, r5
 801d63e:	4b06      	ldr	r3, [pc, #24]	; (801d658 <_svfiprintf_r+0x1f8>)
 801d640:	a904      	add	r1, sp, #16
 801d642:	4638      	mov	r0, r7
 801d644:	f7fc fce8 	bl	801a018 <_printf_i>
 801d648:	e7eb      	b.n	801d622 <_svfiprintf_r+0x1c2>
 801d64a:	bf00      	nop
 801d64c:	08025844 	.word	0x08025844
 801d650:	0802584e 	.word	0x0802584e
 801d654:	08019ad1 	.word	0x08019ad1
 801d658:	0801d3a9 	.word	0x0801d3a9
 801d65c:	0802584a 	.word	0x0802584a

0801d660 <nan>:
 801d660:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d668 <nan+0x8>
 801d664:	4770      	bx	lr
 801d666:	bf00      	nop
 801d668:	00000000 	.word	0x00000000
 801d66c:	7ff80000 	.word	0x7ff80000

0801d670 <_sbrk_r>:
 801d670:	b538      	push	{r3, r4, r5, lr}
 801d672:	4d06      	ldr	r5, [pc, #24]	; (801d68c <_sbrk_r+0x1c>)
 801d674:	2300      	movs	r3, #0
 801d676:	4604      	mov	r4, r0
 801d678:	4608      	mov	r0, r1
 801d67a:	602b      	str	r3, [r5, #0]
 801d67c:	f7f0 f9ca 	bl	800da14 <_sbrk>
 801d680:	1c43      	adds	r3, r0, #1
 801d682:	d102      	bne.n	801d68a <_sbrk_r+0x1a>
 801d684:	682b      	ldr	r3, [r5, #0]
 801d686:	b103      	cbz	r3, 801d68a <_sbrk_r+0x1a>
 801d688:	6023      	str	r3, [r4, #0]
 801d68a:	bd38      	pop	{r3, r4, r5, pc}
 801d68c:	20037400 	.word	0x20037400

0801d690 <strncmp>:
 801d690:	b510      	push	{r4, lr}
 801d692:	b17a      	cbz	r2, 801d6b4 <strncmp+0x24>
 801d694:	4603      	mov	r3, r0
 801d696:	3901      	subs	r1, #1
 801d698:	1884      	adds	r4, r0, r2
 801d69a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d69e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d6a2:	4290      	cmp	r0, r2
 801d6a4:	d101      	bne.n	801d6aa <strncmp+0x1a>
 801d6a6:	42a3      	cmp	r3, r4
 801d6a8:	d101      	bne.n	801d6ae <strncmp+0x1e>
 801d6aa:	1a80      	subs	r0, r0, r2
 801d6ac:	bd10      	pop	{r4, pc}
 801d6ae:	2800      	cmp	r0, #0
 801d6b0:	d1f3      	bne.n	801d69a <strncmp+0xa>
 801d6b2:	e7fa      	b.n	801d6aa <strncmp+0x1a>
 801d6b4:	4610      	mov	r0, r2
 801d6b6:	e7f9      	b.n	801d6ac <strncmp+0x1c>

0801d6b8 <__ascii_wctomb>:
 801d6b8:	b149      	cbz	r1, 801d6ce <__ascii_wctomb+0x16>
 801d6ba:	2aff      	cmp	r2, #255	; 0xff
 801d6bc:	bf85      	ittet	hi
 801d6be:	238a      	movhi	r3, #138	; 0x8a
 801d6c0:	6003      	strhi	r3, [r0, #0]
 801d6c2:	700a      	strbls	r2, [r1, #0]
 801d6c4:	f04f 30ff 	movhi.w	r0, #4294967295
 801d6c8:	bf98      	it	ls
 801d6ca:	2001      	movls	r0, #1
 801d6cc:	4770      	bx	lr
 801d6ce:	4608      	mov	r0, r1
 801d6d0:	4770      	bx	lr
	...

0801d6d4 <__assert_func>:
 801d6d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d6d6:	4614      	mov	r4, r2
 801d6d8:	461a      	mov	r2, r3
 801d6da:	4b09      	ldr	r3, [pc, #36]	; (801d700 <__assert_func+0x2c>)
 801d6dc:	681b      	ldr	r3, [r3, #0]
 801d6de:	4605      	mov	r5, r0
 801d6e0:	68d8      	ldr	r0, [r3, #12]
 801d6e2:	b14c      	cbz	r4, 801d6f8 <__assert_func+0x24>
 801d6e4:	4b07      	ldr	r3, [pc, #28]	; (801d704 <__assert_func+0x30>)
 801d6e6:	9100      	str	r1, [sp, #0]
 801d6e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d6ec:	4906      	ldr	r1, [pc, #24]	; (801d708 <__assert_func+0x34>)
 801d6ee:	462b      	mov	r3, r5
 801d6f0:	f000 f80e 	bl	801d710 <fiprintf>
 801d6f4:	f000 fa8c 	bl	801dc10 <abort>
 801d6f8:	4b04      	ldr	r3, [pc, #16]	; (801d70c <__assert_func+0x38>)
 801d6fa:	461c      	mov	r4, r3
 801d6fc:	e7f3      	b.n	801d6e6 <__assert_func+0x12>
 801d6fe:	bf00      	nop
 801d700:	200000a4 	.word	0x200000a4
 801d704:	08025855 	.word	0x08025855
 801d708:	08025862 	.word	0x08025862
 801d70c:	08025890 	.word	0x08025890

0801d710 <fiprintf>:
 801d710:	b40e      	push	{r1, r2, r3}
 801d712:	b503      	push	{r0, r1, lr}
 801d714:	4601      	mov	r1, r0
 801d716:	ab03      	add	r3, sp, #12
 801d718:	4805      	ldr	r0, [pc, #20]	; (801d730 <fiprintf+0x20>)
 801d71a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d71e:	6800      	ldr	r0, [r0, #0]
 801d720:	9301      	str	r3, [sp, #4]
 801d722:	f000 f885 	bl	801d830 <_vfiprintf_r>
 801d726:	b002      	add	sp, #8
 801d728:	f85d eb04 	ldr.w	lr, [sp], #4
 801d72c:	b003      	add	sp, #12
 801d72e:	4770      	bx	lr
 801d730:	200000a4 	.word	0x200000a4

0801d734 <memmove>:
 801d734:	4288      	cmp	r0, r1
 801d736:	b510      	push	{r4, lr}
 801d738:	eb01 0402 	add.w	r4, r1, r2
 801d73c:	d902      	bls.n	801d744 <memmove+0x10>
 801d73e:	4284      	cmp	r4, r0
 801d740:	4623      	mov	r3, r4
 801d742:	d807      	bhi.n	801d754 <memmove+0x20>
 801d744:	1e43      	subs	r3, r0, #1
 801d746:	42a1      	cmp	r1, r4
 801d748:	d008      	beq.n	801d75c <memmove+0x28>
 801d74a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d74e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d752:	e7f8      	b.n	801d746 <memmove+0x12>
 801d754:	4402      	add	r2, r0
 801d756:	4601      	mov	r1, r0
 801d758:	428a      	cmp	r2, r1
 801d75a:	d100      	bne.n	801d75e <memmove+0x2a>
 801d75c:	bd10      	pop	{r4, pc}
 801d75e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d766:	e7f7      	b.n	801d758 <memmove+0x24>

0801d768 <__malloc_lock>:
 801d768:	4801      	ldr	r0, [pc, #4]	; (801d770 <__malloc_lock+0x8>)
 801d76a:	f000 bc11 	b.w	801df90 <__retarget_lock_acquire_recursive>
 801d76e:	bf00      	nop
 801d770:	20037404 	.word	0x20037404

0801d774 <__malloc_unlock>:
 801d774:	4801      	ldr	r0, [pc, #4]	; (801d77c <__malloc_unlock+0x8>)
 801d776:	f000 bc0c 	b.w	801df92 <__retarget_lock_release_recursive>
 801d77a:	bf00      	nop
 801d77c:	20037404 	.word	0x20037404

0801d780 <_realloc_r>:
 801d780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d784:	4680      	mov	r8, r0
 801d786:	4614      	mov	r4, r2
 801d788:	460e      	mov	r6, r1
 801d78a:	b921      	cbnz	r1, 801d796 <_realloc_r+0x16>
 801d78c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d790:	4611      	mov	r1, r2
 801d792:	f7ff bd95 	b.w	801d2c0 <_malloc_r>
 801d796:	b92a      	cbnz	r2, 801d7a4 <_realloc_r+0x24>
 801d798:	f7ff fd26 	bl	801d1e8 <_free_r>
 801d79c:	4625      	mov	r5, r4
 801d79e:	4628      	mov	r0, r5
 801d7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7a4:	f000 fc5c 	bl	801e060 <_malloc_usable_size_r>
 801d7a8:	4284      	cmp	r4, r0
 801d7aa:	4607      	mov	r7, r0
 801d7ac:	d802      	bhi.n	801d7b4 <_realloc_r+0x34>
 801d7ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d7b2:	d812      	bhi.n	801d7da <_realloc_r+0x5a>
 801d7b4:	4621      	mov	r1, r4
 801d7b6:	4640      	mov	r0, r8
 801d7b8:	f7ff fd82 	bl	801d2c0 <_malloc_r>
 801d7bc:	4605      	mov	r5, r0
 801d7be:	2800      	cmp	r0, #0
 801d7c0:	d0ed      	beq.n	801d79e <_realloc_r+0x1e>
 801d7c2:	42bc      	cmp	r4, r7
 801d7c4:	4622      	mov	r2, r4
 801d7c6:	4631      	mov	r1, r6
 801d7c8:	bf28      	it	cs
 801d7ca:	463a      	movcs	r2, r7
 801d7cc:	f7fc f8ca 	bl	8019964 <memcpy>
 801d7d0:	4631      	mov	r1, r6
 801d7d2:	4640      	mov	r0, r8
 801d7d4:	f7ff fd08 	bl	801d1e8 <_free_r>
 801d7d8:	e7e1      	b.n	801d79e <_realloc_r+0x1e>
 801d7da:	4635      	mov	r5, r6
 801d7dc:	e7df      	b.n	801d79e <_realloc_r+0x1e>

0801d7de <__sfputc_r>:
 801d7de:	6893      	ldr	r3, [r2, #8]
 801d7e0:	3b01      	subs	r3, #1
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	b410      	push	{r4}
 801d7e6:	6093      	str	r3, [r2, #8]
 801d7e8:	da08      	bge.n	801d7fc <__sfputc_r+0x1e>
 801d7ea:	6994      	ldr	r4, [r2, #24]
 801d7ec:	42a3      	cmp	r3, r4
 801d7ee:	db01      	blt.n	801d7f4 <__sfputc_r+0x16>
 801d7f0:	290a      	cmp	r1, #10
 801d7f2:	d103      	bne.n	801d7fc <__sfputc_r+0x1e>
 801d7f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7f8:	f000 b94a 	b.w	801da90 <__swbuf_r>
 801d7fc:	6813      	ldr	r3, [r2, #0]
 801d7fe:	1c58      	adds	r0, r3, #1
 801d800:	6010      	str	r0, [r2, #0]
 801d802:	7019      	strb	r1, [r3, #0]
 801d804:	4608      	mov	r0, r1
 801d806:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d80a:	4770      	bx	lr

0801d80c <__sfputs_r>:
 801d80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d80e:	4606      	mov	r6, r0
 801d810:	460f      	mov	r7, r1
 801d812:	4614      	mov	r4, r2
 801d814:	18d5      	adds	r5, r2, r3
 801d816:	42ac      	cmp	r4, r5
 801d818:	d101      	bne.n	801d81e <__sfputs_r+0x12>
 801d81a:	2000      	movs	r0, #0
 801d81c:	e007      	b.n	801d82e <__sfputs_r+0x22>
 801d81e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d822:	463a      	mov	r2, r7
 801d824:	4630      	mov	r0, r6
 801d826:	f7ff ffda 	bl	801d7de <__sfputc_r>
 801d82a:	1c43      	adds	r3, r0, #1
 801d82c:	d1f3      	bne.n	801d816 <__sfputs_r+0xa>
 801d82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d830 <_vfiprintf_r>:
 801d830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d834:	460d      	mov	r5, r1
 801d836:	b09d      	sub	sp, #116	; 0x74
 801d838:	4614      	mov	r4, r2
 801d83a:	4698      	mov	r8, r3
 801d83c:	4606      	mov	r6, r0
 801d83e:	b118      	cbz	r0, 801d848 <_vfiprintf_r+0x18>
 801d840:	6983      	ldr	r3, [r0, #24]
 801d842:	b90b      	cbnz	r3, 801d848 <_vfiprintf_r+0x18>
 801d844:	f000 fb06 	bl	801de54 <__sinit>
 801d848:	4b89      	ldr	r3, [pc, #548]	; (801da70 <_vfiprintf_r+0x240>)
 801d84a:	429d      	cmp	r5, r3
 801d84c:	d11b      	bne.n	801d886 <_vfiprintf_r+0x56>
 801d84e:	6875      	ldr	r5, [r6, #4]
 801d850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d852:	07d9      	lsls	r1, r3, #31
 801d854:	d405      	bmi.n	801d862 <_vfiprintf_r+0x32>
 801d856:	89ab      	ldrh	r3, [r5, #12]
 801d858:	059a      	lsls	r2, r3, #22
 801d85a:	d402      	bmi.n	801d862 <_vfiprintf_r+0x32>
 801d85c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d85e:	f000 fb97 	bl	801df90 <__retarget_lock_acquire_recursive>
 801d862:	89ab      	ldrh	r3, [r5, #12]
 801d864:	071b      	lsls	r3, r3, #28
 801d866:	d501      	bpl.n	801d86c <_vfiprintf_r+0x3c>
 801d868:	692b      	ldr	r3, [r5, #16]
 801d86a:	b9eb      	cbnz	r3, 801d8a8 <_vfiprintf_r+0x78>
 801d86c:	4629      	mov	r1, r5
 801d86e:	4630      	mov	r0, r6
 801d870:	f000 f960 	bl	801db34 <__swsetup_r>
 801d874:	b1c0      	cbz	r0, 801d8a8 <_vfiprintf_r+0x78>
 801d876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d878:	07dc      	lsls	r4, r3, #31
 801d87a:	d50e      	bpl.n	801d89a <_vfiprintf_r+0x6a>
 801d87c:	f04f 30ff 	mov.w	r0, #4294967295
 801d880:	b01d      	add	sp, #116	; 0x74
 801d882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d886:	4b7b      	ldr	r3, [pc, #492]	; (801da74 <_vfiprintf_r+0x244>)
 801d888:	429d      	cmp	r5, r3
 801d88a:	d101      	bne.n	801d890 <_vfiprintf_r+0x60>
 801d88c:	68b5      	ldr	r5, [r6, #8]
 801d88e:	e7df      	b.n	801d850 <_vfiprintf_r+0x20>
 801d890:	4b79      	ldr	r3, [pc, #484]	; (801da78 <_vfiprintf_r+0x248>)
 801d892:	429d      	cmp	r5, r3
 801d894:	bf08      	it	eq
 801d896:	68f5      	ldreq	r5, [r6, #12]
 801d898:	e7da      	b.n	801d850 <_vfiprintf_r+0x20>
 801d89a:	89ab      	ldrh	r3, [r5, #12]
 801d89c:	0598      	lsls	r0, r3, #22
 801d89e:	d4ed      	bmi.n	801d87c <_vfiprintf_r+0x4c>
 801d8a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d8a2:	f000 fb76 	bl	801df92 <__retarget_lock_release_recursive>
 801d8a6:	e7e9      	b.n	801d87c <_vfiprintf_r+0x4c>
 801d8a8:	2300      	movs	r3, #0
 801d8aa:	9309      	str	r3, [sp, #36]	; 0x24
 801d8ac:	2320      	movs	r3, #32
 801d8ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d8b2:	f8cd 800c 	str.w	r8, [sp, #12]
 801d8b6:	2330      	movs	r3, #48	; 0x30
 801d8b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801da7c <_vfiprintf_r+0x24c>
 801d8bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d8c0:	f04f 0901 	mov.w	r9, #1
 801d8c4:	4623      	mov	r3, r4
 801d8c6:	469a      	mov	sl, r3
 801d8c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d8cc:	b10a      	cbz	r2, 801d8d2 <_vfiprintf_r+0xa2>
 801d8ce:	2a25      	cmp	r2, #37	; 0x25
 801d8d0:	d1f9      	bne.n	801d8c6 <_vfiprintf_r+0x96>
 801d8d2:	ebba 0b04 	subs.w	fp, sl, r4
 801d8d6:	d00b      	beq.n	801d8f0 <_vfiprintf_r+0xc0>
 801d8d8:	465b      	mov	r3, fp
 801d8da:	4622      	mov	r2, r4
 801d8dc:	4629      	mov	r1, r5
 801d8de:	4630      	mov	r0, r6
 801d8e0:	f7ff ff94 	bl	801d80c <__sfputs_r>
 801d8e4:	3001      	adds	r0, #1
 801d8e6:	f000 80aa 	beq.w	801da3e <_vfiprintf_r+0x20e>
 801d8ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d8ec:	445a      	add	r2, fp
 801d8ee:	9209      	str	r2, [sp, #36]	; 0x24
 801d8f0:	f89a 3000 	ldrb.w	r3, [sl]
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	f000 80a2 	beq.w	801da3e <_vfiprintf_r+0x20e>
 801d8fa:	2300      	movs	r3, #0
 801d8fc:	f04f 32ff 	mov.w	r2, #4294967295
 801d900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d904:	f10a 0a01 	add.w	sl, sl, #1
 801d908:	9304      	str	r3, [sp, #16]
 801d90a:	9307      	str	r3, [sp, #28]
 801d90c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d910:	931a      	str	r3, [sp, #104]	; 0x68
 801d912:	4654      	mov	r4, sl
 801d914:	2205      	movs	r2, #5
 801d916:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d91a:	4858      	ldr	r0, [pc, #352]	; (801da7c <_vfiprintf_r+0x24c>)
 801d91c:	f7e2 fc78 	bl	8000210 <memchr>
 801d920:	9a04      	ldr	r2, [sp, #16]
 801d922:	b9d8      	cbnz	r0, 801d95c <_vfiprintf_r+0x12c>
 801d924:	06d1      	lsls	r1, r2, #27
 801d926:	bf44      	itt	mi
 801d928:	2320      	movmi	r3, #32
 801d92a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d92e:	0713      	lsls	r3, r2, #28
 801d930:	bf44      	itt	mi
 801d932:	232b      	movmi	r3, #43	; 0x2b
 801d934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d938:	f89a 3000 	ldrb.w	r3, [sl]
 801d93c:	2b2a      	cmp	r3, #42	; 0x2a
 801d93e:	d015      	beq.n	801d96c <_vfiprintf_r+0x13c>
 801d940:	9a07      	ldr	r2, [sp, #28]
 801d942:	4654      	mov	r4, sl
 801d944:	2000      	movs	r0, #0
 801d946:	f04f 0c0a 	mov.w	ip, #10
 801d94a:	4621      	mov	r1, r4
 801d94c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d950:	3b30      	subs	r3, #48	; 0x30
 801d952:	2b09      	cmp	r3, #9
 801d954:	d94e      	bls.n	801d9f4 <_vfiprintf_r+0x1c4>
 801d956:	b1b0      	cbz	r0, 801d986 <_vfiprintf_r+0x156>
 801d958:	9207      	str	r2, [sp, #28]
 801d95a:	e014      	b.n	801d986 <_vfiprintf_r+0x156>
 801d95c:	eba0 0308 	sub.w	r3, r0, r8
 801d960:	fa09 f303 	lsl.w	r3, r9, r3
 801d964:	4313      	orrs	r3, r2
 801d966:	9304      	str	r3, [sp, #16]
 801d968:	46a2      	mov	sl, r4
 801d96a:	e7d2      	b.n	801d912 <_vfiprintf_r+0xe2>
 801d96c:	9b03      	ldr	r3, [sp, #12]
 801d96e:	1d19      	adds	r1, r3, #4
 801d970:	681b      	ldr	r3, [r3, #0]
 801d972:	9103      	str	r1, [sp, #12]
 801d974:	2b00      	cmp	r3, #0
 801d976:	bfbb      	ittet	lt
 801d978:	425b      	neglt	r3, r3
 801d97a:	f042 0202 	orrlt.w	r2, r2, #2
 801d97e:	9307      	strge	r3, [sp, #28]
 801d980:	9307      	strlt	r3, [sp, #28]
 801d982:	bfb8      	it	lt
 801d984:	9204      	strlt	r2, [sp, #16]
 801d986:	7823      	ldrb	r3, [r4, #0]
 801d988:	2b2e      	cmp	r3, #46	; 0x2e
 801d98a:	d10c      	bne.n	801d9a6 <_vfiprintf_r+0x176>
 801d98c:	7863      	ldrb	r3, [r4, #1]
 801d98e:	2b2a      	cmp	r3, #42	; 0x2a
 801d990:	d135      	bne.n	801d9fe <_vfiprintf_r+0x1ce>
 801d992:	9b03      	ldr	r3, [sp, #12]
 801d994:	1d1a      	adds	r2, r3, #4
 801d996:	681b      	ldr	r3, [r3, #0]
 801d998:	9203      	str	r2, [sp, #12]
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	bfb8      	it	lt
 801d99e:	f04f 33ff 	movlt.w	r3, #4294967295
 801d9a2:	3402      	adds	r4, #2
 801d9a4:	9305      	str	r3, [sp, #20]
 801d9a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801da8c <_vfiprintf_r+0x25c>
 801d9aa:	7821      	ldrb	r1, [r4, #0]
 801d9ac:	2203      	movs	r2, #3
 801d9ae:	4650      	mov	r0, sl
 801d9b0:	f7e2 fc2e 	bl	8000210 <memchr>
 801d9b4:	b140      	cbz	r0, 801d9c8 <_vfiprintf_r+0x198>
 801d9b6:	2340      	movs	r3, #64	; 0x40
 801d9b8:	eba0 000a 	sub.w	r0, r0, sl
 801d9bc:	fa03 f000 	lsl.w	r0, r3, r0
 801d9c0:	9b04      	ldr	r3, [sp, #16]
 801d9c2:	4303      	orrs	r3, r0
 801d9c4:	3401      	adds	r4, #1
 801d9c6:	9304      	str	r3, [sp, #16]
 801d9c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d9cc:	482c      	ldr	r0, [pc, #176]	; (801da80 <_vfiprintf_r+0x250>)
 801d9ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d9d2:	2206      	movs	r2, #6
 801d9d4:	f7e2 fc1c 	bl	8000210 <memchr>
 801d9d8:	2800      	cmp	r0, #0
 801d9da:	d03f      	beq.n	801da5c <_vfiprintf_r+0x22c>
 801d9dc:	4b29      	ldr	r3, [pc, #164]	; (801da84 <_vfiprintf_r+0x254>)
 801d9de:	bb1b      	cbnz	r3, 801da28 <_vfiprintf_r+0x1f8>
 801d9e0:	9b03      	ldr	r3, [sp, #12]
 801d9e2:	3307      	adds	r3, #7
 801d9e4:	f023 0307 	bic.w	r3, r3, #7
 801d9e8:	3308      	adds	r3, #8
 801d9ea:	9303      	str	r3, [sp, #12]
 801d9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d9ee:	443b      	add	r3, r7
 801d9f0:	9309      	str	r3, [sp, #36]	; 0x24
 801d9f2:	e767      	b.n	801d8c4 <_vfiprintf_r+0x94>
 801d9f4:	fb0c 3202 	mla	r2, ip, r2, r3
 801d9f8:	460c      	mov	r4, r1
 801d9fa:	2001      	movs	r0, #1
 801d9fc:	e7a5      	b.n	801d94a <_vfiprintf_r+0x11a>
 801d9fe:	2300      	movs	r3, #0
 801da00:	3401      	adds	r4, #1
 801da02:	9305      	str	r3, [sp, #20]
 801da04:	4619      	mov	r1, r3
 801da06:	f04f 0c0a 	mov.w	ip, #10
 801da0a:	4620      	mov	r0, r4
 801da0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801da10:	3a30      	subs	r2, #48	; 0x30
 801da12:	2a09      	cmp	r2, #9
 801da14:	d903      	bls.n	801da1e <_vfiprintf_r+0x1ee>
 801da16:	2b00      	cmp	r3, #0
 801da18:	d0c5      	beq.n	801d9a6 <_vfiprintf_r+0x176>
 801da1a:	9105      	str	r1, [sp, #20]
 801da1c:	e7c3      	b.n	801d9a6 <_vfiprintf_r+0x176>
 801da1e:	fb0c 2101 	mla	r1, ip, r1, r2
 801da22:	4604      	mov	r4, r0
 801da24:	2301      	movs	r3, #1
 801da26:	e7f0      	b.n	801da0a <_vfiprintf_r+0x1da>
 801da28:	ab03      	add	r3, sp, #12
 801da2a:	9300      	str	r3, [sp, #0]
 801da2c:	462a      	mov	r2, r5
 801da2e:	4b16      	ldr	r3, [pc, #88]	; (801da88 <_vfiprintf_r+0x258>)
 801da30:	a904      	add	r1, sp, #16
 801da32:	4630      	mov	r0, r6
 801da34:	f7fc f84c 	bl	8019ad0 <_printf_float>
 801da38:	4607      	mov	r7, r0
 801da3a:	1c78      	adds	r0, r7, #1
 801da3c:	d1d6      	bne.n	801d9ec <_vfiprintf_r+0x1bc>
 801da3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801da40:	07d9      	lsls	r1, r3, #31
 801da42:	d405      	bmi.n	801da50 <_vfiprintf_r+0x220>
 801da44:	89ab      	ldrh	r3, [r5, #12]
 801da46:	059a      	lsls	r2, r3, #22
 801da48:	d402      	bmi.n	801da50 <_vfiprintf_r+0x220>
 801da4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801da4c:	f000 faa1 	bl	801df92 <__retarget_lock_release_recursive>
 801da50:	89ab      	ldrh	r3, [r5, #12]
 801da52:	065b      	lsls	r3, r3, #25
 801da54:	f53f af12 	bmi.w	801d87c <_vfiprintf_r+0x4c>
 801da58:	9809      	ldr	r0, [sp, #36]	; 0x24
 801da5a:	e711      	b.n	801d880 <_vfiprintf_r+0x50>
 801da5c:	ab03      	add	r3, sp, #12
 801da5e:	9300      	str	r3, [sp, #0]
 801da60:	462a      	mov	r2, r5
 801da62:	4b09      	ldr	r3, [pc, #36]	; (801da88 <_vfiprintf_r+0x258>)
 801da64:	a904      	add	r1, sp, #16
 801da66:	4630      	mov	r0, r6
 801da68:	f7fc fad6 	bl	801a018 <_printf_i>
 801da6c:	e7e4      	b.n	801da38 <_vfiprintf_r+0x208>
 801da6e:	bf00      	nop
 801da70:	080258b4 	.word	0x080258b4
 801da74:	080258d4 	.word	0x080258d4
 801da78:	08025894 	.word	0x08025894
 801da7c:	08025844 	.word	0x08025844
 801da80:	0802584e 	.word	0x0802584e
 801da84:	08019ad1 	.word	0x08019ad1
 801da88:	0801d80d 	.word	0x0801d80d
 801da8c:	0802584a 	.word	0x0802584a

0801da90 <__swbuf_r>:
 801da90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da92:	460e      	mov	r6, r1
 801da94:	4614      	mov	r4, r2
 801da96:	4605      	mov	r5, r0
 801da98:	b118      	cbz	r0, 801daa2 <__swbuf_r+0x12>
 801da9a:	6983      	ldr	r3, [r0, #24]
 801da9c:	b90b      	cbnz	r3, 801daa2 <__swbuf_r+0x12>
 801da9e:	f000 f9d9 	bl	801de54 <__sinit>
 801daa2:	4b21      	ldr	r3, [pc, #132]	; (801db28 <__swbuf_r+0x98>)
 801daa4:	429c      	cmp	r4, r3
 801daa6:	d12b      	bne.n	801db00 <__swbuf_r+0x70>
 801daa8:	686c      	ldr	r4, [r5, #4]
 801daaa:	69a3      	ldr	r3, [r4, #24]
 801daac:	60a3      	str	r3, [r4, #8]
 801daae:	89a3      	ldrh	r3, [r4, #12]
 801dab0:	071a      	lsls	r2, r3, #28
 801dab2:	d52f      	bpl.n	801db14 <__swbuf_r+0x84>
 801dab4:	6923      	ldr	r3, [r4, #16]
 801dab6:	b36b      	cbz	r3, 801db14 <__swbuf_r+0x84>
 801dab8:	6923      	ldr	r3, [r4, #16]
 801daba:	6820      	ldr	r0, [r4, #0]
 801dabc:	1ac0      	subs	r0, r0, r3
 801dabe:	6963      	ldr	r3, [r4, #20]
 801dac0:	b2f6      	uxtb	r6, r6
 801dac2:	4283      	cmp	r3, r0
 801dac4:	4637      	mov	r7, r6
 801dac6:	dc04      	bgt.n	801dad2 <__swbuf_r+0x42>
 801dac8:	4621      	mov	r1, r4
 801daca:	4628      	mov	r0, r5
 801dacc:	f000 f92e 	bl	801dd2c <_fflush_r>
 801dad0:	bb30      	cbnz	r0, 801db20 <__swbuf_r+0x90>
 801dad2:	68a3      	ldr	r3, [r4, #8]
 801dad4:	3b01      	subs	r3, #1
 801dad6:	60a3      	str	r3, [r4, #8]
 801dad8:	6823      	ldr	r3, [r4, #0]
 801dada:	1c5a      	adds	r2, r3, #1
 801dadc:	6022      	str	r2, [r4, #0]
 801dade:	701e      	strb	r6, [r3, #0]
 801dae0:	6963      	ldr	r3, [r4, #20]
 801dae2:	3001      	adds	r0, #1
 801dae4:	4283      	cmp	r3, r0
 801dae6:	d004      	beq.n	801daf2 <__swbuf_r+0x62>
 801dae8:	89a3      	ldrh	r3, [r4, #12]
 801daea:	07db      	lsls	r3, r3, #31
 801daec:	d506      	bpl.n	801dafc <__swbuf_r+0x6c>
 801daee:	2e0a      	cmp	r6, #10
 801daf0:	d104      	bne.n	801dafc <__swbuf_r+0x6c>
 801daf2:	4621      	mov	r1, r4
 801daf4:	4628      	mov	r0, r5
 801daf6:	f000 f919 	bl	801dd2c <_fflush_r>
 801dafa:	b988      	cbnz	r0, 801db20 <__swbuf_r+0x90>
 801dafc:	4638      	mov	r0, r7
 801dafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db00:	4b0a      	ldr	r3, [pc, #40]	; (801db2c <__swbuf_r+0x9c>)
 801db02:	429c      	cmp	r4, r3
 801db04:	d101      	bne.n	801db0a <__swbuf_r+0x7a>
 801db06:	68ac      	ldr	r4, [r5, #8]
 801db08:	e7cf      	b.n	801daaa <__swbuf_r+0x1a>
 801db0a:	4b09      	ldr	r3, [pc, #36]	; (801db30 <__swbuf_r+0xa0>)
 801db0c:	429c      	cmp	r4, r3
 801db0e:	bf08      	it	eq
 801db10:	68ec      	ldreq	r4, [r5, #12]
 801db12:	e7ca      	b.n	801daaa <__swbuf_r+0x1a>
 801db14:	4621      	mov	r1, r4
 801db16:	4628      	mov	r0, r5
 801db18:	f000 f80c 	bl	801db34 <__swsetup_r>
 801db1c:	2800      	cmp	r0, #0
 801db1e:	d0cb      	beq.n	801dab8 <__swbuf_r+0x28>
 801db20:	f04f 37ff 	mov.w	r7, #4294967295
 801db24:	e7ea      	b.n	801dafc <__swbuf_r+0x6c>
 801db26:	bf00      	nop
 801db28:	080258b4 	.word	0x080258b4
 801db2c:	080258d4 	.word	0x080258d4
 801db30:	08025894 	.word	0x08025894

0801db34 <__swsetup_r>:
 801db34:	4b32      	ldr	r3, [pc, #200]	; (801dc00 <__swsetup_r+0xcc>)
 801db36:	b570      	push	{r4, r5, r6, lr}
 801db38:	681d      	ldr	r5, [r3, #0]
 801db3a:	4606      	mov	r6, r0
 801db3c:	460c      	mov	r4, r1
 801db3e:	b125      	cbz	r5, 801db4a <__swsetup_r+0x16>
 801db40:	69ab      	ldr	r3, [r5, #24]
 801db42:	b913      	cbnz	r3, 801db4a <__swsetup_r+0x16>
 801db44:	4628      	mov	r0, r5
 801db46:	f000 f985 	bl	801de54 <__sinit>
 801db4a:	4b2e      	ldr	r3, [pc, #184]	; (801dc04 <__swsetup_r+0xd0>)
 801db4c:	429c      	cmp	r4, r3
 801db4e:	d10f      	bne.n	801db70 <__swsetup_r+0x3c>
 801db50:	686c      	ldr	r4, [r5, #4]
 801db52:	89a3      	ldrh	r3, [r4, #12]
 801db54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801db58:	0719      	lsls	r1, r3, #28
 801db5a:	d42c      	bmi.n	801dbb6 <__swsetup_r+0x82>
 801db5c:	06dd      	lsls	r5, r3, #27
 801db5e:	d411      	bmi.n	801db84 <__swsetup_r+0x50>
 801db60:	2309      	movs	r3, #9
 801db62:	6033      	str	r3, [r6, #0]
 801db64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801db68:	81a3      	strh	r3, [r4, #12]
 801db6a:	f04f 30ff 	mov.w	r0, #4294967295
 801db6e:	e03e      	b.n	801dbee <__swsetup_r+0xba>
 801db70:	4b25      	ldr	r3, [pc, #148]	; (801dc08 <__swsetup_r+0xd4>)
 801db72:	429c      	cmp	r4, r3
 801db74:	d101      	bne.n	801db7a <__swsetup_r+0x46>
 801db76:	68ac      	ldr	r4, [r5, #8]
 801db78:	e7eb      	b.n	801db52 <__swsetup_r+0x1e>
 801db7a:	4b24      	ldr	r3, [pc, #144]	; (801dc0c <__swsetup_r+0xd8>)
 801db7c:	429c      	cmp	r4, r3
 801db7e:	bf08      	it	eq
 801db80:	68ec      	ldreq	r4, [r5, #12]
 801db82:	e7e6      	b.n	801db52 <__swsetup_r+0x1e>
 801db84:	0758      	lsls	r0, r3, #29
 801db86:	d512      	bpl.n	801dbae <__swsetup_r+0x7a>
 801db88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801db8a:	b141      	cbz	r1, 801db9e <__swsetup_r+0x6a>
 801db8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801db90:	4299      	cmp	r1, r3
 801db92:	d002      	beq.n	801db9a <__swsetup_r+0x66>
 801db94:	4630      	mov	r0, r6
 801db96:	f7ff fb27 	bl	801d1e8 <_free_r>
 801db9a:	2300      	movs	r3, #0
 801db9c:	6363      	str	r3, [r4, #52]	; 0x34
 801db9e:	89a3      	ldrh	r3, [r4, #12]
 801dba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801dba4:	81a3      	strh	r3, [r4, #12]
 801dba6:	2300      	movs	r3, #0
 801dba8:	6063      	str	r3, [r4, #4]
 801dbaa:	6923      	ldr	r3, [r4, #16]
 801dbac:	6023      	str	r3, [r4, #0]
 801dbae:	89a3      	ldrh	r3, [r4, #12]
 801dbb0:	f043 0308 	orr.w	r3, r3, #8
 801dbb4:	81a3      	strh	r3, [r4, #12]
 801dbb6:	6923      	ldr	r3, [r4, #16]
 801dbb8:	b94b      	cbnz	r3, 801dbce <__swsetup_r+0x9a>
 801dbba:	89a3      	ldrh	r3, [r4, #12]
 801dbbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801dbc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801dbc4:	d003      	beq.n	801dbce <__swsetup_r+0x9a>
 801dbc6:	4621      	mov	r1, r4
 801dbc8:	4630      	mov	r0, r6
 801dbca:	f000 fa09 	bl	801dfe0 <__smakebuf_r>
 801dbce:	89a0      	ldrh	r0, [r4, #12]
 801dbd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dbd4:	f010 0301 	ands.w	r3, r0, #1
 801dbd8:	d00a      	beq.n	801dbf0 <__swsetup_r+0xbc>
 801dbda:	2300      	movs	r3, #0
 801dbdc:	60a3      	str	r3, [r4, #8]
 801dbde:	6963      	ldr	r3, [r4, #20]
 801dbe0:	425b      	negs	r3, r3
 801dbe2:	61a3      	str	r3, [r4, #24]
 801dbe4:	6923      	ldr	r3, [r4, #16]
 801dbe6:	b943      	cbnz	r3, 801dbfa <__swsetup_r+0xc6>
 801dbe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801dbec:	d1ba      	bne.n	801db64 <__swsetup_r+0x30>
 801dbee:	bd70      	pop	{r4, r5, r6, pc}
 801dbf0:	0781      	lsls	r1, r0, #30
 801dbf2:	bf58      	it	pl
 801dbf4:	6963      	ldrpl	r3, [r4, #20]
 801dbf6:	60a3      	str	r3, [r4, #8]
 801dbf8:	e7f4      	b.n	801dbe4 <__swsetup_r+0xb0>
 801dbfa:	2000      	movs	r0, #0
 801dbfc:	e7f7      	b.n	801dbee <__swsetup_r+0xba>
 801dbfe:	bf00      	nop
 801dc00:	200000a4 	.word	0x200000a4
 801dc04:	080258b4 	.word	0x080258b4
 801dc08:	080258d4 	.word	0x080258d4
 801dc0c:	08025894 	.word	0x08025894

0801dc10 <abort>:
 801dc10:	b508      	push	{r3, lr}
 801dc12:	2006      	movs	r0, #6
 801dc14:	f000 fa54 	bl	801e0c0 <raise>
 801dc18:	2001      	movs	r0, #1
 801dc1a:	f7ef fe83 	bl	800d924 <_exit>
	...

0801dc20 <__sflush_r>:
 801dc20:	898a      	ldrh	r2, [r1, #12]
 801dc22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc26:	4605      	mov	r5, r0
 801dc28:	0710      	lsls	r0, r2, #28
 801dc2a:	460c      	mov	r4, r1
 801dc2c:	d458      	bmi.n	801dce0 <__sflush_r+0xc0>
 801dc2e:	684b      	ldr	r3, [r1, #4]
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	dc05      	bgt.n	801dc40 <__sflush_r+0x20>
 801dc34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	dc02      	bgt.n	801dc40 <__sflush_r+0x20>
 801dc3a:	2000      	movs	r0, #0
 801dc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc42:	2e00      	cmp	r6, #0
 801dc44:	d0f9      	beq.n	801dc3a <__sflush_r+0x1a>
 801dc46:	2300      	movs	r3, #0
 801dc48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dc4c:	682f      	ldr	r7, [r5, #0]
 801dc4e:	602b      	str	r3, [r5, #0]
 801dc50:	d032      	beq.n	801dcb8 <__sflush_r+0x98>
 801dc52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dc54:	89a3      	ldrh	r3, [r4, #12]
 801dc56:	075a      	lsls	r2, r3, #29
 801dc58:	d505      	bpl.n	801dc66 <__sflush_r+0x46>
 801dc5a:	6863      	ldr	r3, [r4, #4]
 801dc5c:	1ac0      	subs	r0, r0, r3
 801dc5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dc60:	b10b      	cbz	r3, 801dc66 <__sflush_r+0x46>
 801dc62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dc64:	1ac0      	subs	r0, r0, r3
 801dc66:	2300      	movs	r3, #0
 801dc68:	4602      	mov	r2, r0
 801dc6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc6c:	6a21      	ldr	r1, [r4, #32]
 801dc6e:	4628      	mov	r0, r5
 801dc70:	47b0      	blx	r6
 801dc72:	1c43      	adds	r3, r0, #1
 801dc74:	89a3      	ldrh	r3, [r4, #12]
 801dc76:	d106      	bne.n	801dc86 <__sflush_r+0x66>
 801dc78:	6829      	ldr	r1, [r5, #0]
 801dc7a:	291d      	cmp	r1, #29
 801dc7c:	d82c      	bhi.n	801dcd8 <__sflush_r+0xb8>
 801dc7e:	4a2a      	ldr	r2, [pc, #168]	; (801dd28 <__sflush_r+0x108>)
 801dc80:	40ca      	lsrs	r2, r1
 801dc82:	07d6      	lsls	r6, r2, #31
 801dc84:	d528      	bpl.n	801dcd8 <__sflush_r+0xb8>
 801dc86:	2200      	movs	r2, #0
 801dc88:	6062      	str	r2, [r4, #4]
 801dc8a:	04d9      	lsls	r1, r3, #19
 801dc8c:	6922      	ldr	r2, [r4, #16]
 801dc8e:	6022      	str	r2, [r4, #0]
 801dc90:	d504      	bpl.n	801dc9c <__sflush_r+0x7c>
 801dc92:	1c42      	adds	r2, r0, #1
 801dc94:	d101      	bne.n	801dc9a <__sflush_r+0x7a>
 801dc96:	682b      	ldr	r3, [r5, #0]
 801dc98:	b903      	cbnz	r3, 801dc9c <__sflush_r+0x7c>
 801dc9a:	6560      	str	r0, [r4, #84]	; 0x54
 801dc9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc9e:	602f      	str	r7, [r5, #0]
 801dca0:	2900      	cmp	r1, #0
 801dca2:	d0ca      	beq.n	801dc3a <__sflush_r+0x1a>
 801dca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dca8:	4299      	cmp	r1, r3
 801dcaa:	d002      	beq.n	801dcb2 <__sflush_r+0x92>
 801dcac:	4628      	mov	r0, r5
 801dcae:	f7ff fa9b 	bl	801d1e8 <_free_r>
 801dcb2:	2000      	movs	r0, #0
 801dcb4:	6360      	str	r0, [r4, #52]	; 0x34
 801dcb6:	e7c1      	b.n	801dc3c <__sflush_r+0x1c>
 801dcb8:	6a21      	ldr	r1, [r4, #32]
 801dcba:	2301      	movs	r3, #1
 801dcbc:	4628      	mov	r0, r5
 801dcbe:	47b0      	blx	r6
 801dcc0:	1c41      	adds	r1, r0, #1
 801dcc2:	d1c7      	bne.n	801dc54 <__sflush_r+0x34>
 801dcc4:	682b      	ldr	r3, [r5, #0]
 801dcc6:	2b00      	cmp	r3, #0
 801dcc8:	d0c4      	beq.n	801dc54 <__sflush_r+0x34>
 801dcca:	2b1d      	cmp	r3, #29
 801dccc:	d001      	beq.n	801dcd2 <__sflush_r+0xb2>
 801dcce:	2b16      	cmp	r3, #22
 801dcd0:	d101      	bne.n	801dcd6 <__sflush_r+0xb6>
 801dcd2:	602f      	str	r7, [r5, #0]
 801dcd4:	e7b1      	b.n	801dc3a <__sflush_r+0x1a>
 801dcd6:	89a3      	ldrh	r3, [r4, #12]
 801dcd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dcdc:	81a3      	strh	r3, [r4, #12]
 801dcde:	e7ad      	b.n	801dc3c <__sflush_r+0x1c>
 801dce0:	690f      	ldr	r7, [r1, #16]
 801dce2:	2f00      	cmp	r7, #0
 801dce4:	d0a9      	beq.n	801dc3a <__sflush_r+0x1a>
 801dce6:	0793      	lsls	r3, r2, #30
 801dce8:	680e      	ldr	r6, [r1, #0]
 801dcea:	bf08      	it	eq
 801dcec:	694b      	ldreq	r3, [r1, #20]
 801dcee:	600f      	str	r7, [r1, #0]
 801dcf0:	bf18      	it	ne
 801dcf2:	2300      	movne	r3, #0
 801dcf4:	eba6 0807 	sub.w	r8, r6, r7
 801dcf8:	608b      	str	r3, [r1, #8]
 801dcfa:	f1b8 0f00 	cmp.w	r8, #0
 801dcfe:	dd9c      	ble.n	801dc3a <__sflush_r+0x1a>
 801dd00:	6a21      	ldr	r1, [r4, #32]
 801dd02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dd04:	4643      	mov	r3, r8
 801dd06:	463a      	mov	r2, r7
 801dd08:	4628      	mov	r0, r5
 801dd0a:	47b0      	blx	r6
 801dd0c:	2800      	cmp	r0, #0
 801dd0e:	dc06      	bgt.n	801dd1e <__sflush_r+0xfe>
 801dd10:	89a3      	ldrh	r3, [r4, #12]
 801dd12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dd16:	81a3      	strh	r3, [r4, #12]
 801dd18:	f04f 30ff 	mov.w	r0, #4294967295
 801dd1c:	e78e      	b.n	801dc3c <__sflush_r+0x1c>
 801dd1e:	4407      	add	r7, r0
 801dd20:	eba8 0800 	sub.w	r8, r8, r0
 801dd24:	e7e9      	b.n	801dcfa <__sflush_r+0xda>
 801dd26:	bf00      	nop
 801dd28:	20400001 	.word	0x20400001

0801dd2c <_fflush_r>:
 801dd2c:	b538      	push	{r3, r4, r5, lr}
 801dd2e:	690b      	ldr	r3, [r1, #16]
 801dd30:	4605      	mov	r5, r0
 801dd32:	460c      	mov	r4, r1
 801dd34:	b913      	cbnz	r3, 801dd3c <_fflush_r+0x10>
 801dd36:	2500      	movs	r5, #0
 801dd38:	4628      	mov	r0, r5
 801dd3a:	bd38      	pop	{r3, r4, r5, pc}
 801dd3c:	b118      	cbz	r0, 801dd46 <_fflush_r+0x1a>
 801dd3e:	6983      	ldr	r3, [r0, #24]
 801dd40:	b90b      	cbnz	r3, 801dd46 <_fflush_r+0x1a>
 801dd42:	f000 f887 	bl	801de54 <__sinit>
 801dd46:	4b14      	ldr	r3, [pc, #80]	; (801dd98 <_fflush_r+0x6c>)
 801dd48:	429c      	cmp	r4, r3
 801dd4a:	d11b      	bne.n	801dd84 <_fflush_r+0x58>
 801dd4c:	686c      	ldr	r4, [r5, #4]
 801dd4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd52:	2b00      	cmp	r3, #0
 801dd54:	d0ef      	beq.n	801dd36 <_fflush_r+0xa>
 801dd56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dd58:	07d0      	lsls	r0, r2, #31
 801dd5a:	d404      	bmi.n	801dd66 <_fflush_r+0x3a>
 801dd5c:	0599      	lsls	r1, r3, #22
 801dd5e:	d402      	bmi.n	801dd66 <_fflush_r+0x3a>
 801dd60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd62:	f000 f915 	bl	801df90 <__retarget_lock_acquire_recursive>
 801dd66:	4628      	mov	r0, r5
 801dd68:	4621      	mov	r1, r4
 801dd6a:	f7ff ff59 	bl	801dc20 <__sflush_r>
 801dd6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dd70:	07da      	lsls	r2, r3, #31
 801dd72:	4605      	mov	r5, r0
 801dd74:	d4e0      	bmi.n	801dd38 <_fflush_r+0xc>
 801dd76:	89a3      	ldrh	r3, [r4, #12]
 801dd78:	059b      	lsls	r3, r3, #22
 801dd7a:	d4dd      	bmi.n	801dd38 <_fflush_r+0xc>
 801dd7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd7e:	f000 f908 	bl	801df92 <__retarget_lock_release_recursive>
 801dd82:	e7d9      	b.n	801dd38 <_fflush_r+0xc>
 801dd84:	4b05      	ldr	r3, [pc, #20]	; (801dd9c <_fflush_r+0x70>)
 801dd86:	429c      	cmp	r4, r3
 801dd88:	d101      	bne.n	801dd8e <_fflush_r+0x62>
 801dd8a:	68ac      	ldr	r4, [r5, #8]
 801dd8c:	e7df      	b.n	801dd4e <_fflush_r+0x22>
 801dd8e:	4b04      	ldr	r3, [pc, #16]	; (801dda0 <_fflush_r+0x74>)
 801dd90:	429c      	cmp	r4, r3
 801dd92:	bf08      	it	eq
 801dd94:	68ec      	ldreq	r4, [r5, #12]
 801dd96:	e7da      	b.n	801dd4e <_fflush_r+0x22>
 801dd98:	080258b4 	.word	0x080258b4
 801dd9c:	080258d4 	.word	0x080258d4
 801dda0:	08025894 	.word	0x08025894

0801dda4 <std>:
 801dda4:	2300      	movs	r3, #0
 801dda6:	b510      	push	{r4, lr}
 801dda8:	4604      	mov	r4, r0
 801ddaa:	e9c0 3300 	strd	r3, r3, [r0]
 801ddae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ddb2:	6083      	str	r3, [r0, #8]
 801ddb4:	8181      	strh	r1, [r0, #12]
 801ddb6:	6643      	str	r3, [r0, #100]	; 0x64
 801ddb8:	81c2      	strh	r2, [r0, #14]
 801ddba:	6183      	str	r3, [r0, #24]
 801ddbc:	4619      	mov	r1, r3
 801ddbe:	2208      	movs	r2, #8
 801ddc0:	305c      	adds	r0, #92	; 0x5c
 801ddc2:	f7fb fddd 	bl	8019980 <memset>
 801ddc6:	4b05      	ldr	r3, [pc, #20]	; (801dddc <std+0x38>)
 801ddc8:	6263      	str	r3, [r4, #36]	; 0x24
 801ddca:	4b05      	ldr	r3, [pc, #20]	; (801dde0 <std+0x3c>)
 801ddcc:	62a3      	str	r3, [r4, #40]	; 0x28
 801ddce:	4b05      	ldr	r3, [pc, #20]	; (801dde4 <std+0x40>)
 801ddd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ddd2:	4b05      	ldr	r3, [pc, #20]	; (801dde8 <std+0x44>)
 801ddd4:	6224      	str	r4, [r4, #32]
 801ddd6:	6323      	str	r3, [r4, #48]	; 0x30
 801ddd8:	bd10      	pop	{r4, pc}
 801ddda:	bf00      	nop
 801dddc:	0801e0f9 	.word	0x0801e0f9
 801dde0:	0801e11b 	.word	0x0801e11b
 801dde4:	0801e153 	.word	0x0801e153
 801dde8:	0801e177 	.word	0x0801e177

0801ddec <_cleanup_r>:
 801ddec:	4901      	ldr	r1, [pc, #4]	; (801ddf4 <_cleanup_r+0x8>)
 801ddee:	f000 b8af 	b.w	801df50 <_fwalk_reent>
 801ddf2:	bf00      	nop
 801ddf4:	0801dd2d 	.word	0x0801dd2d

0801ddf8 <__sfmoreglue>:
 801ddf8:	b570      	push	{r4, r5, r6, lr}
 801ddfa:	2268      	movs	r2, #104	; 0x68
 801ddfc:	1e4d      	subs	r5, r1, #1
 801ddfe:	4355      	muls	r5, r2
 801de00:	460e      	mov	r6, r1
 801de02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801de06:	f7ff fa5b 	bl	801d2c0 <_malloc_r>
 801de0a:	4604      	mov	r4, r0
 801de0c:	b140      	cbz	r0, 801de20 <__sfmoreglue+0x28>
 801de0e:	2100      	movs	r1, #0
 801de10:	e9c0 1600 	strd	r1, r6, [r0]
 801de14:	300c      	adds	r0, #12
 801de16:	60a0      	str	r0, [r4, #8]
 801de18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801de1c:	f7fb fdb0 	bl	8019980 <memset>
 801de20:	4620      	mov	r0, r4
 801de22:	bd70      	pop	{r4, r5, r6, pc}

0801de24 <__sfp_lock_acquire>:
 801de24:	4801      	ldr	r0, [pc, #4]	; (801de2c <__sfp_lock_acquire+0x8>)
 801de26:	f000 b8b3 	b.w	801df90 <__retarget_lock_acquire_recursive>
 801de2a:	bf00      	nop
 801de2c:	20037405 	.word	0x20037405

0801de30 <__sfp_lock_release>:
 801de30:	4801      	ldr	r0, [pc, #4]	; (801de38 <__sfp_lock_release+0x8>)
 801de32:	f000 b8ae 	b.w	801df92 <__retarget_lock_release_recursive>
 801de36:	bf00      	nop
 801de38:	20037405 	.word	0x20037405

0801de3c <__sinit_lock_acquire>:
 801de3c:	4801      	ldr	r0, [pc, #4]	; (801de44 <__sinit_lock_acquire+0x8>)
 801de3e:	f000 b8a7 	b.w	801df90 <__retarget_lock_acquire_recursive>
 801de42:	bf00      	nop
 801de44:	20037406 	.word	0x20037406

0801de48 <__sinit_lock_release>:
 801de48:	4801      	ldr	r0, [pc, #4]	; (801de50 <__sinit_lock_release+0x8>)
 801de4a:	f000 b8a2 	b.w	801df92 <__retarget_lock_release_recursive>
 801de4e:	bf00      	nop
 801de50:	20037406 	.word	0x20037406

0801de54 <__sinit>:
 801de54:	b510      	push	{r4, lr}
 801de56:	4604      	mov	r4, r0
 801de58:	f7ff fff0 	bl	801de3c <__sinit_lock_acquire>
 801de5c:	69a3      	ldr	r3, [r4, #24]
 801de5e:	b11b      	cbz	r3, 801de68 <__sinit+0x14>
 801de60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de64:	f7ff bff0 	b.w	801de48 <__sinit_lock_release>
 801de68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801de6c:	6523      	str	r3, [r4, #80]	; 0x50
 801de6e:	4b13      	ldr	r3, [pc, #76]	; (801debc <__sinit+0x68>)
 801de70:	4a13      	ldr	r2, [pc, #76]	; (801dec0 <__sinit+0x6c>)
 801de72:	681b      	ldr	r3, [r3, #0]
 801de74:	62a2      	str	r2, [r4, #40]	; 0x28
 801de76:	42a3      	cmp	r3, r4
 801de78:	bf04      	itt	eq
 801de7a:	2301      	moveq	r3, #1
 801de7c:	61a3      	streq	r3, [r4, #24]
 801de7e:	4620      	mov	r0, r4
 801de80:	f000 f820 	bl	801dec4 <__sfp>
 801de84:	6060      	str	r0, [r4, #4]
 801de86:	4620      	mov	r0, r4
 801de88:	f000 f81c 	bl	801dec4 <__sfp>
 801de8c:	60a0      	str	r0, [r4, #8]
 801de8e:	4620      	mov	r0, r4
 801de90:	f000 f818 	bl	801dec4 <__sfp>
 801de94:	2200      	movs	r2, #0
 801de96:	60e0      	str	r0, [r4, #12]
 801de98:	2104      	movs	r1, #4
 801de9a:	6860      	ldr	r0, [r4, #4]
 801de9c:	f7ff ff82 	bl	801dda4 <std>
 801dea0:	68a0      	ldr	r0, [r4, #8]
 801dea2:	2201      	movs	r2, #1
 801dea4:	2109      	movs	r1, #9
 801dea6:	f7ff ff7d 	bl	801dda4 <std>
 801deaa:	68e0      	ldr	r0, [r4, #12]
 801deac:	2202      	movs	r2, #2
 801deae:	2112      	movs	r1, #18
 801deb0:	f7ff ff78 	bl	801dda4 <std>
 801deb4:	2301      	movs	r3, #1
 801deb6:	61a3      	str	r3, [r4, #24]
 801deb8:	e7d2      	b.n	801de60 <__sinit+0xc>
 801deba:	bf00      	nop
 801debc:	08025450 	.word	0x08025450
 801dec0:	0801dded 	.word	0x0801dded

0801dec4 <__sfp>:
 801dec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dec6:	4607      	mov	r7, r0
 801dec8:	f7ff ffac 	bl	801de24 <__sfp_lock_acquire>
 801decc:	4b1e      	ldr	r3, [pc, #120]	; (801df48 <__sfp+0x84>)
 801dece:	681e      	ldr	r6, [r3, #0]
 801ded0:	69b3      	ldr	r3, [r6, #24]
 801ded2:	b913      	cbnz	r3, 801deda <__sfp+0x16>
 801ded4:	4630      	mov	r0, r6
 801ded6:	f7ff ffbd 	bl	801de54 <__sinit>
 801deda:	3648      	adds	r6, #72	; 0x48
 801dedc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dee0:	3b01      	subs	r3, #1
 801dee2:	d503      	bpl.n	801deec <__sfp+0x28>
 801dee4:	6833      	ldr	r3, [r6, #0]
 801dee6:	b30b      	cbz	r3, 801df2c <__sfp+0x68>
 801dee8:	6836      	ldr	r6, [r6, #0]
 801deea:	e7f7      	b.n	801dedc <__sfp+0x18>
 801deec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801def0:	b9d5      	cbnz	r5, 801df28 <__sfp+0x64>
 801def2:	4b16      	ldr	r3, [pc, #88]	; (801df4c <__sfp+0x88>)
 801def4:	60e3      	str	r3, [r4, #12]
 801def6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801defa:	6665      	str	r5, [r4, #100]	; 0x64
 801defc:	f000 f847 	bl	801df8e <__retarget_lock_init_recursive>
 801df00:	f7ff ff96 	bl	801de30 <__sfp_lock_release>
 801df04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801df08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801df0c:	6025      	str	r5, [r4, #0]
 801df0e:	61a5      	str	r5, [r4, #24]
 801df10:	2208      	movs	r2, #8
 801df12:	4629      	mov	r1, r5
 801df14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801df18:	f7fb fd32 	bl	8019980 <memset>
 801df1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801df20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801df24:	4620      	mov	r0, r4
 801df26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df28:	3468      	adds	r4, #104	; 0x68
 801df2a:	e7d9      	b.n	801dee0 <__sfp+0x1c>
 801df2c:	2104      	movs	r1, #4
 801df2e:	4638      	mov	r0, r7
 801df30:	f7ff ff62 	bl	801ddf8 <__sfmoreglue>
 801df34:	4604      	mov	r4, r0
 801df36:	6030      	str	r0, [r6, #0]
 801df38:	2800      	cmp	r0, #0
 801df3a:	d1d5      	bne.n	801dee8 <__sfp+0x24>
 801df3c:	f7ff ff78 	bl	801de30 <__sfp_lock_release>
 801df40:	230c      	movs	r3, #12
 801df42:	603b      	str	r3, [r7, #0]
 801df44:	e7ee      	b.n	801df24 <__sfp+0x60>
 801df46:	bf00      	nop
 801df48:	08025450 	.word	0x08025450
 801df4c:	ffff0001 	.word	0xffff0001

0801df50 <_fwalk_reent>:
 801df50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df54:	4606      	mov	r6, r0
 801df56:	4688      	mov	r8, r1
 801df58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801df5c:	2700      	movs	r7, #0
 801df5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801df62:	f1b9 0901 	subs.w	r9, r9, #1
 801df66:	d505      	bpl.n	801df74 <_fwalk_reent+0x24>
 801df68:	6824      	ldr	r4, [r4, #0]
 801df6a:	2c00      	cmp	r4, #0
 801df6c:	d1f7      	bne.n	801df5e <_fwalk_reent+0xe>
 801df6e:	4638      	mov	r0, r7
 801df70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df74:	89ab      	ldrh	r3, [r5, #12]
 801df76:	2b01      	cmp	r3, #1
 801df78:	d907      	bls.n	801df8a <_fwalk_reent+0x3a>
 801df7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801df7e:	3301      	adds	r3, #1
 801df80:	d003      	beq.n	801df8a <_fwalk_reent+0x3a>
 801df82:	4629      	mov	r1, r5
 801df84:	4630      	mov	r0, r6
 801df86:	47c0      	blx	r8
 801df88:	4307      	orrs	r7, r0
 801df8a:	3568      	adds	r5, #104	; 0x68
 801df8c:	e7e9      	b.n	801df62 <_fwalk_reent+0x12>

0801df8e <__retarget_lock_init_recursive>:
 801df8e:	4770      	bx	lr

0801df90 <__retarget_lock_acquire_recursive>:
 801df90:	4770      	bx	lr

0801df92 <__retarget_lock_release_recursive>:
 801df92:	4770      	bx	lr

0801df94 <__swhatbuf_r>:
 801df94:	b570      	push	{r4, r5, r6, lr}
 801df96:	460e      	mov	r6, r1
 801df98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df9c:	2900      	cmp	r1, #0
 801df9e:	b096      	sub	sp, #88	; 0x58
 801dfa0:	4614      	mov	r4, r2
 801dfa2:	461d      	mov	r5, r3
 801dfa4:	da08      	bge.n	801dfb8 <__swhatbuf_r+0x24>
 801dfa6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801dfaa:	2200      	movs	r2, #0
 801dfac:	602a      	str	r2, [r5, #0]
 801dfae:	061a      	lsls	r2, r3, #24
 801dfb0:	d410      	bmi.n	801dfd4 <__swhatbuf_r+0x40>
 801dfb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dfb6:	e00e      	b.n	801dfd6 <__swhatbuf_r+0x42>
 801dfb8:	466a      	mov	r2, sp
 801dfba:	f000 f903 	bl	801e1c4 <_fstat_r>
 801dfbe:	2800      	cmp	r0, #0
 801dfc0:	dbf1      	blt.n	801dfa6 <__swhatbuf_r+0x12>
 801dfc2:	9a01      	ldr	r2, [sp, #4]
 801dfc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dfc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dfcc:	425a      	negs	r2, r3
 801dfce:	415a      	adcs	r2, r3
 801dfd0:	602a      	str	r2, [r5, #0]
 801dfd2:	e7ee      	b.n	801dfb2 <__swhatbuf_r+0x1e>
 801dfd4:	2340      	movs	r3, #64	; 0x40
 801dfd6:	2000      	movs	r0, #0
 801dfd8:	6023      	str	r3, [r4, #0]
 801dfda:	b016      	add	sp, #88	; 0x58
 801dfdc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dfe0 <__smakebuf_r>:
 801dfe0:	898b      	ldrh	r3, [r1, #12]
 801dfe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dfe4:	079d      	lsls	r5, r3, #30
 801dfe6:	4606      	mov	r6, r0
 801dfe8:	460c      	mov	r4, r1
 801dfea:	d507      	bpl.n	801dffc <__smakebuf_r+0x1c>
 801dfec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dff0:	6023      	str	r3, [r4, #0]
 801dff2:	6123      	str	r3, [r4, #16]
 801dff4:	2301      	movs	r3, #1
 801dff6:	6163      	str	r3, [r4, #20]
 801dff8:	b002      	add	sp, #8
 801dffa:	bd70      	pop	{r4, r5, r6, pc}
 801dffc:	ab01      	add	r3, sp, #4
 801dffe:	466a      	mov	r2, sp
 801e000:	f7ff ffc8 	bl	801df94 <__swhatbuf_r>
 801e004:	9900      	ldr	r1, [sp, #0]
 801e006:	4605      	mov	r5, r0
 801e008:	4630      	mov	r0, r6
 801e00a:	f7ff f959 	bl	801d2c0 <_malloc_r>
 801e00e:	b948      	cbnz	r0, 801e024 <__smakebuf_r+0x44>
 801e010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e014:	059a      	lsls	r2, r3, #22
 801e016:	d4ef      	bmi.n	801dff8 <__smakebuf_r+0x18>
 801e018:	f023 0303 	bic.w	r3, r3, #3
 801e01c:	f043 0302 	orr.w	r3, r3, #2
 801e020:	81a3      	strh	r3, [r4, #12]
 801e022:	e7e3      	b.n	801dfec <__smakebuf_r+0xc>
 801e024:	4b0d      	ldr	r3, [pc, #52]	; (801e05c <__smakebuf_r+0x7c>)
 801e026:	62b3      	str	r3, [r6, #40]	; 0x28
 801e028:	89a3      	ldrh	r3, [r4, #12]
 801e02a:	6020      	str	r0, [r4, #0]
 801e02c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e030:	81a3      	strh	r3, [r4, #12]
 801e032:	9b00      	ldr	r3, [sp, #0]
 801e034:	6163      	str	r3, [r4, #20]
 801e036:	9b01      	ldr	r3, [sp, #4]
 801e038:	6120      	str	r0, [r4, #16]
 801e03a:	b15b      	cbz	r3, 801e054 <__smakebuf_r+0x74>
 801e03c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e040:	4630      	mov	r0, r6
 801e042:	f000 f8d1 	bl	801e1e8 <_isatty_r>
 801e046:	b128      	cbz	r0, 801e054 <__smakebuf_r+0x74>
 801e048:	89a3      	ldrh	r3, [r4, #12]
 801e04a:	f023 0303 	bic.w	r3, r3, #3
 801e04e:	f043 0301 	orr.w	r3, r3, #1
 801e052:	81a3      	strh	r3, [r4, #12]
 801e054:	89a0      	ldrh	r0, [r4, #12]
 801e056:	4305      	orrs	r5, r0
 801e058:	81a5      	strh	r5, [r4, #12]
 801e05a:	e7cd      	b.n	801dff8 <__smakebuf_r+0x18>
 801e05c:	0801dded 	.word	0x0801dded

0801e060 <_malloc_usable_size_r>:
 801e060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e064:	1f18      	subs	r0, r3, #4
 801e066:	2b00      	cmp	r3, #0
 801e068:	bfbc      	itt	lt
 801e06a:	580b      	ldrlt	r3, [r1, r0]
 801e06c:	18c0      	addlt	r0, r0, r3
 801e06e:	4770      	bx	lr

0801e070 <_raise_r>:
 801e070:	291f      	cmp	r1, #31
 801e072:	b538      	push	{r3, r4, r5, lr}
 801e074:	4604      	mov	r4, r0
 801e076:	460d      	mov	r5, r1
 801e078:	d904      	bls.n	801e084 <_raise_r+0x14>
 801e07a:	2316      	movs	r3, #22
 801e07c:	6003      	str	r3, [r0, #0]
 801e07e:	f04f 30ff 	mov.w	r0, #4294967295
 801e082:	bd38      	pop	{r3, r4, r5, pc}
 801e084:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e086:	b112      	cbz	r2, 801e08e <_raise_r+0x1e>
 801e088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e08c:	b94b      	cbnz	r3, 801e0a2 <_raise_r+0x32>
 801e08e:	4620      	mov	r0, r4
 801e090:	f000 f830 	bl	801e0f4 <_getpid_r>
 801e094:	462a      	mov	r2, r5
 801e096:	4601      	mov	r1, r0
 801e098:	4620      	mov	r0, r4
 801e09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e09e:	f000 b817 	b.w	801e0d0 <_kill_r>
 801e0a2:	2b01      	cmp	r3, #1
 801e0a4:	d00a      	beq.n	801e0bc <_raise_r+0x4c>
 801e0a6:	1c59      	adds	r1, r3, #1
 801e0a8:	d103      	bne.n	801e0b2 <_raise_r+0x42>
 801e0aa:	2316      	movs	r3, #22
 801e0ac:	6003      	str	r3, [r0, #0]
 801e0ae:	2001      	movs	r0, #1
 801e0b0:	e7e7      	b.n	801e082 <_raise_r+0x12>
 801e0b2:	2400      	movs	r4, #0
 801e0b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e0b8:	4628      	mov	r0, r5
 801e0ba:	4798      	blx	r3
 801e0bc:	2000      	movs	r0, #0
 801e0be:	e7e0      	b.n	801e082 <_raise_r+0x12>

0801e0c0 <raise>:
 801e0c0:	4b02      	ldr	r3, [pc, #8]	; (801e0cc <raise+0xc>)
 801e0c2:	4601      	mov	r1, r0
 801e0c4:	6818      	ldr	r0, [r3, #0]
 801e0c6:	f7ff bfd3 	b.w	801e070 <_raise_r>
 801e0ca:	bf00      	nop
 801e0cc:	200000a4 	.word	0x200000a4

0801e0d0 <_kill_r>:
 801e0d0:	b538      	push	{r3, r4, r5, lr}
 801e0d2:	4d07      	ldr	r5, [pc, #28]	; (801e0f0 <_kill_r+0x20>)
 801e0d4:	2300      	movs	r3, #0
 801e0d6:	4604      	mov	r4, r0
 801e0d8:	4608      	mov	r0, r1
 801e0da:	4611      	mov	r1, r2
 801e0dc:	602b      	str	r3, [r5, #0]
 801e0de:	f7ef fc11 	bl	800d904 <_kill>
 801e0e2:	1c43      	adds	r3, r0, #1
 801e0e4:	d102      	bne.n	801e0ec <_kill_r+0x1c>
 801e0e6:	682b      	ldr	r3, [r5, #0]
 801e0e8:	b103      	cbz	r3, 801e0ec <_kill_r+0x1c>
 801e0ea:	6023      	str	r3, [r4, #0]
 801e0ec:	bd38      	pop	{r3, r4, r5, pc}
 801e0ee:	bf00      	nop
 801e0f0:	20037400 	.word	0x20037400

0801e0f4 <_getpid_r>:
 801e0f4:	f7ef bbfe 	b.w	800d8f4 <_getpid>

0801e0f8 <__sread>:
 801e0f8:	b510      	push	{r4, lr}
 801e0fa:	460c      	mov	r4, r1
 801e0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e100:	f000 f894 	bl	801e22c <_read_r>
 801e104:	2800      	cmp	r0, #0
 801e106:	bfab      	itete	ge
 801e108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e10a:	89a3      	ldrhlt	r3, [r4, #12]
 801e10c:	181b      	addge	r3, r3, r0
 801e10e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e112:	bfac      	ite	ge
 801e114:	6563      	strge	r3, [r4, #84]	; 0x54
 801e116:	81a3      	strhlt	r3, [r4, #12]
 801e118:	bd10      	pop	{r4, pc}

0801e11a <__swrite>:
 801e11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e11e:	461f      	mov	r7, r3
 801e120:	898b      	ldrh	r3, [r1, #12]
 801e122:	05db      	lsls	r3, r3, #23
 801e124:	4605      	mov	r5, r0
 801e126:	460c      	mov	r4, r1
 801e128:	4616      	mov	r6, r2
 801e12a:	d505      	bpl.n	801e138 <__swrite+0x1e>
 801e12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e130:	2302      	movs	r3, #2
 801e132:	2200      	movs	r2, #0
 801e134:	f000 f868 	bl	801e208 <_lseek_r>
 801e138:	89a3      	ldrh	r3, [r4, #12]
 801e13a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e13e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e142:	81a3      	strh	r3, [r4, #12]
 801e144:	4632      	mov	r2, r6
 801e146:	463b      	mov	r3, r7
 801e148:	4628      	mov	r0, r5
 801e14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e14e:	f000 b817 	b.w	801e180 <_write_r>

0801e152 <__sseek>:
 801e152:	b510      	push	{r4, lr}
 801e154:	460c      	mov	r4, r1
 801e156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e15a:	f000 f855 	bl	801e208 <_lseek_r>
 801e15e:	1c43      	adds	r3, r0, #1
 801e160:	89a3      	ldrh	r3, [r4, #12]
 801e162:	bf15      	itete	ne
 801e164:	6560      	strne	r0, [r4, #84]	; 0x54
 801e166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e16a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e16e:	81a3      	strheq	r3, [r4, #12]
 801e170:	bf18      	it	ne
 801e172:	81a3      	strhne	r3, [r4, #12]
 801e174:	bd10      	pop	{r4, pc}

0801e176 <__sclose>:
 801e176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e17a:	f000 b813 	b.w	801e1a4 <_close_r>
	...

0801e180 <_write_r>:
 801e180:	b538      	push	{r3, r4, r5, lr}
 801e182:	4d07      	ldr	r5, [pc, #28]	; (801e1a0 <_write_r+0x20>)
 801e184:	4604      	mov	r4, r0
 801e186:	4608      	mov	r0, r1
 801e188:	4611      	mov	r1, r2
 801e18a:	2200      	movs	r2, #0
 801e18c:	602a      	str	r2, [r5, #0]
 801e18e:	461a      	mov	r2, r3
 801e190:	f7ef fbef 	bl	800d972 <_write>
 801e194:	1c43      	adds	r3, r0, #1
 801e196:	d102      	bne.n	801e19e <_write_r+0x1e>
 801e198:	682b      	ldr	r3, [r5, #0]
 801e19a:	b103      	cbz	r3, 801e19e <_write_r+0x1e>
 801e19c:	6023      	str	r3, [r4, #0]
 801e19e:	bd38      	pop	{r3, r4, r5, pc}
 801e1a0:	20037400 	.word	0x20037400

0801e1a4 <_close_r>:
 801e1a4:	b538      	push	{r3, r4, r5, lr}
 801e1a6:	4d06      	ldr	r5, [pc, #24]	; (801e1c0 <_close_r+0x1c>)
 801e1a8:	2300      	movs	r3, #0
 801e1aa:	4604      	mov	r4, r0
 801e1ac:	4608      	mov	r0, r1
 801e1ae:	602b      	str	r3, [r5, #0]
 801e1b0:	f7ef fbfb 	bl	800d9aa <_close>
 801e1b4:	1c43      	adds	r3, r0, #1
 801e1b6:	d102      	bne.n	801e1be <_close_r+0x1a>
 801e1b8:	682b      	ldr	r3, [r5, #0]
 801e1ba:	b103      	cbz	r3, 801e1be <_close_r+0x1a>
 801e1bc:	6023      	str	r3, [r4, #0]
 801e1be:	bd38      	pop	{r3, r4, r5, pc}
 801e1c0:	20037400 	.word	0x20037400

0801e1c4 <_fstat_r>:
 801e1c4:	b538      	push	{r3, r4, r5, lr}
 801e1c6:	4d07      	ldr	r5, [pc, #28]	; (801e1e4 <_fstat_r+0x20>)
 801e1c8:	2300      	movs	r3, #0
 801e1ca:	4604      	mov	r4, r0
 801e1cc:	4608      	mov	r0, r1
 801e1ce:	4611      	mov	r1, r2
 801e1d0:	602b      	str	r3, [r5, #0]
 801e1d2:	f7ef fbf6 	bl	800d9c2 <_fstat>
 801e1d6:	1c43      	adds	r3, r0, #1
 801e1d8:	d102      	bne.n	801e1e0 <_fstat_r+0x1c>
 801e1da:	682b      	ldr	r3, [r5, #0]
 801e1dc:	b103      	cbz	r3, 801e1e0 <_fstat_r+0x1c>
 801e1de:	6023      	str	r3, [r4, #0]
 801e1e0:	bd38      	pop	{r3, r4, r5, pc}
 801e1e2:	bf00      	nop
 801e1e4:	20037400 	.word	0x20037400

0801e1e8 <_isatty_r>:
 801e1e8:	b538      	push	{r3, r4, r5, lr}
 801e1ea:	4d06      	ldr	r5, [pc, #24]	; (801e204 <_isatty_r+0x1c>)
 801e1ec:	2300      	movs	r3, #0
 801e1ee:	4604      	mov	r4, r0
 801e1f0:	4608      	mov	r0, r1
 801e1f2:	602b      	str	r3, [r5, #0]
 801e1f4:	f7ef fbf5 	bl	800d9e2 <_isatty>
 801e1f8:	1c43      	adds	r3, r0, #1
 801e1fa:	d102      	bne.n	801e202 <_isatty_r+0x1a>
 801e1fc:	682b      	ldr	r3, [r5, #0]
 801e1fe:	b103      	cbz	r3, 801e202 <_isatty_r+0x1a>
 801e200:	6023      	str	r3, [r4, #0]
 801e202:	bd38      	pop	{r3, r4, r5, pc}
 801e204:	20037400 	.word	0x20037400

0801e208 <_lseek_r>:
 801e208:	b538      	push	{r3, r4, r5, lr}
 801e20a:	4d07      	ldr	r5, [pc, #28]	; (801e228 <_lseek_r+0x20>)
 801e20c:	4604      	mov	r4, r0
 801e20e:	4608      	mov	r0, r1
 801e210:	4611      	mov	r1, r2
 801e212:	2200      	movs	r2, #0
 801e214:	602a      	str	r2, [r5, #0]
 801e216:	461a      	mov	r2, r3
 801e218:	f7ef fbee 	bl	800d9f8 <_lseek>
 801e21c:	1c43      	adds	r3, r0, #1
 801e21e:	d102      	bne.n	801e226 <_lseek_r+0x1e>
 801e220:	682b      	ldr	r3, [r5, #0]
 801e222:	b103      	cbz	r3, 801e226 <_lseek_r+0x1e>
 801e224:	6023      	str	r3, [r4, #0]
 801e226:	bd38      	pop	{r3, r4, r5, pc}
 801e228:	20037400 	.word	0x20037400

0801e22c <_read_r>:
 801e22c:	b538      	push	{r3, r4, r5, lr}
 801e22e:	4d07      	ldr	r5, [pc, #28]	; (801e24c <_read_r+0x20>)
 801e230:	4604      	mov	r4, r0
 801e232:	4608      	mov	r0, r1
 801e234:	4611      	mov	r1, r2
 801e236:	2200      	movs	r2, #0
 801e238:	602a      	str	r2, [r5, #0]
 801e23a:	461a      	mov	r2, r3
 801e23c:	f7ef fb7c 	bl	800d938 <_read>
 801e240:	1c43      	adds	r3, r0, #1
 801e242:	d102      	bne.n	801e24a <_read_r+0x1e>
 801e244:	682b      	ldr	r3, [r5, #0]
 801e246:	b103      	cbz	r3, 801e24a <_read_r+0x1e>
 801e248:	6023      	str	r3, [r4, #0]
 801e24a:	bd38      	pop	{r3, r4, r5, pc}
 801e24c:	20037400 	.word	0x20037400

0801e250 <cos>:
 801e250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e252:	ec53 2b10 	vmov	r2, r3, d0
 801e256:	4826      	ldr	r0, [pc, #152]	; (801e2f0 <cos+0xa0>)
 801e258:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801e25c:	4281      	cmp	r1, r0
 801e25e:	dc06      	bgt.n	801e26e <cos+0x1e>
 801e260:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801e2e8 <cos+0x98>
 801e264:	b005      	add	sp, #20
 801e266:	f85d eb04 	ldr.w	lr, [sp], #4
 801e26a:	f001 b839 	b.w	801f2e0 <__kernel_cos>
 801e26e:	4821      	ldr	r0, [pc, #132]	; (801e2f4 <cos+0xa4>)
 801e270:	4281      	cmp	r1, r0
 801e272:	dd09      	ble.n	801e288 <cos+0x38>
 801e274:	ee10 0a10 	vmov	r0, s0
 801e278:	4619      	mov	r1, r3
 801e27a:	f7e2 f81d 	bl	80002b8 <__aeabi_dsub>
 801e27e:	ec41 0b10 	vmov	d0, r0, r1
 801e282:	b005      	add	sp, #20
 801e284:	f85d fb04 	ldr.w	pc, [sp], #4
 801e288:	4668      	mov	r0, sp
 801e28a:	f000 fd69 	bl	801ed60 <__ieee754_rem_pio2>
 801e28e:	f000 0003 	and.w	r0, r0, #3
 801e292:	2801      	cmp	r0, #1
 801e294:	d00b      	beq.n	801e2ae <cos+0x5e>
 801e296:	2802      	cmp	r0, #2
 801e298:	d016      	beq.n	801e2c8 <cos+0x78>
 801e29a:	b9e0      	cbnz	r0, 801e2d6 <cos+0x86>
 801e29c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e2a0:	ed9d 0b00 	vldr	d0, [sp]
 801e2a4:	f001 f81c 	bl	801f2e0 <__kernel_cos>
 801e2a8:	ec51 0b10 	vmov	r0, r1, d0
 801e2ac:	e7e7      	b.n	801e27e <cos+0x2e>
 801e2ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e2b2:	ed9d 0b00 	vldr	d0, [sp]
 801e2b6:	f001 fc2b 	bl	801fb10 <__kernel_sin>
 801e2ba:	ec53 2b10 	vmov	r2, r3, d0
 801e2be:	ee10 0a10 	vmov	r0, s0
 801e2c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801e2c6:	e7da      	b.n	801e27e <cos+0x2e>
 801e2c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e2cc:	ed9d 0b00 	vldr	d0, [sp]
 801e2d0:	f001 f806 	bl	801f2e0 <__kernel_cos>
 801e2d4:	e7f1      	b.n	801e2ba <cos+0x6a>
 801e2d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e2da:	ed9d 0b00 	vldr	d0, [sp]
 801e2de:	2001      	movs	r0, #1
 801e2e0:	f001 fc16 	bl	801fb10 <__kernel_sin>
 801e2e4:	e7e0      	b.n	801e2a8 <cos+0x58>
 801e2e6:	bf00      	nop
	...
 801e2f0:	3fe921fb 	.word	0x3fe921fb
 801e2f4:	7fefffff 	.word	0x7fefffff

0801e2f8 <sin>:
 801e2f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e2fa:	ec53 2b10 	vmov	r2, r3, d0
 801e2fe:	4828      	ldr	r0, [pc, #160]	; (801e3a0 <sin+0xa8>)
 801e300:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801e304:	4281      	cmp	r1, r0
 801e306:	dc07      	bgt.n	801e318 <sin+0x20>
 801e308:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801e398 <sin+0xa0>
 801e30c:	2000      	movs	r0, #0
 801e30e:	b005      	add	sp, #20
 801e310:	f85d eb04 	ldr.w	lr, [sp], #4
 801e314:	f001 bbfc 	b.w	801fb10 <__kernel_sin>
 801e318:	4822      	ldr	r0, [pc, #136]	; (801e3a4 <sin+0xac>)
 801e31a:	4281      	cmp	r1, r0
 801e31c:	dd09      	ble.n	801e332 <sin+0x3a>
 801e31e:	ee10 0a10 	vmov	r0, s0
 801e322:	4619      	mov	r1, r3
 801e324:	f7e1 ffc8 	bl	80002b8 <__aeabi_dsub>
 801e328:	ec41 0b10 	vmov	d0, r0, r1
 801e32c:	b005      	add	sp, #20
 801e32e:	f85d fb04 	ldr.w	pc, [sp], #4
 801e332:	4668      	mov	r0, sp
 801e334:	f000 fd14 	bl	801ed60 <__ieee754_rem_pio2>
 801e338:	f000 0003 	and.w	r0, r0, #3
 801e33c:	2801      	cmp	r0, #1
 801e33e:	d00c      	beq.n	801e35a <sin+0x62>
 801e340:	2802      	cmp	r0, #2
 801e342:	d011      	beq.n	801e368 <sin+0x70>
 801e344:	b9f0      	cbnz	r0, 801e384 <sin+0x8c>
 801e346:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e34a:	ed9d 0b00 	vldr	d0, [sp]
 801e34e:	2001      	movs	r0, #1
 801e350:	f001 fbde 	bl	801fb10 <__kernel_sin>
 801e354:	ec51 0b10 	vmov	r0, r1, d0
 801e358:	e7e6      	b.n	801e328 <sin+0x30>
 801e35a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e35e:	ed9d 0b00 	vldr	d0, [sp]
 801e362:	f000 ffbd 	bl	801f2e0 <__kernel_cos>
 801e366:	e7f5      	b.n	801e354 <sin+0x5c>
 801e368:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e36c:	ed9d 0b00 	vldr	d0, [sp]
 801e370:	2001      	movs	r0, #1
 801e372:	f001 fbcd 	bl	801fb10 <__kernel_sin>
 801e376:	ec53 2b10 	vmov	r2, r3, d0
 801e37a:	ee10 0a10 	vmov	r0, s0
 801e37e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801e382:	e7d1      	b.n	801e328 <sin+0x30>
 801e384:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e388:	ed9d 0b00 	vldr	d0, [sp]
 801e38c:	f000 ffa8 	bl	801f2e0 <__kernel_cos>
 801e390:	e7f1      	b.n	801e376 <sin+0x7e>
 801e392:	bf00      	nop
 801e394:	f3af 8000 	nop.w
	...
 801e3a0:	3fe921fb 	.word	0x3fe921fb
 801e3a4:	7fefffff 	.word	0x7fefffff

0801e3a8 <acos>:
 801e3a8:	b538      	push	{r3, r4, r5, lr}
 801e3aa:	ed2d 8b02 	vpush	{d8}
 801e3ae:	ec55 4b10 	vmov	r4, r5, d0
 801e3b2:	f000 f861 	bl	801e478 <__ieee754_acos>
 801e3b6:	4622      	mov	r2, r4
 801e3b8:	462b      	mov	r3, r5
 801e3ba:	4620      	mov	r0, r4
 801e3bc:	4629      	mov	r1, r5
 801e3be:	eeb0 8a40 	vmov.f32	s16, s0
 801e3c2:	eef0 8a60 	vmov.f32	s17, s1
 801e3c6:	f7e2 fbc9 	bl	8000b5c <__aeabi_dcmpun>
 801e3ca:	b9a8      	cbnz	r0, 801e3f8 <acos+0x50>
 801e3cc:	ec45 4b10 	vmov	d0, r4, r5
 801e3d0:	f001 fc5c 	bl	801fc8c <fabs>
 801e3d4:	4b0c      	ldr	r3, [pc, #48]	; (801e408 <acos+0x60>)
 801e3d6:	ec51 0b10 	vmov	r0, r1, d0
 801e3da:	2200      	movs	r2, #0
 801e3dc:	f7e2 fbb4 	bl	8000b48 <__aeabi_dcmpgt>
 801e3e0:	b150      	cbz	r0, 801e3f8 <acos+0x50>
 801e3e2:	f7fb fa95 	bl	8019910 <__errno>
 801e3e6:	ecbd 8b02 	vpop	{d8}
 801e3ea:	2321      	movs	r3, #33	; 0x21
 801e3ec:	6003      	str	r3, [r0, #0]
 801e3ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e3f2:	4806      	ldr	r0, [pc, #24]	; (801e40c <acos+0x64>)
 801e3f4:	f7ff b934 	b.w	801d660 <nan>
 801e3f8:	eeb0 0a48 	vmov.f32	s0, s16
 801e3fc:	eef0 0a68 	vmov.f32	s1, s17
 801e400:	ecbd 8b02 	vpop	{d8}
 801e404:	bd38      	pop	{r3, r4, r5, pc}
 801e406:	bf00      	nop
 801e408:	3ff00000 	.word	0x3ff00000
 801e40c:	08025890 	.word	0x08025890

0801e410 <asin>:
 801e410:	b538      	push	{r3, r4, r5, lr}
 801e412:	ed2d 8b02 	vpush	{d8}
 801e416:	ec55 4b10 	vmov	r4, r5, d0
 801e41a:	f000 fa8d 	bl	801e938 <__ieee754_asin>
 801e41e:	4622      	mov	r2, r4
 801e420:	462b      	mov	r3, r5
 801e422:	4620      	mov	r0, r4
 801e424:	4629      	mov	r1, r5
 801e426:	eeb0 8a40 	vmov.f32	s16, s0
 801e42a:	eef0 8a60 	vmov.f32	s17, s1
 801e42e:	f7e2 fb95 	bl	8000b5c <__aeabi_dcmpun>
 801e432:	b9a8      	cbnz	r0, 801e460 <asin+0x50>
 801e434:	ec45 4b10 	vmov	d0, r4, r5
 801e438:	f001 fc28 	bl	801fc8c <fabs>
 801e43c:	4b0c      	ldr	r3, [pc, #48]	; (801e470 <asin+0x60>)
 801e43e:	ec51 0b10 	vmov	r0, r1, d0
 801e442:	2200      	movs	r2, #0
 801e444:	f7e2 fb80 	bl	8000b48 <__aeabi_dcmpgt>
 801e448:	b150      	cbz	r0, 801e460 <asin+0x50>
 801e44a:	f7fb fa61 	bl	8019910 <__errno>
 801e44e:	ecbd 8b02 	vpop	{d8}
 801e452:	2321      	movs	r3, #33	; 0x21
 801e454:	6003      	str	r3, [r0, #0]
 801e456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e45a:	4806      	ldr	r0, [pc, #24]	; (801e474 <asin+0x64>)
 801e45c:	f7ff b900 	b.w	801d660 <nan>
 801e460:	eeb0 0a48 	vmov.f32	s0, s16
 801e464:	eef0 0a68 	vmov.f32	s1, s17
 801e468:	ecbd 8b02 	vpop	{d8}
 801e46c:	bd38      	pop	{r3, r4, r5, pc}
 801e46e:	bf00      	nop
 801e470:	3ff00000 	.word	0x3ff00000
 801e474:	08025890 	.word	0x08025890

0801e478 <__ieee754_acos>:
 801e478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e47c:	ec55 4b10 	vmov	r4, r5, d0
 801e480:	49b7      	ldr	r1, [pc, #732]	; (801e760 <__ieee754_acos+0x2e8>)
 801e482:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801e486:	428b      	cmp	r3, r1
 801e488:	dd1b      	ble.n	801e4c2 <__ieee754_acos+0x4a>
 801e48a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801e48e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e492:	4323      	orrs	r3, r4
 801e494:	d106      	bne.n	801e4a4 <__ieee754_acos+0x2c>
 801e496:	2d00      	cmp	r5, #0
 801e498:	f300 8211 	bgt.w	801e8be <__ieee754_acos+0x446>
 801e49c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 801e6f8 <__ieee754_acos+0x280>
 801e4a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4a4:	ee10 2a10 	vmov	r2, s0
 801e4a8:	462b      	mov	r3, r5
 801e4aa:	ee10 0a10 	vmov	r0, s0
 801e4ae:	4629      	mov	r1, r5
 801e4b0:	f7e1 ff02 	bl	80002b8 <__aeabi_dsub>
 801e4b4:	4602      	mov	r2, r0
 801e4b6:	460b      	mov	r3, r1
 801e4b8:	f7e2 f9e0 	bl	800087c <__aeabi_ddiv>
 801e4bc:	ec41 0b10 	vmov	d0, r0, r1
 801e4c0:	e7ee      	b.n	801e4a0 <__ieee754_acos+0x28>
 801e4c2:	49a8      	ldr	r1, [pc, #672]	; (801e764 <__ieee754_acos+0x2ec>)
 801e4c4:	428b      	cmp	r3, r1
 801e4c6:	f300 8087 	bgt.w	801e5d8 <__ieee754_acos+0x160>
 801e4ca:	4aa7      	ldr	r2, [pc, #668]	; (801e768 <__ieee754_acos+0x2f0>)
 801e4cc:	4293      	cmp	r3, r2
 801e4ce:	f340 81f9 	ble.w	801e8c4 <__ieee754_acos+0x44c>
 801e4d2:	ee10 2a10 	vmov	r2, s0
 801e4d6:	ee10 0a10 	vmov	r0, s0
 801e4da:	462b      	mov	r3, r5
 801e4dc:	4629      	mov	r1, r5
 801e4de:	f7e2 f8a3 	bl	8000628 <__aeabi_dmul>
 801e4e2:	a387      	add	r3, pc, #540	; (adr r3, 801e700 <__ieee754_acos+0x288>)
 801e4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4e8:	4606      	mov	r6, r0
 801e4ea:	460f      	mov	r7, r1
 801e4ec:	f7e2 f89c 	bl	8000628 <__aeabi_dmul>
 801e4f0:	a385      	add	r3, pc, #532	; (adr r3, 801e708 <__ieee754_acos+0x290>)
 801e4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4f6:	f7e1 fee1 	bl	80002bc <__adddf3>
 801e4fa:	4632      	mov	r2, r6
 801e4fc:	463b      	mov	r3, r7
 801e4fe:	f7e2 f893 	bl	8000628 <__aeabi_dmul>
 801e502:	a383      	add	r3, pc, #524	; (adr r3, 801e710 <__ieee754_acos+0x298>)
 801e504:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e508:	f7e1 fed6 	bl	80002b8 <__aeabi_dsub>
 801e50c:	4632      	mov	r2, r6
 801e50e:	463b      	mov	r3, r7
 801e510:	f7e2 f88a 	bl	8000628 <__aeabi_dmul>
 801e514:	a380      	add	r3, pc, #512	; (adr r3, 801e718 <__ieee754_acos+0x2a0>)
 801e516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e51a:	f7e1 fecf 	bl	80002bc <__adddf3>
 801e51e:	4632      	mov	r2, r6
 801e520:	463b      	mov	r3, r7
 801e522:	f7e2 f881 	bl	8000628 <__aeabi_dmul>
 801e526:	a37e      	add	r3, pc, #504	; (adr r3, 801e720 <__ieee754_acos+0x2a8>)
 801e528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e52c:	f7e1 fec4 	bl	80002b8 <__aeabi_dsub>
 801e530:	4632      	mov	r2, r6
 801e532:	463b      	mov	r3, r7
 801e534:	f7e2 f878 	bl	8000628 <__aeabi_dmul>
 801e538:	a37b      	add	r3, pc, #492	; (adr r3, 801e728 <__ieee754_acos+0x2b0>)
 801e53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e53e:	f7e1 febd 	bl	80002bc <__adddf3>
 801e542:	4632      	mov	r2, r6
 801e544:	463b      	mov	r3, r7
 801e546:	f7e2 f86f 	bl	8000628 <__aeabi_dmul>
 801e54a:	a379      	add	r3, pc, #484	; (adr r3, 801e730 <__ieee754_acos+0x2b8>)
 801e54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e550:	4680      	mov	r8, r0
 801e552:	4689      	mov	r9, r1
 801e554:	4630      	mov	r0, r6
 801e556:	4639      	mov	r1, r7
 801e558:	f7e2 f866 	bl	8000628 <__aeabi_dmul>
 801e55c:	a376      	add	r3, pc, #472	; (adr r3, 801e738 <__ieee754_acos+0x2c0>)
 801e55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e562:	f7e1 fea9 	bl	80002b8 <__aeabi_dsub>
 801e566:	4632      	mov	r2, r6
 801e568:	463b      	mov	r3, r7
 801e56a:	f7e2 f85d 	bl	8000628 <__aeabi_dmul>
 801e56e:	a374      	add	r3, pc, #464	; (adr r3, 801e740 <__ieee754_acos+0x2c8>)
 801e570:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e574:	f7e1 fea2 	bl	80002bc <__adddf3>
 801e578:	4632      	mov	r2, r6
 801e57a:	463b      	mov	r3, r7
 801e57c:	f7e2 f854 	bl	8000628 <__aeabi_dmul>
 801e580:	a371      	add	r3, pc, #452	; (adr r3, 801e748 <__ieee754_acos+0x2d0>)
 801e582:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e586:	f7e1 fe97 	bl	80002b8 <__aeabi_dsub>
 801e58a:	4632      	mov	r2, r6
 801e58c:	463b      	mov	r3, r7
 801e58e:	f7e2 f84b 	bl	8000628 <__aeabi_dmul>
 801e592:	4b76      	ldr	r3, [pc, #472]	; (801e76c <__ieee754_acos+0x2f4>)
 801e594:	2200      	movs	r2, #0
 801e596:	f7e1 fe91 	bl	80002bc <__adddf3>
 801e59a:	4602      	mov	r2, r0
 801e59c:	460b      	mov	r3, r1
 801e59e:	4640      	mov	r0, r8
 801e5a0:	4649      	mov	r1, r9
 801e5a2:	f7e2 f96b 	bl	800087c <__aeabi_ddiv>
 801e5a6:	4622      	mov	r2, r4
 801e5a8:	462b      	mov	r3, r5
 801e5aa:	f7e2 f83d 	bl	8000628 <__aeabi_dmul>
 801e5ae:	4602      	mov	r2, r0
 801e5b0:	460b      	mov	r3, r1
 801e5b2:	a167      	add	r1, pc, #412	; (adr r1, 801e750 <__ieee754_acos+0x2d8>)
 801e5b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e5b8:	f7e1 fe7e 	bl	80002b8 <__aeabi_dsub>
 801e5bc:	4602      	mov	r2, r0
 801e5be:	460b      	mov	r3, r1
 801e5c0:	4620      	mov	r0, r4
 801e5c2:	4629      	mov	r1, r5
 801e5c4:	f7e1 fe78 	bl	80002b8 <__aeabi_dsub>
 801e5c8:	4602      	mov	r2, r0
 801e5ca:	460b      	mov	r3, r1
 801e5cc:	a162      	add	r1, pc, #392	; (adr r1, 801e758 <__ieee754_acos+0x2e0>)
 801e5ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e5d2:	f7e1 fe71 	bl	80002b8 <__aeabi_dsub>
 801e5d6:	e771      	b.n	801e4bc <__ieee754_acos+0x44>
 801e5d8:	2d00      	cmp	r5, #0
 801e5da:	f280 80cb 	bge.w	801e774 <__ieee754_acos+0x2fc>
 801e5de:	ee10 0a10 	vmov	r0, s0
 801e5e2:	4b62      	ldr	r3, [pc, #392]	; (801e76c <__ieee754_acos+0x2f4>)
 801e5e4:	2200      	movs	r2, #0
 801e5e6:	4629      	mov	r1, r5
 801e5e8:	f7e1 fe68 	bl	80002bc <__adddf3>
 801e5ec:	4b60      	ldr	r3, [pc, #384]	; (801e770 <__ieee754_acos+0x2f8>)
 801e5ee:	2200      	movs	r2, #0
 801e5f0:	f7e2 f81a 	bl	8000628 <__aeabi_dmul>
 801e5f4:	a342      	add	r3, pc, #264	; (adr r3, 801e700 <__ieee754_acos+0x288>)
 801e5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5fa:	4604      	mov	r4, r0
 801e5fc:	460d      	mov	r5, r1
 801e5fe:	f7e2 f813 	bl	8000628 <__aeabi_dmul>
 801e602:	a341      	add	r3, pc, #260	; (adr r3, 801e708 <__ieee754_acos+0x290>)
 801e604:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e608:	f7e1 fe58 	bl	80002bc <__adddf3>
 801e60c:	4622      	mov	r2, r4
 801e60e:	462b      	mov	r3, r5
 801e610:	f7e2 f80a 	bl	8000628 <__aeabi_dmul>
 801e614:	a33e      	add	r3, pc, #248	; (adr r3, 801e710 <__ieee754_acos+0x298>)
 801e616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e61a:	f7e1 fe4d 	bl	80002b8 <__aeabi_dsub>
 801e61e:	4622      	mov	r2, r4
 801e620:	462b      	mov	r3, r5
 801e622:	f7e2 f801 	bl	8000628 <__aeabi_dmul>
 801e626:	a33c      	add	r3, pc, #240	; (adr r3, 801e718 <__ieee754_acos+0x2a0>)
 801e628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e62c:	f7e1 fe46 	bl	80002bc <__adddf3>
 801e630:	4622      	mov	r2, r4
 801e632:	462b      	mov	r3, r5
 801e634:	f7e1 fff8 	bl	8000628 <__aeabi_dmul>
 801e638:	a339      	add	r3, pc, #228	; (adr r3, 801e720 <__ieee754_acos+0x2a8>)
 801e63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e63e:	f7e1 fe3b 	bl	80002b8 <__aeabi_dsub>
 801e642:	4622      	mov	r2, r4
 801e644:	462b      	mov	r3, r5
 801e646:	f7e1 ffef 	bl	8000628 <__aeabi_dmul>
 801e64a:	a337      	add	r3, pc, #220	; (adr r3, 801e728 <__ieee754_acos+0x2b0>)
 801e64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e650:	f7e1 fe34 	bl	80002bc <__adddf3>
 801e654:	4622      	mov	r2, r4
 801e656:	462b      	mov	r3, r5
 801e658:	f7e1 ffe6 	bl	8000628 <__aeabi_dmul>
 801e65c:	ec45 4b10 	vmov	d0, r4, r5
 801e660:	4680      	mov	r8, r0
 801e662:	4689      	mov	r9, r1
 801e664:	f000 fd88 	bl	801f178 <__ieee754_sqrt>
 801e668:	a331      	add	r3, pc, #196	; (adr r3, 801e730 <__ieee754_acos+0x2b8>)
 801e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e66e:	4620      	mov	r0, r4
 801e670:	4629      	mov	r1, r5
 801e672:	ec57 6b10 	vmov	r6, r7, d0
 801e676:	f7e1 ffd7 	bl	8000628 <__aeabi_dmul>
 801e67a:	a32f      	add	r3, pc, #188	; (adr r3, 801e738 <__ieee754_acos+0x2c0>)
 801e67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e680:	f7e1 fe1a 	bl	80002b8 <__aeabi_dsub>
 801e684:	4622      	mov	r2, r4
 801e686:	462b      	mov	r3, r5
 801e688:	f7e1 ffce 	bl	8000628 <__aeabi_dmul>
 801e68c:	a32c      	add	r3, pc, #176	; (adr r3, 801e740 <__ieee754_acos+0x2c8>)
 801e68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e692:	f7e1 fe13 	bl	80002bc <__adddf3>
 801e696:	4622      	mov	r2, r4
 801e698:	462b      	mov	r3, r5
 801e69a:	f7e1 ffc5 	bl	8000628 <__aeabi_dmul>
 801e69e:	a32a      	add	r3, pc, #168	; (adr r3, 801e748 <__ieee754_acos+0x2d0>)
 801e6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6a4:	f7e1 fe08 	bl	80002b8 <__aeabi_dsub>
 801e6a8:	4622      	mov	r2, r4
 801e6aa:	462b      	mov	r3, r5
 801e6ac:	f7e1 ffbc 	bl	8000628 <__aeabi_dmul>
 801e6b0:	4b2e      	ldr	r3, [pc, #184]	; (801e76c <__ieee754_acos+0x2f4>)
 801e6b2:	2200      	movs	r2, #0
 801e6b4:	f7e1 fe02 	bl	80002bc <__adddf3>
 801e6b8:	4602      	mov	r2, r0
 801e6ba:	460b      	mov	r3, r1
 801e6bc:	4640      	mov	r0, r8
 801e6be:	4649      	mov	r1, r9
 801e6c0:	f7e2 f8dc 	bl	800087c <__aeabi_ddiv>
 801e6c4:	4632      	mov	r2, r6
 801e6c6:	463b      	mov	r3, r7
 801e6c8:	f7e1 ffae 	bl	8000628 <__aeabi_dmul>
 801e6cc:	a320      	add	r3, pc, #128	; (adr r3, 801e750 <__ieee754_acos+0x2d8>)
 801e6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6d2:	f7e1 fdf1 	bl	80002b8 <__aeabi_dsub>
 801e6d6:	4632      	mov	r2, r6
 801e6d8:	463b      	mov	r3, r7
 801e6da:	f7e1 fdef 	bl	80002bc <__adddf3>
 801e6de:	4602      	mov	r2, r0
 801e6e0:	460b      	mov	r3, r1
 801e6e2:	f7e1 fdeb 	bl	80002bc <__adddf3>
 801e6e6:	4602      	mov	r2, r0
 801e6e8:	460b      	mov	r3, r1
 801e6ea:	a103      	add	r1, pc, #12	; (adr r1, 801e6f8 <__ieee754_acos+0x280>)
 801e6ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e6f0:	e76f      	b.n	801e5d2 <__ieee754_acos+0x15a>
 801e6f2:	bf00      	nop
 801e6f4:	f3af 8000 	nop.w
 801e6f8:	54442d18 	.word	0x54442d18
 801e6fc:	400921fb 	.word	0x400921fb
 801e700:	0dfdf709 	.word	0x0dfdf709
 801e704:	3f023de1 	.word	0x3f023de1
 801e708:	7501b288 	.word	0x7501b288
 801e70c:	3f49efe0 	.word	0x3f49efe0
 801e710:	b5688f3b 	.word	0xb5688f3b
 801e714:	3fa48228 	.word	0x3fa48228
 801e718:	0e884455 	.word	0x0e884455
 801e71c:	3fc9c155 	.word	0x3fc9c155
 801e720:	03eb6f7d 	.word	0x03eb6f7d
 801e724:	3fd4d612 	.word	0x3fd4d612
 801e728:	55555555 	.word	0x55555555
 801e72c:	3fc55555 	.word	0x3fc55555
 801e730:	b12e9282 	.word	0xb12e9282
 801e734:	3fb3b8c5 	.word	0x3fb3b8c5
 801e738:	1b8d0159 	.word	0x1b8d0159
 801e73c:	3fe6066c 	.word	0x3fe6066c
 801e740:	9c598ac8 	.word	0x9c598ac8
 801e744:	40002ae5 	.word	0x40002ae5
 801e748:	1c8a2d4b 	.word	0x1c8a2d4b
 801e74c:	40033a27 	.word	0x40033a27
 801e750:	33145c07 	.word	0x33145c07
 801e754:	3c91a626 	.word	0x3c91a626
 801e758:	54442d18 	.word	0x54442d18
 801e75c:	3ff921fb 	.word	0x3ff921fb
 801e760:	3fefffff 	.word	0x3fefffff
 801e764:	3fdfffff 	.word	0x3fdfffff
 801e768:	3c600000 	.word	0x3c600000
 801e76c:	3ff00000 	.word	0x3ff00000
 801e770:	3fe00000 	.word	0x3fe00000
 801e774:	ee10 2a10 	vmov	r2, s0
 801e778:	462b      	mov	r3, r5
 801e77a:	496d      	ldr	r1, [pc, #436]	; (801e930 <__ieee754_acos+0x4b8>)
 801e77c:	2000      	movs	r0, #0
 801e77e:	f7e1 fd9b 	bl	80002b8 <__aeabi_dsub>
 801e782:	4b6c      	ldr	r3, [pc, #432]	; (801e934 <__ieee754_acos+0x4bc>)
 801e784:	2200      	movs	r2, #0
 801e786:	f7e1 ff4f 	bl	8000628 <__aeabi_dmul>
 801e78a:	4604      	mov	r4, r0
 801e78c:	460d      	mov	r5, r1
 801e78e:	ec45 4b10 	vmov	d0, r4, r5
 801e792:	f000 fcf1 	bl	801f178 <__ieee754_sqrt>
 801e796:	a34e      	add	r3, pc, #312	; (adr r3, 801e8d0 <__ieee754_acos+0x458>)
 801e798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e79c:	4620      	mov	r0, r4
 801e79e:	4629      	mov	r1, r5
 801e7a0:	ec59 8b10 	vmov	r8, r9, d0
 801e7a4:	f7e1 ff40 	bl	8000628 <__aeabi_dmul>
 801e7a8:	a34b      	add	r3, pc, #300	; (adr r3, 801e8d8 <__ieee754_acos+0x460>)
 801e7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7ae:	f7e1 fd85 	bl	80002bc <__adddf3>
 801e7b2:	4622      	mov	r2, r4
 801e7b4:	462b      	mov	r3, r5
 801e7b6:	f7e1 ff37 	bl	8000628 <__aeabi_dmul>
 801e7ba:	a349      	add	r3, pc, #292	; (adr r3, 801e8e0 <__ieee754_acos+0x468>)
 801e7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7c0:	f7e1 fd7a 	bl	80002b8 <__aeabi_dsub>
 801e7c4:	4622      	mov	r2, r4
 801e7c6:	462b      	mov	r3, r5
 801e7c8:	f7e1 ff2e 	bl	8000628 <__aeabi_dmul>
 801e7cc:	a346      	add	r3, pc, #280	; (adr r3, 801e8e8 <__ieee754_acos+0x470>)
 801e7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7d2:	f7e1 fd73 	bl	80002bc <__adddf3>
 801e7d6:	4622      	mov	r2, r4
 801e7d8:	462b      	mov	r3, r5
 801e7da:	f7e1 ff25 	bl	8000628 <__aeabi_dmul>
 801e7de:	a344      	add	r3, pc, #272	; (adr r3, 801e8f0 <__ieee754_acos+0x478>)
 801e7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7e4:	f7e1 fd68 	bl	80002b8 <__aeabi_dsub>
 801e7e8:	4622      	mov	r2, r4
 801e7ea:	462b      	mov	r3, r5
 801e7ec:	f7e1 ff1c 	bl	8000628 <__aeabi_dmul>
 801e7f0:	a341      	add	r3, pc, #260	; (adr r3, 801e8f8 <__ieee754_acos+0x480>)
 801e7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7f6:	f7e1 fd61 	bl	80002bc <__adddf3>
 801e7fa:	4622      	mov	r2, r4
 801e7fc:	462b      	mov	r3, r5
 801e7fe:	f7e1 ff13 	bl	8000628 <__aeabi_dmul>
 801e802:	a33f      	add	r3, pc, #252	; (adr r3, 801e900 <__ieee754_acos+0x488>)
 801e804:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e808:	4682      	mov	sl, r0
 801e80a:	468b      	mov	fp, r1
 801e80c:	4620      	mov	r0, r4
 801e80e:	4629      	mov	r1, r5
 801e810:	f7e1 ff0a 	bl	8000628 <__aeabi_dmul>
 801e814:	a33c      	add	r3, pc, #240	; (adr r3, 801e908 <__ieee754_acos+0x490>)
 801e816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e81a:	f7e1 fd4d 	bl	80002b8 <__aeabi_dsub>
 801e81e:	4622      	mov	r2, r4
 801e820:	462b      	mov	r3, r5
 801e822:	f7e1 ff01 	bl	8000628 <__aeabi_dmul>
 801e826:	a33a      	add	r3, pc, #232	; (adr r3, 801e910 <__ieee754_acos+0x498>)
 801e828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e82c:	f7e1 fd46 	bl	80002bc <__adddf3>
 801e830:	4622      	mov	r2, r4
 801e832:	462b      	mov	r3, r5
 801e834:	f7e1 fef8 	bl	8000628 <__aeabi_dmul>
 801e838:	a337      	add	r3, pc, #220	; (adr r3, 801e918 <__ieee754_acos+0x4a0>)
 801e83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e83e:	f7e1 fd3b 	bl	80002b8 <__aeabi_dsub>
 801e842:	4622      	mov	r2, r4
 801e844:	462b      	mov	r3, r5
 801e846:	f7e1 feef 	bl	8000628 <__aeabi_dmul>
 801e84a:	4b39      	ldr	r3, [pc, #228]	; (801e930 <__ieee754_acos+0x4b8>)
 801e84c:	2200      	movs	r2, #0
 801e84e:	f7e1 fd35 	bl	80002bc <__adddf3>
 801e852:	4602      	mov	r2, r0
 801e854:	460b      	mov	r3, r1
 801e856:	4650      	mov	r0, sl
 801e858:	4659      	mov	r1, fp
 801e85a:	f7e2 f80f 	bl	800087c <__aeabi_ddiv>
 801e85e:	4642      	mov	r2, r8
 801e860:	464b      	mov	r3, r9
 801e862:	f7e1 fee1 	bl	8000628 <__aeabi_dmul>
 801e866:	2600      	movs	r6, #0
 801e868:	4682      	mov	sl, r0
 801e86a:	468b      	mov	fp, r1
 801e86c:	4632      	mov	r2, r6
 801e86e:	464b      	mov	r3, r9
 801e870:	4630      	mov	r0, r6
 801e872:	4649      	mov	r1, r9
 801e874:	f7e1 fed8 	bl	8000628 <__aeabi_dmul>
 801e878:	4602      	mov	r2, r0
 801e87a:	460b      	mov	r3, r1
 801e87c:	4620      	mov	r0, r4
 801e87e:	4629      	mov	r1, r5
 801e880:	f7e1 fd1a 	bl	80002b8 <__aeabi_dsub>
 801e884:	4632      	mov	r2, r6
 801e886:	4604      	mov	r4, r0
 801e888:	460d      	mov	r5, r1
 801e88a:	464b      	mov	r3, r9
 801e88c:	4640      	mov	r0, r8
 801e88e:	4649      	mov	r1, r9
 801e890:	f7e1 fd14 	bl	80002bc <__adddf3>
 801e894:	4602      	mov	r2, r0
 801e896:	460b      	mov	r3, r1
 801e898:	4620      	mov	r0, r4
 801e89a:	4629      	mov	r1, r5
 801e89c:	f7e1 ffee 	bl	800087c <__aeabi_ddiv>
 801e8a0:	4602      	mov	r2, r0
 801e8a2:	460b      	mov	r3, r1
 801e8a4:	4650      	mov	r0, sl
 801e8a6:	4659      	mov	r1, fp
 801e8a8:	f7e1 fd08 	bl	80002bc <__adddf3>
 801e8ac:	4632      	mov	r2, r6
 801e8ae:	464b      	mov	r3, r9
 801e8b0:	f7e1 fd04 	bl	80002bc <__adddf3>
 801e8b4:	4602      	mov	r2, r0
 801e8b6:	460b      	mov	r3, r1
 801e8b8:	f7e1 fd00 	bl	80002bc <__adddf3>
 801e8bc:	e5fe      	b.n	801e4bc <__ieee754_acos+0x44>
 801e8be:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801e920 <__ieee754_acos+0x4a8>
 801e8c2:	e5ed      	b.n	801e4a0 <__ieee754_acos+0x28>
 801e8c4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801e928 <__ieee754_acos+0x4b0>
 801e8c8:	e5ea      	b.n	801e4a0 <__ieee754_acos+0x28>
 801e8ca:	bf00      	nop
 801e8cc:	f3af 8000 	nop.w
 801e8d0:	0dfdf709 	.word	0x0dfdf709
 801e8d4:	3f023de1 	.word	0x3f023de1
 801e8d8:	7501b288 	.word	0x7501b288
 801e8dc:	3f49efe0 	.word	0x3f49efe0
 801e8e0:	b5688f3b 	.word	0xb5688f3b
 801e8e4:	3fa48228 	.word	0x3fa48228
 801e8e8:	0e884455 	.word	0x0e884455
 801e8ec:	3fc9c155 	.word	0x3fc9c155
 801e8f0:	03eb6f7d 	.word	0x03eb6f7d
 801e8f4:	3fd4d612 	.word	0x3fd4d612
 801e8f8:	55555555 	.word	0x55555555
 801e8fc:	3fc55555 	.word	0x3fc55555
 801e900:	b12e9282 	.word	0xb12e9282
 801e904:	3fb3b8c5 	.word	0x3fb3b8c5
 801e908:	1b8d0159 	.word	0x1b8d0159
 801e90c:	3fe6066c 	.word	0x3fe6066c
 801e910:	9c598ac8 	.word	0x9c598ac8
 801e914:	40002ae5 	.word	0x40002ae5
 801e918:	1c8a2d4b 	.word	0x1c8a2d4b
 801e91c:	40033a27 	.word	0x40033a27
	...
 801e928:	54442d18 	.word	0x54442d18
 801e92c:	3ff921fb 	.word	0x3ff921fb
 801e930:	3ff00000 	.word	0x3ff00000
 801e934:	3fe00000 	.word	0x3fe00000

0801e938 <__ieee754_asin>:
 801e938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e93c:	ed2d 8b04 	vpush	{d8-d9}
 801e940:	ec55 4b10 	vmov	r4, r5, d0
 801e944:	4bcc      	ldr	r3, [pc, #816]	; (801ec78 <__ieee754_asin+0x340>)
 801e946:	b083      	sub	sp, #12
 801e948:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801e94c:	4598      	cmp	r8, r3
 801e94e:	9501      	str	r5, [sp, #4]
 801e950:	dd35      	ble.n	801e9be <__ieee754_asin+0x86>
 801e952:	ee10 3a10 	vmov	r3, s0
 801e956:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801e95a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801e95e:	ea58 0303 	orrs.w	r3, r8, r3
 801e962:	d117      	bne.n	801e994 <__ieee754_asin+0x5c>
 801e964:	a3aa      	add	r3, pc, #680	; (adr r3, 801ec10 <__ieee754_asin+0x2d8>)
 801e966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e96a:	ee10 0a10 	vmov	r0, s0
 801e96e:	4629      	mov	r1, r5
 801e970:	f7e1 fe5a 	bl	8000628 <__aeabi_dmul>
 801e974:	a3a8      	add	r3, pc, #672	; (adr r3, 801ec18 <__ieee754_asin+0x2e0>)
 801e976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e97a:	4606      	mov	r6, r0
 801e97c:	460f      	mov	r7, r1
 801e97e:	4620      	mov	r0, r4
 801e980:	4629      	mov	r1, r5
 801e982:	f7e1 fe51 	bl	8000628 <__aeabi_dmul>
 801e986:	4602      	mov	r2, r0
 801e988:	460b      	mov	r3, r1
 801e98a:	4630      	mov	r0, r6
 801e98c:	4639      	mov	r1, r7
 801e98e:	f7e1 fc95 	bl	80002bc <__adddf3>
 801e992:	e00b      	b.n	801e9ac <__ieee754_asin+0x74>
 801e994:	ee10 2a10 	vmov	r2, s0
 801e998:	462b      	mov	r3, r5
 801e99a:	ee10 0a10 	vmov	r0, s0
 801e99e:	4629      	mov	r1, r5
 801e9a0:	f7e1 fc8a 	bl	80002b8 <__aeabi_dsub>
 801e9a4:	4602      	mov	r2, r0
 801e9a6:	460b      	mov	r3, r1
 801e9a8:	f7e1 ff68 	bl	800087c <__aeabi_ddiv>
 801e9ac:	4604      	mov	r4, r0
 801e9ae:	460d      	mov	r5, r1
 801e9b0:	ec45 4b10 	vmov	d0, r4, r5
 801e9b4:	b003      	add	sp, #12
 801e9b6:	ecbd 8b04 	vpop	{d8-d9}
 801e9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9be:	4baf      	ldr	r3, [pc, #700]	; (801ec7c <__ieee754_asin+0x344>)
 801e9c0:	4598      	cmp	r8, r3
 801e9c2:	dc11      	bgt.n	801e9e8 <__ieee754_asin+0xb0>
 801e9c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801e9c8:	f280 80ae 	bge.w	801eb28 <__ieee754_asin+0x1f0>
 801e9cc:	a394      	add	r3, pc, #592	; (adr r3, 801ec20 <__ieee754_asin+0x2e8>)
 801e9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9d2:	ee10 0a10 	vmov	r0, s0
 801e9d6:	4629      	mov	r1, r5
 801e9d8:	f7e1 fc70 	bl	80002bc <__adddf3>
 801e9dc:	4ba8      	ldr	r3, [pc, #672]	; (801ec80 <__ieee754_asin+0x348>)
 801e9de:	2200      	movs	r2, #0
 801e9e0:	f7e2 f8b2 	bl	8000b48 <__aeabi_dcmpgt>
 801e9e4:	2800      	cmp	r0, #0
 801e9e6:	d1e3      	bne.n	801e9b0 <__ieee754_asin+0x78>
 801e9e8:	ec45 4b10 	vmov	d0, r4, r5
 801e9ec:	f001 f94e 	bl	801fc8c <fabs>
 801e9f0:	49a3      	ldr	r1, [pc, #652]	; (801ec80 <__ieee754_asin+0x348>)
 801e9f2:	ec53 2b10 	vmov	r2, r3, d0
 801e9f6:	2000      	movs	r0, #0
 801e9f8:	f7e1 fc5e 	bl	80002b8 <__aeabi_dsub>
 801e9fc:	4ba1      	ldr	r3, [pc, #644]	; (801ec84 <__ieee754_asin+0x34c>)
 801e9fe:	2200      	movs	r2, #0
 801ea00:	f7e1 fe12 	bl	8000628 <__aeabi_dmul>
 801ea04:	a388      	add	r3, pc, #544	; (adr r3, 801ec28 <__ieee754_asin+0x2f0>)
 801ea06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea0a:	4604      	mov	r4, r0
 801ea0c:	460d      	mov	r5, r1
 801ea0e:	f7e1 fe0b 	bl	8000628 <__aeabi_dmul>
 801ea12:	a387      	add	r3, pc, #540	; (adr r3, 801ec30 <__ieee754_asin+0x2f8>)
 801ea14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea18:	f7e1 fc50 	bl	80002bc <__adddf3>
 801ea1c:	4622      	mov	r2, r4
 801ea1e:	462b      	mov	r3, r5
 801ea20:	f7e1 fe02 	bl	8000628 <__aeabi_dmul>
 801ea24:	a384      	add	r3, pc, #528	; (adr r3, 801ec38 <__ieee754_asin+0x300>)
 801ea26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea2a:	f7e1 fc45 	bl	80002b8 <__aeabi_dsub>
 801ea2e:	4622      	mov	r2, r4
 801ea30:	462b      	mov	r3, r5
 801ea32:	f7e1 fdf9 	bl	8000628 <__aeabi_dmul>
 801ea36:	a382      	add	r3, pc, #520	; (adr r3, 801ec40 <__ieee754_asin+0x308>)
 801ea38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea3c:	f7e1 fc3e 	bl	80002bc <__adddf3>
 801ea40:	4622      	mov	r2, r4
 801ea42:	462b      	mov	r3, r5
 801ea44:	f7e1 fdf0 	bl	8000628 <__aeabi_dmul>
 801ea48:	a37f      	add	r3, pc, #508	; (adr r3, 801ec48 <__ieee754_asin+0x310>)
 801ea4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea4e:	f7e1 fc33 	bl	80002b8 <__aeabi_dsub>
 801ea52:	4622      	mov	r2, r4
 801ea54:	462b      	mov	r3, r5
 801ea56:	f7e1 fde7 	bl	8000628 <__aeabi_dmul>
 801ea5a:	a37d      	add	r3, pc, #500	; (adr r3, 801ec50 <__ieee754_asin+0x318>)
 801ea5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea60:	f7e1 fc2c 	bl	80002bc <__adddf3>
 801ea64:	4622      	mov	r2, r4
 801ea66:	462b      	mov	r3, r5
 801ea68:	f7e1 fdde 	bl	8000628 <__aeabi_dmul>
 801ea6c:	a37a      	add	r3, pc, #488	; (adr r3, 801ec58 <__ieee754_asin+0x320>)
 801ea6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea72:	ec41 0b18 	vmov	d8, r0, r1
 801ea76:	4620      	mov	r0, r4
 801ea78:	4629      	mov	r1, r5
 801ea7a:	f7e1 fdd5 	bl	8000628 <__aeabi_dmul>
 801ea7e:	a378      	add	r3, pc, #480	; (adr r3, 801ec60 <__ieee754_asin+0x328>)
 801ea80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea84:	f7e1 fc18 	bl	80002b8 <__aeabi_dsub>
 801ea88:	4622      	mov	r2, r4
 801ea8a:	462b      	mov	r3, r5
 801ea8c:	f7e1 fdcc 	bl	8000628 <__aeabi_dmul>
 801ea90:	a375      	add	r3, pc, #468	; (adr r3, 801ec68 <__ieee754_asin+0x330>)
 801ea92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea96:	f7e1 fc11 	bl	80002bc <__adddf3>
 801ea9a:	4622      	mov	r2, r4
 801ea9c:	462b      	mov	r3, r5
 801ea9e:	f7e1 fdc3 	bl	8000628 <__aeabi_dmul>
 801eaa2:	a373      	add	r3, pc, #460	; (adr r3, 801ec70 <__ieee754_asin+0x338>)
 801eaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaa8:	f7e1 fc06 	bl	80002b8 <__aeabi_dsub>
 801eaac:	4622      	mov	r2, r4
 801eaae:	462b      	mov	r3, r5
 801eab0:	f7e1 fdba 	bl	8000628 <__aeabi_dmul>
 801eab4:	4b72      	ldr	r3, [pc, #456]	; (801ec80 <__ieee754_asin+0x348>)
 801eab6:	2200      	movs	r2, #0
 801eab8:	f7e1 fc00 	bl	80002bc <__adddf3>
 801eabc:	ec45 4b10 	vmov	d0, r4, r5
 801eac0:	4606      	mov	r6, r0
 801eac2:	460f      	mov	r7, r1
 801eac4:	f000 fb58 	bl	801f178 <__ieee754_sqrt>
 801eac8:	4b6f      	ldr	r3, [pc, #444]	; (801ec88 <__ieee754_asin+0x350>)
 801eaca:	4598      	cmp	r8, r3
 801eacc:	ec5b ab10 	vmov	sl, fp, d0
 801ead0:	f340 80dc 	ble.w	801ec8c <__ieee754_asin+0x354>
 801ead4:	4632      	mov	r2, r6
 801ead6:	463b      	mov	r3, r7
 801ead8:	ec51 0b18 	vmov	r0, r1, d8
 801eadc:	f7e1 fece 	bl	800087c <__aeabi_ddiv>
 801eae0:	4652      	mov	r2, sl
 801eae2:	465b      	mov	r3, fp
 801eae4:	f7e1 fda0 	bl	8000628 <__aeabi_dmul>
 801eae8:	4652      	mov	r2, sl
 801eaea:	465b      	mov	r3, fp
 801eaec:	f7e1 fbe6 	bl	80002bc <__adddf3>
 801eaf0:	4602      	mov	r2, r0
 801eaf2:	460b      	mov	r3, r1
 801eaf4:	f7e1 fbe2 	bl	80002bc <__adddf3>
 801eaf8:	a347      	add	r3, pc, #284	; (adr r3, 801ec18 <__ieee754_asin+0x2e0>)
 801eafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eafe:	f7e1 fbdb 	bl	80002b8 <__aeabi_dsub>
 801eb02:	4602      	mov	r2, r0
 801eb04:	460b      	mov	r3, r1
 801eb06:	a142      	add	r1, pc, #264	; (adr r1, 801ec10 <__ieee754_asin+0x2d8>)
 801eb08:	e9d1 0100 	ldrd	r0, r1, [r1]
 801eb0c:	f7e1 fbd4 	bl	80002b8 <__aeabi_dsub>
 801eb10:	9b01      	ldr	r3, [sp, #4]
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	bfdc      	itt	le
 801eb16:	4602      	movle	r2, r0
 801eb18:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801eb1c:	4604      	mov	r4, r0
 801eb1e:	460d      	mov	r5, r1
 801eb20:	bfdc      	itt	le
 801eb22:	4614      	movle	r4, r2
 801eb24:	461d      	movle	r5, r3
 801eb26:	e743      	b.n	801e9b0 <__ieee754_asin+0x78>
 801eb28:	ee10 2a10 	vmov	r2, s0
 801eb2c:	ee10 0a10 	vmov	r0, s0
 801eb30:	462b      	mov	r3, r5
 801eb32:	4629      	mov	r1, r5
 801eb34:	f7e1 fd78 	bl	8000628 <__aeabi_dmul>
 801eb38:	a33b      	add	r3, pc, #236	; (adr r3, 801ec28 <__ieee754_asin+0x2f0>)
 801eb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb3e:	4606      	mov	r6, r0
 801eb40:	460f      	mov	r7, r1
 801eb42:	f7e1 fd71 	bl	8000628 <__aeabi_dmul>
 801eb46:	a33a      	add	r3, pc, #232	; (adr r3, 801ec30 <__ieee754_asin+0x2f8>)
 801eb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb4c:	f7e1 fbb6 	bl	80002bc <__adddf3>
 801eb50:	4632      	mov	r2, r6
 801eb52:	463b      	mov	r3, r7
 801eb54:	f7e1 fd68 	bl	8000628 <__aeabi_dmul>
 801eb58:	a337      	add	r3, pc, #220	; (adr r3, 801ec38 <__ieee754_asin+0x300>)
 801eb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb5e:	f7e1 fbab 	bl	80002b8 <__aeabi_dsub>
 801eb62:	4632      	mov	r2, r6
 801eb64:	463b      	mov	r3, r7
 801eb66:	f7e1 fd5f 	bl	8000628 <__aeabi_dmul>
 801eb6a:	a335      	add	r3, pc, #212	; (adr r3, 801ec40 <__ieee754_asin+0x308>)
 801eb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb70:	f7e1 fba4 	bl	80002bc <__adddf3>
 801eb74:	4632      	mov	r2, r6
 801eb76:	463b      	mov	r3, r7
 801eb78:	f7e1 fd56 	bl	8000628 <__aeabi_dmul>
 801eb7c:	a332      	add	r3, pc, #200	; (adr r3, 801ec48 <__ieee754_asin+0x310>)
 801eb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb82:	f7e1 fb99 	bl	80002b8 <__aeabi_dsub>
 801eb86:	4632      	mov	r2, r6
 801eb88:	463b      	mov	r3, r7
 801eb8a:	f7e1 fd4d 	bl	8000628 <__aeabi_dmul>
 801eb8e:	a330      	add	r3, pc, #192	; (adr r3, 801ec50 <__ieee754_asin+0x318>)
 801eb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb94:	f7e1 fb92 	bl	80002bc <__adddf3>
 801eb98:	4632      	mov	r2, r6
 801eb9a:	463b      	mov	r3, r7
 801eb9c:	f7e1 fd44 	bl	8000628 <__aeabi_dmul>
 801eba0:	a32d      	add	r3, pc, #180	; (adr r3, 801ec58 <__ieee754_asin+0x320>)
 801eba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eba6:	4680      	mov	r8, r0
 801eba8:	4689      	mov	r9, r1
 801ebaa:	4630      	mov	r0, r6
 801ebac:	4639      	mov	r1, r7
 801ebae:	f7e1 fd3b 	bl	8000628 <__aeabi_dmul>
 801ebb2:	a32b      	add	r3, pc, #172	; (adr r3, 801ec60 <__ieee754_asin+0x328>)
 801ebb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebb8:	f7e1 fb7e 	bl	80002b8 <__aeabi_dsub>
 801ebbc:	4632      	mov	r2, r6
 801ebbe:	463b      	mov	r3, r7
 801ebc0:	f7e1 fd32 	bl	8000628 <__aeabi_dmul>
 801ebc4:	a328      	add	r3, pc, #160	; (adr r3, 801ec68 <__ieee754_asin+0x330>)
 801ebc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebca:	f7e1 fb77 	bl	80002bc <__adddf3>
 801ebce:	4632      	mov	r2, r6
 801ebd0:	463b      	mov	r3, r7
 801ebd2:	f7e1 fd29 	bl	8000628 <__aeabi_dmul>
 801ebd6:	a326      	add	r3, pc, #152	; (adr r3, 801ec70 <__ieee754_asin+0x338>)
 801ebd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebdc:	f7e1 fb6c 	bl	80002b8 <__aeabi_dsub>
 801ebe0:	4632      	mov	r2, r6
 801ebe2:	463b      	mov	r3, r7
 801ebe4:	f7e1 fd20 	bl	8000628 <__aeabi_dmul>
 801ebe8:	4b25      	ldr	r3, [pc, #148]	; (801ec80 <__ieee754_asin+0x348>)
 801ebea:	2200      	movs	r2, #0
 801ebec:	f7e1 fb66 	bl	80002bc <__adddf3>
 801ebf0:	4602      	mov	r2, r0
 801ebf2:	460b      	mov	r3, r1
 801ebf4:	4640      	mov	r0, r8
 801ebf6:	4649      	mov	r1, r9
 801ebf8:	f7e1 fe40 	bl	800087c <__aeabi_ddiv>
 801ebfc:	4622      	mov	r2, r4
 801ebfe:	462b      	mov	r3, r5
 801ec00:	f7e1 fd12 	bl	8000628 <__aeabi_dmul>
 801ec04:	4602      	mov	r2, r0
 801ec06:	460b      	mov	r3, r1
 801ec08:	4620      	mov	r0, r4
 801ec0a:	4629      	mov	r1, r5
 801ec0c:	e6bf      	b.n	801e98e <__ieee754_asin+0x56>
 801ec0e:	bf00      	nop
 801ec10:	54442d18 	.word	0x54442d18
 801ec14:	3ff921fb 	.word	0x3ff921fb
 801ec18:	33145c07 	.word	0x33145c07
 801ec1c:	3c91a626 	.word	0x3c91a626
 801ec20:	8800759c 	.word	0x8800759c
 801ec24:	7e37e43c 	.word	0x7e37e43c
 801ec28:	0dfdf709 	.word	0x0dfdf709
 801ec2c:	3f023de1 	.word	0x3f023de1
 801ec30:	7501b288 	.word	0x7501b288
 801ec34:	3f49efe0 	.word	0x3f49efe0
 801ec38:	b5688f3b 	.word	0xb5688f3b
 801ec3c:	3fa48228 	.word	0x3fa48228
 801ec40:	0e884455 	.word	0x0e884455
 801ec44:	3fc9c155 	.word	0x3fc9c155
 801ec48:	03eb6f7d 	.word	0x03eb6f7d
 801ec4c:	3fd4d612 	.word	0x3fd4d612
 801ec50:	55555555 	.word	0x55555555
 801ec54:	3fc55555 	.word	0x3fc55555
 801ec58:	b12e9282 	.word	0xb12e9282
 801ec5c:	3fb3b8c5 	.word	0x3fb3b8c5
 801ec60:	1b8d0159 	.word	0x1b8d0159
 801ec64:	3fe6066c 	.word	0x3fe6066c
 801ec68:	9c598ac8 	.word	0x9c598ac8
 801ec6c:	40002ae5 	.word	0x40002ae5
 801ec70:	1c8a2d4b 	.word	0x1c8a2d4b
 801ec74:	40033a27 	.word	0x40033a27
 801ec78:	3fefffff 	.word	0x3fefffff
 801ec7c:	3fdfffff 	.word	0x3fdfffff
 801ec80:	3ff00000 	.word	0x3ff00000
 801ec84:	3fe00000 	.word	0x3fe00000
 801ec88:	3fef3332 	.word	0x3fef3332
 801ec8c:	ee10 2a10 	vmov	r2, s0
 801ec90:	ee10 0a10 	vmov	r0, s0
 801ec94:	465b      	mov	r3, fp
 801ec96:	4659      	mov	r1, fp
 801ec98:	f7e1 fb10 	bl	80002bc <__adddf3>
 801ec9c:	4632      	mov	r2, r6
 801ec9e:	463b      	mov	r3, r7
 801eca0:	ec41 0b19 	vmov	d9, r0, r1
 801eca4:	ec51 0b18 	vmov	r0, r1, d8
 801eca8:	f7e1 fde8 	bl	800087c <__aeabi_ddiv>
 801ecac:	4602      	mov	r2, r0
 801ecae:	460b      	mov	r3, r1
 801ecb0:	ec51 0b19 	vmov	r0, r1, d9
 801ecb4:	f7e1 fcb8 	bl	8000628 <__aeabi_dmul>
 801ecb8:	f04f 0800 	mov.w	r8, #0
 801ecbc:	4606      	mov	r6, r0
 801ecbe:	460f      	mov	r7, r1
 801ecc0:	4642      	mov	r2, r8
 801ecc2:	465b      	mov	r3, fp
 801ecc4:	4640      	mov	r0, r8
 801ecc6:	4659      	mov	r1, fp
 801ecc8:	f7e1 fcae 	bl	8000628 <__aeabi_dmul>
 801eccc:	4602      	mov	r2, r0
 801ecce:	460b      	mov	r3, r1
 801ecd0:	4620      	mov	r0, r4
 801ecd2:	4629      	mov	r1, r5
 801ecd4:	f7e1 faf0 	bl	80002b8 <__aeabi_dsub>
 801ecd8:	4642      	mov	r2, r8
 801ecda:	4604      	mov	r4, r0
 801ecdc:	460d      	mov	r5, r1
 801ecde:	465b      	mov	r3, fp
 801ece0:	4650      	mov	r0, sl
 801ece2:	4659      	mov	r1, fp
 801ece4:	f7e1 faea 	bl	80002bc <__adddf3>
 801ece8:	4602      	mov	r2, r0
 801ecea:	460b      	mov	r3, r1
 801ecec:	4620      	mov	r0, r4
 801ecee:	4629      	mov	r1, r5
 801ecf0:	f7e1 fdc4 	bl	800087c <__aeabi_ddiv>
 801ecf4:	4602      	mov	r2, r0
 801ecf6:	460b      	mov	r3, r1
 801ecf8:	f7e1 fae0 	bl	80002bc <__adddf3>
 801ecfc:	4602      	mov	r2, r0
 801ecfe:	460b      	mov	r3, r1
 801ed00:	a113      	add	r1, pc, #76	; (adr r1, 801ed50 <__ieee754_asin+0x418>)
 801ed02:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ed06:	f7e1 fad7 	bl	80002b8 <__aeabi_dsub>
 801ed0a:	4602      	mov	r2, r0
 801ed0c:	460b      	mov	r3, r1
 801ed0e:	4630      	mov	r0, r6
 801ed10:	4639      	mov	r1, r7
 801ed12:	f7e1 fad1 	bl	80002b8 <__aeabi_dsub>
 801ed16:	4642      	mov	r2, r8
 801ed18:	4604      	mov	r4, r0
 801ed1a:	460d      	mov	r5, r1
 801ed1c:	465b      	mov	r3, fp
 801ed1e:	4640      	mov	r0, r8
 801ed20:	4659      	mov	r1, fp
 801ed22:	f7e1 facb 	bl	80002bc <__adddf3>
 801ed26:	4602      	mov	r2, r0
 801ed28:	460b      	mov	r3, r1
 801ed2a:	a10b      	add	r1, pc, #44	; (adr r1, 801ed58 <__ieee754_asin+0x420>)
 801ed2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ed30:	f7e1 fac2 	bl	80002b8 <__aeabi_dsub>
 801ed34:	4602      	mov	r2, r0
 801ed36:	460b      	mov	r3, r1
 801ed38:	4620      	mov	r0, r4
 801ed3a:	4629      	mov	r1, r5
 801ed3c:	f7e1 fabc 	bl	80002b8 <__aeabi_dsub>
 801ed40:	4602      	mov	r2, r0
 801ed42:	460b      	mov	r3, r1
 801ed44:	a104      	add	r1, pc, #16	; (adr r1, 801ed58 <__ieee754_asin+0x420>)
 801ed46:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ed4a:	e6df      	b.n	801eb0c <__ieee754_asin+0x1d4>
 801ed4c:	f3af 8000 	nop.w
 801ed50:	33145c07 	.word	0x33145c07
 801ed54:	3c91a626 	.word	0x3c91a626
 801ed58:	54442d18 	.word	0x54442d18
 801ed5c:	3fe921fb 	.word	0x3fe921fb

0801ed60 <__ieee754_rem_pio2>:
 801ed60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed64:	ed2d 8b02 	vpush	{d8}
 801ed68:	ec55 4b10 	vmov	r4, r5, d0
 801ed6c:	4bca      	ldr	r3, [pc, #808]	; (801f098 <__ieee754_rem_pio2+0x338>)
 801ed6e:	b08b      	sub	sp, #44	; 0x2c
 801ed70:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801ed74:	4598      	cmp	r8, r3
 801ed76:	4682      	mov	sl, r0
 801ed78:	9502      	str	r5, [sp, #8]
 801ed7a:	dc08      	bgt.n	801ed8e <__ieee754_rem_pio2+0x2e>
 801ed7c:	2200      	movs	r2, #0
 801ed7e:	2300      	movs	r3, #0
 801ed80:	ed80 0b00 	vstr	d0, [r0]
 801ed84:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801ed88:	f04f 0b00 	mov.w	fp, #0
 801ed8c:	e028      	b.n	801ede0 <__ieee754_rem_pio2+0x80>
 801ed8e:	4bc3      	ldr	r3, [pc, #780]	; (801f09c <__ieee754_rem_pio2+0x33c>)
 801ed90:	4598      	cmp	r8, r3
 801ed92:	dc78      	bgt.n	801ee86 <__ieee754_rem_pio2+0x126>
 801ed94:	9b02      	ldr	r3, [sp, #8]
 801ed96:	4ec2      	ldr	r6, [pc, #776]	; (801f0a0 <__ieee754_rem_pio2+0x340>)
 801ed98:	2b00      	cmp	r3, #0
 801ed9a:	ee10 0a10 	vmov	r0, s0
 801ed9e:	a3b0      	add	r3, pc, #704	; (adr r3, 801f060 <__ieee754_rem_pio2+0x300>)
 801eda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eda4:	4629      	mov	r1, r5
 801eda6:	dd39      	ble.n	801ee1c <__ieee754_rem_pio2+0xbc>
 801eda8:	f7e1 fa86 	bl	80002b8 <__aeabi_dsub>
 801edac:	45b0      	cmp	r8, r6
 801edae:	4604      	mov	r4, r0
 801edb0:	460d      	mov	r5, r1
 801edb2:	d01b      	beq.n	801edec <__ieee754_rem_pio2+0x8c>
 801edb4:	a3ac      	add	r3, pc, #688	; (adr r3, 801f068 <__ieee754_rem_pio2+0x308>)
 801edb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edba:	f7e1 fa7d 	bl	80002b8 <__aeabi_dsub>
 801edbe:	4602      	mov	r2, r0
 801edc0:	460b      	mov	r3, r1
 801edc2:	e9ca 2300 	strd	r2, r3, [sl]
 801edc6:	4620      	mov	r0, r4
 801edc8:	4629      	mov	r1, r5
 801edca:	f7e1 fa75 	bl	80002b8 <__aeabi_dsub>
 801edce:	a3a6      	add	r3, pc, #664	; (adr r3, 801f068 <__ieee754_rem_pio2+0x308>)
 801edd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edd4:	f7e1 fa70 	bl	80002b8 <__aeabi_dsub>
 801edd8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801eddc:	f04f 0b01 	mov.w	fp, #1
 801ede0:	4658      	mov	r0, fp
 801ede2:	b00b      	add	sp, #44	; 0x2c
 801ede4:	ecbd 8b02 	vpop	{d8}
 801ede8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edec:	a3a0      	add	r3, pc, #640	; (adr r3, 801f070 <__ieee754_rem_pio2+0x310>)
 801edee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edf2:	f7e1 fa61 	bl	80002b8 <__aeabi_dsub>
 801edf6:	a3a0      	add	r3, pc, #640	; (adr r3, 801f078 <__ieee754_rem_pio2+0x318>)
 801edf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edfc:	4604      	mov	r4, r0
 801edfe:	460d      	mov	r5, r1
 801ee00:	f7e1 fa5a 	bl	80002b8 <__aeabi_dsub>
 801ee04:	4602      	mov	r2, r0
 801ee06:	460b      	mov	r3, r1
 801ee08:	e9ca 2300 	strd	r2, r3, [sl]
 801ee0c:	4620      	mov	r0, r4
 801ee0e:	4629      	mov	r1, r5
 801ee10:	f7e1 fa52 	bl	80002b8 <__aeabi_dsub>
 801ee14:	a398      	add	r3, pc, #608	; (adr r3, 801f078 <__ieee754_rem_pio2+0x318>)
 801ee16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee1a:	e7db      	b.n	801edd4 <__ieee754_rem_pio2+0x74>
 801ee1c:	f7e1 fa4e 	bl	80002bc <__adddf3>
 801ee20:	45b0      	cmp	r8, r6
 801ee22:	4604      	mov	r4, r0
 801ee24:	460d      	mov	r5, r1
 801ee26:	d016      	beq.n	801ee56 <__ieee754_rem_pio2+0xf6>
 801ee28:	a38f      	add	r3, pc, #572	; (adr r3, 801f068 <__ieee754_rem_pio2+0x308>)
 801ee2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee2e:	f7e1 fa45 	bl	80002bc <__adddf3>
 801ee32:	4602      	mov	r2, r0
 801ee34:	460b      	mov	r3, r1
 801ee36:	e9ca 2300 	strd	r2, r3, [sl]
 801ee3a:	4620      	mov	r0, r4
 801ee3c:	4629      	mov	r1, r5
 801ee3e:	f7e1 fa3b 	bl	80002b8 <__aeabi_dsub>
 801ee42:	a389      	add	r3, pc, #548	; (adr r3, 801f068 <__ieee754_rem_pio2+0x308>)
 801ee44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee48:	f7e1 fa38 	bl	80002bc <__adddf3>
 801ee4c:	f04f 3bff 	mov.w	fp, #4294967295
 801ee50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ee54:	e7c4      	b.n	801ede0 <__ieee754_rem_pio2+0x80>
 801ee56:	a386      	add	r3, pc, #536	; (adr r3, 801f070 <__ieee754_rem_pio2+0x310>)
 801ee58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee5c:	f7e1 fa2e 	bl	80002bc <__adddf3>
 801ee60:	a385      	add	r3, pc, #532	; (adr r3, 801f078 <__ieee754_rem_pio2+0x318>)
 801ee62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee66:	4604      	mov	r4, r0
 801ee68:	460d      	mov	r5, r1
 801ee6a:	f7e1 fa27 	bl	80002bc <__adddf3>
 801ee6e:	4602      	mov	r2, r0
 801ee70:	460b      	mov	r3, r1
 801ee72:	e9ca 2300 	strd	r2, r3, [sl]
 801ee76:	4620      	mov	r0, r4
 801ee78:	4629      	mov	r1, r5
 801ee7a:	f7e1 fa1d 	bl	80002b8 <__aeabi_dsub>
 801ee7e:	a37e      	add	r3, pc, #504	; (adr r3, 801f078 <__ieee754_rem_pio2+0x318>)
 801ee80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee84:	e7e0      	b.n	801ee48 <__ieee754_rem_pio2+0xe8>
 801ee86:	4b87      	ldr	r3, [pc, #540]	; (801f0a4 <__ieee754_rem_pio2+0x344>)
 801ee88:	4598      	cmp	r8, r3
 801ee8a:	f300 80d9 	bgt.w	801f040 <__ieee754_rem_pio2+0x2e0>
 801ee8e:	f000 fefd 	bl	801fc8c <fabs>
 801ee92:	ec55 4b10 	vmov	r4, r5, d0
 801ee96:	ee10 0a10 	vmov	r0, s0
 801ee9a:	a379      	add	r3, pc, #484	; (adr r3, 801f080 <__ieee754_rem_pio2+0x320>)
 801ee9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eea0:	4629      	mov	r1, r5
 801eea2:	f7e1 fbc1 	bl	8000628 <__aeabi_dmul>
 801eea6:	4b80      	ldr	r3, [pc, #512]	; (801f0a8 <__ieee754_rem_pio2+0x348>)
 801eea8:	2200      	movs	r2, #0
 801eeaa:	f7e1 fa07 	bl	80002bc <__adddf3>
 801eeae:	f7e1 fe6b 	bl	8000b88 <__aeabi_d2iz>
 801eeb2:	4683      	mov	fp, r0
 801eeb4:	f7e1 fb4e 	bl	8000554 <__aeabi_i2d>
 801eeb8:	4602      	mov	r2, r0
 801eeba:	460b      	mov	r3, r1
 801eebc:	ec43 2b18 	vmov	d8, r2, r3
 801eec0:	a367      	add	r3, pc, #412	; (adr r3, 801f060 <__ieee754_rem_pio2+0x300>)
 801eec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eec6:	f7e1 fbaf 	bl	8000628 <__aeabi_dmul>
 801eeca:	4602      	mov	r2, r0
 801eecc:	460b      	mov	r3, r1
 801eece:	4620      	mov	r0, r4
 801eed0:	4629      	mov	r1, r5
 801eed2:	f7e1 f9f1 	bl	80002b8 <__aeabi_dsub>
 801eed6:	a364      	add	r3, pc, #400	; (adr r3, 801f068 <__ieee754_rem_pio2+0x308>)
 801eed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eedc:	4606      	mov	r6, r0
 801eede:	460f      	mov	r7, r1
 801eee0:	ec51 0b18 	vmov	r0, r1, d8
 801eee4:	f7e1 fba0 	bl	8000628 <__aeabi_dmul>
 801eee8:	f1bb 0f1f 	cmp.w	fp, #31
 801eeec:	4604      	mov	r4, r0
 801eeee:	460d      	mov	r5, r1
 801eef0:	dc0d      	bgt.n	801ef0e <__ieee754_rem_pio2+0x1ae>
 801eef2:	4b6e      	ldr	r3, [pc, #440]	; (801f0ac <__ieee754_rem_pio2+0x34c>)
 801eef4:	f10b 32ff 	add.w	r2, fp, #4294967295
 801eef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801eefc:	4543      	cmp	r3, r8
 801eefe:	d006      	beq.n	801ef0e <__ieee754_rem_pio2+0x1ae>
 801ef00:	4622      	mov	r2, r4
 801ef02:	462b      	mov	r3, r5
 801ef04:	4630      	mov	r0, r6
 801ef06:	4639      	mov	r1, r7
 801ef08:	f7e1 f9d6 	bl	80002b8 <__aeabi_dsub>
 801ef0c:	e00f      	b.n	801ef2e <__ieee754_rem_pio2+0x1ce>
 801ef0e:	462b      	mov	r3, r5
 801ef10:	4622      	mov	r2, r4
 801ef12:	4630      	mov	r0, r6
 801ef14:	4639      	mov	r1, r7
 801ef16:	f7e1 f9cf 	bl	80002b8 <__aeabi_dsub>
 801ef1a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801ef1e:	9303      	str	r3, [sp, #12]
 801ef20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ef24:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801ef28:	f1b8 0f10 	cmp.w	r8, #16
 801ef2c:	dc02      	bgt.n	801ef34 <__ieee754_rem_pio2+0x1d4>
 801ef2e:	e9ca 0100 	strd	r0, r1, [sl]
 801ef32:	e039      	b.n	801efa8 <__ieee754_rem_pio2+0x248>
 801ef34:	a34e      	add	r3, pc, #312	; (adr r3, 801f070 <__ieee754_rem_pio2+0x310>)
 801ef36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef3a:	ec51 0b18 	vmov	r0, r1, d8
 801ef3e:	f7e1 fb73 	bl	8000628 <__aeabi_dmul>
 801ef42:	4604      	mov	r4, r0
 801ef44:	460d      	mov	r5, r1
 801ef46:	4602      	mov	r2, r0
 801ef48:	460b      	mov	r3, r1
 801ef4a:	4630      	mov	r0, r6
 801ef4c:	4639      	mov	r1, r7
 801ef4e:	f7e1 f9b3 	bl	80002b8 <__aeabi_dsub>
 801ef52:	4602      	mov	r2, r0
 801ef54:	460b      	mov	r3, r1
 801ef56:	4680      	mov	r8, r0
 801ef58:	4689      	mov	r9, r1
 801ef5a:	4630      	mov	r0, r6
 801ef5c:	4639      	mov	r1, r7
 801ef5e:	f7e1 f9ab 	bl	80002b8 <__aeabi_dsub>
 801ef62:	4622      	mov	r2, r4
 801ef64:	462b      	mov	r3, r5
 801ef66:	f7e1 f9a7 	bl	80002b8 <__aeabi_dsub>
 801ef6a:	a343      	add	r3, pc, #268	; (adr r3, 801f078 <__ieee754_rem_pio2+0x318>)
 801ef6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef70:	4604      	mov	r4, r0
 801ef72:	460d      	mov	r5, r1
 801ef74:	ec51 0b18 	vmov	r0, r1, d8
 801ef78:	f7e1 fb56 	bl	8000628 <__aeabi_dmul>
 801ef7c:	4622      	mov	r2, r4
 801ef7e:	462b      	mov	r3, r5
 801ef80:	f7e1 f99a 	bl	80002b8 <__aeabi_dsub>
 801ef84:	4602      	mov	r2, r0
 801ef86:	460b      	mov	r3, r1
 801ef88:	4604      	mov	r4, r0
 801ef8a:	460d      	mov	r5, r1
 801ef8c:	4640      	mov	r0, r8
 801ef8e:	4649      	mov	r1, r9
 801ef90:	f7e1 f992 	bl	80002b8 <__aeabi_dsub>
 801ef94:	9a03      	ldr	r2, [sp, #12]
 801ef96:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ef9a:	1ad3      	subs	r3, r2, r3
 801ef9c:	2b31      	cmp	r3, #49	; 0x31
 801ef9e:	dc24      	bgt.n	801efea <__ieee754_rem_pio2+0x28a>
 801efa0:	e9ca 0100 	strd	r0, r1, [sl]
 801efa4:	4646      	mov	r6, r8
 801efa6:	464f      	mov	r7, r9
 801efa8:	e9da 8900 	ldrd	r8, r9, [sl]
 801efac:	4630      	mov	r0, r6
 801efae:	4642      	mov	r2, r8
 801efb0:	464b      	mov	r3, r9
 801efb2:	4639      	mov	r1, r7
 801efb4:	f7e1 f980 	bl	80002b8 <__aeabi_dsub>
 801efb8:	462b      	mov	r3, r5
 801efba:	4622      	mov	r2, r4
 801efbc:	f7e1 f97c 	bl	80002b8 <__aeabi_dsub>
 801efc0:	9b02      	ldr	r3, [sp, #8]
 801efc2:	2b00      	cmp	r3, #0
 801efc4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801efc8:	f6bf af0a 	bge.w	801ede0 <__ieee754_rem_pio2+0x80>
 801efcc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801efd0:	f8ca 3004 	str.w	r3, [sl, #4]
 801efd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801efd8:	f8ca 8000 	str.w	r8, [sl]
 801efdc:	f8ca 0008 	str.w	r0, [sl, #8]
 801efe0:	f8ca 300c 	str.w	r3, [sl, #12]
 801efe4:	f1cb 0b00 	rsb	fp, fp, #0
 801efe8:	e6fa      	b.n	801ede0 <__ieee754_rem_pio2+0x80>
 801efea:	a327      	add	r3, pc, #156	; (adr r3, 801f088 <__ieee754_rem_pio2+0x328>)
 801efec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eff0:	ec51 0b18 	vmov	r0, r1, d8
 801eff4:	f7e1 fb18 	bl	8000628 <__aeabi_dmul>
 801eff8:	4604      	mov	r4, r0
 801effa:	460d      	mov	r5, r1
 801effc:	4602      	mov	r2, r0
 801effe:	460b      	mov	r3, r1
 801f000:	4640      	mov	r0, r8
 801f002:	4649      	mov	r1, r9
 801f004:	f7e1 f958 	bl	80002b8 <__aeabi_dsub>
 801f008:	4602      	mov	r2, r0
 801f00a:	460b      	mov	r3, r1
 801f00c:	4606      	mov	r6, r0
 801f00e:	460f      	mov	r7, r1
 801f010:	4640      	mov	r0, r8
 801f012:	4649      	mov	r1, r9
 801f014:	f7e1 f950 	bl	80002b8 <__aeabi_dsub>
 801f018:	4622      	mov	r2, r4
 801f01a:	462b      	mov	r3, r5
 801f01c:	f7e1 f94c 	bl	80002b8 <__aeabi_dsub>
 801f020:	a31b      	add	r3, pc, #108	; (adr r3, 801f090 <__ieee754_rem_pio2+0x330>)
 801f022:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f026:	4604      	mov	r4, r0
 801f028:	460d      	mov	r5, r1
 801f02a:	ec51 0b18 	vmov	r0, r1, d8
 801f02e:	f7e1 fafb 	bl	8000628 <__aeabi_dmul>
 801f032:	4622      	mov	r2, r4
 801f034:	462b      	mov	r3, r5
 801f036:	f7e1 f93f 	bl	80002b8 <__aeabi_dsub>
 801f03a:	4604      	mov	r4, r0
 801f03c:	460d      	mov	r5, r1
 801f03e:	e75f      	b.n	801ef00 <__ieee754_rem_pio2+0x1a0>
 801f040:	4b1b      	ldr	r3, [pc, #108]	; (801f0b0 <__ieee754_rem_pio2+0x350>)
 801f042:	4598      	cmp	r8, r3
 801f044:	dd36      	ble.n	801f0b4 <__ieee754_rem_pio2+0x354>
 801f046:	ee10 2a10 	vmov	r2, s0
 801f04a:	462b      	mov	r3, r5
 801f04c:	4620      	mov	r0, r4
 801f04e:	4629      	mov	r1, r5
 801f050:	f7e1 f932 	bl	80002b8 <__aeabi_dsub>
 801f054:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801f058:	e9ca 0100 	strd	r0, r1, [sl]
 801f05c:	e694      	b.n	801ed88 <__ieee754_rem_pio2+0x28>
 801f05e:	bf00      	nop
 801f060:	54400000 	.word	0x54400000
 801f064:	3ff921fb 	.word	0x3ff921fb
 801f068:	1a626331 	.word	0x1a626331
 801f06c:	3dd0b461 	.word	0x3dd0b461
 801f070:	1a600000 	.word	0x1a600000
 801f074:	3dd0b461 	.word	0x3dd0b461
 801f078:	2e037073 	.word	0x2e037073
 801f07c:	3ba3198a 	.word	0x3ba3198a
 801f080:	6dc9c883 	.word	0x6dc9c883
 801f084:	3fe45f30 	.word	0x3fe45f30
 801f088:	2e000000 	.word	0x2e000000
 801f08c:	3ba3198a 	.word	0x3ba3198a
 801f090:	252049c1 	.word	0x252049c1
 801f094:	397b839a 	.word	0x397b839a
 801f098:	3fe921fb 	.word	0x3fe921fb
 801f09c:	4002d97b 	.word	0x4002d97b
 801f0a0:	3ff921fb 	.word	0x3ff921fb
 801f0a4:	413921fb 	.word	0x413921fb
 801f0a8:	3fe00000 	.word	0x3fe00000
 801f0ac:	080258f4 	.word	0x080258f4
 801f0b0:	7fefffff 	.word	0x7fefffff
 801f0b4:	ea4f 5428 	mov.w	r4, r8, asr #20
 801f0b8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801f0bc:	ee10 0a10 	vmov	r0, s0
 801f0c0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801f0c4:	ee10 6a10 	vmov	r6, s0
 801f0c8:	460f      	mov	r7, r1
 801f0ca:	f7e1 fd5d 	bl	8000b88 <__aeabi_d2iz>
 801f0ce:	f7e1 fa41 	bl	8000554 <__aeabi_i2d>
 801f0d2:	4602      	mov	r2, r0
 801f0d4:	460b      	mov	r3, r1
 801f0d6:	4630      	mov	r0, r6
 801f0d8:	4639      	mov	r1, r7
 801f0da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f0de:	f7e1 f8eb 	bl	80002b8 <__aeabi_dsub>
 801f0e2:	4b23      	ldr	r3, [pc, #140]	; (801f170 <__ieee754_rem_pio2+0x410>)
 801f0e4:	2200      	movs	r2, #0
 801f0e6:	f7e1 fa9f 	bl	8000628 <__aeabi_dmul>
 801f0ea:	460f      	mov	r7, r1
 801f0ec:	4606      	mov	r6, r0
 801f0ee:	f7e1 fd4b 	bl	8000b88 <__aeabi_d2iz>
 801f0f2:	f7e1 fa2f 	bl	8000554 <__aeabi_i2d>
 801f0f6:	4602      	mov	r2, r0
 801f0f8:	460b      	mov	r3, r1
 801f0fa:	4630      	mov	r0, r6
 801f0fc:	4639      	mov	r1, r7
 801f0fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801f102:	f7e1 f8d9 	bl	80002b8 <__aeabi_dsub>
 801f106:	4b1a      	ldr	r3, [pc, #104]	; (801f170 <__ieee754_rem_pio2+0x410>)
 801f108:	2200      	movs	r2, #0
 801f10a:	f7e1 fa8d 	bl	8000628 <__aeabi_dmul>
 801f10e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f112:	ad04      	add	r5, sp, #16
 801f114:	f04f 0803 	mov.w	r8, #3
 801f118:	46a9      	mov	r9, r5
 801f11a:	2600      	movs	r6, #0
 801f11c:	2700      	movs	r7, #0
 801f11e:	4632      	mov	r2, r6
 801f120:	463b      	mov	r3, r7
 801f122:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801f126:	46c3      	mov	fp, r8
 801f128:	3d08      	subs	r5, #8
 801f12a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f12e:	f7e1 fce3 	bl	8000af8 <__aeabi_dcmpeq>
 801f132:	2800      	cmp	r0, #0
 801f134:	d1f3      	bne.n	801f11e <__ieee754_rem_pio2+0x3be>
 801f136:	4b0f      	ldr	r3, [pc, #60]	; (801f174 <__ieee754_rem_pio2+0x414>)
 801f138:	9301      	str	r3, [sp, #4]
 801f13a:	2302      	movs	r3, #2
 801f13c:	9300      	str	r3, [sp, #0]
 801f13e:	4622      	mov	r2, r4
 801f140:	465b      	mov	r3, fp
 801f142:	4651      	mov	r1, sl
 801f144:	4648      	mov	r0, r9
 801f146:	f000 f993 	bl	801f470 <__kernel_rem_pio2>
 801f14a:	9b02      	ldr	r3, [sp, #8]
 801f14c:	2b00      	cmp	r3, #0
 801f14e:	4683      	mov	fp, r0
 801f150:	f6bf ae46 	bge.w	801ede0 <__ieee754_rem_pio2+0x80>
 801f154:	e9da 2100 	ldrd	r2, r1, [sl]
 801f158:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f15c:	e9ca 2300 	strd	r2, r3, [sl]
 801f160:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801f164:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f168:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801f16c:	e73a      	b.n	801efe4 <__ieee754_rem_pio2+0x284>
 801f16e:	bf00      	nop
 801f170:	41700000 	.word	0x41700000
 801f174:	08025974 	.word	0x08025974

0801f178 <__ieee754_sqrt>:
 801f178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f17c:	ec55 4b10 	vmov	r4, r5, d0
 801f180:	4e55      	ldr	r6, [pc, #340]	; (801f2d8 <__ieee754_sqrt+0x160>)
 801f182:	43ae      	bics	r6, r5
 801f184:	ee10 0a10 	vmov	r0, s0
 801f188:	ee10 3a10 	vmov	r3, s0
 801f18c:	462a      	mov	r2, r5
 801f18e:	4629      	mov	r1, r5
 801f190:	d110      	bne.n	801f1b4 <__ieee754_sqrt+0x3c>
 801f192:	ee10 2a10 	vmov	r2, s0
 801f196:	462b      	mov	r3, r5
 801f198:	f7e1 fa46 	bl	8000628 <__aeabi_dmul>
 801f19c:	4602      	mov	r2, r0
 801f19e:	460b      	mov	r3, r1
 801f1a0:	4620      	mov	r0, r4
 801f1a2:	4629      	mov	r1, r5
 801f1a4:	f7e1 f88a 	bl	80002bc <__adddf3>
 801f1a8:	4604      	mov	r4, r0
 801f1aa:	460d      	mov	r5, r1
 801f1ac:	ec45 4b10 	vmov	d0, r4, r5
 801f1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1b4:	2d00      	cmp	r5, #0
 801f1b6:	dc10      	bgt.n	801f1da <__ieee754_sqrt+0x62>
 801f1b8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801f1bc:	4330      	orrs	r0, r6
 801f1be:	d0f5      	beq.n	801f1ac <__ieee754_sqrt+0x34>
 801f1c0:	b15d      	cbz	r5, 801f1da <__ieee754_sqrt+0x62>
 801f1c2:	ee10 2a10 	vmov	r2, s0
 801f1c6:	462b      	mov	r3, r5
 801f1c8:	ee10 0a10 	vmov	r0, s0
 801f1cc:	f7e1 f874 	bl	80002b8 <__aeabi_dsub>
 801f1d0:	4602      	mov	r2, r0
 801f1d2:	460b      	mov	r3, r1
 801f1d4:	f7e1 fb52 	bl	800087c <__aeabi_ddiv>
 801f1d8:	e7e6      	b.n	801f1a8 <__ieee754_sqrt+0x30>
 801f1da:	1512      	asrs	r2, r2, #20
 801f1dc:	d074      	beq.n	801f2c8 <__ieee754_sqrt+0x150>
 801f1de:	07d4      	lsls	r4, r2, #31
 801f1e0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801f1e4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801f1e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801f1ec:	bf5e      	ittt	pl
 801f1ee:	0fda      	lsrpl	r2, r3, #31
 801f1f0:	005b      	lslpl	r3, r3, #1
 801f1f2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801f1f6:	2400      	movs	r4, #0
 801f1f8:	0fda      	lsrs	r2, r3, #31
 801f1fa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801f1fe:	107f      	asrs	r7, r7, #1
 801f200:	005b      	lsls	r3, r3, #1
 801f202:	2516      	movs	r5, #22
 801f204:	4620      	mov	r0, r4
 801f206:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801f20a:	1886      	adds	r6, r0, r2
 801f20c:	428e      	cmp	r6, r1
 801f20e:	bfde      	ittt	le
 801f210:	1b89      	suble	r1, r1, r6
 801f212:	18b0      	addle	r0, r6, r2
 801f214:	18a4      	addle	r4, r4, r2
 801f216:	0049      	lsls	r1, r1, #1
 801f218:	3d01      	subs	r5, #1
 801f21a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801f21e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801f222:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f226:	d1f0      	bne.n	801f20a <__ieee754_sqrt+0x92>
 801f228:	462a      	mov	r2, r5
 801f22a:	f04f 0e20 	mov.w	lr, #32
 801f22e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801f232:	4281      	cmp	r1, r0
 801f234:	eb06 0c05 	add.w	ip, r6, r5
 801f238:	dc02      	bgt.n	801f240 <__ieee754_sqrt+0xc8>
 801f23a:	d113      	bne.n	801f264 <__ieee754_sqrt+0xec>
 801f23c:	459c      	cmp	ip, r3
 801f23e:	d811      	bhi.n	801f264 <__ieee754_sqrt+0xec>
 801f240:	f1bc 0f00 	cmp.w	ip, #0
 801f244:	eb0c 0506 	add.w	r5, ip, r6
 801f248:	da43      	bge.n	801f2d2 <__ieee754_sqrt+0x15a>
 801f24a:	2d00      	cmp	r5, #0
 801f24c:	db41      	blt.n	801f2d2 <__ieee754_sqrt+0x15a>
 801f24e:	f100 0801 	add.w	r8, r0, #1
 801f252:	1a09      	subs	r1, r1, r0
 801f254:	459c      	cmp	ip, r3
 801f256:	bf88      	it	hi
 801f258:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801f25c:	eba3 030c 	sub.w	r3, r3, ip
 801f260:	4432      	add	r2, r6
 801f262:	4640      	mov	r0, r8
 801f264:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801f268:	f1be 0e01 	subs.w	lr, lr, #1
 801f26c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801f270:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f274:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801f278:	d1db      	bne.n	801f232 <__ieee754_sqrt+0xba>
 801f27a:	430b      	orrs	r3, r1
 801f27c:	d006      	beq.n	801f28c <__ieee754_sqrt+0x114>
 801f27e:	1c50      	adds	r0, r2, #1
 801f280:	bf13      	iteet	ne
 801f282:	3201      	addne	r2, #1
 801f284:	3401      	addeq	r4, #1
 801f286:	4672      	moveq	r2, lr
 801f288:	f022 0201 	bicne.w	r2, r2, #1
 801f28c:	1063      	asrs	r3, r4, #1
 801f28e:	0852      	lsrs	r2, r2, #1
 801f290:	07e1      	lsls	r1, r4, #31
 801f292:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801f296:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801f29a:	bf48      	it	mi
 801f29c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801f2a0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801f2a4:	4614      	mov	r4, r2
 801f2a6:	e781      	b.n	801f1ac <__ieee754_sqrt+0x34>
 801f2a8:	0ad9      	lsrs	r1, r3, #11
 801f2aa:	3815      	subs	r0, #21
 801f2ac:	055b      	lsls	r3, r3, #21
 801f2ae:	2900      	cmp	r1, #0
 801f2b0:	d0fa      	beq.n	801f2a8 <__ieee754_sqrt+0x130>
 801f2b2:	02cd      	lsls	r5, r1, #11
 801f2b4:	d50a      	bpl.n	801f2cc <__ieee754_sqrt+0x154>
 801f2b6:	f1c2 0420 	rsb	r4, r2, #32
 801f2ba:	fa23 f404 	lsr.w	r4, r3, r4
 801f2be:	1e55      	subs	r5, r2, #1
 801f2c0:	4093      	lsls	r3, r2
 801f2c2:	4321      	orrs	r1, r4
 801f2c4:	1b42      	subs	r2, r0, r5
 801f2c6:	e78a      	b.n	801f1de <__ieee754_sqrt+0x66>
 801f2c8:	4610      	mov	r0, r2
 801f2ca:	e7f0      	b.n	801f2ae <__ieee754_sqrt+0x136>
 801f2cc:	0049      	lsls	r1, r1, #1
 801f2ce:	3201      	adds	r2, #1
 801f2d0:	e7ef      	b.n	801f2b2 <__ieee754_sqrt+0x13a>
 801f2d2:	4680      	mov	r8, r0
 801f2d4:	e7bd      	b.n	801f252 <__ieee754_sqrt+0xda>
 801f2d6:	bf00      	nop
 801f2d8:	7ff00000 	.word	0x7ff00000
 801f2dc:	00000000 	.word	0x00000000

0801f2e0 <__kernel_cos>:
 801f2e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2e4:	ec57 6b10 	vmov	r6, r7, d0
 801f2e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801f2ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801f2f0:	ed8d 1b00 	vstr	d1, [sp]
 801f2f4:	da07      	bge.n	801f306 <__kernel_cos+0x26>
 801f2f6:	ee10 0a10 	vmov	r0, s0
 801f2fa:	4639      	mov	r1, r7
 801f2fc:	f7e1 fc44 	bl	8000b88 <__aeabi_d2iz>
 801f300:	2800      	cmp	r0, #0
 801f302:	f000 8088 	beq.w	801f416 <__kernel_cos+0x136>
 801f306:	4632      	mov	r2, r6
 801f308:	463b      	mov	r3, r7
 801f30a:	4630      	mov	r0, r6
 801f30c:	4639      	mov	r1, r7
 801f30e:	f7e1 f98b 	bl	8000628 <__aeabi_dmul>
 801f312:	4b51      	ldr	r3, [pc, #324]	; (801f458 <__kernel_cos+0x178>)
 801f314:	2200      	movs	r2, #0
 801f316:	4604      	mov	r4, r0
 801f318:	460d      	mov	r5, r1
 801f31a:	f7e1 f985 	bl	8000628 <__aeabi_dmul>
 801f31e:	a340      	add	r3, pc, #256	; (adr r3, 801f420 <__kernel_cos+0x140>)
 801f320:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f324:	4682      	mov	sl, r0
 801f326:	468b      	mov	fp, r1
 801f328:	4620      	mov	r0, r4
 801f32a:	4629      	mov	r1, r5
 801f32c:	f7e1 f97c 	bl	8000628 <__aeabi_dmul>
 801f330:	a33d      	add	r3, pc, #244	; (adr r3, 801f428 <__kernel_cos+0x148>)
 801f332:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f336:	f7e0 ffc1 	bl	80002bc <__adddf3>
 801f33a:	4622      	mov	r2, r4
 801f33c:	462b      	mov	r3, r5
 801f33e:	f7e1 f973 	bl	8000628 <__aeabi_dmul>
 801f342:	a33b      	add	r3, pc, #236	; (adr r3, 801f430 <__kernel_cos+0x150>)
 801f344:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f348:	f7e0 ffb6 	bl	80002b8 <__aeabi_dsub>
 801f34c:	4622      	mov	r2, r4
 801f34e:	462b      	mov	r3, r5
 801f350:	f7e1 f96a 	bl	8000628 <__aeabi_dmul>
 801f354:	a338      	add	r3, pc, #224	; (adr r3, 801f438 <__kernel_cos+0x158>)
 801f356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f35a:	f7e0 ffaf 	bl	80002bc <__adddf3>
 801f35e:	4622      	mov	r2, r4
 801f360:	462b      	mov	r3, r5
 801f362:	f7e1 f961 	bl	8000628 <__aeabi_dmul>
 801f366:	a336      	add	r3, pc, #216	; (adr r3, 801f440 <__kernel_cos+0x160>)
 801f368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f36c:	f7e0 ffa4 	bl	80002b8 <__aeabi_dsub>
 801f370:	4622      	mov	r2, r4
 801f372:	462b      	mov	r3, r5
 801f374:	f7e1 f958 	bl	8000628 <__aeabi_dmul>
 801f378:	a333      	add	r3, pc, #204	; (adr r3, 801f448 <__kernel_cos+0x168>)
 801f37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f37e:	f7e0 ff9d 	bl	80002bc <__adddf3>
 801f382:	4622      	mov	r2, r4
 801f384:	462b      	mov	r3, r5
 801f386:	f7e1 f94f 	bl	8000628 <__aeabi_dmul>
 801f38a:	4622      	mov	r2, r4
 801f38c:	462b      	mov	r3, r5
 801f38e:	f7e1 f94b 	bl	8000628 <__aeabi_dmul>
 801f392:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f396:	4604      	mov	r4, r0
 801f398:	460d      	mov	r5, r1
 801f39a:	4630      	mov	r0, r6
 801f39c:	4639      	mov	r1, r7
 801f39e:	f7e1 f943 	bl	8000628 <__aeabi_dmul>
 801f3a2:	460b      	mov	r3, r1
 801f3a4:	4602      	mov	r2, r0
 801f3a6:	4629      	mov	r1, r5
 801f3a8:	4620      	mov	r0, r4
 801f3aa:	f7e0 ff85 	bl	80002b8 <__aeabi_dsub>
 801f3ae:	4b2b      	ldr	r3, [pc, #172]	; (801f45c <__kernel_cos+0x17c>)
 801f3b0:	4598      	cmp	r8, r3
 801f3b2:	4606      	mov	r6, r0
 801f3b4:	460f      	mov	r7, r1
 801f3b6:	dc10      	bgt.n	801f3da <__kernel_cos+0xfa>
 801f3b8:	4602      	mov	r2, r0
 801f3ba:	460b      	mov	r3, r1
 801f3bc:	4650      	mov	r0, sl
 801f3be:	4659      	mov	r1, fp
 801f3c0:	f7e0 ff7a 	bl	80002b8 <__aeabi_dsub>
 801f3c4:	460b      	mov	r3, r1
 801f3c6:	4926      	ldr	r1, [pc, #152]	; (801f460 <__kernel_cos+0x180>)
 801f3c8:	4602      	mov	r2, r0
 801f3ca:	2000      	movs	r0, #0
 801f3cc:	f7e0 ff74 	bl	80002b8 <__aeabi_dsub>
 801f3d0:	ec41 0b10 	vmov	d0, r0, r1
 801f3d4:	b003      	add	sp, #12
 801f3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3da:	4b22      	ldr	r3, [pc, #136]	; (801f464 <__kernel_cos+0x184>)
 801f3dc:	4920      	ldr	r1, [pc, #128]	; (801f460 <__kernel_cos+0x180>)
 801f3de:	4598      	cmp	r8, r3
 801f3e0:	bfcc      	ite	gt
 801f3e2:	4d21      	ldrgt	r5, [pc, #132]	; (801f468 <__kernel_cos+0x188>)
 801f3e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801f3e8:	2400      	movs	r4, #0
 801f3ea:	4622      	mov	r2, r4
 801f3ec:	462b      	mov	r3, r5
 801f3ee:	2000      	movs	r0, #0
 801f3f0:	f7e0 ff62 	bl	80002b8 <__aeabi_dsub>
 801f3f4:	4622      	mov	r2, r4
 801f3f6:	4680      	mov	r8, r0
 801f3f8:	4689      	mov	r9, r1
 801f3fa:	462b      	mov	r3, r5
 801f3fc:	4650      	mov	r0, sl
 801f3fe:	4659      	mov	r1, fp
 801f400:	f7e0 ff5a 	bl	80002b8 <__aeabi_dsub>
 801f404:	4632      	mov	r2, r6
 801f406:	463b      	mov	r3, r7
 801f408:	f7e0 ff56 	bl	80002b8 <__aeabi_dsub>
 801f40c:	4602      	mov	r2, r0
 801f40e:	460b      	mov	r3, r1
 801f410:	4640      	mov	r0, r8
 801f412:	4649      	mov	r1, r9
 801f414:	e7da      	b.n	801f3cc <__kernel_cos+0xec>
 801f416:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801f450 <__kernel_cos+0x170>
 801f41a:	e7db      	b.n	801f3d4 <__kernel_cos+0xf4>
 801f41c:	f3af 8000 	nop.w
 801f420:	be8838d4 	.word	0xbe8838d4
 801f424:	bda8fae9 	.word	0xbda8fae9
 801f428:	bdb4b1c4 	.word	0xbdb4b1c4
 801f42c:	3e21ee9e 	.word	0x3e21ee9e
 801f430:	809c52ad 	.word	0x809c52ad
 801f434:	3e927e4f 	.word	0x3e927e4f
 801f438:	19cb1590 	.word	0x19cb1590
 801f43c:	3efa01a0 	.word	0x3efa01a0
 801f440:	16c15177 	.word	0x16c15177
 801f444:	3f56c16c 	.word	0x3f56c16c
 801f448:	5555554c 	.word	0x5555554c
 801f44c:	3fa55555 	.word	0x3fa55555
 801f450:	00000000 	.word	0x00000000
 801f454:	3ff00000 	.word	0x3ff00000
 801f458:	3fe00000 	.word	0x3fe00000
 801f45c:	3fd33332 	.word	0x3fd33332
 801f460:	3ff00000 	.word	0x3ff00000
 801f464:	3fe90000 	.word	0x3fe90000
 801f468:	3fd20000 	.word	0x3fd20000
 801f46c:	00000000 	.word	0x00000000

0801f470 <__kernel_rem_pio2>:
 801f470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f474:	ed2d 8b02 	vpush	{d8}
 801f478:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801f47c:	f112 0f14 	cmn.w	r2, #20
 801f480:	9308      	str	r3, [sp, #32]
 801f482:	9101      	str	r1, [sp, #4]
 801f484:	4bc4      	ldr	r3, [pc, #784]	; (801f798 <__kernel_rem_pio2+0x328>)
 801f486:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801f488:	900b      	str	r0, [sp, #44]	; 0x2c
 801f48a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f48e:	9302      	str	r3, [sp, #8]
 801f490:	9b08      	ldr	r3, [sp, #32]
 801f492:	f103 33ff 	add.w	r3, r3, #4294967295
 801f496:	bfa8      	it	ge
 801f498:	1ed4      	subge	r4, r2, #3
 801f49a:	9306      	str	r3, [sp, #24]
 801f49c:	bfb2      	itee	lt
 801f49e:	2400      	movlt	r4, #0
 801f4a0:	2318      	movge	r3, #24
 801f4a2:	fb94 f4f3 	sdivge	r4, r4, r3
 801f4a6:	f06f 0317 	mvn.w	r3, #23
 801f4aa:	fb04 3303 	mla	r3, r4, r3, r3
 801f4ae:	eb03 0a02 	add.w	sl, r3, r2
 801f4b2:	9b02      	ldr	r3, [sp, #8]
 801f4b4:	9a06      	ldr	r2, [sp, #24]
 801f4b6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 801f788 <__kernel_rem_pio2+0x318>
 801f4ba:	eb03 0802 	add.w	r8, r3, r2
 801f4be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801f4c0:	1aa7      	subs	r7, r4, r2
 801f4c2:	ae22      	add	r6, sp, #136	; 0x88
 801f4c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801f4c8:	2500      	movs	r5, #0
 801f4ca:	4545      	cmp	r5, r8
 801f4cc:	dd13      	ble.n	801f4f6 <__kernel_rem_pio2+0x86>
 801f4ce:	9b08      	ldr	r3, [sp, #32]
 801f4d0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 801f788 <__kernel_rem_pio2+0x318>
 801f4d4:	aa22      	add	r2, sp, #136	; 0x88
 801f4d6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801f4da:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801f4de:	f04f 0800 	mov.w	r8, #0
 801f4e2:	9b02      	ldr	r3, [sp, #8]
 801f4e4:	4598      	cmp	r8, r3
 801f4e6:	dc2f      	bgt.n	801f548 <__kernel_rem_pio2+0xd8>
 801f4e8:	ed8d 8b04 	vstr	d8, [sp, #16]
 801f4ec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801f4f0:	462f      	mov	r7, r5
 801f4f2:	2600      	movs	r6, #0
 801f4f4:	e01b      	b.n	801f52e <__kernel_rem_pio2+0xbe>
 801f4f6:	42ef      	cmn	r7, r5
 801f4f8:	d407      	bmi.n	801f50a <__kernel_rem_pio2+0x9a>
 801f4fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801f4fe:	f7e1 f829 	bl	8000554 <__aeabi_i2d>
 801f502:	e8e6 0102 	strd	r0, r1, [r6], #8
 801f506:	3501      	adds	r5, #1
 801f508:	e7df      	b.n	801f4ca <__kernel_rem_pio2+0x5a>
 801f50a:	ec51 0b18 	vmov	r0, r1, d8
 801f50e:	e7f8      	b.n	801f502 <__kernel_rem_pio2+0x92>
 801f510:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f514:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801f518:	f7e1 f886 	bl	8000628 <__aeabi_dmul>
 801f51c:	4602      	mov	r2, r0
 801f51e:	460b      	mov	r3, r1
 801f520:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f524:	f7e0 feca 	bl	80002bc <__adddf3>
 801f528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f52c:	3601      	adds	r6, #1
 801f52e:	9b06      	ldr	r3, [sp, #24]
 801f530:	429e      	cmp	r6, r3
 801f532:	f1a7 0708 	sub.w	r7, r7, #8
 801f536:	ddeb      	ble.n	801f510 <__kernel_rem_pio2+0xa0>
 801f538:	ed9d 7b04 	vldr	d7, [sp, #16]
 801f53c:	f108 0801 	add.w	r8, r8, #1
 801f540:	ecab 7b02 	vstmia	fp!, {d7}
 801f544:	3508      	adds	r5, #8
 801f546:	e7cc      	b.n	801f4e2 <__kernel_rem_pio2+0x72>
 801f548:	9b02      	ldr	r3, [sp, #8]
 801f54a:	aa0e      	add	r2, sp, #56	; 0x38
 801f54c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f550:	930d      	str	r3, [sp, #52]	; 0x34
 801f552:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801f554:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801f558:	9c02      	ldr	r4, [sp, #8]
 801f55a:	930c      	str	r3, [sp, #48]	; 0x30
 801f55c:	00e3      	lsls	r3, r4, #3
 801f55e:	930a      	str	r3, [sp, #40]	; 0x28
 801f560:	ab9a      	add	r3, sp, #616	; 0x268
 801f562:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f566:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801f56a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801f56e:	ab72      	add	r3, sp, #456	; 0x1c8
 801f570:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801f574:	46c3      	mov	fp, r8
 801f576:	46a1      	mov	r9, r4
 801f578:	f1b9 0f00 	cmp.w	r9, #0
 801f57c:	f1a5 0508 	sub.w	r5, r5, #8
 801f580:	dc77      	bgt.n	801f672 <__kernel_rem_pio2+0x202>
 801f582:	ec47 6b10 	vmov	d0, r6, r7
 801f586:	4650      	mov	r0, sl
 801f588:	f000 fc0a 	bl	801fda0 <scalbn>
 801f58c:	ec57 6b10 	vmov	r6, r7, d0
 801f590:	2200      	movs	r2, #0
 801f592:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801f596:	ee10 0a10 	vmov	r0, s0
 801f59a:	4639      	mov	r1, r7
 801f59c:	f7e1 f844 	bl	8000628 <__aeabi_dmul>
 801f5a0:	ec41 0b10 	vmov	d0, r0, r1
 801f5a4:	f000 fb7c 	bl	801fca0 <floor>
 801f5a8:	4b7c      	ldr	r3, [pc, #496]	; (801f79c <__kernel_rem_pio2+0x32c>)
 801f5aa:	ec51 0b10 	vmov	r0, r1, d0
 801f5ae:	2200      	movs	r2, #0
 801f5b0:	f7e1 f83a 	bl	8000628 <__aeabi_dmul>
 801f5b4:	4602      	mov	r2, r0
 801f5b6:	460b      	mov	r3, r1
 801f5b8:	4630      	mov	r0, r6
 801f5ba:	4639      	mov	r1, r7
 801f5bc:	f7e0 fe7c 	bl	80002b8 <__aeabi_dsub>
 801f5c0:	460f      	mov	r7, r1
 801f5c2:	4606      	mov	r6, r0
 801f5c4:	f7e1 fae0 	bl	8000b88 <__aeabi_d2iz>
 801f5c8:	9004      	str	r0, [sp, #16]
 801f5ca:	f7e0 ffc3 	bl	8000554 <__aeabi_i2d>
 801f5ce:	4602      	mov	r2, r0
 801f5d0:	460b      	mov	r3, r1
 801f5d2:	4630      	mov	r0, r6
 801f5d4:	4639      	mov	r1, r7
 801f5d6:	f7e0 fe6f 	bl	80002b8 <__aeabi_dsub>
 801f5da:	f1ba 0f00 	cmp.w	sl, #0
 801f5de:	4606      	mov	r6, r0
 801f5e0:	460f      	mov	r7, r1
 801f5e2:	dd6d      	ble.n	801f6c0 <__kernel_rem_pio2+0x250>
 801f5e4:	1e62      	subs	r2, r4, #1
 801f5e6:	ab0e      	add	r3, sp, #56	; 0x38
 801f5e8:	9d04      	ldr	r5, [sp, #16]
 801f5ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f5ee:	f1ca 0118 	rsb	r1, sl, #24
 801f5f2:	fa40 f301 	asr.w	r3, r0, r1
 801f5f6:	441d      	add	r5, r3
 801f5f8:	408b      	lsls	r3, r1
 801f5fa:	1ac0      	subs	r0, r0, r3
 801f5fc:	ab0e      	add	r3, sp, #56	; 0x38
 801f5fe:	9504      	str	r5, [sp, #16]
 801f600:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801f604:	f1ca 0317 	rsb	r3, sl, #23
 801f608:	fa40 fb03 	asr.w	fp, r0, r3
 801f60c:	f1bb 0f00 	cmp.w	fp, #0
 801f610:	dd65      	ble.n	801f6de <__kernel_rem_pio2+0x26e>
 801f612:	9b04      	ldr	r3, [sp, #16]
 801f614:	2200      	movs	r2, #0
 801f616:	3301      	adds	r3, #1
 801f618:	9304      	str	r3, [sp, #16]
 801f61a:	4615      	mov	r5, r2
 801f61c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801f620:	4294      	cmp	r4, r2
 801f622:	f300 809c 	bgt.w	801f75e <__kernel_rem_pio2+0x2ee>
 801f626:	f1ba 0f00 	cmp.w	sl, #0
 801f62a:	dd07      	ble.n	801f63c <__kernel_rem_pio2+0x1cc>
 801f62c:	f1ba 0f01 	cmp.w	sl, #1
 801f630:	f000 80c0 	beq.w	801f7b4 <__kernel_rem_pio2+0x344>
 801f634:	f1ba 0f02 	cmp.w	sl, #2
 801f638:	f000 80c6 	beq.w	801f7c8 <__kernel_rem_pio2+0x358>
 801f63c:	f1bb 0f02 	cmp.w	fp, #2
 801f640:	d14d      	bne.n	801f6de <__kernel_rem_pio2+0x26e>
 801f642:	4632      	mov	r2, r6
 801f644:	463b      	mov	r3, r7
 801f646:	4956      	ldr	r1, [pc, #344]	; (801f7a0 <__kernel_rem_pio2+0x330>)
 801f648:	2000      	movs	r0, #0
 801f64a:	f7e0 fe35 	bl	80002b8 <__aeabi_dsub>
 801f64e:	4606      	mov	r6, r0
 801f650:	460f      	mov	r7, r1
 801f652:	2d00      	cmp	r5, #0
 801f654:	d043      	beq.n	801f6de <__kernel_rem_pio2+0x26e>
 801f656:	4650      	mov	r0, sl
 801f658:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801f790 <__kernel_rem_pio2+0x320>
 801f65c:	f000 fba0 	bl	801fda0 <scalbn>
 801f660:	4630      	mov	r0, r6
 801f662:	4639      	mov	r1, r7
 801f664:	ec53 2b10 	vmov	r2, r3, d0
 801f668:	f7e0 fe26 	bl	80002b8 <__aeabi_dsub>
 801f66c:	4606      	mov	r6, r0
 801f66e:	460f      	mov	r7, r1
 801f670:	e035      	b.n	801f6de <__kernel_rem_pio2+0x26e>
 801f672:	4b4c      	ldr	r3, [pc, #304]	; (801f7a4 <__kernel_rem_pio2+0x334>)
 801f674:	2200      	movs	r2, #0
 801f676:	4630      	mov	r0, r6
 801f678:	4639      	mov	r1, r7
 801f67a:	f7e0 ffd5 	bl	8000628 <__aeabi_dmul>
 801f67e:	f7e1 fa83 	bl	8000b88 <__aeabi_d2iz>
 801f682:	f7e0 ff67 	bl	8000554 <__aeabi_i2d>
 801f686:	4602      	mov	r2, r0
 801f688:	460b      	mov	r3, r1
 801f68a:	ec43 2b18 	vmov	d8, r2, r3
 801f68e:	4b46      	ldr	r3, [pc, #280]	; (801f7a8 <__kernel_rem_pio2+0x338>)
 801f690:	2200      	movs	r2, #0
 801f692:	f7e0 ffc9 	bl	8000628 <__aeabi_dmul>
 801f696:	4602      	mov	r2, r0
 801f698:	460b      	mov	r3, r1
 801f69a:	4630      	mov	r0, r6
 801f69c:	4639      	mov	r1, r7
 801f69e:	f7e0 fe0b 	bl	80002b8 <__aeabi_dsub>
 801f6a2:	f7e1 fa71 	bl	8000b88 <__aeabi_d2iz>
 801f6a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f6aa:	f84b 0b04 	str.w	r0, [fp], #4
 801f6ae:	ec51 0b18 	vmov	r0, r1, d8
 801f6b2:	f7e0 fe03 	bl	80002bc <__adddf3>
 801f6b6:	f109 39ff 	add.w	r9, r9, #4294967295
 801f6ba:	4606      	mov	r6, r0
 801f6bc:	460f      	mov	r7, r1
 801f6be:	e75b      	b.n	801f578 <__kernel_rem_pio2+0x108>
 801f6c0:	d106      	bne.n	801f6d0 <__kernel_rem_pio2+0x260>
 801f6c2:	1e63      	subs	r3, r4, #1
 801f6c4:	aa0e      	add	r2, sp, #56	; 0x38
 801f6c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801f6ca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801f6ce:	e79d      	b.n	801f60c <__kernel_rem_pio2+0x19c>
 801f6d0:	4b36      	ldr	r3, [pc, #216]	; (801f7ac <__kernel_rem_pio2+0x33c>)
 801f6d2:	2200      	movs	r2, #0
 801f6d4:	f7e1 fa2e 	bl	8000b34 <__aeabi_dcmpge>
 801f6d8:	2800      	cmp	r0, #0
 801f6da:	d13d      	bne.n	801f758 <__kernel_rem_pio2+0x2e8>
 801f6dc:	4683      	mov	fp, r0
 801f6de:	2200      	movs	r2, #0
 801f6e0:	2300      	movs	r3, #0
 801f6e2:	4630      	mov	r0, r6
 801f6e4:	4639      	mov	r1, r7
 801f6e6:	f7e1 fa07 	bl	8000af8 <__aeabi_dcmpeq>
 801f6ea:	2800      	cmp	r0, #0
 801f6ec:	f000 80c0 	beq.w	801f870 <__kernel_rem_pio2+0x400>
 801f6f0:	1e65      	subs	r5, r4, #1
 801f6f2:	462b      	mov	r3, r5
 801f6f4:	2200      	movs	r2, #0
 801f6f6:	9902      	ldr	r1, [sp, #8]
 801f6f8:	428b      	cmp	r3, r1
 801f6fa:	da6c      	bge.n	801f7d6 <__kernel_rem_pio2+0x366>
 801f6fc:	2a00      	cmp	r2, #0
 801f6fe:	f000 8089 	beq.w	801f814 <__kernel_rem_pio2+0x3a4>
 801f702:	ab0e      	add	r3, sp, #56	; 0x38
 801f704:	f1aa 0a18 	sub.w	sl, sl, #24
 801f708:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	f000 80ad 	beq.w	801f86c <__kernel_rem_pio2+0x3fc>
 801f712:	4650      	mov	r0, sl
 801f714:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 801f790 <__kernel_rem_pio2+0x320>
 801f718:	f000 fb42 	bl	801fda0 <scalbn>
 801f71c:	ab9a      	add	r3, sp, #616	; 0x268
 801f71e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f722:	ec57 6b10 	vmov	r6, r7, d0
 801f726:	00ec      	lsls	r4, r5, #3
 801f728:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801f72c:	46aa      	mov	sl, r5
 801f72e:	f1ba 0f00 	cmp.w	sl, #0
 801f732:	f280 80d6 	bge.w	801f8e2 <__kernel_rem_pio2+0x472>
 801f736:	ed9f 8b14 	vldr	d8, [pc, #80]	; 801f788 <__kernel_rem_pio2+0x318>
 801f73a:	462e      	mov	r6, r5
 801f73c:	2e00      	cmp	r6, #0
 801f73e:	f2c0 8104 	blt.w	801f94a <__kernel_rem_pio2+0x4da>
 801f742:	ab72      	add	r3, sp, #456	; 0x1c8
 801f744:	ed8d 8b06 	vstr	d8, [sp, #24]
 801f748:	f8df a064 	ldr.w	sl, [pc, #100]	; 801f7b0 <__kernel_rem_pio2+0x340>
 801f74c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 801f750:	f04f 0800 	mov.w	r8, #0
 801f754:	1baf      	subs	r7, r5, r6
 801f756:	e0ea      	b.n	801f92e <__kernel_rem_pio2+0x4be>
 801f758:	f04f 0b02 	mov.w	fp, #2
 801f75c:	e759      	b.n	801f612 <__kernel_rem_pio2+0x1a2>
 801f75e:	f8d8 3000 	ldr.w	r3, [r8]
 801f762:	b955      	cbnz	r5, 801f77a <__kernel_rem_pio2+0x30a>
 801f764:	b123      	cbz	r3, 801f770 <__kernel_rem_pio2+0x300>
 801f766:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801f76a:	f8c8 3000 	str.w	r3, [r8]
 801f76e:	2301      	movs	r3, #1
 801f770:	3201      	adds	r2, #1
 801f772:	f108 0804 	add.w	r8, r8, #4
 801f776:	461d      	mov	r5, r3
 801f778:	e752      	b.n	801f620 <__kernel_rem_pio2+0x1b0>
 801f77a:	1acb      	subs	r3, r1, r3
 801f77c:	f8c8 3000 	str.w	r3, [r8]
 801f780:	462b      	mov	r3, r5
 801f782:	e7f5      	b.n	801f770 <__kernel_rem_pio2+0x300>
 801f784:	f3af 8000 	nop.w
	...
 801f794:	3ff00000 	.word	0x3ff00000
 801f798:	08025ac0 	.word	0x08025ac0
 801f79c:	40200000 	.word	0x40200000
 801f7a0:	3ff00000 	.word	0x3ff00000
 801f7a4:	3e700000 	.word	0x3e700000
 801f7a8:	41700000 	.word	0x41700000
 801f7ac:	3fe00000 	.word	0x3fe00000
 801f7b0:	08025a80 	.word	0x08025a80
 801f7b4:	1e62      	subs	r2, r4, #1
 801f7b6:	ab0e      	add	r3, sp, #56	; 0x38
 801f7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f7bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801f7c0:	a90e      	add	r1, sp, #56	; 0x38
 801f7c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801f7c6:	e739      	b.n	801f63c <__kernel_rem_pio2+0x1cc>
 801f7c8:	1e62      	subs	r2, r4, #1
 801f7ca:	ab0e      	add	r3, sp, #56	; 0x38
 801f7cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f7d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801f7d4:	e7f4      	b.n	801f7c0 <__kernel_rem_pio2+0x350>
 801f7d6:	a90e      	add	r1, sp, #56	; 0x38
 801f7d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801f7dc:	3b01      	subs	r3, #1
 801f7de:	430a      	orrs	r2, r1
 801f7e0:	e789      	b.n	801f6f6 <__kernel_rem_pio2+0x286>
 801f7e2:	3301      	adds	r3, #1
 801f7e4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801f7e8:	2900      	cmp	r1, #0
 801f7ea:	d0fa      	beq.n	801f7e2 <__kernel_rem_pio2+0x372>
 801f7ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f7ee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801f7f2:	446a      	add	r2, sp
 801f7f4:	3a98      	subs	r2, #152	; 0x98
 801f7f6:	920a      	str	r2, [sp, #40]	; 0x28
 801f7f8:	9a08      	ldr	r2, [sp, #32]
 801f7fa:	18e3      	adds	r3, r4, r3
 801f7fc:	18a5      	adds	r5, r4, r2
 801f7fe:	aa22      	add	r2, sp, #136	; 0x88
 801f800:	f104 0801 	add.w	r8, r4, #1
 801f804:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801f808:	9304      	str	r3, [sp, #16]
 801f80a:	9b04      	ldr	r3, [sp, #16]
 801f80c:	4543      	cmp	r3, r8
 801f80e:	da04      	bge.n	801f81a <__kernel_rem_pio2+0x3aa>
 801f810:	461c      	mov	r4, r3
 801f812:	e6a3      	b.n	801f55c <__kernel_rem_pio2+0xec>
 801f814:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f816:	2301      	movs	r3, #1
 801f818:	e7e4      	b.n	801f7e4 <__kernel_rem_pio2+0x374>
 801f81a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f81c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801f820:	f7e0 fe98 	bl	8000554 <__aeabi_i2d>
 801f824:	e8e5 0102 	strd	r0, r1, [r5], #8
 801f828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f82a:	46ab      	mov	fp, r5
 801f82c:	461c      	mov	r4, r3
 801f82e:	f04f 0900 	mov.w	r9, #0
 801f832:	2600      	movs	r6, #0
 801f834:	2700      	movs	r7, #0
 801f836:	9b06      	ldr	r3, [sp, #24]
 801f838:	4599      	cmp	r9, r3
 801f83a:	dd06      	ble.n	801f84a <__kernel_rem_pio2+0x3da>
 801f83c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f83e:	e8e3 6702 	strd	r6, r7, [r3], #8
 801f842:	f108 0801 	add.w	r8, r8, #1
 801f846:	930a      	str	r3, [sp, #40]	; 0x28
 801f848:	e7df      	b.n	801f80a <__kernel_rem_pio2+0x39a>
 801f84a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801f84e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801f852:	f7e0 fee9 	bl	8000628 <__aeabi_dmul>
 801f856:	4602      	mov	r2, r0
 801f858:	460b      	mov	r3, r1
 801f85a:	4630      	mov	r0, r6
 801f85c:	4639      	mov	r1, r7
 801f85e:	f7e0 fd2d 	bl	80002bc <__adddf3>
 801f862:	f109 0901 	add.w	r9, r9, #1
 801f866:	4606      	mov	r6, r0
 801f868:	460f      	mov	r7, r1
 801f86a:	e7e4      	b.n	801f836 <__kernel_rem_pio2+0x3c6>
 801f86c:	3d01      	subs	r5, #1
 801f86e:	e748      	b.n	801f702 <__kernel_rem_pio2+0x292>
 801f870:	ec47 6b10 	vmov	d0, r6, r7
 801f874:	f1ca 0000 	rsb	r0, sl, #0
 801f878:	f000 fa92 	bl	801fda0 <scalbn>
 801f87c:	ec57 6b10 	vmov	r6, r7, d0
 801f880:	4ba0      	ldr	r3, [pc, #640]	; (801fb04 <__kernel_rem_pio2+0x694>)
 801f882:	ee10 0a10 	vmov	r0, s0
 801f886:	2200      	movs	r2, #0
 801f888:	4639      	mov	r1, r7
 801f88a:	f7e1 f953 	bl	8000b34 <__aeabi_dcmpge>
 801f88e:	b1f8      	cbz	r0, 801f8d0 <__kernel_rem_pio2+0x460>
 801f890:	4b9d      	ldr	r3, [pc, #628]	; (801fb08 <__kernel_rem_pio2+0x698>)
 801f892:	2200      	movs	r2, #0
 801f894:	4630      	mov	r0, r6
 801f896:	4639      	mov	r1, r7
 801f898:	f7e0 fec6 	bl	8000628 <__aeabi_dmul>
 801f89c:	f7e1 f974 	bl	8000b88 <__aeabi_d2iz>
 801f8a0:	4680      	mov	r8, r0
 801f8a2:	f7e0 fe57 	bl	8000554 <__aeabi_i2d>
 801f8a6:	4b97      	ldr	r3, [pc, #604]	; (801fb04 <__kernel_rem_pio2+0x694>)
 801f8a8:	2200      	movs	r2, #0
 801f8aa:	f7e0 febd 	bl	8000628 <__aeabi_dmul>
 801f8ae:	460b      	mov	r3, r1
 801f8b0:	4602      	mov	r2, r0
 801f8b2:	4639      	mov	r1, r7
 801f8b4:	4630      	mov	r0, r6
 801f8b6:	f7e0 fcff 	bl	80002b8 <__aeabi_dsub>
 801f8ba:	f7e1 f965 	bl	8000b88 <__aeabi_d2iz>
 801f8be:	1c65      	adds	r5, r4, #1
 801f8c0:	ab0e      	add	r3, sp, #56	; 0x38
 801f8c2:	f10a 0a18 	add.w	sl, sl, #24
 801f8c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801f8ca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801f8ce:	e720      	b.n	801f712 <__kernel_rem_pio2+0x2a2>
 801f8d0:	4630      	mov	r0, r6
 801f8d2:	4639      	mov	r1, r7
 801f8d4:	f7e1 f958 	bl	8000b88 <__aeabi_d2iz>
 801f8d8:	ab0e      	add	r3, sp, #56	; 0x38
 801f8da:	4625      	mov	r5, r4
 801f8dc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801f8e0:	e717      	b.n	801f712 <__kernel_rem_pio2+0x2a2>
 801f8e2:	ab0e      	add	r3, sp, #56	; 0x38
 801f8e4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801f8e8:	f7e0 fe34 	bl	8000554 <__aeabi_i2d>
 801f8ec:	4632      	mov	r2, r6
 801f8ee:	463b      	mov	r3, r7
 801f8f0:	f7e0 fe9a 	bl	8000628 <__aeabi_dmul>
 801f8f4:	4b84      	ldr	r3, [pc, #528]	; (801fb08 <__kernel_rem_pio2+0x698>)
 801f8f6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801f8fa:	2200      	movs	r2, #0
 801f8fc:	4630      	mov	r0, r6
 801f8fe:	4639      	mov	r1, r7
 801f900:	f7e0 fe92 	bl	8000628 <__aeabi_dmul>
 801f904:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f908:	4606      	mov	r6, r0
 801f90a:	460f      	mov	r7, r1
 801f90c:	e70f      	b.n	801f72e <__kernel_rem_pio2+0x2be>
 801f90e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801f912:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801f916:	f7e0 fe87 	bl	8000628 <__aeabi_dmul>
 801f91a:	4602      	mov	r2, r0
 801f91c:	460b      	mov	r3, r1
 801f91e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f922:	f7e0 fccb 	bl	80002bc <__adddf3>
 801f926:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f92a:	f108 0801 	add.w	r8, r8, #1
 801f92e:	9b02      	ldr	r3, [sp, #8]
 801f930:	4598      	cmp	r8, r3
 801f932:	dc01      	bgt.n	801f938 <__kernel_rem_pio2+0x4c8>
 801f934:	45b8      	cmp	r8, r7
 801f936:	ddea      	ble.n	801f90e <__kernel_rem_pio2+0x49e>
 801f938:	ed9d 7b06 	vldr	d7, [sp, #24]
 801f93c:	ab4a      	add	r3, sp, #296	; 0x128
 801f93e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801f942:	ed87 7b00 	vstr	d7, [r7]
 801f946:	3e01      	subs	r6, #1
 801f948:	e6f8      	b.n	801f73c <__kernel_rem_pio2+0x2cc>
 801f94a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801f94c:	2b02      	cmp	r3, #2
 801f94e:	dc0b      	bgt.n	801f968 <__kernel_rem_pio2+0x4f8>
 801f950:	2b00      	cmp	r3, #0
 801f952:	dc35      	bgt.n	801f9c0 <__kernel_rem_pio2+0x550>
 801f954:	d059      	beq.n	801fa0a <__kernel_rem_pio2+0x59a>
 801f956:	9b04      	ldr	r3, [sp, #16]
 801f958:	f003 0007 	and.w	r0, r3, #7
 801f95c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801f960:	ecbd 8b02 	vpop	{d8}
 801f964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f968:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801f96a:	2b03      	cmp	r3, #3
 801f96c:	d1f3      	bne.n	801f956 <__kernel_rem_pio2+0x4e6>
 801f96e:	ab4a      	add	r3, sp, #296	; 0x128
 801f970:	4423      	add	r3, r4
 801f972:	9306      	str	r3, [sp, #24]
 801f974:	461c      	mov	r4, r3
 801f976:	469a      	mov	sl, r3
 801f978:	9502      	str	r5, [sp, #8]
 801f97a:	9b02      	ldr	r3, [sp, #8]
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	f1aa 0a08 	sub.w	sl, sl, #8
 801f982:	dc6b      	bgt.n	801fa5c <__kernel_rem_pio2+0x5ec>
 801f984:	46aa      	mov	sl, r5
 801f986:	f1ba 0f01 	cmp.w	sl, #1
 801f98a:	f1a4 0408 	sub.w	r4, r4, #8
 801f98e:	f300 8085 	bgt.w	801fa9c <__kernel_rem_pio2+0x62c>
 801f992:	9c06      	ldr	r4, [sp, #24]
 801f994:	2000      	movs	r0, #0
 801f996:	3408      	adds	r4, #8
 801f998:	2100      	movs	r1, #0
 801f99a:	2d01      	cmp	r5, #1
 801f99c:	f300 809d 	bgt.w	801fada <__kernel_rem_pio2+0x66a>
 801f9a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801f9a4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 801f9a8:	f1bb 0f00 	cmp.w	fp, #0
 801f9ac:	f040 809b 	bne.w	801fae6 <__kernel_rem_pio2+0x676>
 801f9b0:	9b01      	ldr	r3, [sp, #4]
 801f9b2:	e9c3 5600 	strd	r5, r6, [r3]
 801f9b6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801f9ba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801f9be:	e7ca      	b.n	801f956 <__kernel_rem_pio2+0x4e6>
 801f9c0:	3408      	adds	r4, #8
 801f9c2:	ab4a      	add	r3, sp, #296	; 0x128
 801f9c4:	441c      	add	r4, r3
 801f9c6:	462e      	mov	r6, r5
 801f9c8:	2000      	movs	r0, #0
 801f9ca:	2100      	movs	r1, #0
 801f9cc:	2e00      	cmp	r6, #0
 801f9ce:	da36      	bge.n	801fa3e <__kernel_rem_pio2+0x5ce>
 801f9d0:	f1bb 0f00 	cmp.w	fp, #0
 801f9d4:	d039      	beq.n	801fa4a <__kernel_rem_pio2+0x5da>
 801f9d6:	4602      	mov	r2, r0
 801f9d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f9dc:	9c01      	ldr	r4, [sp, #4]
 801f9de:	e9c4 2300 	strd	r2, r3, [r4]
 801f9e2:	4602      	mov	r2, r0
 801f9e4:	460b      	mov	r3, r1
 801f9e6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801f9ea:	f7e0 fc65 	bl	80002b8 <__aeabi_dsub>
 801f9ee:	ae4c      	add	r6, sp, #304	; 0x130
 801f9f0:	2401      	movs	r4, #1
 801f9f2:	42a5      	cmp	r5, r4
 801f9f4:	da2c      	bge.n	801fa50 <__kernel_rem_pio2+0x5e0>
 801f9f6:	f1bb 0f00 	cmp.w	fp, #0
 801f9fa:	d002      	beq.n	801fa02 <__kernel_rem_pio2+0x592>
 801f9fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801fa00:	4619      	mov	r1, r3
 801fa02:	9b01      	ldr	r3, [sp, #4]
 801fa04:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801fa08:	e7a5      	b.n	801f956 <__kernel_rem_pio2+0x4e6>
 801fa0a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801fa0e:	eb0d 0403 	add.w	r4, sp, r3
 801fa12:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801fa16:	2000      	movs	r0, #0
 801fa18:	2100      	movs	r1, #0
 801fa1a:	2d00      	cmp	r5, #0
 801fa1c:	da09      	bge.n	801fa32 <__kernel_rem_pio2+0x5c2>
 801fa1e:	f1bb 0f00 	cmp.w	fp, #0
 801fa22:	d002      	beq.n	801fa2a <__kernel_rem_pio2+0x5ba>
 801fa24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801fa28:	4619      	mov	r1, r3
 801fa2a:	9b01      	ldr	r3, [sp, #4]
 801fa2c:	e9c3 0100 	strd	r0, r1, [r3]
 801fa30:	e791      	b.n	801f956 <__kernel_rem_pio2+0x4e6>
 801fa32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801fa36:	f7e0 fc41 	bl	80002bc <__adddf3>
 801fa3a:	3d01      	subs	r5, #1
 801fa3c:	e7ed      	b.n	801fa1a <__kernel_rem_pio2+0x5aa>
 801fa3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801fa42:	f7e0 fc3b 	bl	80002bc <__adddf3>
 801fa46:	3e01      	subs	r6, #1
 801fa48:	e7c0      	b.n	801f9cc <__kernel_rem_pio2+0x55c>
 801fa4a:	4602      	mov	r2, r0
 801fa4c:	460b      	mov	r3, r1
 801fa4e:	e7c5      	b.n	801f9dc <__kernel_rem_pio2+0x56c>
 801fa50:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801fa54:	f7e0 fc32 	bl	80002bc <__adddf3>
 801fa58:	3401      	adds	r4, #1
 801fa5a:	e7ca      	b.n	801f9f2 <__kernel_rem_pio2+0x582>
 801fa5c:	e9da 8900 	ldrd	r8, r9, [sl]
 801fa60:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801fa64:	9b02      	ldr	r3, [sp, #8]
 801fa66:	3b01      	subs	r3, #1
 801fa68:	9302      	str	r3, [sp, #8]
 801fa6a:	4632      	mov	r2, r6
 801fa6c:	463b      	mov	r3, r7
 801fa6e:	4640      	mov	r0, r8
 801fa70:	4649      	mov	r1, r9
 801fa72:	f7e0 fc23 	bl	80002bc <__adddf3>
 801fa76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801fa7a:	4602      	mov	r2, r0
 801fa7c:	460b      	mov	r3, r1
 801fa7e:	4640      	mov	r0, r8
 801fa80:	4649      	mov	r1, r9
 801fa82:	f7e0 fc19 	bl	80002b8 <__aeabi_dsub>
 801fa86:	4632      	mov	r2, r6
 801fa88:	463b      	mov	r3, r7
 801fa8a:	f7e0 fc17 	bl	80002bc <__adddf3>
 801fa8e:	ed9d 7b08 	vldr	d7, [sp, #32]
 801fa92:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801fa96:	ed8a 7b00 	vstr	d7, [sl]
 801fa9a:	e76e      	b.n	801f97a <__kernel_rem_pio2+0x50a>
 801fa9c:	e9d4 8900 	ldrd	r8, r9, [r4]
 801faa0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801faa4:	4640      	mov	r0, r8
 801faa6:	4632      	mov	r2, r6
 801faa8:	463b      	mov	r3, r7
 801faaa:	4649      	mov	r1, r9
 801faac:	f7e0 fc06 	bl	80002bc <__adddf3>
 801fab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fab4:	4602      	mov	r2, r0
 801fab6:	460b      	mov	r3, r1
 801fab8:	4640      	mov	r0, r8
 801faba:	4649      	mov	r1, r9
 801fabc:	f7e0 fbfc 	bl	80002b8 <__aeabi_dsub>
 801fac0:	4632      	mov	r2, r6
 801fac2:	463b      	mov	r3, r7
 801fac4:	f7e0 fbfa 	bl	80002bc <__adddf3>
 801fac8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801facc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801fad0:	ed84 7b00 	vstr	d7, [r4]
 801fad4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fad8:	e755      	b.n	801f986 <__kernel_rem_pio2+0x516>
 801fada:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801fade:	f7e0 fbed 	bl	80002bc <__adddf3>
 801fae2:	3d01      	subs	r5, #1
 801fae4:	e759      	b.n	801f99a <__kernel_rem_pio2+0x52a>
 801fae6:	9b01      	ldr	r3, [sp, #4]
 801fae8:	9a01      	ldr	r2, [sp, #4]
 801faea:	601d      	str	r5, [r3, #0]
 801faec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801faf0:	605c      	str	r4, [r3, #4]
 801faf2:	609f      	str	r7, [r3, #8]
 801faf4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801faf8:	60d3      	str	r3, [r2, #12]
 801fafa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801fafe:	6110      	str	r0, [r2, #16]
 801fb00:	6153      	str	r3, [r2, #20]
 801fb02:	e728      	b.n	801f956 <__kernel_rem_pio2+0x4e6>
 801fb04:	41700000 	.word	0x41700000
 801fb08:	3e700000 	.word	0x3e700000
 801fb0c:	00000000 	.word	0x00000000

0801fb10 <__kernel_sin>:
 801fb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb14:	ed2d 8b04 	vpush	{d8-d9}
 801fb18:	eeb0 8a41 	vmov.f32	s16, s2
 801fb1c:	eef0 8a61 	vmov.f32	s17, s3
 801fb20:	ec55 4b10 	vmov	r4, r5, d0
 801fb24:	b083      	sub	sp, #12
 801fb26:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801fb2a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801fb2e:	9001      	str	r0, [sp, #4]
 801fb30:	da06      	bge.n	801fb40 <__kernel_sin+0x30>
 801fb32:	ee10 0a10 	vmov	r0, s0
 801fb36:	4629      	mov	r1, r5
 801fb38:	f7e1 f826 	bl	8000b88 <__aeabi_d2iz>
 801fb3c:	2800      	cmp	r0, #0
 801fb3e:	d051      	beq.n	801fbe4 <__kernel_sin+0xd4>
 801fb40:	4622      	mov	r2, r4
 801fb42:	462b      	mov	r3, r5
 801fb44:	4620      	mov	r0, r4
 801fb46:	4629      	mov	r1, r5
 801fb48:	f7e0 fd6e 	bl	8000628 <__aeabi_dmul>
 801fb4c:	4682      	mov	sl, r0
 801fb4e:	468b      	mov	fp, r1
 801fb50:	4602      	mov	r2, r0
 801fb52:	460b      	mov	r3, r1
 801fb54:	4620      	mov	r0, r4
 801fb56:	4629      	mov	r1, r5
 801fb58:	f7e0 fd66 	bl	8000628 <__aeabi_dmul>
 801fb5c:	a341      	add	r3, pc, #260	; (adr r3, 801fc64 <__kernel_sin+0x154>)
 801fb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb62:	4680      	mov	r8, r0
 801fb64:	4689      	mov	r9, r1
 801fb66:	4650      	mov	r0, sl
 801fb68:	4659      	mov	r1, fp
 801fb6a:	f7e0 fd5d 	bl	8000628 <__aeabi_dmul>
 801fb6e:	a33f      	add	r3, pc, #252	; (adr r3, 801fc6c <__kernel_sin+0x15c>)
 801fb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb74:	f7e0 fba0 	bl	80002b8 <__aeabi_dsub>
 801fb78:	4652      	mov	r2, sl
 801fb7a:	465b      	mov	r3, fp
 801fb7c:	f7e0 fd54 	bl	8000628 <__aeabi_dmul>
 801fb80:	a33c      	add	r3, pc, #240	; (adr r3, 801fc74 <__kernel_sin+0x164>)
 801fb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb86:	f7e0 fb99 	bl	80002bc <__adddf3>
 801fb8a:	4652      	mov	r2, sl
 801fb8c:	465b      	mov	r3, fp
 801fb8e:	f7e0 fd4b 	bl	8000628 <__aeabi_dmul>
 801fb92:	a33a      	add	r3, pc, #232	; (adr r3, 801fc7c <__kernel_sin+0x16c>)
 801fb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb98:	f7e0 fb8e 	bl	80002b8 <__aeabi_dsub>
 801fb9c:	4652      	mov	r2, sl
 801fb9e:	465b      	mov	r3, fp
 801fba0:	f7e0 fd42 	bl	8000628 <__aeabi_dmul>
 801fba4:	a337      	add	r3, pc, #220	; (adr r3, 801fc84 <__kernel_sin+0x174>)
 801fba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbaa:	f7e0 fb87 	bl	80002bc <__adddf3>
 801fbae:	9b01      	ldr	r3, [sp, #4]
 801fbb0:	4606      	mov	r6, r0
 801fbb2:	460f      	mov	r7, r1
 801fbb4:	b9eb      	cbnz	r3, 801fbf2 <__kernel_sin+0xe2>
 801fbb6:	4602      	mov	r2, r0
 801fbb8:	460b      	mov	r3, r1
 801fbba:	4650      	mov	r0, sl
 801fbbc:	4659      	mov	r1, fp
 801fbbe:	f7e0 fd33 	bl	8000628 <__aeabi_dmul>
 801fbc2:	a325      	add	r3, pc, #148	; (adr r3, 801fc58 <__kernel_sin+0x148>)
 801fbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbc8:	f7e0 fb76 	bl	80002b8 <__aeabi_dsub>
 801fbcc:	4642      	mov	r2, r8
 801fbce:	464b      	mov	r3, r9
 801fbd0:	f7e0 fd2a 	bl	8000628 <__aeabi_dmul>
 801fbd4:	4602      	mov	r2, r0
 801fbd6:	460b      	mov	r3, r1
 801fbd8:	4620      	mov	r0, r4
 801fbda:	4629      	mov	r1, r5
 801fbdc:	f7e0 fb6e 	bl	80002bc <__adddf3>
 801fbe0:	4604      	mov	r4, r0
 801fbe2:	460d      	mov	r5, r1
 801fbe4:	ec45 4b10 	vmov	d0, r4, r5
 801fbe8:	b003      	add	sp, #12
 801fbea:	ecbd 8b04 	vpop	{d8-d9}
 801fbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbf2:	4b1b      	ldr	r3, [pc, #108]	; (801fc60 <__kernel_sin+0x150>)
 801fbf4:	ec51 0b18 	vmov	r0, r1, d8
 801fbf8:	2200      	movs	r2, #0
 801fbfa:	f7e0 fd15 	bl	8000628 <__aeabi_dmul>
 801fbfe:	4632      	mov	r2, r6
 801fc00:	ec41 0b19 	vmov	d9, r0, r1
 801fc04:	463b      	mov	r3, r7
 801fc06:	4640      	mov	r0, r8
 801fc08:	4649      	mov	r1, r9
 801fc0a:	f7e0 fd0d 	bl	8000628 <__aeabi_dmul>
 801fc0e:	4602      	mov	r2, r0
 801fc10:	460b      	mov	r3, r1
 801fc12:	ec51 0b19 	vmov	r0, r1, d9
 801fc16:	f7e0 fb4f 	bl	80002b8 <__aeabi_dsub>
 801fc1a:	4652      	mov	r2, sl
 801fc1c:	465b      	mov	r3, fp
 801fc1e:	f7e0 fd03 	bl	8000628 <__aeabi_dmul>
 801fc22:	ec53 2b18 	vmov	r2, r3, d8
 801fc26:	f7e0 fb47 	bl	80002b8 <__aeabi_dsub>
 801fc2a:	a30b      	add	r3, pc, #44	; (adr r3, 801fc58 <__kernel_sin+0x148>)
 801fc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc30:	4606      	mov	r6, r0
 801fc32:	460f      	mov	r7, r1
 801fc34:	4640      	mov	r0, r8
 801fc36:	4649      	mov	r1, r9
 801fc38:	f7e0 fcf6 	bl	8000628 <__aeabi_dmul>
 801fc3c:	4602      	mov	r2, r0
 801fc3e:	460b      	mov	r3, r1
 801fc40:	4630      	mov	r0, r6
 801fc42:	4639      	mov	r1, r7
 801fc44:	f7e0 fb3a 	bl	80002bc <__adddf3>
 801fc48:	4602      	mov	r2, r0
 801fc4a:	460b      	mov	r3, r1
 801fc4c:	4620      	mov	r0, r4
 801fc4e:	4629      	mov	r1, r5
 801fc50:	f7e0 fb32 	bl	80002b8 <__aeabi_dsub>
 801fc54:	e7c4      	b.n	801fbe0 <__kernel_sin+0xd0>
 801fc56:	bf00      	nop
 801fc58:	55555549 	.word	0x55555549
 801fc5c:	3fc55555 	.word	0x3fc55555
 801fc60:	3fe00000 	.word	0x3fe00000
 801fc64:	5acfd57c 	.word	0x5acfd57c
 801fc68:	3de5d93a 	.word	0x3de5d93a
 801fc6c:	8a2b9ceb 	.word	0x8a2b9ceb
 801fc70:	3e5ae5e6 	.word	0x3e5ae5e6
 801fc74:	57b1fe7d 	.word	0x57b1fe7d
 801fc78:	3ec71de3 	.word	0x3ec71de3
 801fc7c:	19c161d5 	.word	0x19c161d5
 801fc80:	3f2a01a0 	.word	0x3f2a01a0
 801fc84:	1110f8a6 	.word	0x1110f8a6
 801fc88:	3f811111 	.word	0x3f811111

0801fc8c <fabs>:
 801fc8c:	ec51 0b10 	vmov	r0, r1, d0
 801fc90:	ee10 2a10 	vmov	r2, s0
 801fc94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801fc98:	ec43 2b10 	vmov	d0, r2, r3
 801fc9c:	4770      	bx	lr
	...

0801fca0 <floor>:
 801fca0:	ec51 0b10 	vmov	r0, r1, d0
 801fca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fca8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801fcac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801fcb0:	2e13      	cmp	r6, #19
 801fcb2:	ee10 5a10 	vmov	r5, s0
 801fcb6:	ee10 8a10 	vmov	r8, s0
 801fcba:	460c      	mov	r4, r1
 801fcbc:	dc32      	bgt.n	801fd24 <floor+0x84>
 801fcbe:	2e00      	cmp	r6, #0
 801fcc0:	da14      	bge.n	801fcec <floor+0x4c>
 801fcc2:	a333      	add	r3, pc, #204	; (adr r3, 801fd90 <floor+0xf0>)
 801fcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcc8:	f7e0 faf8 	bl	80002bc <__adddf3>
 801fccc:	2200      	movs	r2, #0
 801fcce:	2300      	movs	r3, #0
 801fcd0:	f7e0 ff3a 	bl	8000b48 <__aeabi_dcmpgt>
 801fcd4:	b138      	cbz	r0, 801fce6 <floor+0x46>
 801fcd6:	2c00      	cmp	r4, #0
 801fcd8:	da57      	bge.n	801fd8a <floor+0xea>
 801fcda:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801fcde:	431d      	orrs	r5, r3
 801fce0:	d001      	beq.n	801fce6 <floor+0x46>
 801fce2:	4c2d      	ldr	r4, [pc, #180]	; (801fd98 <floor+0xf8>)
 801fce4:	2500      	movs	r5, #0
 801fce6:	4621      	mov	r1, r4
 801fce8:	4628      	mov	r0, r5
 801fcea:	e025      	b.n	801fd38 <floor+0x98>
 801fcec:	4f2b      	ldr	r7, [pc, #172]	; (801fd9c <floor+0xfc>)
 801fcee:	4137      	asrs	r7, r6
 801fcf0:	ea01 0307 	and.w	r3, r1, r7
 801fcf4:	4303      	orrs	r3, r0
 801fcf6:	d01f      	beq.n	801fd38 <floor+0x98>
 801fcf8:	a325      	add	r3, pc, #148	; (adr r3, 801fd90 <floor+0xf0>)
 801fcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcfe:	f7e0 fadd 	bl	80002bc <__adddf3>
 801fd02:	2200      	movs	r2, #0
 801fd04:	2300      	movs	r3, #0
 801fd06:	f7e0 ff1f 	bl	8000b48 <__aeabi_dcmpgt>
 801fd0a:	2800      	cmp	r0, #0
 801fd0c:	d0eb      	beq.n	801fce6 <floor+0x46>
 801fd0e:	2c00      	cmp	r4, #0
 801fd10:	bfbe      	ittt	lt
 801fd12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801fd16:	fa43 f606 	asrlt.w	r6, r3, r6
 801fd1a:	19a4      	addlt	r4, r4, r6
 801fd1c:	ea24 0407 	bic.w	r4, r4, r7
 801fd20:	2500      	movs	r5, #0
 801fd22:	e7e0      	b.n	801fce6 <floor+0x46>
 801fd24:	2e33      	cmp	r6, #51	; 0x33
 801fd26:	dd0b      	ble.n	801fd40 <floor+0xa0>
 801fd28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801fd2c:	d104      	bne.n	801fd38 <floor+0x98>
 801fd2e:	ee10 2a10 	vmov	r2, s0
 801fd32:	460b      	mov	r3, r1
 801fd34:	f7e0 fac2 	bl	80002bc <__adddf3>
 801fd38:	ec41 0b10 	vmov	d0, r0, r1
 801fd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd40:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801fd44:	f04f 33ff 	mov.w	r3, #4294967295
 801fd48:	fa23 f707 	lsr.w	r7, r3, r7
 801fd4c:	4207      	tst	r7, r0
 801fd4e:	d0f3      	beq.n	801fd38 <floor+0x98>
 801fd50:	a30f      	add	r3, pc, #60	; (adr r3, 801fd90 <floor+0xf0>)
 801fd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd56:	f7e0 fab1 	bl	80002bc <__adddf3>
 801fd5a:	2200      	movs	r2, #0
 801fd5c:	2300      	movs	r3, #0
 801fd5e:	f7e0 fef3 	bl	8000b48 <__aeabi_dcmpgt>
 801fd62:	2800      	cmp	r0, #0
 801fd64:	d0bf      	beq.n	801fce6 <floor+0x46>
 801fd66:	2c00      	cmp	r4, #0
 801fd68:	da02      	bge.n	801fd70 <floor+0xd0>
 801fd6a:	2e14      	cmp	r6, #20
 801fd6c:	d103      	bne.n	801fd76 <floor+0xd6>
 801fd6e:	3401      	adds	r4, #1
 801fd70:	ea25 0507 	bic.w	r5, r5, r7
 801fd74:	e7b7      	b.n	801fce6 <floor+0x46>
 801fd76:	2301      	movs	r3, #1
 801fd78:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801fd7c:	fa03 f606 	lsl.w	r6, r3, r6
 801fd80:	4435      	add	r5, r6
 801fd82:	4545      	cmp	r5, r8
 801fd84:	bf38      	it	cc
 801fd86:	18e4      	addcc	r4, r4, r3
 801fd88:	e7f2      	b.n	801fd70 <floor+0xd0>
 801fd8a:	2500      	movs	r5, #0
 801fd8c:	462c      	mov	r4, r5
 801fd8e:	e7aa      	b.n	801fce6 <floor+0x46>
 801fd90:	8800759c 	.word	0x8800759c
 801fd94:	7e37e43c 	.word	0x7e37e43c
 801fd98:	bff00000 	.word	0xbff00000
 801fd9c:	000fffff 	.word	0x000fffff

0801fda0 <scalbn>:
 801fda0:	b570      	push	{r4, r5, r6, lr}
 801fda2:	ec55 4b10 	vmov	r4, r5, d0
 801fda6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801fdaa:	4606      	mov	r6, r0
 801fdac:	462b      	mov	r3, r5
 801fdae:	b99a      	cbnz	r2, 801fdd8 <scalbn+0x38>
 801fdb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801fdb4:	4323      	orrs	r3, r4
 801fdb6:	d036      	beq.n	801fe26 <scalbn+0x86>
 801fdb8:	4b39      	ldr	r3, [pc, #228]	; (801fea0 <scalbn+0x100>)
 801fdba:	4629      	mov	r1, r5
 801fdbc:	ee10 0a10 	vmov	r0, s0
 801fdc0:	2200      	movs	r2, #0
 801fdc2:	f7e0 fc31 	bl	8000628 <__aeabi_dmul>
 801fdc6:	4b37      	ldr	r3, [pc, #220]	; (801fea4 <scalbn+0x104>)
 801fdc8:	429e      	cmp	r6, r3
 801fdca:	4604      	mov	r4, r0
 801fdcc:	460d      	mov	r5, r1
 801fdce:	da10      	bge.n	801fdf2 <scalbn+0x52>
 801fdd0:	a32b      	add	r3, pc, #172	; (adr r3, 801fe80 <scalbn+0xe0>)
 801fdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdd6:	e03a      	b.n	801fe4e <scalbn+0xae>
 801fdd8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801fddc:	428a      	cmp	r2, r1
 801fdde:	d10c      	bne.n	801fdfa <scalbn+0x5a>
 801fde0:	ee10 2a10 	vmov	r2, s0
 801fde4:	4620      	mov	r0, r4
 801fde6:	4629      	mov	r1, r5
 801fde8:	f7e0 fa68 	bl	80002bc <__adddf3>
 801fdec:	4604      	mov	r4, r0
 801fdee:	460d      	mov	r5, r1
 801fdf0:	e019      	b.n	801fe26 <scalbn+0x86>
 801fdf2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801fdf6:	460b      	mov	r3, r1
 801fdf8:	3a36      	subs	r2, #54	; 0x36
 801fdfa:	4432      	add	r2, r6
 801fdfc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801fe00:	428a      	cmp	r2, r1
 801fe02:	dd08      	ble.n	801fe16 <scalbn+0x76>
 801fe04:	2d00      	cmp	r5, #0
 801fe06:	a120      	add	r1, pc, #128	; (adr r1, 801fe88 <scalbn+0xe8>)
 801fe08:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe0c:	da1c      	bge.n	801fe48 <scalbn+0xa8>
 801fe0e:	a120      	add	r1, pc, #128	; (adr r1, 801fe90 <scalbn+0xf0>)
 801fe10:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe14:	e018      	b.n	801fe48 <scalbn+0xa8>
 801fe16:	2a00      	cmp	r2, #0
 801fe18:	dd08      	ble.n	801fe2c <scalbn+0x8c>
 801fe1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fe1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801fe22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fe26:	ec45 4b10 	vmov	d0, r4, r5
 801fe2a:	bd70      	pop	{r4, r5, r6, pc}
 801fe2c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801fe30:	da19      	bge.n	801fe66 <scalbn+0xc6>
 801fe32:	f24c 3350 	movw	r3, #50000	; 0xc350
 801fe36:	429e      	cmp	r6, r3
 801fe38:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801fe3c:	dd0a      	ble.n	801fe54 <scalbn+0xb4>
 801fe3e:	a112      	add	r1, pc, #72	; (adr r1, 801fe88 <scalbn+0xe8>)
 801fe40:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	d1e2      	bne.n	801fe0e <scalbn+0x6e>
 801fe48:	a30f      	add	r3, pc, #60	; (adr r3, 801fe88 <scalbn+0xe8>)
 801fe4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe4e:	f7e0 fbeb 	bl	8000628 <__aeabi_dmul>
 801fe52:	e7cb      	b.n	801fdec <scalbn+0x4c>
 801fe54:	a10a      	add	r1, pc, #40	; (adr r1, 801fe80 <scalbn+0xe0>)
 801fe56:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe5a:	2b00      	cmp	r3, #0
 801fe5c:	d0b8      	beq.n	801fdd0 <scalbn+0x30>
 801fe5e:	a10e      	add	r1, pc, #56	; (adr r1, 801fe98 <scalbn+0xf8>)
 801fe60:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe64:	e7b4      	b.n	801fdd0 <scalbn+0x30>
 801fe66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fe6a:	3236      	adds	r2, #54	; 0x36
 801fe6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801fe70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801fe74:	4620      	mov	r0, r4
 801fe76:	4b0c      	ldr	r3, [pc, #48]	; (801fea8 <scalbn+0x108>)
 801fe78:	2200      	movs	r2, #0
 801fe7a:	e7e8      	b.n	801fe4e <scalbn+0xae>
 801fe7c:	f3af 8000 	nop.w
 801fe80:	c2f8f359 	.word	0xc2f8f359
 801fe84:	01a56e1f 	.word	0x01a56e1f
 801fe88:	8800759c 	.word	0x8800759c
 801fe8c:	7e37e43c 	.word	0x7e37e43c
 801fe90:	8800759c 	.word	0x8800759c
 801fe94:	fe37e43c 	.word	0xfe37e43c
 801fe98:	c2f8f359 	.word	0xc2f8f359
 801fe9c:	81a56e1f 	.word	0x81a56e1f
 801fea0:	43500000 	.word	0x43500000
 801fea4:	ffff3cb0 	.word	0xffff3cb0
 801fea8:	3c900000 	.word	0x3c900000

0801feac <_init>:
 801feac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801feae:	bf00      	nop
 801feb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801feb2:	bc08      	pop	{r3}
 801feb4:	469e      	mov	lr, r3
 801feb6:	4770      	bx	lr

0801feb8 <_fini>:
 801feb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801feba:	bf00      	nop
 801febc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801febe:	bc08      	pop	{r3}
 801fec0:	469e      	mov	lr, r3
 801fec2:	4770      	bx	lr
