
C3V1-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015038  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd4  080151f8  080151f8  000251f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015dcc  08015dcc  00030258  2**0
                  CONTENTS
  4 .ARM          00000008  08015dcc  08015dcc  00025dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015dd4  08015dd4  00030258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015dd4  08015dd4  00025dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015dd8  08015dd8  00025dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  08015ddc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001141c  20000258  08016034  00030258  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  20011674  08016034  00031674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dd4f  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000654f  00000000  00000000  0005dfd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f8  00000000  00000000  00064528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002020  00000000  00000000  00066820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034abe  00000000  00000000  00068840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d471  00000000  00000000  0009d2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012cafa  00000000  00000000  000ca76f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f7269  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4f8  00000000  00000000  001f72bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000258 	.word	0x20000258
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080151e0 	.word	0x080151e0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000025c 	.word	0x2000025c
 80001fc:	080151e0 	.word	0x080151e0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <GFX_DrawPixelScreen>:

#if USING_STRINGS == 1
const uint8_t *font;
uint8_t size = 1;
static void GFX_DrawPixelScreen(uint16_t x, uint16_t y, uint8_t color, Screen_TypeDef Screen)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4623      	mov	r3, r4
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	4603      	mov	r3, r0
 80010dc:	80bb      	strh	r3, [r7, #4]
 80010de:	460b      	mov	r3, r1
 80010e0:	70fb      	strb	r3, [r7, #3]
 80010e2:	4613      	mov	r3, r2
 80010e4:	70bb      	strb	r3, [r7, #2]
   if(Screen == OLED)
 80010e6:	78bb      	ldrb	r3, [r7, #2]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d108      	bne.n	80010fe <GFX_DrawPixelScreen+0x36>
   {
      GFX_DrawPixelOled(x, y, color);
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	88ba      	ldrh	r2, [r7, #4]
 80010f2:	b2d1      	uxtb	r1, r2
 80010f4:	78fa      	ldrb	r2, [r7, #3]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 facc 	bl	8005694 <ssd1306_set_pixel>
   }
   else if(Screen == E_PAPIER)
   {
      GFX_DrawPixelEpapier(x, y, color);
   }
}
 80010fc:	e008      	b.n	8001110 <GFX_DrawPixelScreen+0x48>
   else if(Screen == E_PAPIER)
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <GFX_DrawPixelScreen+0x48>
      GFX_DrawPixelEpapier(x, y, color);
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	88b9      	ldrh	r1, [r7, #4]
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	4618      	mov	r0, r3
 800110c:	f001 f908 	bl	8002320 <e_papier_set_pixel>
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bd90      	pop	{r4, r7, pc}

08001118 <GFX_SetFont>:
void GFX_SetFont(const uint8_t *font_t)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
   font = font_t;
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <GFX_SetFont+0x1c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000274 	.word	0x20000274

08001138 <GFX_DrawChar>:
{
   return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af02      	add	r7, sp, #8
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	460b      	mov	r3, r1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	4613      	mov	r3, r2
 800114c:	71bb      	strb	r3, [r7, #6]
   if(chr > 0x7E)
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b7e      	cmp	r3, #126	; 0x7e
 8001152:	f200 80a7 	bhi.w	80012a4 <GFX_DrawChar+0x16c>
      return; // chr > '~'

   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 8001156:	2300      	movs	r3, #0
 8001158:	75fb      	strb	r3, [r7, #23]
 800115a:	e09a      	b.n	8001292 <GFX_DrawChar+0x15a>
   {
      uint8_t line = (uint8_t)font[(chr - 0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <GFX_DrawChar+0x174>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3b20      	subs	r3, #32
 8001164:	4951      	ldr	r1, [pc, #324]	; (80012ac <GFX_DrawChar+0x174>)
 8001166:	6809      	ldr	r1, [r1, #0]
 8001168:	3101      	adds	r1, #1
 800116a:	7809      	ldrb	r1, [r1, #0]
 800116c:	fb03 f101 	mul.w	r1, r3, r1
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	440b      	add	r3, r1
 8001174:	3302      	adds	r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	75bb      	strb	r3, [r7, #22]

      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 800117c:	2300      	movs	r3, #0
 800117e:	757b      	strb	r3, [r7, #21]
 8001180:	e07c      	b.n	800127c <GFX_DrawChar+0x144>
      {
         if(line & 1) // Check last pixel in line
 8001182:	7dbb      	ldrb	r3, [r7, #22]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d034      	beq.n	80011f6 <GFX_DrawChar+0xbe>
         {
            if(size == 1)
 800118c:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <GFX_DrawChar+0x178>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d112      	bne.n	80011ba <GFX_DrawChar+0x82>
               GFX_DrawPixelScreen(x + i, y + j, color, Screen); // Draw this pixel
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	b29a      	uxth	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b298      	uxth	r0, r3
 80011a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4413      	add	r3, r2
 80011ac:	b299      	uxth	r1, r3
 80011ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011b2:	79ba      	ldrb	r2, [r7, #6]
 80011b4:	f7ff ff88 	bl	80010c8 <GFX_DrawPixelScreen>
 80011b8:	e057      	b.n	800126a <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, color, Screen); // Or bigger pixel
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <GFX_DrawChar+0x178>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	fb03 f202 	mul.w	r2, r3, r2
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	18d0      	adds	r0, r2, r3
 80011c8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011cc:	4a38      	ldr	r2, [pc, #224]	; (80012b0 <GFX_DrawChar+0x178>)
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	fb03 f202 	mul.w	r2, r3, r2
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	18d1      	adds	r1, r2, r3
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <GFX_DrawChar+0x178>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <GFX_DrawChar+0x178>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b29c      	uxth	r4, r3
 80011e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	4623      	mov	r3, r4
 80011f0:	f000 f968 	bl	80014c4 <GFX_DrawFillRectangle>
 80011f4:	e039      	b.n	800126a <GFX_DrawChar+0x132>
         }
         else if(background == 0)
 80011f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d135      	bne.n	800126a <GFX_DrawChar+0x132>
         {
            if(size == 1)
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <GFX_DrawChar+0x178>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d113      	bne.n	800122e <GFX_DrawChar+0xf6>
               GFX_DrawPixelScreen(x + i, y + j, background, Screen); // Draw black BG
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	b29a      	uxth	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	b298      	uxth	r0, r3
 8001212:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001216:	b29a      	uxth	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	b299      	uxth	r1, r3
 8001220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001224:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001228:	f7ff ff4e 	bl	80010c8 <GFX_DrawPixelScreen>
 800122c:	e01d      	b.n	800126a <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, background, Screen); // Or bigger
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <GFX_DrawChar+0x178>)
 8001232:	7812      	ldrb	r2, [r2, #0]
 8001234:	fb03 f202 	mul.w	r2, r3, r2
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	18d0      	adds	r0, r2, r3
 800123c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <GFX_DrawChar+0x178>)
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	fb03 f202 	mul.w	r2, r3, r2
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	18d1      	adds	r1, r2, r3
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <GFX_DrawChar+0x178>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <GFX_DrawChar+0x178>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b29c      	uxth	r4, r3
 8001258:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4623      	mov	r3, r4
 8001266:	f000 f92d 	bl	80014c4 <GFX_DrawFillRectangle>
      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 800126a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	757b      	strb	r3, [r7, #21]
 8001276:	7dbb      	ldrb	r3, [r7, #22]
 8001278:	085b      	lsrs	r3, r3, #1
 800127a:	75bb      	strb	r3, [r7, #22]
 800127c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <GFX_DrawChar+0x174>)
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	4293      	cmp	r3, r2
 8001288:	f6ff af7b 	blt.w	8001182 <GFX_DrawChar+0x4a>
   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	3301      	adds	r3, #1
 8001290:	75fb      	strb	r3, [r7, #23]
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <GFX_DrawChar+0x174>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	7dfa      	ldrb	r2, [r7, #23]
 800129c:	429a      	cmp	r2, r3
 800129e:	f4ff af5d 	bcc.w	800115c <GFX_DrawChar+0x24>
 80012a2:	e000      	b.n	80012a6 <GFX_DrawChar+0x16e>
      return; // chr > '~'
 80012a4:	bf00      	nop
         }
      }
   }
}
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	20000274 	.word	0x20000274
 80012b0:	20000000 	.word	0x20000000

080012b4 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char *str, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	70fb      	strb	r3, [r7, #3]
   int x_tmp = x;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	617b      	str	r3, [r7, #20]

   char znak;
   znak = *str;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	74fb      	strb	r3, [r7, #19]

   while(*str++)
 80012cc:	e040      	b.n	8001350 <GFX_DrawString+0x9c>
   {
      GFX_DrawChar(x_tmp, y, znak, color, background, Screen); // Draw current char
 80012ce:	78f9      	ldrb	r1, [r7, #3]
 80012d0:	7cfa      	ldrb	r2, [r7, #19]
 80012d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	460b      	mov	r3, r1
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff28 	bl	8001138 <GFX_DrawChar>

      x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <GFX_DrawString+0xb4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <GFX_DrawString+0xb8>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	4413      	add	r3, r2
 8001300:	617b      	str	r3, [r7, #20]

      if(background == 0) // Draw black space if needed
 8001302:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d11f      	bne.n	800134a <GFX_DrawString+0x96>
      {
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800130a:	2300      	movs	r3, #0
 800130c:	74bb      	strb	r3, [r7, #18]
 800130e:	e011      	b.n	8001334 <GFX_DrawString+0x80>
         {
            GFX_DrawPixelScreen(x_tmp - 1, y + i, PIXEL_BLACK, Screen);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	b29b      	uxth	r3, r3
 8001314:	3b01      	subs	r3, #1
 8001316:	b298      	uxth	r0, r3
 8001318:	7cbb      	ldrb	r3, [r7, #18]
 800131a:	b29a      	uxth	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4413      	add	r3, r2
 8001322:	b299      	uxth	r1, r3
 8001324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001328:	2200      	movs	r2, #0
 800132a:	f7ff fecd 	bl	80010c8 <GFX_DrawPixelScreen>
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800132e:	7cbb      	ldrb	r3, [r7, #18]
 8001330:	3301      	adds	r3, #1
 8001332:	74bb      	strb	r3, [r7, #18]
 8001334:	7cba      	ldrb	r2, [r7, #18]
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <GFX_DrawString+0xb4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <GFX_DrawString+0xb8>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	fb01 f303 	mul.w	r3, r1, r3
 8001346:	429a      	cmp	r2, r3
 8001348:	dbe2      	blt.n	8001310 <GFX_DrawString+0x5c>
         }
      }

      znak = *str; // Next char
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	74fb      	strb	r3, [r7, #19]
   while(*str++)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1b8      	bne.n	80012ce <GFX_DrawString+0x1a>
   }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000274 	.word	0x20000274
 800136c:	20000000 	.word	0x20000000

08001370 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color, Screen_TypeDef Screen)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	; 0x30
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
   int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001388:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1acb      	subs	r3, r1, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	bfb8      	it	lt
 8001396:	425b      	neglt	r3, r3
 8001398:	429a      	cmp	r2, r3
 800139a:	bfcc      	ite	gt
 800139c:	2301      	movgt	r3, #1
 800139e:	2300      	movle	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	857b      	strh	r3, [r7, #42]	; 0x2a

   if(steep)
 80013a4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <GFX_WriteLine+0x54>
   {
      _swap_int(x_start, y_start);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	60bb      	str	r3, [r7, #8]
      _swap_int(x_end, y_end);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	623b      	str	r3, [r7, #32]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	603b      	str	r3, [r7, #0]
   }

   if(x_start > x_end)
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dd0b      	ble.n	80013e4 <GFX_WriteLine+0x74>
   {
      _swap_int(x_start, x_end);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	607b      	str	r3, [r7, #4]
      _swap_int(y_start, y_end);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	603b      	str	r3, [r7, #0]
   }

   int16_t dx, dy;
   dx = x_end - x_start;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	82fb      	strh	r3, [r7, #22]
   dy = abs(y_end - y_start);
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bfb8      	it	lt
 80013fc:	425b      	neglt	r3, r3
 80013fe:	82bb      	strh	r3, [r7, #20]

   int16_t err = dx / 2;
 8001400:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001404:	0fda      	lsrs	r2, r3, #31
 8001406:	4413      	add	r3, r2
 8001408:	105b      	asrs	r3, r3, #1
 800140a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   int16_t ystep;

   if(y_start < y_end)
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	da02      	bge.n	800141a <GFX_WriteLine+0xaa>
   {
      ystep = 1;
 8001414:	2301      	movs	r3, #1
 8001416:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001418:	e032      	b.n	8001480 <GFX_WriteLine+0x110>
   }
   else
   {
      ystep = -1;
 800141a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   }

   for(; x_start <= x_end; x_start++)
 8001420:	e02e      	b.n	8001480 <GFX_WriteLine+0x110>
   {
      if(steep)
 8001422:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00a      	beq.n	8001440 <GFX_WriteLine+0xd0>
      {
         GFX_DrawPixelScreen(y_start, x_start, color, Screen);
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	b298      	uxth	r0, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	b299      	uxth	r1, r3
 8001432:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001436:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800143a:	f7ff fe45 	bl	80010c8 <GFX_DrawPixelScreen>
 800143e:	e009      	b.n	8001454 <GFX_WriteLine+0xe4>
      }
      else
      {
         GFX_DrawPixelScreen(x_start, y_start, color, Screen);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	b298      	uxth	r0, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	b299      	uxth	r1, r3
 8001448:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800144c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001450:	f7ff fe3a 	bl	80010c8 <GFX_DrawPixelScreen>
      }
      err -= dy;
 8001454:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001456:	8abb      	ldrh	r3, [r7, #20]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      if(err < 0)
 800145e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001462:	2b00      	cmp	r3, #0
 8001464:	da09      	bge.n	800147a <GFX_WriteLine+0x10a>
      {
         y_start += ystep;
 8001466:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	4413      	add	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
         err += dx;
 8001470:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001472:	8afb      	ldrh	r3, [r7, #22]
 8001474:	4413      	add	r3, r2
 8001476:	b29b      	uxth	r3, r3
 8001478:	85fb      	strh	r3, [r7, #46]	; 0x2e
   for(; x_start <= x_end; x_start++)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	ddcc      	ble.n	8001422 <GFX_WriteLine+0xb2>
      }
   }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3730      	adds	r7, #48	; 0x30
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color, Screen_TypeDef Screen)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af02      	add	r7, sp, #8
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	70fb      	strb	r3, [r7, #3]
   GFX_WriteLine(x_start, y_start, x_start, y_start + h - 1, color, Screen);
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	1e5a      	subs	r2, r3, #1
 80014a8:	7e3b      	ldrb	r3, [r7, #24]
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4613      	mov	r3, r2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff ff5a 	bl	8001370 <GFX_WriteLine>
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <GFX_DrawFillRectangle>:
   GFX_DrawFastVLine(x + w - 1, y, h, color, Screen);
}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color, Screen_TypeDef Screen)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	4611      	mov	r1, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	460b      	mov	r3, r1
 80014d4:	80fb      	strh	r3, [r7, #6]
 80014d6:	4613      	mov	r3, r2
 80014d8:	80bb      	strh	r3, [r7, #4]
   for(int i = x; i < x + w; i++)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	e00d      	b.n	80014fc <GFX_DrawFillRectangle+0x38>
   {
      GFX_DrawFastVLine(i, y, h, color, Screen);
 80014e0:	88ba      	ldrh	r2, [r7, #4]
 80014e2:	f897 1020 	ldrb.w	r1, [r7, #32]
 80014e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	460b      	mov	r3, r1
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	6978      	ldr	r0, [r7, #20]
 80014f2:	f7ff ffce 	bl	8001492 <GFX_DrawFastVLine>
   for(int i = x; i < x + w; i++)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3301      	adds	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	88fa      	ldrh	r2, [r7, #6]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbeb      	blt.n	80014e0 <GFX_DrawFillRectangle+0x1c>
   }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HC12_ExitCommandMode>:
void HC12_EnterCommandMode(void)
{
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 0);
}
void HC12_ExitCommandMode(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 1);
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800151c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001520:	f005 fbfc 	bl	8006d1c <HAL_GPIO_WritePin>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <HC12_TransmitData>:
void HC12_TransmitData(uint8_t *Data, uint32_t Length)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
   taskENTER_CRITICAL();
 8001532:	f00e fea7 	bl	8010284 <vPortEnterCritical>
   HAL_UART_Transmit(&huart1, Data, Length, 1000);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	b29a      	uxth	r2, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4804      	ldr	r0, [pc, #16]	; (8001554 <HC12_TransmitData+0x2c>)
 8001542:	f009 fe03 	bl	800b14c <HAL_UART_Transmit>
   taskEXIT_CRITICAL();
 8001546:	f00e fecd 	bl	80102e4 <vPortExitCritical>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200044b0 	.word	0x200044b0

08001558 <HC12_ReciveToIdleDMA>:
void HC12_ReciveToIdleDMA(uint8_t *Data, uint32_t Length)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4803      	ldr	r0, [pc, #12]	; (8001578 <HC12_ReciveToIdleDMA+0x20>)
 800156c:	f00b f9c8 	bl	800c900 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200044b0 	.word	0x200044b0

0800157c <HC12_Init>:
void HC12_Init(RFP_TypeDef *TempRfp, uint8_t *Buffer)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
   rfp      = TempRfp;
 8001586:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HC12_Init+0x24>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6013      	str	r3, [r2, #0]
   HC12Data = Buffer;
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <HC12_Init+0x28>)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	6013      	str	r3, [r2, #0]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000278 	.word	0x20000278
 80015a4:	2000027c 	.word	0x2000027c

080015a8 <BME280_CsLow>:
#include "main.h"

#include "bme280_spi.h"

void BME280_CsLow(BME280_t *bme)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(bme->bme280_CsPort, bme->bme280_CsPin, 0);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6858      	ldr	r0, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b8:	2200      	movs	r2, #0
 80015ba:	4619      	mov	r1, r3
 80015bc:	f005 fbae 	bl	8006d1c <HAL_GPIO_WritePin>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <BME280_CsHigh>:
void BME280_CsHigh(BME280_t *bme)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(bme->bme280_CsPort, bme->bme280_CsPin, 1);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6858      	ldr	r0, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d8:	2201      	movs	r2, #1
 80015da:	4619      	mov	r1, r3
 80015dc:	f005 fb9e 	bl	8006d1c <HAL_GPIO_WritePin>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <BME280_Read8>:
uint8_t BME280_Read8(BME280_t *bme, uint8_t addr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70fb      	strb	r3, [r7, #3]
   addr |= 128;
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	70fb      	strb	r3, [r7, #3]
   uint8_t data;
   BME280_CsLow(bme);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffd2 	bl	80015a8 <BME280_CsLow>
   HAL_SPI_Transmit(bme->bme_spi, &addr, 1, BME_MAX_TIMEOUT);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	1cf9      	adds	r1, r7, #3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	2201      	movs	r2, #1
 8001610:	f007 fd3b 	bl	800908a <HAL_SPI_Transmit>
   HAL_SPI_Receive(bme->bme_spi, &data, 1, BME_MAX_TIMEOUT);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	f107 010f 	add.w	r1, r7, #15
 800161c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001620:	2201      	movs	r2, #1
 8001622:	f007 fea0 	bl	8009366 <HAL_SPI_Receive>
   BME280_CsHigh(bme);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffce 	bl	80015c8 <BME280_CsHigh>
   return data;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <BME280_Write8>:
void BME280_Write8(BME280_t *bme, uint8_t addr, uint8_t data)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	70fb      	strb	r3, [r7, #3]
 8001642:	4613      	mov	r3, r2
 8001644:	70bb      	strb	r3, [r7, #2]
   BME280_CsLow(bme);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ffae 	bl	80015a8 <BME280_CsLow>
   addr &= 127;
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001652:	70fb      	strb	r3, [r7, #3]
   uint8_t Data_ToSend[2];
   Data_ToSend[0] = addr;
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	733b      	strb	r3, [r7, #12]
   Data_ToSend[1] = data;
 8001658:	78bb      	ldrb	r3, [r7, #2]
 800165a:	737b      	strb	r3, [r7, #13]
   HAL_SPI_Transmit(bme->bme_spi, Data_ToSend, 2, BME_MAX_TIMEOUT);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	f107 010c 	add.w	r1, r7, #12
 8001664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001668:	2202      	movs	r2, #2
 800166a:	f007 fd0e 	bl	800908a <HAL_SPI_Transmit>
   BME280_CsHigh(bme);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffaa 	bl	80015c8 <BME280_CsHigh>
}
 8001674:	bf00      	nop
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <BME280_Read16LE>:
static uint16_t BME280_Read16LE(BME280_t *bme, uint8_t address)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
   uint8_t data[2];
   data[0] = BME280_Read8(bme, address);
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	4619      	mov	r1, r3
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ffab 	bl	80015e8 <BME280_Read8>
 8001692:	4603      	mov	r3, r0
 8001694:	733b      	strb	r3, [r7, #12]
   data[1] = BME280_Read8(bme, address + 1);
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	3301      	adds	r3, #1
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffa2 	bl	80015e8 <BME280_Read8>
 80016a4:	4603      	mov	r3, r0
 80016a6:	737b      	strb	r3, [r7, #13]
   return ((data[1] << 8) | data[0]);
 80016a8:	7b7b      	ldrb	r3, [r7, #13]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	7b3b      	ldrb	r3, [r7, #12]
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	4313      	orrs	r3, r2
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	b29b      	uxth	r3, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <BME280_Read16>:
static uint16_t BME280_Read16(BME280_t *bme, uint8_t address)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
   uint8_t data[2];
   data[0] = BME280_Read8(bme, address);
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	4619      	mov	r1, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff89 	bl	80015e8 <BME280_Read8>
 80016d6:	4603      	mov	r3, r0
 80016d8:	733b      	strb	r3, [r7, #12]
   data[1] = BME280_Read8(bme, address + 1);
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	3301      	adds	r3, #1
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4619      	mov	r1, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ff80 	bl	80015e8 <BME280_Read8>
 80016e8:	4603      	mov	r3, r0
 80016ea:	737b      	strb	r3, [r7, #13]
   return ((data[0] << 8) | data[1]);
 80016ec:	7b3b      	ldrb	r3, [r7, #12]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	7b7b      	ldrb	r3, [r7, #13]
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	4313      	orrs	r3, r2
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	b29b      	uxth	r3, r3
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <BME280_Read24>:
uint32_t BME280_Read24(BME280_t *bme, uint8_t addr)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
   addr |= 128;
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001716:	b2db      	uxtb	r3, r3
 8001718:	70fb      	strb	r3, [r7, #3]
   uint8_t data[3];
   BME280_CsLow(bme);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ff44 	bl	80015a8 <BME280_CsLow>
   HAL_SPI_Transmit(bme->bme_spi, &addr, 1, BME_MAX_TIMEOUT);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	1cf9      	adds	r1, r7, #3
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	2201      	movs	r2, #1
 800172c:	f007 fcad 	bl	800908a <HAL_SPI_Transmit>
   HAL_SPI_Receive(bme->bme_spi, data, 3, BME_MAX_TIMEOUT);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6818      	ldr	r0, [r3, #0]
 8001734:	f107 010c 	add.w	r1, r7, #12
 8001738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173c:	2203      	movs	r2, #3
 800173e:	f007 fe12 	bl	8009366 <HAL_SPI_Receive>
   BME280_CsHigh(bme);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff40 	bl	80015c8 <BME280_CsHigh>
   return ((data[0] << 16) | (data[1] << 8) | data[2]);
 8001748:	7b3b      	ldrb	r3, [r7, #12]
 800174a:	041a      	lsls	r2, r3, #16
 800174c:	7b7b      	ldrb	r3, [r7, #13]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	4313      	orrs	r3, r2
 8001752:	7bba      	ldrb	r2, [r7, #14]
 8001754:	4313      	orrs	r3, r2
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <BME280_Read_temp>:
static float BME280_Read_temp(BME280_t *bme)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
   int32_t var1, var2;
   int32_t adc_T = BME280_Read24(bme, BME280_TEMPDATA);
 8001768:	21fa      	movs	r1, #250	; 0xfa
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffca 	bl	8001704 <BME280_Read24>
 8001770:	4603      	mov	r3, r0
 8001772:	617b      	str	r3, [r7, #20]
   if(adc_T == 0x800000)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800177a:	d102      	bne.n	8001782 <BME280_Read_temp+0x22>
      return -99;
 800177c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001808 <BME280_Read_temp+0xa8>
 8001780:	e03b      	b.n	80017fa <BME280_Read_temp+0x9a>

   adc_T >>= 4;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	111b      	asrs	r3, r3, #4
 8001786:	617b      	str	r3, [r7, #20]

   var1 = ((((adc_T >> 3) - ((int32_t)bme->t1 << 1))) * ((int32_t)bme->t2)) >> 11;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	10da      	asrs	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800179a:	fb02 f303 	mul.w	r3, r2, r3
 800179e:	12db      	asrs	r3, r3, #11
 80017a0:	613b      	str	r3, [r7, #16]

   var2 = (((((adc_T >> 4) - ((int32_t)bme->t1)) * ((adc_T >> 4) - ((int32_t)bme->t1))) >> 12) * ((int32_t)bme->t3)) >> 14;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	111b      	asrs	r3, r3, #4
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	1112      	asrs	r2, r2, #4
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 80017b4:	1a52      	subs	r2, r2, r1
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	131b      	asrs	r3, r3, #12
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	139b      	asrs	r3, r3, #14
 80017c8:	60fb      	str	r3, [r7, #12]

   bme->t_fine = var1 + var2;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	441a      	add	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	62da      	str	r2, [r3, #44]	; 0x2c

   float T = (bme->t_fine * 5 + 128) >> 8;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	3380      	adds	r3, #128	; 0x80
 80017e0:	121b      	asrs	r3, r3, #8
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	edc7 7a02 	vstr	s15, [r7, #8]
   return T / 100;
 80017ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80017f2:	eddf 6a06 	vldr	s13, [pc, #24]	; 800180c <BME280_Read_temp+0xac>
 80017f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13

   return -99;
}
 80017fa:	eef0 7a47 	vmov.f32	s15, s14
 80017fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	c2c60000 	.word	0xc2c60000
 800180c:	42c80000 	.word	0x42c80000

08001810 <BME280_Read_hum>:
static float BME280_Read_hum(BME280_t *bme)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

   int32_t adc_H = BME280_Read16(bme, BME280_HUMIDDATA);
 8001818:	21fd      	movs	r1, #253	; 0xfd
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ff50 	bl	80016c0 <BME280_Read16>
 8001820:	4603      	mov	r3, r0
 8001822:	617b      	str	r3, [r7, #20]
   if(adc_H == 0x8000) // value in case humidity measurement was disabled
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800182a:	d102      	bne.n	8001832 <BME280_Read_hum+0x22>
      return -99;      // error
 800182c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001900 <BME280_Read_hum+0xf0>
 8001830:	e05f      	b.n	80018f2 <BME280_Read_hum+0xe2>
   int32_t v_x1_u32r;

   v_x1_u32r = (bme->t_fine - ((int32_t)76800));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800183a:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (((((adc_H << 14) - (((int32_t)bme->h4) << 20) - (((int32_t)bme->h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	039a      	lsls	r2, r3, #14
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001846:	051b      	lsls	r3, r3, #20
 8001848:	1ad2      	subs	r2, r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800185e:	13db      	asrs	r3, r3, #15
                * (((((((v_x1_u32r * ((int32_t)bme->h6)) >> 10) * (((v_x1_u32r * ((int32_t)bme->h3)) >> 11) + ((int32_t)32768))) >> 10)
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8001866:	4611      	mov	r1, r2
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	fb01 f202 	mul.w	r2, r1, r2
 800186e:	1292      	asrs	r2, r2, #10
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	7a49      	ldrb	r1, [r1, #9]
 8001874:	4608      	mov	r0, r1
 8001876:	6939      	ldr	r1, [r7, #16]
 8001878:	fb00 f101 	mul.w	r1, r0, r1
 800187c:	12c9      	asrs	r1, r1, #11
 800187e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001882:	fb01 f202 	mul.w	r2, r1, r2
 8001886:	1292      	asrs	r2, r2, #10
                     + ((int32_t)2097152))
 8001888:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                        * ((int32_t)bme->h2)
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	f9b1 1020 	ldrsh.w	r1, [r1, #32]
 8001892:	fb01 f202 	mul.w	r2, r1, r2
                    + 8192)
 8001896:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
                   >> 14));
 800189a:	1392      	asrs	r2, r2, #14
   v_x1_u32r = (((((adc_H << 14) - (((int32_t)bme->h4) << 20) - (((int32_t)bme->h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15)
 800189c:	fb02 f303 	mul.w	r3, r2, r3
 80018a0:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((int32_t)bme->h1)) >> 4));
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	13db      	asrs	r3, r3, #15
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	13d2      	asrs	r2, r2, #15
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	11db      	asrs	r3, r3, #7
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	7a12      	ldrb	r2, [r2, #8]
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
 80018b8:	111b      	asrs	r3, r3, #4
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80018c6:	613b      	str	r3, [r7, #16]
   v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80018ce:	bfa8      	it	ge
 80018d0:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80018d4:	613b      	str	r3, [r7, #16]
   float h   = (v_x1_u32r >> 12);
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	131b      	asrs	r3, r3, #12
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e2:	edc7 7a03 	vstr	s15, [r7, #12]
   return h / 1024.0;
 80018e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ea:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001904 <BME280_Read_hum+0xf4>
 80018ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 80018f2:	eef0 7a47 	vmov.f32	s15, s14
 80018f6:	eeb0 0a67 	vmov.f32	s0, s15
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	c2c60000 	.word	0xc2c60000
 8001904:	44800000 	.word	0x44800000

08001908 <BME280_Read_press>:
static float BME280_Read_press(BME280_t *bme)
{
 8001908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800190c:	b0cc      	sub	sp, #304	; 0x130
 800190e:	af00      	add	r7, sp, #0
 8001910:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
   int64_t var1, var2, p;

   // Must be done first to get the t_fine variable set up

   int32_t adc_P = BME280_Read24(bme, BME280_PRESSUREDATA);
 8001914:	21f7      	movs	r1, #247	; 0xf7
 8001916:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800191a:	f7ff fef3 	bl	8001704 <BME280_Read24>
 800191e:	4603      	mov	r3, r0
 8001920:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   adc_P >>= 4;
 8001924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001928:	111b      	asrs	r3, r3, #4
 800192a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

   var1 = ((int64_t)bme->t_fine) - 128000;
 800192e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	17da      	asrs	r2, r3, #31
 8001936:	4698      	mov	r8, r3
 8001938:	4691      	mov	r9, r2
 800193a:	f5b8 33fa 	subs.w	r3, r8, #128000	; 0x1f400
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001940:	f149 33ff 	adc.w	r3, r9, #4294967295
 8001944:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001946:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800194a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
   var2 = var1 * var1 * (int64_t)bme->p6;
 800194e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001952:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001956:	fb03 f102 	mul.w	r1, r3, r2
 800195a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800195e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	18ca      	adds	r2, r1, r3
 8001968:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800196c:	fba3 4503 	umull	r4, r5, r3, r3
 8001970:	1953      	adds	r3, r2, r5
 8001972:	461d      	mov	r5, r3
 8001974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001978:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800197c:	b21b      	sxth	r3, r3
 800197e:	17da      	asrs	r2, r3, #31
 8001980:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001984:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001988:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800198c:	4603      	mov	r3, r0
 800198e:	fb03 f205 	mul.w	r2, r3, r5
 8001992:	460b      	mov	r3, r1
 8001994:	fb04 f303 	mul.w	r3, r4, r3
 8001998:	4413      	add	r3, r2
 800199a:	4602      	mov	r2, r0
 800199c:	fba4 ab02 	umull	sl, fp, r4, r2
 80019a0:	445b      	add	r3, fp
 80019a2:	469b      	mov	fp, r3
 80019a4:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
 80019a8:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
   var2 = var2 + ((var1 * (int64_t)bme->p5) << 17);
 80019ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019b0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	17da      	asrs	r2, r3, #31
 80019b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80019bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80019c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019c4:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80019c8:	462a      	mov	r2, r5
 80019ca:	fb02 f203 	mul.w	r2, r2, r3
 80019ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019d2:	4621      	mov	r1, r4
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	441a      	add	r2, r3
 80019da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019de:	4621      	mov	r1, r4
 80019e0:	fba3 1301 	umull	r1, r3, r3, r1
 80019e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019e8:	460b      	mov	r3, r1
 80019ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80019ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80019f2:	18d3      	adds	r3, r2, r3
 80019f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019f8:	f04f 0000 	mov.w	r0, #0
 80019fc:	f04f 0100 	mov.w	r1, #0
 8001a00:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001a04:	462b      	mov	r3, r5
 8001a06:	0459      	lsls	r1, r3, #17
 8001a08:	4623      	mov	r3, r4
 8001a0a:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001a0e:	4623      	mov	r3, r4
 8001a10:	0458      	lsls	r0, r3, #17
 8001a12:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a16:	1814      	adds	r4, r2, r0
 8001a18:	643c      	str	r4, [r7, #64]	; 0x40
 8001a1a:	414b      	adcs	r3, r1
 8001a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8001a1e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001a22:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
   var2 = var2 + (((int64_t)bme->p4) << 35);
 8001a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a2a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	17da      	asrs	r2, r3, #31
 8001a32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001a36:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001a3a:	f04f 0000 	mov.w	r0, #0
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a46:	00d9      	lsls	r1, r3, #3
 8001a48:	2000      	movs	r0, #0
 8001a4a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a4e:	1814      	adds	r4, r2, r0
 8001a50:	63bc      	str	r4, [r7, #56]	; 0x38
 8001a52:	414b      	adcs	r3, r1
 8001a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a56:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001a5a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
   var1 = ((var1 * var1 * (int64_t)bme->p3) >> 8) + ((var1 * (int64_t)bme->p2) << 12);
 8001a5e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001a62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a66:	fb03 f102 	mul.w	r1, r3, r2
 8001a6a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001a6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	18ca      	adds	r2, r1, r3
 8001a78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a7c:	fba3 1303 	umull	r1, r3, r3, r3
 8001a80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a84:	460b      	mov	r3, r1
 8001a86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a8e:	18d3      	adds	r3, r2, r3
 8001a90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a98:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	17da      	asrs	r2, r3, #31
 8001aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001aa4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001aa8:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001aac:	462b      	mov	r3, r5
 8001aae:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001ab2:	4642      	mov	r2, r8
 8001ab4:	fb02 f203 	mul.w	r2, r2, r3
 8001ab8:	464b      	mov	r3, r9
 8001aba:	4621      	mov	r1, r4
 8001abc:	fb01 f303 	mul.w	r3, r1, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4622      	mov	r2, r4
 8001ac4:	4641      	mov	r1, r8
 8001ac6:	fba2 1201 	umull	r1, r2, r2, r1
 8001aca:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001ace:	460a      	mov	r2, r1
 8001ad0:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001ad4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001ad8:	4413      	add	r3, r2
 8001ada:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001ade:	f04f 0000 	mov.w	r0, #0
 8001ae2:	f04f 0100 	mov.w	r1, #0
 8001ae6:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001aea:	4623      	mov	r3, r4
 8001aec:	0a18      	lsrs	r0, r3, #8
 8001aee:	462b      	mov	r3, r5
 8001af0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001af4:	462b      	mov	r3, r5
 8001af6:	1219      	asrs	r1, r3, #8
 8001af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001afc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	17da      	asrs	r2, r3, #31
 8001b04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001b08:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001b0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b10:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001b14:	464a      	mov	r2, r9
 8001b16:	fb02 f203 	mul.w	r2, r2, r3
 8001b1a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b1e:	4644      	mov	r4, r8
 8001b20:	fb04 f303 	mul.w	r3, r4, r3
 8001b24:	441a      	add	r2, r3
 8001b26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b2a:	4644      	mov	r4, r8
 8001b2c:	fba3 4304 	umull	r4, r3, r3, r4
 8001b30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001b34:	4623      	mov	r3, r4
 8001b36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001b3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001b3e:	18d3      	adds	r3, r2, r3
 8001b40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001b50:	464c      	mov	r4, r9
 8001b52:	0323      	lsls	r3, r4, #12
 8001b54:	4644      	mov	r4, r8
 8001b56:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001b5a:	4644      	mov	r4, r8
 8001b5c:	0322      	lsls	r2, r4, #12
 8001b5e:	1884      	adds	r4, r0, r2
 8001b60:	633c      	str	r4, [r7, #48]	; 0x30
 8001b62:	eb41 0303 	adc.w	r3, r1, r3
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
 8001b68:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001b6c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
   var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bme->p1) >> 33;
 8001b70:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001b74:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001b78:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8001b7c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001b92:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001b96:	462b      	mov	r3, r5
 8001b98:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001b9c:	4642      	mov	r2, r8
 8001b9e:	fb02 f203 	mul.w	r2, r2, r3
 8001ba2:	464b      	mov	r3, r9
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	4622      	mov	r2, r4
 8001bae:	4641      	mov	r1, r8
 8001bb0:	fba2 1201 	umull	r1, r2, r2, r1
 8001bb4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001bb8:	460a      	mov	r2, r1
 8001bba:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001bbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	104a      	asrs	r2, r1, #1
 8001bd8:	4629      	mov	r1, r5
 8001bda:	17cb      	asrs	r3, r1, #31
 8001bdc:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

   if(var1 == 0)
 8001be0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001be4:	4313      	orrs	r3, r2
 8001be6:	d102      	bne.n	8001bee <BME280_Read_press+0x2e6>
   {
      return 0; // avoid exception caused by division by zero
 8001be8:	eddf 7aae 	vldr	s15, [pc, #696]	; 8001ea4 <BME280_Read_press+0x59c>
 8001bec:	e152      	b.n	8001e94 <BME280_Read_press+0x58c>
   }
   p    = 1048576 - adc_P;
 8001bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bf2:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001bf6:	17da      	asrs	r2, r3, #31
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bfc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001c00:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
   p    = (((p << 31) - var2) * 3125) / var1;
 8001c04:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c08:	105b      	asrs	r3, r3, #1
 8001c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001c0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c12:	07db      	lsls	r3, r3, #31
 8001c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001c1c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001c20:	4621      	mov	r1, r4
 8001c22:	1a89      	subs	r1, r1, r2
 8001c24:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001c28:	4629      	mov	r1, r5
 8001c2a:	eb61 0303 	sbc.w	r3, r1, r3
 8001c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c32:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001c36:	4622      	mov	r2, r4
 8001c38:	462b      	mov	r3, r5
 8001c3a:	1891      	adds	r1, r2, r2
 8001c3c:	6239      	str	r1, [r7, #32]
 8001c3e:	415b      	adcs	r3, r3
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
 8001c42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c46:	4621      	mov	r1, r4
 8001c48:	1851      	adds	r1, r2, r1
 8001c4a:	61b9      	str	r1, [r7, #24]
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	414b      	adcs	r3, r1
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c5e:	4649      	mov	r1, r9
 8001c60:	018b      	lsls	r3, r1, #6
 8001c62:	4641      	mov	r1, r8
 8001c64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c68:	4641      	mov	r1, r8
 8001c6a:	018a      	lsls	r2, r1, #6
 8001c6c:	4641      	mov	r1, r8
 8001c6e:	1889      	adds	r1, r1, r2
 8001c70:	6139      	str	r1, [r7, #16]
 8001c72:	4649      	mov	r1, r9
 8001c74:	eb43 0101 	adc.w	r1, r3, r1
 8001c78:	6179      	str	r1, [r7, #20]
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c86:	4649      	mov	r1, r9
 8001c88:	008b      	lsls	r3, r1, #2
 8001c8a:	4641      	mov	r1, r8
 8001c8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c90:	4641      	mov	r1, r8
 8001c92:	008a      	lsls	r2, r1, #2
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4622      	mov	r2, r4
 8001c9c:	189b      	adds	r3, r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	462a      	mov	r2, r5
 8001ca4:	eb42 0303 	adc.w	r3, r2, r3
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001cb6:	4649      	mov	r1, r9
 8001cb8:	008b      	lsls	r3, r1, #2
 8001cba:	4641      	mov	r1, r8
 8001cbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cc0:	4641      	mov	r1, r8
 8001cc2:	008a      	lsls	r2, r1, #2
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4622      	mov	r2, r4
 8001ccc:	189b      	adds	r3, r3, r2
 8001cce:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cd0:	462b      	mov	r3, r5
 8001cd2:	460a      	mov	r2, r1
 8001cd4:	eb42 0303 	adc.w	r3, r2, r3
 8001cd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cda:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001cde:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001ce2:	f7fe ffe9 	bl	8000cb8 <__aeabi_ldivmod>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
   var1 = (((int64_t)bme->p9) * (p >> 13) * (p >> 13)) >> 25;
 8001cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001cf2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	17da      	asrs	r2, r3, #31
 8001cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8001cfc:	677a      	str	r2, [r7, #116]	; 0x74
 8001cfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001d02:	f04f 0000 	mov.w	r0, #0
 8001d06:	f04f 0100 	mov.w	r1, #0
 8001d0a:	0b50      	lsrs	r0, r2, #13
 8001d0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d10:	1359      	asrs	r1, r3, #13
 8001d12:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001d16:	462b      	mov	r3, r5
 8001d18:	fb00 f203 	mul.w	r2, r0, r3
 8001d1c:	4623      	mov	r3, r4
 8001d1e:	fb03 f301 	mul.w	r3, r3, r1
 8001d22:	4413      	add	r3, r2
 8001d24:	4622      	mov	r2, r4
 8001d26:	fba2 1200 	umull	r1, r2, r2, r0
 8001d2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001d2e:	460a      	mov	r2, r1
 8001d30:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001d34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001d38:	4413      	add	r3, r2
 8001d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001d3e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001d42:	f04f 0000 	mov.w	r0, #0
 8001d46:	f04f 0100 	mov.w	r1, #0
 8001d4a:	0b50      	lsrs	r0, r2, #13
 8001d4c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d50:	1359      	asrs	r1, r3, #13
 8001d52:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001d56:	462b      	mov	r3, r5
 8001d58:	fb00 f203 	mul.w	r2, r0, r3
 8001d5c:	4623      	mov	r3, r4
 8001d5e:	fb03 f301 	mul.w	r3, r3, r1
 8001d62:	4413      	add	r3, r2
 8001d64:	4622      	mov	r2, r4
 8001d66:	fba2 1200 	umull	r1, r2, r2, r0
 8001d6a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001d6e:	460a      	mov	r2, r1
 8001d70:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001d74:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001d78:	4413      	add	r3, r2
 8001d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	0e4a      	lsrs	r2, r1, #25
 8001d8e:	4629      	mov	r1, r5
 8001d90:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001d94:	4629      	mov	r1, r5
 8001d96:	164b      	asrs	r3, r1, #25
 8001d98:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
   var2 = (((int64_t)bme->p8) * p) >> 19;
 8001d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001da0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	17da      	asrs	r2, r3, #31
 8001da8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001daa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001dac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001db0:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001db4:	462a      	mov	r2, r5
 8001db6:	fb02 f203 	mul.w	r2, r2, r3
 8001dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001dca:	4621      	mov	r1, r4
 8001dcc:	fba2 1201 	umull	r1, r2, r2, r1
 8001dd0:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001dd4:	460a      	mov	r2, r1
 8001dd6:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001dda:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001dde:	4413      	add	r3, r2
 8001de0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001df0:	4621      	mov	r1, r4
 8001df2:	0cca      	lsrs	r2, r1, #19
 8001df4:	4629      	mov	r1, r5
 8001df6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	14cb      	asrs	r3, r1, #19
 8001dfe:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

   p = ((p + var1 + var2) >> 8) + (((int64_t)bme->p7) << 4);
 8001e02:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001e06:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001e0a:	1884      	adds	r4, r0, r2
 8001e0c:	663c      	str	r4, [r7, #96]	; 0x60
 8001e0e:	eb41 0303 	adc.w	r3, r1, r3
 8001e12:	667b      	str	r3, [r7, #100]	; 0x64
 8001e14:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001e18:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	1889      	adds	r1, r1, r2
 8001e20:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e22:	4629      	mov	r1, r5
 8001e24:	eb43 0101 	adc.w	r1, r3, r1
 8001e28:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001e2a:	f04f 0000 	mov.w	r0, #0
 8001e2e:	f04f 0100 	mov.w	r1, #0
 8001e32:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001e36:	4623      	mov	r3, r4
 8001e38:	0a18      	lsrs	r0, r3, #8
 8001e3a:	462b      	mov	r3, r5
 8001e3c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001e40:	462b      	mov	r3, r5
 8001e42:	1219      	asrs	r1, r3, #8
 8001e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001e48:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	17da      	asrs	r2, r3, #31
 8001e50:	653b      	str	r3, [r7, #80]	; 0x50
 8001e52:	657a      	str	r2, [r7, #84]	; 0x54
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001e60:	464c      	mov	r4, r9
 8001e62:	0123      	lsls	r3, r4, #4
 8001e64:	4644      	mov	r4, r8
 8001e66:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001e6a:	4644      	mov	r4, r8
 8001e6c:	0122      	lsls	r2, r4, #4
 8001e6e:	1884      	adds	r4, r0, r2
 8001e70:	603c      	str	r4, [r7, #0]
 8001e72:	eb41 0303 	adc.w	r3, r1, r3
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e7c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
   return (int32_t)p / 256;
 8001e80:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	da00      	bge.n	8001e8a <BME280_Read_press+0x582>
 8001e88:	33ff      	adds	r3, #255	; 0xff
 8001e8a:	121b      	asrs	r3, r3, #8
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001e94:	eeb0 0a67 	vmov.f32	s0, s15
 8001e98:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ea2:	bf00      	nop
 8001ea4:	00000000 	.word	0x00000000

08001ea8 <BME280_ReadAll>:
void BME280_ReadAll(BME280_t *bme, float *T, float *P, float *H)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
   *T = BME280_Read_temp(bme);
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f7ff fc52 	bl	8001760 <BME280_Read_temp>
 8001ebc:	eef0 7a40 	vmov.f32	s15, s0
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	edc3 7a00 	vstr	s15, [r3]
   *P = BME280_Read_press(bme) / 100;
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f7ff fd1e 	bl	8001908 <BME280_Read_press>
 8001ecc:	eeb0 7a40 	vmov.f32	s14, s0
 8001ed0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001ef8 <BME280_ReadAll+0x50>
 8001ed4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	edc3 7a00 	vstr	s15, [r3]
   *H = BME280_Read_hum(bme);
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f7ff fc96 	bl	8001810 <BME280_Read_hum>
 8001ee4:	eef0 7a40 	vmov.f32	s15, s0
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	edc3 7a00 	vstr	s15, [r3]
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	42c80000 	.word	0x42c80000

08001efc <BME280_Init>:
void BME280_Init(BME280_t *bme, SPI_HandleTypeDef *spi, GPIO_TypeDef *CsPort, uint16_t CsPin)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	807b      	strh	r3, [r7, #2]
   bme->bme_spi       = spi;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	601a      	str	r2, [r3, #0]
   bme->bme280_CsPort = CsPort;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	605a      	str	r2, [r3, #4]
   bme->bme280_CsPin  = CsPin;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	887a      	ldrh	r2, [r7, #2]
 8001f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
   bme->t1            = BME280_Read16LE(bme, BME280_DIG_T1);
 8001f1c:	2188      	movs	r1, #136	; 0x88
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7ff fbac 	bl	800167c <BME280_Read16LE>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	84da      	strh	r2, [r3, #38]	; 0x26
   bme->t2            = BME280_Read16LE(bme, BME280_DIG_T2);
 8001f2c:	218a      	movs	r1, #138	; 0x8a
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7ff fba4 	bl	800167c <BME280_Read16LE>
 8001f34:	4603      	mov	r3, r0
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	819a      	strh	r2, [r3, #12]
   bme->t3            = BME280_Read16LE(bme, BME280_DIG_T3);
 8001f3c:	218c      	movs	r1, #140	; 0x8c
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f7ff fb9c 	bl	800167c <BME280_Read16LE>
 8001f44:	4603      	mov	r3, r0
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	81da      	strh	r2, [r3, #14]

   bme->p1 = BME280_Read16LE(bme, BME280_DIG_P1);
 8001f4c:	218e      	movs	r1, #142	; 0x8e
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff fb94 	bl	800167c <BME280_Read16LE>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	851a      	strh	r2, [r3, #40]	; 0x28
   bme->p2 = BME280_Read16LE(bme, BME280_DIG_P2);
 8001f5c:	2190      	movs	r1, #144	; 0x90
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f7ff fb8c 	bl	800167c <BME280_Read16LE>
 8001f64:	4603      	mov	r3, r0
 8001f66:	b21a      	sxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	821a      	strh	r2, [r3, #16]
   bme->p3 = BME280_Read16LE(bme, BME280_DIG_P3);
 8001f6c:	2192      	movs	r1, #146	; 0x92
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f7ff fb84 	bl	800167c <BME280_Read16LE>
 8001f74:	4603      	mov	r3, r0
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	825a      	strh	r2, [r3, #18]
   bme->p4 = BME280_Read16LE(bme, BME280_DIG_P4);
 8001f7c:	2194      	movs	r1, #148	; 0x94
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7ff fb7c 	bl	800167c <BME280_Read16LE>
 8001f84:	4603      	mov	r3, r0
 8001f86:	b21a      	sxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	829a      	strh	r2, [r3, #20]
   bme->p5 = BME280_Read16LE(bme, BME280_DIG_P5);
 8001f8c:	2196      	movs	r1, #150	; 0x96
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f7ff fb74 	bl	800167c <BME280_Read16LE>
 8001f94:	4603      	mov	r3, r0
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	82da      	strh	r2, [r3, #22]
   bme->p6 = BME280_Read16LE(bme, BME280_DIG_P6);
 8001f9c:	2198      	movs	r1, #152	; 0x98
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f7ff fb6c 	bl	800167c <BME280_Read16LE>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	831a      	strh	r2, [r3, #24]
   bme->p7 = BME280_Read16LE(bme, BME280_DIG_P7);
 8001fac:	219a      	movs	r1, #154	; 0x9a
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f7ff fb64 	bl	800167c <BME280_Read16LE>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	b21a      	sxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	835a      	strh	r2, [r3, #26]
   bme->p8 = BME280_Read16LE(bme, BME280_DIG_P8);
 8001fbc:	219c      	movs	r1, #156	; 0x9c
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7ff fb5c 	bl	800167c <BME280_Read16LE>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	839a      	strh	r2, [r3, #28]
   bme->p9 = BME280_Read16LE(bme, BME280_DIG_P9);
 8001fcc:	219e      	movs	r1, #158	; 0x9e
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f7ff fb54 	bl	800167c <BME280_Read16LE>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	b21a      	sxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	83da      	strh	r2, [r3, #30]

   bme->h1 = BME280_Read8(bme, BME280_DIG_H1);
 8001fdc:	21a1      	movs	r1, #161	; 0xa1
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f7ff fb02 	bl	80015e8 <BME280_Read8>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	721a      	strb	r2, [r3, #8]
   bme->h2 = BME280_Read16LE(bme, BME280_DIG_H2);
 8001fec:	21e1      	movs	r1, #225	; 0xe1
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f7ff fb44 	bl	800167c <BME280_Read16LE>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	b21a      	sxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	841a      	strh	r2, [r3, #32]
   bme->h3 = BME280_Read8(bme, BME280_DIG_H3);
 8001ffc:	21e3      	movs	r1, #227	; 0xe3
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f7ff faf2 	bl	80015e8 <BME280_Read8>
 8002004:	4603      	mov	r3, r0
 8002006:	461a      	mov	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	725a      	strb	r2, [r3, #9]
   bme->h4 = ((BME280_Read8(bme, BME280_DIG_H4) << 4) | (BME280_Read8(bme, BME280_DIG_H4 + 1) & 0xF));
 800200c:	21e4      	movs	r1, #228	; 0xe4
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7ff faea 	bl	80015e8 <BME280_Read8>
 8002014:	4603      	mov	r3, r0
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	b21c      	sxth	r4, r3
 800201a:	21e5      	movs	r1, #229	; 0xe5
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f7ff fae3 	bl	80015e8 <BME280_Read8>
 8002022:	4603      	mov	r3, r0
 8002024:	b21b      	sxth	r3, r3
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	b21b      	sxth	r3, r3
 800202c:	4323      	orrs	r3, r4
 800202e:	b21a      	sxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	845a      	strh	r2, [r3, #34]	; 0x22
   bme->h5 = ((BME280_Read8(bme, BME280_DIG_H5 + 1) << 4) | (BME280_Read8(bme, BME280_DIG_H5) >> 4));
 8002034:	21e6      	movs	r1, #230	; 0xe6
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f7ff fad6 	bl	80015e8 <BME280_Read8>
 800203c:	4603      	mov	r3, r0
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	b21c      	sxth	r4, r3
 8002042:	21e5      	movs	r1, #229	; 0xe5
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f7ff facf 	bl	80015e8 <BME280_Read8>
 800204a:	4603      	mov	r3, r0
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	b2db      	uxtb	r3, r3
 8002050:	b21b      	sxth	r3, r3
 8002052:	4323      	orrs	r3, r4
 8002054:	b21a      	sxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	849a      	strh	r2, [r3, #36]	; 0x24
   bme->h6 = (int8_t)BME280_Read8(bme, BME280_DIG_H6);
 800205a:	21e7      	movs	r1, #231	; 0xe7
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7ff fac3 	bl	80015e8 <BME280_Read8>
 8002062:	4603      	mov	r3, r0
 8002064:	b25a      	sxtb	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	729a      	strb	r2, [r3, #10]
   BME280_Write8(bme, BME280_HUM_CONTROL, 0b00000100);
 800206a:	2204      	movs	r2, #4
 800206c:	21f2      	movs	r1, #242	; 0xf2
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f7ff fae1 	bl	8001636 <BME280_Write8>
   BME280_Write8(bme, BME280_CONTROL, 0b10110111);
 8002074:	22b7      	movs	r2, #183	; 0xb7
 8002076:	21f4      	movs	r1, #244	; 0xf4
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7ff fadc 	bl	8001636 <BME280_Write8>
   BME280_Write8(bme, BME280_CONFIG, 0b00000000);
 800207e:	2200      	movs	r2, #0
 8002080:	21f5      	movs	r1, #245	; 0xf5
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff fad7 	bl	8001636 <BME280_Write8>
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bd90      	pop	{r4, r7, pc}

08002090 <Crc>:
#include "crc.h"
#include "main.h"
int RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
int k              = 0;
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
   PreviuseCRC ^= data[0];
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4053      	eors	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 80020a8:	2301      	movs	r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	e032      	b.n	8002114 <Crc+0x84>
   {
      uint32_t temp = data[i];
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	4413      	add	r3, r2
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	613b      	str	r3, [r7, #16]
      if(temp == 0x00000000 )
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d115      	bne.n	80020ea <Crc+0x5a>
      {
         temp = RandomNumber[k % (sizeof(RandomNumber)-1)];
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <Crc+0xa0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4619      	mov	r1, r3
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <Crc+0xa4>)
 80020c6:	fba3 2301 	umull	r2, r3, r3, r1
 80020ca:	095a      	lsrs	r2, r3, #5
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	1aca      	subs	r2, r1, r3
 80020d8:	4b17      	ldr	r3, [pc, #92]	; (8002138 <Crc+0xa8>)
 80020da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020de:	613b      	str	r3, [r7, #16]
         k++;
 80020e0:	4b13      	ldr	r3, [pc, #76]	; (8002130 <Crc+0xa0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <Crc+0xa0>)
 80020e8:	6013      	str	r3, [r2, #0]
      }
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4053      	eors	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
      if(PreviuseCRC & 0x80000000)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da03      	bge.n	8002108 <Crc+0x78>
      {
         PreviuseCRC ^= 0xABC245C2;
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <Crc+0xac>)
 8002104:	4053      	eors	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
      }
      PreviuseCRC <<= 1;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3301      	adds	r3, #1
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	429a      	cmp	r2, r3
 800211a:	d3c8      	bcc.n	80020ae <Crc+0x1e>
   }
   k = 0;
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <Crc+0xa0>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
   return PreviuseCRC;
 8002122:	68fb      	ldr	r3, [r7, #12]
}
 8002124:	4618      	mov	r0, r3
 8002126:	371c      	adds	r7, #28
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	20000280 	.word	0x20000280
 8002134:	ae4c415d 	.word	0xae4c415d
 8002138:	20000004 	.word	0x20000004
 800213c:	abc245c2 	.word	0xabc245c2

08002140 <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
   uint8_t temp = 1;
 800214c:	2301      	movs	r3, #1
 800214e:	75fb      	strb	r3, [r7, #23]
   for(int i = 0; i < DataLength; i++)
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	e03b      	b.n	80021ce <RepareMessage+0x8e>
   {
      for(int j = 0; j < 8; j++)
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	e032      	b.n	80021c2 <RepareMessage+0x82>
      {
         data[i] ^= (temp << j);
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	4413      	add	r3, r2
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b25a      	sxtb	r2, r3
 8002166:	7df9      	ldrb	r1, [r7, #23]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	b25b      	sxtb	r3, r3
 8002170:	4053      	eors	r3, r2
 8002172:	b259      	sxtb	r1, r3
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	4413      	add	r3, r2
 800217a:	b2ca      	uxtb	r2, r1
 800217c:	701a      	strb	r2, [r3, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3b04      	subs	r3, #4
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	4619      	mov	r1, r3
 8002186:	f04f 30ff 	mov.w	r0, #4294967295
 800218a:	f7ff ff81 	bl	8002090 <Crc>
 800218e:	4602      	mov	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <RepareMessage+0x5a>
         {
            return CRC_OK;
 8002196:	2301      	movs	r3, #1
 8002198:	e01e      	b.n	80021d8 <RepareMessage+0x98>
         }
         else
         {
            data[i] ^= (temp << j);
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	4413      	add	r3, r2
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b25a      	sxtb	r2, r3
 80021a4:	7df9      	ldrb	r1, [r7, #23]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	b25b      	sxtb	r3, r3
 80021ae:	4053      	eors	r3, r2
 80021b0:	b259      	sxtb	r1, r3
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	4413      	add	r3, r2
 80021b8:	b2ca      	uxtb	r2, r1
 80021ba:	701a      	strb	r2, [r3, #0]
      for(int j = 0; j < 8; j++)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	3301      	adds	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b07      	cmp	r3, #7
 80021c6:	ddc9      	ble.n	800215c <RepareMessage+0x1c>
   for(int i = 0; i < DataLength; i++)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	3301      	adds	r3, #1
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d8bf      	bhi.n	8002156 <RepareMessage+0x16>
         }
      }
   }
   return CRC_ERROR;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80021e6:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <MX_DMA_Init+0x44>)
 80021e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ea:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <MX_DMA_Init+0x44>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6493      	str	r3, [r2, #72]	; 0x48
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <MX_DMA_Init+0x44>)
 80021f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <MX_DMA_Init+0x44>)
 8002200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <MX_DMA_Init+0x44>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6493      	str	r3, [r2, #72]	; 0x48
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_DMA_Init+0x44>)
 800220c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	683b      	ldr	r3, [r7, #0]

}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000

08002228 <e_papier_reset>:
const unsigned char lut_bb[] = {
   0x80, 0x17, 0x00, 0x00, 0x00, 0x02, 0x90, 0x17, 0x17, 0x00, 0x00, 0x02, 0x80, 0x0A, 0x01, 0x00, 0x00, 0x01, 0x50, 0x0E, 0x0E,
   0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
void e_papier_reset(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 800222c:	2201      	movs	r2, #1
 800222e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002232:	480d      	ldr	r0, [pc, #52]	; (8002268 <e_papier_reset+0x40>)
 8002234:	f004 fd72 	bl	8006d1c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8002238:	20c8      	movs	r0, #200	; 0xc8
 800223a:	f003 ff75 	bl	8006128 <HAL_Delay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002244:	4808      	ldr	r0, [pc, #32]	; (8002268 <e_papier_reset+0x40>)
 8002246:	f004 fd69 	bl	8006d1c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800224a:	20c8      	movs	r0, #200	; 0xc8
 800224c:	f003 ff6c 	bl	8006128 <HAL_Delay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 8002250:	2201      	movs	r2, #1
 8002252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002256:	4804      	ldr	r0, [pc, #16]	; (8002268 <e_papier_reset+0x40>)
 8002258:	f004 fd60 	bl	8006d1c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800225c:	20c8      	movs	r0, #200	; 0xc8
 800225e:	f003 ff63 	bl	8006128 <HAL_Delay>
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	48000400 	.word	0x48000400

0800226c <e_papier_send_command>:
void e_papier_send_command(uint8_t command)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2101      	movs	r1, #1
 800227a:	480c      	ldr	r0, [pc, #48]	; (80022ac <e_papier_send_command+0x40>)
 800227c:	f004 fd4e 	bl	8006d1c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2102      	movs	r1, #2
 8002284:	4809      	ldr	r0, [pc, #36]	; (80022ac <e_papier_send_command+0x40>)
 8002286:	f004 fd49 	bl	8006d1c <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &command, 1, 1000);
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <e_papier_send_command+0x44>)
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	1df9      	adds	r1, r7, #7
 8002290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002294:	2201      	movs	r2, #1
 8002296:	f006 fef8 	bl	800908a <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 800229a:	2201      	movs	r2, #1
 800229c:	2102      	movs	r1, #2
 800229e:	4803      	ldr	r0, [pc, #12]	; (80022ac <e_papier_send_command+0x40>)
 80022a0:	f004 fd3c 	bl	8006d1c <HAL_GPIO_WritePin>
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	48000400 	.word	0x48000400
 80022b0:	20000284 	.word	0x20000284

080022b4 <e_papier_send_data>:
void e_papier_send_data(uint8_t data)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 1);
 80022be:	2201      	movs	r2, #1
 80022c0:	2101      	movs	r1, #1
 80022c2:	480c      	ldr	r0, [pc, #48]	; (80022f4 <e_papier_send_data+0x40>)
 80022c4:	f004 fd2a 	bl	8006d1c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2102      	movs	r1, #2
 80022cc:	4809      	ldr	r0, [pc, #36]	; (80022f4 <e_papier_send_data+0x40>)
 80022ce:	f004 fd25 	bl	8006d1c <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &data, 1, 1000);
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <e_papier_send_data+0x44>)
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	1df9      	adds	r1, r7, #7
 80022d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022dc:	2201      	movs	r2, #1
 80022de:	f006 fed4 	bl	800908a <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 80022e2:	2201      	movs	r2, #1
 80022e4:	2102      	movs	r1, #2
 80022e6:	4803      	ldr	r0, [pc, #12]	; (80022f4 <e_papier_send_data+0x40>)
 80022e8:	f004 fd18 	bl	8006d1c <HAL_GPIO_WritePin>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	48000400 	.word	0x48000400
 80022f8:	20000284 	.word	0x20000284

080022fc <e_papier_wait_until_idle>:
void e_papier_wait_until_idle(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8002300:	e002      	b.n	8002308 <e_papier_wait_until_idle+0xc>
   {
      osDelay(100);
 8002302:	2064      	movs	r0, #100	; 0x64
 8002304:	f00a fcc6 	bl	800cc94 <osDelay>
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8002308:	2104      	movs	r1, #4
 800230a:	4804      	ldr	r0, [pc, #16]	; (800231c <e_papier_wait_until_idle+0x20>)
 800230c:	f004 fcee 	bl	8006cec <HAL_GPIO_ReadPin>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f5      	beq.n	8002302 <e_papier_wait_until_idle+0x6>
   }
}
 8002316:	bf00      	nop
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	48000400 	.word	0x48000400

08002320 <e_papier_set_pixel>:
void e_papier_set_pixel(uint16_t x, uint16_t y, color_t color)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
 800232a:	460b      	mov	r3, r1
 800232c:	80bb      	strh	r3, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	70fb      	strb	r3, [r7, #3]
   if(x >= EPD_WIDTH || x < 0 || y >= EPD_HEIGHT || y < 0)
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002338:	d247      	bcs.n	80023ca <e_papier_set_pixel+0xaa>
 800233a:	88bb      	ldrh	r3, [r7, #4]
 800233c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002340:	d243      	bcs.n	80023ca <e_papier_set_pixel+0xaa>
   {
      return;
   }
   if(color == WHITE)
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d120      	bne.n	800238a <e_papier_set_pixel+0x6a>
   {
      BufferEpapier[x / 8 + y * EPD_WIDTH / 8] |= (0x80 > (x % 8));
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	08db      	lsrs	r3, r3, #3
 800234c:	b299      	uxth	r1, r3
 800234e:	4608      	mov	r0, r1
 8002350:	88bb      	ldrh	r3, [r7, #4]
 8002352:	2232      	movs	r2, #50	; 0x32
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	4403      	add	r3, r0
 800235a:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <e_papier_set_pixel+0xb8>)
 800235c:	5cd3      	ldrb	r3, [r2, r3]
 800235e:	b25a      	sxtb	r2, r3
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b7f      	cmp	r3, #127	; 0x7f
 800236a:	bf94      	ite	ls
 800236c:	2301      	movls	r3, #1
 800236e:	2300      	movhi	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	b25b      	sxtb	r3, r3
 8002374:	4313      	orrs	r3, r2
 8002376:	b258      	sxtb	r0, r3
 8002378:	88bb      	ldrh	r3, [r7, #4]
 800237a:	2232      	movs	r2, #50	; 0x32
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	440b      	add	r3, r1
 8002382:	b2c1      	uxtb	r1, r0
 8002384:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <e_papier_set_pixel+0xb8>)
 8002386:	54d1      	strb	r1, [r2, r3]
 8002388:	e020      	b.n	80023cc <e_papier_set_pixel+0xac>
   }
   else
   {
      BufferEpapier[x / 8 + y * EPD_WIDTH / 8] &= ~(0x80 >> (x % 8));
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	08db      	lsrs	r3, r3, #3
 800238e:	b298      	uxth	r0, r3
 8002390:	4601      	mov	r1, r0
 8002392:	88bb      	ldrh	r3, [r7, #4]
 8002394:	2232      	movs	r2, #50	; 0x32
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	440b      	add	r3, r1
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <e_papier_set_pixel+0xb8>)
 800239e:	5cd3      	ldrb	r3, [r2, r3]
 80023a0:	b25a      	sxtb	r2, r3
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	2180      	movs	r1, #128	; 0x80
 80023aa:	fa41 f303 	asr.w	r3, r1, r3
 80023ae:	b25b      	sxtb	r3, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	b25b      	sxtb	r3, r3
 80023b4:	4013      	ands	r3, r2
 80023b6:	b259      	sxtb	r1, r3
 80023b8:	88bb      	ldrh	r3, [r7, #4]
 80023ba:	2232      	movs	r2, #50	; 0x32
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	4403      	add	r3, r0
 80023c2:	b2c9      	uxtb	r1, r1
 80023c4:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <e_papier_set_pixel+0xb8>)
 80023c6:	54d1      	strb	r1, [r2, r3]
 80023c8:	e000      	b.n	80023cc <e_papier_set_pixel+0xac>
      return;
 80023ca:	bf00      	nop
   }
}
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000288 	.word	0x20000288

080023dc <e_papier_set_lut>:
void e_papier_set_lut(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
   uint16_t count;
   e_papier_send_command(LUT_FOR_VCOM); // g vcom
 80023e2:	2020      	movs	r0, #32
 80023e4:	f7ff ff42 	bl	800226c <e_papier_send_command>
   for(count = 0; count < 44; count++)
 80023e8:	2300      	movs	r3, #0
 80023ea:	80fb      	strh	r3, [r7, #6]
 80023ec:	e008      	b.n	8002400 <e_papier_set_lut+0x24>
   {
      e_papier_send_data(lut_vcom0[count]);
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	4a2b      	ldr	r2, [pc, #172]	; (80024a0 <e_papier_set_lut+0xc4>)
 80023f2:	5cd3      	ldrb	r3, [r2, r3]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff5d 	bl	80022b4 <e_papier_send_data>
   for(count = 0; count < 44; count++)
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	3301      	adds	r3, #1
 80023fe:	80fb      	strh	r3, [r7, #6]
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	2b2b      	cmp	r3, #43	; 0x2b
 8002404:	d9f3      	bls.n	80023ee <e_papier_set_lut+0x12>
   }

   e_papier_send_command(LUT_WHITE_TO_WHITE);
 8002406:	2021      	movs	r0, #33	; 0x21
 8002408:	f7ff ff30 	bl	800226c <e_papier_send_command>
   for(count = 0; count < 42; count++)
 800240c:	2300      	movs	r3, #0
 800240e:	80fb      	strh	r3, [r7, #6]
 8002410:	e008      	b.n	8002424 <e_papier_set_lut+0x48>
   {
      e_papier_send_data(lut_ww[count]);
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <e_papier_set_lut+0xc8>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff4b 	bl	80022b4 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	3301      	adds	r3, #1
 8002422:	80fb      	strh	r3, [r7, #6]
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	2b29      	cmp	r3, #41	; 0x29
 8002428:	d9f3      	bls.n	8002412 <e_papier_set_lut+0x36>
   }

   e_papier_send_command(LUT_BLACK_TO_WHITE);
 800242a:	2022      	movs	r0, #34	; 0x22
 800242c:	f7ff ff1e 	bl	800226c <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8002430:	2300      	movs	r3, #0
 8002432:	80fb      	strh	r3, [r7, #6]
 8002434:	e008      	b.n	8002448 <e_papier_set_lut+0x6c>
   {
      e_papier_send_data(lut_bw[count]);
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <e_papier_set_lut+0xcc>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff39 	bl	80022b4 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	3301      	adds	r3, #1
 8002446:	80fb      	strh	r3, [r7, #6]
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	2b29      	cmp	r3, #41	; 0x29
 800244c:	d9f3      	bls.n	8002436 <e_papier_set_lut+0x5a>
   }

   e_papier_send_command(LUT_WHITE_TO_BLACK);
 800244e:	2023      	movs	r0, #35	; 0x23
 8002450:	f7ff ff0c 	bl	800226c <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8002454:	2300      	movs	r3, #0
 8002456:	80fb      	strh	r3, [r7, #6]
 8002458:	e008      	b.n	800246c <e_papier_set_lut+0x90>
   {
      e_papier_send_data(lut_wb[count]);
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	4a13      	ldr	r2, [pc, #76]	; (80024ac <e_papier_set_lut+0xd0>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff27 	bl	80022b4 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	3301      	adds	r3, #1
 800246a:	80fb      	strh	r3, [r7, #6]
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	2b29      	cmp	r3, #41	; 0x29
 8002470:	d9f3      	bls.n	800245a <e_papier_set_lut+0x7e>
   }

   e_papier_send_command(LUT_BLACK_TO_BLACK);
 8002472:	2024      	movs	r0, #36	; 0x24
 8002474:	f7ff fefa 	bl	800226c <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8002478:	2300      	movs	r3, #0
 800247a:	80fb      	strh	r3, [r7, #6]
 800247c:	e008      	b.n	8002490 <e_papier_set_lut+0xb4>
   {
      e_papier_send_data(lut_bb[count]);
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <e_papier_set_lut+0xd4>)
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff15 	bl	80022b4 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	3301      	adds	r3, #1
 800248e:	80fb      	strh	r3, [r7, #6]
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	2b29      	cmp	r3, #41	; 0x29
 8002494:	d9f3      	bls.n	800247e <e_papier_set_lut+0xa2>
   }
}
 8002496:	bf00      	nop
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	08015414 	.word	0x08015414
 80024a4:	08015440 	.word	0x08015440
 80024a8:	0801546c 	.word	0x0801546c
 80024ac:	08015498 	.word	0x08015498
 80024b0:	080154c4 	.word	0x080154c4

080024b4 <e_papier_turn_on_display>:
      }
   }
   // e_papier_wait_until_idle();
}
void e_papier_turn_on_display(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
   e_papier_send_command(DISPLAY_REFRESH);
 80024b8:	2012      	movs	r0, #18
 80024ba:	f7ff fed7 	bl	800226c <e_papier_send_command>
   e_papier_wait_until_idle();
 80024be:	f7ff ff1d 	bl	80022fc <e_papier_wait_until_idle>
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <e_papier_display>:
void e_papier_display(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
   uint16_t Width, Height;
   Width  = (EPD_WIDTH % 8 == 0) ? (EPD_WIDTH / 8) : (EPD_WIDTH / 8 + 1);
 80024ce:	2332      	movs	r3, #50	; 0x32
 80024d0:	80fb      	strh	r3, [r7, #6]
   Height = EPD_HEIGHT;
 80024d2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80024d6:	80bb      	strh	r3, [r7, #4]
   taskENTER_CRITICAL();
 80024d8:	f00d fed4 	bl	8010284 <vPortEnterCritical>
   e_papier_send_command(DATA_START_TRANSMISSION_1);
 80024dc:	2010      	movs	r0, #16
 80024de:	f7ff fec5 	bl	800226c <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	81fb      	strh	r3, [r7, #14]
 80024e6:	e00f      	b.n	8002508 <e_papier_display+0x40>
   {
      for(uint16_t i = 0; i < Width; i++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	81bb      	strh	r3, [r7, #12]
 80024ec:	e005      	b.n	80024fa <e_papier_display+0x32>
      {
         e_papier_send_data(0XFF);
 80024ee:	20ff      	movs	r0, #255	; 0xff
 80024f0:	f7ff fee0 	bl	80022b4 <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 80024f4:	89bb      	ldrh	r3, [r7, #12]
 80024f6:	3301      	adds	r3, #1
 80024f8:	81bb      	strh	r3, [r7, #12]
 80024fa:	89ba      	ldrh	r2, [r7, #12]
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d3f5      	bcc.n	80024ee <e_papier_display+0x26>
   for(uint16_t j = 0; j < Height; j++)
 8002502:	89fb      	ldrh	r3, [r7, #14]
 8002504:	3301      	adds	r3, #1
 8002506:	81fb      	strh	r3, [r7, #14]
 8002508:	89fa      	ldrh	r2, [r7, #14]
 800250a:	88bb      	ldrh	r3, [r7, #4]
 800250c:	429a      	cmp	r2, r3
 800250e:	d3eb      	bcc.n	80024e8 <e_papier_display+0x20>
      }
   }
   e_papier_send_command(DATA_START_TRANSMISSION_2);
 8002510:	2013      	movs	r0, #19
 8002512:	f7ff feab 	bl	800226c <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 8002516:	2300      	movs	r3, #0
 8002518:	817b      	strh	r3, [r7, #10]
 800251a:	e017      	b.n	800254c <e_papier_display+0x84>
   {
      for(uint16_t i = 0; i < Width; i++)
 800251c:	2300      	movs	r3, #0
 800251e:	813b      	strh	r3, [r7, #8]
 8002520:	e00d      	b.n	800253e <e_papier_display+0x76>
      {
         e_papier_send_data(BufferEpapier[i + j * Width]);
 8002522:	893a      	ldrh	r2, [r7, #8]
 8002524:	897b      	ldrh	r3, [r7, #10]
 8002526:	88f9      	ldrh	r1, [r7, #6]
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	4413      	add	r3, r2
 800252e:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <e_papier_display+0xa0>)
 8002530:	5cd3      	ldrb	r3, [r2, r3]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff febe 	bl	80022b4 <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 8002538:	893b      	ldrh	r3, [r7, #8]
 800253a:	3301      	adds	r3, #1
 800253c:	813b      	strh	r3, [r7, #8]
 800253e:	893a      	ldrh	r2, [r7, #8]
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	429a      	cmp	r2, r3
 8002544:	d3ed      	bcc.n	8002522 <e_papier_display+0x5a>
   for(uint16_t j = 0; j < Height; j++)
 8002546:	897b      	ldrh	r3, [r7, #10]
 8002548:	3301      	adds	r3, #1
 800254a:	817b      	strh	r3, [r7, #10]
 800254c:	897a      	ldrh	r2, [r7, #10]
 800254e:	88bb      	ldrh	r3, [r7, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	d3e3      	bcc.n	800251c <e_papier_display+0x54>
      }
   }
   taskEXIT_CRITICAL();
 8002554:	f00d fec6 	bl	80102e4 <vPortExitCritical>
   e_papier_turn_on_display();
 8002558:	f7ff ffac 	bl	80024b4 <e_papier_turn_on_display>
   e_papier_wait_until_idle();
 800255c:	f7ff fece 	bl	80022fc <e_papier_wait_until_idle>
}
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000288 	.word	0x20000288

0800256c <e_papier_clear>:
void e_papier_clear()
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
   memset(BufferEpapier, 0xff, EPD_HEIGHT * EPD_WIDTH / 8);
 8002570:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002574:	21ff      	movs	r1, #255	; 0xff
 8002576:	4802      	ldr	r0, [pc, #8]	; (8002580 <e_papier_clear+0x14>)
 8002578:	f00e f9c8 	bl	801090c <memset>
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000288 	.word	0x20000288

08002584 <e_papier_init>:
void e_papier_init(SPI_HandleTypeDef *spi)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
   e_papier_spi = spi;
 800258c:	4a2c      	ldr	r2, [pc, #176]	; (8002640 <e_papier_init+0xbc>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6013      	str	r3, [r2, #0]
   e_papier_reset();
 8002592:	f7ff fe49 	bl	8002228 <e_papier_reset>

   e_papier_send_command(POWER_SETTING); // POWER SETTING
 8002596:	2001      	movs	r0, #1
 8002598:	f7ff fe68 	bl	800226c <e_papier_send_command>
   e_papier_send_data(0x03);
 800259c:	2003      	movs	r0, #3
 800259e:	f7ff fe89 	bl	80022b4 <e_papier_send_data>
   e_papier_send_data(0x00);
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7ff fe86 	bl	80022b4 <e_papier_send_data>
   e_papier_send_data(0x2b);
 80025a8:	202b      	movs	r0, #43	; 0x2b
 80025aa:	f7ff fe83 	bl	80022b4 <e_papier_send_data>
   e_papier_send_data(0x2b);
 80025ae:	202b      	movs	r0, #43	; 0x2b
 80025b0:	f7ff fe80 	bl	80022b4 <e_papier_send_data>

   e_papier_send_command(BOOSTER_SOFT_START); // boost soft start
 80025b4:	2006      	movs	r0, #6
 80025b6:	f7ff fe59 	bl	800226c <e_papier_send_command>
   e_papier_send_data(0x17);                  // A
 80025ba:	2017      	movs	r0, #23
 80025bc:	f7ff fe7a 	bl	80022b4 <e_papier_send_data>
   e_papier_send_data(0x17);                  // B
 80025c0:	2017      	movs	r0, #23
 80025c2:	f7ff fe77 	bl	80022b4 <e_papier_send_data>
   e_papier_send_data(0x17);                  // C
 80025c6:	2017      	movs	r0, #23
 80025c8:	f7ff fe74 	bl	80022b4 <e_papier_send_data>

   e_papier_send_command(POWER_ON);
 80025cc:	2004      	movs	r0, #4
 80025ce:	f7ff fe4d 	bl	800226c <e_papier_send_command>
   e_papier_wait_until_idle();
 80025d2:	f7ff fe93 	bl	80022fc <e_papier_wait_until_idle>

   e_papier_send_command(PANEL_SETTING); // panel setting
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7ff fe48 	bl	800226c <e_papier_send_command>
   e_papier_send_data(0xbf);             // KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 80025dc:	20bf      	movs	r0, #191	; 0xbf
 80025de:	f7ff fe69 	bl	80022b4 <e_papier_send_data>
   e_papier_send_data(0x0d);
 80025e2:	200d      	movs	r0, #13
 80025e4:	f7ff fe66 	bl	80022b4 <e_papier_send_data>

   e_papier_send_command(PLL_CONTROL); // PLL setting
 80025e8:	2030      	movs	r0, #48	; 0x30
 80025ea:	f7ff fe3f 	bl	800226c <e_papier_send_command>
   e_papier_send_data(0x3C);           // 3A 100HZ   29 150Hz 39 200HZ	31 171HZ
 80025ee:	203c      	movs	r0, #60	; 0x3c
 80025f0:	f7ff fe60 	bl	80022b4 <e_papier_send_data>

   e_papier_send_command(0x61); // resolution setting
 80025f4:	2061      	movs	r0, #97	; 0x61
 80025f6:	f7ff fe39 	bl	800226c <e_papier_send_command>
   e_papier_send_data(0x01);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f7ff fe5a 	bl	80022b4 <e_papier_send_data>
   e_papier_send_data(0x90); // 128
 8002600:	2090      	movs	r0, #144	; 0x90
 8002602:	f7ff fe57 	bl	80022b4 <e_papier_send_data>
   e_papier_send_data(0x01); //
 8002606:	2001      	movs	r0, #1
 8002608:	f7ff fe54 	bl	80022b4 <e_papier_send_data>
   e_papier_send_data(0x2c);
 800260c:	202c      	movs	r0, #44	; 0x2c
 800260e:	f7ff fe51 	bl	80022b4 <e_papier_send_data>

   e_papier_send_command(0x82); // vcom_DC setting
 8002612:	2082      	movs	r0, #130	; 0x82
 8002614:	f7ff fe2a 	bl	800226c <e_papier_send_command>
   e_papier_send_data(0x28);
 8002618:	2028      	movs	r0, #40	; 0x28
 800261a:	f7ff fe4b 	bl	80022b4 <e_papier_send_data>

   e_papier_send_command(0X50); // VCOM AND DATA INTERVAL SETTING
 800261e:	2050      	movs	r0, #80	; 0x50
 8002620:	f7ff fe24 	bl	800226c <e_papier_send_command>
   e_papier_send_data(0x97);    // 97white border 77black border		VBDF 17|D7 VBDW 97 VBDB 57		VBDF F7 VBDW 77 VBDB 37  VBDR B7
 8002624:	2097      	movs	r0, #151	; 0x97
 8002626:	f7ff fe45 	bl	80022b4 <e_papier_send_data>

   e_papier_set_lut();
 800262a:	f7ff fed7 	bl	80023dc <e_papier_set_lut>
   e_papier_clear();
 800262e:	f7ff ff9d 	bl	800256c <e_papier_clear>
   e_papier_display();
 8002632:	f7ff ff49 	bl	80024c8 <e_papier_display>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000284 	.word	0x20000284

08002644 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */
   /* Create the mutex(es) */
   /* creation of ScreensDcMutex */
   ScreensDcMutexHandle = osMutexNew(&ScreensDcMutex_attributes);
 8002648:	4836      	ldr	r0, [pc, #216]	; (8002724 <MX_FREERTOS_Init+0xe0>)
 800264a:	f00a fc27 	bl	800ce9c <osMutexNew>
 800264e:	4603      	mov	r3, r0
 8002650:	4a35      	ldr	r2, [pc, #212]	; (8002728 <MX_FREERTOS_Init+0xe4>)
 8002652:	6013      	str	r3, [r2, #0]

   /* creation of SSD1306Mutex */
   SSD1306MutexHandle = osMutexNew(&SSD1306Mutex_attributes);
 8002654:	4835      	ldr	r0, [pc, #212]	; (800272c <MX_FREERTOS_Init+0xe8>)
 8002656:	f00a fc21 	bl	800ce9c <osMutexNew>
 800265a:	4603      	mov	r3, r0
 800265c:	4a34      	ldr	r2, [pc, #208]	; (8002730 <MX_FREERTOS_Init+0xec>)
 800265e:	6013      	str	r3, [r2, #0]

   /* creation of SPI1Mutex */
   SPI1MutexHandle = osMutexNew(&SPI1Mutex_attributes);
 8002660:	4834      	ldr	r0, [pc, #208]	; (8002734 <MX_FREERTOS_Init+0xf0>)
 8002662:	f00a fc1b 	bl	800ce9c <osMutexNew>
 8002666:	4603      	mov	r3, r0
 8002668:	4a33      	ldr	r2, [pc, #204]	; (8002738 <MX_FREERTOS_Init+0xf4>)
 800266a:	6013      	str	r3, [r2, #0]

   /* creation of E_PAPIERMutex */
   E_PAPIERMutexHandle = osMutexNew(&E_PAPIERMutex_attributes);
 800266c:	4833      	ldr	r0, [pc, #204]	; (800273c <MX_FREERTOS_Init+0xf8>)
 800266e:	f00a fc15 	bl	800ce9c <osMutexNew>
 8002672:	4603      	mov	r3, r0
 8002674:	4a32      	ldr	r2, [pc, #200]	; (8002740 <MX_FREERTOS_Init+0xfc>)
 8002676:	6013      	str	r3, [r2, #0]

   /* creation of BME280Mutex */
   BME280MutexHandle = osMutexNew(&BME280Mutex_attributes);
 8002678:	4832      	ldr	r0, [pc, #200]	; (8002744 <MX_FREERTOS_Init+0x100>)
 800267a:	f00a fc0f 	bl	800ce9c <osMutexNew>
 800267e:	4603      	mov	r3, r0
 8002680:	4a31      	ldr	r2, [pc, #196]	; (8002748 <MX_FREERTOS_Init+0x104>)
 8002682:	6013      	str	r3, [r2, #0]
   /* start timers, add new ones, ... */
   /* USER CODE END RTOS_TIMERS */

   /* Create the queue(s) */
   /* creation of MeasurmentQueue */
   MeasurmentQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &MeasurmentQueue_attributes);
 8002684:	4a31      	ldr	r2, [pc, #196]	; (800274c <MX_FREERTOS_Init+0x108>)
 8002686:	2130      	movs	r1, #48	; 0x30
 8002688:	2010      	movs	r0, #16
 800268a:	f00a fd15 	bl	800d0b8 <osMessageQueueNew>
 800268e:	4603      	mov	r3, r0
 8002690:	4a2f      	ldr	r2, [pc, #188]	; (8002750 <MX_FREERTOS_Init+0x10c>)
 8002692:	6013      	str	r3, [r2, #0]
   /* add queues, ... */
   /* USER CODE END RTOS_QUEUES */

   /* Create the thread(s) */
   /* creation of defaultTask */
   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002694:	4a2f      	ldr	r2, [pc, #188]	; (8002754 <MX_FREERTOS_Init+0x110>)
 8002696:	2100      	movs	r1, #0
 8002698:	482f      	ldr	r0, [pc, #188]	; (8002758 <MX_FREERTOS_Init+0x114>)
 800269a:	f00a fa69 	bl	800cb70 <osThreadNew>
 800269e:	4603      	mov	r3, r0
 80026a0:	4a2e      	ldr	r2, [pc, #184]	; (800275c <MX_FREERTOS_Init+0x118>)
 80026a2:	6013      	str	r3, [r2, #0]

   /* creation of InitAndTimeTask */
   InitAndTimeTaskHandle = osThreadNew(StartInitAndTimeTask, NULL, &InitAndTimeTask_attributes);
 80026a4:	4a2e      	ldr	r2, [pc, #184]	; (8002760 <MX_FREERTOS_Init+0x11c>)
 80026a6:	2100      	movs	r1, #0
 80026a8:	482e      	ldr	r0, [pc, #184]	; (8002764 <MX_FREERTOS_Init+0x120>)
 80026aa:	f00a fa61 	bl	800cb70 <osThreadNew>
 80026ae:	4603      	mov	r3, r0
 80026b0:	4a2d      	ldr	r2, [pc, #180]	; (8002768 <MX_FREERTOS_Init+0x124>)
 80026b2:	6013      	str	r3, [r2, #0]

   /* creation of RfpTask */
   RfpTaskHandle = osThreadNew(StartRfpTask, NULL, &RfpTask_attributes);
 80026b4:	4a2d      	ldr	r2, [pc, #180]	; (800276c <MX_FREERTOS_Init+0x128>)
 80026b6:	2100      	movs	r1, #0
 80026b8:	482d      	ldr	r0, [pc, #180]	; (8002770 <MX_FREERTOS_Init+0x12c>)
 80026ba:	f00a fa59 	bl	800cb70 <osThreadNew>
 80026be:	4603      	mov	r3, r0
 80026c0:	4a2c      	ldr	r2, [pc, #176]	; (8002774 <MX_FREERTOS_Init+0x130>)
 80026c2:	6013      	str	r3, [r2, #0]

   /* creation of MeasurmentTask */
   MeasurmentTaskHandle = osThreadNew(StartMeasurmentTask, NULL, &MeasurmentTask_attributes);
 80026c4:	4a2c      	ldr	r2, [pc, #176]	; (8002778 <MX_FREERTOS_Init+0x134>)
 80026c6:	2100      	movs	r1, #0
 80026c8:	482c      	ldr	r0, [pc, #176]	; (800277c <MX_FREERTOS_Init+0x138>)
 80026ca:	f00a fa51 	bl	800cb70 <osThreadNew>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4a2b      	ldr	r2, [pc, #172]	; (8002780 <MX_FREERTOS_Init+0x13c>)
 80026d2:	6013      	str	r3, [r2, #0]

   /* creation of InternalMeasurmentTask */
   InternalMeasurmentTaskHandle = osThreadNew(StartInternalMeasurmentTask, NULL, &InternalMeasurmentTask_attributes);
 80026d4:	4a2b      	ldr	r2, [pc, #172]	; (8002784 <MX_FREERTOS_Init+0x140>)
 80026d6:	2100      	movs	r1, #0
 80026d8:	482b      	ldr	r0, [pc, #172]	; (8002788 <MX_FREERTOS_Init+0x144>)
 80026da:	f00a fa49 	bl	800cb70 <osThreadNew>
 80026de:	4603      	mov	r3, r0
 80026e0:	4a2a      	ldr	r2, [pc, #168]	; (800278c <MX_FREERTOS_Init+0x148>)
 80026e2:	6013      	str	r3, [r2, #0]

   /* creation of MoonPhaseTask */
   MoonPhaseTaskHandle = osThreadNew(StartMoonPhaseTask, NULL, &MoonPhaseTask_attributes);
 80026e4:	4a2a      	ldr	r2, [pc, #168]	; (8002790 <MX_FREERTOS_Init+0x14c>)
 80026e6:	2100      	movs	r1, #0
 80026e8:	482a      	ldr	r0, [pc, #168]	; (8002794 <MX_FREERTOS_Init+0x150>)
 80026ea:	f00a fa41 	bl	800cb70 <osThreadNew>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4a29      	ldr	r2, [pc, #164]	; (8002798 <MX_FREERTOS_Init+0x154>)
 80026f2:	6013      	str	r3, [r2, #0]

   /* creation of E_PapierDrawingTask */
   E_PapierDrawingTaskHandle = osThreadNew(StartE_PapierDrawingTask, NULL, &E_PapierDrawingTask_attributes);
 80026f4:	4a29      	ldr	r2, [pc, #164]	; (800279c <MX_FREERTOS_Init+0x158>)
 80026f6:	2100      	movs	r1, #0
 80026f8:	4829      	ldr	r0, [pc, #164]	; (80027a0 <MX_FREERTOS_Init+0x15c>)
 80026fa:	f00a fa39 	bl	800cb70 <osThreadNew>
 80026fe:	4603      	mov	r3, r0
 8002700:	4a28      	ldr	r2, [pc, #160]	; (80027a4 <MX_FREERTOS_Init+0x160>)
 8002702:	6013      	str	r3, [r2, #0]

   /* creation of E_PapierDisplayTask */
   E_PapierDisplayTaskHandle = osThreadNew(StartE_PapierDisplayTask, NULL, &E_PapierDisplayTask_attributes);
 8002704:	4a28      	ldr	r2, [pc, #160]	; (80027a8 <MX_FREERTOS_Init+0x164>)
 8002706:	2100      	movs	r1, #0
 8002708:	4828      	ldr	r0, [pc, #160]	; (80027ac <MX_FREERTOS_Init+0x168>)
 800270a:	f00a fa31 	bl	800cb70 <osThreadNew>
 800270e:	4603      	mov	r3, r0
 8002710:	4a27      	ldr	r2, [pc, #156]	; (80027b0 <MX_FREERTOS_Init+0x16c>)
 8002712:	6013      	str	r3, [r2, #0]
   /* USER CODE BEGIN RTOS_THREADS */
   /* add threads, ... */
   /* USER CODE END RTOS_THREADS */

   /* creation of C3V1Flags */
   C3V1FlagsHandle = osEventFlagsNew(&C3V1Flags_attributes);
 8002714:	4827      	ldr	r0, [pc, #156]	; (80027b4 <MX_FREERTOS_Init+0x170>)
 8002716:	f00a fad8 	bl	800ccca <osEventFlagsNew>
 800271a:	4603      	mov	r3, r0
 800271c:	4a26      	ldr	r2, [pc, #152]	; (80027b8 <MX_FREERTOS_Init+0x174>)
 800271e:	6013      	str	r3, [r2, #0]

   /* USER CODE BEGIN RTOS_EVENTS */
   /* add events, ... */
   /* USER CODE END RTOS_EVENTS */
}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}
 8002724:	08015808 	.word	0x08015808
 8002728:	20003d90 	.word	0x20003d90
 800272c:	08015818 	.word	0x08015818
 8002730:	20003d94 	.word	0x20003d94
 8002734:	08015828 	.word	0x08015828
 8002738:	20003d98 	.word	0x20003d98
 800273c:	08015838 	.word	0x08015838
 8002740:	20003d9c 	.word	0x20003d9c
 8002744:	08015848 	.word	0x08015848
 8002748:	20003da0 	.word	0x20003da0
 800274c:	080157f0 	.word	0x080157f0
 8002750:	20003d8c 	.word	0x20003d8c
 8002754:	080156d0 	.word	0x080156d0
 8002758:	080027bd 	.word	0x080027bd
 800275c:	20003d6c 	.word	0x20003d6c
 8002760:	080156f4 	.word	0x080156f4
 8002764:	080027e5 	.word	0x080027e5
 8002768:	20003d70 	.word	0x20003d70
 800276c:	08015718 	.word	0x08015718
 8002770:	08002979 	.word	0x08002979
 8002774:	20003d74 	.word	0x20003d74
 8002778:	0801573c 	.word	0x0801573c
 800277c:	080029ad 	.word	0x080029ad
 8002780:	20003d78 	.word	0x20003d78
 8002784:	08015760 	.word	0x08015760
 8002788:	080029f9 	.word	0x080029f9
 800278c:	20003d7c 	.word	0x20003d7c
 8002790:	08015784 	.word	0x08015784
 8002794:	08002ac9 	.word	0x08002ac9
 8002798:	20003d80 	.word	0x20003d80
 800279c:	080157a8 	.word	0x080157a8
 80027a0:	08002aed 	.word	0x08002aed
 80027a4:	20003d84 	.word	0x20003d84
 80027a8:	080157cc 	.word	0x080157cc
 80027ac:	08002e21 	.word	0x08002e21
 80027b0:	20003d88 	.word	0x20003d88
 80027b4:	08015858 	.word	0x08015858
 80027b8:	20003da4 	.word	0x20003da4

080027bc <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartDefaultTask */
   /* Infinite loop */
   for(;;)
   {
      HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 80027c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027c8:	4804      	ldr	r0, [pc, #16]	; (80027dc <StartDefaultTask+0x20>)
 80027ca:	f004 fabf 	bl	8006d4c <HAL_GPIO_TogglePin>
      HAL_IWDG_Refresh(&hiwdg);
 80027ce:	4804      	ldr	r0, [pc, #16]	; (80027e0 <StartDefaultTask+0x24>)
 80027d0:	f004 fb25 	bl	8006e1e <HAL_IWDG_Refresh>
      osDelay(100);
 80027d4:	2064      	movs	r0, #100	; 0x64
 80027d6:	f00a fa5d 	bl	800cc94 <osDelay>
      HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 80027da:	e7f3      	b.n	80027c4 <StartDefaultTask+0x8>
 80027dc:	48000400 	.word	0x48000400
 80027e0:	20003da8 	.word	0x20003da8

080027e4 <StartInitAndTimeTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInitAndTimeTask */
void StartInitAndTimeTask(void *argument)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b0a4      	sub	sp, #144	; 0x90
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartInitAndTimeTask */
   RFP_Init(&Rfp, RFP_IDWS);
 80027ec:	2103      	movs	r1, #3
 80027ee:	4853      	ldr	r0, [pc, #332]	; (800293c <StartInitAndTimeTask+0x158>)
 80027f0:	f002 fa26 	bl	8004c40 <RFP_Init>
   e_papier_init(&hspi1);
 80027f4:	4852      	ldr	r0, [pc, #328]	; (8002940 <StartInitAndTimeTask+0x15c>)
 80027f6:	f7ff fec5 	bl	8002584 <e_papier_init>
   ssd1306_init(&hspi1);
 80027fa:	4851      	ldr	r0, [pc, #324]	; (8002940 <StartInitAndTimeTask+0x15c>)
 80027fc:	f002 ffde 	bl	80057bc <ssd1306_init>
   BME280_Init(&Bme, &hspi1, BME280_CS_GPIO_Port, BME280_CS_Pin);
 8002800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002804:	4a4f      	ldr	r2, [pc, #316]	; (8002944 <StartInitAndTimeTask+0x160>)
 8002806:	494e      	ldr	r1, [pc, #312]	; (8002940 <StartInitAndTimeTask+0x15c>)
 8002808:	484f      	ldr	r0, [pc, #316]	; (8002948 <StartInitAndTimeTask+0x164>)
 800280a:	f7ff fb77 	bl	8001efc <BME280_Init>
   GFX_SetFont(font_8x5);
 800280e:	484f      	ldr	r0, [pc, #316]	; (800294c <StartInitAndTimeTask+0x168>)
 8002810:	f7fe fc82 	bl	8001118 <GFX_SetFont>
   RFP_RegisterDataFunction(RFP_DataFunction);
 8002814:	484e      	ldr	r0, [pc, #312]	; (8002950 <StartInitAndTimeTask+0x16c>)
 8002816:	f002 fa93 	bl	8004d40 <RFP_RegisterDataFunction>
   osEventFlagsSet(C3V1FlagsHandle, INITIALIZE_ALL_FLAG);
 800281a:	4b4e      	ldr	r3, [pc, #312]	; (8002954 <StartInitAndTimeTask+0x170>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2102      	movs	r1, #2
 8002820:	4618      	mov	r0, r3
 8002822:	f00a fa91 	bl	800cd48 <osEventFlagsSet>
   RTC_DateTypeDef RtcDate;
   char data[100];
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8002826:	4b4b      	ldr	r3, [pc, #300]	; (8002954 <StartInitAndTimeTask+0x170>)
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
 800282e:	2202      	movs	r2, #2
 8002830:	2102      	movs	r1, #2
 8002832:	f00a facd 	bl	800cdd0 <osEventFlagsWait>
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002836:	4b48      	ldr	r3, [pc, #288]	; (8002958 <StartInitAndTimeTask+0x174>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f04f 31ff 	mov.w	r1, #4294967295
 800283e:	4618      	mov	r0, r3
 8002840:	f00a fbb2 	bl	800cfa8 <osMutexAcquire>
      osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002844:	4b45      	ldr	r3, [pc, #276]	; (800295c <StartInitAndTimeTask+0x178>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f04f 31ff 	mov.w	r1, #4294967295
 800284c:	4618      	mov	r0, r3
 800284e:	f00a fbab 	bl	800cfa8 <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002852:	4b43      	ldr	r3, [pc, #268]	; (8002960 <StartInitAndTimeTask+0x17c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f04f 31ff 	mov.w	r1, #4294967295
 800285a:	4618      	mov	r0, r3
 800285c:	f00a fba4 	bl	800cfa8 <osMutexAcquire>
      HAL_RNG_GenerateRandomNumber(&hrng, &Random);
 8002860:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002864:	4619      	mov	r1, r3
 8002866:	483f      	ldr	r0, [pc, #252]	; (8002964 <StartInitAndTimeTask+0x180>)
 8002868:	f006 f928 	bl	8008abc <HAL_RNG_GenerateRandomNumber>
      ssd1306_clear();
 800286c:	f002 ff9a 	bl	80057a4 <ssd1306_clear>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8002870:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002874:	2200      	movs	r2, #0
 8002876:	4619      	mov	r1, r3
 8002878:	483b      	ldr	r0, [pc, #236]	; (8002968 <StartInitAndTimeTask+0x184>)
 800287a:	f006 f9ff 	bl	8008c7c <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 800287e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002882:	2200      	movs	r2, #0
 8002884:	4619      	mov	r1, r3
 8002886:	4838      	ldr	r0, [pc, #224]	; (8002968 <StartInitAndTimeTask+0x184>)
 8002888:	f006 fa5a 	bl	8008d40 <HAL_RTC_GetDate>
      sprintf(data, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 800288c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8002890:	461a      	mov	r2, r3
 8002892:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8002896:	4619      	mov	r1, r3
 8002898:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800289c:	f107 0008 	add.w	r0, r7, #8
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	460b      	mov	r3, r1
 80028a4:	4931      	ldr	r1, [pc, #196]	; (800296c <StartInitAndTimeTask+0x188>)
 80028a6:	f002 f993 	bl	8004bd0 <sprintf_>
      GFX_DrawString(0, 0, data, WHITE, 0, OLED);
 80028aa:	f107 0208 	add.w	r2, r7, #8
 80028ae:	2300      	movs	r3, #0
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	2300      	movs	r3, #0
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2301      	movs	r3, #1
 80028b8:	2100      	movs	r1, #0
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7fe fcfa 	bl	80012b4 <GFX_DrawString>
      sprintf(data, "%d : %d ; 2022", RtcDate.Date, RtcDate.Month);
 80028c0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80028c4:	461a      	mov	r2, r3
 80028c6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80028ca:	f107 0008 	add.w	r0, r7, #8
 80028ce:	4928      	ldr	r1, [pc, #160]	; (8002970 <StartInitAndTimeTask+0x18c>)
 80028d0:	f002 f97e 	bl	8004bd0 <sprintf_>
      GFX_DrawString(0, 10, data, WHITE, 0, OLED);
 80028d4:	f107 0208 	add.w	r2, r7, #8
 80028d8:	2300      	movs	r3, #0
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	2300      	movs	r3, #0
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2301      	movs	r3, #1
 80028e2:	210a      	movs	r1, #10
 80028e4:	2000      	movs	r0, #0
 80028e6:	f7fe fce5 	bl	80012b4 <GFX_DrawString>
      sprintf(data, "RNG %d ", Random);
 80028ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80028ee:	f107 0308 	add.w	r3, r7, #8
 80028f2:	4920      	ldr	r1, [pc, #128]	; (8002974 <StartInitAndTimeTask+0x190>)
 80028f4:	4618      	mov	r0, r3
 80028f6:	f002 f96b 	bl	8004bd0 <sprintf_>
      GFX_DrawString(0, 20, data, WHITE, 0, OLED);
 80028fa:	f107 0208 	add.w	r2, r7, #8
 80028fe:	2300      	movs	r3, #0
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	2300      	movs	r3, #0
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	2301      	movs	r3, #1
 8002908:	2114      	movs	r1, #20
 800290a:	2000      	movs	r0, #0
 800290c:	f7fe fcd2 	bl	80012b4 <GFX_DrawString>
      ssd1306_display();
 8002910:	f002 ff1c 	bl	800574c <ssd1306_display>
      osMutexRelease(SPI1MutexHandle);
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <StartInitAndTimeTask+0x17c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f00a fb90 	bl	800d03e <osMutexRelease>
      osMutexRelease(SSD1306MutexHandle);
 800291e:	4b0f      	ldr	r3, [pc, #60]	; (800295c <StartInitAndTimeTask+0x178>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f00a fb8b 	bl	800d03e <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <StartInitAndTimeTask+0x174>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f00a fb86 	bl	800d03e <osMutexRelease>
      osDelay(1000);
 8002932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002936:	f00a f9ad 	bl	800cc94 <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 800293a:	e774      	b.n	8002826 <StartInitAndTimeTask+0x42>
 800293c:	20003d20 	.word	0x20003d20
 8002940:	20003efc 	.word	0x20003efc
 8002944:	48000400 	.word	0x48000400
 8002948:	20003d3c 	.word	0x20003d3c
 800294c:	080154f0 	.word	0x080154f0
 8002950:	08002eb1 	.word	0x08002eb1
 8002954:	20003da4 	.word	0x20003da4
 8002958:	20003d90 	.word	0x20003d90
 800295c:	20003d94 	.word	0x20003d94
 8002960:	20003d98 	.word	0x20003d98
 8002964:	20003eb4 	.word	0x20003eb4
 8002968:	20003ec8 	.word	0x20003ec8
 800296c:	080152e0 	.word	0x080152e0
 8002970:	080152f0 	.word	0x080152f0
 8002974:	08015300 	.word	0x08015300

08002978 <StartRfpTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfpTask */
void StartRfpTask(void *argument)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartRfpTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <StartRfpTask+0x2c>)
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	2202      	movs	r2, #2
 800298a:	2102      	movs	r1, #2
 800298c:	f00a fa20 	bl	800cdd0 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      if(Rfp.Initialize == RFP_INITIALIZE)
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <StartRfpTask+0x30>)
 8002992:	78db      	ldrb	r3, [r3, #3]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <StartRfpTask+0x24>
      {
         RFP_Handle();
 8002998:	f002 f936 	bl	8004c08 <RFP_Handle>
      }
      osDelay(10);
 800299c:	200a      	movs	r0, #10
 800299e:	f00a f979 	bl	800cc94 <osDelay>
      if(Rfp.Initialize == RFP_INITIALIZE)
 80029a2:	e7f5      	b.n	8002990 <StartRfpTask+0x18>
 80029a4:	20003da4 	.word	0x20003da4
 80029a8:	20003d20 	.word	0x20003d20

080029ac <StartMeasurmentTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasurmentTask */
void StartMeasurmentTask(void *argument)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMeasurmentTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <StartMeasurmentTask+0x48>)
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	f04f 33ff 	mov.w	r3, #4294967295
 80029bc:	2202      	movs	r2, #2
 80029be:	2102      	movs	r1, #2
 80029c0:	f00a fa06 	bl	800cdd0 <osEventFlagsWait>
   uint32_t Time   = 10000;
 80029c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80029c8:	60fb      	str	r3, [r7, #12]
   uint8_t Command = RFP_START_MEASURMENT;
 80029ca:	2302      	movs	r3, #2
 80029cc:	72fb      	strb	r3, [r7, #11]
   /* Infinite loop */
   for(;;)
   {
      RFP_SendData(RFP_ODWS, RFP_COMMAND, &Command, 1);
 80029ce:	f107 020b 	add.w	r2, r7, #11
 80029d2:	2301      	movs	r3, #1
 80029d4:	2101      	movs	r1, #1
 80029d6:	2002      	movs	r0, #2
 80029d8:	f002 f9d0 	bl	8004d7c <RFP_SendData>
      osEventFlagsWait(C3V1FlagsHandle, SEND_MEASURMENT_COMMAND_FLAG, osFlagsWaitAny, osWaitForever);
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <StartMeasurmentTask+0x48>)
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	f04f 33ff 	mov.w	r3, #4294967295
 80029e4:	2200      	movs	r2, #0
 80029e6:	2101      	movs	r1, #1
 80029e8:	f00a f9f2 	bl	800cdd0 <osEventFlagsWait>
      osDelay(Time);
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f00a f951 	bl	800cc94 <osDelay>
      RFP_SendData(RFP_ODWS, RFP_COMMAND, &Command, 1);
 80029f2:	e7ec      	b.n	80029ce <StartMeasurmentTask+0x22>
 80029f4:	20003da4 	.word	0x20003da4

080029f8 <StartInternalMeasurmentTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInternalMeasurmentTask */
void StartInternalMeasurmentTask(void *argument)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08e      	sub	sp, #56	; 0x38
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartInternalMeasurmentTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8002a00:	4b2c      	ldr	r3, [pc, #176]	; (8002ab4 <StartInternalMeasurmentTask+0xbc>)
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
 8002a08:	2202      	movs	r2, #2
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	f00a f9e0 	bl	800cdd0 <osEventFlagsWait>
   MV_TypeDef _Mv = { 0 };
 8002a10:	f107 0308 	add.w	r3, r7, #8
 8002a14:	2230      	movs	r2, #48	; 0x30
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f00d ff77 	bl	801090c <memset>
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8002a1e:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <StartInternalMeasurmentTask+0xc0>)
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	f107 0108 	add.w	r1, r7, #8
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f00a fc18 	bl	800d260 <osMessageQueueGet>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002a30:	4b22      	ldr	r3, [pc, #136]	; (8002abc <StartInternalMeasurmentTask+0xc4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f04f 31ff 	mov.w	r1, #4294967295
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f00a fab5 	bl	800cfa8 <osMutexAcquire>
      osMutexAcquire(BME280MutexHandle, osWaitForever);
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <StartInternalMeasurmentTask+0xc8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f04f 31ff 	mov.w	r1, #4294967295
 8002a46:	4618      	mov	r0, r3
 8002a48:	f00a faae 	bl	800cfa8 <osMutexAcquire>
      BME280_ReadAll(&Bme, &_Mv.InternalTemperature, &_Mv.Pressure, &_Mv.InternalHumidity);
 8002a4c:	f107 0308 	add.w	r3, r7, #8
 8002a50:	f103 000c 	add.w	r0, r3, #12
 8002a54:	f107 0308 	add.w	r3, r7, #8
 8002a58:	f103 0210 	add.w	r2, r3, #16
 8002a5c:	f107 0308 	add.w	r3, r7, #8
 8002a60:	f103 0108 	add.w	r1, r3, #8
 8002a64:	4603      	mov	r3, r0
 8002a66:	4817      	ldr	r0, [pc, #92]	; (8002ac4 <StartInternalMeasurmentTask+0xcc>)
 8002a68:	f7ff fa1e 	bl	8001ea8 <BME280_ReadAll>
      osMutexRelease(BME280MutexHandle);
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <StartInternalMeasurmentTask+0xc8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f00a fae4 	bl	800d03e <osMutexRelease>
      osMutexRelease(SPI1MutexHandle);
 8002a76:	4b11      	ldr	r3, [pc, #68]	; (8002abc <StartInternalMeasurmentTask+0xc4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f00a fadf 	bl	800d03e <osMutexRelease>
      osEventFlagsSet(C3V1FlagsHandle, SEND_MEASURMENT_COMMAND_FLAG);
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <StartInternalMeasurmentTask+0xbc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2101      	movs	r1, #1
 8002a86:	4618      	mov	r0, r3
 8002a88:	f00a f95e 	bl	800cd48 <osEventFlagsSet>
      osMessageQueuePut(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <StartInternalMeasurmentTask+0xc0>)
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	f107 0108 	add.w	r1, r7, #8
 8002a94:	f04f 33ff 	mov.w	r3, #4294967295
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f00a fb81 	bl	800d1a0 <osMessageQueuePut>
      osEventFlagsSet(C3V1FlagsHandle, E_PAPIER_DRAWING_FLAG);
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <StartInternalMeasurmentTask+0xbc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f00a f94f 	bl	800cd48 <osEventFlagsSet>
      osDelay(1);
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f00a f8f2 	bl	800cc94 <osDelay>
      osMessageQueueGet(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8002ab0:	e7b5      	b.n	8002a1e <StartInternalMeasurmentTask+0x26>
 8002ab2:	bf00      	nop
 8002ab4:	20003da4 	.word	0x20003da4
 8002ab8:	20003d8c 	.word	0x20003d8c
 8002abc:	20003d98 	.word	0x20003d98
 8002ac0:	20003da0 	.word	0x20003da0
 8002ac4:	20003d3c 	.word	0x20003d3c

08002ac8 <StartMoonPhaseTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMoonPhaseTask */
void StartMoonPhaseTask(void *argument)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMoonPhaseTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <StartMoonPhaseTask+0x20>)
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad8:	2202      	movs	r2, #2
 8002ada:	2102      	movs	r1, #2
 8002adc:	f00a f978 	bl	800cdd0 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osDelay(1);
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f00a f8d7 	bl	800cc94 <osDelay>
 8002ae6:	e7fb      	b.n	8002ae0 <StartMoonPhaseTask+0x18>
 8002ae8:	20003da4 	.word	0x20003da4

08002aec <StartE_PapierDrawingTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartE_PapierDrawingTask */
void StartE_PapierDrawingTask(void *argument)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b0b0      	sub	sp, #192	; 0xc0
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartE_PapierDrawingTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8002af4:	4bb7      	ldr	r3, [pc, #732]	; (8002dd4 <StartE_PapierDrawingTask+0x2e8>)
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	f04f 33ff 	mov.w	r3, #4294967295
 8002afc:	2202      	movs	r2, #2
 8002afe:	2102      	movs	r1, #2
 8002b00:	f00a f966 	bl	800cdd0 <osEventFlagsWait>
   RTC_TimeTypeDef RtcTime;
   RTC_DateTypeDef RtcDate;
   MV_TypeDef _Mv = { 0 };
 8002b04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b08:	2230      	movs	r2, #48	; 0x30
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f00d fefd 	bl	801090c <memset>
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DRAWING_FLAG, osFlagsWaitAny, osWaitForever);
 8002b12:	4bb0      	ldr	r3, [pc, #704]	; (8002dd4 <StartE_PapierDrawingTask+0x2e8>)
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2104      	movs	r1, #4
 8002b1e:	f00a f957 	bl	800cdd0 <osEventFlagsWait>
      osMessageQueueGet(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8002b22:	4bad      	ldr	r3, [pc, #692]	; (8002dd8 <StartE_PapierDrawingTask+0x2ec>)
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f00a fb96 	bl	800d260 <osMessageQueueGet>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8002b34:	4ba9      	ldr	r3, [pc, #676]	; (8002ddc <StartE_PapierDrawingTask+0x2f0>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f04f 31ff 	mov.w	r1, #4294967295
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f00a fa33 	bl	800cfa8 <osMutexAcquire>
      taskENTER_CRITICAL();
 8002b42:	f00d fb9f 	bl	8010284 <vPortEnterCritical>
      char mes[100];
      sprintf(mes, "H %0.2f", _Mv.ExtHumidity);
 8002b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd fd15 	bl	8000578 <__aeabi_f2d>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	f107 000c 	add.w	r0, r7, #12
 8002b56:	49a2      	ldr	r1, [pc, #648]	; (8002de0 <StartE_PapierDrawingTask+0x2f4>)
 8002b58:	f002 f83a 	bl	8004bd0 <sprintf_>
      GFX_DrawString(0, 0, mes, BLACK, 1, E_PAPIER);
 8002b5c:	f107 020c 	add.w	r2, r7, #12
 8002b60:	2301      	movs	r3, #1
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	2301      	movs	r3, #1
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7fe fba1 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "T %0.2f", _Mv.ExtTemperature);
 8002b72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fcff 	bl	8000578 <__aeabi_f2d>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	f107 000c 	add.w	r0, r7, #12
 8002b82:	4998      	ldr	r1, [pc, #608]	; (8002de4 <StartE_PapierDrawingTask+0x2f8>)
 8002b84:	f002 f824 	bl	8004bd0 <sprintf_>
      GFX_DrawString(0, 10, mes, BLACK, 1, E_PAPIER);
 8002b88:	f107 020c 	add.w	r2, r7, #12
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	2301      	movs	r3, #1
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	210a      	movs	r1, #10
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f7fe fb8b 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "PM1 %d", _Mv.ExtPM1);
 8002b9e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f107 030c 	add.w	r3, r7, #12
 8002ba8:	498f      	ldr	r1, [pc, #572]	; (8002de8 <StartE_PapierDrawingTask+0x2fc>)
 8002baa:	4618      	mov	r0, r3
 8002bac:	f002 f810 	bl	8004bd0 <sprintf_>
      GFX_DrawString(0, 20, mes, BLACK, 1, E_PAPIER);
 8002bb0:	f107 020c 	add.w	r2, r7, #12
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	9301      	str	r3, [sp, #4]
 8002bb8:	2301      	movs	r3, #1
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2114      	movs	r1, #20
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7fe fb77 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "PM10 %d", _Mv.ExtPM10);
 8002bc6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f107 030c 	add.w	r3, r7, #12
 8002bd0:	4986      	ldr	r1, [pc, #536]	; (8002dec <StartE_PapierDrawingTask+0x300>)
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 fffc 	bl	8004bd0 <sprintf_>
      GFX_DrawString(0, 30, mes, BLACK, 1, E_PAPIER);
 8002bd8:	f107 020c 	add.w	r2, r7, #12
 8002bdc:	2301      	movs	r3, #1
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	2301      	movs	r3, #1
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2300      	movs	r3, #0
 8002be6:	211e      	movs	r1, #30
 8002be8:	2000      	movs	r0, #0
 8002bea:	f7fe fb63 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "PM2,5 %d", _Mv.ExtPM25);
 8002bee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f107 030c 	add.w	r3, r7, #12
 8002bf8:	497d      	ldr	r1, [pc, #500]	; (8002df0 <StartE_PapierDrawingTask+0x304>)
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 ffe8 	bl	8004bd0 <sprintf_>
      GFX_DrawString(0, 40, mes, BLACK, 1, E_PAPIER);
 8002c00:	f107 020c 	add.w	r2, r7, #12
 8002c04:	2301      	movs	r3, #1
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	2301      	movs	r3, #1
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2128      	movs	r1, #40	; 0x28
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7fe fb4f 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "Battery Level %0.2f", _Mv.BatteryVoltage);
 8002c16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fcac 	bl	8000578 <__aeabi_f2d>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	f107 000c 	add.w	r0, r7, #12
 8002c28:	4972      	ldr	r1, [pc, #456]	; (8002df4 <StartE_PapierDrawingTask+0x308>)
 8002c2a:	f001 ffd1 	bl	8004bd0 <sprintf_>
      GFX_DrawString(0, 50, mes, BLACK, 1, E_PAPIER);
 8002c2e:	f107 020c 	add.w	r2, r7, #12
 8002c32:	2301      	movs	r3, #1
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	2301      	movs	r3, #1
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2132      	movs	r1, #50	; 0x32
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f7fe fb38 	bl	80012b4 <GFX_DrawString>
      if(!(_Mv.BatteryState & 0x01))
 8002c44:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <StartE_PapierDrawingTask+0x17a>
      {
         GFX_DrawString(0, 60, "Battery Charging", BLACK, 1, E_PAPIER);
 8002c50:	2301      	movs	r3, #1
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	2301      	movs	r3, #1
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	4a67      	ldr	r2, [pc, #412]	; (8002df8 <StartE_PapierDrawingTask+0x30c>)
 8002c5c:	213c      	movs	r1, #60	; 0x3c
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7fe fb28 	bl	80012b4 <GFX_DrawString>
 8002c64:	e009      	b.n	8002c7a <StartE_PapierDrawingTask+0x18e>
      }
      else
      {
         GFX_DrawString(0, 60, "Battery No Charging", BLACK, 1, E_PAPIER);
 8002c66:	2301      	movs	r3, #1
 8002c68:	9301      	str	r3, [sp, #4]
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	4a62      	ldr	r2, [pc, #392]	; (8002dfc <StartE_PapierDrawingTask+0x310>)
 8002c72:	213c      	movs	r1, #60	; 0x3c
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fe fb1d 	bl	80012b4 <GFX_DrawString>
      }
      if(!(_Mv.BatteryState & 0x02))
 8002c7a:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <StartE_PapierDrawingTask+0x1b0>
      {
         GFX_DrawString(0, 70, "Battery Standby", BLACK, 1, E_PAPIER);
 8002c86:	2301      	movs	r3, #1
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	4a5b      	ldr	r2, [pc, #364]	; (8002e00 <StartE_PapierDrawingTask+0x314>)
 8002c92:	2146      	movs	r1, #70	; 0x46
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fe fb0d 	bl	80012b4 <GFX_DrawString>
 8002c9a:	e009      	b.n	8002cb0 <StartE_PapierDrawingTask+0x1c4>
      }
      else
      {
         GFX_DrawString(0, 70, "Battery No Standby", BLACK, 1, E_PAPIER);
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	4a57      	ldr	r2, [pc, #348]	; (8002e04 <StartE_PapierDrawingTask+0x318>)
 8002ca8:	2146      	movs	r1, #70	; 0x46
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7fe fb02 	bl	80012b4 <GFX_DrawString>
      }
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8002cb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4853      	ldr	r0, [pc, #332]	; (8002e08 <StartE_PapierDrawingTask+0x31c>)
 8002cba:	f005 ffdf 	bl	8008c7c <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8002cbe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4850      	ldr	r0, [pc, #320]	; (8002e08 <StartE_PapierDrawingTask+0x31c>)
 8002cc8:	f006 f83a 	bl	8008d40 <HAL_RTC_GetDate>
      sprintf(mes, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8002ccc:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8002cdc:	f107 000c 	add.w	r0, r7, #12
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4949      	ldr	r1, [pc, #292]	; (8002e0c <StartE_PapierDrawingTask+0x320>)
 8002ce6:	f001 ff73 	bl	8004bd0 <sprintf_>
      GFX_DrawString(0, 80, mes, BLACK, 1, E_PAPIER);
 8002cea:	f107 020c 	add.w	r2, r7, #12
 8002cee:	2301      	movs	r3, #1
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2150      	movs	r1, #80	; 0x50
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f7fe fada 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%d : %d ; 2022", RtcDate.Date, RtcDate.Month);
 8002d00:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8002d04:	461a      	mov	r2, r3
 8002d06:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8002d0a:	f107 000c 	add.w	r0, r7, #12
 8002d0e:	4940      	ldr	r1, [pc, #256]	; (8002e10 <StartE_PapierDrawingTask+0x324>)
 8002d10:	f001 ff5e 	bl	8004bd0 <sprintf_>
      GFX_DrawString(0, 90, mes, BLACK, 1, E_PAPIER);
 8002d14:	f107 020c 	add.w	r2, r7, #12
 8002d18:	2301      	movs	r3, #1
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2300      	movs	r3, #0
 8002d22:	215a      	movs	r1, #90	; 0x5a
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7fe fac5 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%Internal Temperature: %0.2f", _Mv.InternalTemperature);
 8002d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd fc23 	bl	8000578 <__aeabi_f2d>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	f107 000c 	add.w	r0, r7, #12
 8002d3a:	4936      	ldr	r1, [pc, #216]	; (8002e14 <StartE_PapierDrawingTask+0x328>)
 8002d3c:	f001 ff48 	bl	8004bd0 <sprintf_>
      GFX_DrawString(0, 210, mes, BLACK, 1, E_PAPIER);
 8002d40:	f107 020c 	add.w	r2, r7, #12
 8002d44:	2301      	movs	r3, #1
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	2301      	movs	r3, #1
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	21d2      	movs	r1, #210	; 0xd2
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7fe faaf 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%Internal Humidity: %0.2f", _Mv.InternalHumidity);
 8002d56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd fc0d 	bl	8000578 <__aeabi_f2d>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	f107 000c 	add.w	r0, r7, #12
 8002d66:	492c      	ldr	r1, [pc, #176]	; (8002e18 <StartE_PapierDrawingTask+0x32c>)
 8002d68:	f001 ff32 	bl	8004bd0 <sprintf_>
      GFX_DrawString(0, 200, mes, BLACK, 1, E_PAPIER);
 8002d6c:	f107 020c 	add.w	r2, r7, #12
 8002d70:	2301      	movs	r3, #1
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	2301      	movs	r3, #1
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	21c8      	movs	r1, #200	; 0xc8
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fe fa99 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%Pressure: %0.2f", _Mv.Pressure);
 8002d82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fbf6 	bl	8000578 <__aeabi_f2d>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	f107 000c 	add.w	r0, r7, #12
 8002d94:	4921      	ldr	r1, [pc, #132]	; (8002e1c <StartE_PapierDrawingTask+0x330>)
 8002d96:	f001 ff1b 	bl	8004bd0 <sprintf_>
      GFX_DrawString(0, 220, mes, BLACK, 1, E_PAPIER);
 8002d9a:	f107 020c 	add.w	r2, r7, #12
 8002d9e:	2301      	movs	r3, #1
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	2301      	movs	r3, #1
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2300      	movs	r3, #0
 8002da8:	21dc      	movs	r1, #220	; 0xdc
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7fe fa82 	bl	80012b4 <GFX_DrawString>
      taskEXIT_CRITICAL();
 8002db0:	f00d fa98 	bl	80102e4 <vPortExitCritical>
      osMutexRelease(E_PAPIERMutexHandle);
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <StartE_PapierDrawingTask+0x2f0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f00a f940 	bl	800d03e <osMutexRelease>
      osEventFlagsSet(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG);
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <StartE_PapierDrawingTask+0x2e8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2108      	movs	r1, #8
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f009 ffbf 	bl	800cd48 <osEventFlagsSet>
      osDelay(1);
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f009 ff62 	bl	800cc94 <osDelay>
   {
 8002dd0:	e69f      	b.n	8002b12 <StartE_PapierDrawingTask+0x26>
 8002dd2:	bf00      	nop
 8002dd4:	20003da4 	.word	0x20003da4
 8002dd8:	20003d8c 	.word	0x20003d8c
 8002ddc:	20003d9c 	.word	0x20003d9c
 8002de0:	08015308 	.word	0x08015308
 8002de4:	08015310 	.word	0x08015310
 8002de8:	08015318 	.word	0x08015318
 8002dec:	08015320 	.word	0x08015320
 8002df0:	08015328 	.word	0x08015328
 8002df4:	08015334 	.word	0x08015334
 8002df8:	08015348 	.word	0x08015348
 8002dfc:	0801535c 	.word	0x0801535c
 8002e00:	08015370 	.word	0x08015370
 8002e04:	08015380 	.word	0x08015380
 8002e08:	20003ec8 	.word	0x20003ec8
 8002e0c:	080152e0 	.word	0x080152e0
 8002e10:	080152f0 	.word	0x080152f0
 8002e14:	08015394 	.word	0x08015394
 8002e18:	080153b4 	.word	0x080153b4
 8002e1c:	080153d0 	.word	0x080153d0

08002e20 <StartE_PapierDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartE_PapierDisplayTask */
void StartE_PapierDisplayTask(void *argument)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartE_PapierDisplayTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <StartE_PapierDisplayTask+0x80>)
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e30:	2202      	movs	r2, #2
 8002e32:	2102      	movs	r1, #2
 8002e34:	f009 ffcc 	bl	800cdd0 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG, osFlagsWaitAny, osWaitForever);
 8002e38:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <StartE_PapierDisplayTask+0x80>)
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e40:	2200      	movs	r2, #0
 8002e42:	2108      	movs	r1, #8
 8002e44:	f009 ffc4 	bl	800cdd0 <osEventFlagsWait>
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002e48:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <StartE_PapierDisplayTask+0x84>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e50:	4618      	mov	r0, r3
 8002e52:	f00a f8a9 	bl	800cfa8 <osMutexAcquire>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <StartE_PapierDisplayTask+0x88>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f00a f8a2 	bl	800cfa8 <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <StartE_PapierDisplayTask+0x8c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f00a f89b 	bl	800cfa8 <osMutexAcquire>
      e_papier_display();
 8002e72:	f7ff fb29 	bl	80024c8 <e_papier_display>
      e_papier_clear();
 8002e76:	f7ff fb79 	bl	800256c <e_papier_clear>
      osMutexRelease(SPI1MutexHandle);
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <StartE_PapierDisplayTask+0x8c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f00a f8dd 	bl	800d03e <osMutexRelease>
      osMutexRelease(E_PAPIERMutexHandle);
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <StartE_PapierDisplayTask+0x88>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f00a f8d8 	bl	800d03e <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <StartE_PapierDisplayTask+0x84>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f00a f8d3 	bl	800d03e <osMutexRelease>
      osDelay(1);
 8002e98:	2001      	movs	r0, #1
 8002e9a:	f009 fefb 	bl	800cc94 <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG, osFlagsWaitAny, osWaitForever);
 8002e9e:	e7cb      	b.n	8002e38 <StartE_PapierDisplayTask+0x18>
 8002ea0:	20003da4 	.word	0x20003da4
 8002ea4:	20003d90 	.word	0x20003d90
 8002ea8:	20003d9c 	.word	0x20003d9c
 8002eac:	20003d98 	.word	0x20003d98

08002eb0 <RFP_DataFunction>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void RFP_DataFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b092      	sub	sp, #72	; 0x48
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
   uint8_t *TempPtr;
   MV_TypeDef Mv = { 0 };
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	2230      	movs	r2, #48	; 0x30
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f00d fd21 	bl	801090c <memset>
   TempPtr       = &Mv.ExtHumidity;
 8002eca:	f107 0314 	add.w	r3, r7, #20
 8002ece:	3304      	adds	r3, #4
 8002ed0:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr      = Data[DataStart];
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002edc:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 1];
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	781a      	ldrb	r2, [r3, #0]
 8002eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef0:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 2];
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3302      	adds	r3, #2
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4413      	add	r3, r2
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f04:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f08:	3301      	adds	r3, #1
 8002f0a:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 3];
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3303      	adds	r3, #3
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4413      	add	r3, r2
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f18:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	647b      	str	r3, [r7, #68]	; 0x44
   TempPtr  = &Mv.ExtTemperature;
 8002f20:	f107 0314 	add.w	r3, r7, #20
 8002f24:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 5];
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3305      	adds	r3, #5
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	781a      	ldrb	r2, [r3, #0]
 8002f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f32:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f36:	3301      	adds	r3, #1
 8002f38:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 6];
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3306      	adds	r3, #6
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4413      	add	r3, r2
 8002f42:	781a      	ldrb	r2, [r3, #0]
 8002f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f46:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 7];
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3307      	adds	r3, #7
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4413      	add	r3, r2
 8002f56:	781a      	ldrb	r2, [r3, #0]
 8002f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5a:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5e:	3301      	adds	r3, #1
 8002f60:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 8];
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3308      	adds	r3, #8
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4413      	add	r3, r2
 8002f6a:	781a      	ldrb	r2, [r3, #0]
 8002f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6e:	701a      	strb	r2, [r3, #0]
   TempPtr  = &Mv.BatteryVoltage;
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	3328      	adds	r3, #40	; 0x28
 8002f76:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 13];
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	330d      	adds	r3, #13
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	781a      	ldrb	r2, [r3, #0]
 8002f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f84:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f88:	3301      	adds	r3, #1
 8002f8a:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 14];
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	330e      	adds	r3, #14
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	781a      	ldrb	r2, [r3, #0]
 8002f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f98:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 15];
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	330f      	adds	r3, #15
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fac:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr        = Data[DataStart + 16];
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3310      	adds	r3, #16
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	781a      	ldrb	r2, [r3, #0]
 8002fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc0:	701a      	strb	r2, [r3, #0]
   TempPtr         = NULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	647b      	str	r3, [r7, #68]	; 0x44
   Mv.ExtPM1       = (Data[22 + 3] | (Data[21 + 3] << 8));
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3319      	adds	r3, #25
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	b21a      	sxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3318      	adds	r3, #24
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	b21b      	sxth	r3, r3
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	b21b      	sxth	r3, r3
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	853b      	strh	r3, [r7, #40]	; 0x28
   Mv.ExtPM25      = (Data[28 + 3] | (Data[27 + 3] << 8));
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	331f      	adds	r3, #31
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	b21a      	sxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	331e      	adds	r3, #30
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	b21b      	sxth	r3, r3
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	b21b      	sxth	r3, r3
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	857b      	strh	r3, [r7, #42]	; 0x2a
   Mv.ExtPM10      = (Data[25 + 3] | (Data[24 + 3] << 8));
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	331c      	adds	r3, #28
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	b21a      	sxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	331b      	adds	r3, #27
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	b21b      	sxth	r3, r3
 800300c:	4313      	orrs	r3, r2
 800300e:	b21b      	sxth	r3, r3
 8003010:	b29b      	uxth	r3, r3
 8003012:	85bb      	strh	r3, [r7, #44]	; 0x2c
   Mv.BatteryState = Data[DataStart + 18];
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3312      	adds	r3, #18
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   osMessageQueuePut(MeasurmentQueueHandle, &Mv, 0, osWaitForever);
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <RFP_DataFunction+0x18c>)
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	f107 0114 	add.w	r1, r7, #20
 800302a:	f04f 33ff 	mov.w	r3, #4294967295
 800302e:	2200      	movs	r2, #0
 8003030:	f00a f8b6 	bl	800d1a0 <osMessageQueuePut>
}
 8003034:	bf00      	nop
 8003036:	3748      	adds	r7, #72	; 0x48
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20003d8c 	.word	0x20003d8c

08003040 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	807b      	strh	r3, [r7, #2]
   if(huart->Instance == USART1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a05      	ldr	r2, [pc, #20]	; (8003068 <HAL_UARTEx_RxEventCallback+0x28>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d104      	bne.n	8003060 <HAL_UARTEx_RxEventCallback+0x20>
   {
      Rfp.DataSize = Size;
 8003056:	887b      	ldrh	r3, [r7, #2]
 8003058:	4a04      	ldr	r2, [pc, #16]	; (800306c <HAL_UARTEx_RxEventCallback+0x2c>)
 800305a:	6093      	str	r3, [r2, #8]
      RFP_InterruptTask();
 800305c:	f001 fe80 	bl	8004d60 <RFP_InterruptTask>
   }
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40013800 	.word	0x40013800
 800306c:	20003d20 	.word	0x20003d20

08003070 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003076:	f107 030c 	add.w	r3, r7, #12
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	609a      	str	r2, [r3, #8]
 8003082:	60da      	str	r2, [r3, #12]
 8003084:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003086:	4b45      	ldr	r3, [pc, #276]	; (800319c <MX_GPIO_Init+0x12c>)
 8003088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308a:	4a44      	ldr	r2, [pc, #272]	; (800319c <MX_GPIO_Init+0x12c>)
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003092:	4b42      	ldr	r3, [pc, #264]	; (800319c <MX_GPIO_Init+0x12c>)
 8003094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800309e:	4b3f      	ldr	r3, [pc, #252]	; (800319c <MX_GPIO_Init+0x12c>)
 80030a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a2:	4a3e      	ldr	r2, [pc, #248]	; (800319c <MX_GPIO_Init+0x12c>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030aa:	4b3c      	ldr	r3, [pc, #240]	; (800319c <MX_GPIO_Init+0x12c>)
 80030ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	4b39      	ldr	r3, [pc, #228]	; (800319c <MX_GPIO_Init+0x12c>)
 80030b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ba:	4a38      	ldr	r2, [pc, #224]	; (800319c <MX_GPIO_Init+0x12c>)
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030c2:	4b36      	ldr	r3, [pc, #216]	; (800319c <MX_GPIO_Init+0x12c>)
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD1306_CS_GPIO_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 80030ce:	2201      	movs	r2, #1
 80030d0:	2110      	movs	r1, #16
 80030d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d6:	f003 fe21 	bl	8006d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 80030da:	2201      	movs	r2, #1
 80030dc:	f640 71c3 	movw	r1, #4035	; 0xfc3
 80030e0:	482f      	ldr	r0, [pc, #188]	; (80031a0 <MX_GPIO_Init+0x130>)
 80030e2:	f003 fe1b 	bl	8006d1c <HAL_GPIO_WritePin>
                          |FRAM_CS_Pin|FRAM_WP_Pin|FRAM_HOLD_Pin|FLASH_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEARTBEAT_Pin|BME280_CS_Pin, GPIO_PIN_RESET);
 80030e6:	2200      	movs	r2, #0
 80030e8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80030ec:	482c      	ldr	r0, [pc, #176]	; (80031a0 <MX_GPIO_Init+0x130>)
 80030ee:	f003 fe15 	bl	8006d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, GPIO_PIN_RESET);
 80030f2:	2200      	movs	r2, #0
 80030f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030fc:	f003 fe0e 	bl	8006d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1306_CS_Pin;
 8003100:	2310      	movs	r3, #16
 8003102:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003104:	2301      	movs	r3, #1
 8003106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310c:	2303      	movs	r3, #3
 800310e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1306_CS_GPIO_Port, &GPIO_InitStruct);
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	4619      	mov	r1, r3
 8003116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800311a:	f003 fc55 	bl	80069c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 800311e:	f641 73c3 	movw	r3, #8131	; 0x1fc3
 8003122:	60fb      	str	r3, [r7, #12]
                          |HEARTBEAT_Pin|FRAM_CS_Pin|FRAM_WP_Pin|FRAM_HOLD_Pin
                          |FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003124:	2301      	movs	r3, #1
 8003126:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312c:	2303      	movs	r3, #3
 800312e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003130:	f107 030c 	add.w	r3, r7, #12
 8003134:	4619      	mov	r1, r3
 8003136:	481a      	ldr	r0, [pc, #104]	; (80031a0 <MX_GPIO_Init+0x130>)
 8003138:	f003 fc46 	bl	80069c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EPAPIER_BUSY_Pin|ENCODER_SWITCH_Pin;
 800313c:	f244 0304 	movw	r3, #16388	; 0x4004
 8003140:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314a:	f107 030c 	add.w	r3, r7, #12
 800314e:	4619      	mov	r1, r3
 8003150:	4813      	ldr	r0, [pc, #76]	; (80031a0 <MX_GPIO_Init+0x130>)
 8003152:	f003 fc39 	bl	80069c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BME280_CS_Pin;
 8003156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800315a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800315c:	2301      	movs	r3, #1
 800315e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003164:	2300      	movs	r3, #0
 8003166:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BME280_CS_GPIO_Port, &GPIO_InitStruct);
 8003168:	f107 030c 	add.w	r3, r7, #12
 800316c:	4619      	mov	r1, r3
 800316e:	480c      	ldr	r0, [pc, #48]	; (80031a0 <MX_GPIO_Init+0x130>)
 8003170:	f003 fc2a 	bl	80069c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HC12_SET_Pin;
 8003174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003178:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800317a:	2301      	movs	r3, #1
 800317c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HC12_SET_GPIO_Port, &GPIO_InitStruct);
 8003186:	f107 030c 	add.w	r3, r7, #12
 800318a:	4619      	mov	r1, r3
 800318c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003190:	f003 fc1a 	bl	80069c8 <HAL_GPIO_Init>

}
 8003194:	bf00      	nop
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	48000400 	.word	0x48000400

080031a4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <MX_IWDG_Init+0x34>)
 80031aa:	4a0c      	ldr	r2, [pc, #48]	; (80031dc <MX_IWDG_Init+0x38>)
 80031ac:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <MX_IWDG_Init+0x34>)
 80031b0:	2206      	movs	r2, #6
 80031b2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <MX_IWDG_Init+0x34>)
 80031b6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80031ba:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <MX_IWDG_Init+0x34>)
 80031be:	f640 72ff 	movw	r2, #4095	; 0xfff
 80031c2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80031c4:	4804      	ldr	r0, [pc, #16]	; (80031d8 <MX_IWDG_Init+0x34>)
 80031c6:	f003 fddb 	bl	8006d80 <HAL_IWDG_Init>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80031d0:	f000 f8b6 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80031d4:	bf00      	nop
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20003da8 	.word	0x20003da8
 80031dc:	40003000 	.word	0x40003000

080031e0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
   /* USER CODE END 1 */

   /* MCU Configuration--------------------------------------------------------*/

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80031e4:	f002 ff67 	bl	80060b6 <HAL_Init>
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */

   /* Configure the system clock */
   SystemClock_Config();
 80031e8:	f000 f820 	bl	800322c <SystemClock_Config>
   /* USER CODE BEGIN SysInit */

   /* USER CODE END SysInit */

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 80031ec:	f7ff ff40 	bl	8003070 <MX_GPIO_Init>
   MX_DMA_Init();
 80031f0:	f7fe fff6 	bl	80021e0 <MX_DMA_Init>
   MX_RTC_Init();
 80031f4:	f002 f8c2 	bl	800537c <MX_RTC_Init>
   MX_RNG_Init();
 80031f8:	f002 f876 	bl	80052e8 <MX_RNG_Init>
   MX_SPI1_Init();
 80031fc:	f002 f934 	bl	8005468 <MX_SPI1_Init>
   MX_USART1_UART_Init();
 8003200:	f002 fe56 	bl	8005eb0 <MX_USART1_UART_Init>
   MX_SPI3_Init();
 8003204:	f002 f96e 	bl	80054e4 <MX_SPI3_Init>
   MX_TIM2_Init();
 8003208:	f002 fcf0 	bl	8005bec <MX_TIM2_Init>
   MX_TIM5_Init();
 800320c:	f002 fd64 	bl	8005cd8 <MX_TIM5_Init>
   MX_IWDG_Init();
 8003210:	f7ff ffc8 	bl	80031a4 <MX_IWDG_Init>

   /* Initialize interrupts */
   MX_NVIC_Init();
 8003214:	f000 f86e 	bl	80032f4 <MX_NVIC_Init>
   /* USER CODE BEGIN 2 */

   /* USER CODE END 2 */

   /* Init scheduler */
   osKernelInitialize(); /* Call init function for freertos objects (in freertos.c) */
 8003218:	f009 fc60 	bl	800cadc <osKernelInitialize>
   MX_FREERTOS_Init();
 800321c:	f7ff fa12 	bl	8002644 <MX_FREERTOS_Init>

   /* Start scheduler */
   osKernelStart();
 8003220:	f009 fc80 	bl	800cb24 <osKernelStart>

   /* We should never get here as control is now taken by the scheduler */
   /* Infinite loop */
   /* USER CODE BEGIN WHILE */
   HAL_NVIC_SystemReset();
 8003224:	f003 f89d 	bl	8006362 <HAL_NVIC_SystemReset>
   while(1)
 8003228:	e7fe      	b.n	8003228 <main+0x48>
	...

0800322c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b098      	sub	sp, #96	; 0x60
 8003230:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003232:	f107 0318 	add.w	r3, r7, #24
 8003236:	2248      	movs	r2, #72	; 0x48
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f00d fb66 	bl	801090c <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	60da      	str	r2, [r3, #12]
 800324c:	611a      	str	r2, [r3, #16]

   /** Configure the main internal regulator output voltage
    */
   if(HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800324e:	2000      	movs	r0, #0
 8003250:	f003 fe26 	bl	8006ea0 <HAL_PWREx_ControlVoltageScaling>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <SystemClock_Config+0x32>
   {
      Error_Handler();
 800325a:	f000 f871 	bl	8003340 <Error_Handler>
   }

   /** Configure LSE Drive Capability
    */
   HAL_PWR_EnableBkUpAccess();
 800325e:	f003 fdef 	bl	8006e40 <HAL_PWR_EnableBkUpAccess>
   __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003262:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <SystemClock_Config+0xc4>)
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003268:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <SystemClock_Config+0xc4>)
 800326a:	f023 0318 	bic.w	r3, r3, #24
 800326e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

   /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
   RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8003272:	233c      	movs	r3, #60	; 0x3c
 8003274:	61bb      	str	r3, [r7, #24]
   RCC_OscInitStruct.LSEState            = RCC_LSE_ON;
 8003276:	2301      	movs	r3, #1
 8003278:	623b      	str	r3, [r7, #32]
   RCC_OscInitStruct.HSI48State          = RCC_HSI48_ON;
 800327a:	2301      	movs	r3, #1
 800327c:	643b      	str	r3, [r7, #64]	; 0x40
   RCC_OscInitStruct.LSIState            = RCC_LSI_ON;
 800327e:	2301      	movs	r3, #1
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
   RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8003282:	2301      	movs	r3, #1
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
   RCC_OscInitStruct.MSICalibrationValue = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	63bb      	str	r3, [r7, #56]	; 0x38
   RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_6;
 800328a:	2360      	movs	r3, #96	; 0x60
 800328c:	63fb      	str	r3, [r7, #60]	; 0x3c
   RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800328e:	2302      	movs	r3, #2
 8003290:	647b      	str	r3, [r7, #68]	; 0x44
   RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 8003292:	2301      	movs	r3, #1
 8003294:	64bb      	str	r3, [r7, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLM            = 1;
 8003296:	2301      	movs	r3, #1
 8003298:	64fb      	str	r3, [r7, #76]	; 0x4c
   RCC_OscInitStruct.PLL.PLLN            = 60;
 800329a:	233c      	movs	r3, #60	; 0x3c
 800329c:	653b      	str	r3, [r7, #80]	; 0x50
   RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;
 800329e:	2302      	movs	r3, #2
 80032a0:	657b      	str	r3, [r7, #84]	; 0x54
   RCC_OscInitStruct.PLL.PLLQ            = RCC_PLLQ_DIV2;
 80032a2:	2302      	movs	r3, #2
 80032a4:	65bb      	str	r3, [r7, #88]	; 0x58
   RCC_OscInitStruct.PLL.PLLR            = RCC_PLLR_DIV2;
 80032a6:	2302      	movs	r3, #2
 80032a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032aa:	f107 0318 	add.w	r3, r7, #24
 80032ae:	4618      	mov	r0, r3
 80032b0:	f003 fe9a 	bl	8006fe8 <HAL_RCC_OscConfig>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <SystemClock_Config+0x92>
   {
      Error_Handler();
 80032ba:	f000 f841 	bl	8003340 <Error_Handler>
   }

   /** Initializes the CPU, AHB and APB buses clocks
    */
   RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032be:	230f      	movs	r3, #15
 80032c0:	607b      	str	r3, [r7, #4]
   RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80032c2:	2303      	movs	r3, #3
 80032c4:	60bb      	str	r3, [r7, #8]
   RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]

   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	2105      	movs	r1, #5
 80032d6:	4618      	mov	r0, r3
 80032d8:	f004 fb02 	bl	80078e0 <HAL_RCC_ClockConfig>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <SystemClock_Config+0xba>
   {
      Error_Handler();
 80032e2:	f000 f82d 	bl	8003340 <Error_Handler>
   }
}
 80032e6:	bf00      	nop
 80032e8:	3760      	adds	r7, #96	; 0x60
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000

080032f4 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
   /* DMA1_Channel1_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80032f8:	2200      	movs	r2, #0
 80032fa:	2105      	movs	r1, #5
 80032fc:	200b      	movs	r0, #11
 80032fe:	f003 f806 	bl	800630e <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003302:	200b      	movs	r0, #11
 8003304:	f003 f81f 	bl	8006346 <HAL_NVIC_EnableIRQ>
   /* USART1_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003308:	2200      	movs	r2, #0
 800330a:	2105      	movs	r1, #5
 800330c:	2025      	movs	r0, #37	; 0x25
 800330e:	f002 fffe 	bl	800630e <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003312:	2025      	movs	r0, #37	; 0x25
 8003314:	f003 f817 	bl	8006346 <HAL_NVIC_EnableIRQ>
}
 8003318:	bf00      	nop
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN Callback 0 */

   /* USER CODE END Callback 0 */
   if(htim->Instance == TIM17)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d101      	bne.n	8003332 <HAL_TIM_PeriodElapsedCallback+0x16>
   {
      HAL_IncTick();
 800332e:	f002 fedb 	bl	80060e8 <HAL_IncTick>
   }
   /* USER CODE BEGIN Callback 1 */

   /* USER CODE END Callback 1 */
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40014800 	.word	0x40014800

08003340 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003344:	b672      	cpsid	i
}
 8003346:	bf00      	nop
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 8003348:	e7fe      	b.n	8003348 <Error_Handler+0x8>

0800334a <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	4603      	mov	r3, r0
 8003358:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d204      	bcs.n	800336c <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	701a      	strb	r2, [r3, #0]
  }
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	4603      	mov	r3, r0
 8003386:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	e002      	b.n	80033aa <_strnlen_s+0x16>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3301      	adds	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <_strnlen_s+0x28>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	1e5a      	subs	r2, r3, #1
 80033b6:	603a      	str	r2, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f3      	bne.n	80033a4 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	1ad3      	subs	r3, r2, r3
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	2b2f      	cmp	r3, #47	; 0x2f
 80033dc:	d904      	bls.n	80033e8 <_is_digit+0x1a>
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	2b39      	cmp	r3, #57	; 0x39
 80033e2:	d801      	bhi.n	80033e8 <_is_digit+0x1a>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <_is_digit+0x1c>
 80033e8:	2300      	movs	r3, #0
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	b2db      	uxtb	r3, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003408:	e00e      	b.n	8003428 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4618      	mov	r0, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	1c59      	adds	r1, r3, #1
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6011      	str	r1, [r2, #0]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	4403      	add	r3, r0
 8003424:	3b30      	subs	r3, #48	; 0x30
 8003426:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ffcd 	bl	80033ce <_is_digit>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e7      	bne.n	800340a <_atoi+0xe>
  }
  return i;
 800343a:	68fb      	ldr	r3, [r7, #12]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d125      	bne.n	80034ac <_out_rev+0x68>
 8003460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d120      	bne.n	80034ac <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	e00a      	b.n	8003486 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	1c53      	adds	r3, r2, #1
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	68fc      	ldr	r4, [r7, #12]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	2020      	movs	r0, #32
 800347e:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	3301      	adds	r3, #1
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	429a      	cmp	r2, r3
 800348c:	d3f0      	bcc.n	8003470 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800348e:	e00d      	b.n	80034ac <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8003490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003492:	3b01      	subs	r3, #1
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349a:	4413      	add	r3, r2
 800349c:	7818      	ldrb	r0, [r3, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	1c53      	adds	r3, r2, #1
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	68fc      	ldr	r4, [r7, #12]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	47a0      	blx	r4
  while (len) {
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1ee      	bne.n	8003490 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80034b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00e      	beq.n	80034da <_out_rev+0x96>
    while (idx - start_idx < width) {
 80034bc:	e007      	b.n	80034ce <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	1c53      	adds	r3, r2, #1
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	68fc      	ldr	r4, [r7, #12]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	2020      	movs	r0, #32
 80034cc:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d8f1      	bhi.n	80034be <_out_rev+0x7a>
    }
  }

  return idx;
 80034da:	687b      	ldr	r3, [r7, #4]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd90      	pop	{r4, r7, pc}

080034e4 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af04      	add	r7, sp, #16
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d136      	bne.n	800356a <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80034fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d018      	beq.n	8003534 <_ntoa_format+0x50>
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d013      	beq.n	8003534 <_ntoa_format+0x50>
 800350c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <_ntoa_format+0x3a>
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <_ntoa_format+0x50>
      width--;
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	3b01      	subs	r3, #1
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003524:	e006      	b.n	8003534 <_ntoa_format+0x50>
      buf[len++] = '0';
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	61fa      	str	r2, [r7, #28]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4413      	add	r3, r2
 8003530:	2230      	movs	r2, #48	; 0x30
 8003532:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	429a      	cmp	r2, r3
 800353a:	d20a      	bcs.n	8003552 <_ntoa_format+0x6e>
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2b1f      	cmp	r3, #31
 8003540:	d9f1      	bls.n	8003526 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003542:	e006      	b.n	8003552 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	61fa      	str	r2, [r7, #28]
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4413      	add	r3, r2
 800354e:	2230      	movs	r2, #48	; 0x30
 8003550:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d006      	beq.n	800356a <_ntoa_format+0x86>
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	429a      	cmp	r2, r3
 8003562:	d202      	bcs.n	800356a <_ntoa_format+0x86>
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	2b1f      	cmp	r3, #31
 8003568:	d9ec      	bls.n	8003544 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	d058      	beq.n	8003626 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357a:	2b00      	cmp	r3, #0
 800357c:	d116      	bne.n	80035ac <_ntoa_format+0xc8>
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d013      	beq.n	80035ac <_ntoa_format+0xc8>
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	429a      	cmp	r2, r3
 800358a:	d003      	beq.n	8003594 <_ntoa_format+0xb0>
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	429a      	cmp	r2, r3
 8003592:	d10b      	bne.n	80035ac <_ntoa_format+0xc8>
      len--;
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	3b01      	subs	r3, #1
 8003598:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <_ntoa_format+0xc8>
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d102      	bne.n	80035ac <_ntoa_format+0xc8>
        len--;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d10f      	bne.n	80035d2 <_ntoa_format+0xee>
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <_ntoa_format+0xee>
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	2b1f      	cmp	r3, #31
 80035c0:	d807      	bhi.n	80035d2 <_ntoa_format+0xee>
      buf[len++] = 'x';
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	61fa      	str	r2, [r7, #28]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4413      	add	r3, r2
 80035cc:	2278      	movs	r2, #120	; 0x78
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	e01f      	b.n	8003612 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d10f      	bne.n	80035f8 <_ntoa_format+0x114>
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <_ntoa_format+0x114>
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	2b1f      	cmp	r3, #31
 80035e6:	d807      	bhi.n	80035f8 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	61fa      	str	r2, [r7, #28]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4413      	add	r3, r2
 80035f2:	2258      	movs	r2, #88	; 0x58
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	e00c      	b.n	8003612 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d109      	bne.n	8003612 <_ntoa_format+0x12e>
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	2b1f      	cmp	r3, #31
 8003602:	d806      	bhi.n	8003612 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	61fa      	str	r2, [r7, #28]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4413      	add	r3, r2
 800360e:	2262      	movs	r2, #98	; 0x62
 8003610:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b1f      	cmp	r3, #31
 8003616:	d806      	bhi.n	8003626 <_ntoa_format+0x142>
      buf[len++] = '0';
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	61fa      	str	r2, [r7, #28]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4413      	add	r3, r2
 8003622:	2230      	movs	r2, #48	; 0x30
 8003624:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	2b1f      	cmp	r3, #31
 800362a:	d824      	bhi.n	8003676 <_ntoa_format+0x192>
    if (negative) {
 800362c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <_ntoa_format+0x160>
      buf[len++] = '-';
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	61fa      	str	r2, [r7, #28]
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4413      	add	r3, r2
 800363e:	222d      	movs	r2, #45	; 0x2d
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e018      	b.n	8003676 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	61fa      	str	r2, [r7, #28]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4413      	add	r3, r2
 8003658:	222b      	movs	r2, #43	; 0x2b
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	e00b      	b.n	8003676 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d006      	beq.n	8003676 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	61fa      	str	r2, [r7, #28]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4413      	add	r3, r2
 8003672:	2220      	movs	r2, #32
 8003674:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	9303      	str	r3, [sp, #12]
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367c:	9302      	str	r3, [sp, #8]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7ff fed9 	bl	8003444 <_out_rev>
 8003692:	4603      	mov	r3, r0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b096      	sub	sp, #88	; 0x58
 80036a0:	af08      	add	r7, sp, #32
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80036ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d103      	bne.n	80036bc <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80036b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b6:	f023 0310 	bic.w	r3, r3, #16
 80036ba:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80036bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <_ntoa_long+0x30>
 80036c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d032      	beq.n	8003732 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 80036cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80036d4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80036d6:	fb01 f202 	mul.w	r2, r1, r2
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80036e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036e4:	2b09      	cmp	r3, #9
 80036e6:	d804      	bhi.n	80036f2 <_ntoa_long+0x56>
 80036e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036ec:	3330      	adds	r3, #48	; 0x30
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	e00d      	b.n	800370e <_ntoa_long+0x72>
 80036f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <_ntoa_long+0x64>
 80036fc:	2241      	movs	r2, #65	; 0x41
 80036fe:	e000      	b.n	8003702 <_ntoa_long+0x66>
 8003700:	2261      	movs	r2, #97	; 0x61
 8003702:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003706:	4413      	add	r3, r2
 8003708:	b2db      	uxtb	r3, r3
 800370a:	3b0a      	subs	r3, #10
 800370c:	b2da      	uxtb	r2, r3
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	1c59      	adds	r1, r3, #1
 8003712:	6379      	str	r1, [r7, #52]	; 0x34
 8003714:	3338      	adds	r3, #56	; 0x38
 8003716:	443b      	add	r3, r7
 8003718:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800371c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800371e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <_ntoa_long+0x96>
 800372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372e:	2b1f      	cmp	r3, #31
 8003730:	d9cc      	bls.n	80036cc <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003734:	9306      	str	r3, [sp, #24]
 8003736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003738:	9305      	str	r3, [sp, #20]
 800373a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800373c:	9304      	str	r3, [sp, #16]
 800373e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003740:	9303      	str	r3, [sp, #12]
 8003742:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003746:	9302      	str	r3, [sp, #8]
 8003748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	f107 0310 	add.w	r3, r7, #16
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7ff fec3 	bl	80034e4 <_ntoa_format>
 800375e:	4603      	mov	r3, r0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3738      	adds	r7, #56	; 0x38
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b096      	sub	sp, #88	; 0x58
 800376c:	af08      	add	r7, sp, #32
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800377a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800377e:	4313      	orrs	r3, r2
 8003780:	d103      	bne.n	800378a <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8003782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003784:	f023 0310 	bic.w	r3, r3, #16
 8003788:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800378a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <_ntoa_long_long+0x34>
 8003794:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003798:	4313      	orrs	r3, r2
 800379a:	d037      	beq.n	800380c <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 800379c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80037a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037a4:	f7fd fad8 	bl	8000d58 <__aeabi_uldivmod>
 80037a8:	4613      	mov	r3, r2
 80037aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80037ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037b2:	2b09      	cmp	r3, #9
 80037b4:	d804      	bhi.n	80037c0 <_ntoa_long_long+0x58>
 80037b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037ba:	3330      	adds	r3, #48	; 0x30
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	e00d      	b.n	80037dc <_ntoa_long_long+0x74>
 80037c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <_ntoa_long_long+0x66>
 80037ca:	2241      	movs	r2, #65	; 0x41
 80037cc:	e000      	b.n	80037d0 <_ntoa_long_long+0x68>
 80037ce:	2261      	movs	r2, #97	; 0x61
 80037d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037d4:	4413      	add	r3, r2
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	3b0a      	subs	r3, #10
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037de:	1c59      	adds	r1, r3, #1
 80037e0:	6379      	str	r1, [r7, #52]	; 0x34
 80037e2:	3338      	adds	r3, #56	; 0x38
 80037e4:	443b      	add	r3, r7
 80037e6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80037ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80037f2:	f7fd fab1 	bl	8000d58 <__aeabi_uldivmod>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80037fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003802:	4313      	orrs	r3, r2
 8003804:	d002      	beq.n	800380c <_ntoa_long_long+0xa4>
 8003806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003808:	2b1f      	cmp	r3, #31
 800380a:	d9c7      	bls.n	800379c <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800380c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800380e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003810:	9206      	str	r2, [sp, #24]
 8003812:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003814:	9205      	str	r2, [sp, #20]
 8003816:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003818:	9204      	str	r2, [sp, #16]
 800381a:	9303      	str	r3, [sp, #12]
 800381c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003820:	9302      	str	r3, [sp, #8]
 8003822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003824:	9301      	str	r3, [sp, #4]
 8003826:	f107 0310 	add.w	r3, r7, #16
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff fe56 	bl	80034e4 <_ntoa_format>
 8003838:	4603      	mov	r3, r0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3738      	adds	r7, #56	; 0x38
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	0000      	movs	r0, r0
 8003844:	0000      	movs	r0, r0
	...

08003848 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003848:	b590      	push	{r4, r7, lr}
 800384a:	b09d      	sub	sp, #116	; 0x74
 800384c:	af04      	add	r7, sp, #16
 800384e:	6178      	str	r0, [r7, #20]
 8003850:	6139      	str	r1, [r7, #16]
 8003852:	60fa      	str	r2, [r7, #12]
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800386a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800386e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003872:	f7fd f941 	bl	8000af8 <__aeabi_dcmpeq>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10f      	bne.n	800389c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800387c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800387e:	9303      	str	r3, [sp, #12]
 8003880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003882:	9302      	str	r3, [sp, #8]
 8003884:	2303      	movs	r3, #3
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	4ba7      	ldr	r3, [pc, #668]	; (8003b28 <_ftoa+0x2e0>)
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	6939      	ldr	r1, [r7, #16]
 8003892:	6978      	ldr	r0, [r7, #20]
 8003894:	f7ff fdd6 	bl	8003444 <_out_rev>
 8003898:	4603      	mov	r3, r0
 800389a:	e222      	b.n	8003ce2 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 800389c:	f04f 32ff 	mov.w	r2, #4294967295
 80038a0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80038a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038a8:	f7fd f930 	bl	8000b0c <__aeabi_dcmplt>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00f      	beq.n	80038d2 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80038b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038b4:	9303      	str	r3, [sp, #12]
 80038b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038b8:	9302      	str	r3, [sp, #8]
 80038ba:	2304      	movs	r3, #4
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	4b9b      	ldr	r3, [pc, #620]	; (8003b2c <_ftoa+0x2e4>)
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	6939      	ldr	r1, [r7, #16]
 80038c8:	6978      	ldr	r0, [r7, #20]
 80038ca:	f7ff fdbb 	bl	8003444 <_out_rev>
 80038ce:	4603      	mov	r3, r0
 80038d0:	e207      	b.n	8003ce2 <_ftoa+0x49a>
  if (value > DBL_MAX)
 80038d2:	f04f 32ff 	mov.w	r2, #4294967295
 80038d6:	4b96      	ldr	r3, [pc, #600]	; (8003b30 <_ftoa+0x2e8>)
 80038d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038dc:	f7fd f934 	bl	8000b48 <__aeabi_dcmpgt>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d01d      	beq.n	8003922 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80038e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <_ftoa+0xac>
 80038f0:	4b90      	ldr	r3, [pc, #576]	; (8003b34 <_ftoa+0x2ec>)
 80038f2:	e000      	b.n	80038f6 <_ftoa+0xae>
 80038f4:	4b90      	ldr	r3, [pc, #576]	; (8003b38 <_ftoa+0x2f0>)
 80038f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038f8:	f002 0204 	and.w	r2, r2, #4
 80038fc:	2a00      	cmp	r2, #0
 80038fe:	d001      	beq.n	8003904 <_ftoa+0xbc>
 8003900:	2204      	movs	r2, #4
 8003902:	e000      	b.n	8003906 <_ftoa+0xbe>
 8003904:	2203      	movs	r2, #3
 8003906:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003908:	9103      	str	r1, [sp, #12]
 800390a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800390c:	9102      	str	r1, [sp, #8]
 800390e:	9201      	str	r2, [sp, #4]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	6939      	ldr	r1, [r7, #16]
 8003918:	6978      	ldr	r0, [r7, #20]
 800391a:	f7ff fd93 	bl	8003444 <_out_rev>
 800391e:	4603      	mov	r3, r0
 8003920:	e1df      	b.n	8003ce2 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8003922:	a37d      	add	r3, pc, #500	; (adr r3, 8003b18 <_ftoa+0x2d0>)
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800392c:	f7fd f90c 	bl	8000b48 <__aeabi_dcmpgt>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <_ftoa+0x102>
 8003936:	a37a      	add	r3, pc, #488	; (adr r3, 8003b20 <_ftoa+0x2d8>)
 8003938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003940:	f7fd f8e4 	bl	8000b0c <__aeabi_dcmplt>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00f      	beq.n	800396a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800394a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800394c:	9302      	str	r3, [sp, #8]
 800394e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	ed97 0b00 	vldr	d0, [r7]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	6939      	ldr	r1, [r7, #16]
 8003960:	6978      	ldr	r0, [r7, #20]
 8003962:	f000 f9c9 	bl	8003cf8 <_etoa>
 8003966:	4603      	mov	r3, r0
 8003968:	e1bb      	b.n	8003ce2 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800396a:	2300      	movs	r3, #0
 800396c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800397c:	f7fd f8c6 	bl	8000b0c <__aeabi_dcmplt>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00e      	beq.n	80039a4 <_ftoa+0x15c>
    negative = true;
 8003986:	2301      	movs	r3, #1
 8003988:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800398c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003990:	f04f 0000 	mov.w	r0, #0
 8003994:	f04f 0100 	mov.w	r1, #0
 8003998:	f7fc fc8e 	bl	80002b8 <__aeabi_dsub>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80039a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10d      	bne.n	80039ca <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80039ae:	2306      	movs	r3, #6
 80039b0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80039b2:	e00a      	b.n	80039ca <_ftoa+0x182>
    buf[len++] = '0';
 80039b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80039ba:	3360      	adds	r3, #96	; 0x60
 80039bc:	443b      	add	r3, r7
 80039be:	2230      	movs	r2, #48	; 0x30
 80039c0:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80039c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039c6:	3b01      	subs	r3, #1
 80039c8:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80039ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039cc:	2b1f      	cmp	r3, #31
 80039ce:	d802      	bhi.n	80039d6 <_ftoa+0x18e>
 80039d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d2:	2b09      	cmp	r3, #9
 80039d4:	d8ee      	bhi.n	80039b4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 80039d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039da:	f7fd f8d5 	bl	8000b88 <__aeabi_d2iz>
 80039de:	4603      	mov	r3, r0
 80039e0:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80039e2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80039e4:	f7fc fdb6 	bl	8000554 <__aeabi_i2d>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039f0:	f7fc fc62 	bl	80002b8 <__aeabi_dsub>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4610      	mov	r0, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	4a4f      	ldr	r2, [pc, #316]	; (8003b3c <_ftoa+0x2f4>)
 80039fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f7fc fe0e 	bl	8000628 <__aeabi_dmul>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8003a14:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003a18:	f7fd f8de 	bl	8000bd8 <__aeabi_d2uiz>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8003a20:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003a22:	f7fc fd87 	bl	8000534 <__aeabi_ui2d>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003a2e:	f7fc fc43 	bl	80002b8 <__aeabi_dsub>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	4b40      	ldr	r3, [pc, #256]	; (8003b40 <_ftoa+0x2f8>)
 8003a40:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003a44:	f7fd f880 	bl	8000b48 <__aeabi_dcmpgt>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d016      	beq.n	8003a7c <_ftoa+0x234>
    ++frac;
 8003a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a50:	3301      	adds	r3, #1
 8003a52:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8003a54:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003a56:	f7fc fd6d 	bl	8000534 <__aeabi_ui2d>
 8003a5a:	4a38      	ldr	r2, [pc, #224]	; (8003b3c <_ftoa+0x2f4>)
 8003a5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	f7fd f865 	bl	8000b34 <__aeabi_dcmpge>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01a      	beq.n	8003aa6 <_ftoa+0x25e>
      frac = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8003a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a76:	3301      	adds	r3, #1
 8003a78:	657b      	str	r3, [r7, #84]	; 0x54
 8003a7a:	e014      	b.n	8003aa6 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	4b2f      	ldr	r3, [pc, #188]	; (8003b40 <_ftoa+0x2f8>)
 8003a82:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003a86:	f7fd f841 	bl	8000b0c <__aeabi_dcmplt>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d004      	beq.n	8003aa0 <_ftoa+0x258>
 8003a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8003aa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d14b      	bne.n	8003b44 <_ftoa+0x2fc>
    diff = value - (double)whole;
 8003aac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003aae:	f7fc fd51 	bl	8000554 <__aeabi_i2d>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003aba:	f7fc fbfd 	bl	80002b8 <__aeabi_dsub>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	461c      	mov	r4, r3
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <_ftoa+0x2f8>)
 8003ad0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003ad4:	f7fd f81a 	bl	8000b0c <__aeabi_dcmplt>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <_ftoa+0x29a>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	461c      	mov	r4, r3
 8003ae2:	b2e3      	uxtb	r3, r4
 8003ae4:	f083 0301 	eor.w	r3, r3, #1
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <_ftoa+0x2ba>
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <_ftoa+0x2f8>)
 8003af4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003af8:	f7fd f826 	bl	8000b48 <__aeabi_dcmpgt>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d064      	beq.n	8003bcc <_ftoa+0x384>
 8003b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8081 	beq.w	8003c10 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8003b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b10:	3301      	adds	r3, #1
 8003b12:	657b      	str	r3, [r7, #84]	; 0x54
 8003b14:	e07c      	b.n	8003c10 <_ftoa+0x3c8>
 8003b16:	bf00      	nop
 8003b18:	00000000 	.word	0x00000000
 8003b1c:	41cdcd65 	.word	0x41cdcd65
 8003b20:	00000000 	.word	0x00000000
 8003b24:	c1cdcd65 	.word	0xc1cdcd65
 8003b28:	080153e4 	.word	0x080153e4
 8003b2c:	080153e8 	.word	0x080153e8
 8003b30:	7fefffff 	.word	0x7fefffff
 8003b34:	080153f0 	.word	0x080153f0
 8003b38:	080153f8 	.word	0x080153f8
 8003b3c:	08015868 	.word	0x08015868
 8003b40:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8003b44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b46:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003b48:	e01f      	b.n	8003b8a <_ftoa+0x342>
      --count;
 8003b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8003b50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003b52:	4b66      	ldr	r3, [pc, #408]	; (8003cec <_ftoa+0x4a4>)
 8003b54:	fba3 2301 	umull	r2, r3, r3, r1
 8003b58:	08da      	lsrs	r2, r3, #3
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	1aca      	subs	r2, r1, r3
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b68:	1c59      	adds	r1, r3, #1
 8003b6a:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003b6c:	3230      	adds	r2, #48	; 0x30
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	3360      	adds	r3, #96	; 0x60
 8003b72:	443b      	add	r3, r7
 8003b74:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8003b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7a:	4a5c      	ldr	r2, [pc, #368]	; (8003cec <_ftoa+0x4a4>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	08db      	lsrs	r3, r3, #3
 8003b82:	653b      	str	r3, [r7, #80]	; 0x50
 8003b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b8c:	2b1f      	cmp	r3, #31
 8003b8e:	d9dc      	bls.n	8003b4a <_ftoa+0x302>
 8003b90:	e009      	b.n	8003ba6 <_ftoa+0x35e>
        break;
 8003b92:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003b94:	e007      	b.n	8003ba6 <_ftoa+0x35e>
      buf[len++] = '0';
 8003b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003b9c:	3360      	adds	r3, #96	; 0x60
 8003b9e:	443b      	add	r3, r7
 8003ba0:	2230      	movs	r2, #48	; 0x30
 8003ba2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba8:	2b1f      	cmp	r3, #31
 8003baa:	d804      	bhi.n	8003bb6 <_ftoa+0x36e>
 8003bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bae:	1e5a      	subs	r2, r3, #1
 8003bb0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1ef      	bne.n	8003b96 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb8:	2b1f      	cmp	r3, #31
 8003bba:	d829      	bhi.n	8003c10 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8003bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003bc2:	3360      	adds	r3, #96	; 0x60
 8003bc4:	443b      	add	r3, r7
 8003bc6:	222e      	movs	r2, #46	; 0x2e
 8003bc8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003bcc:	e020      	b.n	8003c10 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8003bce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bd0:	4b47      	ldr	r3, [pc, #284]	; (8003cf0 <_ftoa+0x4a8>)
 8003bd2:	fb83 1302 	smull	r1, r3, r3, r2
 8003bd6:	1099      	asrs	r1, r3, #2
 8003bd8:	17d3      	asrs	r3, r2, #31
 8003bda:	1ac9      	subs	r1, r1, r3
 8003bdc:	460b      	mov	r3, r1
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	1ad1      	subs	r1, r2, r3
 8003be6:	b2ca      	uxtb	r2, r1
 8003be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bea:	1c59      	adds	r1, r3, #1
 8003bec:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003bee:	3230      	adds	r2, #48	; 0x30
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	3360      	adds	r3, #96	; 0x60
 8003bf4:	443b      	add	r3, r7
 8003bf6:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8003bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bfc:	4a3c      	ldr	r2, [pc, #240]	; (8003cf0 <_ftoa+0x4a8>)
 8003bfe:	fb82 1203 	smull	r1, r2, r2, r3
 8003c02:	1092      	asrs	r2, r2, #2
 8003c04:	17db      	asrs	r3, r3, #31
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	657b      	str	r3, [r7, #84]	; 0x54
 8003c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c12:	2b1f      	cmp	r3, #31
 8003c14:	d9db      	bls.n	8003bce <_ftoa+0x386>
 8003c16:	e000      	b.n	8003c1a <_ftoa+0x3d2>
      break;
 8003c18:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d123      	bne.n	8003c6c <_ftoa+0x424>
 8003c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01e      	beq.n	8003c6c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d014      	beq.n	8003c5e <_ftoa+0x416>
 8003c34:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d104      	bne.n	8003c46 <_ftoa+0x3fe>
 8003c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <_ftoa+0x416>
      width--;
 8003c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003c4c:	e007      	b.n	8003c5e <_ftoa+0x416>
      buf[len++] = '0';
 8003c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c54:	3360      	adds	r3, #96	; 0x60
 8003c56:	443b      	add	r3, r7
 8003c58:	2230      	movs	r2, #48	; 0x30
 8003c5a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003c5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d202      	bcs.n	8003c6c <_ftoa+0x424>
 8003c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c68:	2b1f      	cmp	r3, #31
 8003c6a:	d9f0      	bls.n	8003c4e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c6e:	2b1f      	cmp	r3, #31
 8003c70:	d827      	bhi.n	8003cc2 <_ftoa+0x47a>
    if (negative) {
 8003c72:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d008      	beq.n	8003c8c <_ftoa+0x444>
      buf[len++] = '-';
 8003c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c80:	3360      	adds	r3, #96	; 0x60
 8003c82:	443b      	add	r3, r7
 8003c84:	222d      	movs	r2, #45	; 0x2d
 8003c86:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003c8a:	e01a      	b.n	8003cc2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8003c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c9c:	3360      	adds	r3, #96	; 0x60
 8003c9e:	443b      	add	r3, r7
 8003ca0:	222b      	movs	r2, #43	; 0x2b
 8003ca2:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003ca6:	e00c      	b.n	8003cc2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <_ftoa+0x47a>
      buf[len++] = ' ';
 8003cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003cb8:	3360      	adds	r3, #96	; 0x60
 8003cba:	443b      	add	r3, r7
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cc4:	9303      	str	r3, [sp, #12]
 8003cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cc8:	9302      	str	r3, [sp, #8]
 8003cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	f107 0318 	add.w	r3, r7, #24
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	6939      	ldr	r1, [r7, #16]
 8003cda:	6978      	ldr	r0, [r7, #20]
 8003cdc:	f7ff fbb2 	bl	8003444 <_out_rev>
 8003ce0:	4603      	mov	r3, r0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3764      	adds	r7, #100	; 0x64
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd90      	pop	{r4, r7, pc}
 8003cea:	bf00      	nop
 8003cec:	cccccccd 	.word	0xcccccccd
 8003cf0:	66666667 	.word	0x66666667
 8003cf4:	00000000 	.word	0x00000000

08003cf8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfc:	b09f      	sub	sp, #124	; 0x7c
 8003cfe:	af06      	add	r7, sp, #24
 8003d00:	6278      	str	r0, [r7, #36]	; 0x24
 8003d02:	6239      	str	r1, [r7, #32]
 8003d04:	61fa      	str	r2, [r7, #28]
 8003d06:	61bb      	str	r3, [r7, #24]
 8003d08:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003d0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d14:	f7fc fef0 	bl	8000af8 <__aeabi_dcmpeq>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d014      	beq.n	8003d48 <_etoa+0x50>
 8003d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d22:	4bc1      	ldr	r3, [pc, #772]	; (8004028 <_etoa+0x330>)
 8003d24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d28:	f7fc ff0e 	bl	8000b48 <__aeabi_dcmpgt>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <_etoa+0x50>
 8003d32:	f04f 32ff 	mov.w	r2, #4294967295
 8003d36:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003d3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d3e:	f7fc fee5 	bl	8000b0c <__aeabi_dcmplt>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d012      	beq.n	8003d6e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003d48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d4c:	9302      	str	r3, [sp, #8]
 8003d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d52:	9301      	str	r3, [sp, #4]
 8003d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	ed97 0b04 	vldr	d0, [r7, #16]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	6a39      	ldr	r1, [r7, #32]
 8003d64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d66:	f7ff fd6f 	bl	8003848 <_ftoa>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	e23f      	b.n	80041ee <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	461e      	mov	r6, r3
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d7e:	f7fc fec5 	bl	8000b0c <__aeabi_dcmplt>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <_etoa+0x94>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	461e      	mov	r6, r3
 8003d8c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8003d90:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <_etoa+0xb4>
    value = -value;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003da2:	607b      	str	r3, [r7, #4]
 8003da4:	ed97 7b00 	vldr	d7, [r7]
 8003da8:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003dac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003db8:	2306      	movs	r3, #6
 8003dba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003dbe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003dc2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003dc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	0d0a      	lsrs	r2, r1, #20
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ddc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003de0:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003de6:	4690      	mov	r8, r2
 8003de8:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003dec:	4644      	mov	r4, r8
 8003dee:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003df2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003df6:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003dfa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003dfc:	f7fc fbaa 	bl	8000554 <__aeabi_i2d>
 8003e00:	a37d      	add	r3, pc, #500	; (adr r3, 8003ff8 <_etoa+0x300>)
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	f7fc fc0f 	bl	8000628 <__aeabi_dmul>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4610      	mov	r0, r2
 8003e10:	4619      	mov	r1, r3
 8003e12:	a37b      	add	r3, pc, #492	; (adr r3, 8004000 <_etoa+0x308>)
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f7fc fa50 	bl	80002bc <__adddf3>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4614      	mov	r4, r2
 8003e22:	461d      	mov	r5, r3
 8003e24:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	4b7f      	ldr	r3, [pc, #508]	; (800402c <_etoa+0x334>)
 8003e2e:	f7fc fa43 	bl	80002b8 <__aeabi_dsub>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	a373      	add	r3, pc, #460	; (adr r3, 8004008 <_etoa+0x310>)
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f7fc fbf2 	bl	8000628 <__aeabi_dmul>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4620      	mov	r0, r4
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	f7fc fa36 	bl	80002bc <__adddf3>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4610      	mov	r0, r2
 8003e56:	4619      	mov	r1, r3
 8003e58:	f7fc fe96 	bl	8000b88 <__aeabi_d2iz>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003e60:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003e62:	f7fc fb77 	bl	8000554 <__aeabi_i2d>
 8003e66:	a36a      	add	r3, pc, #424	; (adr r3, 8004010 <_etoa+0x318>)
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f7fc fbdc 	bl	8000628 <__aeabi_dmul>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4610      	mov	r0, r2
 8003e76:	4619      	mov	r1, r3
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	4b6c      	ldr	r3, [pc, #432]	; (8004030 <_etoa+0x338>)
 8003e7e:	f7fc fa1d 	bl	80002bc <__adddf3>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4610      	mov	r0, r2
 8003e88:	4619      	mov	r1, r3
 8003e8a:	f7fc fe7d 	bl	8000b88 <__aeabi_d2iz>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003e92:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003e94:	f7fc fb5e 	bl	8000554 <__aeabi_i2d>
 8003e98:	a35f      	add	r3, pc, #380	; (adr r3, 8004018 <_etoa+0x320>)
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	f7fc fbc3 	bl	8000628 <__aeabi_dmul>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4614      	mov	r4, r2
 8003ea8:	461d      	mov	r5, r3
 8003eaa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003eac:	f7fc fb52 	bl	8000554 <__aeabi_i2d>
 8003eb0:	a35b      	add	r3, pc, #364	; (adr r3, 8004020 <_etoa+0x328>)
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f7fc fbb7 	bl	8000628 <__aeabi_dmul>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	f7fc f9f9 	bl	80002b8 <__aeabi_dsub>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8003ece:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ed2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003ed6:	f7fc fba7 	bl	8000628 <__aeabi_dmul>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003ee8:	17da      	asrs	r2, r3, #31
 8003eea:	469a      	mov	sl, r3
 8003eec:	4693      	mov	fp, r2
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8003efa:	2200      	movs	r2, #0
 8003efc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003f00:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003f04:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	f7fc f9d6 	bl	80002bc <__adddf3>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4690      	mov	r8, r2
 8003f16:	4699      	mov	r9, r3
 8003f18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f1c:	f04f 0000 	mov.w	r0, #0
 8003f20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003f24:	f7fc f9c8 	bl	80002b8 <__aeabi_dsub>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4692      	mov	sl, r2
 8003f2e:	469b      	mov	fp, r3
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	4b3f      	ldr	r3, [pc, #252]	; (8004034 <_etoa+0x33c>)
 8003f36:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003f3a:	f7fc fc9f 	bl	800087c <__aeabi_ddiv>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	4b3b      	ldr	r3, [pc, #236]	; (8004038 <_etoa+0x340>)
 8003f4c:	f7fc f9b6 	bl	80002bc <__adddf3>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003f58:	f7fc fc90 	bl	800087c <__aeabi_ddiv>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4610      	mov	r0, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	4b34      	ldr	r3, [pc, #208]	; (800403c <_etoa+0x344>)
 8003f6a:	f7fc f9a7 	bl	80002bc <__adddf3>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003f76:	f7fc fc81 	bl	800087c <__aeabi_ddiv>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4650      	mov	r0, sl
 8003f80:	4659      	mov	r1, fp
 8003f82:	f7fc f99b 	bl	80002bc <__adddf3>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4640      	mov	r0, r8
 8003f8c:	4649      	mov	r1, r9
 8003f8e:	f7fc fc75 	bl	800087c <__aeabi_ddiv>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	4b28      	ldr	r3, [pc, #160]	; (8004040 <_etoa+0x348>)
 8003fa0:	f7fc f98c 	bl	80002bc <__adddf3>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4620      	mov	r0, r4
 8003faa:	4629      	mov	r1, r5
 8003fac:	f7fc fb3c 	bl	8000628 <__aeabi_dmul>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8003fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fc0:	f7fc fda4 	bl	8000b0c <__aeabi_dcmplt>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00d      	beq.n	8003fe6 <_etoa+0x2ee>
    expval--;
 8003fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8003fd0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	4b17      	ldr	r3, [pc, #92]	; (8004038 <_etoa+0x340>)
 8003fda:	f7fc fc4f 	bl	800087c <__aeabi_ddiv>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe8:	2b63      	cmp	r3, #99	; 0x63
 8003fea:	dc2b      	bgt.n	8004044 <_etoa+0x34c>
 8003fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fee:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003ff2:	db27      	blt.n	8004044 <_etoa+0x34c>
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	e026      	b.n	8004046 <_etoa+0x34e>
 8003ff8:	509f79fb 	.word	0x509f79fb
 8003ffc:	3fd34413 	.word	0x3fd34413
 8004000:	8b60c8b3 	.word	0x8b60c8b3
 8004004:	3fc68a28 	.word	0x3fc68a28
 8004008:	636f4361 	.word	0x636f4361
 800400c:	3fd287a7 	.word	0x3fd287a7
 8004010:	0979a371 	.word	0x0979a371
 8004014:	400a934f 	.word	0x400a934f
 8004018:	bbb55516 	.word	0xbbb55516
 800401c:	40026bb1 	.word	0x40026bb1
 8004020:	fefa39ef 	.word	0xfefa39ef
 8004024:	3fe62e42 	.word	0x3fe62e42
 8004028:	7fefffff 	.word	0x7fefffff
 800402c:	3ff80000 	.word	0x3ff80000
 8004030:	3fe00000 	.word	0x3fe00000
 8004034:	402c0000 	.word	0x402c0000
 8004038:	40240000 	.word	0x40240000
 800403c:	40180000 	.word	0x40180000
 8004040:	3ff00000 	.word	0x3ff00000
 8004044:	2305      	movs	r3, #5
 8004046:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004048:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800404c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004050:	2b00      	cmp	r3, #0
 8004052:	d03d      	beq.n	80040d0 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8004054:	a368      	add	r3, pc, #416	; (adr r3, 80041f8 <_etoa+0x500>)
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800405e:	f7fc fd69 	bl	8000b34 <__aeabi_dcmpge>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d024      	beq.n	80040b2 <_etoa+0x3ba>
 8004068:	a365      	add	r3, pc, #404	; (adr r3, 8004200 <_etoa+0x508>)
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004072:	f7fc fd4b 	bl	8000b0c <__aeabi_dcmplt>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01a      	beq.n	80040b2 <_etoa+0x3ba>
      if ((int)prec > expval) {
 800407c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004080:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004082:	429a      	cmp	r2, r3
 8004084:	da07      	bge.n	8004096 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8004086:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800408a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004094:	e002      	b.n	800409c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800409c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040b0:	e00e      	b.n	80040d0 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80040b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <_etoa+0x3d8>
 80040ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d004      	beq.n	80040d0 <_etoa+0x3d8>
        --prec;
 80040c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040ca:	3b01      	subs	r3, #1
 80040cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80040d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 80040d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80040da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040dc:	429a      	cmp	r2, r3
 80040de:	d904      	bls.n	80040ea <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80040e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	657b      	str	r3, [r7, #84]	; 0x54
 80040e8:	e001      	b.n	80040ee <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80040ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d004      	beq.n	8004104 <_etoa+0x40c>
 80040fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8004104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <_etoa+0x426>
    value /= conv.F;
 800410a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800410e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004112:	f7fc fbb3 	bl	800087c <__aeabi_ddiv>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8004122:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004126:	2b00      	cmp	r3, #0
 8004128:	d006      	beq.n	8004138 <_etoa+0x440>
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	e003      	b.n	8004140 <_etoa+0x448>
 8004138:	ed97 7b04 	vldr	d7, [r7, #16]
 800413c:	ed87 7b02 	vstr	d7, [r7, #8]
 8004140:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004148:	9302      	str	r3, [sp, #8]
 800414a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	ed97 0b02 	vldr	d0, [r7, #8]
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	6a39      	ldr	r1, [r7, #32]
 800415e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004160:	f7ff fb72 	bl	8003848 <_ftoa>
 8004164:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8004166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004168:	2b00      	cmp	r3, #0
 800416a:	d03f      	beq.n	80041ec <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800416c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <_etoa+0x484>
 8004178:	2045      	movs	r0, #69	; 0x45
 800417a:	e000      	b.n	800417e <_etoa+0x486>
 800417c:	2065      	movs	r0, #101	; 0x65
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	1c53      	adds	r3, r2, #1
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	6a39      	ldr	r1, [r7, #32]
 800418a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800418c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800418e:	2b00      	cmp	r3, #0
 8004190:	bfb8      	it	lt
 8004192:	425b      	neglt	r3, r3
 8004194:	4618      	mov	r0, r3
 8004196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004198:	0fdb      	lsrs	r3, r3, #31
 800419a:	b2db      	uxtb	r3, r3
 800419c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800419e:	3a01      	subs	r2, #1
 80041a0:	2105      	movs	r1, #5
 80041a2:	9105      	str	r1, [sp, #20]
 80041a4:	9204      	str	r2, [sp, #16]
 80041a6:	2200      	movs	r2, #0
 80041a8:	9203      	str	r2, [sp, #12]
 80041aa:	220a      	movs	r2, #10
 80041ac:	9202      	str	r2, [sp, #8]
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	9000      	str	r0, [sp, #0]
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	6a39      	ldr	r1, [r7, #32]
 80041b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ba:	f7ff fa6f 	bl	800369c <_ntoa_long>
 80041be:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80041c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00f      	beq.n	80041ec <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80041cc:	e007      	b.n	80041de <_etoa+0x4e6>
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	1c53      	adds	r3, r2, #1
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	6a39      	ldr	r1, [r7, #32]
 80041da:	2020      	movs	r0, #32
 80041dc:	47a0      	blx	r4
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d8f0      	bhi.n	80041ce <_etoa+0x4d6>
    }
  }
  return idx;
 80041ec:	69fb      	ldr	r3, [r7, #28]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3764      	adds	r7, #100	; 0x64
 80041f2:	46bd      	mov	sp, r7
 80041f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f8:	eb1c432d 	.word	0xeb1c432d
 80041fc:	3f1a36e2 	.word	0x3f1a36e2
 8004200:	00000000 	.word	0x00000000
 8004204:	412e8480 	.word	0x412e8480

08004208 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420c:	b0a3      	sub	sp, #140	; 0x8c
 800420e:	af0a      	add	r7, sp, #40	; 0x28
 8004210:	6178      	str	r0, [r7, #20]
 8004212:	6139      	str	r1, [r7, #16]
 8004214:	60fa      	str	r2, [r7, #12]
 8004216:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f040 84be 	bne.w	8004ba0 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 8004224:	4ba3      	ldr	r3, [pc, #652]	; (80044b4 <_vsnprintf+0x2ac>)
 8004226:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8004228:	f000 bcba 	b.w	8004ba0 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b25      	cmp	r3, #37	; 0x25
 8004232:	d00d      	beq.n	8004250 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	7818      	ldrb	r0, [r3, #0]
 8004238:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800423a:	1c53      	adds	r3, r2, #1
 800423c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800423e:	697c      	ldr	r4, [r7, #20]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6939      	ldr	r1, [r7, #16]
 8004244:	47a0      	blx	r4
      format++;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	3301      	adds	r3, #1
 800424a:	60bb      	str	r3, [r7, #8]
      continue;
 800424c:	f000 bca8 	b.w	8004ba0 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	3301      	adds	r3, #1
 8004254:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	3b20      	subs	r3, #32
 8004260:	2b10      	cmp	r3, #16
 8004262:	d857      	bhi.n	8004314 <_vsnprintf+0x10c>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <_vsnprintf+0x64>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	080042ed 	.word	0x080042ed
 8004270:	08004315 	.word	0x08004315
 8004274:	08004315 	.word	0x08004315
 8004278:	08004301 	.word	0x08004301
 800427c:	08004315 	.word	0x08004315
 8004280:	08004315 	.word	0x08004315
 8004284:	08004315 	.word	0x08004315
 8004288:	08004315 	.word	0x08004315
 800428c:	08004315 	.word	0x08004315
 8004290:	08004315 	.word	0x08004315
 8004294:	08004315 	.word	0x08004315
 8004298:	080042d9 	.word	0x080042d9
 800429c:	08004315 	.word	0x08004315
 80042a0:	080042c5 	.word	0x080042c5
 80042a4:	08004315 	.word	0x08004315
 80042a8:	08004315 	.word	0x08004315
 80042ac:	080042b1 	.word	0x080042b1
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80042b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	3301      	adds	r3, #1
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	2301      	movs	r3, #1
 80042c0:	653b      	str	r3, [r7, #80]	; 0x50
 80042c2:	e02a      	b.n	800431a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80042c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c6:	f043 0302 	orr.w	r3, r3, #2
 80042ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	3301      	adds	r3, #1
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	2301      	movs	r3, #1
 80042d4:	653b      	str	r3, [r7, #80]	; 0x50
 80042d6:	e020      	b.n	800431a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80042d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042da:	f043 0304 	orr.w	r3, r3, #4
 80042de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	3301      	adds	r3, #1
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	2301      	movs	r3, #1
 80042e8:	653b      	str	r3, [r7, #80]	; 0x50
 80042ea:	e016      	b.n	800431a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80042ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ee:	f043 0308 	orr.w	r3, r3, #8
 80042f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	3301      	adds	r3, #1
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	2301      	movs	r3, #1
 80042fc:	653b      	str	r3, [r7, #80]	; 0x50
 80042fe:	e00c      	b.n	800431a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004302:	f043 0310 	orr.w	r3, r3, #16
 8004306:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	3301      	adds	r3, #1
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	2301      	movs	r3, #1
 8004310:	653b      	str	r3, [r7, #80]	; 0x50
 8004312:	e002      	b.n	800431a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8004314:	2300      	movs	r3, #0
 8004316:	653b      	str	r3, [r7, #80]	; 0x50
 8004318:	bf00      	nop
      }
    } while (n);
 800431a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800431c:	2b00      	cmp	r3, #0
 800431e:	d19c      	bne.n	800425a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff f850 	bl	80033ce <_is_digit>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d006      	beq.n	8004342 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8004334:	f107 0308 	add.w	r3, r7, #8
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff f85f 	bl	80033fc <_atoi>
 800433e:	65b8      	str	r0, [r7, #88]	; 0x58
 8004340:	e01a      	b.n	8004378 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b2a      	cmp	r3, #42	; 0x2a
 8004348:	d116      	bne.n	8004378 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800434a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800434e:	1d1a      	adds	r2, r3, #4
 8004350:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435a:	2b00      	cmp	r3, #0
 800435c:	da07      	bge.n	800436e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800435e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004360:	f043 0302 	orr.w	r3, r3, #2
 8004364:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8004366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004368:	425b      	negs	r3, r3
 800436a:	65bb      	str	r3, [r7, #88]	; 0x58
 800436c:	e001      	b.n	8004372 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 800436e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004370:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	3301      	adds	r3, #1
 8004376:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b2e      	cmp	r3, #46	; 0x2e
 8004382:	d127      	bne.n	80043d4 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8004384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800438a:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	3301      	adds	r3, #1
 8004390:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff f819 	bl	80033ce <_is_digit>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d006      	beq.n	80043b0 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 80043a2:	f107 0308 	add.w	r3, r7, #8
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff f828 	bl	80033fc <_atoi>
 80043ac:	6578      	str	r0, [r7, #84]	; 0x54
 80043ae:	e011      	b.n	80043d4 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b2a      	cmp	r3, #42	; 0x2a
 80043b6:	d10d      	bne.n	80043d4 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80043b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043bc:	1d1a      	adds	r2, r3, #4
 80043be:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80043c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80043cc:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	3301      	adds	r3, #1
 80043d2:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	3b68      	subs	r3, #104	; 0x68
 80043da:	2b12      	cmp	r3, #18
 80043dc:	d866      	bhi.n	80044ac <_vsnprintf+0x2a4>
 80043de:	a201      	add	r2, pc, #4	; (adr r2, 80043e4 <_vsnprintf+0x1dc>)
 80043e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e4:	08004457 	.word	0x08004457
 80043e8:	080044ad 	.word	0x080044ad
 80043ec:	0800448d 	.word	0x0800448d
 80043f0:	080044ad 	.word	0x080044ad
 80043f4:	08004431 	.word	0x08004431
 80043f8:	080044ad 	.word	0x080044ad
 80043fc:	080044ad 	.word	0x080044ad
 8004400:	080044ad 	.word	0x080044ad
 8004404:	080044ad 	.word	0x080044ad
 8004408:	080044ad 	.word	0x080044ad
 800440c:	080044ad 	.word	0x080044ad
 8004410:	080044ad 	.word	0x080044ad
 8004414:	0800447d 	.word	0x0800447d
 8004418:	080044ad 	.word	0x080044ad
 800441c:	080044ad 	.word	0x080044ad
 8004420:	080044ad 	.word	0x080044ad
 8004424:	080044ad 	.word	0x080044ad
 8004428:	080044ad 	.word	0x080044ad
 800442c:	0800449d 	.word	0x0800449d
      case 'l' :
        flags |= FLAGS_LONG;
 8004430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004436:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	3301      	adds	r3, #1
 800443c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b6c      	cmp	r3, #108	; 0x6c
 8004444:	d134      	bne.n	80044b0 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8004446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800444c:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	3301      	adds	r3, #1
 8004452:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004454:	e02c      	b.n	80044b0 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445c:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	3301      	adds	r3, #1
 8004462:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b68      	cmp	r3, #104	; 0x68
 800446a:	d125      	bne.n	80044b8 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 800446c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800446e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004472:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	3301      	adds	r3, #1
 8004478:	60bb      	str	r3, [r7, #8]
        }
        break;
 800447a:	e01d      	b.n	80044b8 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800447c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800447e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004482:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	3301      	adds	r3, #1
 8004488:	60bb      	str	r3, [r7, #8]
        break;
 800448a:	e016      	b.n	80044ba <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800448c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004492:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	3301      	adds	r3, #1
 8004498:	60bb      	str	r3, [r7, #8]
        break;
 800449a:	e00e      	b.n	80044ba <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800449c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800449e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	3301      	adds	r3, #1
 80044a8:	60bb      	str	r3, [r7, #8]
        break;
 80044aa:	e006      	b.n	80044ba <_vsnprintf+0x2b2>
      default :
        break;
 80044ac:	bf00      	nop
 80044ae:	e004      	b.n	80044ba <_vsnprintf+0x2b2>
        break;
 80044b0:	bf00      	nop
 80044b2:	e002      	b.n	80044ba <_vsnprintf+0x2b2>
 80044b4:	08003379 	.word	0x08003379
        break;
 80044b8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	3b25      	subs	r3, #37	; 0x25
 80044c0:	2b53      	cmp	r3, #83	; 0x53
 80044c2:	f200 8360 	bhi.w	8004b86 <_vsnprintf+0x97e>
 80044c6:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <_vsnprintf+0x2c4>)
 80044c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044cc:	08004b6f 	.word	0x08004b6f
 80044d0:	08004b87 	.word	0x08004b87
 80044d4:	08004b87 	.word	0x08004b87
 80044d8:	08004b87 	.word	0x08004b87
 80044dc:	08004b87 	.word	0x08004b87
 80044e0:	08004b87 	.word	0x08004b87
 80044e4:	08004b87 	.word	0x08004b87
 80044e8:	08004b87 	.word	0x08004b87
 80044ec:	08004b87 	.word	0x08004b87
 80044f0:	08004b87 	.word	0x08004b87
 80044f4:	08004b87 	.word	0x08004b87
 80044f8:	08004b87 	.word	0x08004b87
 80044fc:	08004b87 	.word	0x08004b87
 8004500:	08004b87 	.word	0x08004b87
 8004504:	08004b87 	.word	0x08004b87
 8004508:	08004b87 	.word	0x08004b87
 800450c:	08004b87 	.word	0x08004b87
 8004510:	08004b87 	.word	0x08004b87
 8004514:	08004b87 	.word	0x08004b87
 8004518:	08004b87 	.word	0x08004b87
 800451c:	08004b87 	.word	0x08004b87
 8004520:	08004b87 	.word	0x08004b87
 8004524:	08004b87 	.word	0x08004b87
 8004528:	08004b87 	.word	0x08004b87
 800452c:	08004b87 	.word	0x08004b87
 8004530:	08004b87 	.word	0x08004b87
 8004534:	08004b87 	.word	0x08004b87
 8004538:	08004b87 	.word	0x08004b87
 800453c:	08004b87 	.word	0x08004b87
 8004540:	08004b87 	.word	0x08004b87
 8004544:	08004b87 	.word	0x08004b87
 8004548:	08004b87 	.word	0x08004b87
 800454c:	08004923 	.word	0x08004923
 8004550:	080048d3 	.word	0x080048d3
 8004554:	08004923 	.word	0x08004923
 8004558:	08004b87 	.word	0x08004b87
 800455c:	08004b87 	.word	0x08004b87
 8004560:	08004b87 	.word	0x08004b87
 8004564:	08004b87 	.word	0x08004b87
 8004568:	08004b87 	.word	0x08004b87
 800456c:	08004b87 	.word	0x08004b87
 8004570:	08004b87 	.word	0x08004b87
 8004574:	08004b87 	.word	0x08004b87
 8004578:	08004b87 	.word	0x08004b87
 800457c:	08004b87 	.word	0x08004b87
 8004580:	08004b87 	.word	0x08004b87
 8004584:	08004b87 	.word	0x08004b87
 8004588:	08004b87 	.word	0x08004b87
 800458c:	08004b87 	.word	0x08004b87
 8004590:	08004b87 	.word	0x08004b87
 8004594:	08004b87 	.word	0x08004b87
 8004598:	0800461d 	.word	0x0800461d
 800459c:	08004b87 	.word	0x08004b87
 80045a0:	08004b87 	.word	0x08004b87
 80045a4:	08004b87 	.word	0x08004b87
 80045a8:	08004b87 	.word	0x08004b87
 80045ac:	08004b87 	.word	0x08004b87
 80045b0:	08004b87 	.word	0x08004b87
 80045b4:	08004b87 	.word	0x08004b87
 80045b8:	08004b87 	.word	0x08004b87
 80045bc:	08004b87 	.word	0x08004b87
 80045c0:	0800461d 	.word	0x0800461d
 80045c4:	08004993 	.word	0x08004993
 80045c8:	0800461d 	.word	0x0800461d
 80045cc:	08004923 	.word	0x08004923
 80045d0:	080048d3 	.word	0x080048d3
 80045d4:	08004923 	.word	0x08004923
 80045d8:	08004b87 	.word	0x08004b87
 80045dc:	0800461d 	.word	0x0800461d
 80045e0:	08004b87 	.word	0x08004b87
 80045e4:	08004b87 	.word	0x08004b87
 80045e8:	08004b87 	.word	0x08004b87
 80045ec:	08004b87 	.word	0x08004b87
 80045f0:	08004b87 	.word	0x08004b87
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	08004ad3 	.word	0x08004ad3
 80045fc:	08004b87 	.word	0x08004b87
 8004600:	08004b87 	.word	0x08004b87
 8004604:	08004a0b 	.word	0x08004a0b
 8004608:	08004b87 	.word	0x08004b87
 800460c:	0800461d 	.word	0x0800461d
 8004610:	08004b87 	.word	0x08004b87
 8004614:	08004b87 	.word	0x08004b87
 8004618:	0800461d 	.word	0x0800461d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b78      	cmp	r3, #120	; 0x78
 8004622:	d003      	beq.n	800462c <_vsnprintf+0x424>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b58      	cmp	r3, #88	; 0x58
 800462a:	d102      	bne.n	8004632 <_vsnprintf+0x42a>
          base = 16U;
 800462c:	2310      	movs	r3, #16
 800462e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004630:	e013      	b.n	800465a <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b6f      	cmp	r3, #111	; 0x6f
 8004638:	d102      	bne.n	8004640 <_vsnprintf+0x438>
          base =  8U;
 800463a:	2308      	movs	r3, #8
 800463c:	64bb      	str	r3, [r7, #72]	; 0x48
 800463e:	e00c      	b.n	800465a <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b62      	cmp	r3, #98	; 0x62
 8004646:	d102      	bne.n	800464e <_vsnprintf+0x446>
          base =  2U;
 8004648:	2302      	movs	r3, #2
 800464a:	64bb      	str	r3, [r7, #72]	; 0x48
 800464c:	e005      	b.n	800465a <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 800464e:	230a      	movs	r3, #10
 8004650:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8004652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004654:	f023 0310 	bic.w	r3, r3, #16
 8004658:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b58      	cmp	r3, #88	; 0x58
 8004660:	d103      	bne.n	800466a <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8004662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004664:	f043 0320 	orr.w	r3, r3, #32
 8004668:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b69      	cmp	r3, #105	; 0x69
 8004670:	d007      	beq.n	8004682 <_vsnprintf+0x47a>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b64      	cmp	r3, #100	; 0x64
 8004678:	d003      	beq.n	8004682 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800467a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800467c:	f023 030c 	bic.w	r3, r3, #12
 8004680:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8004682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 800468c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800468e:	f023 0301 	bic.w	r3, r3, #1
 8004692:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b69      	cmp	r3, #105	; 0x69
 800469a:	d004      	beq.n	80046a6 <_vsnprintf+0x49e>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b64      	cmp	r3, #100	; 0x64
 80046a2:	f040 8098 	bne.w	80047d6 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80046a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d031      	beq.n	8004714 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80046b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046b4:	3307      	adds	r3, #7
 80046b6:	f023 0307 	bic.w	r3, r3, #7
 80046ba:	f103 0208 	add.w	r2, r3, #8
 80046be:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80046ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	da06      	bge.n	80046e0 <_vsnprintf+0x4d8>
 80046d2:	2100      	movs	r1, #0
 80046d4:	f1d2 0800 	rsbs	r8, r2, #0
 80046d8:	eb61 0903 	sbc.w	r9, r1, r3
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	69f9      	ldr	r1, [r7, #28]
 80046e2:	0fc9      	lsrs	r1, r1, #31
 80046e4:	b2c9      	uxtb	r1, r1
 80046e6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80046e8:	2400      	movs	r4, #0
 80046ea:	4682      	mov	sl, r0
 80046ec:	46a3      	mov	fp, r4
 80046ee:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80046f0:	9008      	str	r0, [sp, #32]
 80046f2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80046f4:	9007      	str	r0, [sp, #28]
 80046f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80046f8:	9006      	str	r0, [sp, #24]
 80046fa:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80046fe:	9102      	str	r1, [sp, #8]
 8004700:	e9cd 2300 	strd	r2, r3, [sp]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004708:	6939      	ldr	r1, [r7, #16]
 800470a:	6978      	ldr	r0, [r7, #20]
 800470c:	f7ff f82c 	bl	8003768 <_ntoa_long_long>
 8004710:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004712:	e0da      	b.n	80048ca <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	2b00      	cmp	r3, #0
 800471c:	d020      	beq.n	8004760 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 800471e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004722:	1d1a      	adds	r2, r3, #4
 8004724:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	2b00      	cmp	r3, #0
 8004730:	bfb8      	it	lt
 8004732:	425b      	neglt	r3, r3
 8004734:	4619      	mov	r1, r3
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	0fdb      	lsrs	r3, r3, #31
 800473a:	b2db      	uxtb	r3, r3
 800473c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800473e:	9205      	str	r2, [sp, #20]
 8004740:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004742:	9204      	str	r2, [sp, #16]
 8004744:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004746:	9203      	str	r2, [sp, #12]
 8004748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800474a:	9202      	str	r2, [sp, #8]
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	9100      	str	r1, [sp, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004754:	6939      	ldr	r1, [r7, #16]
 8004756:	6978      	ldr	r0, [r7, #20]
 8004758:	f7fe ffa0 	bl	800369c <_ntoa_long>
 800475c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800475e:	e0b4      	b.n	80048ca <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d007      	beq.n	800477a <_vsnprintf+0x572>
 800476a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800476e:	1d1a      	adds	r2, r3, #4
 8004770:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	e012      	b.n	80047a0 <_vsnprintf+0x598>
 800477a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800477c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <_vsnprintf+0x58c>
 8004784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004788:	1d1a      	adds	r2, r3, #4
 800478a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	b21b      	sxth	r3, r3
 8004792:	e005      	b.n	80047a0 <_vsnprintf+0x598>
 8004794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004798:	1d1a      	adds	r2, r3, #4
 800479a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bfb8      	it	lt
 80047a8:	425b      	neglt	r3, r3
 80047aa:	4619      	mov	r1, r3
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	0fdb      	lsrs	r3, r3, #31
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047b4:	9205      	str	r2, [sp, #20]
 80047b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047b8:	9204      	str	r2, [sp, #16]
 80047ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047bc:	9203      	str	r2, [sp, #12]
 80047be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047c0:	9202      	str	r2, [sp, #8]
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	9100      	str	r1, [sp, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ca:	6939      	ldr	r1, [r7, #16]
 80047cc:	6978      	ldr	r0, [r7, #20]
 80047ce:	f7fe ff65 	bl	800369c <_ntoa_long>
 80047d2:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80047d4:	e079      	b.n	80048ca <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80047d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d022      	beq.n	8004826 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80047e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047e4:	3307      	adds	r3, #7
 80047e6:	f023 0307 	bic.w	r3, r3, #7
 80047ea:	f103 0208 	add.w	r2, r3, #8
 80047ee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80047f8:	2000      	movs	r0, #0
 80047fa:	460d      	mov	r5, r1
 80047fc:	4606      	mov	r6, r0
 80047fe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004800:	9108      	str	r1, [sp, #32]
 8004802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004804:	9107      	str	r1, [sp, #28]
 8004806:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004808:	9106      	str	r1, [sp, #24]
 800480a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800480e:	2100      	movs	r1, #0
 8004810:	9102      	str	r1, [sp, #8]
 8004812:	e9cd 2300 	strd	r2, r3, [sp]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800481a:	6939      	ldr	r1, [r7, #16]
 800481c:	6978      	ldr	r0, [r7, #20]
 800481e:	f7fe ffa3 	bl	8003768 <_ntoa_long_long>
 8004822:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004824:	e051      	b.n	80048ca <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482c:	2b00      	cmp	r3, #0
 800482e:	d018      	beq.n	8004862 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004830:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004834:	1d1a      	adds	r2, r3, #4
 8004836:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800483e:	9205      	str	r2, [sp, #20]
 8004840:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004842:	9204      	str	r2, [sp, #16]
 8004844:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004846:	9203      	str	r2, [sp, #12]
 8004848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800484a:	9202      	str	r2, [sp, #8]
 800484c:	2200      	movs	r2, #0
 800484e:	9201      	str	r2, [sp, #4]
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004856:	6939      	ldr	r1, [r7, #16]
 8004858:	6978      	ldr	r0, [r7, #20]
 800485a:	f7fe ff1f 	bl	800369c <_ntoa_long>
 800485e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004860:	e033      	b.n	80048ca <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <_vsnprintf+0x674>
 800486c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004870:	1d1a      	adds	r2, r3, #4
 8004872:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	e012      	b.n	80048a2 <_vsnprintf+0x69a>
 800487c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800487e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <_vsnprintf+0x68e>
 8004886:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800488a:	1d1a      	adds	r2, r3, #4
 800488c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	e005      	b.n	80048a2 <_vsnprintf+0x69a>
 8004896:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800489a:	1d1a      	adds	r2, r3, #4
 800489c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80048a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a6:	9305      	str	r3, [sp, #20]
 80048a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048aa:	9304      	str	r3, [sp, #16]
 80048ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ae:	9303      	str	r3, [sp, #12]
 80048b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b2:	9302      	str	r3, [sp, #8]
 80048b4:	2300      	movs	r3, #0
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048c0:	6939      	ldr	r1, [r7, #16]
 80048c2:	6978      	ldr	r0, [r7, #20]
 80048c4:	f7fe feea 	bl	800369c <_ntoa_long>
 80048c8:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60bb      	str	r3, [r7, #8]
        break;
 80048d0:	e166      	b.n	8004ba0 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b46      	cmp	r3, #70	; 0x46
 80048d8:	d103      	bne.n	80048e2 <_vsnprintf+0x6da>
 80048da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048dc:	f043 0320 	orr.w	r3, r3, #32
 80048e0:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80048e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048e6:	3307      	adds	r3, #7
 80048e8:	f023 0307 	bic.w	r3, r3, #7
 80048ec:	f103 0208 	add.w	r2, r3, #8
 80048f0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80048f4:	ed93 7b00 	vldr	d7, [r3]
 80048f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fa:	9302      	str	r3, [sp, #8]
 80048fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048fe:	9301      	str	r3, [sp, #4]
 8004900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	eeb0 0a47 	vmov.f32	s0, s14
 8004908:	eef0 0a67 	vmov.f32	s1, s15
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004910:	6939      	ldr	r1, [r7, #16]
 8004912:	6978      	ldr	r0, [r7, #20]
 8004914:	f7fe ff98 	bl	8003848 <_ftoa>
 8004918:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	3301      	adds	r3, #1
 800491e:	60bb      	str	r3, [r7, #8]
        break;
 8004920:	e13e      	b.n	8004ba0 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b67      	cmp	r3, #103	; 0x67
 8004928:	d003      	beq.n	8004932 <_vsnprintf+0x72a>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b47      	cmp	r3, #71	; 0x47
 8004930:	d103      	bne.n	800493a <_vsnprintf+0x732>
 8004932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004934:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004938:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b45      	cmp	r3, #69	; 0x45
 8004940:	d003      	beq.n	800494a <_vsnprintf+0x742>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b47      	cmp	r3, #71	; 0x47
 8004948:	d103      	bne.n	8004952 <_vsnprintf+0x74a>
 800494a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800494c:	f043 0320 	orr.w	r3, r3, #32
 8004950:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004956:	3307      	adds	r3, #7
 8004958:	f023 0307 	bic.w	r3, r3, #7
 800495c:	f103 0208 	add.w	r2, r3, #8
 8004960:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004964:	ed93 7b00 	vldr	d7, [r3]
 8004968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800496a:	9302      	str	r3, [sp, #8]
 800496c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800496e:	9301      	str	r3, [sp, #4]
 8004970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	eeb0 0a47 	vmov.f32	s0, s14
 8004978:	eef0 0a67 	vmov.f32	s1, s15
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004980:	6939      	ldr	r1, [r7, #16]
 8004982:	6978      	ldr	r0, [r7, #20]
 8004984:	f7ff f9b8 	bl	8003cf8 <_etoa>
 8004988:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	3301      	adds	r3, #1
 800498e:	60bb      	str	r3, [r7, #8]
        break;
 8004990:	e106      	b.n	8004ba0 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8004992:	2301      	movs	r3, #1
 8004994:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10e      	bne.n	80049be <_vsnprintf+0x7b6>
          while (l++ < width) {
 80049a0:	e007      	b.n	80049b2 <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 80049a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049a4:	1c53      	adds	r3, r2, #1
 80049a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a8:	697c      	ldr	r4, [r7, #20]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6939      	ldr	r1, [r7, #16]
 80049ae:	2020      	movs	r0, #32
 80049b0:	47a0      	blx	r4
          while (l++ < width) {
 80049b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	647a      	str	r2, [r7, #68]	; 0x44
 80049b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d8f1      	bhi.n	80049a2 <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80049be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049c2:	1d1a      	adds	r2, r3, #4
 80049c4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	b2d8      	uxtb	r0, r3
 80049cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049ce:	1c53      	adds	r3, r2, #1
 80049d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d2:	697c      	ldr	r4, [r7, #20]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6939      	ldr	r1, [r7, #16]
 80049d8:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80049da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00e      	beq.n	8004a02 <_vsnprintf+0x7fa>
          while (l++ < width) {
 80049e4:	e007      	b.n	80049f6 <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 80049e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049e8:	1c53      	adds	r3, r2, #1
 80049ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ec:	697c      	ldr	r4, [r7, #20]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6939      	ldr	r1, [r7, #16]
 80049f2:	2020      	movs	r0, #32
 80049f4:	47a0      	blx	r4
          while (l++ < width) {
 80049f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	647a      	str	r2, [r7, #68]	; 0x44
 80049fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d8f1      	bhi.n	80049e6 <_vsnprintf+0x7de>
          }
        }
        format++;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	3301      	adds	r3, #1
 8004a06:	60bb      	str	r3, [r7, #8]
        break;
 8004a08:	e0ca      	b.n	8004ba0 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8004a0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a0e:	1d1a      	adds	r2, r3, #4
 8004a10:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <_vsnprintf+0x81a>
 8004a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a20:	e001      	b.n	8004a26 <_vsnprintf+0x81e>
 8004a22:	f04f 33ff 	mov.w	r3, #4294967295
 8004a26:	4619      	mov	r1, r3
 8004a28:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004a2a:	f7fe fcb3 	bl	8003394 <_strnlen_s>
 8004a2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 8004a3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	bf28      	it	cs
 8004a42:	4613      	movcs	r3, r2
 8004a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8004a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d11a      	bne.n	8004a86 <_vsnprintf+0x87e>
          while (l++ < width) {
 8004a50:	e007      	b.n	8004a62 <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 8004a52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a54:	1c53      	adds	r3, r2, #1
 8004a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a58:	697c      	ldr	r4, [r7, #20]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6939      	ldr	r1, [r7, #16]
 8004a5e:	2020      	movs	r0, #32
 8004a60:	47a0      	blx	r4
          while (l++ < width) {
 8004a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d8f1      	bhi.n	8004a52 <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004a6e:	e00a      	b.n	8004a86 <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 8004a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	643a      	str	r2, [r7, #64]	; 0x40
 8004a76:	7818      	ldrb	r0, [r3, #0]
 8004a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a7a:	1c53      	adds	r3, r2, #1
 8004a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a7e:	697c      	ldr	r4, [r7, #20]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6939      	ldr	r1, [r7, #16]
 8004a84:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <_vsnprintf+0x89a>
 8004a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0eb      	beq.n	8004a70 <_vsnprintf+0x868>
 8004a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a9a:	1e5a      	subs	r2, r3, #1
 8004a9c:	657a      	str	r2, [r7, #84]	; 0x54
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e6      	bne.n	8004a70 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8004aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00e      	beq.n	8004aca <_vsnprintf+0x8c2>
          while (l++ < width) {
 8004aac:	e007      	b.n	8004abe <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 8004aae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ab0:	1c53      	adds	r3, r2, #1
 8004ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab4:	697c      	ldr	r4, [r7, #20]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6939      	ldr	r1, [r7, #16]
 8004aba:	2020      	movs	r0, #32
 8004abc:	47a0      	blx	r4
          while (l++ < width) {
 8004abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d8f1      	bhi.n	8004aae <_vsnprintf+0x8a6>
          }
        }
        format++;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	3301      	adds	r3, #1
 8004ace:	60bb      	str	r3, [r7, #8]
        break;
 8004ad0:	e066      	b.n	8004ba0 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ad8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004adc:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8004ae4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d023      	beq.n	8004b34 <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004af0:	1d1a      	adds	r2, r3, #4
 8004af2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	2300      	movs	r3, #0
 8004afc:	603a      	str	r2, [r7, #0]
 8004afe:	607b      	str	r3, [r7, #4]
 8004b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b02:	9308      	str	r3, [sp, #32]
 8004b04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b06:	9307      	str	r3, [sp, #28]
 8004b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b0a:	9306      	str	r3, [sp, #24]
 8004b0c:	f04f 0210 	mov.w	r2, #16
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9302      	str	r3, [sp, #8]
 8004b1c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004b20:	e9cd 3400 	strd	r3, r4, [sp]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b28:	6939      	ldr	r1, [r7, #16]
 8004b2a:	6978      	ldr	r0, [r7, #20]
 8004b2c:	f7fe fe1c 	bl	8003768 <_ntoa_long_long>
 8004b30:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004b32:	e018      	b.n	8004b66 <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004b34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b38:	1d1a      	adds	r2, r3, #4
 8004b3a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b44:	9305      	str	r3, [sp, #20]
 8004b46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b48:	9304      	str	r3, [sp, #16]
 8004b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b4c:	9303      	str	r3, [sp, #12]
 8004b4e:	2310      	movs	r3, #16
 8004b50:	9302      	str	r3, [sp, #8]
 8004b52:	2300      	movs	r3, #0
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	9200      	str	r2, [sp, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b5c:	6939      	ldr	r1, [r7, #16]
 8004b5e:	6978      	ldr	r0, [r7, #20]
 8004b60:	f7fe fd9c 	bl	800369c <_ntoa_long>
 8004b64:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	60bb      	str	r3, [r7, #8]
        break;
 8004b6c:	e018      	b.n	8004ba0 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004b6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b70:	1c53      	adds	r3, r2, #1
 8004b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b74:	697c      	ldr	r4, [r7, #20]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6939      	ldr	r1, [r7, #16]
 8004b7a:	2025      	movs	r0, #37	; 0x25
 8004b7c:	47a0      	blx	r4
        format++;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	3301      	adds	r3, #1
 8004b82:	60bb      	str	r3, [r7, #8]
        break;
 8004b84:	e00c      	b.n	8004ba0 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	7818      	ldrb	r0, [r3, #0]
 8004b8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b8c:	1c53      	adds	r3, r2, #1
 8004b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b90:	697c      	ldr	r4, [r7, #20]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6939      	ldr	r1, [r7, #16]
 8004b96:	47a0      	blx	r4
        format++;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60bb      	str	r3, [r7, #8]
        break;
 8004b9e:	bf00      	nop
  while (*format)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f47f ab41 	bne.w	800422c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004baa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d302      	bcc.n	8004bb8 <_vsnprintf+0x9b0>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1e5a      	subs	r2, r3, #1
 8004bb6:	e000      	b.n	8004bba <_vsnprintf+0x9b2>
 8004bb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bba:	697c      	ldr	r4, [r7, #20]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6939      	ldr	r1, [r7, #16]
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8004bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3764      	adds	r7, #100	; 0x64
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004bd0 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8004bd0:	b40e      	push	{r1, r2, r3}
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b087      	sub	sp, #28
 8004bd6:	af02      	add	r7, sp, #8
 8004bd8:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8004bda:	f107 0320 	add.w	r3, r7, #32
 8004bde:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4805      	ldr	r0, [pc, #20]	; (8004c04 <sprintf_+0x34>)
 8004bee:	f7ff fb0b 	bl	8004208 <_vsnprintf>
 8004bf2:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c00:	b003      	add	sp, #12
 8004c02:	4770      	bx	lr
 8004c04:	0800334b 	.word	0x0800334b

08004c08 <RFP_Handle>:
        { RFP_WaitForResponseFunction }, { RFP_ParseResponseFunction } };
RFPCommandFunctions_TypeDef RfpCommandFunction[RFP_COMMAND_CNT];
RFPDataFunctions_TypeDef RfpDataFunctions;
RFPMessageFunctions_TypeDef RfpMessageFunction[RFP_MESSAGE_CNT];
void RFP_Handle(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
   RFP_ChangeState();
 8004c0c:	f000 f856 	bl	8004cbc <RFP_ChangeState>
   if(RfpFunction[Rfp->State].RfpFunction != NULL)
 8004c10:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <RFP_Handle+0x30>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	4b08      	ldr	r3, [pc, #32]	; (8004c3c <RFP_Handle+0x34>)
 8004c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d007      	beq.n	8004c32 <RFP_Handle+0x2a>
   {
      RfpFunction[Rfp->State].RfpFunction();
 8004c22:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <RFP_Handle+0x30>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <RFP_Handle+0x34>)
 8004c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c30:	4798      	blx	r3
   }
}
 8004c32:	bf00      	nop
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20003e80 	.word	0x20003e80
 8004c3c:	20000058 	.word	0x20000058

08004c40 <RFP_Init>:
void RFP_Init(RFP_TypeDef *RadioProtocol, RFPDeviceID_TypeDef Device)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	70fb      	strb	r3, [r7, #3]
   Rfp             = RadioProtocol;
 8004c4c:	4a17      	ldr	r2, [pc, #92]	; (8004cac <RFP_Init+0x6c>)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6013      	str	r3, [r2, #0]
   Rfp->Initialize = RFP_INITIALIZE;
 8004c52:	4b16      	ldr	r3, [pc, #88]	; (8004cac <RFP_Init+0x6c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2201      	movs	r2, #1
 8004c58:	70da      	strb	r2, [r3, #3]
   Rfp->DeviceType = Device;
 8004c5a:	4b14      	ldr	r3, [pc, #80]	; (8004cac <RFP_Init+0x6c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	e007      	b.n	8004c78 <RFP_Init+0x38>
   {
      RfpCommandFunction[i].RfpCommandFunction = NULL;
 8004c68:	4a11      	ldr	r2, [pc, #68]	; (8004cb0 <RFP_Init+0x70>)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3301      	adds	r3, #1
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b05      	cmp	r3, #5
 8004c7c:	ddf4      	ble.n	8004c68 <RFP_Init+0x28>
   }
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60bb      	str	r3, [r7, #8]
 8004c82:	e007      	b.n	8004c94 <RFP_Init+0x54>
   {
      RfpMessageFunction[i].RfpMessageFunction = NULL;
 8004c84:	4a0b      	ldr	r2, [pc, #44]	; (8004cb4 <RFP_Init+0x74>)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2100      	movs	r1, #0
 8004c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	3301      	adds	r3, #1
 8004c92:	60bb      	str	r3, [r7, #8]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	ddf4      	ble.n	8004c84 <RFP_Init+0x44>
   }
   RfpDataFunctions.RfpDataFunction = NULL;
 8004c9a:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <RFP_Init+0x78>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	20003e80 	.word	0x20003e80
 8004cb0:	20003e84 	.word	0x20003e84
 8004cb4:	20003ea0 	.word	0x20003ea0
 8004cb8:	20003e9c 	.word	0x20003e9c

08004cbc <RFP_ChangeState>:
static void RFP_ChangeState(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	e02b      	b.n	8004d20 <RFP_ChangeState+0x64>
   {
      if(Rfp->State == RfpTransitionTable[i].Source && Rfp->NewEvent == RfpTransitionTable[i].Event)
 8004cc8:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <RFP_ChangeState+0x7c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	7819      	ldrb	r1, [r3, #0]
 8004cce:	481b      	ldr	r0, [pc, #108]	; (8004d3c <RFP_ChangeState+0x80>)
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	4413      	add	r3, r2
 8004cd8:	4403      	add	r3, r0
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	4299      	cmp	r1, r3
 8004cde:	d11c      	bne.n	8004d1a <RFP_ChangeState+0x5e>
 8004ce0:	4b15      	ldr	r3, [pc, #84]	; (8004d38 <RFP_ChangeState+0x7c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	7859      	ldrb	r1, [r3, #1]
 8004ce6:	4815      	ldr	r0, [pc, #84]	; (8004d3c <RFP_ChangeState+0x80>)
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	4413      	add	r3, r2
 8004cf0:	4403      	add	r3, r0
 8004cf2:	3302      	adds	r3, #2
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	4299      	cmp	r1, r3
 8004cf8:	d10f      	bne.n	8004d1a <RFP_ChangeState+0x5e>
      {
         Rfp->State    = RfpTransitionTable[i].Destination;
 8004cfa:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <RFP_ChangeState+0x7c>)
 8004cfc:	6819      	ldr	r1, [r3, #0]
 8004cfe:	480f      	ldr	r0, [pc, #60]	; (8004d3c <RFP_ChangeState+0x80>)
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	4413      	add	r3, r2
 8004d08:	4403      	add	r3, r0
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	700b      	strb	r3, [r1, #0]
         Rfp->NewEvent = RFP_EVENT_NOTHING;
 8004d10:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <RFP_ChangeState+0x7c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2200      	movs	r2, #0
 8004d16:	705a      	strb	r2, [r3, #1]
         return;
 8004d18:	e009      	b.n	8004d2e <RFP_ChangeState+0x72>
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	607b      	str	r3, [r7, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b0b      	cmp	r3, #11
 8004d24:	d9d0      	bls.n	8004cc8 <RFP_ChangeState+0xc>
      }
   }
   Rfp->NewEvent = RFP_EVENT_NOTHING;
 8004d26:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <RFP_ChangeState+0x7c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	705a      	strb	r2, [r3, #1]
}
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	20003e80 	.word	0x20003e80
 8004d3c:	20000034 	.word	0x20000034

08004d40 <RFP_RegisterDataFunction>:
void RFP_RegisterCommandFunction(RFPCommands_TypeDef Command, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpCommandFunction[Command - 1].RfpCommandFunction = Callback;
}
void RFP_RegisterDataFunction(void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
   RfpDataFunctions.RfpDataFunction = Callback;
 8004d48:	4a04      	ldr	r2, [pc, #16]	; (8004d5c <RFP_RegisterDataFunction+0x1c>)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6013      	str	r3, [r2, #0]
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20003e9c 	.word	0x20003e9c

08004d60 <RFP_InterruptTask>:
void RFP_RegisterMessageFunction(RFPMessage_TypeDef Message, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpMessageFunction[Message - 1].RfpMessageFunction = Callback;
}
void RFP_InterruptTask(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
   Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_SET;
 8004d64:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <RFP_InterruptTask+0x18>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	711a      	strb	r2, [r3, #4]
}
 8004d6c:	bf00      	nop
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20003e80 	.word	0x20003e80

08004d7c <RFP_SendData>:
void RFP_SendData(RFPDeviceID_TypeDef Destination, RFPMessageType_TypeDef Type, uint8_t *Data, uint32_t Length)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60ba      	str	r2, [r7, #8]
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	4603      	mov	r3, r0
 8004d88:	73fb      	strb	r3, [r7, #15]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	73bb      	strb	r3, [r7, #14]
   RfpDataTransmit[0] = Destination;
 8004d8e:	4a27      	ldr	r2, [pc, #156]	; (8004e2c <RFP_SendData+0xb0>)
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	7013      	strb	r3, [r2, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 8004d94:	4b26      	ldr	r3, [pc, #152]	; (8004e30 <RFP_SendData+0xb4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	795a      	ldrb	r2, [r3, #5]
 8004d9a:	4b24      	ldr	r3, [pc, #144]	; (8004e2c <RFP_SendData+0xb0>)
 8004d9c:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = Type;
 8004d9e:	4a23      	ldr	r2, [pc, #140]	; (8004e2c <RFP_SendData+0xb0>)
 8004da0:	7bbb      	ldrb	r3, [r7, #14]
 8004da2:	7093      	strb	r3, [r2, #2]
   for(int i = 0; i < Length; i++)
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e00a      	b.n	8004dc0 <RFP_SendData+0x44>
   {
      RfpDataTransmit[i + 3] = Data[i];
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	441a      	add	r2, r3
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	3303      	adds	r3, #3
 8004db4:	7811      	ldrb	r1, [r2, #0]
 8004db6:	4a1d      	ldr	r2, [pc, #116]	; (8004e2c <RFP_SendData+0xb0>)
 8004db8:	54d1      	strb	r1, [r2, r3]
   for(int i = 0; i < Length; i++)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d8f0      	bhi.n	8004daa <RFP_SendData+0x2e>
   }
   uint32_t crc                    = Crc(CRC_INITIAL_VALUE, 3 + Length, RfpDataTransmit);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3303      	adds	r3, #3
 8004dcc:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <RFP_SendData+0xb0>)
 8004dce:	4619      	mov	r1, r3
 8004dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd4:	f7fd f95c 	bl	8002090 <Crc>
 8004dd8:	6138      	str	r0, [r7, #16]
   RfpDataTransmit[3 + Length]     = ((crc >> 24) & 0xff);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	0e1a      	lsrs	r2, r3, #24
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3303      	adds	r3, #3
 8004de2:	b2d1      	uxtb	r1, r2
 8004de4:	4a11      	ldr	r2, [pc, #68]	; (8004e2c <RFP_SendData+0xb0>)
 8004de6:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 1] = ((crc >> 16) & 0xff);
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	0c1a      	lsrs	r2, r3, #16
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	b2d1      	uxtb	r1, r2
 8004df2:	4a0e      	ldr	r2, [pc, #56]	; (8004e2c <RFP_SendData+0xb0>)
 8004df4:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 2] = ((crc >> 8) & 0xff);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	0a1a      	lsrs	r2, r3, #8
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3305      	adds	r3, #5
 8004dfe:	b2d1      	uxtb	r1, r2
 8004e00:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <RFP_SendData+0xb0>)
 8004e02:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 3] = (crc & 0xff);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3306      	adds	r3, #6
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	b2d1      	uxtb	r1, r2
 8004e0c:	4a07      	ldr	r2, [pc, #28]	; (8004e2c <RFP_SendData+0xb0>)
 8004e0e:	54d1      	strb	r1, [r2, r3]
   Rfp->SendFlag                   = RFP_SEND_FLAG_SET;
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <RFP_SendData+0xb4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2201      	movs	r2, #1
 8004e16:	745a      	strb	r2, [r3, #17]
   Rfp->DataSizeTransmit           = 3 + Length + 4;
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <RFP_SendData+0xb4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	3207      	adds	r2, #7
 8004e20:	60da      	str	r2, [r3, #12]
}
 8004e22:	bf00      	nop
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20003e1c 	.word	0x20003e1c
 8004e30:	20003e80 	.word	0x20003e80

08004e34 <RFP_SendResponseFunction>:
static void RFP_SendResponseFunction(RFPMessageType_TypeDef Response)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	71fb      	strb	r3, [r7, #7]
   osDelay(200);
 8004e3e:	20c8      	movs	r0, #200	; 0xc8
 8004e40:	f007 ff28 	bl	800cc94 <osDelay>
   RfpDataTransmit[0] = Rfp->SourceMessage;
 8004e44:	4b18      	ldr	r3, [pc, #96]	; (8004ea8 <RFP_SendResponseFunction+0x74>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	7c1a      	ldrb	r2, [r3, #16]
 8004e4a:	4b18      	ldr	r3, [pc, #96]	; (8004eac <RFP_SendResponseFunction+0x78>)
 8004e4c:	701a      	strb	r2, [r3, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 8004e4e:	4b16      	ldr	r3, [pc, #88]	; (8004ea8 <RFP_SendResponseFunction+0x74>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	795a      	ldrb	r2, [r3, #5]
 8004e54:	4b15      	ldr	r3, [pc, #84]	; (8004eac <RFP_SendResponseFunction+0x78>)
 8004e56:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = RFP_MESSAGE;
 8004e58:	4b14      	ldr	r3, [pc, #80]	; (8004eac <RFP_SendResponseFunction+0x78>)
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	709a      	strb	r2, [r3, #2]
   RfpDataTransmit[3] = Response;
 8004e5e:	4a13      	ldr	r2, [pc, #76]	; (8004eac <RFP_SendResponseFunction+0x78>)
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	70d3      	strb	r3, [r2, #3]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, RfpDataTransmit);
 8004e64:	4a11      	ldr	r2, [pc, #68]	; (8004eac <RFP_SendResponseFunction+0x78>)
 8004e66:	2104      	movs	r1, #4
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	f7fd f910 	bl	8002090 <Crc>
 8004e70:	60f8      	str	r0, [r7, #12]
   RfpDataTransmit[4] = ((crc >> 24) & 0xff);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	0e1b      	lsrs	r3, r3, #24
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <RFP_SendResponseFunction+0x78>)
 8004e7a:	711a      	strb	r2, [r3, #4]
   RfpDataTransmit[5] = ((crc >> 16) & 0xff);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	0c1b      	lsrs	r3, r3, #16
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <RFP_SendResponseFunction+0x78>)
 8004e84:	715a      	strb	r2, [r3, #5]
   RfpDataTransmit[6] = ((crc >> 8) & 0xff);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	0a1b      	lsrs	r3, r3, #8
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	4b07      	ldr	r3, [pc, #28]	; (8004eac <RFP_SendResponseFunction+0x78>)
 8004e8e:	719a      	strb	r2, [r3, #6]
   RfpDataTransmit[7] = (crc & 0xff);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <RFP_SendResponseFunction+0x78>)
 8004e96:	71da      	strb	r2, [r3, #7]
   HC12_TransmitData(RfpDataTransmit, 8);
 8004e98:	2108      	movs	r1, #8
 8004e9a:	4804      	ldr	r0, [pc, #16]	; (8004eac <RFP_SendResponseFunction+0x78>)
 8004e9c:	f7fc fb44 	bl	8001528 <HC12_TransmitData>
}
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20003e80 	.word	0x20003e80
 8004eac:	20003e1c 	.word	0x20003e1c

08004eb0 <RFP_InitializeFunction>:
static void RFP_InitializeFunction(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
   Rfp->NewEvent = RFP_EVENT_END_INITIALIZE;
 8004eb4:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <RFP_InitializeFunction+0x28>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	705a      	strb	r2, [r3, #1]
   HC12_ExitCommandMode();
 8004ebc:	f7fc fb29 	bl	8001512 <HC12_ExitCommandMode>
   HC12_Init(Rfp, RfpDataRecive);
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <RFP_InitializeFunction+0x28>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4905      	ldr	r1, [pc, #20]	; (8004edc <RFP_InitializeFunction+0x2c>)
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fc fb58 	bl	800157c <HC12_Init>
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8004ecc:	2164      	movs	r1, #100	; 0x64
 8004ece:	4803      	ldr	r0, [pc, #12]	; (8004edc <RFP_InitializeFunction+0x2c>)
 8004ed0:	f7fc fb42 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 8004ed4:	bf00      	nop
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20003e80 	.word	0x20003e80
 8004edc:	20003db8 	.word	0x20003db8

08004ee0 <RFP_IdleFunction>:
static void RFP_IdleFunction(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
   if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 8004ee4:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <RFP_IdleFunction+0x48>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	791b      	ldrb	r3, [r3, #4]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d108      	bne.n	8004f02 <RFP_IdleFunction+0x22>
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 8004ef0:	4b0d      	ldr	r3, [pc, #52]	; (8004f28 <RFP_IdleFunction+0x48>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <RFP_IdleFunction+0x48>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2201      	movs	r2, #1
 8004efe:	705a      	strb	r2, [r3, #1]
   {
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
      Rfp->NewEvent = RFP_EVENT_SEND;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 8004f00:	e010      	b.n	8004f24 <RFP_IdleFunction+0x44>
   else if(Rfp->SendFlag == RFP_SEND_FLAG_SET)
 8004f02:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <RFP_IdleFunction+0x48>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	7c5b      	ldrb	r3, [r3, #17]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d10b      	bne.n	8004f24 <RFP_IdleFunction+0x44>
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
 8004f0c:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <RFP_IdleFunction+0x48>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2200      	movs	r2, #0
 8004f12:	745a      	strb	r2, [r3, #17]
      Rfp->NewEvent = RFP_EVENT_SEND;
 8004f14:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <RFP_IdleFunction+0x48>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2206      	movs	r2, #6
 8004f1a:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8004f1c:	2164      	movs	r1, #100	; 0x64
 8004f1e:	4803      	ldr	r0, [pc, #12]	; (8004f2c <RFP_IdleFunction+0x4c>)
 8004f20:	f7fc fb1a 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 8004f24:	bf00      	nop
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20003e80 	.word	0x20003e80
 8004f2c:	20003db8 	.word	0x20003db8

08004f30 <RFP_ParseFunction>:
static void RFP_ParseFunction(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	607b      	str	r3, [r7, #4]
   Rfp->SourceMessage  = RfpDataRecive[1];
 8004f3a:	4b3a      	ldr	r3, [pc, #232]	; (8005024 <RFP_ParseFunction+0xf4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a3a      	ldr	r2, [pc, #232]	; (8005028 <RFP_ParseFunction+0xf8>)
 8004f40:	7852      	ldrb	r2, [r2, #1]
 8004f42:	741a      	strb	r2, [r3, #16]
   if(RfpDataRecive[0] != Rfp->DeviceType)
 8004f44:	4b38      	ldr	r3, [pc, #224]	; (8005028 <RFP_ParseFunction+0xf8>)
 8004f46:	781a      	ldrb	r2, [r3, #0]
 8004f48:	4b36      	ldr	r3, [pc, #216]	; (8005024 <RFP_ParseFunction+0xf4>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	795b      	ldrb	r3, [r3, #5]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d00b      	beq.n	8004f6a <RFP_ParseFunction+0x3a>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8004f52:	4b34      	ldr	r3, [pc, #208]	; (8005024 <RFP_ParseFunction+0xf4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2203      	movs	r2, #3
 8004f58:	705a      	strb	r2, [r3, #1]
      RFP_SendResponseFunction(RFP_ERROR);
 8004f5a:	2001      	movs	r0, #1
 8004f5c:	f7ff ff6a 	bl	8004e34 <RFP_SendResponseFunction>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8004f60:	2164      	movs	r1, #100	; 0x64
 8004f62:	4831      	ldr	r0, [pc, #196]	; (8005028 <RFP_ParseFunction+0xf8>)
 8004f64:	f7fc faf8 	bl	8001558 <HC12_ReciveToIdleDMA>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
            }
         }
      }
   }
}
 8004f68:	e057      	b.n	800501a <RFP_ParseFunction+0xea>
      if(Rfp->DataSize != 0)
 8004f6a:	4b2e      	ldr	r3, [pc, #184]	; (8005024 <RFP_ParseFunction+0xf4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d052      	beq.n	800501a <RFP_ParseFunction+0xea>
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8004f74:	4b2b      	ldr	r3, [pc, #172]	; (8005024 <RFP_ParseFunction+0xf4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	3b04      	subs	r3, #4
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <RFP_ParseFunction+0xf8>)
 8004f7e:	5cd3      	ldrb	r3, [r2, r3]
 8004f80:	061a      	lsls	r2, r3, #24
 8004f82:	4b28      	ldr	r3, [pc, #160]	; (8005024 <RFP_ParseFunction+0xf4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	3b03      	subs	r3, #3
 8004f8a:	4927      	ldr	r1, [pc, #156]	; (8005028 <RFP_ParseFunction+0xf8>)
 8004f8c:	5ccb      	ldrb	r3, [r1, r3]
 8004f8e:	041b      	lsls	r3, r3, #16
 8004f90:	431a      	orrs	r2, r3
                       | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 8004f92:	4b24      	ldr	r3, [pc, #144]	; (8005024 <RFP_ParseFunction+0xf4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	3b02      	subs	r3, #2
 8004f9a:	4923      	ldr	r1, [pc, #140]	; (8005028 <RFP_ParseFunction+0xf8>)
 8004f9c:	5ccb      	ldrb	r3, [r1, r3]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	4a20      	ldr	r2, [pc, #128]	; (8005024 <RFP_ParseFunction+0xf4>)
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	6892      	ldr	r2, [r2, #8]
 8004fa8:	3a01      	subs	r2, #1
 8004faa:	491f      	ldr	r1, [pc, #124]	; (8005028 <RFP_ParseFunction+0xf8>)
 8004fac:	5c8a      	ldrb	r2, [r1, r2]
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	607b      	str	r3, [r7, #4]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 8004fb2:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <RFP_ParseFunction+0xf4>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	3b04      	subs	r3, #4
 8004fba:	4a1b      	ldr	r2, [pc, #108]	; (8005028 <RFP_ParseFunction+0xf8>)
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc2:	f7fd f865 	bl	8002090 <Crc>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d107      	bne.n	8004fde <RFP_ParseFunction+0xae>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8004fce:	4b15      	ldr	r3, [pc, #84]	; (8005024 <RFP_ParseFunction+0xf4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	705a      	strb	r2, [r3, #1]
            RFP_SendResponseFunction(RFP_OK);
 8004fd6:	2004      	movs	r0, #4
 8004fd8:	f7ff ff2c 	bl	8004e34 <RFP_SendResponseFunction>
}
 8004fdc:	e01d      	b.n	800501a <RFP_ParseFunction+0xea>
            if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 8004fde:	4b11      	ldr	r3, [pc, #68]	; (8005024 <RFP_ParseFunction+0xf4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4910      	ldr	r1, [pc, #64]	; (8005028 <RFP_ParseFunction+0xf8>)
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7fd f8a9 	bl	8002140 <RepareMessage>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d107      	bne.n	8005004 <RFP_ParseFunction+0xd4>
               Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <RFP_ParseFunction+0xf4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_OK);
 8004ffc:	2004      	movs	r0, #4
 8004ffe:	f7ff ff19 	bl	8004e34 <RFP_SendResponseFunction>
}
 8005002:	e00a      	b.n	800501a <RFP_ParseFunction+0xea>
               Rfp->NewEvent = RFP_EVENT_ERROR;
 8005004:	4b07      	ldr	r3, [pc, #28]	; (8005024 <RFP_ParseFunction+0xf4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2203      	movs	r2, #3
 800500a:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_CRC_ERROR);
 800500c:	2002      	movs	r0, #2
 800500e:	f7ff ff11 	bl	8004e34 <RFP_SendResponseFunction>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8005012:	2164      	movs	r1, #100	; 0x64
 8005014:	4804      	ldr	r0, [pc, #16]	; (8005028 <RFP_ParseFunction+0xf8>)
 8005016:	f7fc fa9f 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 800501a:	bf00      	nop
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20003e80 	.word	0x20003e80
 8005028:	20003db8 	.word	0x20003db8

0800502c <RFP_RunningFunction>:
static void RFP_RunningFunction(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
   switch(RfpDataRecive[2])
 8005030:	4b27      	ldr	r3, [pc, #156]	; (80050d0 <RFP_RunningFunction+0xa4>)
 8005032:	789b      	ldrb	r3, [r3, #2]
 8005034:	2b03      	cmp	r3, #3
 8005036:	d028      	beq.n	800508a <RFP_RunningFunction+0x5e>
 8005038:	2b03      	cmp	r3, #3
 800503a:	dc3b      	bgt.n	80050b4 <RFP_RunningFunction+0x88>
 800503c:	2b01      	cmp	r3, #1
 800503e:	d002      	beq.n	8005046 <RFP_RunningFunction+0x1a>
 8005040:	2b02      	cmp	r3, #2
 8005042:	d015      	beq.n	8005070 <RFP_RunningFunction+0x44>
         }
         break;
      }
      default:
      {
         break;
 8005044:	e036      	b.n	80050b4 <RFP_RunningFunction+0x88>
         if(RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction != NULL)
 8005046:	4b22      	ldr	r3, [pc, #136]	; (80050d0 <RFP_RunningFunction+0xa4>)
 8005048:	78db      	ldrb	r3, [r3, #3]
 800504a:	3b01      	subs	r3, #1
 800504c:	4a21      	ldr	r2, [pc, #132]	; (80050d4 <RFP_RunningFunction+0xa8>)
 800504e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d030      	beq.n	80050b8 <RFP_RunningFunction+0x8c>
            RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction(RfpDataRecive, Rfp->DataSize, 4);
 8005056:	4b1e      	ldr	r3, [pc, #120]	; (80050d0 <RFP_RunningFunction+0xa4>)
 8005058:	78db      	ldrb	r3, [r3, #3]
 800505a:	3b01      	subs	r3, #1
 800505c:	4a1d      	ldr	r2, [pc, #116]	; (80050d4 <RFP_RunningFunction+0xa8>)
 800505e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005062:	4a1d      	ldr	r2, [pc, #116]	; (80050d8 <RFP_RunningFunction+0xac>)
 8005064:	6812      	ldr	r2, [r2, #0]
 8005066:	6891      	ldr	r1, [r2, #8]
 8005068:	2204      	movs	r2, #4
 800506a:	4819      	ldr	r0, [pc, #100]	; (80050d0 <RFP_RunningFunction+0xa4>)
 800506c:	4798      	blx	r3
         break;
 800506e:	e023      	b.n	80050b8 <RFP_RunningFunction+0x8c>
         if(RfpDataFunctions.RfpDataFunction != NULL)
 8005070:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <RFP_RunningFunction+0xb0>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d021      	beq.n	80050bc <RFP_RunningFunction+0x90>
            RfpDataFunctions.RfpDataFunction(RfpDataRecive, Rfp->DataSize, 4);
 8005078:	4b18      	ldr	r3, [pc, #96]	; (80050dc <RFP_RunningFunction+0xb0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <RFP_RunningFunction+0xac>)
 800507e:	6812      	ldr	r2, [r2, #0]
 8005080:	6891      	ldr	r1, [r2, #8]
 8005082:	2204      	movs	r2, #4
 8005084:	4812      	ldr	r0, [pc, #72]	; (80050d0 <RFP_RunningFunction+0xa4>)
 8005086:	4798      	blx	r3
         break;
 8005088:	e018      	b.n	80050bc <RFP_RunningFunction+0x90>
         if(RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction != NULL)
 800508a:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <RFP_RunningFunction+0xa4>)
 800508c:	78db      	ldrb	r3, [r3, #3]
 800508e:	3b01      	subs	r3, #1
 8005090:	4a13      	ldr	r2, [pc, #76]	; (80050e0 <RFP_RunningFunction+0xb4>)
 8005092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d012      	beq.n	80050c0 <RFP_RunningFunction+0x94>
            RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction(RfpDataRecive, Rfp->DataSize, 4);
 800509a:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <RFP_RunningFunction+0xa4>)
 800509c:	78db      	ldrb	r3, [r3, #3]
 800509e:	3b01      	subs	r3, #1
 80050a0:	4a0f      	ldr	r2, [pc, #60]	; (80050e0 <RFP_RunningFunction+0xb4>)
 80050a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a6:	4a0c      	ldr	r2, [pc, #48]	; (80050d8 <RFP_RunningFunction+0xac>)
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	6891      	ldr	r1, [r2, #8]
 80050ac:	2204      	movs	r2, #4
 80050ae:	4808      	ldr	r0, [pc, #32]	; (80050d0 <RFP_RunningFunction+0xa4>)
 80050b0:	4798      	blx	r3
         break;
 80050b2:	e005      	b.n	80050c0 <RFP_RunningFunction+0x94>
         break;
 80050b4:	bf00      	nop
 80050b6:	e004      	b.n	80050c2 <RFP_RunningFunction+0x96>
         break;
 80050b8:	bf00      	nop
 80050ba:	e002      	b.n	80050c2 <RFP_RunningFunction+0x96>
         break;
 80050bc:	bf00      	nop
 80050be:	e000      	b.n	80050c2 <RFP_RunningFunction+0x96>
         break;
 80050c0:	bf00      	nop
      }
   }
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80050c2:	2164      	movs	r1, #100	; 0x64
 80050c4:	4802      	ldr	r0, [pc, #8]	; (80050d0 <RFP_RunningFunction+0xa4>)
 80050c6:	f7fc fa47 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 80050ca:	bf00      	nop
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20003db8 	.word	0x20003db8
 80050d4:	20003e84 	.word	0x20003e84
 80050d8:	20003e80 	.word	0x20003e80
 80050dc:	20003e9c 	.word	0x20003e9c
 80050e0:	20003ea0 	.word	0x20003ea0

080050e4 <RFP_SendFunction>:
static void RFP_SendFunction(void)
{
 80050e4:	b598      	push	{r3, r4, r7, lr}
 80050e6:	af00      	add	r7, sp, #0
   if(Rfp->Cnt < 5)
 80050e8:	4b16      	ldr	r3, [pc, #88]	; (8005144 <RFP_SendFunction+0x60>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d819      	bhi.n	8005126 <RFP_SendFunction+0x42>
   {
      osDelay(200);
 80050f2:	20c8      	movs	r0, #200	; 0xc8
 80050f4:	f007 fdce 	bl	800cc94 <osDelay>
      HC12_TransmitData(RfpDataTransmit, Rfp->DataSizeTransmit);
 80050f8:	4b12      	ldr	r3, [pc, #72]	; (8005144 <RFP_SendFunction+0x60>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	4619      	mov	r1, r3
 8005100:	4811      	ldr	r0, [pc, #68]	; (8005148 <RFP_SendFunction+0x64>)
 8005102:	f7fc fa11 	bl	8001528 <HC12_TransmitData>
      Rfp->Cnt++;
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <RFP_SendFunction+0x60>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695a      	ldr	r2, [r3, #20]
 800510c:	3201      	adds	r2, #1
 800510e:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_WAIT_FOR_RESPONSE;
 8005110:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <RFP_SendFunction+0x60>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2205      	movs	r2, #5
 8005116:	705a      	strb	r2, [r3, #1]
      Rfp->LastTick = HAL_GetTick();
 8005118:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <RFP_SendFunction+0x60>)
 800511a:	681c      	ldr	r4, [r3, #0]
 800511c:	f000 fff8 	bl	8006110 <HAL_GetTick>
 8005120:	4603      	mov	r3, r0
 8005122:	61a3      	str	r3, [r4, #24]
   {
      Rfp->Cnt      = 0;
      Rfp->NewEvent = RFP_EVENT_ERROR;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 8005124:	e00b      	b.n	800513e <RFP_SendFunction+0x5a>
      Rfp->Cnt      = 0;
 8005126:	4b07      	ldr	r3, [pc, #28]	; (8005144 <RFP_SendFunction+0x60>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2200      	movs	r2, #0
 800512c:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800512e:	4b05      	ldr	r3, [pc, #20]	; (8005144 <RFP_SendFunction+0x60>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2203      	movs	r2, #3
 8005134:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8005136:	2164      	movs	r1, #100	; 0x64
 8005138:	4804      	ldr	r0, [pc, #16]	; (800514c <RFP_SendFunction+0x68>)
 800513a:	f7fc fa0d 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 800513e:	bf00      	nop
 8005140:	bd98      	pop	{r3, r4, r7, pc}
 8005142:	bf00      	nop
 8005144:	20003e80 	.word	0x20003e80
 8005148:	20003e1c 	.word	0x20003e1c
 800514c:	20003db8 	.word	0x20003db8

08005150 <RFP_WaitForResponseFunction>:
static void RFP_WaitForResponseFunction(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - Rfp->LastTick > 2000)
 8005154:	f000 ffdc 	bl	8006110 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	4b0e      	ldr	r3, [pc, #56]	; (8005194 <RFP_WaitForResponseFunction+0x44>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005166:	d904      	bls.n	8005172 <RFP_WaitForResponseFunction+0x22>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8005168:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <RFP_WaitForResponseFunction+0x44>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2203      	movs	r2, #3
 800516e:	705a      	strb	r2, [r3, #1]
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
   }
}
 8005170:	e00d      	b.n	800518e <RFP_WaitForResponseFunction+0x3e>
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 8005172:	4b08      	ldr	r3, [pc, #32]	; (8005194 <RFP_WaitForResponseFunction+0x44>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	791b      	ldrb	r3, [r3, #4]
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b01      	cmp	r3, #1
 800517c:	d107      	bne.n	800518e <RFP_WaitForResponseFunction+0x3e>
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 800517e:	4b05      	ldr	r3, [pc, #20]	; (8005194 <RFP_WaitForResponseFunction+0x44>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2200      	movs	r2, #0
 8005184:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 8005186:	4b03      	ldr	r3, [pc, #12]	; (8005194 <RFP_WaitForResponseFunction+0x44>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2201      	movs	r2, #1
 800518c:	705a      	strb	r2, [r3, #1]
}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20003e80 	.word	0x20003e80

08005198 <RFP_ParseResponseFunction>:
static void RFP_ParseResponseFunction(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800519e:	4b50      	ldr	r3, [pc, #320]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	3b04      	subs	r3, #4
 80051a6:	4a4f      	ldr	r2, [pc, #316]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 80051a8:	5cd3      	ldrb	r3, [r2, r3]
 80051aa:	061a      	lsls	r2, r3, #24
 80051ac:	4b4c      	ldr	r3, [pc, #304]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	3b03      	subs	r3, #3
 80051b4:	494b      	ldr	r1, [pc, #300]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 80051b6:	5ccb      	ldrb	r3, [r1, r3]
 80051b8:	041b      	lsls	r3, r3, #16
 80051ba:	431a      	orrs	r2, r3
                          | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 80051bc:	4b48      	ldr	r3, [pc, #288]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	3b02      	subs	r3, #2
 80051c4:	4947      	ldr	r1, [pc, #284]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 80051c6:	5ccb      	ldrb	r3, [r1, r3]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	4313      	orrs	r3, r2
 80051cc:	4a44      	ldr	r2, [pc, #272]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	6892      	ldr	r2, [r2, #8]
 80051d2:	3a01      	subs	r2, #1
 80051d4:	4943      	ldr	r1, [pc, #268]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 80051d6:	5c8a      	ldrb	r2, [r1, r2]
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 80051d8:	4313      	orrs	r3, r2
 80051da:	607b      	str	r3, [r7, #4]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 80051dc:	4b40      	ldr	r3, [pc, #256]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	3b04      	subs	r3, #4
 80051e4:	4a3f      	ldr	r2, [pc, #252]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 80051e6:	4619      	mov	r1, r3
 80051e8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ec:	f7fc ff50 	bl	8002090 <Crc>
 80051f0:	4602      	mov	r2, r0
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d12d      	bne.n	8005254 <RFP_ParseResponseFunction+0xbc>
   {
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 80051f8:	4b3a      	ldr	r3, [pc, #232]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 80051fa:	781a      	ldrb	r2, [r3, #0]
 80051fc:	4b38      	ldr	r3, [pc, #224]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	795b      	ldrb	r3, [r3, #5]
 8005202:	429a      	cmp	r2, r3
 8005204:	d11d      	bne.n	8005242 <RFP_ParseResponseFunction+0xaa>
 8005206:	4b37      	ldr	r3, [pc, #220]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 8005208:	789b      	ldrb	r3, [r3, #2]
 800520a:	2b03      	cmp	r3, #3
 800520c:	d119      	bne.n	8005242 <RFP_ParseResponseFunction+0xaa>
      {
         if(RfpDataRecive[3] == RFP_OK)
 800520e:	4b35      	ldr	r3, [pc, #212]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 8005210:	78db      	ldrb	r3, [r3, #3]
 8005212:	2b04      	cmp	r3, #4
 8005214:	d10c      	bne.n	8005230 <RFP_ParseResponseFunction+0x98>
         {
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8005216:	4b32      	ldr	r3, [pc, #200]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2204      	movs	r2, #4
 800521c:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 800521e:	4b30      	ldr	r3, [pc, #192]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2200      	movs	r2, #0
 8005224:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8005226:	2164      	movs	r1, #100	; 0x64
 8005228:	482e      	ldr	r0, [pc, #184]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 800522a:	f7fc f995 	bl	8001558 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800522e:	e053      	b.n	80052d8 <RFP_ParseResponseFunction+0x140>
         }
         else
         {
            Rfp->NewEvent = RFP_EVENT_ERROR;
 8005230:	4b2b      	ldr	r3, [pc, #172]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2203      	movs	r2, #3
 8005236:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8005238:	2164      	movs	r1, #100	; 0x64
 800523a:	482a      	ldr	r0, [pc, #168]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 800523c:	f7fc f98c 	bl	8001558 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8005240:	e04a      	b.n	80052d8 <RFP_ParseResponseFunction+0x140>
         }
      }
      else
      {
         Rfp->NewEvent = RFP_EVENT_ERROR;
 8005242:	4b27      	ldr	r3, [pc, #156]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2203      	movs	r2, #3
 8005248:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800524a:	2164      	movs	r1, #100	; 0x64
 800524c:	4825      	ldr	r0, [pc, #148]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 800524e:	f7fc f983 	bl	8001558 <HC12_ReciveToIdleDMA>
   else
   {
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
      Rfp->NewEvent = RFP_EVENT_ERROR;
   }
}
 8005252:	e041      	b.n	80052d8 <RFP_ParseResponseFunction+0x140>
   else if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 8005254:	4b22      	ldr	r3, [pc, #136]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	461a      	mov	r2, r3
 800525c:	4921      	ldr	r1, [pc, #132]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fc ff6e 	bl	8002140 <RepareMessage>
 8005264:	4603      	mov	r3, r0
 8005266:	2b01      	cmp	r3, #1
 8005268:	d12d      	bne.n	80052c6 <RFP_ParseResponseFunction+0x12e>
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 800526a:	4b1e      	ldr	r3, [pc, #120]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 800526c:	781a      	ldrb	r2, [r3, #0]
 800526e:	4b1c      	ldr	r3, [pc, #112]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	795b      	ldrb	r3, [r3, #5]
 8005274:	429a      	cmp	r2, r3
 8005276:	d11d      	bne.n	80052b4 <RFP_ParseResponseFunction+0x11c>
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 800527a:	789b      	ldrb	r3, [r3, #2]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d119      	bne.n	80052b4 <RFP_ParseResponseFunction+0x11c>
         if(RfpDataRecive[3] == RFP_OK)
 8005280:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 8005282:	78db      	ldrb	r3, [r3, #3]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d10c      	bne.n	80052a2 <RFP_ParseResponseFunction+0x10a>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8005288:	4b15      	ldr	r3, [pc, #84]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2204      	movs	r2, #4
 800528e:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 8005290:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2200      	movs	r2, #0
 8005296:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8005298:	2164      	movs	r1, #100	; 0x64
 800529a:	4812      	ldr	r0, [pc, #72]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 800529c:	f7fc f95c 	bl	8001558 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 80052a0:	e01a      	b.n	80052d8 <RFP_ParseResponseFunction+0x140>
            Rfp->NewEvent = RFP_EVENT_ERROR;
 80052a2:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2203      	movs	r2, #3
 80052a8:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80052aa:	2164      	movs	r1, #100	; 0x64
 80052ac:	480d      	ldr	r0, [pc, #52]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 80052ae:	f7fc f953 	bl	8001558 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 80052b2:	e011      	b.n	80052d8 <RFP_ParseResponseFunction+0x140>
         Rfp->NewEvent = RFP_EVENT_ERROR;
 80052b4:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2203      	movs	r2, #3
 80052ba:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80052bc:	2164      	movs	r1, #100	; 0x64
 80052be:	4809      	ldr	r0, [pc, #36]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 80052c0:	f7fc f94a 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 80052c4:	e008      	b.n	80052d8 <RFP_ParseResponseFunction+0x140>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80052c6:	2164      	movs	r1, #100	; 0x64
 80052c8:	4806      	ldr	r0, [pc, #24]	; (80052e4 <RFP_ParseResponseFunction+0x14c>)
 80052ca:	f7fc f945 	bl	8001558 <HC12_ReciveToIdleDMA>
      Rfp->NewEvent = RFP_EVENT_ERROR;
 80052ce:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <RFP_ParseResponseFunction+0x148>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2203      	movs	r2, #3
 80052d4:	705a      	strb	r2, [r3, #1]
}
 80052d6:	e7ff      	b.n	80052d8 <RFP_ParseResponseFunction+0x140>
 80052d8:	bf00      	nop
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20003e80 	.word	0x20003e80
 80052e4:	20003db8 	.word	0x20003db8

080052e8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80052ec:	4b07      	ldr	r3, [pc, #28]	; (800530c <MX_RNG_Init+0x24>)
 80052ee:	4a08      	ldr	r2, [pc, #32]	; (8005310 <MX_RNG_Init+0x28>)
 80052f0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <MX_RNG_Init+0x24>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80052f8:	4804      	ldr	r0, [pc, #16]	; (800530c <MX_RNG_Init+0x24>)
 80052fa:	f003 fb35 	bl	8008968 <HAL_RNG_Init>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8005304:	f7fe f81c 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8005308:	bf00      	nop
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20003eb4 	.word	0x20003eb4
 8005310:	50060800 	.word	0x50060800

08005314 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b0aa      	sub	sp, #168	; 0xa8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800531c:	f107 0310 	add.w	r3, r7, #16
 8005320:	2298      	movs	r2, #152	; 0x98
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f00b faf1 	bl	801090c <memset>
  if(rngHandle->Instance==RNG)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a11      	ldr	r2, [pc, #68]	; (8005374 <HAL_RNG_MspInit+0x60>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d11b      	bne.n	800536c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8005334:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005338:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800533a:	2300      	movs	r3, #0
 800533c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005340:	f107 0310 	add.w	r3, r7, #16
 8005344:	4618      	mov	r0, r3
 8005346:	f002 fdbb 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8005350:	f7fd fff6 	bl	8003340 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8005354:	4b08      	ldr	r3, [pc, #32]	; (8005378 <HAL_RNG_MspInit+0x64>)
 8005356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005358:	4a07      	ldr	r2, [pc, #28]	; (8005378 <HAL_RNG_MspInit+0x64>)
 800535a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800535e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <HAL_RNG_MspInit+0x64>)
 8005362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800536c:	bf00      	nop
 800536e:	37a8      	adds	r7, #168	; 0xa8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	50060800 	.word	0x50060800
 8005378:	40021000 	.word	0x40021000

0800537c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8005382:	1d3b      	adds	r3, r7, #4
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	60da      	str	r2, [r3, #12]
 800538e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8005390:	2300      	movs	r3, #0
 8005392:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005394:	4b13      	ldr	r3, [pc, #76]	; (80053e4 <MX_RTC_Init+0x68>)
 8005396:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <MX_RTC_Init+0x6c>)
 8005398:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800539a:	4b12      	ldr	r3, [pc, #72]	; (80053e4 <MX_RTC_Init+0x68>)
 800539c:	2200      	movs	r2, #0
 800539e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80053a0:	4b10      	ldr	r3, [pc, #64]	; (80053e4 <MX_RTC_Init+0x68>)
 80053a2:	227f      	movs	r2, #127	; 0x7f
 80053a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80053a6:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <MX_RTC_Init+0x68>)
 80053a8:	22ff      	movs	r2, #255	; 0xff
 80053aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80053ac:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <MX_RTC_Init+0x68>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80053b2:	4b0c      	ldr	r3, [pc, #48]	; (80053e4 <MX_RTC_Init+0x68>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80053b8:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <MX_RTC_Init+0x68>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80053be:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <MX_RTC_Init+0x68>)
 80053c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80053c4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80053c6:	4b07      	ldr	r3, [pc, #28]	; (80053e4 <MX_RTC_Init+0x68>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80053cc:	4805      	ldr	r0, [pc, #20]	; (80053e4 <MX_RTC_Init+0x68>)
 80053ce:	f003 fbc5 	bl	8008b5c <HAL_RTC_Init>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80053d8:	f7fd ffb2 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20003ec8 	.word	0x20003ec8
 80053e8:	40002800 	.word	0x40002800

080053ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b0aa      	sub	sp, #168	; 0xa8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053f4:	f107 0310 	add.w	r3, r7, #16
 80053f8:	2298      	movs	r2, #152	; 0x98
 80053fa:	2100      	movs	r1, #0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f00b fa85 	bl	801090c <memset>
  if(rtcHandle->Instance==RTC)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a16      	ldr	r2, [pc, #88]	; (8005460 <HAL_RTC_MspInit+0x74>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d124      	bne.n	8005456 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800540c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005410:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800541a:	f107 0310 	add.w	r3, r7, #16
 800541e:	4618      	mov	r0, r3
 8005420:	f002 fd4e 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800542a:	f7fd ff89 	bl	8003340 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800542e:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <HAL_RTC_MspInit+0x78>)
 8005430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005434:	4a0b      	ldr	r2, [pc, #44]	; (8005464 <HAL_RTC_MspInit+0x78>)
 8005436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <HAL_RTC_MspInit+0x78>)
 8005440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005442:	4a08      	ldr	r2, [pc, #32]	; (8005464 <HAL_RTC_MspInit+0x78>)
 8005444:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005448:	6593      	str	r3, [r2, #88]	; 0x58
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <HAL_RTC_MspInit+0x78>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005456:	bf00      	nop
 8005458:	37a8      	adds	r7, #168	; 0xa8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	40002800 	.word	0x40002800
 8005464:	40021000 	.word	0x40021000

08005468 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800546c:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <MX_SPI1_Init+0x74>)
 800546e:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <MX_SPI1_Init+0x78>)
 8005470:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005472:	4b1a      	ldr	r3, [pc, #104]	; (80054dc <MX_SPI1_Init+0x74>)
 8005474:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005478:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800547a:	4b18      	ldr	r3, [pc, #96]	; (80054dc <MX_SPI1_Init+0x74>)
 800547c:	2200      	movs	r2, #0
 800547e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005480:	4b16      	ldr	r3, [pc, #88]	; (80054dc <MX_SPI1_Init+0x74>)
 8005482:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005486:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005488:	4b14      	ldr	r3, [pc, #80]	; (80054dc <MX_SPI1_Init+0x74>)
 800548a:	2200      	movs	r2, #0
 800548c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800548e:	4b13      	ldr	r3, [pc, #76]	; (80054dc <MX_SPI1_Init+0x74>)
 8005490:	2200      	movs	r2, #0
 8005492:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005494:	4b11      	ldr	r3, [pc, #68]	; (80054dc <MX_SPI1_Init+0x74>)
 8005496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800549a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800549c:	4b0f      	ldr	r3, [pc, #60]	; (80054dc <MX_SPI1_Init+0x74>)
 800549e:	2228      	movs	r2, #40	; 0x28
 80054a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80054a2:	4b0e      	ldr	r3, [pc, #56]	; (80054dc <MX_SPI1_Init+0x74>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80054a8:	4b0c      	ldr	r3, [pc, #48]	; (80054dc <MX_SPI1_Init+0x74>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054ae:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <MX_SPI1_Init+0x74>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80054b4:	4b09      	ldr	r3, [pc, #36]	; (80054dc <MX_SPI1_Init+0x74>)
 80054b6:	2207      	movs	r2, #7
 80054b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80054ba:	4b08      	ldr	r3, [pc, #32]	; (80054dc <MX_SPI1_Init+0x74>)
 80054bc:	2200      	movs	r2, #0
 80054be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80054c0:	4b06      	ldr	r3, [pc, #24]	; (80054dc <MX_SPI1_Init+0x74>)
 80054c2:	2208      	movs	r2, #8
 80054c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80054c6:	4805      	ldr	r0, [pc, #20]	; (80054dc <MX_SPI1_Init+0x74>)
 80054c8:	f003 fd3c 	bl	8008f44 <HAL_SPI_Init>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80054d2:	f7fd ff35 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80054d6:	bf00      	nop
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20003efc 	.word	0x20003efc
 80054e0:	40013000 	.word	0x40013000

080054e4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80054e8:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <MX_SPI3_Init+0x74>)
 80054ea:	4a1c      	ldr	r2, [pc, #112]	; (800555c <MX_SPI3_Init+0x78>)
 80054ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80054ee:	4b1a      	ldr	r3, [pc, #104]	; (8005558 <MX_SPI3_Init+0x74>)
 80054f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80054f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80054f6:	4b18      	ldr	r3, [pc, #96]	; (8005558 <MX_SPI3_Init+0x74>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80054fc:	4b16      	ldr	r3, [pc, #88]	; (8005558 <MX_SPI3_Init+0x74>)
 80054fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005502:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005504:	4b14      	ldr	r3, [pc, #80]	; (8005558 <MX_SPI3_Init+0x74>)
 8005506:	2200      	movs	r2, #0
 8005508:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800550a:	4b13      	ldr	r3, [pc, #76]	; (8005558 <MX_SPI3_Init+0x74>)
 800550c:	2200      	movs	r2, #0
 800550e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005510:	4b11      	ldr	r3, [pc, #68]	; (8005558 <MX_SPI3_Init+0x74>)
 8005512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005516:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005518:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <MX_SPI3_Init+0x74>)
 800551a:	2220      	movs	r2, #32
 800551c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800551e:	4b0e      	ldr	r3, [pc, #56]	; (8005558 <MX_SPI3_Init+0x74>)
 8005520:	2200      	movs	r2, #0
 8005522:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <MX_SPI3_Init+0x74>)
 8005526:	2200      	movs	r2, #0
 8005528:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800552a:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <MX_SPI3_Init+0x74>)
 800552c:	2200      	movs	r2, #0
 800552e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005530:	4b09      	ldr	r3, [pc, #36]	; (8005558 <MX_SPI3_Init+0x74>)
 8005532:	2207      	movs	r2, #7
 8005534:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005536:	4b08      	ldr	r3, [pc, #32]	; (8005558 <MX_SPI3_Init+0x74>)
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800553c:	4b06      	ldr	r3, [pc, #24]	; (8005558 <MX_SPI3_Init+0x74>)
 800553e:	2208      	movs	r2, #8
 8005540:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005542:	4805      	ldr	r0, [pc, #20]	; (8005558 <MX_SPI3_Init+0x74>)
 8005544:	f003 fcfe 	bl	8008f44 <HAL_SPI_Init>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800554e:	f7fd fef7 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005552:	bf00      	nop
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20003f60 	.word	0x20003f60
 800555c:	40003c00 	.word	0x40003c00

08005560 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08c      	sub	sp, #48	; 0x30
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005568:	f107 031c 	add.w	r3, r7, #28
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	605a      	str	r2, [r3, #4]
 8005572:	609a      	str	r2, [r3, #8]
 8005574:	60da      	str	r2, [r3, #12]
 8005576:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a2e      	ldr	r2, [pc, #184]	; (8005638 <HAL_SPI_MspInit+0xd8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d129      	bne.n	80055d6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005582:	4b2e      	ldr	r3, [pc, #184]	; (800563c <HAL_SPI_MspInit+0xdc>)
 8005584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005586:	4a2d      	ldr	r2, [pc, #180]	; (800563c <HAL_SPI_MspInit+0xdc>)
 8005588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800558c:	6613      	str	r3, [r2, #96]	; 0x60
 800558e:	4b2b      	ldr	r3, [pc, #172]	; (800563c <HAL_SPI_MspInit+0xdc>)
 8005590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005596:	61bb      	str	r3, [r7, #24]
 8005598:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800559a:	4b28      	ldr	r3, [pc, #160]	; (800563c <HAL_SPI_MspInit+0xdc>)
 800559c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559e:	4a27      	ldr	r2, [pc, #156]	; (800563c <HAL_SPI_MspInit+0xdc>)
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055a6:	4b25      	ldr	r3, [pc, #148]	; (800563c <HAL_SPI_MspInit+0xdc>)
 80055a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80055b2:	23e0      	movs	r3, #224	; 0xe0
 80055b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b6:	2302      	movs	r3, #2
 80055b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055be:	2303      	movs	r3, #3
 80055c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80055c2:	2305      	movs	r3, #5
 80055c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055c6:	f107 031c 	add.w	r3, r7, #28
 80055ca:	4619      	mov	r1, r3
 80055cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055d0:	f001 f9fa 	bl	80069c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80055d4:	e02c      	b.n	8005630 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI3)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a19      	ldr	r2, [pc, #100]	; (8005640 <HAL_SPI_MspInit+0xe0>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d127      	bne.n	8005630 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80055e0:	4b16      	ldr	r3, [pc, #88]	; (800563c <HAL_SPI_MspInit+0xdc>)
 80055e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e4:	4a15      	ldr	r2, [pc, #84]	; (800563c <HAL_SPI_MspInit+0xdc>)
 80055e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ea:	6593      	str	r3, [r2, #88]	; 0x58
 80055ec:	4b13      	ldr	r3, [pc, #76]	; (800563c <HAL_SPI_MspInit+0xdc>)
 80055ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055f8:	4b10      	ldr	r3, [pc, #64]	; (800563c <HAL_SPI_MspInit+0xdc>)
 80055fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fc:	4a0f      	ldr	r2, [pc, #60]	; (800563c <HAL_SPI_MspInit+0xdc>)
 80055fe:	f043 0302 	orr.w	r3, r3, #2
 8005602:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005604:	4b0d      	ldr	r3, [pc, #52]	; (800563c <HAL_SPI_MspInit+0xdc>)
 8005606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005610:	2338      	movs	r3, #56	; 0x38
 8005612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005614:	2302      	movs	r3, #2
 8005616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005618:	2300      	movs	r3, #0
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800561c:	2303      	movs	r3, #3
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005620:	2306      	movs	r3, #6
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005624:	f107 031c 	add.w	r3, r7, #28
 8005628:	4619      	mov	r1, r3
 800562a:	4806      	ldr	r0, [pc, #24]	; (8005644 <HAL_SPI_MspInit+0xe4>)
 800562c:	f001 f9cc 	bl	80069c8 <HAL_GPIO_Init>
}
 8005630:	bf00      	nop
 8005632:	3730      	adds	r7, #48	; 0x30
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40013000 	.word	0x40013000
 800563c:	40021000 	.word	0x40021000
 8005640:	40003c00 	.word	0x40003c00
 8005644:	48000400 	.word	0x48000400

08005648 <ssd1306_command>:
#include "main.h"
#include "string.h"
SPI_HandleTypeDef *ssd1306_spi;
static uint8_t buffer[(SSD1306_LCDWIDTH * SSD1306_LCDHEIGHT) / 8];
static void ssd1306_command(uint8_t command)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_RESET);
 8005652:	2200      	movs	r2, #0
 8005654:	2101      	movs	r1, #1
 8005656:	480d      	ldr	r0, [pc, #52]	; (800568c <ssd1306_command+0x44>)
 8005658:	f001 fb60 	bl	8006d1c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 800565c:	2200      	movs	r2, #0
 800565e:	2110      	movs	r1, #16
 8005660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005664:	f001 fb5a 	bl	8006d1c <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, &command, 1, 10);
 8005668:	4b09      	ldr	r3, [pc, #36]	; (8005690 <ssd1306_command+0x48>)
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	1df9      	adds	r1, r7, #7
 800566e:	230a      	movs	r3, #10
 8005670:	2201      	movs	r2, #1
 8005672:	f003 fd0a 	bl	800908a <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 8005676:	2201      	movs	r2, #1
 8005678:	2110      	movs	r1, #16
 800567a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800567e:	f001 fb4d 	bl	8006d1c <HAL_GPIO_WritePin>
}
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	48000400 	.word	0x48000400
 8005690:	20003fc4 	.word	0x20003fc4

08005694 <ssd1306_set_pixel>:
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(ssd1306_spi, &data, 1, 10);
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
// }
void ssd1306_set_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
 800569e:	460b      	mov	r3, r1
 80056a0:	71bb      	strb	r3, [r7, #6]
 80056a2:	4613      	mov	r3, r2
 80056a4:	717b      	strb	r3, [r7, #5]
   if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 80056a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	db43      	blt.n	8005736 <ssd1306_set_pixel+0xa2>
 80056ae:	79bb      	ldrb	r3, [r7, #6]
 80056b0:	2b3f      	cmp	r3, #63	; 0x3f
 80056b2:	d840      	bhi.n	8005736 <ssd1306_set_pixel+0xa2>
   {
      return;
   }
   if(color != 0 && color != 1)
 80056b4:	797b      	ldrb	r3, [r7, #5]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <ssd1306_set_pixel+0x2c>
 80056ba:	797b      	ldrb	r3, [r7, #5]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d13c      	bne.n	800573a <ssd1306_set_pixel+0xa6>
   {
      return;
   }
   if(color == 0)
 80056c0:	797b      	ldrb	r3, [r7, #5]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d11c      	bne.n	8005700 <ssd1306_set_pixel+0x6c>
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 80056c6:	79fa      	ldrb	r2, [r7, #7]
 80056c8:	79bb      	ldrb	r3, [r7, #6]
 80056ca:	08db      	lsrs	r3, r3, #3
 80056cc:	b2d8      	uxtb	r0, r3
 80056ce:	4603      	mov	r3, r0
 80056d0:	01db      	lsls	r3, r3, #7
 80056d2:	4413      	add	r3, r2
 80056d4:	4a1c      	ldr	r2, [pc, #112]	; (8005748 <ssd1306_set_pixel+0xb4>)
 80056d6:	5cd3      	ldrb	r3, [r2, r3]
 80056d8:	b25a      	sxtb	r2, r3
 80056da:	79bb      	ldrb	r3, [r7, #6]
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	2101      	movs	r1, #1
 80056e2:	fa01 f303 	lsl.w	r3, r1, r3
 80056e6:	b25b      	sxtb	r3, r3
 80056e8:	43db      	mvns	r3, r3
 80056ea:	b25b      	sxtb	r3, r3
 80056ec:	4013      	ands	r3, r2
 80056ee:	b259      	sxtb	r1, r3
 80056f0:	79fa      	ldrb	r2, [r7, #7]
 80056f2:	4603      	mov	r3, r0
 80056f4:	01db      	lsls	r3, r3, #7
 80056f6:	4413      	add	r3, r2
 80056f8:	b2c9      	uxtb	r1, r1
 80056fa:	4a13      	ldr	r2, [pc, #76]	; (8005748 <ssd1306_set_pixel+0xb4>)
 80056fc:	54d1      	strb	r1, [r2, r3]
 80056fe:	e01d      	b.n	800573c <ssd1306_set_pixel+0xa8>
   }
   else
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8005700:	79fa      	ldrb	r2, [r7, #7]
 8005702:	79bb      	ldrb	r3, [r7, #6]
 8005704:	08db      	lsrs	r3, r3, #3
 8005706:	b2d8      	uxtb	r0, r3
 8005708:	4603      	mov	r3, r0
 800570a:	01db      	lsls	r3, r3, #7
 800570c:	4413      	add	r3, r2
 800570e:	4a0e      	ldr	r2, [pc, #56]	; (8005748 <ssd1306_set_pixel+0xb4>)
 8005710:	5cd3      	ldrb	r3, [r2, r3]
 8005712:	b25a      	sxtb	r2, r3
 8005714:	79bb      	ldrb	r3, [r7, #6]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	2101      	movs	r1, #1
 800571c:	fa01 f303 	lsl.w	r3, r1, r3
 8005720:	b25b      	sxtb	r3, r3
 8005722:	4313      	orrs	r3, r2
 8005724:	b259      	sxtb	r1, r3
 8005726:	79fa      	ldrb	r2, [r7, #7]
 8005728:	4603      	mov	r3, r0
 800572a:	01db      	lsls	r3, r3, #7
 800572c:	4413      	add	r3, r2
 800572e:	b2c9      	uxtb	r1, r1
 8005730:	4a05      	ldr	r2, [pc, #20]	; (8005748 <ssd1306_set_pixel+0xb4>)
 8005732:	54d1      	strb	r1, [r2, r3]
 8005734:	e002      	b.n	800573c <ssd1306_set_pixel+0xa8>
      return;
 8005736:	bf00      	nop
 8005738:	e000      	b.n	800573c <ssd1306_set_pixel+0xa8>
      return;
 800573a:	bf00      	nop
   }
}
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20003fc8 	.word	0x20003fc8

0800574c <ssd1306_display>:
void ssd1306_display()
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
   ssd1306_command(0x22);
 8005750:	2022      	movs	r0, #34	; 0x22
 8005752:	f7ff ff79 	bl	8005648 <ssd1306_command>
   ssd1306_command(0x00);
 8005756:	2000      	movs	r0, #0
 8005758:	f7ff ff76 	bl	8005648 <ssd1306_command>
   ssd1306_command(0x07);
 800575c:	2007      	movs	r0, #7
 800575e:	f7ff ff73 	bl	8005648 <ssd1306_command>
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_SET);
 8005762:	2201      	movs	r2, #1
 8005764:	2101      	movs	r1, #1
 8005766:	480c      	ldr	r0, [pc, #48]	; (8005798 <ssd1306_display+0x4c>)
 8005768:	f001 fad8 	bl	8006d1c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 800576c:	2200      	movs	r2, #0
 800576e:	2110      	movs	r1, #16
 8005770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005774:	f001 fad2 	bl	8006d1c <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, (uint8_t *)&buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8), 100);
 8005778:	4b08      	ldr	r3, [pc, #32]	; (800579c <ssd1306_display+0x50>)
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	2364      	movs	r3, #100	; 0x64
 800577e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005782:	4907      	ldr	r1, [pc, #28]	; (80057a0 <ssd1306_display+0x54>)
 8005784:	f003 fc81 	bl	800908a <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 8005788:	2201      	movs	r2, #1
 800578a:	2110      	movs	r1, #16
 800578c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005790:	f001 fac4 	bl	8006d1c <HAL_GPIO_WritePin>
}
 8005794:	bf00      	nop
 8005796:	bd80      	pop	{r7, pc}
 8005798:	48000400 	.word	0x48000400
 800579c:	20003fc4 	.word	0x20003fc4
 80057a0:	20003fc8 	.word	0x20003fc8

080057a4 <ssd1306_clear>:
void ssd1306_clear()
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
   memset(buffer, 0x00, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 80057a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057ac:	2100      	movs	r1, #0
 80057ae:	4802      	ldr	r0, [pc, #8]	; (80057b8 <ssd1306_clear+0x14>)
 80057b0:	f00b f8ac 	bl	801090c <memset>
}
 80057b4:	bf00      	nop
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20003fc8 	.word	0x20003fc8

080057bc <ssd1306_init>:
void ssd1306_init(SPI_HandleTypeDef *spi)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_RESET);
 80057c4:	2200      	movs	r2, #0
 80057c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057ca:	4833      	ldr	r0, [pc, #204]	; (8005898 <ssd1306_init+0xdc>)
 80057cc:	f001 faa6 	bl	8006d1c <HAL_GPIO_WritePin>
   HAL_Delay(150);
 80057d0:	2096      	movs	r0, #150	; 0x96
 80057d2:	f000 fca9 	bl	8006128 <HAL_Delay>
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_SET);
 80057d6:	2201      	movs	r2, #1
 80057d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057dc:	482e      	ldr	r0, [pc, #184]	; (8005898 <ssd1306_init+0xdc>)
 80057de:	f001 fa9d 	bl	8006d1c <HAL_GPIO_WritePin>
   HAL_Delay(100);
 80057e2:	2064      	movs	r0, #100	; 0x64
 80057e4:	f000 fca0 	bl	8006128 <HAL_Delay>
   ssd1306_spi = spi;
 80057e8:	4a2c      	ldr	r2, [pc, #176]	; (800589c <ssd1306_init+0xe0>)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6013      	str	r3, [r2, #0]
   ssd1306_command(0xAE); // Display Off
 80057ee:	20ae      	movs	r0, #174	; 0xae
 80057f0:	f7ff ff2a 	bl	8005648 <ssd1306_command>

   ssd1306_command(0x00);
 80057f4:	2000      	movs	r0, #0
 80057f6:	f7ff ff27 	bl	8005648 <ssd1306_command>
   ssd1306_command(0x10);
 80057fa:	2010      	movs	r0, #16
 80057fc:	f7ff ff24 	bl	8005648 <ssd1306_command>
   ssd1306_command(0x40);
 8005800:	2040      	movs	r0, #64	; 0x40
 8005802:	f7ff ff21 	bl	8005648 <ssd1306_command>
   ssd1306_command(0x20); // Set addressing mode
 8005806:	2020      	movs	r0, #32
 8005808:	f7ff ff1e 	bl	8005648 <ssd1306_command>
   ssd1306_command(0x00); // Horizontal Addressing Mode
 800580c:	2000      	movs	r0, #0
 800580e:	f7ff ff1b 	bl	8005648 <ssd1306_command>

   ssd1306_command(0x81); // Set Contrast Control
 8005812:	2081      	movs	r0, #129	; 0x81
 8005814:	f7ff ff18 	bl	8005648 <ssd1306_command>
   ssd1306_command(0xff);
 8005818:	20ff      	movs	r0, #255	; 0xff
 800581a:	f7ff ff15 	bl	8005648 <ssd1306_command>
   ssd1306_command(0xA0 | (0x01 & 1));
 800581e:	20a1      	movs	r0, #161	; 0xa1
 8005820:	f7ff ff12 	bl	8005648 <ssd1306_command>
   ssd1306_command(0xC0 | (0x08 & (1 << 3)));
 8005824:	20c8      	movs	r0, #200	; 0xc8
 8005826:	f7ff ff0f 	bl	8005648 <ssd1306_command>

   ssd1306_command(0xA6); // Set Normal Display
 800582a:	20a6      	movs	r0, #166	; 0xa6
 800582c:	f7ff ff0c 	bl	8005648 <ssd1306_command>

   ssd1306_command(0xA8); // Select Multiplex Ratio
 8005830:	20a8      	movs	r0, #168	; 0xa8
 8005832:	f7ff ff09 	bl	8005648 <ssd1306_command>
   ssd1306_command(0x3F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8005836:	203f      	movs	r0, #63	; 0x3f
 8005838:	f7ff ff06 	bl	8005648 <ssd1306_command>

   ssd1306_command(0xD3); // Setting Display Offset
 800583c:	20d3      	movs	r0, #211	; 0xd3
 800583e:	f7ff ff03 	bl	8005648 <ssd1306_command>
   ssd1306_command(0x00); // 00H Reset
 8005842:	2000      	movs	r0, #0
 8005844:	f7ff ff00 	bl	8005648 <ssd1306_command>

   ssd1306_command(0xD5); // SET DISPLAY CLOCK
 8005848:	20d5      	movs	r0, #213	; 0xd5
 800584a:	f7ff fefd 	bl	8005648 <ssd1306_command>
   ssd1306_command(0x80); // 105HZ
 800584e:	2080      	movs	r0, #128	; 0x80
 8005850:	f7ff fefa 	bl	8005648 <ssd1306_command>

   ssd1306_command(0xD9); // Set Pre-Charge period
 8005854:	20d9      	movs	r0, #217	; 0xd9
 8005856:	f7ff fef7 	bl	8005648 <ssd1306_command>
   ssd1306_command(0x22);
 800585a:	2022      	movs	r0, #34	; 0x22
 800585c:	f7ff fef4 	bl	8005648 <ssd1306_command>

   ssd1306_command(0xDA); // Set COM Hardware Configuration
 8005860:	20da      	movs	r0, #218	; 0xda
 8005862:	f7ff fef1 	bl	8005648 <ssd1306_command>
   ssd1306_command(0x12); // Alternative COM Pin---See IC Spec page 34
 8005866:	2012      	movs	r0, #18
 8005868:	f7ff feee 	bl	8005648 <ssd1306_command>
                          // (0x02)=> A4=0;Sequential COM pin configuration;A5=0;Disable COM Left/Right remap

   ssd1306_command(0xDB); // Set Deselect Vcomh level
 800586c:	20db      	movs	r0, #219	; 0xdb
 800586e:	f7ff feeb 	bl	8005648 <ssd1306_command>
   ssd1306_command(0x40);
 8005872:	2040      	movs	r0, #64	; 0x40
 8005874:	f7ff fee8 	bl	8005648 <ssd1306_command>

   ssd1306_command(0x8D); // Set Charge Pump
 8005878:	208d      	movs	r0, #141	; 0x8d
 800587a:	f7ff fee5 	bl	8005648 <ssd1306_command>
   // ssd1306_command(0x10);  // Disable Charge Pump
   ssd1306_command(0x14); // Endable Charge Pump
 800587e:	2014      	movs	r0, #20
 8005880:	f7ff fee2 	bl	8005648 <ssd1306_command>

   ssd1306_command(0xA4); // Entire Display ON
 8005884:	20a4      	movs	r0, #164	; 0xa4
 8005886:	f7ff fedf 	bl	8005648 <ssd1306_command>
   ssd1306_command(SSD1306_DISPLAYON);
 800588a:	20af      	movs	r0, #175	; 0xaf
 800588c:	f7ff fedc 	bl	8005648 <ssd1306_command>
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	48000400 	.word	0x48000400
 800589c:	20003fc4 	.word	0x20003fc4

080058a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058a6:	4b11      	ldr	r3, [pc, #68]	; (80058ec <HAL_MspInit+0x4c>)
 80058a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058aa:	4a10      	ldr	r2, [pc, #64]	; (80058ec <HAL_MspInit+0x4c>)
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	6613      	str	r3, [r2, #96]	; 0x60
 80058b2:	4b0e      	ldr	r3, [pc, #56]	; (80058ec <HAL_MspInit+0x4c>)
 80058b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	607b      	str	r3, [r7, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058be:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <HAL_MspInit+0x4c>)
 80058c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c2:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <HAL_MspInit+0x4c>)
 80058c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c8:	6593      	str	r3, [r2, #88]	; 0x58
 80058ca:	4b08      	ldr	r3, [pc, #32]	; (80058ec <HAL_MspInit+0x4c>)
 80058cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d2:	603b      	str	r3, [r7, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80058d6:	2200      	movs	r2, #0
 80058d8:	210f      	movs	r1, #15
 80058da:	f06f 0001 	mvn.w	r0, #1
 80058de:	f000 fd16 	bl	800630e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	40021000 	.word	0x40021000

080058f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08c      	sub	sp, #48	; 0x30
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80058fe:	4b2e      	ldr	r3, [pc, #184]	; (80059b8 <HAL_InitTick+0xc8>)
 8005900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005902:	4a2d      	ldr	r2, [pc, #180]	; (80059b8 <HAL_InitTick+0xc8>)
 8005904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005908:	6613      	str	r3, [r2, #96]	; 0x60
 800590a:	4b2b      	ldr	r3, [pc, #172]	; (80059b8 <HAL_InitTick+0xc8>)
 800590c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005912:	60bb      	str	r3, [r7, #8]
 8005914:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005916:	f107 020c 	add.w	r2, r7, #12
 800591a:	f107 0310 	add.w	r3, r7, #16
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f002 f9db 	bl	8007cdc <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005926:	f002 f9c3 	bl	8007cb0 <HAL_RCC_GetPCLK2Freq>
 800592a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	4a23      	ldr	r2, [pc, #140]	; (80059bc <HAL_InitTick+0xcc>)
 8005930:	fba2 2303 	umull	r2, r3, r2, r3
 8005934:	0c9b      	lsrs	r3, r3, #18
 8005936:	3b01      	subs	r3, #1
 8005938:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800593a:	4b21      	ldr	r3, [pc, #132]	; (80059c0 <HAL_InitTick+0xd0>)
 800593c:	4a21      	ldr	r2, [pc, #132]	; (80059c4 <HAL_InitTick+0xd4>)
 800593e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8005940:	4b1f      	ldr	r3, [pc, #124]	; (80059c0 <HAL_InitTick+0xd0>)
 8005942:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005946:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8005948:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <HAL_InitTick+0xd0>)
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800594e:	4b1c      	ldr	r3, [pc, #112]	; (80059c0 <HAL_InitTick+0xd0>)
 8005950:	2200      	movs	r2, #0
 8005952:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005954:	4b1a      	ldr	r3, [pc, #104]	; (80059c0 <HAL_InitTick+0xd0>)
 8005956:	2200      	movs	r2, #0
 8005958:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800595a:	4b19      	ldr	r3, [pc, #100]	; (80059c0 <HAL_InitTick+0xd0>)
 800595c:	2200      	movs	r2, #0
 800595e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8005960:	4817      	ldr	r0, [pc, #92]	; (80059c0 <HAL_InitTick+0xd0>)
 8005962:	f004 f9ff 	bl	8009d64 <HAL_TIM_Base_Init>
 8005966:	4603      	mov	r3, r0
 8005968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800596c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005970:	2b00      	cmp	r3, #0
 8005972:	d11b      	bne.n	80059ac <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8005974:	4812      	ldr	r0, [pc, #72]	; (80059c0 <HAL_InitTick+0xd0>)
 8005976:	f004 fa4d 	bl	8009e14 <HAL_TIM_Base_Start_IT>
 800597a:	4603      	mov	r3, r0
 800597c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005984:	2b00      	cmp	r3, #0
 8005986:	d111      	bne.n	80059ac <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005988:	201a      	movs	r0, #26
 800598a:	f000 fcdc 	bl	8006346 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b0f      	cmp	r3, #15
 8005992:	d808      	bhi.n	80059a6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8005994:	2200      	movs	r2, #0
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	201a      	movs	r0, #26
 800599a:	f000 fcb8 	bl	800630e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800599e:	4a0a      	ldr	r2, [pc, #40]	; (80059c8 <HAL_InitTick+0xd8>)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	e002      	b.n	80059ac <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80059ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3730      	adds	r7, #48	; 0x30
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40021000 	.word	0x40021000
 80059bc:	431bde83 	.word	0x431bde83
 80059c0:	200043c8 	.word	0x200043c8
 80059c4:	40014800 	.word	0x40014800
 80059c8:	20000078 	.word	0x20000078

080059cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80059d0:	e7fe      	b.n	80059d0 <NMI_Handler+0x4>

080059d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059d2:	b480      	push	{r7}
 80059d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059d6:	e7fe      	b.n	80059d6 <HardFault_Handler+0x4>

080059d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059dc:	e7fe      	b.n	80059dc <MemManage_Handler+0x4>

080059de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059de:	b480      	push	{r7}
 80059e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059e2:	e7fe      	b.n	80059e2 <BusFault_Handler+0x4>

080059e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059e8:	e7fe      	b.n	80059e8 <UsageFault_Handler+0x4>

080059ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059ea:	b480      	push	{r7}
 80059ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059ee:	bf00      	nop
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80059fc:	4802      	ldr	r0, [pc, #8]	; (8005a08 <DMA1_Channel1_IRQHandler+0x10>)
 80059fe:	f000 fe93 	bl	8006728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005a02:	bf00      	nop
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20004540 	.word	0x20004540

08005a0c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005a10:	4802      	ldr	r0, [pc, #8]	; (8005a1c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8005a12:	f004 fb76 	bl	800a102 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005a16:	bf00      	nop
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	200043c8 	.word	0x200043c8

08005a20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005a24:	4802      	ldr	r0, [pc, #8]	; (8005a30 <USART1_IRQHandler+0x10>)
 8005a26:	f005 fc27 	bl	800b278 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005a2a:	bf00      	nop
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	200044b0 	.word	0x200044b0

08005a34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
  return 1;
 8005a38:	2301      	movs	r3, #1
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <_kill>:

int _kill(int pid, int sig)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005a4e:	f00a ff25 	bl	801089c <__errno>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2216      	movs	r2, #22
 8005a56:	601a      	str	r2, [r3, #0]
  return -1;
 8005a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <_exit>:

void _exit (int status)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff ffe7 	bl	8005a44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005a76:	e7fe      	b.n	8005a76 <_exit+0x12>

08005a78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a84:	2300      	movs	r3, #0
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	e00a      	b.n	8005aa0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005a8a:	f3af 8000 	nop.w
 8005a8e:	4601      	mov	r1, r0
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	60ba      	str	r2, [r7, #8]
 8005a96:	b2ca      	uxtb	r2, r1
 8005a98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	dbf0      	blt.n	8005a8a <_read+0x12>
  }

  return len;
 8005aa8:	687b      	ldr	r3, [r7, #4]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b086      	sub	sp, #24
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	e009      	b.n	8005ad8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	60ba      	str	r2, [r7, #8]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	dbf1      	blt.n	8005ac4 <_write+0x12>
  }
  return len;
 8005ae0:	687b      	ldr	r3, [r7, #4]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <_close>:

int _close(int file)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005af2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b12:	605a      	str	r2, [r3, #4]
  return 0;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <_isatty>:

int _isatty(int file)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005b2a:	2301      	movs	r3, #1
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b5c:	4a14      	ldr	r2, [pc, #80]	; (8005bb0 <_sbrk+0x5c>)
 8005b5e:	4b15      	ldr	r3, [pc, #84]	; (8005bb4 <_sbrk+0x60>)
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b68:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <_sbrk+0x64>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d102      	bne.n	8005b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b70:	4b11      	ldr	r3, [pc, #68]	; (8005bb8 <_sbrk+0x64>)
 8005b72:	4a12      	ldr	r2, [pc, #72]	; (8005bbc <_sbrk+0x68>)
 8005b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b76:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <_sbrk+0x64>)
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d207      	bcs.n	8005b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b84:	f00a fe8a 	bl	801089c <__errno>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	220c      	movs	r2, #12
 8005b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b92:	e009      	b.n	8005ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b94:	4b08      	ldr	r3, [pc, #32]	; (8005bb8 <_sbrk+0x64>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b9a:	4b07      	ldr	r3, [pc, #28]	; (8005bb8 <_sbrk+0x64>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	4a05      	ldr	r2, [pc, #20]	; (8005bb8 <_sbrk+0x64>)
 8005ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	20050000 	.word	0x20050000
 8005bb4:	00000c00 	.word	0x00000c00
 8005bb8:	20004414 	.word	0x20004414
 8005bbc:	20011678 	.word	0x20011678

08005bc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8005bc4:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <SystemInit+0x28>)
 8005bc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bca:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005bcc:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <SystemInit+0x28>)
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd2:	4a05      	ldr	r2, [pc, #20]	; (8005be8 <SystemInit+0x28>)
 8005bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005bdc:	bf00      	nop
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	e000ed00 	.word	0xe000ed00

08005bec <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08e      	sub	sp, #56	; 0x38
 8005bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	605a      	str	r2, [r3, #4]
 8005bfc:	609a      	str	r2, [r3, #8]
 8005bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c00:	f107 031c 	add.w	r3, r7, #28
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	605a      	str	r2, [r3, #4]
 8005c14:	609a      	str	r2, [r3, #8]
 8005c16:	60da      	str	r2, [r3, #12]
 8005c18:	611a      	str	r2, [r3, #16]
 8005c1a:	615a      	str	r2, [r3, #20]
 8005c1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005c1e:	4b2d      	ldr	r3, [pc, #180]	; (8005cd4 <MX_TIM2_Init+0xe8>)
 8005c20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005c26:	4b2b      	ldr	r3, [pc, #172]	; (8005cd4 <MX_TIM2_Init+0xe8>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c2c:	4b29      	ldr	r3, [pc, #164]	; (8005cd4 <MX_TIM2_Init+0xe8>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005c32:	4b28      	ldr	r3, [pc, #160]	; (8005cd4 <MX_TIM2_Init+0xe8>)
 8005c34:	f04f 32ff 	mov.w	r2, #4294967295
 8005c38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c3a:	4b26      	ldr	r3, [pc, #152]	; (8005cd4 <MX_TIM2_Init+0xe8>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c40:	4b24      	ldr	r3, [pc, #144]	; (8005cd4 <MX_TIM2_Init+0xe8>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005c46:	4823      	ldr	r0, [pc, #140]	; (8005cd4 <MX_TIM2_Init+0xe8>)
 8005c48:	f004 f88c 	bl	8009d64 <HAL_TIM_Base_Init>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005c52:	f7fd fb75 	bl	8003340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005c5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c60:	4619      	mov	r1, r3
 8005c62:	481c      	ldr	r0, [pc, #112]	; (8005cd4 <MX_TIM2_Init+0xe8>)
 8005c64:	f004 fc80 	bl	800a568 <HAL_TIM_ConfigClockSource>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005c6e:	f7fd fb67 	bl	8003340 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005c72:	4818      	ldr	r0, [pc, #96]	; (8005cd4 <MX_TIM2_Init+0xe8>)
 8005c74:	f004 f93e 	bl	8009ef4 <HAL_TIM_PWM_Init>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005c7e:	f7fd fb5f 	bl	8003340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c82:	2300      	movs	r3, #0
 8005c84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c86:	2300      	movs	r3, #0
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c8a:	f107 031c 	add.w	r3, r7, #28
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4810      	ldr	r0, [pc, #64]	; (8005cd4 <MX_TIM2_Init+0xe8>)
 8005c92:	f005 f965 	bl	800af60 <HAL_TIMEx_MasterConfigSynchronization>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005c9c:	f7fd fb50 	bl	8003340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ca0:	2360      	movs	r3, #96	; 0x60
 8005ca2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4807      	ldr	r0, [pc, #28]	; (8005cd4 <MX_TIM2_Init+0xe8>)
 8005cb8:	f004 fb42 	bl	800a340 <HAL_TIM_PWM_ConfigChannel>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8005cc2:	f7fd fb3d 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005cc6:	4803      	ldr	r0, [pc, #12]	; (8005cd4 <MX_TIM2_Init+0xe8>)
 8005cc8:	f000 f8bc 	bl	8005e44 <HAL_TIM_MspPostInit>

}
 8005ccc:	bf00      	nop
 8005cce:	3738      	adds	r7, #56	; 0x38
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	20004418 	.word	0x20004418

08005cd8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08c      	sub	sp, #48	; 0x30
 8005cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005cde:	f107 030c 	add.w	r3, r7, #12
 8005ce2:	2224      	movs	r2, #36	; 0x24
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f00a fe10 	bl	801090c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cec:	463b      	mov	r3, r7
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	605a      	str	r2, [r3, #4]
 8005cf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005cf6:	4b21      	ldr	r3, [pc, #132]	; (8005d7c <MX_TIM5_Init+0xa4>)
 8005cf8:	4a21      	ldr	r2, [pc, #132]	; (8005d80 <MX_TIM5_Init+0xa8>)
 8005cfa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8005cfc:	4b1f      	ldr	r3, [pc, #124]	; (8005d7c <MX_TIM5_Init+0xa4>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d02:	4b1e      	ldr	r3, [pc, #120]	; (8005d7c <MX_TIM5_Init+0xa4>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8005d08:	4b1c      	ldr	r3, [pc, #112]	; (8005d7c <MX_TIM5_Init+0xa4>)
 8005d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d10:	4b1a      	ldr	r3, [pc, #104]	; (8005d7c <MX_TIM5_Init+0xa4>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d16:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <MX_TIM5_Init+0xa4>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005d20:	2300      	movs	r3, #0
 8005d22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005d24:	2301      	movs	r3, #1
 8005d26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8005d2c:	230f      	movs	r3, #15
 8005d2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005d30:	2300      	movs	r3, #0
 8005d32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005d34:	2301      	movs	r3, #1
 8005d36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8005d3c:	230f      	movs	r3, #15
 8005d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8005d40:	f107 030c 	add.w	r3, r7, #12
 8005d44:	4619      	mov	r1, r3
 8005d46:	480d      	ldr	r0, [pc, #52]	; (8005d7c <MX_TIM5_Init+0xa4>)
 8005d48:	f004 f935 	bl	8009fb6 <HAL_TIM_Encoder_Init>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8005d52:	f7fd faf5 	bl	8003340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d56:	2300      	movs	r3, #0
 8005d58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005d5e:	463b      	mov	r3, r7
 8005d60:	4619      	mov	r1, r3
 8005d62:	4806      	ldr	r0, [pc, #24]	; (8005d7c <MX_TIM5_Init+0xa4>)
 8005d64:	f005 f8fc 	bl	800af60 <HAL_TIMEx_MasterConfigSynchronization>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8005d6e:	f7fd fae7 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005d72:	bf00      	nop
 8005d74:	3730      	adds	r7, #48	; 0x30
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20004464 	.word	0x20004464
 8005d80:	40000c00 	.word	0x40000c00

08005d84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d94:	d10b      	bne.n	8005dae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d96:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <HAL_TIM_Base_MspInit+0x38>)
 8005d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9a:	4a08      	ldr	r2, [pc, #32]	; (8005dbc <HAL_TIM_Base_MspInit+0x38>)
 8005d9c:	f043 0301 	orr.w	r3, r3, #1
 8005da0:	6593      	str	r3, [r2, #88]	; 0x58
 8005da2:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <HAL_TIM_Base_MspInit+0x38>)
 8005da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40021000 	.word	0x40021000

08005dc0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08a      	sub	sp, #40	; 0x28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dc8:	f107 0314 	add.w	r3, r7, #20
 8005dcc:	2200      	movs	r2, #0
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	605a      	str	r2, [r3, #4]
 8005dd2:	609a      	str	r2, [r3, #8]
 8005dd4:	60da      	str	r2, [r3, #12]
 8005dd6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a17      	ldr	r2, [pc, #92]	; (8005e3c <HAL_TIM_Encoder_MspInit+0x7c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d128      	bne.n	8005e34 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005de2:	4b17      	ldr	r3, [pc, #92]	; (8005e40 <HAL_TIM_Encoder_MspInit+0x80>)
 8005de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de6:	4a16      	ldr	r2, [pc, #88]	; (8005e40 <HAL_TIM_Encoder_MspInit+0x80>)
 8005de8:	f043 0308 	orr.w	r3, r3, #8
 8005dec:	6593      	str	r3, [r2, #88]	; 0x58
 8005dee:	4b14      	ldr	r3, [pc, #80]	; (8005e40 <HAL_TIM_Encoder_MspInit+0x80>)
 8005df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dfa:	4b11      	ldr	r3, [pc, #68]	; (8005e40 <HAL_TIM_Encoder_MspInit+0x80>)
 8005dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dfe:	4a10      	ldr	r2, [pc, #64]	; (8005e40 <HAL_TIM_Encoder_MspInit+0x80>)
 8005e00:	f043 0301 	orr.w	r3, r3, #1
 8005e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e06:	4b0e      	ldr	r3, [pc, #56]	; (8005e40 <HAL_TIM_Encoder_MspInit+0x80>)
 8005e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005e12:	2303      	movs	r3, #3
 8005e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e16:	2302      	movs	r3, #2
 8005e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005e22:	2302      	movs	r3, #2
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e26:	f107 0314 	add.w	r3, r7, #20
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e30:	f000 fdca 	bl	80069c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005e34:	bf00      	nop
 8005e36:	3728      	adds	r7, #40	; 0x28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	40000c00 	.word	0x40000c00
 8005e40:	40021000 	.word	0x40021000

08005e44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e4c:	f107 030c 	add.w	r3, r7, #12
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	605a      	str	r2, [r3, #4]
 8005e56:	609a      	str	r2, [r3, #8]
 8005e58:	60da      	str	r2, [r3, #12]
 8005e5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e64:	d11d      	bne.n	8005ea2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e66:	4b11      	ldr	r3, [pc, #68]	; (8005eac <HAL_TIM_MspPostInit+0x68>)
 8005e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6a:	4a10      	ldr	r2, [pc, #64]	; (8005eac <HAL_TIM_MspPostInit+0x68>)
 8005e6c:	f043 0301 	orr.w	r3, r3, #1
 8005e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e72:	4b0e      	ldr	r3, [pc, #56]	; (8005eac <HAL_TIM_MspPostInit+0x68>)
 8005e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	60bb      	str	r3, [r7, #8]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e84:	2302      	movs	r3, #2
 8005e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005e90:	2301      	movs	r3, #1
 8005e92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e94:	f107 030c 	add.w	r3, r7, #12
 8005e98:	4619      	mov	r1, r3
 8005e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e9e:	f000 fd93 	bl	80069c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005ea2:	bf00      	nop
 8005ea4:	3720      	adds	r7, #32
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	40021000 	.word	0x40021000

08005eb0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005eb4:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005eb6:	4a25      	ldr	r2, [pc, #148]	; (8005f4c <MX_USART1_UART_Init+0x9c>)
 8005eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 8005eba:	4b23      	ldr	r3, [pc, #140]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005ebc:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8005ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005ec2:	4b21      	ldr	r3, [pc, #132]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ec8:	4b1f      	ldr	r3, [pc, #124]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005ece:	4b1e      	ldr	r3, [pc, #120]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ed4:	4b1c      	ldr	r3, [pc, #112]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005ed6:	220c      	movs	r2, #12
 8005ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005eda:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ee0:	4b19      	ldr	r3, [pc, #100]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ee6:	4b18      	ldr	r3, [pc, #96]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005eec:	4b16      	ldr	r3, [pc, #88]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8005ef2:	4b15      	ldr	r3, [pc, #84]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005ef4:	2210      	movs	r2, #16
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8005ef8:	4b13      	ldr	r3, [pc, #76]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005efa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005efe:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f00:	4811      	ldr	r0, [pc, #68]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005f02:	f005 f8d3 	bl	800b0ac <HAL_UART_Init>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8005f0c:	f7fd fa18 	bl	8003340 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f10:	2100      	movs	r1, #0
 8005f12:	480d      	ldr	r0, [pc, #52]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005f14:	f006 fc78 	bl	800c808 <HAL_UARTEx_SetTxFifoThreshold>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 8005f1e:	f7fd fa0f 	bl	8003340 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f22:	2100      	movs	r1, #0
 8005f24:	4808      	ldr	r0, [pc, #32]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005f26:	f006 fcad 	bl	800c884 <HAL_UARTEx_SetRxFifoThreshold>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 8005f30:	f7fd fa06 	bl	8003340 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005f34:	4804      	ldr	r0, [pc, #16]	; (8005f48 <MX_USART1_UART_Init+0x98>)
 8005f36:	f006 fc2e 	bl	800c796 <HAL_UARTEx_DisableFifoMode>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8005f40:	f7fd f9fe 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005f44:	bf00      	nop
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	200044b0 	.word	0x200044b0
 8005f4c:	40013800 	.word	0x40013800

08005f50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b0b0      	sub	sp, #192	; 0xc0
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f58:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	605a      	str	r2, [r3, #4]
 8005f62:	609a      	str	r2, [r3, #8]
 8005f64:	60da      	str	r2, [r3, #12]
 8005f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005f68:	f107 0314 	add.w	r3, r7, #20
 8005f6c:	2298      	movs	r2, #152	; 0x98
 8005f6e:	2100      	movs	r1, #0
 8005f70:	4618      	mov	r0, r3
 8005f72:	f00a fccb 	bl	801090c <memset>
  if(uartHandle->Instance==USART1)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a36      	ldr	r2, [pc, #216]	; (8006054 <HAL_UART_MspInit+0x104>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d165      	bne.n	800604c <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005f80:	2301      	movs	r3, #1
 8005f82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005f84:	2300      	movs	r3, #0
 8005f86:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f88:	f107 0314 	add.w	r3, r7, #20
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 ff97 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005f98:	f7fd f9d2 	bl	8003340 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f9c:	4b2e      	ldr	r3, [pc, #184]	; (8006058 <HAL_UART_MspInit+0x108>)
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa0:	4a2d      	ldr	r2, [pc, #180]	; (8006058 <HAL_UART_MspInit+0x108>)
 8005fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fa6:	6613      	str	r3, [r2, #96]	; 0x60
 8005fa8:	4b2b      	ldr	r3, [pc, #172]	; (8006058 <HAL_UART_MspInit+0x108>)
 8005faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fb4:	4b28      	ldr	r3, [pc, #160]	; (8006058 <HAL_UART_MspInit+0x108>)
 8005fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb8:	4a27      	ldr	r2, [pc, #156]	; (8006058 <HAL_UART_MspInit+0x108>)
 8005fba:	f043 0301 	orr.w	r3, r3, #1
 8005fbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fc0:	4b25      	ldr	r3, [pc, #148]	; (8006058 <HAL_UART_MspInit+0x108>)
 8005fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005fcc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005fe6:	2307      	movs	r3, #7
 8005fe8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ff6:	f000 fce7 	bl	80069c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8005ffa:	4b18      	ldr	r3, [pc, #96]	; (800605c <HAL_UART_MspInit+0x10c>)
 8005ffc:	4a18      	ldr	r2, [pc, #96]	; (8006060 <HAL_UART_MspInit+0x110>)
 8005ffe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8006000:	4b16      	ldr	r3, [pc, #88]	; (800605c <HAL_UART_MspInit+0x10c>)
 8006002:	2219      	movs	r2, #25
 8006004:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006006:	4b15      	ldr	r3, [pc, #84]	; (800605c <HAL_UART_MspInit+0x10c>)
 8006008:	2200      	movs	r2, #0
 800600a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800600c:	4b13      	ldr	r3, [pc, #76]	; (800605c <HAL_UART_MspInit+0x10c>)
 800600e:	2200      	movs	r2, #0
 8006010:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006012:	4b12      	ldr	r3, [pc, #72]	; (800605c <HAL_UART_MspInit+0x10c>)
 8006014:	2280      	movs	r2, #128	; 0x80
 8006016:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006018:	4b10      	ldr	r3, [pc, #64]	; (800605c <HAL_UART_MspInit+0x10c>)
 800601a:	2200      	movs	r2, #0
 800601c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800601e:	4b0f      	ldr	r3, [pc, #60]	; (800605c <HAL_UART_MspInit+0x10c>)
 8006020:	2200      	movs	r2, #0
 8006022:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006024:	4b0d      	ldr	r3, [pc, #52]	; (800605c <HAL_UART_MspInit+0x10c>)
 8006026:	2200      	movs	r2, #0
 8006028:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800602a:	4b0c      	ldr	r3, [pc, #48]	; (800605c <HAL_UART_MspInit+0x10c>)
 800602c:	2200      	movs	r2, #0
 800602e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006030:	480a      	ldr	r0, [pc, #40]	; (800605c <HAL_UART_MspInit+0x10c>)
 8006032:	f000 f99b 	bl	800636c <HAL_DMA_Init>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800603c:	f7fd f980 	bl	8003340 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a06      	ldr	r2, [pc, #24]	; (800605c <HAL_UART_MspInit+0x10c>)
 8006044:	67da      	str	r2, [r3, #124]	; 0x7c
 8006046:	4a05      	ldr	r2, [pc, #20]	; (800605c <HAL_UART_MspInit+0x10c>)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800604c:	bf00      	nop
 800604e:	37c0      	adds	r7, #192	; 0xc0
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	40013800 	.word	0x40013800
 8006058:	40021000 	.word	0x40021000
 800605c:	20004540 	.word	0x20004540
 8006060:	40020008 	.word	0x40020008

08006064 <Reset_Handler>:
 8006064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800609c <LoopForever+0x2>
 8006068:	f7ff fdaa 	bl	8005bc0 <SystemInit>
 800606c:	480c      	ldr	r0, [pc, #48]	; (80060a0 <LoopForever+0x6>)
 800606e:	490d      	ldr	r1, [pc, #52]	; (80060a4 <LoopForever+0xa>)
 8006070:	4a0d      	ldr	r2, [pc, #52]	; (80060a8 <LoopForever+0xe>)
 8006072:	2300      	movs	r3, #0
 8006074:	e002      	b.n	800607c <LoopCopyDataInit>

08006076 <CopyDataInit>:
 8006076:	58d4      	ldr	r4, [r2, r3]
 8006078:	50c4      	str	r4, [r0, r3]
 800607a:	3304      	adds	r3, #4

0800607c <LoopCopyDataInit>:
 800607c:	18c4      	adds	r4, r0, r3
 800607e:	428c      	cmp	r4, r1
 8006080:	d3f9      	bcc.n	8006076 <CopyDataInit>
 8006082:	4a0a      	ldr	r2, [pc, #40]	; (80060ac <LoopForever+0x12>)
 8006084:	4c0a      	ldr	r4, [pc, #40]	; (80060b0 <LoopForever+0x16>)
 8006086:	2300      	movs	r3, #0
 8006088:	e001      	b.n	800608e <LoopFillZerobss>

0800608a <FillZerobss>:
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	3204      	adds	r2, #4

0800608e <LoopFillZerobss>:
 800608e:	42a2      	cmp	r2, r4
 8006090:	d3fb      	bcc.n	800608a <FillZerobss>
 8006092:	f00a fc09 	bl	80108a8 <__libc_init_array>
 8006096:	f7fd f8a3 	bl	80031e0 <main>

0800609a <LoopForever>:
 800609a:	e7fe      	b.n	800609a <LoopForever>
 800609c:	20050000 	.word	0x20050000
 80060a0:	20000000 	.word	0x20000000
 80060a4:	20000258 	.word	0x20000258
 80060a8:	08015ddc 	.word	0x08015ddc
 80060ac:	20000258 	.word	0x20000258
 80060b0:	20011674 	.word	0x20011674

080060b4 <ADC1_2_IRQHandler>:
 80060b4:	e7fe      	b.n	80060b4 <ADC1_2_IRQHandler>

080060b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060c0:	2003      	movs	r0, #3
 80060c2:	f000 f919 	bl	80062f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80060c6:	2000      	movs	r0, #0
 80060c8:	f7ff fc12 	bl	80058f0 <HAL_InitTick>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	71fb      	strb	r3, [r7, #7]
 80060d6:	e001      	b.n	80060dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80060d8:	f7ff fbe2 	bl	80058a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80060dc:	79fb      	ldrb	r3, [r7, #7]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
	...

080060e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80060ec:	4b06      	ldr	r3, [pc, #24]	; (8006108 <HAL_IncTick+0x20>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	461a      	mov	r2, r3
 80060f2:	4b06      	ldr	r3, [pc, #24]	; (800610c <HAL_IncTick+0x24>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4413      	add	r3, r2
 80060f8:	4a04      	ldr	r2, [pc, #16]	; (800610c <HAL_IncTick+0x24>)
 80060fa:	6013      	str	r3, [r2, #0]
}
 80060fc:	bf00      	nop
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	2000007c 	.word	0x2000007c
 800610c:	200045a0 	.word	0x200045a0

08006110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  return uwTick;
 8006114:	4b03      	ldr	r3, [pc, #12]	; (8006124 <HAL_GetTick+0x14>)
 8006116:	681b      	ldr	r3, [r3, #0]
}
 8006118:	4618      	mov	r0, r3
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	200045a0 	.word	0x200045a0

08006128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006130:	f7ff ffee 	bl	8006110 <HAL_GetTick>
 8006134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006140:	d005      	beq.n	800614e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006142:	4b0a      	ldr	r3, [pc, #40]	; (800616c <HAL_Delay+0x44>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800614e:	bf00      	nop
 8006150:	f7ff ffde 	bl	8006110 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	429a      	cmp	r2, r3
 800615e:	d8f7      	bhi.n	8006150 <HAL_Delay+0x28>
  {
  }
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	2000007c 	.word	0x2000007c

08006170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006180:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <__NVIC_SetPriorityGrouping+0x44>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800618c:	4013      	ands	r3, r2
 800618e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800619c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061a2:	4a04      	ldr	r2, [pc, #16]	; (80061b4 <__NVIC_SetPriorityGrouping+0x44>)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	60d3      	str	r3, [r2, #12]
}
 80061a8:	bf00      	nop
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	e000ed00 	.word	0xe000ed00

080061b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061bc:	4b04      	ldr	r3, [pc, #16]	; (80061d0 <__NVIC_GetPriorityGrouping+0x18>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	0a1b      	lsrs	r3, r3, #8
 80061c2:	f003 0307 	and.w	r3, r3, #7
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	e000ed00 	.word	0xe000ed00

080061d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	4603      	mov	r3, r0
 80061dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	db0b      	blt.n	80061fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	f003 021f 	and.w	r2, r3, #31
 80061ec:	4907      	ldr	r1, [pc, #28]	; (800620c <__NVIC_EnableIRQ+0x38>)
 80061ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	2001      	movs	r0, #1
 80061f6:	fa00 f202 	lsl.w	r2, r0, r2
 80061fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	e000e100 	.word	0xe000e100

08006210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	4603      	mov	r3, r0
 8006218:	6039      	str	r1, [r7, #0]
 800621a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800621c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006220:	2b00      	cmp	r3, #0
 8006222:	db0a      	blt.n	800623a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	b2da      	uxtb	r2, r3
 8006228:	490c      	ldr	r1, [pc, #48]	; (800625c <__NVIC_SetPriority+0x4c>)
 800622a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800622e:	0112      	lsls	r2, r2, #4
 8006230:	b2d2      	uxtb	r2, r2
 8006232:	440b      	add	r3, r1
 8006234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006238:	e00a      	b.n	8006250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	b2da      	uxtb	r2, r3
 800623e:	4908      	ldr	r1, [pc, #32]	; (8006260 <__NVIC_SetPriority+0x50>)
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	3b04      	subs	r3, #4
 8006248:	0112      	lsls	r2, r2, #4
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	440b      	add	r3, r1
 800624e:	761a      	strb	r2, [r3, #24]
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	e000e100 	.word	0xe000e100
 8006260:	e000ed00 	.word	0xe000ed00

08006264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006264:	b480      	push	{r7}
 8006266:	b089      	sub	sp, #36	; 0x24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f003 0307 	and.w	r3, r3, #7
 8006276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	f1c3 0307 	rsb	r3, r3, #7
 800627e:	2b04      	cmp	r3, #4
 8006280:	bf28      	it	cs
 8006282:	2304      	movcs	r3, #4
 8006284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	3304      	adds	r3, #4
 800628a:	2b06      	cmp	r3, #6
 800628c:	d902      	bls.n	8006294 <NVIC_EncodePriority+0x30>
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	3b03      	subs	r3, #3
 8006292:	e000      	b.n	8006296 <NVIC_EncodePriority+0x32>
 8006294:	2300      	movs	r3, #0
 8006296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006298:	f04f 32ff 	mov.w	r2, #4294967295
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	43da      	mvns	r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	401a      	ands	r2, r3
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062ac:	f04f 31ff 	mov.w	r1, #4294967295
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	fa01 f303 	lsl.w	r3, r1, r3
 80062b6:	43d9      	mvns	r1, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062bc:	4313      	orrs	r3, r2
         );
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3724      	adds	r7, #36	; 0x24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
	...

080062cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80062d0:	f3bf 8f4f 	dsb	sy
}
 80062d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80062d6:	4b06      	ldr	r3, [pc, #24]	; (80062f0 <__NVIC_SystemReset+0x24>)
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80062de:	4904      	ldr	r1, [pc, #16]	; (80062f0 <__NVIC_SystemReset+0x24>)
 80062e0:	4b04      	ldr	r3, [pc, #16]	; (80062f4 <__NVIC_SystemReset+0x28>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80062e6:	f3bf 8f4f 	dsb	sy
}
 80062ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80062ec:	bf00      	nop
 80062ee:	e7fd      	b.n	80062ec <__NVIC_SystemReset+0x20>
 80062f0:	e000ed00 	.word	0xe000ed00
 80062f4:	05fa0004 	.word	0x05fa0004

080062f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ff35 	bl	8006170 <__NVIC_SetPriorityGrouping>
}
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b086      	sub	sp, #24
 8006312:	af00      	add	r7, sp, #0
 8006314:	4603      	mov	r3, r0
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	607a      	str	r2, [r7, #4]
 800631a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800631c:	2300      	movs	r3, #0
 800631e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006320:	f7ff ff4a 	bl	80061b8 <__NVIC_GetPriorityGrouping>
 8006324:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	6978      	ldr	r0, [r7, #20]
 800632c:	f7ff ff9a 	bl	8006264 <NVIC_EncodePriority>
 8006330:	4602      	mov	r2, r0
 8006332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006336:	4611      	mov	r1, r2
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff ff69 	bl	8006210 <__NVIC_SetPriority>
}
 800633e:	bf00      	nop
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	4603      	mov	r3, r0
 800634e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff ff3d 	bl	80061d4 <__NVIC_EnableIRQ>
}
 800635a:	bf00      	nop
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006366:	f7ff ffb1 	bl	80062cc <__NVIC_SystemReset>
	...

0800636c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e08d      	b.n	800649a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	4b47      	ldr	r3, [pc, #284]	; (80064a4 <HAL_DMA_Init+0x138>)
 8006386:	429a      	cmp	r2, r3
 8006388:	d80f      	bhi.n	80063aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	4b45      	ldr	r3, [pc, #276]	; (80064a8 <HAL_DMA_Init+0x13c>)
 8006392:	4413      	add	r3, r2
 8006394:	4a45      	ldr	r2, [pc, #276]	; (80064ac <HAL_DMA_Init+0x140>)
 8006396:	fba2 2303 	umull	r2, r3, r2, r3
 800639a:	091b      	lsrs	r3, r3, #4
 800639c:	009a      	lsls	r2, r3, #2
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a42      	ldr	r2, [pc, #264]	; (80064b0 <HAL_DMA_Init+0x144>)
 80063a6:	641a      	str	r2, [r3, #64]	; 0x40
 80063a8:	e00e      	b.n	80063c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	4b40      	ldr	r3, [pc, #256]	; (80064b4 <HAL_DMA_Init+0x148>)
 80063b2:	4413      	add	r3, r2
 80063b4:	4a3d      	ldr	r2, [pc, #244]	; (80064ac <HAL_DMA_Init+0x140>)
 80063b6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ba:	091b      	lsrs	r3, r3, #4
 80063bc:	009a      	lsls	r2, r3, #2
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a3c      	ldr	r2, [pc, #240]	; (80064b8 <HAL_DMA_Init+0x14c>)
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80063ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fa72 	bl	8006904 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006428:	d102      	bne.n	8006430 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006444:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d010      	beq.n	8006470 <HAL_DMA_Init+0x104>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2b04      	cmp	r3, #4
 8006454:	d80c      	bhi.n	8006470 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fa92 	bl	8006980 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800646c:	605a      	str	r2, [r3, #4]
 800646e:	e008      	b.n	8006482 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40020407 	.word	0x40020407
 80064a8:	bffdfff8 	.word	0xbffdfff8
 80064ac:	cccccccd 	.word	0xcccccccd
 80064b0:	40020000 	.word	0x40020000
 80064b4:	bffdfbf8 	.word	0xbffdfbf8
 80064b8:	40020400 	.word	0x40020400

080064bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_DMA_Start_IT+0x20>
 80064d8:	2302      	movs	r3, #2
 80064da:	e066      	b.n	80065aa <HAL_DMA_Start_IT+0xee>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d155      	bne.n	800659c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0201 	bic.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	68b9      	ldr	r1, [r7, #8]
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 f9b6 	bl	8006886 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651e:	2b00      	cmp	r3, #0
 8006520:	d008      	beq.n	8006534 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f042 020e 	orr.w	r2, r2, #14
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	e00f      	b.n	8006554 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0204 	bic.w	r2, r2, #4
 8006542:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 020a 	orr.w	r2, r2, #10
 8006552:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d007      	beq.n	8006572 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800656c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006570:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006576:	2b00      	cmp	r3, #0
 8006578:	d007      	beq.n	800658a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006588:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0201 	orr.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	e005      	b.n	80065a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80065a4:	2302      	movs	r3, #2
 80065a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d008      	beq.n	80065dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2204      	movs	r2, #4
 80065ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e040      	b.n	800665e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 020e 	bic.w	r2, r2, #14
 80065ea:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065fa:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0201 	bic.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006610:	f003 021c 	and.w	r2, r3, #28
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	2101      	movs	r1, #1
 800661a:	fa01 f202 	lsl.w	r2, r1, r2
 800661e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006628:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00c      	beq.n	800664c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006640:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800664a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d005      	beq.n	800668e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2204      	movs	r2, #4
 8006686:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	73fb      	strb	r3, [r7, #15]
 800668c:	e047      	b.n	800671e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 020e 	bic.w	r2, r2, #14
 800669c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0201 	bic.w	r2, r2, #1
 80066ac:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c2:	f003 021c 	and.w	r2, r3, #28
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	2101      	movs	r1, #1
 80066cc:	fa01 f202 	lsl.w	r2, r1, r2
 80066d0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066da:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00c      	beq.n	80066fe <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80066fc:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	4798      	blx	r3
    }
  }
  return status;
 800671e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006744:	f003 031c 	and.w	r3, r3, #28
 8006748:	2204      	movs	r2, #4
 800674a:	409a      	lsls	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4013      	ands	r3, r2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d026      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x7a>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b00      	cmp	r3, #0
 800675c:	d021      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b00      	cmp	r3, #0
 800676a:	d107      	bne.n	800677c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0204 	bic.w	r2, r2, #4
 800677a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006780:	f003 021c 	and.w	r2, r3, #28
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006788:	2104      	movs	r1, #4
 800678a:	fa01 f202 	lsl.w	r2, r1, r2
 800678e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006794:	2b00      	cmp	r3, #0
 8006796:	d071      	beq.n	800687c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80067a0:	e06c      	b.n	800687c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a6:	f003 031c 	and.w	r3, r3, #28
 80067aa:	2202      	movs	r2, #2
 80067ac:	409a      	lsls	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4013      	ands	r3, r2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d02e      	beq.n	8006814 <HAL_DMA_IRQHandler+0xec>
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d029      	beq.n	8006814 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10b      	bne.n	80067e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 020a 	bic.w	r2, r2, #10
 80067dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ea:	f003 021c 	and.w	r2, r3, #28
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	2102      	movs	r1, #2
 80067f4:	fa01 f202 	lsl.w	r2, r1, r2
 80067f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d038      	beq.n	800687c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006812:	e033      	b.n	800687c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006818:	f003 031c 	and.w	r3, r3, #28
 800681c:	2208      	movs	r2, #8
 800681e:	409a      	lsls	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4013      	ands	r3, r2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d02a      	beq.n	800687e <HAL_DMA_IRQHandler+0x156>
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d025      	beq.n	800687e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 020e 	bic.w	r2, r2, #14
 8006840:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006846:	f003 021c 	and.w	r2, r3, #28
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	2101      	movs	r1, #1
 8006850:	fa01 f202 	lsl.w	r2, r1, r2
 8006854:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006870:	2b00      	cmp	r3, #0
 8006872:	d004      	beq.n	800687e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800687c:	bf00      	nop
 800687e:	bf00      	nop
}
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006886:	b480      	push	{r7}
 8006888:	b085      	sub	sp, #20
 800688a:	af00      	add	r7, sp, #0
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	607a      	str	r2, [r7, #4]
 8006892:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800689c:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80068ae:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b4:	f003 021c 	and.w	r2, r3, #28
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068bc:	2101      	movs	r1, #1
 80068be:	fa01 f202 	lsl.w	r2, r1, r2
 80068c2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	d108      	bne.n	80068e6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80068e4:	e007      	b.n	80068f6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	60da      	str	r2, [r3, #12]
}
 80068f6:	bf00      	nop
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
	...

08006904 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	4b17      	ldr	r3, [pc, #92]	; (8006970 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006914:	429a      	cmp	r2, r3
 8006916:	d80a      	bhi.n	800692e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691c:	089b      	lsrs	r3, r3, #2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006924:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6493      	str	r3, [r2, #72]	; 0x48
 800692c:	e007      	b.n	800693e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006932:	089b      	lsrs	r3, r3, #2
 8006934:	009a      	lsls	r2, r3, #2
 8006936:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006938:	4413      	add	r3, r2
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	3b08      	subs	r3, #8
 8006946:	4a0c      	ldr	r2, [pc, #48]	; (8006978 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006948:	fba2 2303 	umull	r2, r3, r2, r3
 800694c:	091b      	lsrs	r3, r3, #4
 800694e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a0a      	ldr	r2, [pc, #40]	; (800697c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006954:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f003 031f 	and.w	r3, r3, #31
 800695c:	2201      	movs	r2, #1
 800695e:	409a      	lsls	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006964:	bf00      	nop
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	40020407 	.word	0x40020407
 8006974:	4002081c 	.word	0x4002081c
 8006978:	cccccccd 	.word	0xcccccccd
 800697c:	40020880 	.word	0x40020880

08006980 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006994:	4413      	add	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	461a      	mov	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a08      	ldr	r2, [pc, #32]	; (80069c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80069a2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	f003 0303 	and.w	r3, r3, #3
 80069ac:	2201      	movs	r2, #1
 80069ae:	409a      	lsls	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80069b4:	bf00      	nop
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	1000823f 	.word	0x1000823f
 80069c4:	40020940 	.word	0x40020940

080069c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069d2:	2300      	movs	r3, #0
 80069d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069d6:	e166      	b.n	8006ca6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	2101      	movs	r1, #1
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	fa01 f303 	lsl.w	r3, r1, r3
 80069e4:	4013      	ands	r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 8158 	beq.w	8006ca0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d005      	beq.n	8006a08 <HAL_GPIO_Init+0x40>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d130      	bne.n	8006a6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	2203      	movs	r2, #3
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a3e:	2201      	movs	r2, #1
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	fa02 f303 	lsl.w	r3, r2, r3
 8006a46:	43db      	mvns	r3, r3
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	091b      	lsrs	r3, r3, #4
 8006a54:	f003 0201 	and.w	r2, r3, #1
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d017      	beq.n	8006aa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	2203      	movs	r2, #3
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	43db      	mvns	r3, r3
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	689a      	ldr	r2, [r3, #8]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d123      	bne.n	8006afa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	08da      	lsrs	r2, r3, #3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3208      	adds	r2, #8
 8006aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	220f      	movs	r2, #15
 8006aca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ace:	43db      	mvns	r3, r3
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	691a      	ldr	r2, [r3, #16]
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	08da      	lsrs	r2, r3, #3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3208      	adds	r2, #8
 8006af4:	6939      	ldr	r1, [r7, #16]
 8006af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	2203      	movs	r2, #3
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	43db      	mvns	r3, r3
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f003 0203 	and.w	r2, r3, #3
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 80b2 	beq.w	8006ca0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b3c:	4b61      	ldr	r3, [pc, #388]	; (8006cc4 <HAL_GPIO_Init+0x2fc>)
 8006b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b40:	4a60      	ldr	r2, [pc, #384]	; (8006cc4 <HAL_GPIO_Init+0x2fc>)
 8006b42:	f043 0301 	orr.w	r3, r3, #1
 8006b46:	6613      	str	r3, [r2, #96]	; 0x60
 8006b48:	4b5e      	ldr	r3, [pc, #376]	; (8006cc4 <HAL_GPIO_Init+0x2fc>)
 8006b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	60bb      	str	r3, [r7, #8]
 8006b52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006b54:	4a5c      	ldr	r2, [pc, #368]	; (8006cc8 <HAL_GPIO_Init+0x300>)
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	089b      	lsrs	r3, r3, #2
 8006b5a:	3302      	adds	r3, #2
 8006b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f003 0303 	and.w	r3, r3, #3
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	220f      	movs	r2, #15
 8006b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b70:	43db      	mvns	r3, r3
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4013      	ands	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006b7e:	d02b      	beq.n	8006bd8 <HAL_GPIO_Init+0x210>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a52      	ldr	r2, [pc, #328]	; (8006ccc <HAL_GPIO_Init+0x304>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d025      	beq.n	8006bd4 <HAL_GPIO_Init+0x20c>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a51      	ldr	r2, [pc, #324]	; (8006cd0 <HAL_GPIO_Init+0x308>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d01f      	beq.n	8006bd0 <HAL_GPIO_Init+0x208>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a50      	ldr	r2, [pc, #320]	; (8006cd4 <HAL_GPIO_Init+0x30c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d019      	beq.n	8006bcc <HAL_GPIO_Init+0x204>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a4f      	ldr	r2, [pc, #316]	; (8006cd8 <HAL_GPIO_Init+0x310>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d013      	beq.n	8006bc8 <HAL_GPIO_Init+0x200>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a4e      	ldr	r2, [pc, #312]	; (8006cdc <HAL_GPIO_Init+0x314>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00d      	beq.n	8006bc4 <HAL_GPIO_Init+0x1fc>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a4d      	ldr	r2, [pc, #308]	; (8006ce0 <HAL_GPIO_Init+0x318>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d007      	beq.n	8006bc0 <HAL_GPIO_Init+0x1f8>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a4c      	ldr	r2, [pc, #304]	; (8006ce4 <HAL_GPIO_Init+0x31c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d101      	bne.n	8006bbc <HAL_GPIO_Init+0x1f4>
 8006bb8:	2307      	movs	r3, #7
 8006bba:	e00e      	b.n	8006bda <HAL_GPIO_Init+0x212>
 8006bbc:	2308      	movs	r3, #8
 8006bbe:	e00c      	b.n	8006bda <HAL_GPIO_Init+0x212>
 8006bc0:	2306      	movs	r3, #6
 8006bc2:	e00a      	b.n	8006bda <HAL_GPIO_Init+0x212>
 8006bc4:	2305      	movs	r3, #5
 8006bc6:	e008      	b.n	8006bda <HAL_GPIO_Init+0x212>
 8006bc8:	2304      	movs	r3, #4
 8006bca:	e006      	b.n	8006bda <HAL_GPIO_Init+0x212>
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e004      	b.n	8006bda <HAL_GPIO_Init+0x212>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e002      	b.n	8006bda <HAL_GPIO_Init+0x212>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e000      	b.n	8006bda <HAL_GPIO_Init+0x212>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	f002 0203 	and.w	r2, r2, #3
 8006be0:	0092      	lsls	r2, r2, #2
 8006be2:	4093      	lsls	r3, r2
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006bea:	4937      	ldr	r1, [pc, #220]	; (8006cc8 <HAL_GPIO_Init+0x300>)
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	089b      	lsrs	r3, r3, #2
 8006bf0:	3302      	adds	r3, #2
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006bf8:	4b3b      	ldr	r3, [pc, #236]	; (8006ce8 <HAL_GPIO_Init+0x320>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	43db      	mvns	r3, r3
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	4013      	ands	r3, r2
 8006c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006c1c:	4a32      	ldr	r2, [pc, #200]	; (8006ce8 <HAL_GPIO_Init+0x320>)
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006c22:	4b31      	ldr	r3, [pc, #196]	; (8006ce8 <HAL_GPIO_Init+0x320>)
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	43db      	mvns	r3, r3
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006c46:	4a28      	ldr	r2, [pc, #160]	; (8006ce8 <HAL_GPIO_Init+0x320>)
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006c4c:	4b26      	ldr	r3, [pc, #152]	; (8006ce8 <HAL_GPIO_Init+0x320>)
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	43db      	mvns	r3, r3
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006c70:	4a1d      	ldr	r2, [pc, #116]	; (8006ce8 <HAL_GPIO_Init+0x320>)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006c76:	4b1c      	ldr	r3, [pc, #112]	; (8006ce8 <HAL_GPIO_Init+0x320>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	43db      	mvns	r3, r3
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4013      	ands	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006c9a:	4a13      	ldr	r2, [pc, #76]	; (8006ce8 <HAL_GPIO_Init+0x320>)
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f47f ae91 	bne.w	80069d8 <HAL_GPIO_Init+0x10>
  }
}
 8006cb6:	bf00      	nop
 8006cb8:	bf00      	nop
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	40021000 	.word	0x40021000
 8006cc8:	40010000 	.word	0x40010000
 8006ccc:	48000400 	.word	0x48000400
 8006cd0:	48000800 	.word	0x48000800
 8006cd4:	48000c00 	.word	0x48000c00
 8006cd8:	48001000 	.word	0x48001000
 8006cdc:	48001400 	.word	0x48001400
 8006ce0:	48001800 	.word	0x48001800
 8006ce4:	48001c00 	.word	0x48001c00
 8006ce8:	40010400 	.word	0x40010400

08006cec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691a      	ldr	r2, [r3, #16]
 8006cfc:	887b      	ldrh	r3, [r7, #2]
 8006cfe:	4013      	ands	r3, r2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d04:	2301      	movs	r3, #1
 8006d06:	73fb      	strb	r3, [r7, #15]
 8006d08:	e001      	b.n	8006d0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	807b      	strh	r3, [r7, #2]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d2c:	787b      	ldrb	r3, [r7, #1]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006d32:	887a      	ldrh	r2, [r7, #2]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006d38:	e002      	b.n	8006d40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006d3a:	887a      	ldrh	r2, [r7, #2]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006d5e:	887a      	ldrh	r2, [r7, #2]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4013      	ands	r3, r2
 8006d64:	041a      	lsls	r2, r3, #16
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	43d9      	mvns	r1, r3
 8006d6a:	887b      	ldrh	r3, [r7, #2]
 8006d6c:	400b      	ands	r3, r1
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	619a      	str	r2, [r3, #24]
}
 8006d74:	bf00      	nop
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e041      	b.n	8006e16 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006d9a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f245 5255 	movw	r2, #21845	; 0x5555
 8006da4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6852      	ldr	r2, [r2, #4]
 8006dae:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6892      	ldr	r2, [r2, #8]
 8006db8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006dba:	f7ff f9a9 	bl	8006110 <HAL_GetTick>
 8006dbe:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006dc0:	e00f      	b.n	8006de2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006dc2:	f7ff f9a5 	bl	8006110 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b31      	cmp	r3, #49	; 0x31
 8006dce:	d908      	bls.n	8006de2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f003 0307 	and.w	r3, r3, #7
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e019      	b.n	8006e16 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e8      	bne.n	8006dc2 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	691a      	ldr	r2, [r3, #16]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d005      	beq.n	8006e0a <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	68d2      	ldr	r2, [r2, #12]
 8006e06:	611a      	str	r2, [r3, #16]
 8006e08:	e004      	b.n	8006e14 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006e2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
	...

08006e40 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e44:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a04      	ldr	r2, [pc, #16]	; (8006e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e4e:	6013      	str	r3, [r2, #0]
}
 8006e50:	bf00      	nop
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40007000 	.word	0x40007000

08006e60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e64:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <HAL_PWREx_GetVoltageRange+0x3c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e70:	d102      	bne.n	8006e78 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e76:	e00b      	b.n	8006e90 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006e78:	4b08      	ldr	r3, [pc, #32]	; (8006e9c <HAL_PWREx_GetVoltageRange+0x3c>)
 8006e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e86:	d102      	bne.n	8006e8e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e8c:	e000      	b.n	8006e90 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006e8e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	40007000 	.word	0x40007000

08006ea0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d141      	bne.n	8006f32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006eae:	4b4b      	ldr	r3, [pc, #300]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eba:	d131      	bne.n	8006f20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ebc:	4b47      	ldr	r3, [pc, #284]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec2:	4a46      	ldr	r2, [pc, #280]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ecc:	4b43      	ldr	r3, [pc, #268]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ed4:	4a41      	ldr	r2, [pc, #260]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006eda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006edc:	4b40      	ldr	r3, [pc, #256]	; (8006fe0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2232      	movs	r2, #50	; 0x32
 8006ee2:	fb02 f303 	mul.w	r3, r2, r3
 8006ee6:	4a3f      	ldr	r2, [pc, #252]	; (8006fe4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eec:	0c9b      	lsrs	r3, r3, #18
 8006eee:	3301      	adds	r3, #1
 8006ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ef2:	e002      	b.n	8006efa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006efa:	4b38      	ldr	r3, [pc, #224]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f06:	d102      	bne.n	8006f0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1f2      	bne.n	8006ef4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f0e:	4b33      	ldr	r3, [pc, #204]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1a:	d158      	bne.n	8006fce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e057      	b.n	8006fd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f20:	4b2e      	ldr	r3, [pc, #184]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f26:	4a2d      	ldr	r2, [pc, #180]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f30:	e04d      	b.n	8006fce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f38:	d141      	bne.n	8006fbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f3a:	4b28      	ldr	r3, [pc, #160]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f46:	d131      	bne.n	8006fac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f48:	4b24      	ldr	r3, [pc, #144]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f4e:	4a23      	ldr	r2, [pc, #140]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f58:	4b20      	ldr	r3, [pc, #128]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f60:	4a1e      	ldr	r2, [pc, #120]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006f68:	4b1d      	ldr	r3, [pc, #116]	; (8006fe0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2232      	movs	r2, #50	; 0x32
 8006f6e:	fb02 f303 	mul.w	r3, r2, r3
 8006f72:	4a1c      	ldr	r2, [pc, #112]	; (8006fe4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f74:	fba2 2303 	umull	r2, r3, r2, r3
 8006f78:	0c9b      	lsrs	r3, r3, #18
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f7e:	e002      	b.n	8006f86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f86:	4b15      	ldr	r3, [pc, #84]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f92:	d102      	bne.n	8006f9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f2      	bne.n	8006f80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f9a:	4b10      	ldr	r3, [pc, #64]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa6:	d112      	bne.n	8006fce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e011      	b.n	8006fd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006fac:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fb2:	4a0a      	ldr	r2, [pc, #40]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006fbc:	e007      	b.n	8006fce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006fbe:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006fc6:	4a05      	ldr	r2, [pc, #20]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fcc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	40007000 	.word	0x40007000
 8006fe0:	20000074 	.word	0x20000074
 8006fe4:	431bde83 	.word	0x431bde83

08006fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08a      	sub	sp, #40	; 0x28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d102      	bne.n	8006ffc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	f000 bc68 	b.w	80078cc <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ffc:	4b97      	ldr	r3, [pc, #604]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f003 030c 	and.w	r3, r3, #12
 8007004:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007006:	4b95      	ldr	r3, [pc, #596]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f003 0303 	and.w	r3, r3, #3
 800700e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0310 	and.w	r3, r3, #16
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 80e6 	beq.w	80071ea <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d007      	beq.n	8007034 <HAL_RCC_OscConfig+0x4c>
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	2b0c      	cmp	r3, #12
 8007028:	f040 808d 	bne.w	8007146 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	2b01      	cmp	r3, #1
 8007030:	f040 8089 	bne.w	8007146 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007034:	4b89      	ldr	r3, [pc, #548]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d006      	beq.n	800704e <HAL_RCC_OscConfig+0x66>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d102      	bne.n	800704e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	f000 bc3f 	b.w	80078cc <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007052:	4b82      	ldr	r3, [pc, #520]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d004      	beq.n	8007068 <HAL_RCC_OscConfig+0x80>
 800705e:	4b7f      	ldr	r3, [pc, #508]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007066:	e005      	b.n	8007074 <HAL_RCC_OscConfig+0x8c>
 8007068:	4b7c      	ldr	r3, [pc, #496]	; (800725c <HAL_RCC_OscConfig+0x274>)
 800706a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800706e:	091b      	lsrs	r3, r3, #4
 8007070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007074:	4293      	cmp	r3, r2
 8007076:	d224      	bcs.n	80070c2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fe5f 	bl	8007d40 <RCC_SetFlashLatencyFromMSIRange>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	f000 bc1f 	b.w	80078cc <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800708e:	4b73      	ldr	r3, [pc, #460]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a72      	ldr	r2, [pc, #456]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007094:	f043 0308 	orr.w	r3, r3, #8
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	4b70      	ldr	r3, [pc, #448]	; (800725c <HAL_RCC_OscConfig+0x274>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	496d      	ldr	r1, [pc, #436]	; (800725c <HAL_RCC_OscConfig+0x274>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070ac:	4b6b      	ldr	r3, [pc, #428]	; (800725c <HAL_RCC_OscConfig+0x274>)
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	4968      	ldr	r1, [pc, #416]	; (800725c <HAL_RCC_OscConfig+0x274>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	604b      	str	r3, [r1, #4]
 80070c0:	e025      	b.n	800710e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070c2:	4b66      	ldr	r3, [pc, #408]	; (800725c <HAL_RCC_OscConfig+0x274>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a65      	ldr	r2, [pc, #404]	; (800725c <HAL_RCC_OscConfig+0x274>)
 80070c8:	f043 0308 	orr.w	r3, r3, #8
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	4b63      	ldr	r3, [pc, #396]	; (800725c <HAL_RCC_OscConfig+0x274>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	4960      	ldr	r1, [pc, #384]	; (800725c <HAL_RCC_OscConfig+0x274>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070e0:	4b5e      	ldr	r3, [pc, #376]	; (800725c <HAL_RCC_OscConfig+0x274>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	021b      	lsls	r3, r3, #8
 80070ee:	495b      	ldr	r1, [pc, #364]	; (800725c <HAL_RCC_OscConfig+0x274>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d109      	bne.n	800710e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fe1e 	bl	8007d40 <RCC_SetFlashLatencyFromMSIRange>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e3de      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800710e:	f000 fd21 	bl	8007b54 <HAL_RCC_GetSysClockFreq>
 8007112:	4602      	mov	r2, r0
 8007114:	4b51      	ldr	r3, [pc, #324]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	091b      	lsrs	r3, r3, #4
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	4950      	ldr	r1, [pc, #320]	; (8007260 <HAL_RCC_OscConfig+0x278>)
 8007120:	5ccb      	ldrb	r3, [r1, r3]
 8007122:	f003 031f 	and.w	r3, r3, #31
 8007126:	fa22 f303 	lsr.w	r3, r2, r3
 800712a:	4a4e      	ldr	r2, [pc, #312]	; (8007264 <HAL_RCC_OscConfig+0x27c>)
 800712c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800712e:	4b4e      	ldr	r3, [pc, #312]	; (8007268 <HAL_RCC_OscConfig+0x280>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe fbdc 	bl	80058f0 <HAL_InitTick>
 8007138:	4603      	mov	r3, r0
 800713a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d052      	beq.n	80071e8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8007142:	7dfb      	ldrb	r3, [r7, #23]
 8007144:	e3c2      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d032      	beq.n	80071b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800714e:	4b43      	ldr	r3, [pc, #268]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a42      	ldr	r2, [pc, #264]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007154:	f043 0301 	orr.w	r3, r3, #1
 8007158:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800715a:	f7fe ffd9 	bl	8006110 <HAL_GetTick>
 800715e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007160:	e008      	b.n	8007174 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007162:	f7fe ffd5 	bl	8006110 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d901      	bls.n	8007174 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e3ab      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007174:	4b39      	ldr	r3, [pc, #228]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0f0      	beq.n	8007162 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007180:	4b36      	ldr	r3, [pc, #216]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a35      	ldr	r2, [pc, #212]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007186:	f043 0308 	orr.w	r3, r3, #8
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	4b33      	ldr	r3, [pc, #204]	; (800725c <HAL_RCC_OscConfig+0x274>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	4930      	ldr	r1, [pc, #192]	; (800725c <HAL_RCC_OscConfig+0x274>)
 800719a:	4313      	orrs	r3, r2
 800719c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800719e:	4b2f      	ldr	r3, [pc, #188]	; (800725c <HAL_RCC_OscConfig+0x274>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	492b      	ldr	r1, [pc, #172]	; (800725c <HAL_RCC_OscConfig+0x274>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	604b      	str	r3, [r1, #4]
 80071b2:	e01a      	b.n	80071ea <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80071b4:	4b29      	ldr	r3, [pc, #164]	; (800725c <HAL_RCC_OscConfig+0x274>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a28      	ldr	r2, [pc, #160]	; (800725c <HAL_RCC_OscConfig+0x274>)
 80071ba:	f023 0301 	bic.w	r3, r3, #1
 80071be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80071c0:	f7fe ffa6 	bl	8006110 <HAL_GetTick>
 80071c4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80071c8:	f7fe ffa2 	bl	8006110 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e378      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80071da:	4b20      	ldr	r3, [pc, #128]	; (800725c <HAL_RCC_OscConfig+0x274>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1f0      	bne.n	80071c8 <HAL_RCC_OscConfig+0x1e0>
 80071e6:	e000      	b.n	80071ea <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80071e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d073      	beq.n	80072de <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d005      	beq.n	8007208 <HAL_RCC_OscConfig+0x220>
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	2b0c      	cmp	r3, #12
 8007200:	d10e      	bne.n	8007220 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	2b03      	cmp	r3, #3
 8007206:	d10b      	bne.n	8007220 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007208:	4b14      	ldr	r3, [pc, #80]	; (800725c <HAL_RCC_OscConfig+0x274>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d063      	beq.n	80072dc <HAL_RCC_OscConfig+0x2f4>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d15f      	bne.n	80072dc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e355      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007228:	d106      	bne.n	8007238 <HAL_RCC_OscConfig+0x250>
 800722a:	4b0c      	ldr	r3, [pc, #48]	; (800725c <HAL_RCC_OscConfig+0x274>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a0b      	ldr	r2, [pc, #44]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	e025      	b.n	8007284 <HAL_RCC_OscConfig+0x29c>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007240:	d114      	bne.n	800726c <HAL_RCC_OscConfig+0x284>
 8007242:	4b06      	ldr	r3, [pc, #24]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a05      	ldr	r2, [pc, #20]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	4b03      	ldr	r3, [pc, #12]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a02      	ldr	r2, [pc, #8]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	e013      	b.n	8007284 <HAL_RCC_OscConfig+0x29c>
 800725c:	40021000 	.word	0x40021000
 8007260:	080158b8 	.word	0x080158b8
 8007264:	20000074 	.word	0x20000074
 8007268:	20000078 	.word	0x20000078
 800726c:	4b8f      	ldr	r3, [pc, #572]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a8e      	ldr	r2, [pc, #568]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	4b8c      	ldr	r3, [pc, #560]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a8b      	ldr	r2, [pc, #556]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 800727e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d013      	beq.n	80072b4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800728c:	f7fe ff40 	bl	8006110 <HAL_GetTick>
 8007290:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007292:	e008      	b.n	80072a6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007294:	f7fe ff3c 	bl	8006110 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b64      	cmp	r3, #100	; 0x64
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e312      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072a6:	4b81      	ldr	r3, [pc, #516]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0f0      	beq.n	8007294 <HAL_RCC_OscConfig+0x2ac>
 80072b2:	e014      	b.n	80072de <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b4:	f7fe ff2c 	bl	8006110 <HAL_GetTick>
 80072b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072ba:	e008      	b.n	80072ce <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072bc:	f7fe ff28 	bl	8006110 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	2b64      	cmp	r3, #100	; 0x64
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e2fe      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072ce:	4b77      	ldr	r3, [pc, #476]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1f0      	bne.n	80072bc <HAL_RCC_OscConfig+0x2d4>
 80072da:	e000      	b.n	80072de <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d060      	beq.n	80073ac <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d005      	beq.n	80072fc <HAL_RCC_OscConfig+0x314>
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	2b0c      	cmp	r3, #12
 80072f4:	d119      	bne.n	800732a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d116      	bne.n	800732a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072fc:	4b6b      	ldr	r3, [pc, #428]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <HAL_RCC_OscConfig+0x32c>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e2db      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007314:	4b65      	ldr	r3, [pc, #404]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	061b      	lsls	r3, r3, #24
 8007322:	4962      	ldr	r1, [pc, #392]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007324:	4313      	orrs	r3, r2
 8007326:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007328:	e040      	b.n	80073ac <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d023      	beq.n	800737a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007332:	4b5e      	ldr	r3, [pc, #376]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a5d      	ldr	r2, [pc, #372]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800733c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733e:	f7fe fee7 	bl	8006110 <HAL_GetTick>
 8007342:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007344:	e008      	b.n	8007358 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007346:	f7fe fee3 	bl	8006110 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b02      	cmp	r3, #2
 8007352:	d901      	bls.n	8007358 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e2b9      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007358:	4b54      	ldr	r3, [pc, #336]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0f0      	beq.n	8007346 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007364:	4b51      	ldr	r3, [pc, #324]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	061b      	lsls	r3, r3, #24
 8007372:	494e      	ldr	r1, [pc, #312]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007374:	4313      	orrs	r3, r2
 8007376:	604b      	str	r3, [r1, #4]
 8007378:	e018      	b.n	80073ac <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800737a:	4b4c      	ldr	r3, [pc, #304]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a4b      	ldr	r2, [pc, #300]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007386:	f7fe fec3 	bl	8006110 <HAL_GetTick>
 800738a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800738c:	e008      	b.n	80073a0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800738e:	f7fe febf 	bl	8006110 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	2b02      	cmp	r3, #2
 800739a:	d901      	bls.n	80073a0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e295      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073a0:	4b42      	ldr	r3, [pc, #264]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1f0      	bne.n	800738e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 8082 	beq.w	80074be <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d05f      	beq.n	8007482 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80073c2:	4b3a      	ldr	r3, [pc, #232]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 80073c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073c8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f003 0310 	and.w	r3, r3, #16
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d037      	beq.n	8007448 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d006      	beq.n	80073f0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e26d      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d01b      	beq.n	8007432 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80073fa:	4b2c      	ldr	r3, [pc, #176]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 80073fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007400:	4a2a      	ldr	r2, [pc, #168]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007402:	f023 0301 	bic.w	r3, r3, #1
 8007406:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800740a:	f7fe fe81 	bl	8006110 <HAL_GetTick>
 800740e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007410:	e008      	b.n	8007424 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007412:	f7fe fe7d 	bl	8006110 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	2b11      	cmp	r3, #17
 800741e:	d901      	bls.n	8007424 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e253      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007424:	4b21      	ldr	r3, [pc, #132]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1ef      	bne.n	8007412 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8007432:	4b1e      	ldr	r3, [pc, #120]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007438:	f023 0210 	bic.w	r2, r3, #16
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	491a      	ldr	r1, [pc, #104]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007442:	4313      	orrs	r3, r2
 8007444:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007448:	4b18      	ldr	r3, [pc, #96]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 800744a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800744e:	4a17      	ldr	r2, [pc, #92]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007450:	f043 0301 	orr.w	r3, r3, #1
 8007454:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007458:	f7fe fe5a 	bl	8006110 <HAL_GetTick>
 800745c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800745e:	e008      	b.n	8007472 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007460:	f7fe fe56 	bl	8006110 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	2b11      	cmp	r3, #17
 800746c:	d901      	bls.n	8007472 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e22c      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007472:	4b0e      	ldr	r3, [pc, #56]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d0ef      	beq.n	8007460 <HAL_RCC_OscConfig+0x478>
 8007480:	e01d      	b.n	80074be <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007482:	4b0a      	ldr	r3, [pc, #40]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007488:	4a08      	ldr	r2, [pc, #32]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 800748a:	f023 0301 	bic.w	r3, r3, #1
 800748e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007492:	f7fe fe3d 	bl	8006110 <HAL_GetTick>
 8007496:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007498:	e00a      	b.n	80074b0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800749a:	f7fe fe39 	bl	8006110 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b11      	cmp	r3, #17
 80074a6:	d903      	bls.n	80074b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e20f      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
 80074ac:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80074b0:	4b83      	ldr	r3, [pc, #524]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 80074b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1ed      	bne.n	800749a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0304 	and.w	r3, r3, #4
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 80bd 	beq.w	8007646 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074cc:	2300      	movs	r3, #0
 80074ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80074d2:	4b7b      	ldr	r3, [pc, #492]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 80074d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10e      	bne.n	80074fc <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074de:	4b78      	ldr	r3, [pc, #480]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 80074e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e2:	4a77      	ldr	r2, [pc, #476]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 80074e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074e8:	6593      	str	r3, [r2, #88]	; 0x58
 80074ea:	4b75      	ldr	r3, [pc, #468]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 80074ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80074f6:	2301      	movs	r3, #1
 80074f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074fc:	4b71      	ldr	r3, [pc, #452]	; (80076c4 <HAL_RCC_OscConfig+0x6dc>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007504:	2b00      	cmp	r3, #0
 8007506:	d118      	bne.n	800753a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007508:	4b6e      	ldr	r3, [pc, #440]	; (80076c4 <HAL_RCC_OscConfig+0x6dc>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a6d      	ldr	r2, [pc, #436]	; (80076c4 <HAL_RCC_OscConfig+0x6dc>)
 800750e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007512:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007514:	f7fe fdfc 	bl	8006110 <HAL_GetTick>
 8007518:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800751a:	e008      	b.n	800752e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800751c:	f7fe fdf8 	bl	8006110 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	2b02      	cmp	r3, #2
 8007528:	d901      	bls.n	800752e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e1ce      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800752e:	4b65      	ldr	r3, [pc, #404]	; (80076c4 <HAL_RCC_OscConfig+0x6dc>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0f0      	beq.n	800751c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d02c      	beq.n	80075a0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8007546:	4b5e      	ldr	r3, [pc, #376]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 8007548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007558:	4959      	ldr	r1, [pc, #356]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 800755a:	4313      	orrs	r3, r2
 800755c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f003 0304 	and.w	r3, r3, #4
 8007568:	2b00      	cmp	r3, #0
 800756a:	d010      	beq.n	800758e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800756c:	4b54      	ldr	r3, [pc, #336]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 800756e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007572:	4a53      	ldr	r2, [pc, #332]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 8007574:	f043 0304 	orr.w	r3, r3, #4
 8007578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800757c:	4b50      	ldr	r3, [pc, #320]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 800757e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007582:	4a4f      	ldr	r2, [pc, #316]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 8007584:	f043 0301 	orr.w	r3, r3, #1
 8007588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800758c:	e018      	b.n	80075c0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800758e:	4b4c      	ldr	r3, [pc, #304]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 8007590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007594:	4a4a      	ldr	r2, [pc, #296]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 8007596:	f043 0301 	orr.w	r3, r3, #1
 800759a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800759e:	e00f      	b.n	80075c0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80075a0:	4b47      	ldr	r3, [pc, #284]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 80075a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a6:	4a46      	ldr	r2, [pc, #280]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 80075a8:	f023 0301 	bic.w	r3, r3, #1
 80075ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80075b0:	4b43      	ldr	r3, [pc, #268]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 80075b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b6:	4a42      	ldr	r2, [pc, #264]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 80075b8:	f023 0304 	bic.w	r3, r3, #4
 80075bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d016      	beq.n	80075f6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075c8:	f7fe fda2 	bl	8006110 <HAL_GetTick>
 80075cc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075ce:	e00a      	b.n	80075e6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075d0:	f7fe fd9e 	bl	8006110 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	f241 3288 	movw	r2, #5000	; 0x1388
 80075de:	4293      	cmp	r3, r2
 80075e0:	d901      	bls.n	80075e6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e172      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075e6:	4b36      	ldr	r3, [pc, #216]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 80075e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0ed      	beq.n	80075d0 <HAL_RCC_OscConfig+0x5e8>
 80075f4:	e01d      	b.n	8007632 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f6:	f7fe fd8b 	bl	8006110 <HAL_GetTick>
 80075fa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075fc:	e00a      	b.n	8007614 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075fe:	f7fe fd87 	bl	8006110 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	f241 3288 	movw	r2, #5000	; 0x1388
 800760c:	4293      	cmp	r3, r2
 800760e:	d901      	bls.n	8007614 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e15b      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007614:	4b2a      	ldr	r3, [pc, #168]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 8007616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1ed      	bne.n	80075fe <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8007622:	4b27      	ldr	r3, [pc, #156]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 8007624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007628:	4a25      	ldr	r2, [pc, #148]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 800762a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800762e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007636:	2b01      	cmp	r3, #1
 8007638:	d105      	bne.n	8007646 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800763a:	4b21      	ldr	r3, [pc, #132]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 800763c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763e:	4a20      	ldr	r2, [pc, #128]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 8007640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007644:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0320 	and.w	r3, r3, #32
 800764e:	2b00      	cmp	r3, #0
 8007650:	d041      	beq.n	80076d6 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007656:	2b00      	cmp	r3, #0
 8007658:	d01c      	beq.n	8007694 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800765a:	4b19      	ldr	r3, [pc, #100]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 800765c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007660:	4a17      	ldr	r2, [pc, #92]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 8007662:	f043 0301 	orr.w	r3, r3, #1
 8007666:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800766a:	f7fe fd51 	bl	8006110 <HAL_GetTick>
 800766e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007670:	e008      	b.n	8007684 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007672:	f7fe fd4d 	bl	8006110 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	2b02      	cmp	r3, #2
 800767e:	d901      	bls.n	8007684 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e123      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007684:	4b0e      	ldr	r3, [pc, #56]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 8007686:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0ef      	beq.n	8007672 <HAL_RCC_OscConfig+0x68a>
 8007692:	e020      	b.n	80076d6 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007694:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 8007696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800769a:	4a09      	ldr	r2, [pc, #36]	; (80076c0 <HAL_RCC_OscConfig+0x6d8>)
 800769c:	f023 0301 	bic.w	r3, r3, #1
 80076a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a4:	f7fe fd34 	bl	8006110 <HAL_GetTick>
 80076a8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80076aa:	e00d      	b.n	80076c8 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076ac:	f7fe fd30 	bl	8006110 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d906      	bls.n	80076c8 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e106      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
 80076be:	bf00      	nop
 80076c0:	40021000 	.word	0x40021000
 80076c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80076c8:	4b82      	ldr	r3, [pc, #520]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 80076ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1ea      	bne.n	80076ac <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 80f5 	beq.w	80078ca <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	f040 80cb 	bne.w	8007880 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80076ea:	4b7a      	ldr	r3, [pc, #488]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	f003 0203 	and.w	r2, r3, #3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d12c      	bne.n	8007758 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007708:	3b01      	subs	r3, #1
 800770a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800770c:	429a      	cmp	r2, r3
 800770e:	d123      	bne.n	8007758 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800771c:	429a      	cmp	r2, r3
 800771e:	d11b      	bne.n	8007758 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800772c:	429a      	cmp	r2, r3
 800772e:	d113      	bne.n	8007758 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773a:	085b      	lsrs	r3, r3, #1
 800773c:	3b01      	subs	r3, #1
 800773e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007740:	429a      	cmp	r2, r3
 8007742:	d109      	bne.n	8007758 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774e:	085b      	lsrs	r3, r3, #1
 8007750:	3b01      	subs	r3, #1
 8007752:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007754:	429a      	cmp	r2, r3
 8007756:	d06d      	beq.n	8007834 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	2b0c      	cmp	r3, #12
 800775c:	d068      	beq.n	8007830 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800775e:	4b5d      	ldr	r3, [pc, #372]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d105      	bne.n	8007776 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800776a:	4b5a      	ldr	r3, [pc, #360]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e0a8      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800777a:	4b56      	ldr	r3, [pc, #344]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a55      	ldr	r2, [pc, #340]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 8007780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007784:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007786:	f7fe fcc3 	bl	8006110 <HAL_GetTick>
 800778a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800778c:	e008      	b.n	80077a0 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800778e:	f7fe fcbf 	bl	8006110 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e095      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077a0:	4b4c      	ldr	r3, [pc, #304]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1f0      	bne.n	800778e <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077ac:	4b49      	ldr	r3, [pc, #292]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 80077ae:	68da      	ldr	r2, [r3, #12]
 80077b0:	4b49      	ldr	r3, [pc, #292]	; (80078d8 <HAL_RCC_OscConfig+0x8f0>)
 80077b2:	4013      	ands	r3, r2
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80077bc:	3a01      	subs	r2, #1
 80077be:	0112      	lsls	r2, r2, #4
 80077c0:	4311      	orrs	r1, r2
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077c6:	0212      	lsls	r2, r2, #8
 80077c8:	4311      	orrs	r1, r2
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80077ce:	0852      	lsrs	r2, r2, #1
 80077d0:	3a01      	subs	r2, #1
 80077d2:	0552      	lsls	r2, r2, #21
 80077d4:	4311      	orrs	r1, r2
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80077da:	0852      	lsrs	r2, r2, #1
 80077dc:	3a01      	subs	r2, #1
 80077de:	0652      	lsls	r2, r2, #25
 80077e0:	4311      	orrs	r1, r2
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80077e6:	06d2      	lsls	r2, r2, #27
 80077e8:	430a      	orrs	r2, r1
 80077ea:	493a      	ldr	r1, [pc, #232]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80077f0:	4b38      	ldr	r3, [pc, #224]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a37      	ldr	r2, [pc, #220]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 80077f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80077fc:	4b35      	ldr	r3, [pc, #212]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	4a34      	ldr	r2, [pc, #208]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 8007802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007806:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007808:	f7fe fc82 	bl	8006110 <HAL_GetTick>
 800780c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800780e:	e008      	b.n	8007822 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007810:	f7fe fc7e 	bl	8006110 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	2b02      	cmp	r3, #2
 800781c:	d901      	bls.n	8007822 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e054      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007822:	4b2c      	ldr	r3, [pc, #176]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0f0      	beq.n	8007810 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800782e:	e04c      	b.n	80078ca <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e04b      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007834:	4b27      	ldr	r3, [pc, #156]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d144      	bne.n	80078ca <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007840:	4b24      	ldr	r3, [pc, #144]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a23      	ldr	r2, [pc, #140]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 8007846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800784a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800784c:	4b21      	ldr	r3, [pc, #132]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	4a20      	ldr	r2, [pc, #128]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 8007852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007856:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007858:	f7fe fc5a 	bl	8006110 <HAL_GetTick>
 800785c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800785e:	e008      	b.n	8007872 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007860:	f7fe fc56 	bl	8006110 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d901      	bls.n	8007872 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e02c      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007872:	4b18      	ldr	r3, [pc, #96]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0f0      	beq.n	8007860 <HAL_RCC_OscConfig+0x878>
 800787e:	e024      	b.n	80078ca <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	2b0c      	cmp	r3, #12
 8007884:	d01f      	beq.n	80078c6 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007886:	4b13      	ldr	r3, [pc, #76]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a12      	ldr	r2, [pc, #72]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 800788c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007892:	f7fe fc3d 	bl	8006110 <HAL_GetTick>
 8007896:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007898:	e008      	b.n	80078ac <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800789a:	f7fe fc39 	bl	8006110 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d901      	bls.n	80078ac <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e00f      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078ac:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1f0      	bne.n	800789a <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80078b8:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 80078ba:	68da      	ldr	r2, [r3, #12]
 80078bc:	4905      	ldr	r1, [pc, #20]	; (80078d4 <HAL_RCC_OscConfig+0x8ec>)
 80078be:	4b07      	ldr	r3, [pc, #28]	; (80078dc <HAL_RCC_OscConfig+0x8f4>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	60cb      	str	r3, [r1, #12]
 80078c4:	e001      	b.n	80078ca <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e000      	b.n	80078cc <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3728      	adds	r7, #40	; 0x28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	40021000 	.word	0x40021000
 80078d8:	019d800c 	.word	0x019d800c
 80078dc:	feeefffc 	.word	0xfeeefffc

080078e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e11d      	b.n	8007b34 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80078f8:	4b90      	ldr	r3, [pc, #576]	; (8007b3c <HAL_RCC_ClockConfig+0x25c>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 030f 	and.w	r3, r3, #15
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d910      	bls.n	8007928 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007906:	4b8d      	ldr	r3, [pc, #564]	; (8007b3c <HAL_RCC_ClockConfig+0x25c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f023 020f 	bic.w	r2, r3, #15
 800790e:	498b      	ldr	r1, [pc, #556]	; (8007b3c <HAL_RCC_ClockConfig+0x25c>)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	4313      	orrs	r3, r2
 8007914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007916:	4b89      	ldr	r3, [pc, #548]	; (8007b3c <HAL_RCC_ClockConfig+0x25c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 030f 	and.w	r3, r3, #15
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d001      	beq.n	8007928 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e105      	b.n	8007b34 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d010      	beq.n	8007956 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	4b81      	ldr	r3, [pc, #516]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007940:	429a      	cmp	r2, r3
 8007942:	d908      	bls.n	8007956 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007944:	4b7e      	ldr	r3, [pc, #504]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	497b      	ldr	r1, [pc, #492]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007952:	4313      	orrs	r3, r2
 8007954:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d079      	beq.n	8007a56 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	2b03      	cmp	r3, #3
 8007968:	d11e      	bne.n	80079a8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800796a:	4b75      	ldr	r3, [pc, #468]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e0dc      	b.n	8007b34 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800797a:	f000 fa3b 	bl	8007df4 <RCC_GetSysClockFreqFromPLLSource>
 800797e:	4603      	mov	r3, r0
 8007980:	4a70      	ldr	r2, [pc, #448]	; (8007b44 <HAL_RCC_ClockConfig+0x264>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d946      	bls.n	8007a14 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007986:	4b6e      	ldr	r3, [pc, #440]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d140      	bne.n	8007a14 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007992:	4b6b      	ldr	r3, [pc, #428]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800799a:	4a69      	ldr	r2, [pc, #420]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 800799c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80079a2:	2380      	movs	r3, #128	; 0x80
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	e035      	b.n	8007a14 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d107      	bne.n	80079c0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079b0:	4b63      	ldr	r3, [pc, #396]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d115      	bne.n	80079e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e0b9      	b.n	8007b34 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d107      	bne.n	80079d8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80079c8:	4b5d      	ldr	r3, [pc, #372]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d109      	bne.n	80079e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e0ad      	b.n	8007b34 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079d8:	4b59      	ldr	r3, [pc, #356]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e0a5      	b.n	8007b34 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80079e8:	f000 f8b4 	bl	8007b54 <HAL_RCC_GetSysClockFreq>
 80079ec:	4603      	mov	r3, r0
 80079ee:	4a55      	ldr	r2, [pc, #340]	; (8007b44 <HAL_RCC_ClockConfig+0x264>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d90f      	bls.n	8007a14 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80079f4:	4b52      	ldr	r3, [pc, #328]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d109      	bne.n	8007a14 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a00:	4b4f      	ldr	r3, [pc, #316]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a08:	4a4d      	ldr	r2, [pc, #308]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a0e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007a10:	2380      	movs	r3, #128	; 0x80
 8007a12:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a14:	4b4a      	ldr	r3, [pc, #296]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f023 0203 	bic.w	r2, r3, #3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	4947      	ldr	r1, [pc, #284]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a26:	f7fe fb73 	bl	8006110 <HAL_GetTick>
 8007a2a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a2c:	e00a      	b.n	8007a44 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a2e:	f7fe fb6f 	bl	8006110 <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d901      	bls.n	8007a44 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e077      	b.n	8007b34 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a44:	4b3e      	ldr	r3, [pc, #248]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f003 020c 	and.w	r2, r3, #12
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d1eb      	bne.n	8007a2e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2b80      	cmp	r3, #128	; 0x80
 8007a5a:	d105      	bne.n	8007a68 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007a5c:	4b38      	ldr	r3, [pc, #224]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	4a37      	ldr	r2, [pc, #220]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a66:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d010      	beq.n	8007a96 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	4b31      	ldr	r3, [pc, #196]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d208      	bcs.n	8007a96 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a84:	4b2e      	ldr	r3, [pc, #184]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	492b      	ldr	r1, [pc, #172]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a96:	4b29      	ldr	r3, [pc, #164]	; (8007b3c <HAL_RCC_ClockConfig+0x25c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d210      	bcs.n	8007ac6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aa4:	4b25      	ldr	r3, [pc, #148]	; (8007b3c <HAL_RCC_ClockConfig+0x25c>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f023 020f 	bic.w	r2, r3, #15
 8007aac:	4923      	ldr	r1, [pc, #140]	; (8007b3c <HAL_RCC_ClockConfig+0x25c>)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ab4:	4b21      	ldr	r3, [pc, #132]	; (8007b3c <HAL_RCC_ClockConfig+0x25c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 030f 	and.w	r3, r3, #15
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d001      	beq.n	8007ac6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e036      	b.n	8007b34 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0304 	and.w	r3, r3, #4
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d008      	beq.n	8007ae4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ad2:	4b1b      	ldr	r3, [pc, #108]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	4918      	ldr	r1, [pc, #96]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0308 	and.w	r3, r3, #8
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d009      	beq.n	8007b04 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007af0:	4b13      	ldr	r3, [pc, #76]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	4910      	ldr	r1, [pc, #64]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007b04:	f000 f826 	bl	8007b54 <HAL_RCC_GetSysClockFreq>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	4b0d      	ldr	r3, [pc, #52]	; (8007b40 <HAL_RCC_ClockConfig+0x260>)
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	091b      	lsrs	r3, r3, #4
 8007b10:	f003 030f 	and.w	r3, r3, #15
 8007b14:	490c      	ldr	r1, [pc, #48]	; (8007b48 <HAL_RCC_ClockConfig+0x268>)
 8007b16:	5ccb      	ldrb	r3, [r1, r3]
 8007b18:	f003 031f 	and.w	r3, r3, #31
 8007b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b20:	4a0a      	ldr	r2, [pc, #40]	; (8007b4c <HAL_RCC_ClockConfig+0x26c>)
 8007b22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007b24:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <HAL_RCC_ClockConfig+0x270>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fd fee1 	bl	80058f0 <HAL_InitTick>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73fb      	strb	r3, [r7, #15]

  return status;
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	40022000 	.word	0x40022000
 8007b40:	40021000 	.word	0x40021000
 8007b44:	04c4b400 	.word	0x04c4b400
 8007b48:	080158b8 	.word	0x080158b8
 8007b4c:	20000074 	.word	0x20000074
 8007b50:	20000078 	.word	0x20000078

08007b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b089      	sub	sp, #36	; 0x24
 8007b58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	61fb      	str	r3, [r7, #28]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b62:	4b3e      	ldr	r3, [pc, #248]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f003 030c 	and.w	r3, r3, #12
 8007b6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b6c:	4b3b      	ldr	r3, [pc, #236]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f003 0303 	and.w	r3, r3, #3
 8007b74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <HAL_RCC_GetSysClockFreq+0x34>
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	2b0c      	cmp	r3, #12
 8007b80:	d121      	bne.n	8007bc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d11e      	bne.n	8007bc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007b88:	4b34      	ldr	r3, [pc, #208]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0308 	and.w	r3, r3, #8
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d107      	bne.n	8007ba4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007b94:	4b31      	ldr	r3, [pc, #196]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8007b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b9a:	0a1b      	lsrs	r3, r3, #8
 8007b9c:	f003 030f 	and.w	r3, r3, #15
 8007ba0:	61fb      	str	r3, [r7, #28]
 8007ba2:	e005      	b.n	8007bb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007ba4:	4b2d      	ldr	r3, [pc, #180]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	091b      	lsrs	r3, r3, #4
 8007baa:	f003 030f 	and.w	r3, r3, #15
 8007bae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007bb0:	4a2b      	ldr	r2, [pc, #172]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10d      	bne.n	8007bdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007bc4:	e00a      	b.n	8007bdc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d102      	bne.n	8007bd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007bcc:	4b25      	ldr	r3, [pc, #148]	; (8007c64 <HAL_RCC_GetSysClockFreq+0x110>)
 8007bce:	61bb      	str	r3, [r7, #24]
 8007bd0:	e004      	b.n	8007bdc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d101      	bne.n	8007bdc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007bd8:	4b23      	ldr	r3, [pc, #140]	; (8007c68 <HAL_RCC_GetSysClockFreq+0x114>)
 8007bda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	2b0c      	cmp	r3, #12
 8007be0:	d134      	bne.n	8007c4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007be2:	4b1e      	ldr	r3, [pc, #120]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f003 0303 	and.w	r3, r3, #3
 8007bea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d003      	beq.n	8007bfa <HAL_RCC_GetSysClockFreq+0xa6>
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d003      	beq.n	8007c00 <HAL_RCC_GetSysClockFreq+0xac>
 8007bf8:	e005      	b.n	8007c06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007bfa:	4b1a      	ldr	r3, [pc, #104]	; (8007c64 <HAL_RCC_GetSysClockFreq+0x110>)
 8007bfc:	617b      	str	r3, [r7, #20]
      break;
 8007bfe:	e005      	b.n	8007c0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007c00:	4b19      	ldr	r3, [pc, #100]	; (8007c68 <HAL_RCC_GetSysClockFreq+0x114>)
 8007c02:	617b      	str	r3, [r7, #20]
      break;
 8007c04:	e002      	b.n	8007c0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	617b      	str	r3, [r7, #20]
      break;
 8007c0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c0c:	4b13      	ldr	r3, [pc, #76]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	091b      	lsrs	r3, r3, #4
 8007c12:	f003 030f 	and.w	r3, r3, #15
 8007c16:	3301      	adds	r3, #1
 8007c18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007c1a:	4b10      	ldr	r3, [pc, #64]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	0a1b      	lsrs	r3, r3, #8
 8007c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	fb03 f202 	mul.w	r2, r3, r2
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007c32:	4b0a      	ldr	r3, [pc, #40]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	0e5b      	lsrs	r3, r3, #25
 8007c38:	f003 0303 	and.w	r3, r3, #3
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	005b      	lsls	r3, r3, #1
 8007c40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007c4c:	69bb      	ldr	r3, [r7, #24]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3724      	adds	r7, #36	; 0x24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	40021000 	.word	0x40021000
 8007c60:	080158d0 	.word	0x080158d0
 8007c64:	00f42400 	.word	0x00f42400
 8007c68:	007a1200 	.word	0x007a1200

08007c6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c70:	4b03      	ldr	r3, [pc, #12]	; (8007c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c72:	681b      	ldr	r3, [r3, #0]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	20000074 	.word	0x20000074

08007c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007c88:	f7ff fff0 	bl	8007c6c <HAL_RCC_GetHCLKFreq>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	4b06      	ldr	r3, [pc, #24]	; (8007ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	0a1b      	lsrs	r3, r3, #8
 8007c94:	f003 0307 	and.w	r3, r3, #7
 8007c98:	4904      	ldr	r1, [pc, #16]	; (8007cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c9a:	5ccb      	ldrb	r3, [r1, r3]
 8007c9c:	f003 031f 	and.w	r3, r3, #31
 8007ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	40021000 	.word	0x40021000
 8007cac:	080158c8 	.word	0x080158c8

08007cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007cb4:	f7ff ffda 	bl	8007c6c <HAL_RCC_GetHCLKFreq>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	4b06      	ldr	r3, [pc, #24]	; (8007cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	0adb      	lsrs	r3, r3, #11
 8007cc0:	f003 0307 	and.w	r3, r3, #7
 8007cc4:	4904      	ldr	r1, [pc, #16]	; (8007cd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007cc6:	5ccb      	ldrb	r3, [r1, r3]
 8007cc8:	f003 031f 	and.w	r3, r3, #31
 8007ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	40021000 	.word	0x40021000
 8007cd8:	080158c8 	.word	0x080158c8

08007cdc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	220f      	movs	r2, #15
 8007cea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007cec:	4b12      	ldr	r3, [pc, #72]	; (8007d38 <HAL_RCC_GetClockConfig+0x5c>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f003 0203 	and.w	r2, r3, #3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007cf8:	4b0f      	ldr	r3, [pc, #60]	; (8007d38 <HAL_RCC_GetClockConfig+0x5c>)
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007d04:	4b0c      	ldr	r3, [pc, #48]	; (8007d38 <HAL_RCC_GetClockConfig+0x5c>)
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007d10:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <HAL_RCC_GetClockConfig+0x5c>)
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	08db      	lsrs	r3, r3, #3
 8007d16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007d1e:	4b07      	ldr	r3, [pc, #28]	; (8007d3c <HAL_RCC_GetClockConfig+0x60>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 020f 	and.w	r2, r3, #15
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	601a      	str	r2, [r3, #0]
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	40021000 	.word	0x40021000
 8007d3c:	40022000 	.word	0x40022000

08007d40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007d48:	2300      	movs	r3, #0
 8007d4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007d4c:	4b27      	ldr	r3, [pc, #156]	; (8007dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007d58:	f7ff f882 	bl	8006e60 <HAL_PWREx_GetVoltageRange>
 8007d5c:	6178      	str	r0, [r7, #20]
 8007d5e:	e014      	b.n	8007d8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d60:	4b22      	ldr	r3, [pc, #136]	; (8007dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d64:	4a21      	ldr	r2, [pc, #132]	; (8007dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8007d6c:	4b1f      	ldr	r3, [pc, #124]	; (8007dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007d78:	f7ff f872 	bl	8006e60 <HAL_PWREx_GetVoltageRange>
 8007d7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007d7e:	4b1b      	ldr	r3, [pc, #108]	; (8007dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d82:	4a1a      	ldr	r2, [pc, #104]	; (8007dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d90:	d10b      	bne.n	8007daa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b80      	cmp	r3, #128	; 0x80
 8007d96:	d913      	bls.n	8007dc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2ba0      	cmp	r3, #160	; 0xa0
 8007d9c:	d902      	bls.n	8007da4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007d9e:	2302      	movs	r3, #2
 8007da0:	613b      	str	r3, [r7, #16]
 8007da2:	e00d      	b.n	8007dc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007da4:	2301      	movs	r3, #1
 8007da6:	613b      	str	r3, [r7, #16]
 8007da8:	e00a      	b.n	8007dc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b7f      	cmp	r3, #127	; 0x7f
 8007dae:	d902      	bls.n	8007db6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007db0:	2302      	movs	r3, #2
 8007db2:	613b      	str	r3, [r7, #16]
 8007db4:	e004      	b.n	8007dc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b70      	cmp	r3, #112	; 0x70
 8007dba:	d101      	bne.n	8007dc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007dc0:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f023 020f 	bic.w	r2, r3, #15
 8007dc8:	4909      	ldr	r1, [pc, #36]	; (8007df0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007dd0:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 030f 	and.w	r3, r3, #15
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d001      	beq.n	8007de2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e000      	b.n	8007de4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	40021000 	.word	0x40021000
 8007df0:	40022000 	.word	0x40022000

08007df4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007dfa:	4b2d      	ldr	r3, [pc, #180]	; (8007eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f003 0303 	and.w	r3, r3, #3
 8007e02:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d00b      	beq.n	8007e22 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d825      	bhi.n	8007e5c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d008      	beq.n	8007e28 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d11f      	bne.n	8007e5c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007e1c:	4b25      	ldr	r3, [pc, #148]	; (8007eb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007e1e:	613b      	str	r3, [r7, #16]
    break;
 8007e20:	e01f      	b.n	8007e62 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007e22:	4b25      	ldr	r3, [pc, #148]	; (8007eb8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007e24:	613b      	str	r3, [r7, #16]
    break;
 8007e26:	e01c      	b.n	8007e62 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007e28:	4b21      	ldr	r3, [pc, #132]	; (8007eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0308 	and.w	r3, r3, #8
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d107      	bne.n	8007e44 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007e34:	4b1e      	ldr	r3, [pc, #120]	; (8007eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e3a:	0a1b      	lsrs	r3, r3, #8
 8007e3c:	f003 030f 	and.w	r3, r3, #15
 8007e40:	617b      	str	r3, [r7, #20]
 8007e42:	e005      	b.n	8007e50 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007e44:	4b1a      	ldr	r3, [pc, #104]	; (8007eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	091b      	lsrs	r3, r3, #4
 8007e4a:	f003 030f 	and.w	r3, r3, #15
 8007e4e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007e50:	4a1a      	ldr	r2, [pc, #104]	; (8007ebc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e58:	613b      	str	r3, [r7, #16]
    break;
 8007e5a:	e002      	b.n	8007e62 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	613b      	str	r3, [r7, #16]
    break;
 8007e60:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e62:	4b13      	ldr	r3, [pc, #76]	; (8007eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	091b      	lsrs	r3, r3, #4
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007e70:	4b0f      	ldr	r3, [pc, #60]	; (8007eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	0a1b      	lsrs	r3, r3, #8
 8007e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	fb03 f202 	mul.w	r2, r3, r2
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e86:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e88:	4b09      	ldr	r3, [pc, #36]	; (8007eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	0e5b      	lsrs	r3, r3, #25
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	3301      	adds	r3, #1
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007ea2:	683b      	ldr	r3, [r7, #0]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	371c      	adds	r7, #28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	40021000 	.word	0x40021000
 8007eb4:	00f42400 	.word	0x00f42400
 8007eb8:	007a1200 	.word	0x007a1200
 8007ebc:	080158d0 	.word	0x080158d0

08007ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ec8:	2300      	movs	r3, #0
 8007eca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ecc:	2300      	movs	r3, #0
 8007ece:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d040      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee0:	2b80      	cmp	r3, #128	; 0x80
 8007ee2:	d02a      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007ee4:	2b80      	cmp	r3, #128	; 0x80
 8007ee6:	d825      	bhi.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007ee8:	2b60      	cmp	r3, #96	; 0x60
 8007eea:	d026      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007eec:	2b60      	cmp	r3, #96	; 0x60
 8007eee:	d821      	bhi.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007ef0:	2b40      	cmp	r3, #64	; 0x40
 8007ef2:	d006      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007ef4:	2b40      	cmp	r3, #64	; 0x40
 8007ef6:	d81d      	bhi.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d009      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007efc:	2b20      	cmp	r3, #32
 8007efe:	d010      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007f00:	e018      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007f02:	4b89      	ldr	r3, [pc, #548]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	4a88      	ldr	r2, [pc, #544]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f0c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f0e:	e015      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	3304      	adds	r3, #4
 8007f14:	2100      	movs	r1, #0
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 fb3e 	bl	8008598 <RCCEx_PLLSAI1_Config>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f20:	e00c      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3320      	adds	r3, #32
 8007f26:	2100      	movs	r1, #0
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fc29 	bl	8008780 <RCCEx_PLLSAI2_Config>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f32:	e003      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	74fb      	strb	r3, [r7, #19]
      break;
 8007f38:	e000      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f3c:	7cfb      	ldrb	r3, [r7, #19]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10b      	bne.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f42:	4b79      	ldr	r3, [pc, #484]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f48:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f50:	4975      	ldr	r1, [pc, #468]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007f58:	e001      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5a:	7cfb      	ldrb	r3, [r7, #19]
 8007f5c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d047      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f72:	d030      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f78:	d82a      	bhi.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f7e:	d02a      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f84:	d824      	bhi.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f8a:	d008      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f90:	d81e      	bhi.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00a      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f9a:	d010      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007f9c:	e018      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007f9e:	4b62      	ldr	r3, [pc, #392]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	4a61      	ldr	r2, [pc, #388]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fa8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007faa:	e015      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 faf0 	bl	8008598 <RCCEx_PLLSAI1_Config>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007fbc:	e00c      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3320      	adds	r3, #32
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 fbdb 	bl	8008780 <RCCEx_PLLSAI2_Config>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007fce:	e003      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	74fb      	strb	r3, [r7, #19]
      break;
 8007fd4:	e000      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd8:	7cfb      	ldrb	r3, [r7, #19]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10b      	bne.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007fde:	4b52      	ldr	r3, [pc, #328]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fec:	494e      	ldr	r1, [pc, #312]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007ff4:	e001      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff6:	7cfb      	ldrb	r3, [r7, #19]
 8007ff8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 809f 	beq.w	8008146 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008008:	2300      	movs	r3, #0
 800800a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800800c:	4b46      	ldr	r3, [pc, #280]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800800e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008018:	2301      	movs	r3, #1
 800801a:	e000      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800801c:	2300      	movs	r3, #0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00d      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008022:	4b41      	ldr	r3, [pc, #260]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008026:	4a40      	ldr	r2, [pc, #256]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800802c:	6593      	str	r3, [r2, #88]	; 0x58
 800802e:	4b3e      	ldr	r3, [pc, #248]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008036:	60bb      	str	r3, [r7, #8]
 8008038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800803a:	2301      	movs	r3, #1
 800803c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800803e:	4b3b      	ldr	r3, [pc, #236]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a3a      	ldr	r2, [pc, #232]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008048:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800804a:	f7fe f861 	bl	8006110 <HAL_GetTick>
 800804e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008050:	e009      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008052:	f7fe f85d 	bl	8006110 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b02      	cmp	r3, #2
 800805e:	d902      	bls.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	74fb      	strb	r3, [r7, #19]
        break;
 8008064:	e005      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008066:	4b31      	ldr	r3, [pc, #196]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0ef      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8008072:	7cfb      	ldrb	r3, [r7, #19]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d15b      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008078:	4b2b      	ldr	r3, [pc, #172]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800807a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800807e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008082:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d01f      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	429a      	cmp	r2, r3
 8008094:	d019      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008096:	4b24      	ldr	r3, [pc, #144]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800809c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080a2:	4b21      	ldr	r3, [pc, #132]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a8:	4a1f      	ldr	r2, [pc, #124]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080b2:	4b1d      	ldr	r3, [pc, #116]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b8:	4a1b      	ldr	r2, [pc, #108]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80080c2:	4a19      	ldr	r2, [pc, #100]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d016      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d4:	f7fe f81c 	bl	8006110 <HAL_GetTick>
 80080d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080da:	e00b      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080dc:	f7fe f818 	bl	8006110 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d902      	bls.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	74fb      	strb	r3, [r7, #19]
            break;
 80080f2:	e006      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080f4:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080fa:	f003 0302 	and.w	r3, r3, #2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0ec      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8008102:	7cfb      	ldrb	r3, [r7, #19]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10c      	bne.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008108:	4b07      	ldr	r3, [pc, #28]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800810a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800810e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008118:	4903      	ldr	r1, [pc, #12]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800811a:	4313      	orrs	r3, r2
 800811c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008120:	e008      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008122:	7cfb      	ldrb	r3, [r7, #19]
 8008124:	74bb      	strb	r3, [r7, #18]
 8008126:	e005      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8008128:	40021000 	.word	0x40021000
 800812c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008130:	7cfb      	ldrb	r3, [r7, #19]
 8008132:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008134:	7c7b      	ldrb	r3, [r7, #17]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d105      	bne.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800813a:	4ba0      	ldr	r3, [pc, #640]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800813c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813e:	4a9f      	ldr	r2, [pc, #636]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008144:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008152:	4b9a      	ldr	r3, [pc, #616]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008158:	f023 0203 	bic.w	r2, r3, #3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008160:	4996      	ldr	r1, [pc, #600]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008162:	4313      	orrs	r3, r2
 8008164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00a      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008174:	4b91      	ldr	r3, [pc, #580]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800817a:	f023 020c 	bic.w	r2, r3, #12
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008182:	498e      	ldr	r1, [pc, #568]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008184:	4313      	orrs	r3, r2
 8008186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0304 	and.w	r3, r3, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008196:	4b89      	ldr	r3, [pc, #548]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800819c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a4:	4985      	ldr	r1, [pc, #532]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0308 	and.w	r3, r3, #8
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00a      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80081b8:	4b80      	ldr	r3, [pc, #512]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081c6:	497d      	ldr	r1, [pc, #500]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0310 	and.w	r3, r3, #16
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80081da:	4b78      	ldr	r3, [pc, #480]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081e8:	4974      	ldr	r1, [pc, #464]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0320 	and.w	r3, r3, #32
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00a      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80081fc:	4b6f      	ldr	r3, [pc, #444]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820a:	496c      	ldr	r1, [pc, #432]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800820c:	4313      	orrs	r3, r2
 800820e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800821e:	4b67      	ldr	r3, [pc, #412]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008224:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800822c:	4963      	ldr	r1, [pc, #396]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800822e:	4313      	orrs	r3, r2
 8008230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00a      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008240:	4b5e      	ldr	r3, [pc, #376]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800824e:	495b      	ldr	r1, [pc, #364]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008250:	4313      	orrs	r3, r2
 8008252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00a      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008262:	4b56      	ldr	r3, [pc, #344]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008268:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008270:	4952      	ldr	r1, [pc, #328]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008272:	4313      	orrs	r3, r2
 8008274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008284:	4b4d      	ldr	r3, [pc, #308]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800828a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008292:	494a      	ldr	r1, [pc, #296]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008294:	4313      	orrs	r3, r2
 8008296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80082a6:	4b45      	ldr	r3, [pc, #276]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082b4:	4941      	ldr	r1, [pc, #260]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00a      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80082c8:	4b3c      	ldr	r3, [pc, #240]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082ce:	f023 0203 	bic.w	r2, r3, #3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082d6:	4939      	ldr	r1, [pc, #228]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d028      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082ea:	4b34      	ldr	r3, [pc, #208]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f8:	4930      	ldr	r1, [pc, #192]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008308:	d106      	bne.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800830a:	4b2c      	ldr	r3, [pc, #176]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	4a2b      	ldr	r2, [pc, #172]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008310:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008314:	60d3      	str	r3, [r2, #12]
 8008316:	e011      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800831c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008320:	d10c      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	3304      	adds	r3, #4
 8008326:	2101      	movs	r1, #1
 8008328:	4618      	mov	r0, r3
 800832a:	f000 f935 	bl	8008598 <RCCEx_PLLSAI1_Config>
 800832e:	4603      	mov	r3, r0
 8008330:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008332:	7cfb      	ldrb	r3, [r7, #19]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d001      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8008338:	7cfb      	ldrb	r3, [r7, #19]
 800833a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d04d      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800834c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008350:	d108      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8008352:	4b1a      	ldr	r3, [pc, #104]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008354:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008358:	4a18      	ldr	r2, [pc, #96]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800835a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800835e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008362:	e012      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008364:	4b15      	ldr	r3, [pc, #84]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008366:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800836a:	4a14      	ldr	r2, [pc, #80]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800836c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008370:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008374:	4b11      	ldr	r3, [pc, #68]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800837a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008382:	490e      	ldr	r1, [pc, #56]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008384:	4313      	orrs	r3, r2
 8008386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800838e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008392:	d106      	bne.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008394:	4b09      	ldr	r3, [pc, #36]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	4a08      	ldr	r2, [pc, #32]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800839a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800839e:	60d3      	str	r3, [r2, #12]
 80083a0:	e020      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083aa:	d109      	bne.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80083ac:	4b03      	ldr	r3, [pc, #12]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	4a02      	ldr	r2, [pc, #8]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083b6:	60d3      	str	r3, [r2, #12]
 80083b8:	e014      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80083ba:	bf00      	nop
 80083bc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083c8:	d10c      	bne.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3304      	adds	r3, #4
 80083ce:	2101      	movs	r1, #1
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 f8e1 	bl	8008598 <RCCEx_PLLSAI1_Config>
 80083d6:	4603      	mov	r3, r0
 80083d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80083da:	7cfb      	ldrb	r3, [r7, #19]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80083e0:	7cfb      	ldrb	r3, [r7, #19]
 80083e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d028      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083f0:	4b68      	ldr	r3, [pc, #416]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80083f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083fe:	4965      	ldr	r1, [pc, #404]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008400:	4313      	orrs	r3, r2
 8008402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800840a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800840e:	d106      	bne.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008410:	4b60      	ldr	r3, [pc, #384]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	4a5f      	ldr	r2, [pc, #380]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800841a:	60d3      	str	r3, [r2, #12]
 800841c:	e011      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008422:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008426:	d10c      	bne.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	3304      	adds	r3, #4
 800842c:	2101      	movs	r1, #1
 800842e:	4618      	mov	r0, r3
 8008430:	f000 f8b2 	bl	8008598 <RCCEx_PLLSAI1_Config>
 8008434:	4603      	mov	r3, r0
 8008436:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008438:	7cfb      	ldrb	r3, [r7, #19]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800843e:	7cfb      	ldrb	r3, [r7, #19]
 8008440:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d01e      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800844e:	4b51      	ldr	r3, [pc, #324]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008454:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800845e:	494d      	ldr	r1, [pc, #308]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008460:	4313      	orrs	r3, r2
 8008462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800846c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008470:	d10c      	bne.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	3304      	adds	r3, #4
 8008476:	2102      	movs	r1, #2
 8008478:	4618      	mov	r0, r3
 800847a:	f000 f88d 	bl	8008598 <RCCEx_PLLSAI1_Config>
 800847e:	4603      	mov	r3, r0
 8008480:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008482:	7cfb      	ldrb	r3, [r7, #19]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8008488:	7cfb      	ldrb	r3, [r7, #19]
 800848a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00b      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008498:	4b3e      	ldr	r3, [pc, #248]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800849a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800849e:	f023 0204 	bic.w	r2, r3, #4
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084a8:	493a      	ldr	r1, [pc, #232]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80084aa:	4313      	orrs	r3, r2
 80084ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00b      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80084bc:	4b35      	ldr	r3, [pc, #212]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80084be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084c2:	f023 0218 	bic.w	r2, r3, #24
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084cc:	4931      	ldr	r1, [pc, #196]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d035      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80084e0:	4b2c      	ldr	r3, [pc, #176]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a2b      	ldr	r2, [pc, #172]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80084e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ec:	f7fd fe10 	bl	8006110 <HAL_GetTick>
 80084f0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80084f2:	e009      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80084f4:	f7fd fe0c 	bl	8006110 <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d902      	bls.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	74fb      	strb	r3, [r7, #19]
        break;
 8008506:	e005      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008508:	4b22      	ldr	r3, [pc, #136]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1ef      	bne.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8008514:	7cfb      	ldrb	r3, [r7, #19]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d113      	bne.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800851a:	4b1e      	ldr	r3, [pc, #120]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800851c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800852a:	491a      	ldr	r1, [pc, #104]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800852c:	4313      	orrs	r3, r2
 800852e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3320      	adds	r3, #32
 8008536:	2102      	movs	r1, #2
 8008538:	4618      	mov	r0, r3
 800853a:	f000 f921 	bl	8008780 <RCCEx_PLLSAI2_Config>
 800853e:	4603      	mov	r3, r0
 8008540:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8008542:	7cfb      	ldrb	r3, [r7, #19]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8008548:	7cfb      	ldrb	r3, [r7, #19]
 800854a:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d017      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008558:	4b0e      	ldr	r3, [pc, #56]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800855a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800855e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008568:	490a      	ldr	r1, [pc, #40]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800856a:	4313      	orrs	r3, r2
 800856c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800857a:	d105      	bne.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800857c:	4b05      	ldr	r3, [pc, #20]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	4a04      	ldr	r2, [pc, #16]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008586:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008588:	7cbb      	ldrb	r3, [r7, #18]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	40021000 	.word	0x40021000

08008598 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80085a6:	4b72      	ldr	r3, [pc, #456]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	f003 0303 	and.w	r3, r3, #3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00e      	beq.n	80085d0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80085b2:	4b6f      	ldr	r3, [pc, #444]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	f003 0203 	and.w	r2, r3, #3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d103      	bne.n	80085ca <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
       ||
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d142      	bne.n	8008650 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	73fb      	strb	r3, [r7, #15]
 80085ce:	e03f      	b.n	8008650 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d018      	beq.n	800860a <RCCEx_PLLSAI1_Config+0x72>
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d825      	bhi.n	8008628 <RCCEx_PLLSAI1_Config+0x90>
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d002      	beq.n	80085e6 <RCCEx_PLLSAI1_Config+0x4e>
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d009      	beq.n	80085f8 <RCCEx_PLLSAI1_Config+0x60>
 80085e4:	e020      	b.n	8008628 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80085e6:	4b62      	ldr	r3, [pc, #392]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0302 	and.w	r3, r3, #2
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d11d      	bne.n	800862e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085f6:	e01a      	b.n	800862e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80085f8:	4b5d      	ldr	r3, [pc, #372]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008600:	2b00      	cmp	r3, #0
 8008602:	d116      	bne.n	8008632 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008608:	e013      	b.n	8008632 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800860a:	4b59      	ldr	r3, [pc, #356]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10f      	bne.n	8008636 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008616:	4b56      	ldr	r3, [pc, #344]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d109      	bne.n	8008636 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008626:	e006      	b.n	8008636 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	73fb      	strb	r3, [r7, #15]
      break;
 800862c:	e004      	b.n	8008638 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800862e:	bf00      	nop
 8008630:	e002      	b.n	8008638 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008632:	bf00      	nop
 8008634:	e000      	b.n	8008638 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008636:	bf00      	nop
    }

    if(status == HAL_OK)
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d108      	bne.n	8008650 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800863e:	4b4c      	ldr	r3, [pc, #304]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	f023 0203 	bic.w	r2, r3, #3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4949      	ldr	r1, [pc, #292]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 800864c:	4313      	orrs	r3, r2
 800864e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f040 8086 	bne.w	8008764 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008658:	4b45      	ldr	r3, [pc, #276]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a44      	ldr	r2, [pc, #272]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 800865e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008662:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008664:	f7fd fd54 	bl	8006110 <HAL_GetTick>
 8008668:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800866a:	e009      	b.n	8008680 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800866c:	f7fd fd50 	bl	8006110 <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	2b02      	cmp	r3, #2
 8008678:	d902      	bls.n	8008680 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	73fb      	strb	r3, [r7, #15]
        break;
 800867e:	e005      	b.n	800868c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008680:	4b3b      	ldr	r3, [pc, #236]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1ef      	bne.n	800866c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d168      	bne.n	8008764 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d113      	bne.n	80086c0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008698:	4b35      	ldr	r3, [pc, #212]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 800869a:	691a      	ldr	r2, [r3, #16]
 800869c:	4b35      	ldr	r3, [pc, #212]	; (8008774 <RCCEx_PLLSAI1_Config+0x1dc>)
 800869e:	4013      	ands	r3, r2
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	6892      	ldr	r2, [r2, #8]
 80086a4:	0211      	lsls	r1, r2, #8
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	68d2      	ldr	r2, [r2, #12]
 80086aa:	06d2      	lsls	r2, r2, #27
 80086ac:	4311      	orrs	r1, r2
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	6852      	ldr	r2, [r2, #4]
 80086b2:	3a01      	subs	r2, #1
 80086b4:	0112      	lsls	r2, r2, #4
 80086b6:	430a      	orrs	r2, r1
 80086b8:	492d      	ldr	r1, [pc, #180]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	610b      	str	r3, [r1, #16]
 80086be:	e02d      	b.n	800871c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d115      	bne.n	80086f2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086c6:	4b2a      	ldr	r3, [pc, #168]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086c8:	691a      	ldr	r2, [r3, #16]
 80086ca:	4b2b      	ldr	r3, [pc, #172]	; (8008778 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086cc:	4013      	ands	r3, r2
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	6892      	ldr	r2, [r2, #8]
 80086d2:	0211      	lsls	r1, r2, #8
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	6912      	ldr	r2, [r2, #16]
 80086d8:	0852      	lsrs	r2, r2, #1
 80086da:	3a01      	subs	r2, #1
 80086dc:	0552      	lsls	r2, r2, #21
 80086de:	4311      	orrs	r1, r2
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6852      	ldr	r2, [r2, #4]
 80086e4:	3a01      	subs	r2, #1
 80086e6:	0112      	lsls	r2, r2, #4
 80086e8:	430a      	orrs	r2, r1
 80086ea:	4921      	ldr	r1, [pc, #132]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	610b      	str	r3, [r1, #16]
 80086f0:	e014      	b.n	800871c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086f2:	4b1f      	ldr	r3, [pc, #124]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086f4:	691a      	ldr	r2, [r3, #16]
 80086f6:	4b21      	ldr	r3, [pc, #132]	; (800877c <RCCEx_PLLSAI1_Config+0x1e4>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	6892      	ldr	r2, [r2, #8]
 80086fe:	0211      	lsls	r1, r2, #8
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	6952      	ldr	r2, [r2, #20]
 8008704:	0852      	lsrs	r2, r2, #1
 8008706:	3a01      	subs	r2, #1
 8008708:	0652      	lsls	r2, r2, #25
 800870a:	4311      	orrs	r1, r2
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	6852      	ldr	r2, [r2, #4]
 8008710:	3a01      	subs	r2, #1
 8008712:	0112      	lsls	r2, r2, #4
 8008714:	430a      	orrs	r2, r1
 8008716:	4916      	ldr	r1, [pc, #88]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008718:	4313      	orrs	r3, r2
 800871a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800871c:	4b14      	ldr	r3, [pc, #80]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a13      	ldr	r2, [pc, #76]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008726:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008728:	f7fd fcf2 	bl	8006110 <HAL_GetTick>
 800872c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800872e:	e009      	b.n	8008744 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008730:	f7fd fcee 	bl	8006110 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	2b02      	cmp	r3, #2
 800873c:	d902      	bls.n	8008744 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	73fb      	strb	r3, [r7, #15]
          break;
 8008742:	e005      	b.n	8008750 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008744:	4b0a      	ldr	r3, [pc, #40]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0ef      	beq.n	8008730 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d106      	bne.n	8008764 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008756:	4b06      	ldr	r3, [pc, #24]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008758:	691a      	ldr	r2, [r3, #16]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	4904      	ldr	r1, [pc, #16]	; (8008770 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008760:	4313      	orrs	r3, r2
 8008762:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008764:	7bfb      	ldrb	r3, [r7, #15]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	40021000 	.word	0x40021000
 8008774:	07ff800f 	.word	0x07ff800f
 8008778:	ff9f800f 	.word	0xff9f800f
 800877c:	f9ff800f 	.word	0xf9ff800f

08008780 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800878e:	4b72      	ldr	r3, [pc, #456]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00e      	beq.n	80087b8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800879a:	4b6f      	ldr	r3, [pc, #444]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	f003 0203 	and.w	r2, r3, #3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d103      	bne.n	80087b2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
       ||
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d142      	bne.n	8008838 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	73fb      	strb	r3, [r7, #15]
 80087b6:	e03f      	b.n	8008838 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d018      	beq.n	80087f2 <RCCEx_PLLSAI2_Config+0x72>
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	d825      	bhi.n	8008810 <RCCEx_PLLSAI2_Config+0x90>
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d002      	beq.n	80087ce <RCCEx_PLLSAI2_Config+0x4e>
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d009      	beq.n	80087e0 <RCCEx_PLLSAI2_Config+0x60>
 80087cc:	e020      	b.n	8008810 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80087ce:	4b62      	ldr	r3, [pc, #392]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d11d      	bne.n	8008816 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087de:	e01a      	b.n	8008816 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80087e0:	4b5d      	ldr	r3, [pc, #372]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d116      	bne.n	800881a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087f0:	e013      	b.n	800881a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80087f2:	4b59      	ldr	r3, [pc, #356]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10f      	bne.n	800881e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80087fe:	4b56      	ldr	r3, [pc, #344]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d109      	bne.n	800881e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800880e:	e006      	b.n	800881e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	73fb      	strb	r3, [r7, #15]
      break;
 8008814:	e004      	b.n	8008820 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008816:	bf00      	nop
 8008818:	e002      	b.n	8008820 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800881a:	bf00      	nop
 800881c:	e000      	b.n	8008820 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800881e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d108      	bne.n	8008838 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8008826:	4b4c      	ldr	r3, [pc, #304]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	f023 0203 	bic.w	r2, r3, #3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4949      	ldr	r1, [pc, #292]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008834:	4313      	orrs	r3, r2
 8008836:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	2b00      	cmp	r3, #0
 800883c:	f040 8086 	bne.w	800894c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008840:	4b45      	ldr	r3, [pc, #276]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a44      	ldr	r2, [pc, #272]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800884a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800884c:	f7fd fc60 	bl	8006110 <HAL_GetTick>
 8008850:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008852:	e009      	b.n	8008868 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008854:	f7fd fc5c 	bl	8006110 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	2b02      	cmp	r3, #2
 8008860:	d902      	bls.n	8008868 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	73fb      	strb	r3, [r7, #15]
        break;
 8008866:	e005      	b.n	8008874 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008868:	4b3b      	ldr	r3, [pc, #236]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1ef      	bne.n	8008854 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d168      	bne.n	800894c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d113      	bne.n	80088a8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008880:	4b35      	ldr	r3, [pc, #212]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008882:	695a      	ldr	r2, [r3, #20]
 8008884:	4b35      	ldr	r3, [pc, #212]	; (800895c <RCCEx_PLLSAI2_Config+0x1dc>)
 8008886:	4013      	ands	r3, r2
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	6892      	ldr	r2, [r2, #8]
 800888c:	0211      	lsls	r1, r2, #8
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	68d2      	ldr	r2, [r2, #12]
 8008892:	06d2      	lsls	r2, r2, #27
 8008894:	4311      	orrs	r1, r2
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6852      	ldr	r2, [r2, #4]
 800889a:	3a01      	subs	r2, #1
 800889c:	0112      	lsls	r2, r2, #4
 800889e:	430a      	orrs	r2, r1
 80088a0:	492d      	ldr	r1, [pc, #180]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	614b      	str	r3, [r1, #20]
 80088a6:	e02d      	b.n	8008904 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d115      	bne.n	80088da <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80088ae:	4b2a      	ldr	r3, [pc, #168]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 80088b0:	695a      	ldr	r2, [r3, #20]
 80088b2:	4b2b      	ldr	r3, [pc, #172]	; (8008960 <RCCEx_PLLSAI2_Config+0x1e0>)
 80088b4:	4013      	ands	r3, r2
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	6892      	ldr	r2, [r2, #8]
 80088ba:	0211      	lsls	r1, r2, #8
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	6912      	ldr	r2, [r2, #16]
 80088c0:	0852      	lsrs	r2, r2, #1
 80088c2:	3a01      	subs	r2, #1
 80088c4:	0552      	lsls	r2, r2, #21
 80088c6:	4311      	orrs	r1, r2
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	6852      	ldr	r2, [r2, #4]
 80088cc:	3a01      	subs	r2, #1
 80088ce:	0112      	lsls	r2, r2, #4
 80088d0:	430a      	orrs	r2, r1
 80088d2:	4921      	ldr	r1, [pc, #132]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 80088d4:	4313      	orrs	r3, r2
 80088d6:	614b      	str	r3, [r1, #20]
 80088d8:	e014      	b.n	8008904 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80088da:	4b1f      	ldr	r3, [pc, #124]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 80088dc:	695a      	ldr	r2, [r3, #20]
 80088de:	4b21      	ldr	r3, [pc, #132]	; (8008964 <RCCEx_PLLSAI2_Config+0x1e4>)
 80088e0:	4013      	ands	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	6892      	ldr	r2, [r2, #8]
 80088e6:	0211      	lsls	r1, r2, #8
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	6952      	ldr	r2, [r2, #20]
 80088ec:	0852      	lsrs	r2, r2, #1
 80088ee:	3a01      	subs	r2, #1
 80088f0:	0652      	lsls	r2, r2, #25
 80088f2:	4311      	orrs	r1, r2
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	6852      	ldr	r2, [r2, #4]
 80088f8:	3a01      	subs	r2, #1
 80088fa:	0112      	lsls	r2, r2, #4
 80088fc:	430a      	orrs	r2, r1
 80088fe:	4916      	ldr	r1, [pc, #88]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008900:	4313      	orrs	r3, r2
 8008902:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008904:	4b14      	ldr	r3, [pc, #80]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a13      	ldr	r2, [pc, #76]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 800890a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800890e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008910:	f7fd fbfe 	bl	8006110 <HAL_GetTick>
 8008914:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008916:	e009      	b.n	800892c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008918:	f7fd fbfa 	bl	8006110 <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	2b02      	cmp	r3, #2
 8008924:	d902      	bls.n	800892c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	73fb      	strb	r3, [r7, #15]
          break;
 800892a:	e005      	b.n	8008938 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800892c:	4b0a      	ldr	r3, [pc, #40]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d0ef      	beq.n	8008918 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d106      	bne.n	800894c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800893e:	4b06      	ldr	r3, [pc, #24]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008940:	695a      	ldr	r2, [r3, #20]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	4904      	ldr	r1, [pc, #16]	; (8008958 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008948:	4313      	orrs	r3, r2
 800894a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	40021000 	.word	0x40021000
 800895c:	07ff800f 	.word	0x07ff800f
 8008960:	ff9f800f 	.word	0xff9f800f
 8008964:	f9ff800f 	.word	0xf9ff800f

08008968 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e096      	b.n	8008aa8 <HAL_RNG_Init+0x140>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	7a5b      	ldrb	r3, [r3, #9]
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	d105      	bne.n	8008990 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7fc fcc2 	bl	8005314 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2202      	movs	r2, #2
 8008994:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0204 	bic.w	r2, r2, #4
 80089a4:	601a      	str	r2, [r3, #0]

  /* RNG CR register configuration. Set value in CR register for CONFIG 1, CONFIG 2 and CONFIG 3 values */
  cr_value = (uint32_t) (RNG_CR_CONFIG_VAL);
 80089a6:	4b42      	ldr	r3, [pc, #264]	; (8008ab0 <HAL_RNG_Init+0x148>)
 80089a8:	60fb      	str	r3, [r7, #12]

  /* Configuration of 
     - Clock Error Detection 
     - CONFIG1, CONFIG2, CONFIG3 fields
     when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST | RNG_CR_RNG_CONFIG1
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	4b40      	ldr	r3, [pc, #256]	; (8008ab4 <HAL_RNG_Init+0x14c>)
 80089b2:	4013      	ands	r3, r2
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	6851      	ldr	r1, [r2, #4]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	431a      	orrs	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80089c6:	601a      	str	r2, [r3, #0]
                                 | RNG_CR_RNG_CONFIG2 | RNG_CR_RNG_CONFIG3,
                                 (uint32_t) (RNG_CR_CONDRST | hrng->Init.ClockErrorDetection | cr_value));

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a3a      	ldr	r2, [pc, #232]	; (8008ab8 <HAL_RNG_Init+0x150>)
 80089ce:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f64a 2274 	movw	r2, #43636	; 0xaa74
 80089d8:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bits CONDRST=0*/
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80089e8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089ea:	f7fd fb91 	bl	8006110 <HAL_GetTick>
 80089ee:	60b8      	str	r0, [r7, #8]

  /* Wait for conditioning reset process to be completed */
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80089f0:	e016      	b.n	8008a20 <HAL_RNG_Init+0xb8>
  {
    if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 80089f2:	f7fd fb8d 	bl	8006110 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d90f      	bls.n	8008a20 <HAL_RNG_Init+0xb8>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a0e:	d107      	bne.n	8008a20 <HAL_RNG_Init+0xb8>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2202      	movs	r2, #2
 8008a1a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e043      	b.n	8008aa8 <HAL_RNG_Init+0x140>
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a2e:	d0e0      	beq.n	80089f2 <HAL_RNG_Init+0x8a>
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f042 0204 	orr.w	r2, r2, #4
 8008a3e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4a:	2b40      	cmp	r3, #64	; 0x40
 8008a4c:	d104      	bne.n	8008a58 <HAL_RNG_Init+0xf0>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2204      	movs	r2, #4
 8008a52:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e027      	b.n	8008aa8 <HAL_RNG_Init+0x140>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8008a58:	f7fd fb5a 	bl	8006110 <HAL_GetTick>
 8008a5c:	60b8      	str	r0, [r7, #8]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008a5e:	e015      	b.n	8008a8c <HAL_RNG_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008a60:	f7fd fb56 	bl	8006110 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d90e      	bls.n	8008a8c <HAL_RNG_Init+0x124>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b04      	cmp	r3, #4
 8008a7a:	d107      	bne.n	8008a8c <HAL_RNG_Init+0x124>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2204      	movs	r2, #4
 8008a80:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2202      	movs	r2, #2
 8008a86:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e00d      	b.n	8008aa8 <HAL_RNG_Init+0x140>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f003 0304 	and.w	r3, r3, #4
 8008a96:	2b04      	cmp	r3, #4
 8008a98:	d0e2      	beq.n	8008a60 <HAL_RNG_Init+0xf8>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	00f00d00 	.word	0x00f00d00
 8008ab4:	bc0f10df 	.word	0xbc0f10df
 8008ab8:	17590abc 	.word	0x17590abc

08008abc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	7a1b      	ldrb	r3, [r3, #8]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d101      	bne.n	8008ad6 <HAL_RNG_GenerateRandomNumber+0x1a>
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	e03d      	b.n	8008b52 <HAL_RNG_GenerateRandomNumber+0x96>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	7a5b      	ldrb	r3, [r3, #9]
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d12c      	bne.n	8008b40 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2202      	movs	r2, #2
 8008aea:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008aec:	f7fd fb10 	bl	8006110 <HAL_GetTick>
 8008af0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008af2:	e011      	b.n	8008b18 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008af4:	f7fd fb0c 	bl	8006110 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d90a      	bls.n	8008b18 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e01c      	b.n	8008b52 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d1e6      	bne.n	8008af4 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	691a      	ldr	r2, [r3, #16]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	725a      	strb	r2, [r3, #9]
 8008b3e:	e004      	b.n	8008b4a <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2204      	movs	r2, #4
 8008b44:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	721a      	strb	r2, [r3, #8]

  return status;
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d07f      	beq.n	8008c6e <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d106      	bne.n	8008b88 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7fc fc32 	bl	80053ec <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8008b8e:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	22ca      	movs	r2, #202	; 0xca
 8008b9e:	625a      	str	r2, [r3, #36]	; 0x24
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2253      	movs	r2, #83	; 0x53
 8008ba6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f93d 	bl	8008e28 <RTC_EnterInitMode>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d15a      	bne.n	8008c6e <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	6812      	ldr	r2, [r2, #0]
 8008bc2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bca:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6999      	ldr	r1, [r3, #24]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	689a      	ldr	r2, [r3, #8]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	431a      	orrs	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	6912      	ldr	r2, [r2, #16]
 8008bf2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6919      	ldr	r1, [r3, #16]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	041a      	lsls	r2, r3, #16
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	430a      	orrs	r2, r1
 8008c06:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008c08:	4b1b      	ldr	r3, [pc, #108]	; (8008c78 <HAL_RTC_Init+0x11c>)
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c18:	430b      	orrs	r3, r1
 8008c1a:	4917      	ldr	r1, [pc, #92]	; (8008c78 <HAL_RTC_Init+0x11c>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f937 	bl	8008e94 <RTC_ExitInitMode>
 8008c26:	4603      	mov	r3, r0
 8008c28:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d11e      	bne.n	8008c6e <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	699a      	ldr	r2, [r3, #24]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8008c3e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6999      	ldr	r1, [r3, #24]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	431a      	orrs	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	431a      	orrs	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	22ff      	movs	r2, #255	; 0xff
 8008c64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	40002800 	.word	0x40002800

08008c7c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8008c88:	4b2c      	ldr	r3, [pc, #176]	; (8008d3c <HAL_RTC_GetTime+0xc0>)
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8008c90:	4b2a      	ldr	r3, [pc, #168]	; (8008d3c <HAL_RTC_GetTime+0xc0>)
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c9c:	d049      	beq.n	8008d32 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8008c9e:	4b27      	ldr	r3, [pc, #156]	; (8008d3c <HAL_RTC_GetTime+0xc0>)
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8008caa:	4b24      	ldr	r3, [pc, #144]	; (8008d3c <HAL_RTC_GetTime+0xc0>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008cb2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008cb6:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	0c1b      	lsrs	r3, r3, #16
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	0a1b      	lsrs	r3, r3, #8
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	0d9b      	lsrs	r3, r3, #22
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d11a      	bne.n	8008d32 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 f905 	bl	8008f10 <RTC_Bcd2ToByte>
 8008d06:	4603      	mov	r3, r0
 8008d08:	461a      	mov	r2, r3
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	785b      	ldrb	r3, [r3, #1]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 f8fc 	bl	8008f10 <RTC_Bcd2ToByte>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	789b      	ldrb	r3, [r3, #2]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 f8f3 	bl	8008f10 <RTC_Bcd2ToByte>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3718      	adds	r7, #24
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	40002800 	.word	0x40002800

08008d40 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8008d4c:	4b22      	ldr	r3, [pc, #136]	; (8008dd8 <HAL_RTC_GetDate+0x98>)
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008d54:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d58:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	0c1b      	lsrs	r3, r3, #16
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	0a1b      	lsrs	r3, r3, #8
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	f003 031f 	and.w	r3, r3, #31
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	0b5b      	lsrs	r3, r3, #13
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d11a      	bne.n	8008dce <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	78db      	ldrb	r3, [r3, #3]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f000 f8b7 	bl	8008f10 <RTC_Bcd2ToByte>
 8008da2:	4603      	mov	r3, r0
 8008da4:	461a      	mov	r2, r3
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	785b      	ldrb	r3, [r3, #1]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 f8ae 	bl	8008f10 <RTC_Bcd2ToByte>
 8008db4:	4603      	mov	r3, r0
 8008db6:	461a      	mov	r2, r3
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	789b      	ldrb	r3, [r3, #2]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 f8a5 	bl	8008f10 <RTC_Bcd2ToByte>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	461a      	mov	r2, r3
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3718      	adds	r7, #24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	40002800 	.word	0x40002800

08008ddc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68da      	ldr	r2, [r3, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008df2:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8008df4:	f7fd f98c 	bl	8006110 <HAL_GetTick>
 8008df8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8008dfa:	e009      	b.n	8008e10 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008dfc:	f7fd f988 	bl	8006110 <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e0a:	d901      	bls.n	8008e10 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	e007      	b.n	8008e20 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	f003 0320 	and.w	r3, r3, #32
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0ee      	beq.n	8008dfc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d123      	bne.n	8008e8a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68da      	ldr	r2, [r3, #12]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e50:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008e52:	f7fd f95d 	bl	8006110 <HAL_GetTick>
 8008e56:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008e58:	e00d      	b.n	8008e76 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008e5a:	f7fd f959 	bl	8006110 <HAL_GetTick>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e68:	d905      	bls.n	8008e76 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2203      	movs	r2, #3
 8008e72:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d102      	bne.n	8008e8a <RTC_EnterInitMode+0x62>
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d1e7      	bne.n	8008e5a <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008ea0:	4b1a      	ldr	r3, [pc, #104]	; (8008f0c <RTC_ExitInitMode+0x78>)
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	4a19      	ldr	r2, [pc, #100]	; (8008f0c <RTC_ExitInitMode+0x78>)
 8008ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eaa:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008eac:	4b17      	ldr	r3, [pc, #92]	; (8008f0c <RTC_ExitInitMode+0x78>)
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	f003 0320 	and.w	r3, r3, #32
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10c      	bne.n	8008ed2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7ff ff8f 	bl	8008ddc <HAL_RTC_WaitForSynchro>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d01e      	beq.n	8008f02 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2203      	movs	r2, #3
 8008ec8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	73fb      	strb	r3, [r7, #15]
 8008ed0:	e017      	b.n	8008f02 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008ed2:	4b0e      	ldr	r3, [pc, #56]	; (8008f0c <RTC_ExitInitMode+0x78>)
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	4a0d      	ldr	r2, [pc, #52]	; (8008f0c <RTC_ExitInitMode+0x78>)
 8008ed8:	f023 0320 	bic.w	r3, r3, #32
 8008edc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7ff ff7c 	bl	8008ddc <HAL_RTC_WaitForSynchro>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d005      	beq.n	8008ef6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2203      	movs	r2, #3
 8008eee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008ef6:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <RTC_ExitInitMode+0x78>)
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	4a04      	ldr	r2, [pc, #16]	; (8008f0c <RTC_ExitInitMode+0x78>)
 8008efc:	f043 0320 	orr.w	r3, r3, #32
 8008f00:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	40002800 	.word	0x40002800

08008f10 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	4603      	mov	r3, r0
 8008f18:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008f1a:	79fb      	ldrb	r3, [r7, #7]
 8008f1c:	091b      	lsrs	r3, r3, #4
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	461a      	mov	r2, r3
 8008f22:	0092      	lsls	r2, r2, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008f2a:	79fb      	ldrb	r3, [r7, #7]
 8008f2c:	f003 030f 	and.w	r3, r3, #15
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	4413      	add	r3, r2
 8008f36:	b2db      	uxtb	r3, r3
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d101      	bne.n	8008f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e095      	b.n	8009082 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d108      	bne.n	8008f70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f66:	d009      	beq.n	8008f7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	61da      	str	r2, [r3, #28]
 8008f6e:	e005      	b.n	8008f7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d106      	bne.n	8008f9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7fc fae2 	bl	8005560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fbc:	d902      	bls.n	8008fc4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	e002      	b.n	8008fca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008fd2:	d007      	beq.n	8008fe4 <HAL_SPI_Init+0xa0>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fdc:	d002      	beq.n	8008fe4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008ff4:	431a      	orrs	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	f003 0302 	and.w	r3, r3, #2
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	431a      	orrs	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009012:	431a      	orrs	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	69db      	ldr	r3, [r3, #28]
 8009018:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800901c:	431a      	orrs	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009026:	ea42 0103 	orr.w	r1, r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	430a      	orrs	r2, r1
 8009038:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	0c1b      	lsrs	r3, r3, #16
 8009040:	f003 0204 	and.w	r2, r3, #4
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009048:	f003 0310 	and.w	r3, r3, #16
 800904c:	431a      	orrs	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009052:	f003 0308 	and.w	r3, r3, #8
 8009056:	431a      	orrs	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009060:	ea42 0103 	orr.w	r1, r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b088      	sub	sp, #32
 800908e:	af00      	add	r7, sp, #0
 8009090:	60f8      	str	r0, [r7, #12]
 8009092:	60b9      	str	r1, [r7, #8]
 8009094:	603b      	str	r3, [r7, #0]
 8009096:	4613      	mov	r3, r2
 8009098:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d101      	bne.n	80090ac <HAL_SPI_Transmit+0x22>
 80090a8:	2302      	movs	r3, #2
 80090aa:	e158      	b.n	800935e <HAL_SPI_Transmit+0x2d4>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090b4:	f7fd f82c 	bl	8006110 <HAL_GetTick>
 80090b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80090ba:	88fb      	ldrh	r3, [r7, #6]
 80090bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d002      	beq.n	80090d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80090ca:	2302      	movs	r3, #2
 80090cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090ce:	e13d      	b.n	800934c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <HAL_SPI_Transmit+0x52>
 80090d6:	88fb      	ldrh	r3, [r7, #6]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d102      	bne.n	80090e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090e0:	e134      	b.n	800934c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2203      	movs	r2, #3
 80090e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	88fa      	ldrh	r2, [r7, #6]
 80090fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	88fa      	ldrh	r2, [r7, #6]
 8009100:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800912c:	d10f      	bne.n	800914e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800913c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800914c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009158:	2b40      	cmp	r3, #64	; 0x40
 800915a:	d007      	beq.n	800916c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800916a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009174:	d94b      	bls.n	800920e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <HAL_SPI_Transmit+0xfa>
 800917e:	8afb      	ldrh	r3, [r7, #22]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d13e      	bne.n	8009202 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	881a      	ldrh	r2, [r3, #0]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009194:	1c9a      	adds	r2, r3, #2
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800919e:	b29b      	uxth	r3, r3
 80091a0:	3b01      	subs	r3, #1
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80091a8:	e02b      	b.n	8009202 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d112      	bne.n	80091de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091bc:	881a      	ldrh	r2, [r3, #0]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c8:	1c9a      	adds	r2, r3, #2
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	3b01      	subs	r3, #1
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80091dc:	e011      	b.n	8009202 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091de:	f7fc ff97 	bl	8006110 <HAL_GetTick>
 80091e2:	4602      	mov	r2, r0
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	683a      	ldr	r2, [r7, #0]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d803      	bhi.n	80091f6 <HAL_SPI_Transmit+0x16c>
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f4:	d102      	bne.n	80091fc <HAL_SPI_Transmit+0x172>
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009200:	e0a4      	b.n	800934c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009206:	b29b      	uxth	r3, r3
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1ce      	bne.n	80091aa <HAL_SPI_Transmit+0x120>
 800920c:	e07c      	b.n	8009308 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d002      	beq.n	800921c <HAL_SPI_Transmit+0x192>
 8009216:	8afb      	ldrh	r3, [r7, #22]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d170      	bne.n	80092fe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009220:	b29b      	uxth	r3, r3
 8009222:	2b01      	cmp	r3, #1
 8009224:	d912      	bls.n	800924c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922a:	881a      	ldrh	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	1c9a      	adds	r2, r3, #2
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009240:	b29b      	uxth	r3, r3
 8009242:	3b02      	subs	r3, #2
 8009244:	b29a      	uxth	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	87da      	strh	r2, [r3, #62]	; 0x3e
 800924a:	e058      	b.n	80092fe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	330c      	adds	r3, #12
 8009256:	7812      	ldrb	r2, [r2, #0]
 8009258:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009268:	b29b      	uxth	r3, r3
 800926a:	3b01      	subs	r3, #1
 800926c:	b29a      	uxth	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009272:	e044      	b.n	80092fe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f003 0302 	and.w	r3, r3, #2
 800927e:	2b02      	cmp	r3, #2
 8009280:	d12b      	bne.n	80092da <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009286:	b29b      	uxth	r3, r3
 8009288:	2b01      	cmp	r3, #1
 800928a:	d912      	bls.n	80092b2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009290:	881a      	ldrh	r2, [r3, #0]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929c:	1c9a      	adds	r2, r3, #2
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	3b02      	subs	r3, #2
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092b0:	e025      	b.n	80092fe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	330c      	adds	r3, #12
 80092bc:	7812      	ldrb	r2, [r2, #0]
 80092be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c4:	1c5a      	adds	r2, r3, #1
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	3b01      	subs	r3, #1
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092d8:	e011      	b.n	80092fe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092da:	f7fc ff19 	bl	8006110 <HAL_GetTick>
 80092de:	4602      	mov	r2, r0
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d803      	bhi.n	80092f2 <HAL_SPI_Transmit+0x268>
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f0:	d102      	bne.n	80092f8 <HAL_SPI_Transmit+0x26e>
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d102      	bne.n	80092fe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80092fc:	e026      	b.n	800934c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009302:	b29b      	uxth	r3, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1b5      	bne.n	8009274 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f000 fce3 	bl	8009cd8 <SPI_EndRxTxTransaction>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2220      	movs	r2, #32
 800931c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10a      	bne.n	800933c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009326:	2300      	movs	r3, #0
 8009328:	613b      	str	r3, [r7, #16]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	613b      	str	r3, [r7, #16]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	613b      	str	r3, [r7, #16]
 800933a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	77fb      	strb	r3, [r7, #31]
 8009348:	e000      	b.n	800934c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800934a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800935c:	7ffb      	ldrb	r3, [r7, #31]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3720      	adds	r7, #32
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b088      	sub	sp, #32
 800936a:	af02      	add	r7, sp, #8
 800936c:	60f8      	str	r0, [r7, #12]
 800936e:	60b9      	str	r1, [r7, #8]
 8009370:	603b      	str	r3, [r7, #0]
 8009372:	4613      	mov	r3, r2
 8009374:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009382:	d112      	bne.n	80093aa <HAL_SPI_Receive+0x44>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d10e      	bne.n	80093aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2204      	movs	r2, #4
 8009390:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009394:	88fa      	ldrh	r2, [r7, #6]
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	4613      	mov	r3, r2
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	68b9      	ldr	r1, [r7, #8]
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 f910 	bl	80095c6 <HAL_SPI_TransmitReceive>
 80093a6:	4603      	mov	r3, r0
 80093a8:	e109      	b.n	80095be <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d101      	bne.n	80093b8 <HAL_SPI_Receive+0x52>
 80093b4:	2302      	movs	r3, #2
 80093b6:	e102      	b.n	80095be <HAL_SPI_Receive+0x258>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093c0:	f7fc fea6 	bl	8006110 <HAL_GetTick>
 80093c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d002      	beq.n	80093d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80093d2:	2302      	movs	r3, #2
 80093d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80093d6:	e0e9      	b.n	80095ac <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <HAL_SPI_Receive+0x7e>
 80093de:	88fb      	ldrh	r3, [r7, #6]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d102      	bne.n	80093ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80093e8:	e0e0      	b.n	80095ac <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2204      	movs	r2, #4
 80093ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	88fa      	ldrh	r2, [r7, #6]
 8009402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	88fa      	ldrh	r2, [r7, #6]
 800940a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009434:	d908      	bls.n	8009448 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009444:	605a      	str	r2, [r3, #4]
 8009446:	e007      	b.n	8009458 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009456:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009460:	d10f      	bne.n	8009482 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009470:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009480:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800948c:	2b40      	cmp	r3, #64	; 0x40
 800948e:	d007      	beq.n	80094a0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800949e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094a8:	d867      	bhi.n	800957a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80094aa:	e030      	b.n	800950e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	f003 0301 	and.w	r3, r3, #1
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d117      	bne.n	80094ea <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f103 020c 	add.w	r2, r3, #12
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c6:	7812      	ldrb	r2, [r2, #0]
 80094c8:	b2d2      	uxtb	r2, r2
 80094ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d0:	1c5a      	adds	r2, r3, #1
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80094dc:	b29b      	uxth	r3, r3
 80094de:	3b01      	subs	r3, #1
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80094e8:	e011      	b.n	800950e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094ea:	f7fc fe11 	bl	8006110 <HAL_GetTick>
 80094ee:	4602      	mov	r2, r0
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	683a      	ldr	r2, [r7, #0]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d803      	bhi.n	8009502 <HAL_SPI_Receive+0x19c>
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009500:	d102      	bne.n	8009508 <HAL_SPI_Receive+0x1a2>
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d102      	bne.n	800950e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800950c:	e04e      	b.n	80095ac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009514:	b29b      	uxth	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1c8      	bne.n	80094ac <HAL_SPI_Receive+0x146>
 800951a:	e034      	b.n	8009586 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b01      	cmp	r3, #1
 8009528:	d115      	bne.n	8009556 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68da      	ldr	r2, [r3, #12]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009534:	b292      	uxth	r2, r2
 8009536:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953c:	1c9a      	adds	r2, r3, #2
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009548:	b29b      	uxth	r3, r3
 800954a:	3b01      	subs	r3, #1
 800954c:	b29a      	uxth	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009554:	e011      	b.n	800957a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009556:	f7fc fddb 	bl	8006110 <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	429a      	cmp	r2, r3
 8009564:	d803      	bhi.n	800956e <HAL_SPI_Receive+0x208>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956c:	d102      	bne.n	8009574 <HAL_SPI_Receive+0x20e>
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d102      	bne.n	800957a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009578:	e018      	b.n	80095ac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009580:	b29b      	uxth	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1ca      	bne.n	800951c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 fb4c 	bl	8009c28 <SPI_EndRxTransaction>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d002      	beq.n	800959c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2220      	movs	r2, #32
 800959a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	75fb      	strb	r3, [r7, #23]
 80095a8:	e000      	b.n	80095ac <HAL_SPI_Receive+0x246>
  }

error :
 80095aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80095bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b08a      	sub	sp, #40	; 0x28
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	60f8      	str	r0, [r7, #12]
 80095ce:	60b9      	str	r1, [r7, #8]
 80095d0:	607a      	str	r2, [r7, #4]
 80095d2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80095d4:	2301      	movs	r3, #1
 80095d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d101      	bne.n	80095ec <HAL_SPI_TransmitReceive+0x26>
 80095e8:	2302      	movs	r3, #2
 80095ea:	e1fb      	b.n	80099e4 <HAL_SPI_TransmitReceive+0x41e>
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095f4:	f7fc fd8c 	bl	8006110 <HAL_GetTick>
 80095f8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009600:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009608:	887b      	ldrh	r3, [r7, #2]
 800960a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800960c:	887b      	ldrh	r3, [r7, #2]
 800960e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009610:	7efb      	ldrb	r3, [r7, #27]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d00e      	beq.n	8009634 <HAL_SPI_TransmitReceive+0x6e>
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800961c:	d106      	bne.n	800962c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d102      	bne.n	800962c <HAL_SPI_TransmitReceive+0x66>
 8009626:	7efb      	ldrb	r3, [r7, #27]
 8009628:	2b04      	cmp	r3, #4
 800962a:	d003      	beq.n	8009634 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800962c:	2302      	movs	r3, #2
 800962e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009632:	e1cd      	b.n	80099d0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d005      	beq.n	8009646 <HAL_SPI_TransmitReceive+0x80>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <HAL_SPI_TransmitReceive+0x80>
 8009640:	887b      	ldrh	r3, [r7, #2]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d103      	bne.n	800964e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800964c:	e1c0      	b.n	80099d0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b04      	cmp	r3, #4
 8009658:	d003      	beq.n	8009662 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2205      	movs	r2, #5
 800965e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	887a      	ldrh	r2, [r7, #2]
 8009672:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	887a      	ldrh	r2, [r7, #2]
 800967a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	887a      	ldrh	r2, [r7, #2]
 8009688:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	887a      	ldrh	r2, [r7, #2]
 800968e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80096a4:	d802      	bhi.n	80096ac <HAL_SPI_TransmitReceive+0xe6>
 80096a6:	8a3b      	ldrh	r3, [r7, #16]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d908      	bls.n	80096be <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80096ba:	605a      	str	r2, [r3, #4]
 80096bc:	e007      	b.n	80096ce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80096cc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d8:	2b40      	cmp	r3, #64	; 0x40
 80096da:	d007      	beq.n	80096ec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80096f4:	d97c      	bls.n	80097f0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d002      	beq.n	8009704 <HAL_SPI_TransmitReceive+0x13e>
 80096fe:	8a7b      	ldrh	r3, [r7, #18]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d169      	bne.n	80097d8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009708:	881a      	ldrh	r2, [r3, #0]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009714:	1c9a      	adds	r2, r3, #2
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800971e:	b29b      	uxth	r3, r3
 8009720:	3b01      	subs	r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009728:	e056      	b.n	80097d8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b02      	cmp	r3, #2
 8009736:	d11b      	bne.n	8009770 <HAL_SPI_TransmitReceive+0x1aa>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800973c:	b29b      	uxth	r3, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d016      	beq.n	8009770 <HAL_SPI_TransmitReceive+0x1aa>
 8009742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009744:	2b01      	cmp	r3, #1
 8009746:	d113      	bne.n	8009770 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974c:	881a      	ldrh	r2, [r3, #0]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009758:	1c9a      	adds	r2, r3, #2
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009762:	b29b      	uxth	r3, r3
 8009764:	3b01      	subs	r3, #1
 8009766:	b29a      	uxth	r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b01      	cmp	r3, #1
 800977c:	d11c      	bne.n	80097b8 <HAL_SPI_TransmitReceive+0x1f2>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009784:	b29b      	uxth	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d016      	beq.n	80097b8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68da      	ldr	r2, [r3, #12]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009794:	b292      	uxth	r2, r2
 8009796:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979c:	1c9a      	adds	r2, r3, #2
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	3b01      	subs	r3, #1
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80097b4:	2301      	movs	r3, #1
 80097b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80097b8:	f7fc fcaa 	bl	8006110 <HAL_GetTick>
 80097bc:	4602      	mov	r2, r0
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d807      	bhi.n	80097d8 <HAL_SPI_TransmitReceive+0x212>
 80097c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ce:	d003      	beq.n	80097d8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80097d6:	e0fb      	b.n	80099d0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097dc:	b29b      	uxth	r3, r3
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1a3      	bne.n	800972a <HAL_SPI_TransmitReceive+0x164>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d19d      	bne.n	800972a <HAL_SPI_TransmitReceive+0x164>
 80097ee:	e0df      	b.n	80099b0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d003      	beq.n	8009800 <HAL_SPI_TransmitReceive+0x23a>
 80097f8:	8a7b      	ldrh	r3, [r7, #18]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	f040 80cb 	bne.w	8009996 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009804:	b29b      	uxth	r3, r3
 8009806:	2b01      	cmp	r3, #1
 8009808:	d912      	bls.n	8009830 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980e:	881a      	ldrh	r2, [r3, #0]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981a:	1c9a      	adds	r2, r3, #2
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009824:	b29b      	uxth	r3, r3
 8009826:	3b02      	subs	r3, #2
 8009828:	b29a      	uxth	r2, r3
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800982e:	e0b2      	b.n	8009996 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	330c      	adds	r3, #12
 800983a:	7812      	ldrb	r2, [r2, #0]
 800983c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800984c:	b29b      	uxth	r3, r3
 800984e:	3b01      	subs	r3, #1
 8009850:	b29a      	uxth	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009856:	e09e      	b.n	8009996 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f003 0302 	and.w	r3, r3, #2
 8009862:	2b02      	cmp	r3, #2
 8009864:	d134      	bne.n	80098d0 <HAL_SPI_TransmitReceive+0x30a>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800986a:	b29b      	uxth	r3, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	d02f      	beq.n	80098d0 <HAL_SPI_TransmitReceive+0x30a>
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	2b01      	cmp	r3, #1
 8009874:	d12c      	bne.n	80098d0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800987a:	b29b      	uxth	r3, r3
 800987c:	2b01      	cmp	r3, #1
 800987e:	d912      	bls.n	80098a6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009884:	881a      	ldrh	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009890:	1c9a      	adds	r2, r3, #2
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800989a:	b29b      	uxth	r3, r3
 800989c:	3b02      	subs	r3, #2
 800989e:	b29a      	uxth	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80098a4:	e012      	b.n	80098cc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	330c      	adds	r3, #12
 80098b0:	7812      	ldrb	r2, [r2, #0]
 80098b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	3b01      	subs	r3, #1
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098cc:	2300      	movs	r3, #0
 80098ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d148      	bne.n	8009970 <HAL_SPI_TransmitReceive+0x3aa>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d042      	beq.n	8009970 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d923      	bls.n	800993e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68da      	ldr	r2, [r3, #12]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009900:	b292      	uxth	r2, r2
 8009902:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009908:	1c9a      	adds	r2, r3, #2
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009914:	b29b      	uxth	r3, r3
 8009916:	3b02      	subs	r3, #2
 8009918:	b29a      	uxth	r2, r3
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009926:	b29b      	uxth	r3, r3
 8009928:	2b01      	cmp	r3, #1
 800992a:	d81f      	bhi.n	800996c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685a      	ldr	r2, [r3, #4]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800993a:	605a      	str	r2, [r3, #4]
 800993c:	e016      	b.n	800996c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f103 020c 	add.w	r2, r3, #12
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994a:	7812      	ldrb	r2, [r2, #0]
 800994c:	b2d2      	uxtb	r2, r2
 800994e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009954:	1c5a      	adds	r2, r3, #1
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009960:	b29b      	uxth	r3, r3
 8009962:	3b01      	subs	r3, #1
 8009964:	b29a      	uxth	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800996c:	2301      	movs	r3, #1
 800996e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009970:	f7fc fbce 	bl	8006110 <HAL_GetTick>
 8009974:	4602      	mov	r2, r0
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800997c:	429a      	cmp	r2, r3
 800997e:	d803      	bhi.n	8009988 <HAL_SPI_TransmitReceive+0x3c2>
 8009980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009986:	d102      	bne.n	800998e <HAL_SPI_TransmitReceive+0x3c8>
 8009988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998a:	2b00      	cmp	r3, #0
 800998c:	d103      	bne.n	8009996 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009994:	e01c      	b.n	80099d0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800999a:	b29b      	uxth	r3, r3
 800999c:	2b00      	cmp	r3, #0
 800999e:	f47f af5b 	bne.w	8009858 <HAL_SPI_TransmitReceive+0x292>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f47f af54 	bne.w	8009858 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099b0:	69fa      	ldr	r2, [r7, #28]
 80099b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f000 f98f 	bl	8009cd8 <SPI_EndRxTxTransaction>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d006      	beq.n	80099ce <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2220      	movs	r2, #32
 80099ca:	661a      	str	r2, [r3, #96]	; 0x60
 80099cc:	e000      	b.n	80099d0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80099ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80099e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3728      	adds	r7, #40	; 0x28
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b088      	sub	sp, #32
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	603b      	str	r3, [r7, #0]
 80099f8:	4613      	mov	r3, r2
 80099fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80099fc:	f7fc fb88 	bl	8006110 <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	1a9b      	subs	r3, r3, r2
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	4413      	add	r3, r2
 8009a0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009a0c:	f7fc fb80 	bl	8006110 <HAL_GetTick>
 8009a10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a12:	4b39      	ldr	r3, [pc, #228]	; (8009af8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	015b      	lsls	r3, r3, #5
 8009a18:	0d1b      	lsrs	r3, r3, #20
 8009a1a:	69fa      	ldr	r2, [r7, #28]
 8009a1c:	fb02 f303 	mul.w	r3, r2, r3
 8009a20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a22:	e054      	b.n	8009ace <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2a:	d050      	beq.n	8009ace <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a2c:	f7fc fb70 	bl	8006110 <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	69fa      	ldr	r2, [r7, #28]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d902      	bls.n	8009a42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d13d      	bne.n	8009abe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a5a:	d111      	bne.n	8009a80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a64:	d004      	beq.n	8009a70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a6e:	d107      	bne.n	8009a80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a88:	d10f      	bne.n	8009aaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009aba:	2303      	movs	r3, #3
 8009abc:	e017      	b.n	8009aee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d101      	bne.n	8009ac8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	bf0c      	ite	eq
 8009ade:	2301      	moveq	r3, #1
 8009ae0:	2300      	movne	r3, #0
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	79fb      	ldrb	r3, [r7, #7]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d19b      	bne.n	8009a24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3720      	adds	r7, #32
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20000074 	.word	0x20000074

08009afc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b08a      	sub	sp, #40	; 0x28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
 8009b08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009b0e:	f7fc faff 	bl	8006110 <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b16:	1a9b      	subs	r3, r3, r2
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009b1e:	f7fc faf7 	bl	8006110 <HAL_GetTick>
 8009b22:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	330c      	adds	r3, #12
 8009b2a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009b2c:	4b3d      	ldr	r3, [pc, #244]	; (8009c24 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	4613      	mov	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4413      	add	r3, r2
 8009b36:	00da      	lsls	r2, r3, #3
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	0d1b      	lsrs	r3, r3, #20
 8009b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3e:	fb02 f303 	mul.w	r3, r2, r3
 8009b42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009b44:	e060      	b.n	8009c08 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009b4c:	d107      	bne.n	8009b5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d104      	bne.n	8009b5e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009b5c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b64:	d050      	beq.n	8009c08 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b66:	f7fc fad3 	bl	8006110 <HAL_GetTick>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d902      	bls.n	8009b7c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d13d      	bne.n	8009bf8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b94:	d111      	bne.n	8009bba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b9e:	d004      	beq.n	8009baa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ba8:	d107      	bne.n	8009bba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bc2:	d10f      	bne.n	8009be4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009be2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	e010      	b.n	8009c1a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689a      	ldr	r2, [r3, #8]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	4013      	ands	r3, r2
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d196      	bne.n	8009b46 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3728      	adds	r7, #40	; 0x28
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20000074 	.word	0x20000074

08009c28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af02      	add	r7, sp, #8
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c3c:	d111      	bne.n	8009c62 <SPI_EndRxTransaction+0x3a>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c46:	d004      	beq.n	8009c52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c50:	d107      	bne.n	8009c62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c60:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2180      	movs	r1, #128	; 0x80
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f7ff febd 	bl	80099ec <SPI_WaitFlagStateUntilTimeout>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d007      	beq.n	8009c88 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c7c:	f043 0220 	orr.w	r2, r3, #32
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c84:	2303      	movs	r3, #3
 8009c86:	e023      	b.n	8009cd0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c90:	d11d      	bne.n	8009cce <SPI_EndRxTransaction+0xa6>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c9a:	d004      	beq.n	8009ca6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ca4:	d113      	bne.n	8009cce <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f7ff ff22 	bl	8009afc <SPI_WaitFifoStateUntilTimeout>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d007      	beq.n	8009cce <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cc2:	f043 0220 	orr.w	r2, r3, #32
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e000      	b.n	8009cd0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af02      	add	r7, sp, #8
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f7ff ff03 	bl	8009afc <SPI_WaitFifoStateUntilTimeout>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d007      	beq.n	8009d0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d00:	f043 0220 	orr.w	r2, r3, #32
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d08:	2303      	movs	r3, #3
 8009d0a:	e027      	b.n	8009d5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2200      	movs	r2, #0
 8009d14:	2180      	movs	r1, #128	; 0x80
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f7ff fe68 	bl	80099ec <SPI_WaitFlagStateUntilTimeout>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d007      	beq.n	8009d32 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d26:	f043 0220 	orr.w	r2, r3, #32
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	e014      	b.n	8009d5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff fedc 	bl	8009afc <SPI_WaitFifoStateUntilTimeout>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d007      	beq.n	8009d5a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d4e:	f043 0220 	orr.w	r2, r3, #32
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	e000      	b.n	8009d5c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e049      	b.n	8009e0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d106      	bne.n	8009d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7fb fffa 	bl	8005d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2202      	movs	r2, #2
 8009d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	4619      	mov	r1, r3
 8009da2:	4610      	mov	r0, r2
 8009da4:	f000 fcd2 	bl	800a74c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
	...

08009e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d001      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e04f      	b.n	8009ecc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68da      	ldr	r2, [r3, #12]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f042 0201 	orr.w	r2, r2, #1
 8009e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a23      	ldr	r2, [pc, #140]	; (8009ed8 <HAL_TIM_Base_Start_IT+0xc4>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d01d      	beq.n	8009e8a <HAL_TIM_Base_Start_IT+0x76>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e56:	d018      	beq.n	8009e8a <HAL_TIM_Base_Start_IT+0x76>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a1f      	ldr	r2, [pc, #124]	; (8009edc <HAL_TIM_Base_Start_IT+0xc8>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d013      	beq.n	8009e8a <HAL_TIM_Base_Start_IT+0x76>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a1e      	ldr	r2, [pc, #120]	; (8009ee0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d00e      	beq.n	8009e8a <HAL_TIM_Base_Start_IT+0x76>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a1c      	ldr	r2, [pc, #112]	; (8009ee4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d009      	beq.n	8009e8a <HAL_TIM_Base_Start_IT+0x76>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a1b      	ldr	r2, [pc, #108]	; (8009ee8 <HAL_TIM_Base_Start_IT+0xd4>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d004      	beq.n	8009e8a <HAL_TIM_Base_Start_IT+0x76>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a19      	ldr	r2, [pc, #100]	; (8009eec <HAL_TIM_Base_Start_IT+0xd8>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d115      	bne.n	8009eb6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	689a      	ldr	r2, [r3, #8]
 8009e90:	4b17      	ldr	r3, [pc, #92]	; (8009ef0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009e92:	4013      	ands	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2b06      	cmp	r3, #6
 8009e9a:	d015      	beq.n	8009ec8 <HAL_TIM_Base_Start_IT+0xb4>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ea2:	d011      	beq.n	8009ec8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f042 0201 	orr.w	r2, r2, #1
 8009eb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eb4:	e008      	b.n	8009ec8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f042 0201 	orr.w	r2, r2, #1
 8009ec4:	601a      	str	r2, [r3, #0]
 8009ec6:	e000      	b.n	8009eca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ec8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	40012c00 	.word	0x40012c00
 8009edc:	40000400 	.word	0x40000400
 8009ee0:	40000800 	.word	0x40000800
 8009ee4:	40000c00 	.word	0x40000c00
 8009ee8:	40013400 	.word	0x40013400
 8009eec:	40014000 	.word	0x40014000
 8009ef0:	00010007 	.word	0x00010007

08009ef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e049      	b.n	8009f9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d106      	bne.n	8009f20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f841 	bl	8009fa2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2202      	movs	r2, #2
 8009f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	3304      	adds	r3, #4
 8009f30:	4619      	mov	r1, r3
 8009f32:	4610      	mov	r0, r2
 8009f34:	f000 fc0a 	bl	800a74c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b083      	sub	sp, #12
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009faa:	bf00      	nop
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b086      	sub	sp, #24
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d101      	bne.n	8009fca <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e097      	b.n	800a0fa <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d106      	bne.n	8009fe4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7fb feee 	bl	8005dc0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	6812      	ldr	r2, [r2, #0]
 8009ff6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8009ffa:	f023 0307 	bic.w	r3, r3, #7
 8009ffe:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3304      	adds	r3, #4
 800a008:	4619      	mov	r1, r3
 800a00a:	4610      	mov	r0, r2
 800a00c:	f000 fb9e 	bl	800a74c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	4313      	orrs	r3, r2
 800a030:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a038:	f023 0303 	bic.w	r3, r3, #3
 800a03c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	689a      	ldr	r2, [r3, #8]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	021b      	lsls	r3, r3, #8
 800a048:	4313      	orrs	r3, r2
 800a04a:	693a      	ldr	r2, [r7, #16]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a056:	f023 030c 	bic.w	r3, r3, #12
 800a05a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	68da      	ldr	r2, [r3, #12]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	69db      	ldr	r3, [r3, #28]
 800a070:	021b      	lsls	r3, r3, #8
 800a072:	4313      	orrs	r3, r2
 800a074:	693a      	ldr	r2, [r7, #16]
 800a076:	4313      	orrs	r3, r2
 800a078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	011a      	lsls	r2, r3, #4
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	6a1b      	ldr	r3, [r3, #32]
 800a084:	031b      	lsls	r3, r3, #12
 800a086:	4313      	orrs	r3, r2
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a094:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a09c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	011b      	lsls	r3, r3, #4
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3718      	adds	r7, #24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b082      	sub	sp, #8
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	f003 0302 	and.w	r3, r3, #2
 800a114:	2b02      	cmp	r3, #2
 800a116:	d122      	bne.n	800a15e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	f003 0302 	and.w	r3, r3, #2
 800a122:	2b02      	cmp	r3, #2
 800a124:	d11b      	bne.n	800a15e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f06f 0202 	mvn.w	r2, #2
 800a12e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	f003 0303 	and.w	r3, r3, #3
 800a140:	2b00      	cmp	r3, #0
 800a142:	d003      	beq.n	800a14c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fae2 	bl	800a70e <HAL_TIM_IC_CaptureCallback>
 800a14a:	e005      	b.n	800a158 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fad4 	bl	800a6fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fae5 	bl	800a722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	f003 0304 	and.w	r3, r3, #4
 800a168:	2b04      	cmp	r3, #4
 800a16a:	d122      	bne.n	800a1b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	f003 0304 	and.w	r3, r3, #4
 800a176:	2b04      	cmp	r3, #4
 800a178:	d11b      	bne.n	800a1b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f06f 0204 	mvn.w	r2, #4
 800a182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a194:	2b00      	cmp	r3, #0
 800a196:	d003      	beq.n	800a1a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fab8 	bl	800a70e <HAL_TIM_IC_CaptureCallback>
 800a19e:	e005      	b.n	800a1ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 faaa 	bl	800a6fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fabb 	bl	800a722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	f003 0308 	and.w	r3, r3, #8
 800a1bc:	2b08      	cmp	r3, #8
 800a1be:	d122      	bne.n	800a206 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	f003 0308 	and.w	r3, r3, #8
 800a1ca:	2b08      	cmp	r3, #8
 800a1cc:	d11b      	bne.n	800a206 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f06f 0208 	mvn.w	r2, #8
 800a1d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2204      	movs	r2, #4
 800a1dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	69db      	ldr	r3, [r3, #28]
 800a1e4:	f003 0303 	and.w	r3, r3, #3
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fa8e 	bl	800a70e <HAL_TIM_IC_CaptureCallback>
 800a1f2:	e005      	b.n	800a200 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 fa80 	bl	800a6fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fa91 	bl	800a722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	f003 0310 	and.w	r3, r3, #16
 800a210:	2b10      	cmp	r3, #16
 800a212:	d122      	bne.n	800a25a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	f003 0310 	and.w	r3, r3, #16
 800a21e:	2b10      	cmp	r3, #16
 800a220:	d11b      	bne.n	800a25a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f06f 0210 	mvn.w	r2, #16
 800a22a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2208      	movs	r2, #8
 800a230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d003      	beq.n	800a248 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fa64 	bl	800a70e <HAL_TIM_IC_CaptureCallback>
 800a246:	e005      	b.n	800a254 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fa56 	bl	800a6fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fa67 	bl	800a722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	f003 0301 	and.w	r3, r3, #1
 800a264:	2b01      	cmp	r3, #1
 800a266:	d10e      	bne.n	800a286 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	f003 0301 	and.w	r3, r3, #1
 800a272:	2b01      	cmp	r3, #1
 800a274:	d107      	bne.n	800a286 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f06f 0201 	mvn.w	r2, #1
 800a27e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f7f9 f84b 	bl	800331c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a290:	2b80      	cmp	r3, #128	; 0x80
 800a292:	d10e      	bne.n	800a2b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a29e:	2b80      	cmp	r3, #128	; 0x80
 800a2a0:	d107      	bne.n	800a2b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a2aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fee9 	bl	800b084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2c0:	d10e      	bne.n	800a2e0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2cc:	2b80      	cmp	r3, #128	; 0x80
 800a2ce:	d107      	bne.n	800a2e0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a2d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fedc 	bl	800b098 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ea:	2b40      	cmp	r3, #64	; 0x40
 800a2ec:	d10e      	bne.n	800a30c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f8:	2b40      	cmp	r3, #64	; 0x40
 800a2fa:	d107      	bne.n	800a30c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fa15 	bl	800a736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	f003 0320 	and.w	r3, r3, #32
 800a316:	2b20      	cmp	r3, #32
 800a318:	d10e      	bne.n	800a338 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	f003 0320 	and.w	r3, r3, #32
 800a324:	2b20      	cmp	r3, #32
 800a326:	d107      	bne.n	800a338 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f06f 0220 	mvn.w	r2, #32
 800a330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fe9c 	bl	800b070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a338:	bf00      	nop
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a356:	2b01      	cmp	r3, #1
 800a358:	d101      	bne.n	800a35e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a35a:	2302      	movs	r3, #2
 800a35c:	e0ff      	b.n	800a55e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b14      	cmp	r3, #20
 800a36a:	f200 80f0 	bhi.w	800a54e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a36e:	a201      	add	r2, pc, #4	; (adr r2, 800a374 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a374:	0800a3c9 	.word	0x0800a3c9
 800a378:	0800a54f 	.word	0x0800a54f
 800a37c:	0800a54f 	.word	0x0800a54f
 800a380:	0800a54f 	.word	0x0800a54f
 800a384:	0800a409 	.word	0x0800a409
 800a388:	0800a54f 	.word	0x0800a54f
 800a38c:	0800a54f 	.word	0x0800a54f
 800a390:	0800a54f 	.word	0x0800a54f
 800a394:	0800a44b 	.word	0x0800a44b
 800a398:	0800a54f 	.word	0x0800a54f
 800a39c:	0800a54f 	.word	0x0800a54f
 800a3a0:	0800a54f 	.word	0x0800a54f
 800a3a4:	0800a48b 	.word	0x0800a48b
 800a3a8:	0800a54f 	.word	0x0800a54f
 800a3ac:	0800a54f 	.word	0x0800a54f
 800a3b0:	0800a54f 	.word	0x0800a54f
 800a3b4:	0800a4cd 	.word	0x0800a4cd
 800a3b8:	0800a54f 	.word	0x0800a54f
 800a3bc:	0800a54f 	.word	0x0800a54f
 800a3c0:	0800a54f 	.word	0x0800a54f
 800a3c4:	0800a50d 	.word	0x0800a50d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68b9      	ldr	r1, [r7, #8]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f000 fa56 	bl	800a880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	699a      	ldr	r2, [r3, #24]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f042 0208 	orr.w	r2, r2, #8
 800a3e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	699a      	ldr	r2, [r3, #24]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f022 0204 	bic.w	r2, r2, #4
 800a3f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6999      	ldr	r1, [r3, #24]
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	691a      	ldr	r2, [r3, #16]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	430a      	orrs	r2, r1
 800a404:	619a      	str	r2, [r3, #24]
      break;
 800a406:	e0a5      	b.n	800a554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68b9      	ldr	r1, [r7, #8]
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 fac6 	bl	800a9a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	699a      	ldr	r2, [r3, #24]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	699a      	ldr	r2, [r3, #24]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	6999      	ldr	r1, [r3, #24]
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	021a      	lsls	r2, r3, #8
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	430a      	orrs	r2, r1
 800a446:	619a      	str	r2, [r3, #24]
      break;
 800a448:	e084      	b.n	800a554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68b9      	ldr	r1, [r7, #8]
 800a450:	4618      	mov	r0, r3
 800a452:	f000 fb2f 	bl	800aab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	69da      	ldr	r2, [r3, #28]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f042 0208 	orr.w	r2, r2, #8
 800a464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	69da      	ldr	r2, [r3, #28]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f022 0204 	bic.w	r2, r2, #4
 800a474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	69d9      	ldr	r1, [r3, #28]
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	691a      	ldr	r2, [r3, #16]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	430a      	orrs	r2, r1
 800a486:	61da      	str	r2, [r3, #28]
      break;
 800a488:	e064      	b.n	800a554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	68b9      	ldr	r1, [r7, #8]
 800a490:	4618      	mov	r0, r3
 800a492:	f000 fb97 	bl	800abc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	69da      	ldr	r2, [r3, #28]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	69da      	ldr	r2, [r3, #28]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	69d9      	ldr	r1, [r3, #28]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	021a      	lsls	r2, r3, #8
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	61da      	str	r2, [r3, #28]
      break;
 800a4ca:	e043      	b.n	800a554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68b9      	ldr	r1, [r7, #8]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f000 fbe0 	bl	800ac98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f042 0208 	orr.w	r2, r2, #8
 800a4e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f022 0204 	bic.w	r2, r2, #4
 800a4f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	691a      	ldr	r2, [r3, #16]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	430a      	orrs	r2, r1
 800a508:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a50a:	e023      	b.n	800a554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68b9      	ldr	r1, [r7, #8]
 800a512:	4618      	mov	r0, r3
 800a514:	f000 fc24 	bl	800ad60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a526:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a536:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	021a      	lsls	r2, r3, #8
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	430a      	orrs	r2, r1
 800a54a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a54c:	e002      	b.n	800a554 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	75fb      	strb	r3, [r7, #23]
      break;
 800a552:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3718      	adds	r7, #24
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop

0800a568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d101      	bne.n	800a584 <HAL_TIM_ConfigClockSource+0x1c>
 800a580:	2302      	movs	r3, #2
 800a582:	e0b6      	b.n	800a6f2 <HAL_TIM_ConfigClockSource+0x18a>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2202      	movs	r2, #2
 800a590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5c0:	d03e      	beq.n	800a640 <HAL_TIM_ConfigClockSource+0xd8>
 800a5c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5c6:	f200 8087 	bhi.w	800a6d8 <HAL_TIM_ConfigClockSource+0x170>
 800a5ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ce:	f000 8086 	beq.w	800a6de <HAL_TIM_ConfigClockSource+0x176>
 800a5d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5d6:	d87f      	bhi.n	800a6d8 <HAL_TIM_ConfigClockSource+0x170>
 800a5d8:	2b70      	cmp	r3, #112	; 0x70
 800a5da:	d01a      	beq.n	800a612 <HAL_TIM_ConfigClockSource+0xaa>
 800a5dc:	2b70      	cmp	r3, #112	; 0x70
 800a5de:	d87b      	bhi.n	800a6d8 <HAL_TIM_ConfigClockSource+0x170>
 800a5e0:	2b60      	cmp	r3, #96	; 0x60
 800a5e2:	d050      	beq.n	800a686 <HAL_TIM_ConfigClockSource+0x11e>
 800a5e4:	2b60      	cmp	r3, #96	; 0x60
 800a5e6:	d877      	bhi.n	800a6d8 <HAL_TIM_ConfigClockSource+0x170>
 800a5e8:	2b50      	cmp	r3, #80	; 0x50
 800a5ea:	d03c      	beq.n	800a666 <HAL_TIM_ConfigClockSource+0xfe>
 800a5ec:	2b50      	cmp	r3, #80	; 0x50
 800a5ee:	d873      	bhi.n	800a6d8 <HAL_TIM_ConfigClockSource+0x170>
 800a5f0:	2b40      	cmp	r3, #64	; 0x40
 800a5f2:	d058      	beq.n	800a6a6 <HAL_TIM_ConfigClockSource+0x13e>
 800a5f4:	2b40      	cmp	r3, #64	; 0x40
 800a5f6:	d86f      	bhi.n	800a6d8 <HAL_TIM_ConfigClockSource+0x170>
 800a5f8:	2b30      	cmp	r3, #48	; 0x30
 800a5fa:	d064      	beq.n	800a6c6 <HAL_TIM_ConfigClockSource+0x15e>
 800a5fc:	2b30      	cmp	r3, #48	; 0x30
 800a5fe:	d86b      	bhi.n	800a6d8 <HAL_TIM_ConfigClockSource+0x170>
 800a600:	2b20      	cmp	r3, #32
 800a602:	d060      	beq.n	800a6c6 <HAL_TIM_ConfigClockSource+0x15e>
 800a604:	2b20      	cmp	r3, #32
 800a606:	d867      	bhi.n	800a6d8 <HAL_TIM_ConfigClockSource+0x170>
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d05c      	beq.n	800a6c6 <HAL_TIM_ConfigClockSource+0x15e>
 800a60c:	2b10      	cmp	r3, #16
 800a60e:	d05a      	beq.n	800a6c6 <HAL_TIM_ConfigClockSource+0x15e>
 800a610:	e062      	b.n	800a6d8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6818      	ldr	r0, [r3, #0]
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	6899      	ldr	r1, [r3, #8]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	f000 fc7d 	bl	800af20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a634:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68ba      	ldr	r2, [r7, #8]
 800a63c:	609a      	str	r2, [r3, #8]
      break;
 800a63e:	e04f      	b.n	800a6e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6818      	ldr	r0, [r3, #0]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	6899      	ldr	r1, [r3, #8]
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	f000 fc66 	bl	800af20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	689a      	ldr	r2, [r3, #8]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a662:	609a      	str	r2, [r3, #8]
      break;
 800a664:	e03c      	b.n	800a6e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6818      	ldr	r0, [r3, #0]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	6859      	ldr	r1, [r3, #4]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	461a      	mov	r2, r3
 800a674:	f000 fbda 	bl	800ae2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2150      	movs	r1, #80	; 0x50
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 fc33 	bl	800aeea <TIM_ITRx_SetConfig>
      break;
 800a684:	e02c      	b.n	800a6e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6818      	ldr	r0, [r3, #0]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	6859      	ldr	r1, [r3, #4]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	461a      	mov	r2, r3
 800a694:	f000 fbf9 	bl	800ae8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2160      	movs	r1, #96	; 0x60
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 fc23 	bl	800aeea <TIM_ITRx_SetConfig>
      break;
 800a6a4:	e01c      	b.n	800a6e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6818      	ldr	r0, [r3, #0]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	6859      	ldr	r1, [r3, #4]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	f000 fbba 	bl	800ae2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2140      	movs	r1, #64	; 0x40
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 fc13 	bl	800aeea <TIM_ITRx_SetConfig>
      break;
 800a6c4:	e00c      	b.n	800a6e0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	f000 fc0a 	bl	800aeea <TIM_ITRx_SetConfig>
      break;
 800a6d6:	e003      	b.n	800a6e0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	73fb      	strb	r3, [r7, #15]
      break;
 800a6dc:	e000      	b.n	800a6e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a6de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	b083      	sub	sp, #12
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a702:	bf00      	nop
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a70e:	b480      	push	{r7}
 800a710:	b083      	sub	sp, #12
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a716:	bf00      	nop
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a722:	b480      	push	{r7}
 800a724:	b083      	sub	sp, #12
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a72a:	bf00      	nop
 800a72c:	370c      	adds	r7, #12
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a736:	b480      	push	{r7}
 800a738:	b083      	sub	sp, #12
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a73e:	bf00      	nop
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr
	...

0800a74c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a40      	ldr	r2, [pc, #256]	; (800a860 <TIM_Base_SetConfig+0x114>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d013      	beq.n	800a78c <TIM_Base_SetConfig+0x40>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a76a:	d00f      	beq.n	800a78c <TIM_Base_SetConfig+0x40>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a3d      	ldr	r2, [pc, #244]	; (800a864 <TIM_Base_SetConfig+0x118>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d00b      	beq.n	800a78c <TIM_Base_SetConfig+0x40>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a3c      	ldr	r2, [pc, #240]	; (800a868 <TIM_Base_SetConfig+0x11c>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d007      	beq.n	800a78c <TIM_Base_SetConfig+0x40>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a3b      	ldr	r2, [pc, #236]	; (800a86c <TIM_Base_SetConfig+0x120>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d003      	beq.n	800a78c <TIM_Base_SetConfig+0x40>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a3a      	ldr	r2, [pc, #232]	; (800a870 <TIM_Base_SetConfig+0x124>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d108      	bne.n	800a79e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4a2f      	ldr	r2, [pc, #188]	; (800a860 <TIM_Base_SetConfig+0x114>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d01f      	beq.n	800a7e6 <TIM_Base_SetConfig+0x9a>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ac:	d01b      	beq.n	800a7e6 <TIM_Base_SetConfig+0x9a>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a2c      	ldr	r2, [pc, #176]	; (800a864 <TIM_Base_SetConfig+0x118>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d017      	beq.n	800a7e6 <TIM_Base_SetConfig+0x9a>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4a2b      	ldr	r2, [pc, #172]	; (800a868 <TIM_Base_SetConfig+0x11c>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d013      	beq.n	800a7e6 <TIM_Base_SetConfig+0x9a>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a2a      	ldr	r2, [pc, #168]	; (800a86c <TIM_Base_SetConfig+0x120>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d00f      	beq.n	800a7e6 <TIM_Base_SetConfig+0x9a>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4a29      	ldr	r2, [pc, #164]	; (800a870 <TIM_Base_SetConfig+0x124>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d00b      	beq.n	800a7e6 <TIM_Base_SetConfig+0x9a>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4a28      	ldr	r2, [pc, #160]	; (800a874 <TIM_Base_SetConfig+0x128>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d007      	beq.n	800a7e6 <TIM_Base_SetConfig+0x9a>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4a27      	ldr	r2, [pc, #156]	; (800a878 <TIM_Base_SetConfig+0x12c>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d003      	beq.n	800a7e6 <TIM_Base_SetConfig+0x9a>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a26      	ldr	r2, [pc, #152]	; (800a87c <TIM_Base_SetConfig+0x130>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d108      	bne.n	800a7f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	4313      	orrs	r3, r2
 800a804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	689a      	ldr	r2, [r3, #8]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a10      	ldr	r2, [pc, #64]	; (800a860 <TIM_Base_SetConfig+0x114>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d00f      	beq.n	800a844 <TIM_Base_SetConfig+0xf8>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a12      	ldr	r2, [pc, #72]	; (800a870 <TIM_Base_SetConfig+0x124>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d00b      	beq.n	800a844 <TIM_Base_SetConfig+0xf8>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	4a11      	ldr	r2, [pc, #68]	; (800a874 <TIM_Base_SetConfig+0x128>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d007      	beq.n	800a844 <TIM_Base_SetConfig+0xf8>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a10      	ldr	r2, [pc, #64]	; (800a878 <TIM_Base_SetConfig+0x12c>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d003      	beq.n	800a844 <TIM_Base_SetConfig+0xf8>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a0f      	ldr	r2, [pc, #60]	; (800a87c <TIM_Base_SetConfig+0x130>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d103      	bne.n	800a84c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	691a      	ldr	r2, [r3, #16]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	615a      	str	r2, [r3, #20]
}
 800a852:	bf00      	nop
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	40012c00 	.word	0x40012c00
 800a864:	40000400 	.word	0x40000400
 800a868:	40000800 	.word	0x40000800
 800a86c:	40000c00 	.word	0x40000c00
 800a870:	40013400 	.word	0x40013400
 800a874:	40014000 	.word	0x40014000
 800a878:	40014400 	.word	0x40014400
 800a87c:	40014800 	.word	0x40014800

0800a880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a1b      	ldr	r3, [r3, #32]
 800a88e:	f023 0201 	bic.w	r2, r3, #1
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f023 0303 	bic.w	r3, r3, #3
 800a8ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f023 0302 	bic.w	r3, r3, #2
 800a8cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	697a      	ldr	r2, [r7, #20]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a2c      	ldr	r2, [pc, #176]	; (800a98c <TIM_OC1_SetConfig+0x10c>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d00f      	beq.n	800a900 <TIM_OC1_SetConfig+0x80>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a2b      	ldr	r2, [pc, #172]	; (800a990 <TIM_OC1_SetConfig+0x110>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d00b      	beq.n	800a900 <TIM_OC1_SetConfig+0x80>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a2a      	ldr	r2, [pc, #168]	; (800a994 <TIM_OC1_SetConfig+0x114>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d007      	beq.n	800a900 <TIM_OC1_SetConfig+0x80>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a29      	ldr	r2, [pc, #164]	; (800a998 <TIM_OC1_SetConfig+0x118>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d003      	beq.n	800a900 <TIM_OC1_SetConfig+0x80>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a28      	ldr	r2, [pc, #160]	; (800a99c <TIM_OC1_SetConfig+0x11c>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d10c      	bne.n	800a91a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f023 0308 	bic.w	r3, r3, #8
 800a906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	4313      	orrs	r3, r2
 800a910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f023 0304 	bic.w	r3, r3, #4
 800a918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a1b      	ldr	r2, [pc, #108]	; (800a98c <TIM_OC1_SetConfig+0x10c>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d00f      	beq.n	800a942 <TIM_OC1_SetConfig+0xc2>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a1a      	ldr	r2, [pc, #104]	; (800a990 <TIM_OC1_SetConfig+0x110>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d00b      	beq.n	800a942 <TIM_OC1_SetConfig+0xc2>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a19      	ldr	r2, [pc, #100]	; (800a994 <TIM_OC1_SetConfig+0x114>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d007      	beq.n	800a942 <TIM_OC1_SetConfig+0xc2>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a18      	ldr	r2, [pc, #96]	; (800a998 <TIM_OC1_SetConfig+0x118>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d003      	beq.n	800a942 <TIM_OC1_SetConfig+0xc2>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a17      	ldr	r2, [pc, #92]	; (800a99c <TIM_OC1_SetConfig+0x11c>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d111      	bne.n	800a966 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	4313      	orrs	r3, r2
 800a95a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	699b      	ldr	r3, [r3, #24]
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	4313      	orrs	r3, r2
 800a964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	693a      	ldr	r2, [r7, #16]
 800a96a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	697a      	ldr	r2, [r7, #20]
 800a97e:	621a      	str	r2, [r3, #32]
}
 800a980:	bf00      	nop
 800a982:	371c      	adds	r7, #28
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	40012c00 	.word	0x40012c00
 800a990:	40013400 	.word	0x40013400
 800a994:	40014000 	.word	0x40014000
 800a998:	40014400 	.word	0x40014400
 800a99c:	40014800 	.word	0x40014800

0800a9a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b087      	sub	sp, #28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a1b      	ldr	r3, [r3, #32]
 800a9ae:	f023 0210 	bic.w	r2, r3, #16
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a1b      	ldr	r3, [r3, #32]
 800a9ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	021b      	lsls	r3, r3, #8
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	f023 0320 	bic.w	r3, r3, #32
 800a9ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	011b      	lsls	r3, r3, #4
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a28      	ldr	r2, [pc, #160]	; (800aaa0 <TIM_OC2_SetConfig+0x100>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d003      	beq.n	800aa0c <TIM_OC2_SetConfig+0x6c>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a27      	ldr	r2, [pc, #156]	; (800aaa4 <TIM_OC2_SetConfig+0x104>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d10d      	bne.n	800aa28 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	011b      	lsls	r3, r3, #4
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a1d      	ldr	r2, [pc, #116]	; (800aaa0 <TIM_OC2_SetConfig+0x100>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d00f      	beq.n	800aa50 <TIM_OC2_SetConfig+0xb0>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a1c      	ldr	r2, [pc, #112]	; (800aaa4 <TIM_OC2_SetConfig+0x104>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d00b      	beq.n	800aa50 <TIM_OC2_SetConfig+0xb0>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a1b      	ldr	r2, [pc, #108]	; (800aaa8 <TIM_OC2_SetConfig+0x108>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d007      	beq.n	800aa50 <TIM_OC2_SetConfig+0xb0>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a1a      	ldr	r2, [pc, #104]	; (800aaac <TIM_OC2_SetConfig+0x10c>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d003      	beq.n	800aa50 <TIM_OC2_SetConfig+0xb0>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a19      	ldr	r2, [pc, #100]	; (800aab0 <TIM_OC2_SetConfig+0x110>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d113      	bne.n	800aa78 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	695b      	ldr	r3, [r3, #20]
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	693a      	ldr	r2, [r7, #16]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	685a      	ldr	r2, [r3, #4]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	621a      	str	r2, [r3, #32]
}
 800aa92:	bf00      	nop
 800aa94:	371c      	adds	r7, #28
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	40012c00 	.word	0x40012c00
 800aaa4:	40013400 	.word	0x40013400
 800aaa8:	40014000 	.word	0x40014000
 800aaac:	40014400 	.word	0x40014400
 800aab0:	40014800 	.word	0x40014800

0800aab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b087      	sub	sp, #28
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f023 0303 	bic.w	r3, r3, #3
 800aaee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	021b      	lsls	r3, r3, #8
 800ab08:	697a      	ldr	r2, [r7, #20]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a27      	ldr	r2, [pc, #156]	; (800abb0 <TIM_OC3_SetConfig+0xfc>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d003      	beq.n	800ab1e <TIM_OC3_SetConfig+0x6a>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a26      	ldr	r2, [pc, #152]	; (800abb4 <TIM_OC3_SetConfig+0x100>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d10d      	bne.n	800ab3a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	021b      	lsls	r3, r3, #8
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a1c      	ldr	r2, [pc, #112]	; (800abb0 <TIM_OC3_SetConfig+0xfc>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d00f      	beq.n	800ab62 <TIM_OC3_SetConfig+0xae>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a1b      	ldr	r2, [pc, #108]	; (800abb4 <TIM_OC3_SetConfig+0x100>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d00b      	beq.n	800ab62 <TIM_OC3_SetConfig+0xae>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a1a      	ldr	r2, [pc, #104]	; (800abb8 <TIM_OC3_SetConfig+0x104>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d007      	beq.n	800ab62 <TIM_OC3_SetConfig+0xae>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a19      	ldr	r2, [pc, #100]	; (800abbc <TIM_OC3_SetConfig+0x108>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d003      	beq.n	800ab62 <TIM_OC3_SetConfig+0xae>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a18      	ldr	r2, [pc, #96]	; (800abc0 <TIM_OC3_SetConfig+0x10c>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d113      	bne.n	800ab8a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	011b      	lsls	r3, r3, #4
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	011b      	lsls	r3, r3, #4
 800ab84:	693a      	ldr	r2, [r7, #16]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	693a      	ldr	r2, [r7, #16]
 800ab8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	685a      	ldr	r2, [r3, #4]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	621a      	str	r2, [r3, #32]
}
 800aba4:	bf00      	nop
 800aba6:	371c      	adds	r7, #28
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr
 800abb0:	40012c00 	.word	0x40012c00
 800abb4:	40013400 	.word	0x40013400
 800abb8:	40014000 	.word	0x40014000
 800abbc:	40014400 	.word	0x40014400
 800abc0:	40014800 	.word	0x40014800

0800abc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b087      	sub	sp, #28
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	69db      	ldr	r3, [r3, #28]
 800abea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800abf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	021b      	lsls	r3, r3, #8
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	031b      	lsls	r3, r3, #12
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a18      	ldr	r2, [pc, #96]	; (800ac84 <TIM_OC4_SetConfig+0xc0>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d00f      	beq.n	800ac48 <TIM_OC4_SetConfig+0x84>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4a17      	ldr	r2, [pc, #92]	; (800ac88 <TIM_OC4_SetConfig+0xc4>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d00b      	beq.n	800ac48 <TIM_OC4_SetConfig+0x84>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a16      	ldr	r2, [pc, #88]	; (800ac8c <TIM_OC4_SetConfig+0xc8>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d007      	beq.n	800ac48 <TIM_OC4_SetConfig+0x84>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a15      	ldr	r2, [pc, #84]	; (800ac90 <TIM_OC4_SetConfig+0xcc>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d003      	beq.n	800ac48 <TIM_OC4_SetConfig+0x84>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a14      	ldr	r2, [pc, #80]	; (800ac94 <TIM_OC4_SetConfig+0xd0>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d109      	bne.n	800ac5c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	019b      	lsls	r3, r3, #6
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	621a      	str	r2, [r3, #32]
}
 800ac76:	bf00      	nop
 800ac78:	371c      	adds	r7, #28
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	40012c00 	.word	0x40012c00
 800ac88:	40013400 	.word	0x40013400
 800ac8c:	40014000 	.word	0x40014000
 800ac90:	40014400 	.word	0x40014400
 800ac94:	40014800 	.word	0x40014800

0800ac98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b087      	sub	sp, #28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a1b      	ldr	r3, [r3, #32]
 800aca6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800acdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	041b      	lsls	r3, r3, #16
 800ace4:	693a      	ldr	r2, [r7, #16]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a17      	ldr	r2, [pc, #92]	; (800ad4c <TIM_OC5_SetConfig+0xb4>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d00f      	beq.n	800ad12 <TIM_OC5_SetConfig+0x7a>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a16      	ldr	r2, [pc, #88]	; (800ad50 <TIM_OC5_SetConfig+0xb8>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d00b      	beq.n	800ad12 <TIM_OC5_SetConfig+0x7a>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a15      	ldr	r2, [pc, #84]	; (800ad54 <TIM_OC5_SetConfig+0xbc>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d007      	beq.n	800ad12 <TIM_OC5_SetConfig+0x7a>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a14      	ldr	r2, [pc, #80]	; (800ad58 <TIM_OC5_SetConfig+0xc0>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d003      	beq.n	800ad12 <TIM_OC5_SetConfig+0x7a>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a13      	ldr	r2, [pc, #76]	; (800ad5c <TIM_OC5_SetConfig+0xc4>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d109      	bne.n	800ad26 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	021b      	lsls	r3, r3, #8
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	697a      	ldr	r2, [r7, #20]
 800ad2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	693a      	ldr	r2, [r7, #16]
 800ad3e:	621a      	str	r2, [r3, #32]
}
 800ad40:	bf00      	nop
 800ad42:	371c      	adds	r7, #28
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	40012c00 	.word	0x40012c00
 800ad50:	40013400 	.word	0x40013400
 800ad54:	40014000 	.word	0x40014000
 800ad58:	40014400 	.word	0x40014400
 800ad5c:	40014800 	.word	0x40014800

0800ad60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b087      	sub	sp, #28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a1b      	ldr	r3, [r3, #32]
 800ad7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	021b      	lsls	r3, r3, #8
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ada6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	051b      	lsls	r3, r3, #20
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a18      	ldr	r2, [pc, #96]	; (800ae18 <TIM_OC6_SetConfig+0xb8>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d00f      	beq.n	800addc <TIM_OC6_SetConfig+0x7c>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a17      	ldr	r2, [pc, #92]	; (800ae1c <TIM_OC6_SetConfig+0xbc>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d00b      	beq.n	800addc <TIM_OC6_SetConfig+0x7c>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a16      	ldr	r2, [pc, #88]	; (800ae20 <TIM_OC6_SetConfig+0xc0>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d007      	beq.n	800addc <TIM_OC6_SetConfig+0x7c>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a15      	ldr	r2, [pc, #84]	; (800ae24 <TIM_OC6_SetConfig+0xc4>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d003      	beq.n	800addc <TIM_OC6_SetConfig+0x7c>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a14      	ldr	r2, [pc, #80]	; (800ae28 <TIM_OC6_SetConfig+0xc8>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d109      	bne.n	800adf0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ade2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	695b      	ldr	r3, [r3, #20]
 800ade8:	029b      	lsls	r3, r3, #10
 800adea:	697a      	ldr	r2, [r7, #20]
 800adec:	4313      	orrs	r3, r2
 800adee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	697a      	ldr	r2, [r7, #20]
 800adf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	621a      	str	r2, [r3, #32]
}
 800ae0a:	bf00      	nop
 800ae0c:	371c      	adds	r7, #28
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	40012c00 	.word	0x40012c00
 800ae1c:	40013400 	.word	0x40013400
 800ae20:	40014000 	.word	0x40014000
 800ae24:	40014400 	.word	0x40014400
 800ae28:	40014800 	.word	0x40014800

0800ae2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6a1b      	ldr	r3, [r3, #32]
 800ae3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6a1b      	ldr	r3, [r3, #32]
 800ae42:	f023 0201 	bic.w	r2, r3, #1
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	011b      	lsls	r3, r3, #4
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f023 030a 	bic.w	r3, r3, #10
 800ae68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	621a      	str	r2, [r3, #32]
}
 800ae7e:	bf00      	nop
 800ae80:	371c      	adds	r7, #28
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b087      	sub	sp, #28
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	60f8      	str	r0, [r7, #12]
 800ae92:	60b9      	str	r1, [r7, #8]
 800ae94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	f023 0210 	bic.w	r2, r3, #16
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6a1b      	ldr	r3, [r3, #32]
 800aeac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aeb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	031b      	lsls	r3, r3, #12
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aec6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	011b      	lsls	r3, r3, #4
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	4313      	orrs	r3, r2
 800aed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	621a      	str	r2, [r3, #32]
}
 800aede:	bf00      	nop
 800aee0:	371c      	adds	r7, #28
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr

0800aeea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aeea:	b480      	push	{r7}
 800aeec:	b085      	sub	sp, #20
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	4313      	orrs	r3, r2
 800af08:	f043 0307 	orr.w	r3, r3, #7
 800af0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	609a      	str	r2, [r3, #8]
}
 800af14:	bf00      	nop
 800af16:	3714      	adds	r7, #20
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af20:	b480      	push	{r7}
 800af22:	b087      	sub	sp, #28
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
 800af2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	021a      	lsls	r2, r3, #8
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	431a      	orrs	r2, r3
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	4313      	orrs	r3, r2
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	697a      	ldr	r2, [r7, #20]
 800af52:	609a      	str	r2, [r3, #8]
}
 800af54:	bf00      	nop
 800af56:	371c      	adds	r7, #28
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af70:	2b01      	cmp	r3, #1
 800af72:	d101      	bne.n	800af78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af74:	2302      	movs	r3, #2
 800af76:	e068      	b.n	800b04a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2202      	movs	r2, #2
 800af84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a2e      	ldr	r2, [pc, #184]	; (800b058 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d004      	beq.n	800afac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a2d      	ldr	r2, [pc, #180]	; (800b05c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d108      	bne.n	800afbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800afb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	4313      	orrs	r3, r2
 800afce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a1e      	ldr	r2, [pc, #120]	; (800b058 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d01d      	beq.n	800b01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afea:	d018      	beq.n	800b01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a1b      	ldr	r2, [pc, #108]	; (800b060 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d013      	beq.n	800b01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a1a      	ldr	r2, [pc, #104]	; (800b064 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d00e      	beq.n	800b01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a18      	ldr	r2, [pc, #96]	; (800b068 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d009      	beq.n	800b01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a13      	ldr	r2, [pc, #76]	; (800b05c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d004      	beq.n	800b01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a14      	ldr	r2, [pc, #80]	; (800b06c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d10c      	bne.n	800b038 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68ba      	ldr	r2, [r7, #8]
 800b036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	40012c00 	.word	0x40012c00
 800b05c:	40013400 	.word	0x40013400
 800b060:	40000400 	.word	0x40000400
 800b064:	40000800 	.word	0x40000800
 800b068:	40000c00 	.word	0x40000c00
 800b06c:	40014000 	.word	0x40014000

0800b070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e042      	b.n	800b144 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d106      	bne.n	800b0d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7fa ff3d 	bl	8005f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2224      	movs	r2, #36	; 0x24
 800b0da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f022 0201 	bic.w	r2, r2, #1
 800b0ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fc02 	bl	800b8f8 <UART_SetConfig>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d101      	bne.n	800b0fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e022      	b.n	800b144 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b102:	2b00      	cmp	r3, #0
 800b104:	d002      	beq.n	800b10c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fef2 	bl	800bef0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	685a      	ldr	r2, [r3, #4]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b11a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	689a      	ldr	r2, [r3, #8]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b12a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f042 0201 	orr.w	r2, r2, #1
 800b13a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 ff79 	bl	800c034 <UART_CheckIdleState>
 800b142:	4603      	mov	r3, r0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08a      	sub	sp, #40	; 0x28
 800b150:	af02      	add	r7, sp, #8
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	603b      	str	r3, [r7, #0]
 800b158:	4613      	mov	r3, r2
 800b15a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b162:	2b20      	cmp	r3, #32
 800b164:	f040 8083 	bne.w	800b26e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d002      	beq.n	800b174 <HAL_UART_Transmit+0x28>
 800b16e:	88fb      	ldrh	r3, [r7, #6]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d101      	bne.n	800b178 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	e07b      	b.n	800b270 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d101      	bne.n	800b186 <HAL_UART_Transmit+0x3a>
 800b182:	2302      	movs	r3, #2
 800b184:	e074      	b.n	800b270 <HAL_UART_Transmit+0x124>
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2201      	movs	r2, #1
 800b18a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2221      	movs	r2, #33	; 0x21
 800b19a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b19e:	f7fa ffb7 	bl	8006110 <HAL_GetTick>
 800b1a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	88fa      	ldrh	r2, [r7, #6]
 800b1a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	88fa      	ldrh	r2, [r7, #6]
 800b1b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1bc:	d108      	bne.n	800b1d0 <HAL_UART_Transmit+0x84>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d104      	bne.n	800b1d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	61bb      	str	r3, [r7, #24]
 800b1ce:	e003      	b.n	800b1d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b1e0:	e02c      	b.n	800b23c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2180      	movs	r1, #128	; 0x80
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f000 ff6c 	bl	800c0ca <UART_WaitOnFlagUntilTimeout>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	e039      	b.n	800b270 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10b      	bne.n	800b21a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	881b      	ldrh	r3, [r3, #0]
 800b206:	461a      	mov	r2, r3
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b210:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b212:	69bb      	ldr	r3, [r7, #24]
 800b214:	3302      	adds	r3, #2
 800b216:	61bb      	str	r3, [r7, #24]
 800b218:	e007      	b.n	800b22a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	781a      	ldrb	r2, [r3, #0]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	3301      	adds	r3, #1
 800b228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b230:	b29b      	uxth	r3, r3
 800b232:	3b01      	subs	r3, #1
 800b234:	b29a      	uxth	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b242:	b29b      	uxth	r3, r3
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1cc      	bne.n	800b1e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	2200      	movs	r2, #0
 800b250:	2140      	movs	r1, #64	; 0x40
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f000 ff39 	bl	800c0ca <UART_WaitOnFlagUntilTimeout>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b25e:	2303      	movs	r3, #3
 800b260:	e006      	b.n	800b270 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2220      	movs	r2, #32
 800b266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b26a:	2300      	movs	r3, #0
 800b26c:	e000      	b.n	800b270 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b26e:	2302      	movs	r3, #2
  }
}
 800b270:	4618      	mov	r0, r3
 800b272:	3720      	adds	r7, #32
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b0ba      	sub	sp, #232	; 0xe8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	69db      	ldr	r3, [r3, #28]
 800b286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b29e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b2a2:	f640 030f 	movw	r3, #2063	; 0x80f
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b2ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d11b      	bne.n	800b2ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2b8:	f003 0320 	and.w	r3, r3, #32
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d015      	beq.n	800b2ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b2c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2c4:	f003 0320 	and.w	r3, r3, #32
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d105      	bne.n	800b2d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b2cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d009      	beq.n	800b2ec <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f000 82d6 	beq.w	800b88e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	4798      	blx	r3
      }
      return;
 800b2ea:	e2d0      	b.n	800b88e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800b2ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f000 811f 	beq.w	800b534 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b2f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b2fa:	4b8b      	ldr	r3, [pc, #556]	; (800b528 <HAL_UART_IRQHandler+0x2b0>)
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d106      	bne.n	800b310 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b302:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b306:	4b89      	ldr	r3, [pc, #548]	; (800b52c <HAL_UART_IRQHandler+0x2b4>)
 800b308:	4013      	ands	r3, r2
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f000 8112 	beq.w	800b534 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b314:	f003 0301 	and.w	r3, r3, #1
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d011      	beq.n	800b340 <HAL_UART_IRQHandler+0xc8>
 800b31c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00b      	beq.n	800b340 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2201      	movs	r2, #1
 800b32e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b336:	f043 0201 	orr.w	r2, r3, #1
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b344:	f003 0302 	and.w	r3, r3, #2
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d011      	beq.n	800b370 <HAL_UART_IRQHandler+0xf8>
 800b34c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b350:	f003 0301 	and.w	r3, r3, #1
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00b      	beq.n	800b370 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2202      	movs	r2, #2
 800b35e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b366:	f043 0204 	orr.w	r2, r3, #4
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b374:	f003 0304 	and.w	r3, r3, #4
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d011      	beq.n	800b3a0 <HAL_UART_IRQHandler+0x128>
 800b37c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b380:	f003 0301 	and.w	r3, r3, #1
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00b      	beq.n	800b3a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2204      	movs	r2, #4
 800b38e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b396:	f043 0202 	orr.w	r2, r3, #2
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b3a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3a4:	f003 0308 	and.w	r3, r3, #8
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d017      	beq.n	800b3dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b3ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3b0:	f003 0320 	and.w	r3, r3, #32
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d105      	bne.n	800b3c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b3b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b3bc:	4b5a      	ldr	r3, [pc, #360]	; (800b528 <HAL_UART_IRQHandler+0x2b0>)
 800b3be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00b      	beq.n	800b3dc <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2208      	movs	r2, #8
 800b3ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3d2:	f043 0208 	orr.w	r2, r3, #8
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b3dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d012      	beq.n	800b40e <HAL_UART_IRQHandler+0x196>
 800b3e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00c      	beq.n	800b40e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b404:	f043 0220 	orr.w	r2, r3, #32
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b414:	2b00      	cmp	r3, #0
 800b416:	f000 823c 	beq.w	800b892 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b41a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b41e:	f003 0320 	and.w	r3, r3, #32
 800b422:	2b00      	cmp	r3, #0
 800b424:	d013      	beq.n	800b44e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b42a:	f003 0320 	and.w	r3, r3, #32
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d105      	bne.n	800b43e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d007      	beq.n	800b44e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b442:	2b00      	cmp	r3, #0
 800b444:	d003      	beq.n	800b44e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b454:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b462:	2b40      	cmp	r3, #64	; 0x40
 800b464:	d005      	beq.n	800b472 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b46a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d04f      	beq.n	800b512 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 ffdb 	bl	800c42e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b482:	2b40      	cmp	r3, #64	; 0x40
 800b484:	d141      	bne.n	800b50a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	3308      	adds	r3, #8
 800b48c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b490:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b494:	e853 3f00 	ldrex	r3, [r3]
 800b498:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b49c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	3308      	adds	r3, #8
 800b4ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b4b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b4b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b4be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b4c2:	e841 2300 	strex	r3, r2, [r1]
 800b4c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b4ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1d9      	bne.n	800b486 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d013      	beq.n	800b502 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4de:	4a14      	ldr	r2, [pc, #80]	; (800b530 <HAL_UART_IRQHandler+0x2b8>)
 800b4e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7fb f8bf 	bl	800666a <HAL_DMA_Abort_IT>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d017      	beq.n	800b522 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b500:	e00f      	b.n	800b522 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 f9ee 	bl	800b8e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b508:	e00b      	b.n	800b522 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 f9ea 	bl	800b8e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b510:	e007      	b.n	800b522 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f9e6 	bl	800b8e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b520:	e1b7      	b.n	800b892 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b522:	bf00      	nop
    return;
 800b524:	e1b5      	b.n	800b892 <HAL_UART_IRQHandler+0x61a>
 800b526:	bf00      	nop
 800b528:	10000001 	.word	0x10000001
 800b52c:	04000120 	.word	0x04000120
 800b530:	0800c6d9 	.word	0x0800c6d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b538:	2b01      	cmp	r3, #1
 800b53a:	f040 814a 	bne.w	800b7d2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b542:	f003 0310 	and.w	r3, r3, #16
 800b546:	2b00      	cmp	r3, #0
 800b548:	f000 8143 	beq.w	800b7d2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b54c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b550:	f003 0310 	and.w	r3, r3, #16
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 813c 	beq.w	800b7d2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2210      	movs	r2, #16
 800b560:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b56c:	2b40      	cmp	r3, #64	; 0x40
 800b56e:	f040 80b5 	bne.w	800b6dc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b57e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b582:	2b00      	cmp	r3, #0
 800b584:	f000 8187 	beq.w	800b896 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b58e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b592:	429a      	cmp	r2, r3
 800b594:	f080 817f 	bcs.w	800b896 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b59e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0320 	and.w	r3, r3, #32
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	f040 8086 	bne.w	800b6c0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5c0:	e853 3f00 	ldrex	r3, [r3]
 800b5c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b5c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b5de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b5e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b5ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b5ee:	e841 2300 	strex	r3, r2, [r1]
 800b5f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b5f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1da      	bne.n	800b5b4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3308      	adds	r3, #8
 800b604:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b608:	e853 3f00 	ldrex	r3, [r3]
 800b60c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b60e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b610:	f023 0301 	bic.w	r3, r3, #1
 800b614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	3308      	adds	r3, #8
 800b61e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b622:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b626:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b628:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b62a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b62e:	e841 2300 	strex	r3, r2, [r1]
 800b632:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1e1      	bne.n	800b5fe <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	3308      	adds	r3, #8
 800b640:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b644:	e853 3f00 	ldrex	r3, [r3]
 800b648:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b64a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b64c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b650:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3308      	adds	r3, #8
 800b65a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b65e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b660:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b662:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b664:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b666:	e841 2300 	strex	r3, r2, [r1]
 800b66a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b66c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1e3      	bne.n	800b63a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2220      	movs	r2, #32
 800b676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b688:	e853 3f00 	ldrex	r3, [r3]
 800b68c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b68e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b690:	f023 0310 	bic.w	r3, r3, #16
 800b694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	461a      	mov	r2, r3
 800b69e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b6a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6aa:	e841 2300 	strex	r3, r2, [r1]
 800b6ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b6b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1e4      	bne.n	800b680 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fa ff79 	bl	80065b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b6cc:	b29b      	uxth	r3, r3
 800b6ce:	1ad3      	subs	r3, r2, r3
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7f7 fcb3 	bl	8003040 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b6da:	e0dc      	b.n	800b896 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f000 80ce 	beq.w	800b89a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800b6fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b702:	2b00      	cmp	r3, #0
 800b704:	f000 80c9 	beq.w	800b89a <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b710:	e853 3f00 	ldrex	r3, [r3]
 800b714:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b71c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	461a      	mov	r2, r3
 800b726:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b72a:	647b      	str	r3, [r7, #68]	; 0x44
 800b72c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b732:	e841 2300 	strex	r3, r2, [r1]
 800b736:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1e4      	bne.n	800b708 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	3308      	adds	r3, #8
 800b744:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b748:	e853 3f00 	ldrex	r3, [r3]
 800b74c:	623b      	str	r3, [r7, #32]
   return(result);
 800b74e:	6a3b      	ldr	r3, [r7, #32]
 800b750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b754:	f023 0301 	bic.w	r3, r3, #1
 800b758:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	3308      	adds	r3, #8
 800b762:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b766:	633a      	str	r2, [r7, #48]	; 0x30
 800b768:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b76e:	e841 2300 	strex	r3, r2, [r1]
 800b772:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b776:	2b00      	cmp	r3, #0
 800b778:	d1e1      	bne.n	800b73e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2220      	movs	r2, #32
 800b77e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	e853 3f00 	ldrex	r3, [r3]
 800b79a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f023 0310 	bic.w	r3, r3, #16
 800b7a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b7b0:	61fb      	str	r3, [r7, #28]
 800b7b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b4:	69b9      	ldr	r1, [r7, #24]
 800b7b6:	69fa      	ldr	r2, [r7, #28]
 800b7b8:	e841 2300 	strex	r3, r2, [r1]
 800b7bc:	617b      	str	r3, [r7, #20]
   return(result);
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1e4      	bne.n	800b78e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b7c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7f7 fc38 	bl	8003040 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b7d0:	e063      	b.n	800b89a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00e      	beq.n	800b7fc <HAL_UART_IRQHandler+0x584>
 800b7de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d008      	beq.n	800b7fc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b7f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 ffb0 	bl	800c75a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7fa:	e051      	b.n	800b8a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b804:	2b00      	cmp	r3, #0
 800b806:	d014      	beq.n	800b832 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b80c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b810:	2b00      	cmp	r3, #0
 800b812:	d105      	bne.n	800b820 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d008      	beq.n	800b832 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b824:	2b00      	cmp	r3, #0
 800b826:	d03a      	beq.n	800b89e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	4798      	blx	r3
    }
    return;
 800b830:	e035      	b.n	800b89e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d009      	beq.n	800b852 <HAL_UART_IRQHandler+0x5da>
 800b83e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b846:	2b00      	cmp	r3, #0
 800b848:	d003      	beq.n	800b852 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 ff5a 	bl	800c704 <UART_EndTransmit_IT>
    return;
 800b850:	e026      	b.n	800b8a0 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d009      	beq.n	800b872 <HAL_UART_IRQHandler+0x5fa>
 800b85e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b862:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b866:	2b00      	cmp	r3, #0
 800b868:	d003      	beq.n	800b872 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 ff89 	bl	800c782 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b870:	e016      	b.n	800b8a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d010      	beq.n	800b8a0 <HAL_UART_IRQHandler+0x628>
 800b87e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b882:	2b00      	cmp	r3, #0
 800b884:	da0c      	bge.n	800b8a0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 ff71 	bl	800c76e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b88c:	e008      	b.n	800b8a0 <HAL_UART_IRQHandler+0x628>
      return;
 800b88e:	bf00      	nop
 800b890:	e006      	b.n	800b8a0 <HAL_UART_IRQHandler+0x628>
    return;
 800b892:	bf00      	nop
 800b894:	e004      	b.n	800b8a0 <HAL_UART_IRQHandler+0x628>
      return;
 800b896:	bf00      	nop
 800b898:	e002      	b.n	800b8a0 <HAL_UART_IRQHandler+0x628>
      return;
 800b89a:	bf00      	nop
 800b89c:	e000      	b.n	800b8a0 <HAL_UART_IRQHandler+0x628>
    return;
 800b89e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800b8a0:	37e8      	adds	r7, #232	; 0xe8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop

0800b8a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b8b0:	bf00      	nop
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b8c4:	bf00      	nop
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b8f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8fc:	b08c      	sub	sp, #48	; 0x30
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b902:	2300      	movs	r3, #0
 800b904:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	689a      	ldr	r2, [r3, #8]
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	691b      	ldr	r3, [r3, #16]
 800b910:	431a      	orrs	r2, r3
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	695b      	ldr	r3, [r3, #20]
 800b916:	431a      	orrs	r2, r3
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	69db      	ldr	r3, [r3, #28]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	4baa      	ldr	r3, [pc, #680]	; (800bbd0 <UART_SetConfig+0x2d8>)
 800b928:	4013      	ands	r3, r2
 800b92a:	697a      	ldr	r2, [r7, #20]
 800b92c:	6812      	ldr	r2, [r2, #0]
 800b92e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b930:	430b      	orrs	r3, r1
 800b932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	68da      	ldr	r2, [r3, #12]
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	430a      	orrs	r2, r1
 800b948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a9f      	ldr	r2, [pc, #636]	; (800bbd4 <UART_SetConfig+0x2dc>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d004      	beq.n	800b964 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b960:	4313      	orrs	r3, r2
 800b962:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b96e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	6812      	ldr	r2, [r2, #0]
 800b976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b978:	430b      	orrs	r3, r1
 800b97a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b982:	f023 010f 	bic.w	r1, r3, #15
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	430a      	orrs	r2, r1
 800b990:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a90      	ldr	r2, [pc, #576]	; (800bbd8 <UART_SetConfig+0x2e0>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d125      	bne.n	800b9e8 <UART_SetConfig+0xf0>
 800b99c:	4b8f      	ldr	r3, [pc, #572]	; (800bbdc <UART_SetConfig+0x2e4>)
 800b99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9a2:	f003 0303 	and.w	r3, r3, #3
 800b9a6:	2b03      	cmp	r3, #3
 800b9a8:	d81a      	bhi.n	800b9e0 <UART_SetConfig+0xe8>
 800b9aa:	a201      	add	r2, pc, #4	; (adr r2, 800b9b0 <UART_SetConfig+0xb8>)
 800b9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b0:	0800b9c1 	.word	0x0800b9c1
 800b9b4:	0800b9d1 	.word	0x0800b9d1
 800b9b8:	0800b9c9 	.word	0x0800b9c9
 800b9bc:	0800b9d9 	.word	0x0800b9d9
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9c6:	e116      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800b9c8:	2302      	movs	r3, #2
 800b9ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9ce:	e112      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800b9d0:	2304      	movs	r3, #4
 800b9d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9d6:	e10e      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800b9d8:	2308      	movs	r3, #8
 800b9da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9de:	e10a      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800b9e0:	2310      	movs	r3, #16
 800b9e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9e6:	e106      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a7c      	ldr	r2, [pc, #496]	; (800bbe0 <UART_SetConfig+0x2e8>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d138      	bne.n	800ba64 <UART_SetConfig+0x16c>
 800b9f2:	4b7a      	ldr	r3, [pc, #488]	; (800bbdc <UART_SetConfig+0x2e4>)
 800b9f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9f8:	f003 030c 	and.w	r3, r3, #12
 800b9fc:	2b0c      	cmp	r3, #12
 800b9fe:	d82d      	bhi.n	800ba5c <UART_SetConfig+0x164>
 800ba00:	a201      	add	r2, pc, #4	; (adr r2, 800ba08 <UART_SetConfig+0x110>)
 800ba02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba06:	bf00      	nop
 800ba08:	0800ba3d 	.word	0x0800ba3d
 800ba0c:	0800ba5d 	.word	0x0800ba5d
 800ba10:	0800ba5d 	.word	0x0800ba5d
 800ba14:	0800ba5d 	.word	0x0800ba5d
 800ba18:	0800ba4d 	.word	0x0800ba4d
 800ba1c:	0800ba5d 	.word	0x0800ba5d
 800ba20:	0800ba5d 	.word	0x0800ba5d
 800ba24:	0800ba5d 	.word	0x0800ba5d
 800ba28:	0800ba45 	.word	0x0800ba45
 800ba2c:	0800ba5d 	.word	0x0800ba5d
 800ba30:	0800ba5d 	.word	0x0800ba5d
 800ba34:	0800ba5d 	.word	0x0800ba5d
 800ba38:	0800ba55 	.word	0x0800ba55
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba42:	e0d8      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800ba44:	2302      	movs	r3, #2
 800ba46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba4a:	e0d4      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800ba4c:	2304      	movs	r3, #4
 800ba4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba52:	e0d0      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800ba54:	2308      	movs	r3, #8
 800ba56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba5a:	e0cc      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800ba5c:	2310      	movs	r3, #16
 800ba5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba62:	e0c8      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a5e      	ldr	r2, [pc, #376]	; (800bbe4 <UART_SetConfig+0x2ec>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d125      	bne.n	800baba <UART_SetConfig+0x1c2>
 800ba6e:	4b5b      	ldr	r3, [pc, #364]	; (800bbdc <UART_SetConfig+0x2e4>)
 800ba70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ba78:	2b30      	cmp	r3, #48	; 0x30
 800ba7a:	d016      	beq.n	800baaa <UART_SetConfig+0x1b2>
 800ba7c:	2b30      	cmp	r3, #48	; 0x30
 800ba7e:	d818      	bhi.n	800bab2 <UART_SetConfig+0x1ba>
 800ba80:	2b20      	cmp	r3, #32
 800ba82:	d00a      	beq.n	800ba9a <UART_SetConfig+0x1a2>
 800ba84:	2b20      	cmp	r3, #32
 800ba86:	d814      	bhi.n	800bab2 <UART_SetConfig+0x1ba>
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <UART_SetConfig+0x19a>
 800ba8c:	2b10      	cmp	r3, #16
 800ba8e:	d008      	beq.n	800baa2 <UART_SetConfig+0x1aa>
 800ba90:	e00f      	b.n	800bab2 <UART_SetConfig+0x1ba>
 800ba92:	2300      	movs	r3, #0
 800ba94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba98:	e0ad      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800ba9a:	2302      	movs	r3, #2
 800ba9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baa0:	e0a9      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800baa2:	2304      	movs	r3, #4
 800baa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baa8:	e0a5      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800baaa:	2308      	movs	r3, #8
 800baac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bab0:	e0a1      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800bab2:	2310      	movs	r3, #16
 800bab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bab8:	e09d      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a4a      	ldr	r2, [pc, #296]	; (800bbe8 <UART_SetConfig+0x2f0>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d125      	bne.n	800bb10 <UART_SetConfig+0x218>
 800bac4:	4b45      	ldr	r3, [pc, #276]	; (800bbdc <UART_SetConfig+0x2e4>)
 800bac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bace:	2bc0      	cmp	r3, #192	; 0xc0
 800bad0:	d016      	beq.n	800bb00 <UART_SetConfig+0x208>
 800bad2:	2bc0      	cmp	r3, #192	; 0xc0
 800bad4:	d818      	bhi.n	800bb08 <UART_SetConfig+0x210>
 800bad6:	2b80      	cmp	r3, #128	; 0x80
 800bad8:	d00a      	beq.n	800baf0 <UART_SetConfig+0x1f8>
 800bada:	2b80      	cmp	r3, #128	; 0x80
 800badc:	d814      	bhi.n	800bb08 <UART_SetConfig+0x210>
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d002      	beq.n	800bae8 <UART_SetConfig+0x1f0>
 800bae2:	2b40      	cmp	r3, #64	; 0x40
 800bae4:	d008      	beq.n	800baf8 <UART_SetConfig+0x200>
 800bae6:	e00f      	b.n	800bb08 <UART_SetConfig+0x210>
 800bae8:	2300      	movs	r3, #0
 800baea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baee:	e082      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800baf0:	2302      	movs	r3, #2
 800baf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baf6:	e07e      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800baf8:	2304      	movs	r3, #4
 800bafa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bafe:	e07a      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800bb00:	2308      	movs	r3, #8
 800bb02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb06:	e076      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800bb08:	2310      	movs	r3, #16
 800bb0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb0e:	e072      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a35      	ldr	r2, [pc, #212]	; (800bbec <UART_SetConfig+0x2f4>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d12a      	bne.n	800bb70 <UART_SetConfig+0x278>
 800bb1a:	4b30      	ldr	r3, [pc, #192]	; (800bbdc <UART_SetConfig+0x2e4>)
 800bb1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb28:	d01a      	beq.n	800bb60 <UART_SetConfig+0x268>
 800bb2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb2e:	d81b      	bhi.n	800bb68 <UART_SetConfig+0x270>
 800bb30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb34:	d00c      	beq.n	800bb50 <UART_SetConfig+0x258>
 800bb36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb3a:	d815      	bhi.n	800bb68 <UART_SetConfig+0x270>
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d003      	beq.n	800bb48 <UART_SetConfig+0x250>
 800bb40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb44:	d008      	beq.n	800bb58 <UART_SetConfig+0x260>
 800bb46:	e00f      	b.n	800bb68 <UART_SetConfig+0x270>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb4e:	e052      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800bb50:	2302      	movs	r3, #2
 800bb52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb56:	e04e      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800bb58:	2304      	movs	r3, #4
 800bb5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb5e:	e04a      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800bb60:	2308      	movs	r3, #8
 800bb62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb66:	e046      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800bb68:	2310      	movs	r3, #16
 800bb6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb6e:	e042      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a17      	ldr	r2, [pc, #92]	; (800bbd4 <UART_SetConfig+0x2dc>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d13a      	bne.n	800bbf0 <UART_SetConfig+0x2f8>
 800bb7a:	4b18      	ldr	r3, [pc, #96]	; (800bbdc <UART_SetConfig+0x2e4>)
 800bb7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bb84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb88:	d01a      	beq.n	800bbc0 <UART_SetConfig+0x2c8>
 800bb8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb8e:	d81b      	bhi.n	800bbc8 <UART_SetConfig+0x2d0>
 800bb90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb94:	d00c      	beq.n	800bbb0 <UART_SetConfig+0x2b8>
 800bb96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb9a:	d815      	bhi.n	800bbc8 <UART_SetConfig+0x2d0>
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d003      	beq.n	800bba8 <UART_SetConfig+0x2b0>
 800bba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bba4:	d008      	beq.n	800bbb8 <UART_SetConfig+0x2c0>
 800bba6:	e00f      	b.n	800bbc8 <UART_SetConfig+0x2d0>
 800bba8:	2300      	movs	r3, #0
 800bbaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbae:	e022      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800bbb0:	2302      	movs	r3, #2
 800bbb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbb6:	e01e      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800bbb8:	2304      	movs	r3, #4
 800bbba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbbe:	e01a      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800bbc0:	2308      	movs	r3, #8
 800bbc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbc6:	e016      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800bbc8:	2310      	movs	r3, #16
 800bbca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbce:	e012      	b.n	800bbf6 <UART_SetConfig+0x2fe>
 800bbd0:	cfff69f3 	.word	0xcfff69f3
 800bbd4:	40008000 	.word	0x40008000
 800bbd8:	40013800 	.word	0x40013800
 800bbdc:	40021000 	.word	0x40021000
 800bbe0:	40004400 	.word	0x40004400
 800bbe4:	40004800 	.word	0x40004800
 800bbe8:	40004c00 	.word	0x40004c00
 800bbec:	40005000 	.word	0x40005000
 800bbf0:	2310      	movs	r3, #16
 800bbf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4aae      	ldr	r2, [pc, #696]	; (800beb4 <UART_SetConfig+0x5bc>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	f040 8097 	bne.w	800bd30 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bc02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc06:	2b08      	cmp	r3, #8
 800bc08:	d823      	bhi.n	800bc52 <UART_SetConfig+0x35a>
 800bc0a:	a201      	add	r2, pc, #4	; (adr r2, 800bc10 <UART_SetConfig+0x318>)
 800bc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc10:	0800bc35 	.word	0x0800bc35
 800bc14:	0800bc53 	.word	0x0800bc53
 800bc18:	0800bc3d 	.word	0x0800bc3d
 800bc1c:	0800bc53 	.word	0x0800bc53
 800bc20:	0800bc43 	.word	0x0800bc43
 800bc24:	0800bc53 	.word	0x0800bc53
 800bc28:	0800bc53 	.word	0x0800bc53
 800bc2c:	0800bc53 	.word	0x0800bc53
 800bc30:	0800bc4b 	.word	0x0800bc4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc34:	f7fc f826 	bl	8007c84 <HAL_RCC_GetPCLK1Freq>
 800bc38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc3a:	e010      	b.n	800bc5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc3c:	4b9e      	ldr	r3, [pc, #632]	; (800beb8 <UART_SetConfig+0x5c0>)
 800bc3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc40:	e00d      	b.n	800bc5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc42:	f7fb ff87 	bl	8007b54 <HAL_RCC_GetSysClockFreq>
 800bc46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc48:	e009      	b.n	800bc5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc50:	e005      	b.n	800bc5e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bc52:	2300      	movs	r3, #0
 800bc54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bc56:	2301      	movs	r3, #1
 800bc58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bc5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f000 8130 	beq.w	800bec6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6a:	4a94      	ldr	r2, [pc, #592]	; (800bebc <UART_SetConfig+0x5c4>)
 800bc6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc70:	461a      	mov	r2, r3
 800bc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc74:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	4613      	mov	r3, r2
 800bc80:	005b      	lsls	r3, r3, #1
 800bc82:	4413      	add	r3, r2
 800bc84:	69ba      	ldr	r2, [r7, #24]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d305      	bcc.n	800bc96 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc90:	69ba      	ldr	r2, [r7, #24]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d903      	bls.n	800bc9e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bc96:	2301      	movs	r3, #1
 800bc98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bc9c:	e113      	b.n	800bec6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca0:	2200      	movs	r2, #0
 800bca2:	60bb      	str	r3, [r7, #8]
 800bca4:	60fa      	str	r2, [r7, #12]
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcaa:	4a84      	ldr	r2, [pc, #528]	; (800bebc <UART_SetConfig+0x5c4>)
 800bcac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	603b      	str	r3, [r7, #0]
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bcc0:	f7f5 f84a 	bl	8000d58 <__aeabi_uldivmod>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	4610      	mov	r0, r2
 800bcca:	4619      	mov	r1, r3
 800bccc:	f04f 0200 	mov.w	r2, #0
 800bcd0:	f04f 0300 	mov.w	r3, #0
 800bcd4:	020b      	lsls	r3, r1, #8
 800bcd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bcda:	0202      	lsls	r2, r0, #8
 800bcdc:	6979      	ldr	r1, [r7, #20]
 800bcde:	6849      	ldr	r1, [r1, #4]
 800bce0:	0849      	lsrs	r1, r1, #1
 800bce2:	2000      	movs	r0, #0
 800bce4:	460c      	mov	r4, r1
 800bce6:	4605      	mov	r5, r0
 800bce8:	eb12 0804 	adds.w	r8, r2, r4
 800bcec:	eb43 0905 	adc.w	r9, r3, r5
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	469a      	mov	sl, r3
 800bcf8:	4693      	mov	fp, r2
 800bcfa:	4652      	mov	r2, sl
 800bcfc:	465b      	mov	r3, fp
 800bcfe:	4640      	mov	r0, r8
 800bd00:	4649      	mov	r1, r9
 800bd02:	f7f5 f829 	bl	8000d58 <__aeabi_uldivmod>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd14:	d308      	bcc.n	800bd28 <UART_SetConfig+0x430>
 800bd16:	6a3b      	ldr	r3, [r7, #32]
 800bd18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd1c:	d204      	bcs.n	800bd28 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	6a3a      	ldr	r2, [r7, #32]
 800bd24:	60da      	str	r2, [r3, #12]
 800bd26:	e0ce      	b.n	800bec6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bd2e:	e0ca      	b.n	800bec6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	69db      	ldr	r3, [r3, #28]
 800bd34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd38:	d166      	bne.n	800be08 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bd3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd3e:	2b08      	cmp	r3, #8
 800bd40:	d827      	bhi.n	800bd92 <UART_SetConfig+0x49a>
 800bd42:	a201      	add	r2, pc, #4	; (adr r2, 800bd48 <UART_SetConfig+0x450>)
 800bd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd48:	0800bd6d 	.word	0x0800bd6d
 800bd4c:	0800bd75 	.word	0x0800bd75
 800bd50:	0800bd7d 	.word	0x0800bd7d
 800bd54:	0800bd93 	.word	0x0800bd93
 800bd58:	0800bd83 	.word	0x0800bd83
 800bd5c:	0800bd93 	.word	0x0800bd93
 800bd60:	0800bd93 	.word	0x0800bd93
 800bd64:	0800bd93 	.word	0x0800bd93
 800bd68:	0800bd8b 	.word	0x0800bd8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd6c:	f7fb ff8a 	bl	8007c84 <HAL_RCC_GetPCLK1Freq>
 800bd70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd72:	e014      	b.n	800bd9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd74:	f7fb ff9c 	bl	8007cb0 <HAL_RCC_GetPCLK2Freq>
 800bd78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd7a:	e010      	b.n	800bd9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd7c:	4b4e      	ldr	r3, [pc, #312]	; (800beb8 <UART_SetConfig+0x5c0>)
 800bd7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd80:	e00d      	b.n	800bd9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd82:	f7fb fee7 	bl	8007b54 <HAL_RCC_GetSysClockFreq>
 800bd86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd88:	e009      	b.n	800bd9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd90:	e005      	b.n	800bd9e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bd92:	2300      	movs	r3, #0
 800bd94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bd9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f000 8090 	beq.w	800bec6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdaa:	4a44      	ldr	r2, [pc, #272]	; (800bebc <UART_SetConfig+0x5c4>)
 800bdac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdb8:	005a      	lsls	r2, r3, #1
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	085b      	lsrs	r3, r3, #1
 800bdc0:	441a      	add	r2, r3
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdcc:	6a3b      	ldr	r3, [r7, #32]
 800bdce:	2b0f      	cmp	r3, #15
 800bdd0:	d916      	bls.n	800be00 <UART_SetConfig+0x508>
 800bdd2:	6a3b      	ldr	r3, [r7, #32]
 800bdd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdd8:	d212      	bcs.n	800be00 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	f023 030f 	bic.w	r3, r3, #15
 800bde2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bde4:	6a3b      	ldr	r3, [r7, #32]
 800bde6:	085b      	lsrs	r3, r3, #1
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	f003 0307 	and.w	r3, r3, #7
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	8bfb      	ldrh	r3, [r7, #30]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	8bfa      	ldrh	r2, [r7, #30]
 800bdfc:	60da      	str	r2, [r3, #12]
 800bdfe:	e062      	b.n	800bec6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800be06:	e05e      	b.n	800bec6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800be08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be0c:	2b08      	cmp	r3, #8
 800be0e:	d828      	bhi.n	800be62 <UART_SetConfig+0x56a>
 800be10:	a201      	add	r2, pc, #4	; (adr r2, 800be18 <UART_SetConfig+0x520>)
 800be12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be16:	bf00      	nop
 800be18:	0800be3d 	.word	0x0800be3d
 800be1c:	0800be45 	.word	0x0800be45
 800be20:	0800be4d 	.word	0x0800be4d
 800be24:	0800be63 	.word	0x0800be63
 800be28:	0800be53 	.word	0x0800be53
 800be2c:	0800be63 	.word	0x0800be63
 800be30:	0800be63 	.word	0x0800be63
 800be34:	0800be63 	.word	0x0800be63
 800be38:	0800be5b 	.word	0x0800be5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be3c:	f7fb ff22 	bl	8007c84 <HAL_RCC_GetPCLK1Freq>
 800be40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be42:	e014      	b.n	800be6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be44:	f7fb ff34 	bl	8007cb0 <HAL_RCC_GetPCLK2Freq>
 800be48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be4a:	e010      	b.n	800be6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be4c:	4b1a      	ldr	r3, [pc, #104]	; (800beb8 <UART_SetConfig+0x5c0>)
 800be4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be50:	e00d      	b.n	800be6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be52:	f7fb fe7f 	bl	8007b54 <HAL_RCC_GetSysClockFreq>
 800be56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be58:	e009      	b.n	800be6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be60:	e005      	b.n	800be6e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800be62:	2300      	movs	r3, #0
 800be64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800be66:	2301      	movs	r3, #1
 800be68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800be6c:	bf00      	nop
    }

    if (pclk != 0U)
 800be6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be70:	2b00      	cmp	r3, #0
 800be72:	d028      	beq.n	800bec6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be78:	4a10      	ldr	r2, [pc, #64]	; (800bebc <UART_SetConfig+0x5c4>)
 800be7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be7e:	461a      	mov	r2, r3
 800be80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be82:	fbb3 f2f2 	udiv	r2, r3, r2
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	085b      	lsrs	r3, r3, #1
 800be8c:	441a      	add	r2, r3
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	fbb2 f3f3 	udiv	r3, r2, r3
 800be96:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be98:	6a3b      	ldr	r3, [r7, #32]
 800be9a:	2b0f      	cmp	r3, #15
 800be9c:	d910      	bls.n	800bec0 <UART_SetConfig+0x5c8>
 800be9e:	6a3b      	ldr	r3, [r7, #32]
 800bea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bea4:	d20c      	bcs.n	800bec0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bea6:	6a3b      	ldr	r3, [r7, #32]
 800bea8:	b29a      	uxth	r2, r3
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	60da      	str	r2, [r3, #12]
 800beb0:	e009      	b.n	800bec6 <UART_SetConfig+0x5ce>
 800beb2:	bf00      	nop
 800beb4:	40008000 	.word	0x40008000
 800beb8:	00f42400 	.word	0x00f42400
 800bebc:	08015900 	.word	0x08015900
      }
      else
      {
        ret = HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	2201      	movs	r2, #1
 800beca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	2201      	movs	r2, #1
 800bed2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	2200      	movs	r2, #0
 800beda:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	2200      	movs	r2, #0
 800bee0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bee2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3730      	adds	r7, #48	; 0x30
 800beea:	46bd      	mov	sp, r7
 800beec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befc:	f003 0301 	and.w	r3, r3, #1
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00a      	beq.n	800bf1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	430a      	orrs	r2, r1
 800bf18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf1e:	f003 0302 	and.w	r3, r3, #2
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d00a      	beq.n	800bf3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	430a      	orrs	r2, r1
 800bf3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf40:	f003 0304 	and.w	r3, r3, #4
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d00a      	beq.n	800bf5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf62:	f003 0308 	and.w	r3, r3, #8
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00a      	beq.n	800bf80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf84:	f003 0310 	and.w	r3, r3, #16
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00a      	beq.n	800bfa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	430a      	orrs	r2, r1
 800bfa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa6:	f003 0320 	and.w	r3, r3, #32
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00a      	beq.n	800bfc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	430a      	orrs	r2, r1
 800bfc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d01a      	beq.n	800c006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	430a      	orrs	r2, r1
 800bfe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfee:	d10a      	bne.n	800c006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	430a      	orrs	r2, r1
 800c004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c00a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00a      	beq.n	800c028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	430a      	orrs	r2, r1
 800c026:	605a      	str	r2, [r3, #4]
  }
}
 800c028:	bf00      	nop
 800c02a:	370c      	adds	r7, #12
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b086      	sub	sp, #24
 800c038:	af02      	add	r7, sp, #8
 800c03a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c044:	f7fa f864 	bl	8006110 <HAL_GetTick>
 800c048:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f003 0308 	and.w	r3, r3, #8
 800c054:	2b08      	cmp	r3, #8
 800c056:	d10e      	bne.n	800c076 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 f82f 	bl	800c0ca <UART_WaitOnFlagUntilTimeout>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d001      	beq.n	800c076 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c072:	2303      	movs	r3, #3
 800c074:	e025      	b.n	800c0c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 0304 	and.w	r3, r3, #4
 800c080:	2b04      	cmp	r3, #4
 800c082:	d10e      	bne.n	800c0a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 f819 	bl	800c0ca <UART_WaitOnFlagUntilTimeout>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d001      	beq.n	800c0a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	e00f      	b.n	800c0c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2220      	movs	r2, #32
 800c0a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2220      	movs	r2, #32
 800c0ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c0c0:	2300      	movs	r3, #0
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b09c      	sub	sp, #112	; 0x70
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	60f8      	str	r0, [r7, #12]
 800c0d2:	60b9      	str	r1, [r7, #8]
 800c0d4:	603b      	str	r3, [r7, #0]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0da:	e0a9      	b.n	800c230 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e2:	f000 80a5 	beq.w	800c230 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0e6:	f7fa f813 	bl	8006110 <HAL_GetTick>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d302      	bcc.n	800c0fc <UART_WaitOnFlagUntilTimeout+0x32>
 800c0f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d140      	bne.n	800c17e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c104:	e853 3f00 	ldrex	r3, [r3]
 800c108:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c10c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c110:	667b      	str	r3, [r7, #100]	; 0x64
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	461a      	mov	r2, r3
 800c118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c11a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c11c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c120:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c122:	e841 2300 	strex	r3, r2, [r1]
 800c126:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1e6      	bne.n	800c0fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	3308      	adds	r3, #8
 800c134:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c138:	e853 3f00 	ldrex	r3, [r3]
 800c13c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c140:	f023 0301 	bic.w	r3, r3, #1
 800c144:	663b      	str	r3, [r7, #96]	; 0x60
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	3308      	adds	r3, #8
 800c14c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c14e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c150:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c152:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c156:	e841 2300 	strex	r3, r2, [r1]
 800c15a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c15c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d1e5      	bne.n	800c12e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2220      	movs	r2, #32
 800c166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2220      	movs	r2, #32
 800c16e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2200      	movs	r2, #0
 800c176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c17a:	2303      	movs	r3, #3
 800c17c:	e069      	b.n	800c252 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f003 0304 	and.w	r3, r3, #4
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d051      	beq.n	800c230 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	69db      	ldr	r3, [r3, #28]
 800c192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c19a:	d149      	bne.n	800c230 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ae:	e853 3f00 	ldrex	r3, [r3]
 800c1b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c1c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1cc:	e841 2300 	strex	r3, r2, [r1]
 800c1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d1e6      	bne.n	800c1a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3308      	adds	r3, #8
 800c1de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	e853 3f00 	ldrex	r3, [r3]
 800c1e6:	613b      	str	r3, [r7, #16]
   return(result);
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	f023 0301 	bic.w	r3, r3, #1
 800c1ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	3308      	adds	r3, #8
 800c1f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c1f8:	623a      	str	r2, [r7, #32]
 800c1fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fc:	69f9      	ldr	r1, [r7, #28]
 800c1fe:	6a3a      	ldr	r2, [r7, #32]
 800c200:	e841 2300 	strex	r3, r2, [r1]
 800c204:	61bb      	str	r3, [r7, #24]
   return(result);
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1e5      	bne.n	800c1d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2220      	movs	r2, #32
 800c210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2220      	movs	r2, #32
 800c218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2220      	movs	r2, #32
 800c220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c22c:	2303      	movs	r3, #3
 800c22e:	e010      	b.n	800c252 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	69da      	ldr	r2, [r3, #28]
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	4013      	ands	r3, r2
 800c23a:	68ba      	ldr	r2, [r7, #8]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	bf0c      	ite	eq
 800c240:	2301      	moveq	r3, #1
 800c242:	2300      	movne	r3, #0
 800c244:	b2db      	uxtb	r3, r3
 800c246:	461a      	mov	r2, r3
 800c248:	79fb      	ldrb	r3, [r7, #7]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	f43f af46 	beq.w	800c0dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c250:	2300      	movs	r3, #0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3770      	adds	r7, #112	; 0x70
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
	...

0800c25c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b096      	sub	sp, #88	; 0x58
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	4613      	mov	r3, r2
 800c268:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	88fa      	ldrh	r2, [r7, #6]
 800c274:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2222      	movs	r2, #34	; 0x22
 800c284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d02c      	beq.n	800c2ea <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c294:	4a42      	ldr	r2, [pc, #264]	; (800c3a0 <UART_Start_Receive_DMA+0x144>)
 800c296:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c29c:	4a41      	ldr	r2, [pc, #260]	; (800c3a4 <UART_Start_Receive_DMA+0x148>)
 800c29e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2a4:	4a40      	ldr	r2, [pc, #256]	; (800c3a8 <UART_Start_Receive_DMA+0x14c>)
 800c2a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	3324      	adds	r3, #36	; 0x24
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	88fb      	ldrh	r3, [r7, #6]
 800c2c4:	f7fa f8fa 	bl	80064bc <HAL_DMA_Start_IT>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00d      	beq.n	800c2ea <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2210      	movs	r2, #16
 800c2d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2220      	movs	r2, #32
 800c2e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e055      	b.n	800c396 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d018      	beq.n	800c32c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c302:	e853 3f00 	ldrex	r3, [r3]
 800c306:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c30e:	657b      	str	r3, [r7, #84]	; 0x54
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	461a      	mov	r2, r3
 800c316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c318:	64bb      	str	r3, [r7, #72]	; 0x48
 800c31a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c31e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c320:	e841 2300 	strex	r3, r2, [r1]
 800c324:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1e6      	bne.n	800c2fa <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	3308      	adds	r3, #8
 800c332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c336:	e853 3f00 	ldrex	r3, [r3]
 800c33a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33e:	f043 0301 	orr.w	r3, r3, #1
 800c342:	653b      	str	r3, [r7, #80]	; 0x50
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	3308      	adds	r3, #8
 800c34a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c34c:	637a      	str	r2, [r7, #52]	; 0x34
 800c34e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c350:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c354:	e841 2300 	strex	r3, r2, [r1]
 800c358:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1e5      	bne.n	800c32c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	3308      	adds	r3, #8
 800c366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	e853 3f00 	ldrex	r3, [r3]
 800c36e:	613b      	str	r3, [r7, #16]
   return(result);
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c376:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	3308      	adds	r3, #8
 800c37e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c380:	623a      	str	r2, [r7, #32]
 800c382:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c384:	69f9      	ldr	r1, [r7, #28]
 800c386:	6a3a      	ldr	r2, [r7, #32]
 800c388:	e841 2300 	strex	r3, r2, [r1]
 800c38c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1e5      	bne.n	800c360 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3758      	adds	r7, #88	; 0x58
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	0800c4fb 	.word	0x0800c4fb
 800c3a4:	0800c621 	.word	0x0800c621
 800c3a8:	0800c659 	.word	0x0800c659

0800c3ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b08f      	sub	sp, #60	; 0x3c
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ba:	6a3b      	ldr	r3, [r7, #32]
 800c3bc:	e853 3f00 	ldrex	r3, [r3]
 800c3c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c3c8:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3d4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3da:	e841 2300 	strex	r3, r2, [r1]
 800c3de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1e6      	bne.n	800c3b4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	e853 3f00 	ldrex	r3, [r3]
 800c3f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c3fc:	633b      	str	r3, [r7, #48]	; 0x30
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	3308      	adds	r3, #8
 800c404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c406:	61ba      	str	r2, [r7, #24]
 800c408:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c40a:	6979      	ldr	r1, [r7, #20]
 800c40c:	69ba      	ldr	r2, [r7, #24]
 800c40e:	e841 2300 	strex	r3, r2, [r1]
 800c412:	613b      	str	r3, [r7, #16]
   return(result);
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d1e5      	bne.n	800c3e6 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2220      	movs	r2, #32
 800c41e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c422:	bf00      	nop
 800c424:	373c      	adds	r7, #60	; 0x3c
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr

0800c42e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c42e:	b480      	push	{r7}
 800c430:	b095      	sub	sp, #84	; 0x54
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c43e:	e853 3f00 	ldrex	r3, [r3]
 800c442:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c446:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c44a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	461a      	mov	r2, r3
 800c452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c454:	643b      	str	r3, [r7, #64]	; 0x40
 800c456:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c458:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c45a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c45c:	e841 2300 	strex	r3, r2, [r1]
 800c460:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c464:	2b00      	cmp	r3, #0
 800c466:	d1e6      	bne.n	800c436 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	3308      	adds	r3, #8
 800c46e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c470:	6a3b      	ldr	r3, [r7, #32]
 800c472:	e853 3f00 	ldrex	r3, [r3]
 800c476:	61fb      	str	r3, [r7, #28]
   return(result);
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c47e:	f023 0301 	bic.w	r3, r3, #1
 800c482:	64bb      	str	r3, [r7, #72]	; 0x48
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	3308      	adds	r3, #8
 800c48a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c48c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c48e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c494:	e841 2300 	strex	r3, r2, [r1]
 800c498:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1e3      	bne.n	800c468 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d118      	bne.n	800c4da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	e853 3f00 	ldrex	r3, [r3]
 800c4b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	f023 0310 	bic.w	r3, r3, #16
 800c4bc:	647b      	str	r3, [r7, #68]	; 0x44
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4c6:	61bb      	str	r3, [r7, #24]
 800c4c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ca:	6979      	ldr	r1, [r7, #20]
 800c4cc:	69ba      	ldr	r2, [r7, #24]
 800c4ce:	e841 2300 	strex	r3, r2, [r1]
 800c4d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1e6      	bne.n	800c4a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2220      	movs	r2, #32
 800c4de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c4ee:	bf00      	nop
 800c4f0:	3754      	adds	r7, #84	; 0x54
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b09c      	sub	sp, #112	; 0x70
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c506:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f003 0320 	and.w	r3, r3, #32
 800c512:	2b00      	cmp	r3, #0
 800c514:	d171      	bne.n	800c5fa <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c518:	2200      	movs	r2, #0
 800c51a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c51e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c526:	e853 3f00 	ldrex	r3, [r3]
 800c52a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c52c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c52e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c532:	66bb      	str	r3, [r7, #104]	; 0x68
 800c534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	461a      	mov	r2, r3
 800c53a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c53c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c53e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c540:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c544:	e841 2300 	strex	r3, r2, [r1]
 800c548:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c54a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1e6      	bne.n	800c51e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	3308      	adds	r3, #8
 800c556:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55a:	e853 3f00 	ldrex	r3, [r3]
 800c55e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c562:	f023 0301 	bic.w	r3, r3, #1
 800c566:	667b      	str	r3, [r7, #100]	; 0x64
 800c568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	3308      	adds	r3, #8
 800c56e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c570:	647a      	str	r2, [r7, #68]	; 0x44
 800c572:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c574:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c578:	e841 2300 	strex	r3, r2, [r1]
 800c57c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1e5      	bne.n	800c550 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	3308      	adds	r3, #8
 800c58a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58e:	e853 3f00 	ldrex	r3, [r3]
 800c592:	623b      	str	r3, [r7, #32]
   return(result);
 800c594:	6a3b      	ldr	r3, [r7, #32]
 800c596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c59a:	663b      	str	r3, [r7, #96]	; 0x60
 800c59c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3308      	adds	r3, #8
 800c5a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c5a4:	633a      	str	r2, [r7, #48]	; 0x30
 800c5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5ac:	e841 2300 	strex	r3, r2, [r1]
 800c5b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1e5      	bne.n	800c584 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c5b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5ba:	2220      	movs	r2, #32
 800c5bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d118      	bne.n	800c5fa <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	e853 3f00 	ldrex	r3, [r3]
 800c5d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f023 0310 	bic.w	r3, r3, #16
 800c5dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5e6:	61fb      	str	r3, [r7, #28]
 800c5e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ea:	69b9      	ldr	r1, [r7, #24]
 800c5ec:	69fa      	ldr	r2, [r7, #28]
 800c5ee:	e841 2300 	strex	r3, r2, [r1]
 800c5f2:	617b      	str	r3, [r7, #20]
   return(result);
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d1e6      	bne.n	800c5c8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d107      	bne.n	800c612 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c604:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c608:	4619      	mov	r1, r3
 800c60a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c60c:	f7f6 fd18 	bl	8003040 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c610:	e002      	b.n	800c618 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c612:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c614:	f7ff f952 	bl	800b8bc <HAL_UART_RxCpltCallback>
}
 800c618:	bf00      	nop
 800c61a:	3770      	adds	r7, #112	; 0x70
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c62c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c632:	2b01      	cmp	r3, #1
 800c634:	d109      	bne.n	800c64a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c63c:	085b      	lsrs	r3, r3, #1
 800c63e:	b29b      	uxth	r3, r3
 800c640:	4619      	mov	r1, r3
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f7f6 fcfc 	bl	8003040 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c648:	e002      	b.n	800c650 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f7ff f940 	bl	800b8d0 <HAL_UART_RxHalfCpltCallback>
}
 800c650:	bf00      	nop
 800c652:	3710      	adds	r7, #16
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c664:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c66c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c674:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c680:	2b80      	cmp	r3, #128	; 0x80
 800c682:	d109      	bne.n	800c698 <UART_DMAError+0x40>
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	2b21      	cmp	r3, #33	; 0x21
 800c688:	d106      	bne.n	800c698 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	2200      	movs	r2, #0
 800c68e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c692:	6978      	ldr	r0, [r7, #20]
 800c694:	f7ff fe8a 	bl	800c3ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6a2:	2b40      	cmp	r3, #64	; 0x40
 800c6a4:	d109      	bne.n	800c6ba <UART_DMAError+0x62>
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2b22      	cmp	r3, #34	; 0x22
 800c6aa:	d106      	bne.n	800c6ba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c6b4:	6978      	ldr	r0, [r7, #20]
 800c6b6:	f7ff feba 	bl	800c42e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6c0:	f043 0210 	orr.w	r2, r3, #16
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6ca:	6978      	ldr	r0, [r7, #20]
 800c6cc:	f7ff f90a 	bl	800b8e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6d0:	bf00      	nop
 800c6d2:	3718      	adds	r7, #24
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f7ff f8f4 	bl	800b8e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6fc:	bf00      	nop
 800c6fe:	3710      	adds	r7, #16
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b088      	sub	sp, #32
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	e853 3f00 	ldrex	r3, [r3]
 800c718:	60bb      	str	r3, [r7, #8]
   return(result);
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c720:	61fb      	str	r3, [r7, #28]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	461a      	mov	r2, r3
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	61bb      	str	r3, [r7, #24]
 800c72c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72e:	6979      	ldr	r1, [r7, #20]
 800c730:	69ba      	ldr	r2, [r7, #24]
 800c732:	e841 2300 	strex	r3, r2, [r1]
 800c736:	613b      	str	r3, [r7, #16]
   return(result);
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1e6      	bne.n	800c70c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2220      	movs	r2, #32
 800c742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f7ff f8ab 	bl	800b8a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c752:	bf00      	nop
 800c754:	3720      	adds	r7, #32
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c75a:	b480      	push	{r7}
 800c75c:	b083      	sub	sp, #12
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c762:	bf00      	nop
 800c764:	370c      	adds	r7, #12
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr

0800c76e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c76e:	b480      	push	{r7}
 800c770:	b083      	sub	sp, #12
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c776:	bf00      	nop
 800c778:	370c      	adds	r7, #12
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c782:	b480      	push	{r7}
 800c784:	b083      	sub	sp, #12
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c78a:	bf00      	nop
 800c78c:	370c      	adds	r7, #12
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c796:	b480      	push	{r7}
 800c798:	b085      	sub	sp, #20
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d101      	bne.n	800c7ac <HAL_UARTEx_DisableFifoMode+0x16>
 800c7a8:	2302      	movs	r3, #2
 800c7aa:	e027      	b.n	800c7fc <HAL_UARTEx_DisableFifoMode+0x66>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2224      	movs	r2, #36	; 0x24
 800c7b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f022 0201 	bic.w	r2, r2, #1
 800c7d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c7da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2220      	movs	r2, #32
 800c7ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3714      	adds	r7, #20
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d101      	bne.n	800c820 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c81c:	2302      	movs	r3, #2
 800c81e:	e02d      	b.n	800c87c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2224      	movs	r2, #36	; 0x24
 800c82c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f022 0201 	bic.w	r2, r2, #1
 800c846:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	689b      	ldr	r3, [r3, #8]
 800c84e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	683a      	ldr	r2, [r7, #0]
 800c858:	430a      	orrs	r2, r1
 800c85a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 f8ab 	bl	800c9b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2220      	movs	r2, #32
 800c86e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c87a:	2300      	movs	r3, #0
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c894:	2b01      	cmp	r3, #1
 800c896:	d101      	bne.n	800c89c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c898:	2302      	movs	r3, #2
 800c89a:	e02d      	b.n	800c8f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2224      	movs	r2, #36	; 0x24
 800c8a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f022 0201 	bic.w	r2, r2, #1
 800c8c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	689b      	ldr	r3, [r3, #8]
 800c8ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	430a      	orrs	r2, r1
 800c8d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 f86d 	bl	800c9b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68fa      	ldr	r2, [r7, #12]
 800c8e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2220      	movs	r2, #32
 800c8ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8f6:	2300      	movs	r3, #0
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3710      	adds	r7, #16
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b08c      	sub	sp, #48	; 0x30
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	4613      	mov	r3, r2
 800c90c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c914:	2b20      	cmp	r3, #32
 800c916:	d14a      	bne.n	800c9ae <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d002      	beq.n	800c924 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800c91e:	88fb      	ldrh	r3, [r7, #6]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d101      	bne.n	800c928 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800c924:	2301      	movs	r3, #1
 800c926:	e043      	b.n	800c9b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d101      	bne.n	800c936 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800c932:	2302      	movs	r3, #2
 800c934:	e03c      	b.n	800c9b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2201      	movs	r2, #1
 800c93a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2201      	movs	r2, #1
 800c942:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c944:	88fb      	ldrh	r3, [r7, #6]
 800c946:	461a      	mov	r2, r3
 800c948:	68b9      	ldr	r1, [r7, #8]
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	f7ff fc86 	bl	800c25c <UART_Start_Receive_DMA>
 800c950:	4603      	mov	r3, r0
 800c952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d124      	bne.n	800c9a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c962:	2b01      	cmp	r3, #1
 800c964:	d11d      	bne.n	800c9a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2210      	movs	r2, #16
 800c96c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	e853 3f00 	ldrex	r3, [r3]
 800c97a:	617b      	str	r3, [r7, #20]
   return(result);
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	f043 0310 	orr.w	r3, r3, #16
 800c982:	62bb      	str	r3, [r7, #40]	; 0x28
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	461a      	mov	r2, r3
 800c98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98c:	627b      	str	r3, [r7, #36]	; 0x24
 800c98e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c990:	6a39      	ldr	r1, [r7, #32]
 800c992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c994:	e841 2300 	strex	r3, r2, [r1]
 800c998:	61fb      	str	r3, [r7, #28]
   return(result);
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d1e6      	bne.n	800c96e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800c9a0:	e002      	b.n	800c9a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800c9a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9ac:	e000      	b.n	800c9b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800c9ae:	2302      	movs	r3, #2
  }
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3730      	adds	r7, #48	; 0x30
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d108      	bne.n	800c9da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c9d8:	e031      	b.n	800ca3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c9da:	2308      	movs	r3, #8
 800c9dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c9de:	2308      	movs	r3, #8
 800c9e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	0e5b      	lsrs	r3, r3, #25
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	f003 0307 	and.w	r3, r3, #7
 800c9f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	689b      	ldr	r3, [r3, #8]
 800c9f8:	0f5b      	lsrs	r3, r3, #29
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	f003 0307 	and.w	r3, r3, #7
 800ca00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca02:	7bbb      	ldrb	r3, [r7, #14]
 800ca04:	7b3a      	ldrb	r2, [r7, #12]
 800ca06:	4911      	ldr	r1, [pc, #68]	; (800ca4c <UARTEx_SetNbDataToProcess+0x94>)
 800ca08:	5c8a      	ldrb	r2, [r1, r2]
 800ca0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca0e:	7b3a      	ldrb	r2, [r7, #12]
 800ca10:	490f      	ldr	r1, [pc, #60]	; (800ca50 <UARTEx_SetNbDataToProcess+0x98>)
 800ca12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca14:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca20:	7bfb      	ldrb	r3, [r7, #15]
 800ca22:	7b7a      	ldrb	r2, [r7, #13]
 800ca24:	4909      	ldr	r1, [pc, #36]	; (800ca4c <UARTEx_SetNbDataToProcess+0x94>)
 800ca26:	5c8a      	ldrb	r2, [r1, r2]
 800ca28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca2c:	7b7a      	ldrb	r2, [r7, #13]
 800ca2e:	4908      	ldr	r1, [pc, #32]	; (800ca50 <UARTEx_SetNbDataToProcess+0x98>)
 800ca30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca32:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ca3e:	bf00      	nop
 800ca40:	3714      	adds	r7, #20
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	08015918 	.word	0x08015918
 800ca50:	08015920 	.word	0x08015920

0800ca54 <__NVIC_SetPriority>:
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	6039      	str	r1, [r7, #0]
 800ca5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ca60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	db0a      	blt.n	800ca7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	b2da      	uxtb	r2, r3
 800ca6c:	490c      	ldr	r1, [pc, #48]	; (800caa0 <__NVIC_SetPriority+0x4c>)
 800ca6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca72:	0112      	lsls	r2, r2, #4
 800ca74:	b2d2      	uxtb	r2, r2
 800ca76:	440b      	add	r3, r1
 800ca78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ca7c:	e00a      	b.n	800ca94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	b2da      	uxtb	r2, r3
 800ca82:	4908      	ldr	r1, [pc, #32]	; (800caa4 <__NVIC_SetPriority+0x50>)
 800ca84:	79fb      	ldrb	r3, [r7, #7]
 800ca86:	f003 030f 	and.w	r3, r3, #15
 800ca8a:	3b04      	subs	r3, #4
 800ca8c:	0112      	lsls	r2, r2, #4
 800ca8e:	b2d2      	uxtb	r2, r2
 800ca90:	440b      	add	r3, r1
 800ca92:	761a      	strb	r2, [r3, #24]
}
 800ca94:	bf00      	nop
 800ca96:	370c      	adds	r7, #12
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr
 800caa0:	e000e100 	.word	0xe000e100
 800caa4:	e000ed00 	.word	0xe000ed00

0800caa8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800caa8:	b580      	push	{r7, lr}
 800caaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800caac:	4b05      	ldr	r3, [pc, #20]	; (800cac4 <SysTick_Handler+0x1c>)
 800caae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cab0:	f002 fd56 	bl	800f560 <xTaskGetSchedulerState>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d001      	beq.n	800cabe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800caba:	f003 fc75 	bl	80103a8 <xPortSysTickHandler>
  }
}
 800cabe:	bf00      	nop
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	e000e010 	.word	0xe000e010

0800cac8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cac8:	b580      	push	{r7, lr}
 800caca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cacc:	2100      	movs	r1, #0
 800cace:	f06f 0004 	mvn.w	r0, #4
 800cad2:	f7ff ffbf 	bl	800ca54 <__NVIC_SetPriority>
#endif
}
 800cad6:	bf00      	nop
 800cad8:	bd80      	pop	{r7, pc}
	...

0800cadc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cae2:	f3ef 8305 	mrs	r3, IPSR
 800cae6:	603b      	str	r3, [r7, #0]
  return(result);
 800cae8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800caea:	2b00      	cmp	r3, #0
 800caec:	d003      	beq.n	800caf6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800caee:	f06f 0305 	mvn.w	r3, #5
 800caf2:	607b      	str	r3, [r7, #4]
 800caf4:	e00c      	b.n	800cb10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800caf6:	4b0a      	ldr	r3, [pc, #40]	; (800cb20 <osKernelInitialize+0x44>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d105      	bne.n	800cb0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cafe:	4b08      	ldr	r3, [pc, #32]	; (800cb20 <osKernelInitialize+0x44>)
 800cb00:	2201      	movs	r2, #1
 800cb02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cb04:	2300      	movs	r3, #0
 800cb06:	607b      	str	r3, [r7, #4]
 800cb08:	e002      	b.n	800cb10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cb0a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cb10:	687b      	ldr	r3, [r7, #4]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	370c      	adds	r7, #12
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	200045a4 	.word	0x200045a4

0800cb24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb2a:	f3ef 8305 	mrs	r3, IPSR
 800cb2e:	603b      	str	r3, [r7, #0]
  return(result);
 800cb30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d003      	beq.n	800cb3e <osKernelStart+0x1a>
    stat = osErrorISR;
 800cb36:	f06f 0305 	mvn.w	r3, #5
 800cb3a:	607b      	str	r3, [r7, #4]
 800cb3c:	e010      	b.n	800cb60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cb3e:	4b0b      	ldr	r3, [pc, #44]	; (800cb6c <osKernelStart+0x48>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d109      	bne.n	800cb5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cb46:	f7ff ffbf 	bl	800cac8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cb4a:	4b08      	ldr	r3, [pc, #32]	; (800cb6c <osKernelStart+0x48>)
 800cb4c:	2202      	movs	r2, #2
 800cb4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cb50:	f002 f810 	bl	800eb74 <vTaskStartScheduler>
      stat = osOK;
 800cb54:	2300      	movs	r3, #0
 800cb56:	607b      	str	r3, [r7, #4]
 800cb58:	e002      	b.n	800cb60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cb5a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cb60:	687b      	ldr	r3, [r7, #4]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3708      	adds	r7, #8
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	200045a4 	.word	0x200045a4

0800cb70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b08e      	sub	sp, #56	; 0x38
 800cb74:	af04      	add	r7, sp, #16
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb80:	f3ef 8305 	mrs	r3, IPSR
 800cb84:	617b      	str	r3, [r7, #20]
  return(result);
 800cb86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d17e      	bne.n	800cc8a <osThreadNew+0x11a>
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d07b      	beq.n	800cc8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cb92:	2380      	movs	r3, #128	; 0x80
 800cb94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cb96:	2318      	movs	r3, #24
 800cb98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cb9e:	f04f 33ff 	mov.w	r3, #4294967295
 800cba2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d045      	beq.n	800cc36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d002      	beq.n	800cbb8 <osThreadNew+0x48>
        name = attr->name;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	699b      	ldr	r3, [r3, #24]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d002      	beq.n	800cbc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	699b      	ldr	r3, [r3, #24]
 800cbc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d008      	beq.n	800cbde <osThreadNew+0x6e>
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	2b38      	cmp	r3, #56	; 0x38
 800cbd0:	d805      	bhi.n	800cbde <osThreadNew+0x6e>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	f003 0301 	and.w	r3, r3, #1
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d001      	beq.n	800cbe2 <osThreadNew+0x72>
        return (NULL);
 800cbde:	2300      	movs	r3, #0
 800cbe0:	e054      	b.n	800cc8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	695b      	ldr	r3, [r3, #20]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d003      	beq.n	800cbf2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	695b      	ldr	r3, [r3, #20]
 800cbee:	089b      	lsrs	r3, r3, #2
 800cbf0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00e      	beq.n	800cc18 <osThreadNew+0xa8>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	68db      	ldr	r3, [r3, #12]
 800cbfe:	2b6b      	cmp	r3, #107	; 0x6b
 800cc00:	d90a      	bls.n	800cc18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d006      	beq.n	800cc18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	695b      	ldr	r3, [r3, #20]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d002      	beq.n	800cc18 <osThreadNew+0xa8>
        mem = 1;
 800cc12:	2301      	movs	r3, #1
 800cc14:	61bb      	str	r3, [r7, #24]
 800cc16:	e010      	b.n	800cc3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	689b      	ldr	r3, [r3, #8]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d10c      	bne.n	800cc3a <osThreadNew+0xca>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d108      	bne.n	800cc3a <osThreadNew+0xca>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	691b      	ldr	r3, [r3, #16]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d104      	bne.n	800cc3a <osThreadNew+0xca>
          mem = 0;
 800cc30:	2300      	movs	r3, #0
 800cc32:	61bb      	str	r3, [r7, #24]
 800cc34:	e001      	b.n	800cc3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cc36:	2300      	movs	r3, #0
 800cc38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d110      	bne.n	800cc62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc48:	9202      	str	r2, [sp, #8]
 800cc4a:	9301      	str	r3, [sp, #4]
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	9300      	str	r3, [sp, #0]
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	6a3a      	ldr	r2, [r7, #32]
 800cc54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc56:	68f8      	ldr	r0, [r7, #12]
 800cc58:	f001 fdb6 	bl	800e7c8 <xTaskCreateStatic>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	613b      	str	r3, [r7, #16]
 800cc60:	e013      	b.n	800cc8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d110      	bne.n	800cc8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cc68:	6a3b      	ldr	r3, [r7, #32]
 800cc6a:	b29a      	uxth	r2, r3
 800cc6c:	f107 0310 	add.w	r3, r7, #16
 800cc70:	9301      	str	r3, [sp, #4]
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	9300      	str	r3, [sp, #0]
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	f001 fe01 	bl	800e882 <xTaskCreate>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d001      	beq.n	800cc8a <osThreadNew+0x11a>
            hTask = NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cc8a:	693b      	ldr	r3, [r7, #16]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3728      	adds	r7, #40	; 0x28
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc9c:	f3ef 8305 	mrs	r3, IPSR
 800cca0:	60bb      	str	r3, [r7, #8]
  return(result);
 800cca2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d003      	beq.n	800ccb0 <osDelay+0x1c>
    stat = osErrorISR;
 800cca8:	f06f 0305 	mvn.w	r3, #5
 800ccac:	60fb      	str	r3, [r7, #12]
 800ccae:	e007      	b.n	800ccc0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d002      	beq.n	800ccc0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f001 ff26 	bl	800eb0c <vTaskDelay>
    }
  }

  return (stat);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b086      	sub	sp, #24
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccd6:	f3ef 8305 	mrs	r3, IPSR
 800ccda:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccdc:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d12d      	bne.n	800cd3e <osEventFlagsNew+0x74>
    mem = -1;
 800cce2:	f04f 33ff 	mov.w	r3, #4294967295
 800cce6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d015      	beq.n	800cd1a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d006      	beq.n	800cd04 <osEventFlagsNew+0x3a>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	2b1f      	cmp	r3, #31
 800ccfc:	d902      	bls.n	800cd04 <osEventFlagsNew+0x3a>
        mem = 1;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	613b      	str	r3, [r7, #16]
 800cd02:	e00c      	b.n	800cd1e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d108      	bne.n	800cd1e <osEventFlagsNew+0x54>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d104      	bne.n	800cd1e <osEventFlagsNew+0x54>
          mem = 0;
 800cd14:	2300      	movs	r3, #0
 800cd16:	613b      	str	r3, [r7, #16]
 800cd18:	e001      	b.n	800cd1e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d106      	bne.n	800cd32 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f000 fb2b 	bl	800d384 <xEventGroupCreateStatic>
 800cd2e:	6178      	str	r0, [r7, #20]
 800cd30:	e005      	b.n	800cd3e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d102      	bne.n	800cd3e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800cd38:	f000 fb5b 	bl	800d3f2 <xEventGroupCreate>
 800cd3c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800cd3e:	697b      	ldr	r3, [r7, #20]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3718      	adds	r7, #24
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b086      	sub	sp, #24
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d004      	beq.n	800cd66 <osEventFlagsSet+0x1e>
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d003      	beq.n	800cd6e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800cd66:	f06f 0303 	mvn.w	r3, #3
 800cd6a:	617b      	str	r3, [r7, #20]
 800cd6c:	e028      	b.n	800cdc0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd6e:	f3ef 8305 	mrs	r3, IPSR
 800cd72:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd74:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d01d      	beq.n	800cdb6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800cd7e:	f107 0308 	add.w	r3, r7, #8
 800cd82:	461a      	mov	r2, r3
 800cd84:	6839      	ldr	r1, [r7, #0]
 800cd86:	6938      	ldr	r0, [r7, #16]
 800cd88:	f000 fcd6 	bl	800d738 <xEventGroupSetBitsFromISR>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d103      	bne.n	800cd9a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800cd92:	f06f 0302 	mvn.w	r3, #2
 800cd96:	617b      	str	r3, [r7, #20]
 800cd98:	e012      	b.n	800cdc0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00d      	beq.n	800cdc0 <osEventFlagsSet+0x78>
 800cda4:	4b09      	ldr	r3, [pc, #36]	; (800cdcc <osEventFlagsSet+0x84>)
 800cda6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdaa:	601a      	str	r2, [r3, #0]
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	f3bf 8f6f 	isb	sy
 800cdb4:	e004      	b.n	800cdc0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800cdb6:	6839      	ldr	r1, [r7, #0]
 800cdb8:	6938      	ldr	r0, [r7, #16]
 800cdba:	f000 fc03 	bl	800d5c4 <xEventGroupSetBits>
 800cdbe:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800cdc0:	697b      	ldr	r3, [r7, #20]
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3718      	adds	r7, #24
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	e000ed04 	.word	0xe000ed04

0800cdd0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b08c      	sub	sp, #48	; 0x30
 800cdd4:	af02      	add	r7, sp, #8
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	607a      	str	r2, [r7, #4]
 800cddc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d004      	beq.n	800cdf2 <osEventFlagsWait+0x22>
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d003      	beq.n	800cdfa <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800cdf2:	f06f 0303 	mvn.w	r3, #3
 800cdf6:	61fb      	str	r3, [r7, #28]
 800cdf8:	e04b      	b.n	800ce92 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdfa:	f3ef 8305 	mrs	r3, IPSR
 800cdfe:	617b      	str	r3, [r7, #20]
  return(result);
 800ce00:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d003      	beq.n	800ce0e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800ce06:	f06f 0305 	mvn.w	r3, #5
 800ce0a:	61fb      	str	r3, [r7, #28]
 800ce0c:	e041      	b.n	800ce92 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f003 0301 	and.w	r3, r3, #1
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d002      	beq.n	800ce1e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ce1c:	e001      	b.n	800ce22 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f003 0302 	and.w	r3, r3, #2
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d002      	beq.n	800ce32 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	623b      	str	r3, [r7, #32]
 800ce30:	e001      	b.n	800ce36 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800ce32:	2301      	movs	r3, #1
 800ce34:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3c:	6a3a      	ldr	r2, [r7, #32]
 800ce3e:	68b9      	ldr	r1, [r7, #8]
 800ce40:	69b8      	ldr	r0, [r7, #24]
 800ce42:	f000 faf1 	bl	800d428 <xEventGroupWaitBits>
 800ce46:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f003 0301 	and.w	r3, r3, #1
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d010      	beq.n	800ce74 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800ce52:	68ba      	ldr	r2, [r7, #8]
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	4013      	ands	r3, r2
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d019      	beq.n	800ce92 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d003      	beq.n	800ce6c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800ce64:	f06f 0301 	mvn.w	r3, #1
 800ce68:	61fb      	str	r3, [r7, #28]
 800ce6a:	e012      	b.n	800ce92 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800ce6c:	f06f 0302 	mvn.w	r3, #2
 800ce70:	61fb      	str	r3, [r7, #28]
 800ce72:	e00e      	b.n	800ce92 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800ce74:	68ba      	ldr	r2, [r7, #8]
 800ce76:	69fb      	ldr	r3, [r7, #28]
 800ce78:	4013      	ands	r3, r2
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d109      	bne.n	800ce92 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d003      	beq.n	800ce8c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800ce84:	f06f 0301 	mvn.w	r3, #1
 800ce88:	61fb      	str	r3, [r7, #28]
 800ce8a:	e002      	b.n	800ce92 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800ce8c:	f06f 0302 	mvn.w	r3, #2
 800ce90:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800ce92:	69fb      	ldr	r3, [r7, #28]
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3728      	adds	r7, #40	; 0x28
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b088      	sub	sp, #32
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cea4:	2300      	movs	r3, #0
 800cea6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cea8:	f3ef 8305 	mrs	r3, IPSR
 800ceac:	60bb      	str	r3, [r7, #8]
  return(result);
 800ceae:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d174      	bne.n	800cf9e <osMutexNew+0x102>
    if (attr != NULL) {
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d003      	beq.n	800cec2 <osMutexNew+0x26>
      type = attr->attr_bits;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	61bb      	str	r3, [r7, #24]
 800cec0:	e001      	b.n	800cec6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800cec2:	2300      	movs	r3, #0
 800cec4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	f003 0301 	and.w	r3, r3, #1
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d002      	beq.n	800ced6 <osMutexNew+0x3a>
      rmtx = 1U;
 800ced0:	2301      	movs	r3, #1
 800ced2:	617b      	str	r3, [r7, #20]
 800ced4:	e001      	b.n	800ceda <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ced6:	2300      	movs	r3, #0
 800ced8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	f003 0308 	and.w	r3, r3, #8
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d15c      	bne.n	800cf9e <osMutexNew+0x102>
      mem = -1;
 800cee4:	f04f 33ff 	mov.w	r3, #4294967295
 800cee8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d015      	beq.n	800cf1c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d006      	beq.n	800cf06 <osMutexNew+0x6a>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	2b4f      	cmp	r3, #79	; 0x4f
 800cefe:	d902      	bls.n	800cf06 <osMutexNew+0x6a>
          mem = 1;
 800cf00:	2301      	movs	r3, #1
 800cf02:	613b      	str	r3, [r7, #16]
 800cf04:	e00c      	b.n	800cf20 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d108      	bne.n	800cf20 <osMutexNew+0x84>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d104      	bne.n	800cf20 <osMutexNew+0x84>
            mem = 0;
 800cf16:	2300      	movs	r3, #0
 800cf18:	613b      	str	r3, [r7, #16]
 800cf1a:	e001      	b.n	800cf20 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d112      	bne.n	800cf4c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d007      	beq.n	800cf3c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	4619      	mov	r1, r3
 800cf32:	2004      	movs	r0, #4
 800cf34:	f000 fe37 	bl	800dba6 <xQueueCreateMutexStatic>
 800cf38:	61f8      	str	r0, [r7, #28]
 800cf3a:	e016      	b.n	800cf6a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	4619      	mov	r1, r3
 800cf42:	2001      	movs	r0, #1
 800cf44:	f000 fe2f 	bl	800dba6 <xQueueCreateMutexStatic>
 800cf48:	61f8      	str	r0, [r7, #28]
 800cf4a:	e00e      	b.n	800cf6a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10b      	bne.n	800cf6a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d004      	beq.n	800cf62 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800cf58:	2004      	movs	r0, #4
 800cf5a:	f000 fe0c 	bl	800db76 <xQueueCreateMutex>
 800cf5e:	61f8      	str	r0, [r7, #28]
 800cf60:	e003      	b.n	800cf6a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800cf62:	2001      	movs	r0, #1
 800cf64:	f000 fe07 	bl	800db76 <xQueueCreateMutex>
 800cf68:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00c      	beq.n	800cf8a <osMutexNew+0xee>
        if (attr != NULL) {
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d003      	beq.n	800cf7e <osMutexNew+0xe2>
          name = attr->name;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	60fb      	str	r3, [r7, #12]
 800cf7c:	e001      	b.n	800cf82 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800cf82:	68f9      	ldr	r1, [r7, #12]
 800cf84:	69f8      	ldr	r0, [r7, #28]
 800cf86:	f001 fbc1 	bl	800e70c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d006      	beq.n	800cf9e <osMutexNew+0x102>
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d003      	beq.n	800cf9e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	f043 0301 	orr.w	r3, r3, #1
 800cf9c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cf9e:	69fb      	ldr	r3, [r7, #28]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3720      	adds	r7, #32
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b086      	sub	sp, #24
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f023 0301 	bic.w	r3, r3, #1
 800cfb8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f003 0301 	and.w	r3, r3, #1
 800cfc0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfc6:	f3ef 8305 	mrs	r3, IPSR
 800cfca:	60bb      	str	r3, [r7, #8]
  return(result);
 800cfcc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d003      	beq.n	800cfda <osMutexAcquire+0x32>
    stat = osErrorISR;
 800cfd2:	f06f 0305 	mvn.w	r3, #5
 800cfd6:	617b      	str	r3, [r7, #20]
 800cfd8:	e02c      	b.n	800d034 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d103      	bne.n	800cfe8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800cfe0:	f06f 0303 	mvn.w	r3, #3
 800cfe4:	617b      	str	r3, [r7, #20]
 800cfe6:	e025      	b.n	800d034 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d011      	beq.n	800d012 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cfee:	6839      	ldr	r1, [r7, #0]
 800cff0:	6938      	ldr	r0, [r7, #16]
 800cff2:	f000 fe27 	bl	800dc44 <xQueueTakeMutexRecursive>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d01b      	beq.n	800d034 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d003      	beq.n	800d00a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800d002:	f06f 0301 	mvn.w	r3, #1
 800d006:	617b      	str	r3, [r7, #20]
 800d008:	e014      	b.n	800d034 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d00a:	f06f 0302 	mvn.w	r3, #2
 800d00e:	617b      	str	r3, [r7, #20]
 800d010:	e010      	b.n	800d034 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	6938      	ldr	r0, [r7, #16]
 800d016:	f001 f8c5 	bl	800e1a4 <xQueueSemaphoreTake>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d009      	beq.n	800d034 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d003      	beq.n	800d02e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800d026:	f06f 0301 	mvn.w	r3, #1
 800d02a:	617b      	str	r3, [r7, #20]
 800d02c:	e002      	b.n	800d034 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d02e:	f06f 0302 	mvn.w	r3, #2
 800d032:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800d034:	697b      	ldr	r3, [r7, #20]
}
 800d036:	4618      	mov	r0, r3
 800d038:	3718      	adds	r7, #24
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d03e:	b580      	push	{r7, lr}
 800d040:	b086      	sub	sp, #24
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f023 0301 	bic.w	r3, r3, #1
 800d04c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f003 0301 	and.w	r3, r3, #1
 800d054:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d056:	2300      	movs	r3, #0
 800d058:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d05a:	f3ef 8305 	mrs	r3, IPSR
 800d05e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d060:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d062:	2b00      	cmp	r3, #0
 800d064:	d003      	beq.n	800d06e <osMutexRelease+0x30>
    stat = osErrorISR;
 800d066:	f06f 0305 	mvn.w	r3, #5
 800d06a:	617b      	str	r3, [r7, #20]
 800d06c:	e01f      	b.n	800d0ae <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d103      	bne.n	800d07c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800d074:	f06f 0303 	mvn.w	r3, #3
 800d078:	617b      	str	r3, [r7, #20]
 800d07a:	e018      	b.n	800d0ae <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d009      	beq.n	800d096 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d082:	6938      	ldr	r0, [r7, #16]
 800d084:	f000 fdaa 	bl	800dbdc <xQueueGiveMutexRecursive>
 800d088:	4603      	mov	r3, r0
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d00f      	beq.n	800d0ae <osMutexRelease+0x70>
        stat = osErrorResource;
 800d08e:	f06f 0302 	mvn.w	r3, #2
 800d092:	617b      	str	r3, [r7, #20]
 800d094:	e00b      	b.n	800d0ae <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d096:	2300      	movs	r3, #0
 800d098:	2200      	movs	r2, #0
 800d09a:	2100      	movs	r1, #0
 800d09c:	6938      	ldr	r0, [r7, #16]
 800d09e:	f000 fe07 	bl	800dcb0 <xQueueGenericSend>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d002      	beq.n	800d0ae <osMutexRelease+0x70>
        stat = osErrorResource;
 800d0a8:	f06f 0302 	mvn.w	r3, #2
 800d0ac:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d0ae:	697b      	ldr	r3, [r7, #20]
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3718      	adds	r7, #24
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b08a      	sub	sp, #40	; 0x28
 800d0bc:	af02      	add	r7, sp, #8
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0c8:	f3ef 8305 	mrs	r3, IPSR
 800d0cc:	613b      	str	r3, [r7, #16]
  return(result);
 800d0ce:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d15f      	bne.n	800d194 <osMessageQueueNew+0xdc>
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d05c      	beq.n	800d194 <osMessageQueueNew+0xdc>
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d059      	beq.n	800d194 <osMessageQueueNew+0xdc>
    mem = -1;
 800d0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0e4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d029      	beq.n	800d140 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d012      	beq.n	800d11a <osMessageQueueNew+0x62>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	2b4f      	cmp	r3, #79	; 0x4f
 800d0fa:	d90e      	bls.n	800d11a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00a      	beq.n	800d11a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	695a      	ldr	r2, [r3, #20]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	68b9      	ldr	r1, [r7, #8]
 800d10c:	fb01 f303 	mul.w	r3, r1, r3
 800d110:	429a      	cmp	r2, r3
 800d112:	d302      	bcc.n	800d11a <osMessageQueueNew+0x62>
        mem = 1;
 800d114:	2301      	movs	r3, #1
 800d116:	61bb      	str	r3, [r7, #24]
 800d118:	e014      	b.n	800d144 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	689b      	ldr	r3, [r3, #8]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d110      	bne.n	800d144 <osMessageQueueNew+0x8c>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d10c      	bne.n	800d144 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d108      	bne.n	800d144 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	695b      	ldr	r3, [r3, #20]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d104      	bne.n	800d144 <osMessageQueueNew+0x8c>
          mem = 0;
 800d13a:	2300      	movs	r3, #0
 800d13c:	61bb      	str	r3, [r7, #24]
 800d13e:	e001      	b.n	800d144 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d140:	2300      	movs	r3, #0
 800d142:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d144:	69bb      	ldr	r3, [r7, #24]
 800d146:	2b01      	cmp	r3, #1
 800d148:	d10b      	bne.n	800d162 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	691a      	ldr	r2, [r3, #16]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	2100      	movs	r1, #0
 800d154:	9100      	str	r1, [sp, #0]
 800d156:	68b9      	ldr	r1, [r7, #8]
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f000 fc1d 	bl	800d998 <xQueueGenericCreateStatic>
 800d15e:	61f8      	str	r0, [r7, #28]
 800d160:	e008      	b.n	800d174 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d105      	bne.n	800d174 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d168:	2200      	movs	r2, #0
 800d16a:	68b9      	ldr	r1, [r7, #8]
 800d16c:	68f8      	ldr	r0, [r7, #12]
 800d16e:	f000 fc8b 	bl	800da88 <xQueueGenericCreate>
 800d172:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00c      	beq.n	800d194 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d003      	beq.n	800d188 <osMessageQueueNew+0xd0>
        name = attr->name;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	617b      	str	r3, [r7, #20]
 800d186:	e001      	b.n	800d18c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d188:	2300      	movs	r3, #0
 800d18a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d18c:	6979      	ldr	r1, [r7, #20]
 800d18e:	69f8      	ldr	r0, [r7, #28]
 800d190:	f001 fabc 	bl	800e70c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d194:	69fb      	ldr	r3, [r7, #28]
}
 800d196:	4618      	mov	r0, r3
 800d198:	3720      	adds	r7, #32
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
	...

0800d1a0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b088      	sub	sp, #32
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	60f8      	str	r0, [r7, #12]
 800d1a8:	60b9      	str	r1, [r7, #8]
 800d1aa:	603b      	str	r3, [r7, #0]
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1b8:	f3ef 8305 	mrs	r3, IPSR
 800d1bc:	617b      	str	r3, [r7, #20]
  return(result);
 800d1be:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d028      	beq.n	800d216 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1c4:	69bb      	ldr	r3, [r7, #24]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d005      	beq.n	800d1d6 <osMessageQueuePut+0x36>
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <osMessageQueuePut+0x36>
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d003      	beq.n	800d1de <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d1d6:	f06f 0303 	mvn.w	r3, #3
 800d1da:	61fb      	str	r3, [r7, #28]
 800d1dc:	e038      	b.n	800d250 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d1e2:	f107 0210 	add.w	r2, r7, #16
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	68b9      	ldr	r1, [r7, #8]
 800d1ea:	69b8      	ldr	r0, [r7, #24]
 800d1ec:	f000 fe5e 	bl	800deac <xQueueGenericSendFromISR>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d003      	beq.n	800d1fe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d1f6:	f06f 0302 	mvn.w	r3, #2
 800d1fa:	61fb      	str	r3, [r7, #28]
 800d1fc:	e028      	b.n	800d250 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d025      	beq.n	800d250 <osMessageQueuePut+0xb0>
 800d204:	4b15      	ldr	r3, [pc, #84]	; (800d25c <osMessageQueuePut+0xbc>)
 800d206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d20a:	601a      	str	r2, [r3, #0]
 800d20c:	f3bf 8f4f 	dsb	sy
 800d210:	f3bf 8f6f 	isb	sy
 800d214:	e01c      	b.n	800d250 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <osMessageQueuePut+0x82>
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d103      	bne.n	800d22a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d222:	f06f 0303 	mvn.w	r3, #3
 800d226:	61fb      	str	r3, [r7, #28]
 800d228:	e012      	b.n	800d250 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d22a:	2300      	movs	r3, #0
 800d22c:	683a      	ldr	r2, [r7, #0]
 800d22e:	68b9      	ldr	r1, [r7, #8]
 800d230:	69b8      	ldr	r0, [r7, #24]
 800d232:	f000 fd3d 	bl	800dcb0 <xQueueGenericSend>
 800d236:	4603      	mov	r3, r0
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d009      	beq.n	800d250 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d003      	beq.n	800d24a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d242:	f06f 0301 	mvn.w	r3, #1
 800d246:	61fb      	str	r3, [r7, #28]
 800d248:	e002      	b.n	800d250 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d24a:	f06f 0302 	mvn.w	r3, #2
 800d24e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d250:	69fb      	ldr	r3, [r7, #28]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3720      	adds	r7, #32
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	e000ed04 	.word	0xe000ed04

0800d260 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d260:	b580      	push	{r7, lr}
 800d262:	b088      	sub	sp, #32
 800d264:	af00      	add	r7, sp, #0
 800d266:	60f8      	str	r0, [r7, #12]
 800d268:	60b9      	str	r1, [r7, #8]
 800d26a:	607a      	str	r2, [r7, #4]
 800d26c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d272:	2300      	movs	r3, #0
 800d274:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d276:	f3ef 8305 	mrs	r3, IPSR
 800d27a:	617b      	str	r3, [r7, #20]
  return(result);
 800d27c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d028      	beq.n	800d2d4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d005      	beq.n	800d294 <osMessageQueueGet+0x34>
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d002      	beq.n	800d294 <osMessageQueueGet+0x34>
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d003      	beq.n	800d29c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d294:	f06f 0303 	mvn.w	r3, #3
 800d298:	61fb      	str	r3, [r7, #28]
 800d29a:	e037      	b.n	800d30c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d29c:	2300      	movs	r3, #0
 800d29e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d2a0:	f107 0310 	add.w	r3, r7, #16
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	68b9      	ldr	r1, [r7, #8]
 800d2a8:	69b8      	ldr	r0, [r7, #24]
 800d2aa:	f001 f887 	bl	800e3bc <xQueueReceiveFromISR>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d003      	beq.n	800d2bc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d2b4:	f06f 0302 	mvn.w	r3, #2
 800d2b8:	61fb      	str	r3, [r7, #28]
 800d2ba:	e027      	b.n	800d30c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d024      	beq.n	800d30c <osMessageQueueGet+0xac>
 800d2c2:	4b15      	ldr	r3, [pc, #84]	; (800d318 <osMessageQueueGet+0xb8>)
 800d2c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2c8:	601a      	str	r2, [r3, #0]
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	f3bf 8f6f 	isb	sy
 800d2d2:	e01b      	b.n	800d30c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d002      	beq.n	800d2e0 <osMessageQueueGet+0x80>
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d103      	bne.n	800d2e8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d2e0:	f06f 0303 	mvn.w	r3, #3
 800d2e4:	61fb      	str	r3, [r7, #28]
 800d2e6:	e011      	b.n	800d30c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d2e8:	683a      	ldr	r2, [r7, #0]
 800d2ea:	68b9      	ldr	r1, [r7, #8]
 800d2ec:	69b8      	ldr	r0, [r7, #24]
 800d2ee:	f000 fe79 	bl	800dfe4 <xQueueReceive>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d009      	beq.n	800d30c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d003      	beq.n	800d306 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d2fe:	f06f 0301 	mvn.w	r3, #1
 800d302:	61fb      	str	r3, [r7, #28]
 800d304:	e002      	b.n	800d30c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d306:	f06f 0302 	mvn.w	r3, #2
 800d30a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d30c:	69fb      	ldr	r3, [r7, #28]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3720      	adds	r7, #32
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	e000ed04 	.word	0xe000ed04

0800d31c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d31c:	b480      	push	{r7}
 800d31e:	b085      	sub	sp, #20
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	4a07      	ldr	r2, [pc, #28]	; (800d348 <vApplicationGetIdleTaskMemory+0x2c>)
 800d32c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	4a06      	ldr	r2, [pc, #24]	; (800d34c <vApplicationGetIdleTaskMemory+0x30>)
 800d332:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2280      	movs	r2, #128	; 0x80
 800d338:	601a      	str	r2, [r3, #0]
}
 800d33a:	bf00      	nop
 800d33c:	3714      	adds	r7, #20
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	200045a8 	.word	0x200045a8
 800d34c:	20004614 	.word	0x20004614

0800d350 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d350:	b480      	push	{r7}
 800d352:	b085      	sub	sp, #20
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	4a07      	ldr	r2, [pc, #28]	; (800d37c <vApplicationGetTimerTaskMemory+0x2c>)
 800d360:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	4a06      	ldr	r2, [pc, #24]	; (800d380 <vApplicationGetTimerTaskMemory+0x30>)
 800d366:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d36e:	601a      	str	r2, [r3, #0]
}
 800d370:	bf00      	nop
 800d372:	3714      	adds	r7, #20
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr
 800d37c:	20004814 	.word	0x20004814
 800d380:	20004880 	.word	0x20004880

0800d384 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d10a      	bne.n	800d3a8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d3a4:	bf00      	nop
 800d3a6:	e7fe      	b.n	800d3a6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800d3a8:	2320      	movs	r3, #32
 800d3aa:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	2b20      	cmp	r3, #32
 800d3b0:	d00a      	beq.n	800d3c8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800d3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b6:	f383 8811 	msr	BASEPRI, r3
 800d3ba:	f3bf 8f6f 	isb	sy
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	60fb      	str	r3, [r7, #12]
}
 800d3c4:	bf00      	nop
 800d3c6:	e7fe      	b.n	800d3c6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d00a      	beq.n	800d3e8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	3304      	adds	r3, #4
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f000 f9bf 	bl	800d760 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800d3e8:	697b      	ldr	r3, [r7, #20]
	}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3718      	adds	r7, #24
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b082      	sub	sp, #8
 800d3f6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800d3f8:	2020      	movs	r0, #32
 800d3fa:	f003 f865 	bl	80104c8 <pvPortMalloc>
 800d3fe:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00a      	beq.n	800d41c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	3304      	adds	r3, #4
 800d410:	4618      	mov	r0, r3
 800d412:	f000 f9a5 	bl	800d760 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800d41c:	687b      	ldr	r3, [r7, #4]
	}
 800d41e:	4618      	mov	r0, r3
 800d420:	3708      	adds	r7, #8
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
	...

0800d428 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b090      	sub	sp, #64	; 0x40
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
 800d434:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800d43e:	2300      	movs	r3, #0
 800d440:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d10a      	bne.n	800d45e <xEventGroupWaitBits+0x36>
	__asm volatile
 800d448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44c:	f383 8811 	msr	BASEPRI, r3
 800d450:	f3bf 8f6f 	isb	sy
 800d454:	f3bf 8f4f 	dsb	sy
 800d458:	623b      	str	r3, [r7, #32]
}
 800d45a:	bf00      	nop
 800d45c:	e7fe      	b.n	800d45c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00a      	beq.n	800d47e <xEventGroupWaitBits+0x56>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	61fb      	str	r3, [r7, #28]
}
 800d47a:	bf00      	nop
 800d47c:	e7fe      	b.n	800d47c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d10a      	bne.n	800d49a <xEventGroupWaitBits+0x72>
	__asm volatile
 800d484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d488:	f383 8811 	msr	BASEPRI, r3
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	61bb      	str	r3, [r7, #24]
}
 800d496:	bf00      	nop
 800d498:	e7fe      	b.n	800d498 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d49a:	f002 f861 	bl	800f560 <xTaskGetSchedulerState>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d102      	bne.n	800d4aa <xEventGroupWaitBits+0x82>
 800d4a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d101      	bne.n	800d4ae <xEventGroupWaitBits+0x86>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	e000      	b.n	800d4b0 <xEventGroupWaitBits+0x88>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10a      	bne.n	800d4ca <xEventGroupWaitBits+0xa2>
	__asm volatile
 800d4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	617b      	str	r3, [r7, #20]
}
 800d4c6:	bf00      	nop
 800d4c8:	e7fe      	b.n	800d4c8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800d4ca:	f001 fbb9 	bl	800ec40 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800d4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800d4d4:	683a      	ldr	r2, [r7, #0]
 800d4d6:	68b9      	ldr	r1, [r7, #8]
 800d4d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4da:	f000 f90b 	bl	800d6f4 <prvTestWaitCondition>
 800d4de:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800d4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d00e      	beq.n	800d504 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800d4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d028      	beq.n	800d546 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	43db      	mvns	r3, r3
 800d4fc:	401a      	ands	r2, r3
 800d4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d500:	601a      	str	r2, [r3, #0]
 800d502:	e020      	b.n	800d546 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800d504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d506:	2b00      	cmp	r3, #0
 800d508:	d104      	bne.n	800d514 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800d50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800d50e:	2301      	movs	r3, #1
 800d510:	633b      	str	r3, [r7, #48]	; 0x30
 800d512:	e018      	b.n	800d546 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d003      	beq.n	800d522 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800d51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d520:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d003      	beq.n	800d530 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800d528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d52a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d52e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800d530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d532:	1d18      	adds	r0, r3, #4
 800d534:	68ba      	ldr	r2, [r7, #8]
 800d536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d538:	4313      	orrs	r3, r2
 800d53a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d53c:	4619      	mov	r1, r3
 800d53e:	f001 fd77 	bl	800f030 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800d542:	2300      	movs	r3, #0
 800d544:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800d546:	f001 fb89 	bl	800ec5c <xTaskResumeAll>
 800d54a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800d54c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d031      	beq.n	800d5b6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800d552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d554:	2b00      	cmp	r3, #0
 800d556:	d107      	bne.n	800d568 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800d558:	4b19      	ldr	r3, [pc, #100]	; (800d5c0 <xEventGroupWaitBits+0x198>)
 800d55a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d55e:	601a      	str	r2, [r3, #0]
 800d560:	f3bf 8f4f 	dsb	sy
 800d564:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800d568:	f002 f970 	bl	800f84c <uxTaskResetEventItemValue>
 800d56c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800d56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d574:	2b00      	cmp	r3, #0
 800d576:	d11a      	bne.n	800d5ae <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800d578:	f002 fe84 	bl	8010284 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800d57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800d582:	683a      	ldr	r2, [r7, #0]
 800d584:	68b9      	ldr	r1, [r7, #8]
 800d586:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d588:	f000 f8b4 	bl	800d6f4 <prvTestWaitCondition>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d009      	beq.n	800d5a6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d006      	beq.n	800d5a6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	43db      	mvns	r3, r3
 800d5a0:	401a      	ands	r2, r3
 800d5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800d5aa:	f002 fe9b 	bl	80102e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800d5b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3740      	adds	r7, #64	; 0x40
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	e000ed04 	.word	0xe000ed04

0800d5c4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b08e      	sub	sp, #56	; 0x38
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d10a      	bne.n	800d5f6 <xEventGroupSetBits+0x32>
	__asm volatile
 800d5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e4:	f383 8811 	msr	BASEPRI, r3
 800d5e8:	f3bf 8f6f 	isb	sy
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	613b      	str	r3, [r7, #16]
}
 800d5f2:	bf00      	nop
 800d5f4:	e7fe      	b.n	800d5f4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d00a      	beq.n	800d616 <xEventGroupSetBits+0x52>
	__asm volatile
 800d600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d604:	f383 8811 	msr	BASEPRI, r3
 800d608:	f3bf 8f6f 	isb	sy
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	60fb      	str	r3, [r7, #12]
}
 800d612:	bf00      	nop
 800d614:	e7fe      	b.n	800d614 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800d616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d618:	3304      	adds	r3, #4
 800d61a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61e:	3308      	adds	r3, #8
 800d620:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800d622:	f001 fb0d 	bl	800ec40 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800d626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800d62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	431a      	orrs	r2, r3
 800d634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d636:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800d638:	e03c      	b.n	800d6b4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800d63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800d640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800d646:	2300      	movs	r3, #0
 800d648:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d650:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d652:	69bb      	ldr	r3, [r7, #24]
 800d654:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d658:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d660:	2b00      	cmp	r3, #0
 800d662:	d108      	bne.n	800d676 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800d664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d666:	681a      	ldr	r2, [r3, #0]
 800d668:	69bb      	ldr	r3, [r7, #24]
 800d66a:	4013      	ands	r3, r2
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d00b      	beq.n	800d688 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800d670:	2301      	movs	r3, #1
 800d672:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d674:	e008      	b.n	800d688 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800d676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	69bb      	ldr	r3, [r7, #24]
 800d67c:	4013      	ands	r3, r2
 800d67e:	69ba      	ldr	r2, [r7, #24]
 800d680:	429a      	cmp	r2, r3
 800d682:	d101      	bne.n	800d688 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800d684:	2301      	movs	r3, #1
 800d686:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800d688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d010      	beq.n	800d6b0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d694:	2b00      	cmp	r3, #0
 800d696:	d003      	beq.n	800d6a0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800d698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	4313      	orrs	r3, r2
 800d69e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800d6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d6ac:	f001 fd8c 	bl	800f1c8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800d6b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6b6:	6a3b      	ldr	r3, [r7, #32]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d1be      	bne.n	800d63a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800d6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c2:	43db      	mvns	r3, r3
 800d6c4:	401a      	ands	r2, r3
 800d6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800d6ca:	f001 fac7 	bl	800ec5c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d0:	681b      	ldr	r3, [r3, #0]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3738      	adds	r7, #56	; 0x38
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800d6da:	b580      	push	{r7, lr}
 800d6dc:	b082      	sub	sp, #8
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
 800d6e2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800d6e4:	6839      	ldr	r1, [r7, #0]
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f7ff ff6c 	bl	800d5c4 <xEventGroupSetBits>
}
 800d6ec:	bf00      	nop
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b087      	sub	sp, #28
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800d700:	2300      	movs	r3, #0
 800d702:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d107      	bne.n	800d71a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	4013      	ands	r3, r2
 800d710:	2b00      	cmp	r3, #0
 800d712:	d00a      	beq.n	800d72a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d714:	2301      	movs	r3, #1
 800d716:	617b      	str	r3, [r7, #20]
 800d718:	e007      	b.n	800d72a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800d71a:	68fa      	ldr	r2, [r7, #12]
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	4013      	ands	r3, r2
 800d720:	68ba      	ldr	r2, [r7, #8]
 800d722:	429a      	cmp	r2, r3
 800d724:	d101      	bne.n	800d72a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d726:	2301      	movs	r3, #1
 800d728:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800d72a:	697b      	ldr	r3, [r7, #20]
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	371c      	adds	r7, #28
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b086      	sub	sp, #24
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	68ba      	ldr	r2, [r7, #8]
 800d748:	68f9      	ldr	r1, [r7, #12]
 800d74a:	4804      	ldr	r0, [pc, #16]	; (800d75c <xEventGroupSetBitsFromISR+0x24>)
 800d74c:	f002 fc4c 	bl	800ffe8 <xTimerPendFunctionCallFromISR>
 800d750:	6178      	str	r0, [r7, #20]

		return xReturn;
 800d752:	697b      	ldr	r3, [r7, #20]
	}
 800d754:	4618      	mov	r0, r3
 800d756:	3718      	adds	r7, #24
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	0800d6db 	.word	0x0800d6db

0800d760 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f103 0208 	add.w	r2, r3, #8
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f04f 32ff 	mov.w	r2, #4294967295
 800d778:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f103 0208 	add.w	r2, r3, #8
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f103 0208 	add.w	r2, r3, #8
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d794:	bf00      	nop
 800d796:	370c      	adds	r7, #12
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr

0800d7a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d7ae:	bf00      	nop
 800d7b0:	370c      	adds	r7, #12
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr

0800d7ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d7ba:	b480      	push	{r7}
 800d7bc:	b085      	sub	sp, #20
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	689a      	ldr	r2, [r3, #8]
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	683a      	ldr	r2, [r7, #0]
 800d7de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	683a      	ldr	r2, [r7, #0]
 800d7e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	1c5a      	adds	r2, r3, #1
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	601a      	str	r2, [r3, #0]
}
 800d7f6:	bf00      	nop
 800d7f8:	3714      	adds	r7, #20
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr

0800d802 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d802:	b480      	push	{r7}
 800d804:	b085      	sub	sp, #20
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
 800d80a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d818:	d103      	bne.n	800d822 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	691b      	ldr	r3, [r3, #16]
 800d81e:	60fb      	str	r3, [r7, #12]
 800d820:	e00c      	b.n	800d83c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	3308      	adds	r3, #8
 800d826:	60fb      	str	r3, [r7, #12]
 800d828:	e002      	b.n	800d830 <vListInsert+0x2e>
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	60fb      	str	r3, [r7, #12]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68ba      	ldr	r2, [r7, #8]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d2f6      	bcs.n	800d82a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	685a      	ldr	r2, [r3, #4]
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	683a      	ldr	r2, [r7, #0]
 800d84a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	683a      	ldr	r2, [r7, #0]
 800d856:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	1c5a      	adds	r2, r3, #1
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	601a      	str	r2, [r3, #0]
}
 800d868:	bf00      	nop
 800d86a:	3714      	adds	r7, #20
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d874:	b480      	push	{r7}
 800d876:	b085      	sub	sp, #20
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	6892      	ldr	r2, [r2, #8]
 800d88a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	689b      	ldr	r3, [r3, #8]
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	6852      	ldr	r2, [r2, #4]
 800d894:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d103      	bne.n	800d8a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	689a      	ldr	r2, [r3, #8]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	1e5a      	subs	r2, r3, #1
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3714      	adds	r7, #20
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d10a      	bne.n	800d8f2 <xQueueGenericReset+0x2a>
	__asm volatile
 800d8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e0:	f383 8811 	msr	BASEPRI, r3
 800d8e4:	f3bf 8f6f 	isb	sy
 800d8e8:	f3bf 8f4f 	dsb	sy
 800d8ec:	60bb      	str	r3, [r7, #8]
}
 800d8ee:	bf00      	nop
 800d8f0:	e7fe      	b.n	800d8f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d8f2:	f002 fcc7 	bl	8010284 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8fe:	68f9      	ldr	r1, [r7, #12]
 800d900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d902:	fb01 f303 	mul.w	r3, r1, r3
 800d906:	441a      	add	r2, r3
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2200      	movs	r2, #0
 800d910:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d922:	3b01      	subs	r3, #1
 800d924:	68f9      	ldr	r1, [r7, #12]
 800d926:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d928:	fb01 f303 	mul.w	r3, r1, r3
 800d92c:	441a      	add	r2, r3
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	22ff      	movs	r2, #255	; 0xff
 800d936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	22ff      	movs	r2, #255	; 0xff
 800d93e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d114      	bne.n	800d972 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d01a      	beq.n	800d986 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	3310      	adds	r3, #16
 800d954:	4618      	mov	r0, r3
 800d956:	f001 fbd3 	bl	800f100 <xTaskRemoveFromEventList>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d012      	beq.n	800d986 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d960:	4b0c      	ldr	r3, [pc, #48]	; (800d994 <xQueueGenericReset+0xcc>)
 800d962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d966:	601a      	str	r2, [r3, #0]
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	e009      	b.n	800d986 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	3310      	adds	r3, #16
 800d976:	4618      	mov	r0, r3
 800d978:	f7ff fef2 	bl	800d760 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	3324      	adds	r3, #36	; 0x24
 800d980:	4618      	mov	r0, r3
 800d982:	f7ff feed 	bl	800d760 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d986:	f002 fcad 	bl	80102e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d98a:	2301      	movs	r3, #1
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3710      	adds	r7, #16
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}
 800d994:	e000ed04 	.word	0xe000ed04

0800d998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b08e      	sub	sp, #56	; 0x38
 800d99c:	af02      	add	r7, sp, #8
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	607a      	str	r2, [r7, #4]
 800d9a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d10a      	bne.n	800d9c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d9be:	bf00      	nop
 800d9c0:	e7fe      	b.n	800d9c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d10a      	bne.n	800d9de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9cc:	f383 8811 	msr	BASEPRI, r3
 800d9d0:	f3bf 8f6f 	isb	sy
 800d9d4:	f3bf 8f4f 	dsb	sy
 800d9d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d9da:	bf00      	nop
 800d9dc:	e7fe      	b.n	800d9dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d002      	beq.n	800d9ea <xQueueGenericCreateStatic+0x52>
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d001      	beq.n	800d9ee <xQueueGenericCreateStatic+0x56>
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e000      	b.n	800d9f0 <xQueueGenericCreateStatic+0x58>
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d10a      	bne.n	800da0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f8:	f383 8811 	msr	BASEPRI, r3
 800d9fc:	f3bf 8f6f 	isb	sy
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	623b      	str	r3, [r7, #32]
}
 800da06:	bf00      	nop
 800da08:	e7fe      	b.n	800da08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d102      	bne.n	800da16 <xQueueGenericCreateStatic+0x7e>
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d101      	bne.n	800da1a <xQueueGenericCreateStatic+0x82>
 800da16:	2301      	movs	r3, #1
 800da18:	e000      	b.n	800da1c <xQueueGenericCreateStatic+0x84>
 800da1a:	2300      	movs	r3, #0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d10a      	bne.n	800da36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800da20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da24:	f383 8811 	msr	BASEPRI, r3
 800da28:	f3bf 8f6f 	isb	sy
 800da2c:	f3bf 8f4f 	dsb	sy
 800da30:	61fb      	str	r3, [r7, #28]
}
 800da32:	bf00      	nop
 800da34:	e7fe      	b.n	800da34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800da36:	2350      	movs	r3, #80	; 0x50
 800da38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	2b50      	cmp	r3, #80	; 0x50
 800da3e:	d00a      	beq.n	800da56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800da40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	f3bf 8f6f 	isb	sy
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	61bb      	str	r3, [r7, #24]
}
 800da52:	bf00      	nop
 800da54:	e7fe      	b.n	800da54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800da56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800da5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00d      	beq.n	800da7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800da62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da64:	2201      	movs	r2, #1
 800da66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800da6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800da6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da70:	9300      	str	r3, [sp, #0]
 800da72:	4613      	mov	r3, r2
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	68b9      	ldr	r1, [r7, #8]
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	f000 f83f 	bl	800dafc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800da7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800da80:	4618      	mov	r0, r3
 800da82:	3730      	adds	r7, #48	; 0x30
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b08a      	sub	sp, #40	; 0x28
 800da8c:	af02      	add	r7, sp, #8
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	4613      	mov	r3, r2
 800da94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10a      	bne.n	800dab2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800da9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa0:	f383 8811 	msr	BASEPRI, r3
 800daa4:	f3bf 8f6f 	isb	sy
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	613b      	str	r3, [r7, #16]
}
 800daae:	bf00      	nop
 800dab0:	e7fe      	b.n	800dab0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	68ba      	ldr	r2, [r7, #8]
 800dab6:	fb02 f303 	mul.w	r3, r2, r3
 800daba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dabc:	69fb      	ldr	r3, [r7, #28]
 800dabe:	3350      	adds	r3, #80	; 0x50
 800dac0:	4618      	mov	r0, r3
 800dac2:	f002 fd01 	bl	80104c8 <pvPortMalloc>
 800dac6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d011      	beq.n	800daf2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	3350      	adds	r3, #80	; 0x50
 800dad6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dad8:	69bb      	ldr	r3, [r7, #24]
 800dada:	2200      	movs	r2, #0
 800dadc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dae0:	79fa      	ldrb	r2, [r7, #7]
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	9300      	str	r3, [sp, #0]
 800dae6:	4613      	mov	r3, r2
 800dae8:	697a      	ldr	r2, [r7, #20]
 800daea:	68b9      	ldr	r1, [r7, #8]
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f000 f805 	bl	800dafc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800daf2:	69bb      	ldr	r3, [r7, #24]
	}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3720      	adds	r7, #32
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	60b9      	str	r1, [r7, #8]
 800db06:	607a      	str	r2, [r7, #4]
 800db08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d103      	bne.n	800db18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	69ba      	ldr	r2, [r7, #24]
 800db14:	601a      	str	r2, [r3, #0]
 800db16:	e002      	b.n	800db1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	68fa      	ldr	r2, [r7, #12]
 800db22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800db24:	69bb      	ldr	r3, [r7, #24]
 800db26:	68ba      	ldr	r2, [r7, #8]
 800db28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db2a:	2101      	movs	r1, #1
 800db2c:	69b8      	ldr	r0, [r7, #24]
 800db2e:	f7ff fecb 	bl	800d8c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	78fa      	ldrb	r2, [r7, #3]
 800db36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800db3a:	bf00      	nop
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}

0800db42 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800db42:	b580      	push	{r7, lr}
 800db44:	b082      	sub	sp, #8
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d00e      	beq.n	800db6e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2200      	movs	r2, #0
 800db60:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800db62:	2300      	movs	r3, #0
 800db64:	2200      	movs	r2, #0
 800db66:	2100      	movs	r1, #0
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 f8a1 	bl	800dcb0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800db6e:	bf00      	nop
 800db70:	3708      	adds	r7, #8
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800db76:	b580      	push	{r7, lr}
 800db78:	b086      	sub	sp, #24
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	4603      	mov	r3, r0
 800db7e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800db80:	2301      	movs	r3, #1
 800db82:	617b      	str	r3, [r7, #20]
 800db84:	2300      	movs	r3, #0
 800db86:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800db88:	79fb      	ldrb	r3, [r7, #7]
 800db8a:	461a      	mov	r2, r3
 800db8c:	6939      	ldr	r1, [r7, #16]
 800db8e:	6978      	ldr	r0, [r7, #20]
 800db90:	f7ff ff7a 	bl	800da88 <xQueueGenericCreate>
 800db94:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f7ff ffd3 	bl	800db42 <prvInitialiseMutex>

		return xNewQueue;
 800db9c:	68fb      	ldr	r3, [r7, #12]
	}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3718      	adds	r7, #24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}

0800dba6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b088      	sub	sp, #32
 800dbaa:	af02      	add	r7, sp, #8
 800dbac:	4603      	mov	r3, r0
 800dbae:	6039      	str	r1, [r7, #0]
 800dbb0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	617b      	str	r3, [r7, #20]
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dbba:	79fb      	ldrb	r3, [r7, #7]
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	6939      	ldr	r1, [r7, #16]
 800dbc4:	6978      	ldr	r0, [r7, #20]
 800dbc6:	f7ff fee7 	bl	800d998 <xQueueGenericCreateStatic>
 800dbca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f7ff ffb8 	bl	800db42 <prvInitialiseMutex>

		return xNewQueue;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
	}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3718      	adds	r7, #24
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800dbdc:	b590      	push	{r4, r7, lr}
 800dbde:	b087      	sub	sp, #28
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d10a      	bne.n	800dc04 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800dbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf2:	f383 8811 	msr	BASEPRI, r3
 800dbf6:	f3bf 8f6f 	isb	sy
 800dbfa:	f3bf 8f4f 	dsb	sy
 800dbfe:	60fb      	str	r3, [r7, #12]
}
 800dc00:	bf00      	nop
 800dc02:	e7fe      	b.n	800dc02 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	689c      	ldr	r4, [r3, #8]
 800dc08:	f001 fc9a 	bl	800f540 <xTaskGetCurrentTaskHandle>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	429c      	cmp	r4, r3
 800dc10:	d111      	bne.n	800dc36 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	1e5a      	subs	r2, r3, #1
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	68db      	ldr	r3, [r3, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d105      	bne.n	800dc30 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800dc24:	2300      	movs	r3, #0
 800dc26:	2200      	movs	r2, #0
 800dc28:	2100      	movs	r1, #0
 800dc2a:	6938      	ldr	r0, [r7, #16]
 800dc2c:	f000 f840 	bl	800dcb0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800dc30:	2301      	movs	r3, #1
 800dc32:	617b      	str	r3, [r7, #20]
 800dc34:	e001      	b.n	800dc3a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800dc36:	2300      	movs	r3, #0
 800dc38:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800dc3a:	697b      	ldr	r3, [r7, #20]
	}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	371c      	adds	r7, #28
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd90      	pop	{r4, r7, pc}

0800dc44 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800dc44:	b590      	push	{r4, r7, lr}
 800dc46:	b087      	sub	sp, #28
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d10a      	bne.n	800dc6e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800dc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5c:	f383 8811 	msr	BASEPRI, r3
 800dc60:	f3bf 8f6f 	isb	sy
 800dc64:	f3bf 8f4f 	dsb	sy
 800dc68:	60fb      	str	r3, [r7, #12]
}
 800dc6a:	bf00      	nop
 800dc6c:	e7fe      	b.n	800dc6c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	689c      	ldr	r4, [r3, #8]
 800dc72:	f001 fc65 	bl	800f540 <xTaskGetCurrentTaskHandle>
 800dc76:	4603      	mov	r3, r0
 800dc78:	429c      	cmp	r4, r3
 800dc7a:	d107      	bne.n	800dc8c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	68db      	ldr	r3, [r3, #12]
 800dc80:	1c5a      	adds	r2, r3, #1
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800dc86:	2301      	movs	r3, #1
 800dc88:	617b      	str	r3, [r7, #20]
 800dc8a:	e00c      	b.n	800dca6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800dc8c:	6839      	ldr	r1, [r7, #0]
 800dc8e:	6938      	ldr	r0, [r7, #16]
 800dc90:	f000 fa88 	bl	800e1a4 <xQueueSemaphoreTake>
 800dc94:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d004      	beq.n	800dca6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	68db      	ldr	r3, [r3, #12]
 800dca0:	1c5a      	adds	r2, r3, #1
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800dca6:	697b      	ldr	r3, [r7, #20]
	}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	371c      	adds	r7, #28
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd90      	pop	{r4, r7, pc}

0800dcb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b08e      	sub	sp, #56	; 0x38
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	60f8      	str	r0, [r7, #12]
 800dcb8:	60b9      	str	r1, [r7, #8]
 800dcba:	607a      	str	r2, [r7, #4]
 800dcbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d10a      	bne.n	800dce2 <xQueueGenericSend+0x32>
	__asm volatile
 800dccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd0:	f383 8811 	msr	BASEPRI, r3
 800dcd4:	f3bf 8f6f 	isb	sy
 800dcd8:	f3bf 8f4f 	dsb	sy
 800dcdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dcde:	bf00      	nop
 800dce0:	e7fe      	b.n	800dce0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d103      	bne.n	800dcf0 <xQueueGenericSend+0x40>
 800dce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d101      	bne.n	800dcf4 <xQueueGenericSend+0x44>
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e000      	b.n	800dcf6 <xQueueGenericSend+0x46>
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10a      	bne.n	800dd10 <xQueueGenericSend+0x60>
	__asm volatile
 800dcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfe:	f383 8811 	msr	BASEPRI, r3
 800dd02:	f3bf 8f6f 	isb	sy
 800dd06:	f3bf 8f4f 	dsb	sy
 800dd0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dd0c:	bf00      	nop
 800dd0e:	e7fe      	b.n	800dd0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	2b02      	cmp	r3, #2
 800dd14:	d103      	bne.n	800dd1e <xQueueGenericSend+0x6e>
 800dd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d101      	bne.n	800dd22 <xQueueGenericSend+0x72>
 800dd1e:	2301      	movs	r3, #1
 800dd20:	e000      	b.n	800dd24 <xQueueGenericSend+0x74>
 800dd22:	2300      	movs	r3, #0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d10a      	bne.n	800dd3e <xQueueGenericSend+0x8e>
	__asm volatile
 800dd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2c:	f383 8811 	msr	BASEPRI, r3
 800dd30:	f3bf 8f6f 	isb	sy
 800dd34:	f3bf 8f4f 	dsb	sy
 800dd38:	623b      	str	r3, [r7, #32]
}
 800dd3a:	bf00      	nop
 800dd3c:	e7fe      	b.n	800dd3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd3e:	f001 fc0f 	bl	800f560 <xTaskGetSchedulerState>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d102      	bne.n	800dd4e <xQueueGenericSend+0x9e>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d101      	bne.n	800dd52 <xQueueGenericSend+0xa2>
 800dd4e:	2301      	movs	r3, #1
 800dd50:	e000      	b.n	800dd54 <xQueueGenericSend+0xa4>
 800dd52:	2300      	movs	r3, #0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d10a      	bne.n	800dd6e <xQueueGenericSend+0xbe>
	__asm volatile
 800dd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5c:	f383 8811 	msr	BASEPRI, r3
 800dd60:	f3bf 8f6f 	isb	sy
 800dd64:	f3bf 8f4f 	dsb	sy
 800dd68:	61fb      	str	r3, [r7, #28]
}
 800dd6a:	bf00      	nop
 800dd6c:	e7fe      	b.n	800dd6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd6e:	f002 fa89 	bl	8010284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d302      	bcc.n	800dd84 <xQueueGenericSend+0xd4>
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	2b02      	cmp	r3, #2
 800dd82:	d129      	bne.n	800ddd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd84:	683a      	ldr	r2, [r7, #0]
 800dd86:	68b9      	ldr	r1, [r7, #8]
 800dd88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd8a:	f000 fbaf 	bl	800e4ec <prvCopyDataToQueue>
 800dd8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d010      	beq.n	800ddba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9a:	3324      	adds	r3, #36	; 0x24
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f001 f9af 	bl	800f100 <xTaskRemoveFromEventList>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d013      	beq.n	800ddd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dda8:	4b3f      	ldr	r3, [pc, #252]	; (800dea8 <xQueueGenericSend+0x1f8>)
 800ddaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddae:	601a      	str	r2, [r3, #0]
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	f3bf 8f6f 	isb	sy
 800ddb8:	e00a      	b.n	800ddd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ddba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d007      	beq.n	800ddd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ddc0:	4b39      	ldr	r3, [pc, #228]	; (800dea8 <xQueueGenericSend+0x1f8>)
 800ddc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddc6:	601a      	str	r2, [r3, #0]
 800ddc8:	f3bf 8f4f 	dsb	sy
 800ddcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ddd0:	f002 fa88 	bl	80102e4 <vPortExitCritical>
				return pdPASS;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	e063      	b.n	800dea0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d103      	bne.n	800dde6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ddde:	f002 fa81 	bl	80102e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dde2:	2300      	movs	r3, #0
 800dde4:	e05c      	b.n	800dea0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dde6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d106      	bne.n	800ddfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ddec:	f107 0314 	add.w	r3, r7, #20
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f001 fa4b 	bl	800f28c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ddfa:	f002 fa73 	bl	80102e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ddfe:	f000 ff1f 	bl	800ec40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de02:	f002 fa3f 	bl	8010284 <vPortEnterCritical>
 800de06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de0c:	b25b      	sxtb	r3, r3
 800de0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de12:	d103      	bne.n	800de1c <xQueueGenericSend+0x16c>
 800de14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de16:	2200      	movs	r2, #0
 800de18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de22:	b25b      	sxtb	r3, r3
 800de24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de28:	d103      	bne.n	800de32 <xQueueGenericSend+0x182>
 800de2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2c:	2200      	movs	r2, #0
 800de2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de32:	f002 fa57 	bl	80102e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de36:	1d3a      	adds	r2, r7, #4
 800de38:	f107 0314 	add.w	r3, r7, #20
 800de3c:	4611      	mov	r1, r2
 800de3e:	4618      	mov	r0, r3
 800de40:	f001 fa3a 	bl	800f2b8 <xTaskCheckForTimeOut>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d124      	bne.n	800de94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800de4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de4c:	f000 fc46 	bl	800e6dc <prvIsQueueFull>
 800de50:	4603      	mov	r3, r0
 800de52:	2b00      	cmp	r3, #0
 800de54:	d018      	beq.n	800de88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800de56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de58:	3310      	adds	r3, #16
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	4611      	mov	r1, r2
 800de5e:	4618      	mov	r0, r3
 800de60:	f001 f8c2 	bl	800efe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800de64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de66:	f000 fbd1 	bl	800e60c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800de6a:	f000 fef7 	bl	800ec5c <xTaskResumeAll>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	f47f af7c 	bne.w	800dd6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800de76:	4b0c      	ldr	r3, [pc, #48]	; (800dea8 <xQueueGenericSend+0x1f8>)
 800de78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de7c:	601a      	str	r2, [r3, #0]
 800de7e:	f3bf 8f4f 	dsb	sy
 800de82:	f3bf 8f6f 	isb	sy
 800de86:	e772      	b.n	800dd6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800de88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de8a:	f000 fbbf 	bl	800e60c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de8e:	f000 fee5 	bl	800ec5c <xTaskResumeAll>
 800de92:	e76c      	b.n	800dd6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800de94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de96:	f000 fbb9 	bl	800e60c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de9a:	f000 fedf 	bl	800ec5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800de9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3738      	adds	r7, #56	; 0x38
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	e000ed04 	.word	0xe000ed04

0800deac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b090      	sub	sp, #64	; 0x40
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	607a      	str	r2, [r7, #4]
 800deb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800debe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10a      	bne.n	800deda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800dec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ded6:	bf00      	nop
 800ded8:	e7fe      	b.n	800ded8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d103      	bne.n	800dee8 <xQueueGenericSendFromISR+0x3c>
 800dee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d101      	bne.n	800deec <xQueueGenericSendFromISR+0x40>
 800dee8:	2301      	movs	r3, #1
 800deea:	e000      	b.n	800deee <xQueueGenericSendFromISR+0x42>
 800deec:	2300      	movs	r3, #0
 800deee:	2b00      	cmp	r3, #0
 800def0:	d10a      	bne.n	800df08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800def2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def6:	f383 8811 	msr	BASEPRI, r3
 800defa:	f3bf 8f6f 	isb	sy
 800defe:	f3bf 8f4f 	dsb	sy
 800df02:	627b      	str	r3, [r7, #36]	; 0x24
}
 800df04:	bf00      	nop
 800df06:	e7fe      	b.n	800df06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	2b02      	cmp	r3, #2
 800df0c:	d103      	bne.n	800df16 <xQueueGenericSendFromISR+0x6a>
 800df0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df12:	2b01      	cmp	r3, #1
 800df14:	d101      	bne.n	800df1a <xQueueGenericSendFromISR+0x6e>
 800df16:	2301      	movs	r3, #1
 800df18:	e000      	b.n	800df1c <xQueueGenericSendFromISR+0x70>
 800df1a:	2300      	movs	r3, #0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d10a      	bne.n	800df36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800df20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df24:	f383 8811 	msr	BASEPRI, r3
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	623b      	str	r3, [r7, #32]
}
 800df32:	bf00      	nop
 800df34:	e7fe      	b.n	800df34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df36:	f002 fa87 	bl	8010448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800df3a:	f3ef 8211 	mrs	r2, BASEPRI
 800df3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df42:	f383 8811 	msr	BASEPRI, r3
 800df46:	f3bf 8f6f 	isb	sy
 800df4a:	f3bf 8f4f 	dsb	sy
 800df4e:	61fa      	str	r2, [r7, #28]
 800df50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800df52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df5e:	429a      	cmp	r2, r3
 800df60:	d302      	bcc.n	800df68 <xQueueGenericSendFromISR+0xbc>
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	2b02      	cmp	r3, #2
 800df66:	d12f      	bne.n	800dfc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800df68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df78:	683a      	ldr	r2, [r7, #0]
 800df7a:	68b9      	ldr	r1, [r7, #8]
 800df7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df7e:	f000 fab5 	bl	800e4ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800df82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800df86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df8a:	d112      	bne.n	800dfb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df90:	2b00      	cmp	r3, #0
 800df92:	d016      	beq.n	800dfc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df96:	3324      	adds	r3, #36	; 0x24
 800df98:	4618      	mov	r0, r3
 800df9a:	f001 f8b1 	bl	800f100 <xTaskRemoveFromEventList>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d00e      	beq.n	800dfc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d00b      	beq.n	800dfc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2201      	movs	r2, #1
 800dfae:	601a      	str	r2, [r3, #0]
 800dfb0:	e007      	b.n	800dfc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dfb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	b25a      	sxtb	r2, r3
 800dfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800dfc6:	e001      	b.n	800dfcc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dfd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dfd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3740      	adds	r7, #64	; 0x40
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
	...

0800dfe4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b08c      	sub	sp, #48	; 0x30
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dff0:	2300      	movs	r3, #0
 800dff2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d10a      	bne.n	800e014 <xQueueReceive+0x30>
	__asm volatile
 800dffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e002:	f383 8811 	msr	BASEPRI, r3
 800e006:	f3bf 8f6f 	isb	sy
 800e00a:	f3bf 8f4f 	dsb	sy
 800e00e:	623b      	str	r3, [r7, #32]
}
 800e010:	bf00      	nop
 800e012:	e7fe      	b.n	800e012 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d103      	bne.n	800e022 <xQueueReceive+0x3e>
 800e01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d101      	bne.n	800e026 <xQueueReceive+0x42>
 800e022:	2301      	movs	r3, #1
 800e024:	e000      	b.n	800e028 <xQueueReceive+0x44>
 800e026:	2300      	movs	r3, #0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d10a      	bne.n	800e042 <xQueueReceive+0x5e>
	__asm volatile
 800e02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e030:	f383 8811 	msr	BASEPRI, r3
 800e034:	f3bf 8f6f 	isb	sy
 800e038:	f3bf 8f4f 	dsb	sy
 800e03c:	61fb      	str	r3, [r7, #28]
}
 800e03e:	bf00      	nop
 800e040:	e7fe      	b.n	800e040 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e042:	f001 fa8d 	bl	800f560 <xTaskGetSchedulerState>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d102      	bne.n	800e052 <xQueueReceive+0x6e>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d101      	bne.n	800e056 <xQueueReceive+0x72>
 800e052:	2301      	movs	r3, #1
 800e054:	e000      	b.n	800e058 <xQueueReceive+0x74>
 800e056:	2300      	movs	r3, #0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d10a      	bne.n	800e072 <xQueueReceive+0x8e>
	__asm volatile
 800e05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e060:	f383 8811 	msr	BASEPRI, r3
 800e064:	f3bf 8f6f 	isb	sy
 800e068:	f3bf 8f4f 	dsb	sy
 800e06c:	61bb      	str	r3, [r7, #24]
}
 800e06e:	bf00      	nop
 800e070:	e7fe      	b.n	800e070 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e072:	f002 f907 	bl	8010284 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e07a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d01f      	beq.n	800e0c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e082:	68b9      	ldr	r1, [r7, #8]
 800e084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e086:	f000 fa9b 	bl	800e5c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08c:	1e5a      	subs	r2, r3, #1
 800e08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e090:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e094:	691b      	ldr	r3, [r3, #16]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d00f      	beq.n	800e0ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09c:	3310      	adds	r3, #16
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f001 f82e 	bl	800f100 <xTaskRemoveFromEventList>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d007      	beq.n	800e0ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e0aa:	4b3d      	ldr	r3, [pc, #244]	; (800e1a0 <xQueueReceive+0x1bc>)
 800e0ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0b0:	601a      	str	r2, [r3, #0]
 800e0b2:	f3bf 8f4f 	dsb	sy
 800e0b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e0ba:	f002 f913 	bl	80102e4 <vPortExitCritical>
				return pdPASS;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e069      	b.n	800e196 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d103      	bne.n	800e0d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e0c8:	f002 f90c 	bl	80102e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	e062      	b.n	800e196 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d106      	bne.n	800e0e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e0d6:	f107 0310 	add.w	r3, r7, #16
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f001 f8d6 	bl	800f28c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e0e4:	f002 f8fe 	bl	80102e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e0e8:	f000 fdaa 	bl	800ec40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e0ec:	f002 f8ca 	bl	8010284 <vPortEnterCritical>
 800e0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0f6:	b25b      	sxtb	r3, r3
 800e0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0fc:	d103      	bne.n	800e106 <xQueueReceive+0x122>
 800e0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e100:	2200      	movs	r2, #0
 800e102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e10c:	b25b      	sxtb	r3, r3
 800e10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e112:	d103      	bne.n	800e11c <xQueueReceive+0x138>
 800e114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e116:	2200      	movs	r2, #0
 800e118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e11c:	f002 f8e2 	bl	80102e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e120:	1d3a      	adds	r2, r7, #4
 800e122:	f107 0310 	add.w	r3, r7, #16
 800e126:	4611      	mov	r1, r2
 800e128:	4618      	mov	r0, r3
 800e12a:	f001 f8c5 	bl	800f2b8 <xTaskCheckForTimeOut>
 800e12e:	4603      	mov	r3, r0
 800e130:	2b00      	cmp	r3, #0
 800e132:	d123      	bne.n	800e17c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e136:	f000 fabb 	bl	800e6b0 <prvIsQueueEmpty>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d017      	beq.n	800e170 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e142:	3324      	adds	r3, #36	; 0x24
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	4611      	mov	r1, r2
 800e148:	4618      	mov	r0, r3
 800e14a:	f000 ff4d 	bl	800efe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e14e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e150:	f000 fa5c 	bl	800e60c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e154:	f000 fd82 	bl	800ec5c <xTaskResumeAll>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d189      	bne.n	800e072 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e15e:	4b10      	ldr	r3, [pc, #64]	; (800e1a0 <xQueueReceive+0x1bc>)
 800e160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e164:	601a      	str	r2, [r3, #0]
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	e780      	b.n	800e072 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e172:	f000 fa4b 	bl	800e60c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e176:	f000 fd71 	bl	800ec5c <xTaskResumeAll>
 800e17a:	e77a      	b.n	800e072 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e17c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e17e:	f000 fa45 	bl	800e60c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e182:	f000 fd6b 	bl	800ec5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e188:	f000 fa92 	bl	800e6b0 <prvIsQueueEmpty>
 800e18c:	4603      	mov	r3, r0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	f43f af6f 	beq.w	800e072 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e194:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e196:	4618      	mov	r0, r3
 800e198:	3730      	adds	r7, #48	; 0x30
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	e000ed04 	.word	0xe000ed04

0800e1a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b08e      	sub	sp, #56	; 0x38
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d10a      	bne.n	800e1d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c4:	f383 8811 	msr	BASEPRI, r3
 800e1c8:	f3bf 8f6f 	isb	sy
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	623b      	str	r3, [r7, #32]
}
 800e1d2:	bf00      	nop
 800e1d4:	e7fe      	b.n	800e1d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00a      	beq.n	800e1f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e2:	f383 8811 	msr	BASEPRI, r3
 800e1e6:	f3bf 8f6f 	isb	sy
 800e1ea:	f3bf 8f4f 	dsb	sy
 800e1ee:	61fb      	str	r3, [r7, #28]
}
 800e1f0:	bf00      	nop
 800e1f2:	e7fe      	b.n	800e1f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e1f4:	f001 f9b4 	bl	800f560 <xTaskGetSchedulerState>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d102      	bne.n	800e204 <xQueueSemaphoreTake+0x60>
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d101      	bne.n	800e208 <xQueueSemaphoreTake+0x64>
 800e204:	2301      	movs	r3, #1
 800e206:	e000      	b.n	800e20a <xQueueSemaphoreTake+0x66>
 800e208:	2300      	movs	r3, #0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d10a      	bne.n	800e224 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	61bb      	str	r3, [r7, #24]
}
 800e220:	bf00      	nop
 800e222:	e7fe      	b.n	800e222 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e224:	f002 f82e 	bl	8010284 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e22c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e230:	2b00      	cmp	r3, #0
 800e232:	d024      	beq.n	800e27e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e236:	1e5a      	subs	r2, r3, #1
 800e238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d104      	bne.n	800e24e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e244:	f001 fb1a 	bl	800f87c <pvTaskIncrementMutexHeldCount>
 800e248:	4602      	mov	r2, r0
 800e24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e250:	691b      	ldr	r3, [r3, #16]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d00f      	beq.n	800e276 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e258:	3310      	adds	r3, #16
 800e25a:	4618      	mov	r0, r3
 800e25c:	f000 ff50 	bl	800f100 <xTaskRemoveFromEventList>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d007      	beq.n	800e276 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e266:	4b54      	ldr	r3, [pc, #336]	; (800e3b8 <xQueueSemaphoreTake+0x214>)
 800e268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e26c:	601a      	str	r2, [r3, #0]
 800e26e:	f3bf 8f4f 	dsb	sy
 800e272:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e276:	f002 f835 	bl	80102e4 <vPortExitCritical>
				return pdPASS;
 800e27a:	2301      	movs	r3, #1
 800e27c:	e097      	b.n	800e3ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d111      	bne.n	800e2a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00a      	beq.n	800e2a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	617b      	str	r3, [r7, #20]
}
 800e29c:	bf00      	nop
 800e29e:	e7fe      	b.n	800e29e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e2a0:	f002 f820 	bl	80102e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	e082      	b.n	800e3ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d106      	bne.n	800e2bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e2ae:	f107 030c 	add.w	r3, r7, #12
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f000 ffea 	bl	800f28c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e2bc:	f002 f812 	bl	80102e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e2c0:	f000 fcbe 	bl	800ec40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2c4:	f001 ffde 	bl	8010284 <vPortEnterCritical>
 800e2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2ce:	b25b      	sxtb	r3, r3
 800e2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d4:	d103      	bne.n	800e2de <xQueueSemaphoreTake+0x13a>
 800e2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2e4:	b25b      	sxtb	r3, r3
 800e2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ea:	d103      	bne.n	800e2f4 <xQueueSemaphoreTake+0x150>
 800e2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e2f4:	f001 fff6 	bl	80102e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e2f8:	463a      	mov	r2, r7
 800e2fa:	f107 030c 	add.w	r3, r7, #12
 800e2fe:	4611      	mov	r1, r2
 800e300:	4618      	mov	r0, r3
 800e302:	f000 ffd9 	bl	800f2b8 <xTaskCheckForTimeOut>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d132      	bne.n	800e372 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e30c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e30e:	f000 f9cf 	bl	800e6b0 <prvIsQueueEmpty>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d026      	beq.n	800e366 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d109      	bne.n	800e334 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e320:	f001 ffb0 	bl	8010284 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e326:	689b      	ldr	r3, [r3, #8]
 800e328:	4618      	mov	r0, r3
 800e32a:	f001 f937 	bl	800f59c <xTaskPriorityInherit>
 800e32e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e330:	f001 ffd8 	bl	80102e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e336:	3324      	adds	r3, #36	; 0x24
 800e338:	683a      	ldr	r2, [r7, #0]
 800e33a:	4611      	mov	r1, r2
 800e33c:	4618      	mov	r0, r3
 800e33e:	f000 fe53 	bl	800efe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e342:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e344:	f000 f962 	bl	800e60c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e348:	f000 fc88 	bl	800ec5c <xTaskResumeAll>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	f47f af68 	bne.w	800e224 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e354:	4b18      	ldr	r3, [pc, #96]	; (800e3b8 <xQueueSemaphoreTake+0x214>)
 800e356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e35a:	601a      	str	r2, [r3, #0]
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	f3bf 8f6f 	isb	sy
 800e364:	e75e      	b.n	800e224 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e368:	f000 f950 	bl	800e60c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e36c:	f000 fc76 	bl	800ec5c <xTaskResumeAll>
 800e370:	e758      	b.n	800e224 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e374:	f000 f94a 	bl	800e60c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e378:	f000 fc70 	bl	800ec5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e37c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e37e:	f000 f997 	bl	800e6b0 <prvIsQueueEmpty>
 800e382:	4603      	mov	r3, r0
 800e384:	2b00      	cmp	r3, #0
 800e386:	f43f af4d 	beq.w	800e224 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d00d      	beq.n	800e3ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e390:	f001 ff78 	bl	8010284 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e396:	f000 f891 	bl	800e4bc <prvGetDisinheritPriorityAfterTimeout>
 800e39a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39e:	689b      	ldr	r3, [r3, #8]
 800e3a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f001 f9d0 	bl	800f748 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e3a8:	f001 ff9c 	bl	80102e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e3ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3738      	adds	r7, #56	; 0x38
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	e000ed04 	.word	0xe000ed04

0800e3bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b08e      	sub	sp, #56	; 0x38
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	60f8      	str	r0, [r7, #12]
 800e3c4:	60b9      	str	r1, [r7, #8]
 800e3c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d10a      	bne.n	800e3e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d6:	f383 8811 	msr	BASEPRI, r3
 800e3da:	f3bf 8f6f 	isb	sy
 800e3de:	f3bf 8f4f 	dsb	sy
 800e3e2:	623b      	str	r3, [r7, #32]
}
 800e3e4:	bf00      	nop
 800e3e6:	e7fe      	b.n	800e3e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d103      	bne.n	800e3f6 <xQueueReceiveFromISR+0x3a>
 800e3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d101      	bne.n	800e3fa <xQueueReceiveFromISR+0x3e>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e000      	b.n	800e3fc <xQueueReceiveFromISR+0x40>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d10a      	bne.n	800e416 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e404:	f383 8811 	msr	BASEPRI, r3
 800e408:	f3bf 8f6f 	isb	sy
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	61fb      	str	r3, [r7, #28]
}
 800e412:	bf00      	nop
 800e414:	e7fe      	b.n	800e414 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e416:	f002 f817 	bl	8010448 <vPortValidateInterruptPriority>
	__asm volatile
 800e41a:	f3ef 8211 	mrs	r2, BASEPRI
 800e41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e422:	f383 8811 	msr	BASEPRI, r3
 800e426:	f3bf 8f6f 	isb	sy
 800e42a:	f3bf 8f4f 	dsb	sy
 800e42e:	61ba      	str	r2, [r7, #24]
 800e430:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e432:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e434:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e43a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d02f      	beq.n	800e4a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e44c:	68b9      	ldr	r1, [r7, #8]
 800e44e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e450:	f000 f8b6 	bl	800e5c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e456:	1e5a      	subs	r2, r3, #1
 800e458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e45a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e45c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e464:	d112      	bne.n	800e48c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e468:	691b      	ldr	r3, [r3, #16]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d016      	beq.n	800e49c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e470:	3310      	adds	r3, #16
 800e472:	4618      	mov	r0, r3
 800e474:	f000 fe44 	bl	800f100 <xTaskRemoveFromEventList>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d00e      	beq.n	800e49c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d00b      	beq.n	800e49c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2201      	movs	r2, #1
 800e488:	601a      	str	r2, [r3, #0]
 800e48a:	e007      	b.n	800e49c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e490:	3301      	adds	r3, #1
 800e492:	b2db      	uxtb	r3, r3
 800e494:	b25a      	sxtb	r2, r3
 800e496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e49c:	2301      	movs	r3, #1
 800e49e:	637b      	str	r3, [r7, #52]	; 0x34
 800e4a0:	e001      	b.n	800e4a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	637b      	str	r3, [r7, #52]	; 0x34
 800e4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	f383 8811 	msr	BASEPRI, r3
}
 800e4b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3738      	adds	r7, #56	; 0x38
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e4bc:	b480      	push	{r7}
 800e4be:	b085      	sub	sp, #20
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d006      	beq.n	800e4da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e4d6:	60fb      	str	r3, [r7, #12]
 800e4d8:	e001      	b.n	800e4de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e4de:	68fb      	ldr	r3, [r7, #12]
	}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3714      	adds	r7, #20
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b086      	sub	sp, #24
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e500:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e506:	2b00      	cmp	r3, #0
 800e508:	d10d      	bne.n	800e526 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d14d      	bne.n	800e5ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	689b      	ldr	r3, [r3, #8]
 800e516:	4618      	mov	r0, r3
 800e518:	f001 f8a8 	bl	800f66c <xTaskPriorityDisinherit>
 800e51c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2200      	movs	r2, #0
 800e522:	609a      	str	r2, [r3, #8]
 800e524:	e043      	b.n	800e5ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d119      	bne.n	800e560 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6858      	ldr	r0, [r3, #4]
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e534:	461a      	mov	r2, r3
 800e536:	68b9      	ldr	r1, [r7, #8]
 800e538:	f002 f9da 	bl	80108f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	685a      	ldr	r2, [r3, #4]
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e544:	441a      	add	r2, r3
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	685a      	ldr	r2, [r3, #4]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	689b      	ldr	r3, [r3, #8]
 800e552:	429a      	cmp	r2, r3
 800e554:	d32b      	bcc.n	800e5ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	605a      	str	r2, [r3, #4]
 800e55e:	e026      	b.n	800e5ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	68d8      	ldr	r0, [r3, #12]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e568:	461a      	mov	r2, r3
 800e56a:	68b9      	ldr	r1, [r7, #8]
 800e56c:	f002 f9c0 	bl	80108f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	68da      	ldr	r2, [r3, #12]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e578:	425b      	negs	r3, r3
 800e57a:	441a      	add	r2, r3
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	68da      	ldr	r2, [r3, #12]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d207      	bcs.n	800e59c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	689a      	ldr	r2, [r3, #8]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e594:	425b      	negs	r3, r3
 800e596:	441a      	add	r2, r3
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2b02      	cmp	r3, #2
 800e5a0:	d105      	bne.n	800e5ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d002      	beq.n	800e5ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	3b01      	subs	r3, #1
 800e5ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	1c5a      	adds	r2, r3, #1
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e5b6:	697b      	ldr	r3, [r7, #20]
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3718      	adds	r7, #24
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d018      	beq.n	800e604 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	68da      	ldr	r2, [r3, #12]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5da:	441a      	add	r2, r3
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	68da      	ldr	r2, [r3, #12]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	689b      	ldr	r3, [r3, #8]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d303      	bcc.n	800e5f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	68d9      	ldr	r1, [r3, #12]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	6838      	ldr	r0, [r7, #0]
 800e600:	f002 f976 	bl	80108f0 <memcpy>
	}
}
 800e604:	bf00      	nop
 800e606:	3708      	adds	r7, #8
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e614:	f001 fe36 	bl	8010284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e61e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e620:	e011      	b.n	800e646 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e626:	2b00      	cmp	r3, #0
 800e628:	d012      	beq.n	800e650 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	3324      	adds	r3, #36	; 0x24
 800e62e:	4618      	mov	r0, r3
 800e630:	f000 fd66 	bl	800f100 <xTaskRemoveFromEventList>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d001      	beq.n	800e63e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e63a:	f000 fe9f 	bl	800f37c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e63e:	7bfb      	ldrb	r3, [r7, #15]
 800e640:	3b01      	subs	r3, #1
 800e642:	b2db      	uxtb	r3, r3
 800e644:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	dce9      	bgt.n	800e622 <prvUnlockQueue+0x16>
 800e64e:	e000      	b.n	800e652 <prvUnlockQueue+0x46>
					break;
 800e650:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	22ff      	movs	r2, #255	; 0xff
 800e656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e65a:	f001 fe43 	bl	80102e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e65e:	f001 fe11 	bl	8010284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e668:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e66a:	e011      	b.n	800e690 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	691b      	ldr	r3, [r3, #16]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d012      	beq.n	800e69a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	3310      	adds	r3, #16
 800e678:	4618      	mov	r0, r3
 800e67a:	f000 fd41 	bl	800f100 <xTaskRemoveFromEventList>
 800e67e:	4603      	mov	r3, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d001      	beq.n	800e688 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e684:	f000 fe7a 	bl	800f37c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e688:	7bbb      	ldrb	r3, [r7, #14]
 800e68a:	3b01      	subs	r3, #1
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e690:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e694:	2b00      	cmp	r3, #0
 800e696:	dce9      	bgt.n	800e66c <prvUnlockQueue+0x60>
 800e698:	e000      	b.n	800e69c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e69a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	22ff      	movs	r2, #255	; 0xff
 800e6a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e6a4:	f001 fe1e 	bl	80102e4 <vPortExitCritical>
}
 800e6a8:	bf00      	nop
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e6b8:	f001 fde4 	bl	8010284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d102      	bne.n	800e6ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	60fb      	str	r3, [r7, #12]
 800e6c8:	e001      	b.n	800e6ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e6ce:	f001 fe09 	bl	80102e4 <vPortExitCritical>

	return xReturn;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e6e4:	f001 fdce 	bl	8010284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d102      	bne.n	800e6fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	60fb      	str	r3, [r7, #12]
 800e6f8:	e001      	b.n	800e6fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e6fe:	f001 fdf1 	bl	80102e4 <vPortExitCritical>

	return xReturn;
 800e702:	68fb      	ldr	r3, [r7, #12]
}
 800e704:	4618      	mov	r0, r3
 800e706:	3710      	adds	r7, #16
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e70c:	b480      	push	{r7}
 800e70e:	b085      	sub	sp, #20
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e716:	2300      	movs	r3, #0
 800e718:	60fb      	str	r3, [r7, #12]
 800e71a:	e014      	b.n	800e746 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e71c:	4a0f      	ldr	r2, [pc, #60]	; (800e75c <vQueueAddToRegistry+0x50>)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d10b      	bne.n	800e740 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e728:	490c      	ldr	r1, [pc, #48]	; (800e75c <vQueueAddToRegistry+0x50>)
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	683a      	ldr	r2, [r7, #0]
 800e72e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e732:	4a0a      	ldr	r2, [pc, #40]	; (800e75c <vQueueAddToRegistry+0x50>)
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	00db      	lsls	r3, r3, #3
 800e738:	4413      	add	r3, r2
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e73e:	e006      	b.n	800e74e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	3301      	adds	r3, #1
 800e744:	60fb      	str	r3, [r7, #12]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2b07      	cmp	r3, #7
 800e74a:	d9e7      	bls.n	800e71c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e74c:	bf00      	nop
 800e74e:	bf00      	nop
 800e750:	3714      	adds	r7, #20
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop
 800e75c:	20004c80 	.word	0x20004c80

0800e760 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e760:	b580      	push	{r7, lr}
 800e762:	b086      	sub	sp, #24
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e770:	f001 fd88 	bl	8010284 <vPortEnterCritical>
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e77a:	b25b      	sxtb	r3, r3
 800e77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e780:	d103      	bne.n	800e78a <vQueueWaitForMessageRestricted+0x2a>
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	2200      	movs	r2, #0
 800e786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e790:	b25b      	sxtb	r3, r3
 800e792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e796:	d103      	bne.n	800e7a0 <vQueueWaitForMessageRestricted+0x40>
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	2200      	movs	r2, #0
 800e79c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7a0:	f001 fda0 	bl	80102e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d106      	bne.n	800e7ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	3324      	adds	r3, #36	; 0x24
 800e7b0:	687a      	ldr	r2, [r7, #4]
 800e7b2:	68b9      	ldr	r1, [r7, #8]
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f000 fc77 	bl	800f0a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e7ba:	6978      	ldr	r0, [r7, #20]
 800e7bc:	f7ff ff26 	bl	800e60c <prvUnlockQueue>
	}
 800e7c0:	bf00      	nop
 800e7c2:	3718      	adds	r7, #24
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b08e      	sub	sp, #56	; 0x38
 800e7cc:	af04      	add	r7, sp, #16
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]
 800e7d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10a      	bne.n	800e7f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e0:	f383 8811 	msr	BASEPRI, r3
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	623b      	str	r3, [r7, #32]
}
 800e7ee:	bf00      	nop
 800e7f0:	e7fe      	b.n	800e7f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d10a      	bne.n	800e80e <xTaskCreateStatic+0x46>
	__asm volatile
 800e7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fc:	f383 8811 	msr	BASEPRI, r3
 800e800:	f3bf 8f6f 	isb	sy
 800e804:	f3bf 8f4f 	dsb	sy
 800e808:	61fb      	str	r3, [r7, #28]
}
 800e80a:	bf00      	nop
 800e80c:	e7fe      	b.n	800e80c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e80e:	236c      	movs	r3, #108	; 0x6c
 800e810:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	2b6c      	cmp	r3, #108	; 0x6c
 800e816:	d00a      	beq.n	800e82e <xTaskCreateStatic+0x66>
	__asm volatile
 800e818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e81c:	f383 8811 	msr	BASEPRI, r3
 800e820:	f3bf 8f6f 	isb	sy
 800e824:	f3bf 8f4f 	dsb	sy
 800e828:	61bb      	str	r3, [r7, #24]
}
 800e82a:	bf00      	nop
 800e82c:	e7fe      	b.n	800e82c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e82e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e832:	2b00      	cmp	r3, #0
 800e834:	d01e      	beq.n	800e874 <xTaskCreateStatic+0xac>
 800e836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d01b      	beq.n	800e874 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e83e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e844:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e848:	2202      	movs	r2, #2
 800e84a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e84e:	2300      	movs	r3, #0
 800e850:	9303      	str	r3, [sp, #12]
 800e852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e854:	9302      	str	r3, [sp, #8]
 800e856:	f107 0314 	add.w	r3, r7, #20
 800e85a:	9301      	str	r3, [sp, #4]
 800e85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e85e:	9300      	str	r3, [sp, #0]
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	68b9      	ldr	r1, [r7, #8]
 800e866:	68f8      	ldr	r0, [r7, #12]
 800e868:	f000 f850 	bl	800e90c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e86c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e86e:	f000 f8dd 	bl	800ea2c <prvAddNewTaskToReadyList>
 800e872:	e001      	b.n	800e878 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e874:	2300      	movs	r3, #0
 800e876:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e878:	697b      	ldr	r3, [r7, #20]
	}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3728      	adds	r7, #40	; 0x28
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}

0800e882 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e882:	b580      	push	{r7, lr}
 800e884:	b08c      	sub	sp, #48	; 0x30
 800e886:	af04      	add	r7, sp, #16
 800e888:	60f8      	str	r0, [r7, #12]
 800e88a:	60b9      	str	r1, [r7, #8]
 800e88c:	603b      	str	r3, [r7, #0]
 800e88e:	4613      	mov	r3, r2
 800e890:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e892:	88fb      	ldrh	r3, [r7, #6]
 800e894:	009b      	lsls	r3, r3, #2
 800e896:	4618      	mov	r0, r3
 800e898:	f001 fe16 	bl	80104c8 <pvPortMalloc>
 800e89c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d00e      	beq.n	800e8c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e8a4:	206c      	movs	r0, #108	; 0x6c
 800e8a6:	f001 fe0f 	bl	80104c8 <pvPortMalloc>
 800e8aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d003      	beq.n	800e8ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e8b2:	69fb      	ldr	r3, [r7, #28]
 800e8b4:	697a      	ldr	r2, [r7, #20]
 800e8b6:	631a      	str	r2, [r3, #48]	; 0x30
 800e8b8:	e005      	b.n	800e8c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e8ba:	6978      	ldr	r0, [r7, #20]
 800e8bc:	f001 fed0 	bl	8010660 <vPortFree>
 800e8c0:	e001      	b.n	800e8c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e8c6:	69fb      	ldr	r3, [r7, #28]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d017      	beq.n	800e8fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e8d4:	88fa      	ldrh	r2, [r7, #6]
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	9303      	str	r3, [sp, #12]
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	9302      	str	r3, [sp, #8]
 800e8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e0:	9301      	str	r3, [sp, #4]
 800e8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e4:	9300      	str	r3, [sp, #0]
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	68b9      	ldr	r1, [r7, #8]
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	f000 f80e 	bl	800e90c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e8f0:	69f8      	ldr	r0, [r7, #28]
 800e8f2:	f000 f89b 	bl	800ea2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	61bb      	str	r3, [r7, #24]
 800e8fa:	e002      	b.n	800e902 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e900:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e902:	69bb      	ldr	r3, [r7, #24]
	}
 800e904:	4618      	mov	r0, r3
 800e906:	3720      	adds	r7, #32
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}

0800e90c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b088      	sub	sp, #32
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	607a      	str	r2, [r7, #4]
 800e918:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	461a      	mov	r2, r3
 800e924:	21a5      	movs	r1, #165	; 0xa5
 800e926:	f001 fff1 	bl	801090c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e934:	3b01      	subs	r3, #1
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	4413      	add	r3, r2
 800e93a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	f023 0307 	bic.w	r3, r3, #7
 800e942:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e944:	69bb      	ldr	r3, [r7, #24]
 800e946:	f003 0307 	and.w	r3, r3, #7
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d00a      	beq.n	800e964 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e952:	f383 8811 	msr	BASEPRI, r3
 800e956:	f3bf 8f6f 	isb	sy
 800e95a:	f3bf 8f4f 	dsb	sy
 800e95e:	617b      	str	r3, [r7, #20]
}
 800e960:	bf00      	nop
 800e962:	e7fe      	b.n	800e962 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d01f      	beq.n	800e9aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e96a:	2300      	movs	r3, #0
 800e96c:	61fb      	str	r3, [r7, #28]
 800e96e:	e012      	b.n	800e996 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e970:	68ba      	ldr	r2, [r7, #8]
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	4413      	add	r3, r2
 800e976:	7819      	ldrb	r1, [r3, #0]
 800e978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	4413      	add	r3, r2
 800e97e:	3334      	adds	r3, #52	; 0x34
 800e980:	460a      	mov	r2, r1
 800e982:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e984:	68ba      	ldr	r2, [r7, #8]
 800e986:	69fb      	ldr	r3, [r7, #28]
 800e988:	4413      	add	r3, r2
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d006      	beq.n	800e99e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e990:	69fb      	ldr	r3, [r7, #28]
 800e992:	3301      	adds	r3, #1
 800e994:	61fb      	str	r3, [r7, #28]
 800e996:	69fb      	ldr	r3, [r7, #28]
 800e998:	2b1f      	cmp	r3, #31
 800e99a:	d9e9      	bls.n	800e970 <prvInitialiseNewTask+0x64>
 800e99c:	e000      	b.n	800e9a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800e99e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800e9a8:	e003      	b.n	800e9b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b4:	2b37      	cmp	r3, #55	; 0x37
 800e9b6:	d901      	bls.n	800e9bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e9b8:	2337      	movs	r3, #55	; 0x37
 800e9ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9c6:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800e9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d0:	3304      	adds	r3, #4
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7fe fee4 	bl	800d7a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9da:	3318      	adds	r3, #24
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7fe fedf 	bl	800d7a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea00:	2200      	movs	r2, #0
 800ea02:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea06:	683a      	ldr	r2, [r7, #0]
 800ea08:	68f9      	ldr	r1, [r7, #12]
 800ea0a:	69b8      	ldr	r0, [r7, #24]
 800ea0c:	f001 fb0c 	bl	8010028 <pxPortInitialiseStack>
 800ea10:	4602      	mov	r2, r0
 800ea12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ea16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d002      	beq.n	800ea22 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ea1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea22:	bf00      	nop
 800ea24:	3720      	adds	r7, #32
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
	...

0800ea2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ea34:	f001 fc26 	bl	8010284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ea38:	4b2d      	ldr	r3, [pc, #180]	; (800eaf0 <prvAddNewTaskToReadyList+0xc4>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	4a2c      	ldr	r2, [pc, #176]	; (800eaf0 <prvAddNewTaskToReadyList+0xc4>)
 800ea40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ea42:	4b2c      	ldr	r3, [pc, #176]	; (800eaf4 <prvAddNewTaskToReadyList+0xc8>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d109      	bne.n	800ea5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ea4a:	4a2a      	ldr	r2, [pc, #168]	; (800eaf4 <prvAddNewTaskToReadyList+0xc8>)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ea50:	4b27      	ldr	r3, [pc, #156]	; (800eaf0 <prvAddNewTaskToReadyList+0xc4>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d110      	bne.n	800ea7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ea58:	f000 fcb4 	bl	800f3c4 <prvInitialiseTaskLists>
 800ea5c:	e00d      	b.n	800ea7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ea5e:	4b26      	ldr	r3, [pc, #152]	; (800eaf8 <prvAddNewTaskToReadyList+0xcc>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d109      	bne.n	800ea7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ea66:	4b23      	ldr	r3, [pc, #140]	; (800eaf4 <prvAddNewTaskToReadyList+0xc8>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d802      	bhi.n	800ea7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ea74:	4a1f      	ldr	r2, [pc, #124]	; (800eaf4 <prvAddNewTaskToReadyList+0xc8>)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ea7a:	4b20      	ldr	r3, [pc, #128]	; (800eafc <prvAddNewTaskToReadyList+0xd0>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	4a1e      	ldr	r2, [pc, #120]	; (800eafc <prvAddNewTaskToReadyList+0xd0>)
 800ea82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ea84:	4b1d      	ldr	r3, [pc, #116]	; (800eafc <prvAddNewTaskToReadyList+0xd0>)
 800ea86:	681a      	ldr	r2, [r3, #0]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea90:	4b1b      	ldr	r3, [pc, #108]	; (800eb00 <prvAddNewTaskToReadyList+0xd4>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d903      	bls.n	800eaa0 <prvAddNewTaskToReadyList+0x74>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea9c:	4a18      	ldr	r2, [pc, #96]	; (800eb00 <prvAddNewTaskToReadyList+0xd4>)
 800ea9e:	6013      	str	r3, [r2, #0]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaa4:	4613      	mov	r3, r2
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	4413      	add	r3, r2
 800eaaa:	009b      	lsls	r3, r3, #2
 800eaac:	4a15      	ldr	r2, [pc, #84]	; (800eb04 <prvAddNewTaskToReadyList+0xd8>)
 800eaae:	441a      	add	r2, r3
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	3304      	adds	r3, #4
 800eab4:	4619      	mov	r1, r3
 800eab6:	4610      	mov	r0, r2
 800eab8:	f7fe fe7f 	bl	800d7ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eabc:	f001 fc12 	bl	80102e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eac0:	4b0d      	ldr	r3, [pc, #52]	; (800eaf8 <prvAddNewTaskToReadyList+0xcc>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d00e      	beq.n	800eae6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eac8:	4b0a      	ldr	r3, [pc, #40]	; (800eaf4 <prvAddNewTaskToReadyList+0xc8>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d207      	bcs.n	800eae6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ead6:	4b0c      	ldr	r3, [pc, #48]	; (800eb08 <prvAddNewTaskToReadyList+0xdc>)
 800ead8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eadc:	601a      	str	r2, [r3, #0]
 800eade:	f3bf 8f4f 	dsb	sy
 800eae2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eae6:	bf00      	nop
 800eae8:	3708      	adds	r7, #8
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	20005194 	.word	0x20005194
 800eaf4:	20004cc0 	.word	0x20004cc0
 800eaf8:	200051a0 	.word	0x200051a0
 800eafc:	200051b0 	.word	0x200051b0
 800eb00:	2000519c 	.word	0x2000519c
 800eb04:	20004cc4 	.word	0x20004cc4
 800eb08:	e000ed04 	.word	0xe000ed04

0800eb0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eb14:	2300      	movs	r3, #0
 800eb16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d017      	beq.n	800eb4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eb1e:	4b13      	ldr	r3, [pc, #76]	; (800eb6c <vTaskDelay+0x60>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d00a      	beq.n	800eb3c <vTaskDelay+0x30>
	__asm volatile
 800eb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2a:	f383 8811 	msr	BASEPRI, r3
 800eb2e:	f3bf 8f6f 	isb	sy
 800eb32:	f3bf 8f4f 	dsb	sy
 800eb36:	60bb      	str	r3, [r7, #8]
}
 800eb38:	bf00      	nop
 800eb3a:	e7fe      	b.n	800eb3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eb3c:	f000 f880 	bl	800ec40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eb40:	2100      	movs	r1, #0
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f000 feae 	bl	800f8a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eb48:	f000 f888 	bl	800ec5c <xTaskResumeAll>
 800eb4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d107      	bne.n	800eb64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eb54:	4b06      	ldr	r3, [pc, #24]	; (800eb70 <vTaskDelay+0x64>)
 800eb56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb5a:	601a      	str	r2, [r3, #0]
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb64:	bf00      	nop
 800eb66:	3710      	adds	r7, #16
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	200051bc 	.word	0x200051bc
 800eb70:	e000ed04 	.word	0xe000ed04

0800eb74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b08a      	sub	sp, #40	; 0x28
 800eb78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eb82:	463a      	mov	r2, r7
 800eb84:	1d39      	adds	r1, r7, #4
 800eb86:	f107 0308 	add.w	r3, r7, #8
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7fe fbc6 	bl	800d31c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eb90:	6839      	ldr	r1, [r7, #0]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	68ba      	ldr	r2, [r7, #8]
 800eb96:	9202      	str	r2, [sp, #8]
 800eb98:	9301      	str	r3, [sp, #4]
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	9300      	str	r3, [sp, #0]
 800eb9e:	2300      	movs	r3, #0
 800eba0:	460a      	mov	r2, r1
 800eba2:	4921      	ldr	r1, [pc, #132]	; (800ec28 <vTaskStartScheduler+0xb4>)
 800eba4:	4821      	ldr	r0, [pc, #132]	; (800ec2c <vTaskStartScheduler+0xb8>)
 800eba6:	f7ff fe0f 	bl	800e7c8 <xTaskCreateStatic>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	4a20      	ldr	r2, [pc, #128]	; (800ec30 <vTaskStartScheduler+0xbc>)
 800ebae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ebb0:	4b1f      	ldr	r3, [pc, #124]	; (800ec30 <vTaskStartScheduler+0xbc>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d002      	beq.n	800ebbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	617b      	str	r3, [r7, #20]
 800ebbc:	e001      	b.n	800ebc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d102      	bne.n	800ebce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ebc8:	f000 fec0 	bl	800f94c <xTimerCreateTimerTask>
 800ebcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d116      	bne.n	800ec02 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ebd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd8:	f383 8811 	msr	BASEPRI, r3
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	613b      	str	r3, [r7, #16]
}
 800ebe6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ebe8:	4b12      	ldr	r3, [pc, #72]	; (800ec34 <vTaskStartScheduler+0xc0>)
 800ebea:	f04f 32ff 	mov.w	r2, #4294967295
 800ebee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ebf0:	4b11      	ldr	r3, [pc, #68]	; (800ec38 <vTaskStartScheduler+0xc4>)
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ebf6:	4b11      	ldr	r3, [pc, #68]	; (800ec3c <vTaskStartScheduler+0xc8>)
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ebfc:	f001 faa0 	bl	8010140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ec00:	e00e      	b.n	800ec20 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec08:	d10a      	bne.n	800ec20 <vTaskStartScheduler+0xac>
	__asm volatile
 800ec0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec0e:	f383 8811 	msr	BASEPRI, r3
 800ec12:	f3bf 8f6f 	isb	sy
 800ec16:	f3bf 8f4f 	dsb	sy
 800ec1a:	60fb      	str	r3, [r7, #12]
}
 800ec1c:	bf00      	nop
 800ec1e:	e7fe      	b.n	800ec1e <vTaskStartScheduler+0xaa>
}
 800ec20:	bf00      	nop
 800ec22:	3718      	adds	r7, #24
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}
 800ec28:	080153fc 	.word	0x080153fc
 800ec2c:	0800f395 	.word	0x0800f395
 800ec30:	200051b8 	.word	0x200051b8
 800ec34:	200051b4 	.word	0x200051b4
 800ec38:	200051a0 	.word	0x200051a0
 800ec3c:	20005198 	.word	0x20005198

0800ec40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ec40:	b480      	push	{r7}
 800ec42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ec44:	4b04      	ldr	r3, [pc, #16]	; (800ec58 <vTaskSuspendAll+0x18>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	4a03      	ldr	r2, [pc, #12]	; (800ec58 <vTaskSuspendAll+0x18>)
 800ec4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ec4e:	bf00      	nop
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr
 800ec58:	200051bc 	.word	0x200051bc

0800ec5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ec62:	2300      	movs	r3, #0
 800ec64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ec66:	2300      	movs	r3, #0
 800ec68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ec6a:	4b42      	ldr	r3, [pc, #264]	; (800ed74 <xTaskResumeAll+0x118>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d10a      	bne.n	800ec88 <xTaskResumeAll+0x2c>
	__asm volatile
 800ec72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec76:	f383 8811 	msr	BASEPRI, r3
 800ec7a:	f3bf 8f6f 	isb	sy
 800ec7e:	f3bf 8f4f 	dsb	sy
 800ec82:	603b      	str	r3, [r7, #0]
}
 800ec84:	bf00      	nop
 800ec86:	e7fe      	b.n	800ec86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ec88:	f001 fafc 	bl	8010284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ec8c:	4b39      	ldr	r3, [pc, #228]	; (800ed74 <xTaskResumeAll+0x118>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	3b01      	subs	r3, #1
 800ec92:	4a38      	ldr	r2, [pc, #224]	; (800ed74 <xTaskResumeAll+0x118>)
 800ec94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec96:	4b37      	ldr	r3, [pc, #220]	; (800ed74 <xTaskResumeAll+0x118>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d162      	bne.n	800ed64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ec9e:	4b36      	ldr	r3, [pc, #216]	; (800ed78 <xTaskResumeAll+0x11c>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d05e      	beq.n	800ed64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eca6:	e02f      	b.n	800ed08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eca8:	4b34      	ldr	r3, [pc, #208]	; (800ed7c <xTaskResumeAll+0x120>)
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	68db      	ldr	r3, [r3, #12]
 800ecae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	3318      	adds	r3, #24
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7fe fddd 	bl	800d874 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	3304      	adds	r3, #4
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fe fdd8 	bl	800d874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecc8:	4b2d      	ldr	r3, [pc, #180]	; (800ed80 <xTaskResumeAll+0x124>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d903      	bls.n	800ecd8 <xTaskResumeAll+0x7c>
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd4:	4a2a      	ldr	r2, [pc, #168]	; (800ed80 <xTaskResumeAll+0x124>)
 800ecd6:	6013      	str	r3, [r2, #0]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecdc:	4613      	mov	r3, r2
 800ecde:	009b      	lsls	r3, r3, #2
 800ece0:	4413      	add	r3, r2
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	4a27      	ldr	r2, [pc, #156]	; (800ed84 <xTaskResumeAll+0x128>)
 800ece6:	441a      	add	r2, r3
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	3304      	adds	r3, #4
 800ecec:	4619      	mov	r1, r3
 800ecee:	4610      	mov	r0, r2
 800ecf0:	f7fe fd63 	bl	800d7ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf8:	4b23      	ldr	r3, [pc, #140]	; (800ed88 <xTaskResumeAll+0x12c>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d302      	bcc.n	800ed08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ed02:	4b22      	ldr	r3, [pc, #136]	; (800ed8c <xTaskResumeAll+0x130>)
 800ed04:	2201      	movs	r2, #1
 800ed06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed08:	4b1c      	ldr	r3, [pc, #112]	; (800ed7c <xTaskResumeAll+0x120>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d1cb      	bne.n	800eca8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d001      	beq.n	800ed1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ed16:	f000 fbf3 	bl	800f500 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ed1a:	4b1d      	ldr	r3, [pc, #116]	; (800ed90 <xTaskResumeAll+0x134>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d010      	beq.n	800ed48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ed26:	f000 f847 	bl	800edb8 <xTaskIncrementTick>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d002      	beq.n	800ed36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ed30:	4b16      	ldr	r3, [pc, #88]	; (800ed8c <xTaskResumeAll+0x130>)
 800ed32:	2201      	movs	r2, #1
 800ed34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	3b01      	subs	r3, #1
 800ed3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1f1      	bne.n	800ed26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ed42:	4b13      	ldr	r3, [pc, #76]	; (800ed90 <xTaskResumeAll+0x134>)
 800ed44:	2200      	movs	r2, #0
 800ed46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ed48:	4b10      	ldr	r3, [pc, #64]	; (800ed8c <xTaskResumeAll+0x130>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d009      	beq.n	800ed64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ed50:	2301      	movs	r3, #1
 800ed52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ed54:	4b0f      	ldr	r3, [pc, #60]	; (800ed94 <xTaskResumeAll+0x138>)
 800ed56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed5a:	601a      	str	r2, [r3, #0]
 800ed5c:	f3bf 8f4f 	dsb	sy
 800ed60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed64:	f001 fabe 	bl	80102e4 <vPortExitCritical>

	return xAlreadyYielded;
 800ed68:	68bb      	ldr	r3, [r7, #8]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	200051bc 	.word	0x200051bc
 800ed78:	20005194 	.word	0x20005194
 800ed7c:	20005154 	.word	0x20005154
 800ed80:	2000519c 	.word	0x2000519c
 800ed84:	20004cc4 	.word	0x20004cc4
 800ed88:	20004cc0 	.word	0x20004cc0
 800ed8c:	200051a8 	.word	0x200051a8
 800ed90:	200051a4 	.word	0x200051a4
 800ed94:	e000ed04 	.word	0xe000ed04

0800ed98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b083      	sub	sp, #12
 800ed9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ed9e:	4b05      	ldr	r3, [pc, #20]	; (800edb4 <xTaskGetTickCount+0x1c>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eda4:	687b      	ldr	r3, [r7, #4]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	370c      	adds	r7, #12
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	20005198 	.word	0x20005198

0800edb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b086      	sub	sp, #24
 800edbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800edbe:	2300      	movs	r3, #0
 800edc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edc2:	4b4f      	ldr	r3, [pc, #316]	; (800ef00 <xTaskIncrementTick+0x148>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	f040 808f 	bne.w	800eeea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800edcc:	4b4d      	ldr	r3, [pc, #308]	; (800ef04 <xTaskIncrementTick+0x14c>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	3301      	adds	r3, #1
 800edd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800edd4:	4a4b      	ldr	r2, [pc, #300]	; (800ef04 <xTaskIncrementTick+0x14c>)
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d120      	bne.n	800ee22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ede0:	4b49      	ldr	r3, [pc, #292]	; (800ef08 <xTaskIncrementTick+0x150>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d00a      	beq.n	800ee00 <xTaskIncrementTick+0x48>
	__asm volatile
 800edea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edee:	f383 8811 	msr	BASEPRI, r3
 800edf2:	f3bf 8f6f 	isb	sy
 800edf6:	f3bf 8f4f 	dsb	sy
 800edfa:	603b      	str	r3, [r7, #0]
}
 800edfc:	bf00      	nop
 800edfe:	e7fe      	b.n	800edfe <xTaskIncrementTick+0x46>
 800ee00:	4b41      	ldr	r3, [pc, #260]	; (800ef08 <xTaskIncrementTick+0x150>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	60fb      	str	r3, [r7, #12]
 800ee06:	4b41      	ldr	r3, [pc, #260]	; (800ef0c <xTaskIncrementTick+0x154>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4a3f      	ldr	r2, [pc, #252]	; (800ef08 <xTaskIncrementTick+0x150>)
 800ee0c:	6013      	str	r3, [r2, #0]
 800ee0e:	4a3f      	ldr	r2, [pc, #252]	; (800ef0c <xTaskIncrementTick+0x154>)
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6013      	str	r3, [r2, #0]
 800ee14:	4b3e      	ldr	r3, [pc, #248]	; (800ef10 <xTaskIncrementTick+0x158>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	4a3d      	ldr	r2, [pc, #244]	; (800ef10 <xTaskIncrementTick+0x158>)
 800ee1c:	6013      	str	r3, [r2, #0]
 800ee1e:	f000 fb6f 	bl	800f500 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ee22:	4b3c      	ldr	r3, [pc, #240]	; (800ef14 <xTaskIncrementTick+0x15c>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	693a      	ldr	r2, [r7, #16]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d349      	bcc.n	800eec0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee2c:	4b36      	ldr	r3, [pc, #216]	; (800ef08 <xTaskIncrementTick+0x150>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d104      	bne.n	800ee40 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee36:	4b37      	ldr	r3, [pc, #220]	; (800ef14 <xTaskIncrementTick+0x15c>)
 800ee38:	f04f 32ff 	mov.w	r2, #4294967295
 800ee3c:	601a      	str	r2, [r3, #0]
					break;
 800ee3e:	e03f      	b.n	800eec0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee40:	4b31      	ldr	r3, [pc, #196]	; (800ef08 <xTaskIncrementTick+0x150>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	68db      	ldr	r3, [r3, #12]
 800ee48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ee50:	693a      	ldr	r2, [r7, #16]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d203      	bcs.n	800ee60 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ee58:	4a2e      	ldr	r2, [pc, #184]	; (800ef14 <xTaskIncrementTick+0x15c>)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ee5e:	e02f      	b.n	800eec0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	3304      	adds	r3, #4
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7fe fd05 	bl	800d874 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d004      	beq.n	800ee7c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	3318      	adds	r3, #24
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fe fcfc 	bl	800d874 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee80:	4b25      	ldr	r3, [pc, #148]	; (800ef18 <xTaskIncrementTick+0x160>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d903      	bls.n	800ee90 <xTaskIncrementTick+0xd8>
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee8c:	4a22      	ldr	r2, [pc, #136]	; (800ef18 <xTaskIncrementTick+0x160>)
 800ee8e:	6013      	str	r3, [r2, #0]
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee94:	4613      	mov	r3, r2
 800ee96:	009b      	lsls	r3, r3, #2
 800ee98:	4413      	add	r3, r2
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	4a1f      	ldr	r2, [pc, #124]	; (800ef1c <xTaskIncrementTick+0x164>)
 800ee9e:	441a      	add	r2, r3
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	3304      	adds	r3, #4
 800eea4:	4619      	mov	r1, r3
 800eea6:	4610      	mov	r0, r2
 800eea8:	f7fe fc87 	bl	800d7ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb0:	4b1b      	ldr	r3, [pc, #108]	; (800ef20 <xTaskIncrementTick+0x168>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d3b8      	bcc.n	800ee2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800eeba:	2301      	movs	r3, #1
 800eebc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eebe:	e7b5      	b.n	800ee2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eec0:	4b17      	ldr	r3, [pc, #92]	; (800ef20 <xTaskIncrementTick+0x168>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eec6:	4915      	ldr	r1, [pc, #84]	; (800ef1c <xTaskIncrementTick+0x164>)
 800eec8:	4613      	mov	r3, r2
 800eeca:	009b      	lsls	r3, r3, #2
 800eecc:	4413      	add	r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	440b      	add	r3, r1
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d901      	bls.n	800eedc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800eed8:	2301      	movs	r3, #1
 800eeda:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800eedc:	4b11      	ldr	r3, [pc, #68]	; (800ef24 <xTaskIncrementTick+0x16c>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d007      	beq.n	800eef4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800eee4:	2301      	movs	r3, #1
 800eee6:	617b      	str	r3, [r7, #20]
 800eee8:	e004      	b.n	800eef4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800eeea:	4b0f      	ldr	r3, [pc, #60]	; (800ef28 <xTaskIncrementTick+0x170>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	3301      	adds	r3, #1
 800eef0:	4a0d      	ldr	r2, [pc, #52]	; (800ef28 <xTaskIncrementTick+0x170>)
 800eef2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800eef4:	697b      	ldr	r3, [r7, #20]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3718      	adds	r7, #24
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	200051bc 	.word	0x200051bc
 800ef04:	20005198 	.word	0x20005198
 800ef08:	2000514c 	.word	0x2000514c
 800ef0c:	20005150 	.word	0x20005150
 800ef10:	200051ac 	.word	0x200051ac
 800ef14:	200051b4 	.word	0x200051b4
 800ef18:	2000519c 	.word	0x2000519c
 800ef1c:	20004cc4 	.word	0x20004cc4
 800ef20:	20004cc0 	.word	0x20004cc0
 800ef24:	200051a8 	.word	0x200051a8
 800ef28:	200051a4 	.word	0x200051a4

0800ef2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b085      	sub	sp, #20
 800ef30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ef32:	4b28      	ldr	r3, [pc, #160]	; (800efd4 <vTaskSwitchContext+0xa8>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d003      	beq.n	800ef42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ef3a:	4b27      	ldr	r3, [pc, #156]	; (800efd8 <vTaskSwitchContext+0xac>)
 800ef3c:	2201      	movs	r2, #1
 800ef3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ef40:	e041      	b.n	800efc6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ef42:	4b25      	ldr	r3, [pc, #148]	; (800efd8 <vTaskSwitchContext+0xac>)
 800ef44:	2200      	movs	r2, #0
 800ef46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef48:	4b24      	ldr	r3, [pc, #144]	; (800efdc <vTaskSwitchContext+0xb0>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	60fb      	str	r3, [r7, #12]
 800ef4e:	e010      	b.n	800ef72 <vTaskSwitchContext+0x46>
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d10a      	bne.n	800ef6c <vTaskSwitchContext+0x40>
	__asm volatile
 800ef56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5a:	f383 8811 	msr	BASEPRI, r3
 800ef5e:	f3bf 8f6f 	isb	sy
 800ef62:	f3bf 8f4f 	dsb	sy
 800ef66:	607b      	str	r3, [r7, #4]
}
 800ef68:	bf00      	nop
 800ef6a:	e7fe      	b.n	800ef6a <vTaskSwitchContext+0x3e>
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	3b01      	subs	r3, #1
 800ef70:	60fb      	str	r3, [r7, #12]
 800ef72:	491b      	ldr	r1, [pc, #108]	; (800efe0 <vTaskSwitchContext+0xb4>)
 800ef74:	68fa      	ldr	r2, [r7, #12]
 800ef76:	4613      	mov	r3, r2
 800ef78:	009b      	lsls	r3, r3, #2
 800ef7a:	4413      	add	r3, r2
 800ef7c:	009b      	lsls	r3, r3, #2
 800ef7e:	440b      	add	r3, r1
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d0e4      	beq.n	800ef50 <vTaskSwitchContext+0x24>
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	4613      	mov	r3, r2
 800ef8a:	009b      	lsls	r3, r3, #2
 800ef8c:	4413      	add	r3, r2
 800ef8e:	009b      	lsls	r3, r3, #2
 800ef90:	4a13      	ldr	r2, [pc, #76]	; (800efe0 <vTaskSwitchContext+0xb4>)
 800ef92:	4413      	add	r3, r2
 800ef94:	60bb      	str	r3, [r7, #8]
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	685a      	ldr	r2, [r3, #4]
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	605a      	str	r2, [r3, #4]
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	685a      	ldr	r2, [r3, #4]
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	3308      	adds	r3, #8
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d104      	bne.n	800efb6 <vTaskSwitchContext+0x8a>
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	685a      	ldr	r2, [r3, #4]
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	605a      	str	r2, [r3, #4]
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	68db      	ldr	r3, [r3, #12]
 800efbc:	4a09      	ldr	r2, [pc, #36]	; (800efe4 <vTaskSwitchContext+0xb8>)
 800efbe:	6013      	str	r3, [r2, #0]
 800efc0:	4a06      	ldr	r2, [pc, #24]	; (800efdc <vTaskSwitchContext+0xb0>)
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	6013      	str	r3, [r2, #0]
}
 800efc6:	bf00      	nop
 800efc8:	3714      	adds	r7, #20
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr
 800efd2:	bf00      	nop
 800efd4:	200051bc 	.word	0x200051bc
 800efd8:	200051a8 	.word	0x200051a8
 800efdc:	2000519c 	.word	0x2000519c
 800efe0:	20004cc4 	.word	0x20004cc4
 800efe4:	20004cc0 	.word	0x20004cc0

0800efe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d10a      	bne.n	800f00e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800eff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800effc:	f383 8811 	msr	BASEPRI, r3
 800f000:	f3bf 8f6f 	isb	sy
 800f004:	f3bf 8f4f 	dsb	sy
 800f008:	60fb      	str	r3, [r7, #12]
}
 800f00a:	bf00      	nop
 800f00c:	e7fe      	b.n	800f00c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f00e:	4b07      	ldr	r3, [pc, #28]	; (800f02c <vTaskPlaceOnEventList+0x44>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	3318      	adds	r3, #24
 800f014:	4619      	mov	r1, r3
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f7fe fbf3 	bl	800d802 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f01c:	2101      	movs	r1, #1
 800f01e:	6838      	ldr	r0, [r7, #0]
 800f020:	f000 fc40 	bl	800f8a4 <prvAddCurrentTaskToDelayedList>
}
 800f024:	bf00      	nop
 800f026:	3710      	adds	r7, #16
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	20004cc0 	.word	0x20004cc0

0800f030 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b086      	sub	sp, #24
 800f034:	af00      	add	r7, sp, #0
 800f036:	60f8      	str	r0, [r7, #12]
 800f038:	60b9      	str	r1, [r7, #8]
 800f03a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d10a      	bne.n	800f058 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800f042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f046:	f383 8811 	msr	BASEPRI, r3
 800f04a:	f3bf 8f6f 	isb	sy
 800f04e:	f3bf 8f4f 	dsb	sy
 800f052:	617b      	str	r3, [r7, #20]
}
 800f054:	bf00      	nop
 800f056:	e7fe      	b.n	800f056 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800f058:	4b11      	ldr	r3, [pc, #68]	; (800f0a0 <vTaskPlaceOnUnorderedEventList+0x70>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d10a      	bne.n	800f076 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800f060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f064:	f383 8811 	msr	BASEPRI, r3
 800f068:	f3bf 8f6f 	isb	sy
 800f06c:	f3bf 8f4f 	dsb	sy
 800f070:	613b      	str	r3, [r7, #16]
}
 800f072:	bf00      	nop
 800f074:	e7fe      	b.n	800f074 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f076:	4b0b      	ldr	r3, [pc, #44]	; (800f0a4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	68ba      	ldr	r2, [r7, #8]
 800f07c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800f080:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f082:	4b08      	ldr	r3, [pc, #32]	; (800f0a4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	3318      	adds	r3, #24
 800f088:	4619      	mov	r1, r3
 800f08a:	68f8      	ldr	r0, [r7, #12]
 800f08c:	f7fe fb95 	bl	800d7ba <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f090:	2101      	movs	r1, #1
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 fc06 	bl	800f8a4 <prvAddCurrentTaskToDelayedList>
}
 800f098:	bf00      	nop
 800f09a:	3718      	adds	r7, #24
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	200051bc 	.word	0x200051bc
 800f0a4:	20004cc0 	.word	0x20004cc0

0800f0a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b086      	sub	sp, #24
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	60f8      	str	r0, [r7, #12]
 800f0b0:	60b9      	str	r1, [r7, #8]
 800f0b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d10a      	bne.n	800f0d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0be:	f383 8811 	msr	BASEPRI, r3
 800f0c2:	f3bf 8f6f 	isb	sy
 800f0c6:	f3bf 8f4f 	dsb	sy
 800f0ca:	617b      	str	r3, [r7, #20]
}
 800f0cc:	bf00      	nop
 800f0ce:	e7fe      	b.n	800f0ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f0d0:	4b0a      	ldr	r3, [pc, #40]	; (800f0fc <vTaskPlaceOnEventListRestricted+0x54>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	3318      	adds	r3, #24
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	68f8      	ldr	r0, [r7, #12]
 800f0da:	f7fe fb6e 	bl	800d7ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d002      	beq.n	800f0ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f0ea:	6879      	ldr	r1, [r7, #4]
 800f0ec:	68b8      	ldr	r0, [r7, #8]
 800f0ee:	f000 fbd9 	bl	800f8a4 <prvAddCurrentTaskToDelayedList>
	}
 800f0f2:	bf00      	nop
 800f0f4:	3718      	adds	r7, #24
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	20004cc0 	.word	0x20004cc0

0800f100 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b086      	sub	sp, #24
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	68db      	ldr	r3, [r3, #12]
 800f10e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d10a      	bne.n	800f12c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11a:	f383 8811 	msr	BASEPRI, r3
 800f11e:	f3bf 8f6f 	isb	sy
 800f122:	f3bf 8f4f 	dsb	sy
 800f126:	60fb      	str	r3, [r7, #12]
}
 800f128:	bf00      	nop
 800f12a:	e7fe      	b.n	800f12a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	3318      	adds	r3, #24
 800f130:	4618      	mov	r0, r3
 800f132:	f7fe fb9f 	bl	800d874 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f136:	4b1e      	ldr	r3, [pc, #120]	; (800f1b0 <xTaskRemoveFromEventList+0xb0>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d11d      	bne.n	800f17a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	3304      	adds	r3, #4
 800f142:	4618      	mov	r0, r3
 800f144:	f7fe fb96 	bl	800d874 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f14c:	4b19      	ldr	r3, [pc, #100]	; (800f1b4 <xTaskRemoveFromEventList+0xb4>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	429a      	cmp	r2, r3
 800f152:	d903      	bls.n	800f15c <xTaskRemoveFromEventList+0x5c>
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f158:	4a16      	ldr	r2, [pc, #88]	; (800f1b4 <xTaskRemoveFromEventList+0xb4>)
 800f15a:	6013      	str	r3, [r2, #0]
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f160:	4613      	mov	r3, r2
 800f162:	009b      	lsls	r3, r3, #2
 800f164:	4413      	add	r3, r2
 800f166:	009b      	lsls	r3, r3, #2
 800f168:	4a13      	ldr	r2, [pc, #76]	; (800f1b8 <xTaskRemoveFromEventList+0xb8>)
 800f16a:	441a      	add	r2, r3
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	3304      	adds	r3, #4
 800f170:	4619      	mov	r1, r3
 800f172:	4610      	mov	r0, r2
 800f174:	f7fe fb21 	bl	800d7ba <vListInsertEnd>
 800f178:	e005      	b.n	800f186 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	3318      	adds	r3, #24
 800f17e:	4619      	mov	r1, r3
 800f180:	480e      	ldr	r0, [pc, #56]	; (800f1bc <xTaskRemoveFromEventList+0xbc>)
 800f182:	f7fe fb1a 	bl	800d7ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f18a:	4b0d      	ldr	r3, [pc, #52]	; (800f1c0 <xTaskRemoveFromEventList+0xc0>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f190:	429a      	cmp	r2, r3
 800f192:	d905      	bls.n	800f1a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f194:	2301      	movs	r3, #1
 800f196:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f198:	4b0a      	ldr	r3, [pc, #40]	; (800f1c4 <xTaskRemoveFromEventList+0xc4>)
 800f19a:	2201      	movs	r2, #1
 800f19c:	601a      	str	r2, [r3, #0]
 800f19e:	e001      	b.n	800f1a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f1a4:	697b      	ldr	r3, [r7, #20]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3718      	adds	r7, #24
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	200051bc 	.word	0x200051bc
 800f1b4:	2000519c 	.word	0x2000519c
 800f1b8:	20004cc4 	.word	0x20004cc4
 800f1bc:	20005154 	.word	0x20005154
 800f1c0:	20004cc0 	.word	0x20004cc0
 800f1c4:	200051a8 	.word	0x200051a8

0800f1c8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b086      	sub	sp, #24
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800f1d2:	4b29      	ldr	r3, [pc, #164]	; (800f278 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d10a      	bne.n	800f1f0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800f1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1de:	f383 8811 	msr	BASEPRI, r3
 800f1e2:	f3bf 8f6f 	isb	sy
 800f1e6:	f3bf 8f4f 	dsb	sy
 800f1ea:	613b      	str	r3, [r7, #16]
}
 800f1ec:	bf00      	nop
 800f1ee:	e7fe      	b.n	800f1ee <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d10a      	bne.n	800f21c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800f206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f20a:	f383 8811 	msr	BASEPRI, r3
 800f20e:	f3bf 8f6f 	isb	sy
 800f212:	f3bf 8f4f 	dsb	sy
 800f216:	60fb      	str	r3, [r7, #12]
}
 800f218:	bf00      	nop
 800f21a:	e7fe      	b.n	800f21a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f7fe fb29 	bl	800d874 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	3304      	adds	r3, #4
 800f226:	4618      	mov	r0, r3
 800f228:	f7fe fb24 	bl	800d874 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f230:	4b12      	ldr	r3, [pc, #72]	; (800f27c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	429a      	cmp	r2, r3
 800f236:	d903      	bls.n	800f240 <vTaskRemoveFromUnorderedEventList+0x78>
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f23c:	4a0f      	ldr	r2, [pc, #60]	; (800f27c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f23e:	6013      	str	r3, [r2, #0]
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f244:	4613      	mov	r3, r2
 800f246:	009b      	lsls	r3, r3, #2
 800f248:	4413      	add	r3, r2
 800f24a:	009b      	lsls	r3, r3, #2
 800f24c:	4a0c      	ldr	r2, [pc, #48]	; (800f280 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f24e:	441a      	add	r2, r3
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	3304      	adds	r3, #4
 800f254:	4619      	mov	r1, r3
 800f256:	4610      	mov	r0, r2
 800f258:	f7fe faaf 	bl	800d7ba <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f260:	4b08      	ldr	r3, [pc, #32]	; (800f284 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f266:	429a      	cmp	r2, r3
 800f268:	d902      	bls.n	800f270 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800f26a:	4b07      	ldr	r3, [pc, #28]	; (800f288 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800f26c:	2201      	movs	r2, #1
 800f26e:	601a      	str	r2, [r3, #0]
	}
}
 800f270:	bf00      	nop
 800f272:	3718      	adds	r7, #24
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}
 800f278:	200051bc 	.word	0x200051bc
 800f27c:	2000519c 	.word	0x2000519c
 800f280:	20004cc4 	.word	0x20004cc4
 800f284:	20004cc0 	.word	0x20004cc0
 800f288:	200051a8 	.word	0x200051a8

0800f28c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f28c:	b480      	push	{r7}
 800f28e:	b083      	sub	sp, #12
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f294:	4b06      	ldr	r3, [pc, #24]	; (800f2b0 <vTaskInternalSetTimeOutState+0x24>)
 800f296:	681a      	ldr	r2, [r3, #0]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f29c:	4b05      	ldr	r3, [pc, #20]	; (800f2b4 <vTaskInternalSetTimeOutState+0x28>)
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	605a      	str	r2, [r3, #4]
}
 800f2a4:	bf00      	nop
 800f2a6:	370c      	adds	r7, #12
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr
 800f2b0:	200051ac 	.word	0x200051ac
 800f2b4:	20005198 	.word	0x20005198

0800f2b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b088      	sub	sp, #32
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d10a      	bne.n	800f2de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2cc:	f383 8811 	msr	BASEPRI, r3
 800f2d0:	f3bf 8f6f 	isb	sy
 800f2d4:	f3bf 8f4f 	dsb	sy
 800f2d8:	613b      	str	r3, [r7, #16]
}
 800f2da:	bf00      	nop
 800f2dc:	e7fe      	b.n	800f2dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d10a      	bne.n	800f2fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e8:	f383 8811 	msr	BASEPRI, r3
 800f2ec:	f3bf 8f6f 	isb	sy
 800f2f0:	f3bf 8f4f 	dsb	sy
 800f2f4:	60fb      	str	r3, [r7, #12]
}
 800f2f6:	bf00      	nop
 800f2f8:	e7fe      	b.n	800f2f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f2fa:	f000 ffc3 	bl	8010284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f2fe:	4b1d      	ldr	r3, [pc, #116]	; (800f374 <xTaskCheckForTimeOut+0xbc>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	69ba      	ldr	r2, [r7, #24]
 800f30a:	1ad3      	subs	r3, r2, r3
 800f30c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f316:	d102      	bne.n	800f31e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f318:	2300      	movs	r3, #0
 800f31a:	61fb      	str	r3, [r7, #28]
 800f31c:	e023      	b.n	800f366 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	4b15      	ldr	r3, [pc, #84]	; (800f378 <xTaskCheckForTimeOut+0xc0>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	429a      	cmp	r2, r3
 800f328:	d007      	beq.n	800f33a <xTaskCheckForTimeOut+0x82>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	69ba      	ldr	r2, [r7, #24]
 800f330:	429a      	cmp	r2, r3
 800f332:	d302      	bcc.n	800f33a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f334:	2301      	movs	r3, #1
 800f336:	61fb      	str	r3, [r7, #28]
 800f338:	e015      	b.n	800f366 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	697a      	ldr	r2, [r7, #20]
 800f340:	429a      	cmp	r2, r3
 800f342:	d20b      	bcs.n	800f35c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	681a      	ldr	r2, [r3, #0]
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	1ad2      	subs	r2, r2, r3
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7ff ff9b 	bl	800f28c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f356:	2300      	movs	r3, #0
 800f358:	61fb      	str	r3, [r7, #28]
 800f35a:	e004      	b.n	800f366 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	2200      	movs	r2, #0
 800f360:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f362:	2301      	movs	r3, #1
 800f364:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f366:	f000 ffbd 	bl	80102e4 <vPortExitCritical>

	return xReturn;
 800f36a:	69fb      	ldr	r3, [r7, #28]
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3720      	adds	r7, #32
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	20005198 	.word	0x20005198
 800f378:	200051ac 	.word	0x200051ac

0800f37c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f37c:	b480      	push	{r7}
 800f37e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f380:	4b03      	ldr	r3, [pc, #12]	; (800f390 <vTaskMissedYield+0x14>)
 800f382:	2201      	movs	r2, #1
 800f384:	601a      	str	r2, [r3, #0]
}
 800f386:	bf00      	nop
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr
 800f390:	200051a8 	.word	0x200051a8

0800f394 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f39c:	f000 f852 	bl	800f444 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f3a0:	4b06      	ldr	r3, [pc, #24]	; (800f3bc <prvIdleTask+0x28>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d9f9      	bls.n	800f39c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f3a8:	4b05      	ldr	r3, [pc, #20]	; (800f3c0 <prvIdleTask+0x2c>)
 800f3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3ae:	601a      	str	r2, [r3, #0]
 800f3b0:	f3bf 8f4f 	dsb	sy
 800f3b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f3b8:	e7f0      	b.n	800f39c <prvIdleTask+0x8>
 800f3ba:	bf00      	nop
 800f3bc:	20004cc4 	.word	0x20004cc4
 800f3c0:	e000ed04 	.word	0xe000ed04

0800f3c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	607b      	str	r3, [r7, #4]
 800f3ce:	e00c      	b.n	800f3ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	4613      	mov	r3, r2
 800f3d4:	009b      	lsls	r3, r3, #2
 800f3d6:	4413      	add	r3, r2
 800f3d8:	009b      	lsls	r3, r3, #2
 800f3da:	4a12      	ldr	r2, [pc, #72]	; (800f424 <prvInitialiseTaskLists+0x60>)
 800f3dc:	4413      	add	r3, r2
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fe f9be 	bl	800d760 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	607b      	str	r3, [r7, #4]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2b37      	cmp	r3, #55	; 0x37
 800f3ee:	d9ef      	bls.n	800f3d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f3f0:	480d      	ldr	r0, [pc, #52]	; (800f428 <prvInitialiseTaskLists+0x64>)
 800f3f2:	f7fe f9b5 	bl	800d760 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f3f6:	480d      	ldr	r0, [pc, #52]	; (800f42c <prvInitialiseTaskLists+0x68>)
 800f3f8:	f7fe f9b2 	bl	800d760 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f3fc:	480c      	ldr	r0, [pc, #48]	; (800f430 <prvInitialiseTaskLists+0x6c>)
 800f3fe:	f7fe f9af 	bl	800d760 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f402:	480c      	ldr	r0, [pc, #48]	; (800f434 <prvInitialiseTaskLists+0x70>)
 800f404:	f7fe f9ac 	bl	800d760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f408:	480b      	ldr	r0, [pc, #44]	; (800f438 <prvInitialiseTaskLists+0x74>)
 800f40a:	f7fe f9a9 	bl	800d760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f40e:	4b0b      	ldr	r3, [pc, #44]	; (800f43c <prvInitialiseTaskLists+0x78>)
 800f410:	4a05      	ldr	r2, [pc, #20]	; (800f428 <prvInitialiseTaskLists+0x64>)
 800f412:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f414:	4b0a      	ldr	r3, [pc, #40]	; (800f440 <prvInitialiseTaskLists+0x7c>)
 800f416:	4a05      	ldr	r2, [pc, #20]	; (800f42c <prvInitialiseTaskLists+0x68>)
 800f418:	601a      	str	r2, [r3, #0]
}
 800f41a:	bf00      	nop
 800f41c:	3708      	adds	r7, #8
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	20004cc4 	.word	0x20004cc4
 800f428:	20005124 	.word	0x20005124
 800f42c:	20005138 	.word	0x20005138
 800f430:	20005154 	.word	0x20005154
 800f434:	20005168 	.word	0x20005168
 800f438:	20005180 	.word	0x20005180
 800f43c:	2000514c 	.word	0x2000514c
 800f440:	20005150 	.word	0x20005150

0800f444 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f44a:	e019      	b.n	800f480 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f44c:	f000 ff1a 	bl	8010284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f450:	4b10      	ldr	r3, [pc, #64]	; (800f494 <prvCheckTasksWaitingTermination+0x50>)
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	68db      	ldr	r3, [r3, #12]
 800f456:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	3304      	adds	r3, #4
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7fe fa09 	bl	800d874 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f462:	4b0d      	ldr	r3, [pc, #52]	; (800f498 <prvCheckTasksWaitingTermination+0x54>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	3b01      	subs	r3, #1
 800f468:	4a0b      	ldr	r2, [pc, #44]	; (800f498 <prvCheckTasksWaitingTermination+0x54>)
 800f46a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f46c:	4b0b      	ldr	r3, [pc, #44]	; (800f49c <prvCheckTasksWaitingTermination+0x58>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	3b01      	subs	r3, #1
 800f472:	4a0a      	ldr	r2, [pc, #40]	; (800f49c <prvCheckTasksWaitingTermination+0x58>)
 800f474:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f476:	f000 ff35 	bl	80102e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 f810 	bl	800f4a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f480:	4b06      	ldr	r3, [pc, #24]	; (800f49c <prvCheckTasksWaitingTermination+0x58>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d1e1      	bne.n	800f44c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f488:	bf00      	nop
 800f48a:	bf00      	nop
 800f48c:	3708      	adds	r7, #8
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	20005168 	.word	0x20005168
 800f498:	20005194 	.word	0x20005194
 800f49c:	2000517c 	.word	0x2000517c

0800f4a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b084      	sub	sp, #16
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d108      	bne.n	800f4c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f001 f8d2 	bl	8010660 <vPortFree>
				vPortFree( pxTCB );
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f001 f8cf 	bl	8010660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f4c2:	e018      	b.n	800f4f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f4ca:	2b01      	cmp	r3, #1
 800f4cc:	d103      	bne.n	800f4d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f001 f8c6 	bl	8010660 <vPortFree>
	}
 800f4d4:	e00f      	b.n	800f4f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f4dc:	2b02      	cmp	r3, #2
 800f4de:	d00a      	beq.n	800f4f6 <prvDeleteTCB+0x56>
	__asm volatile
 800f4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4e4:	f383 8811 	msr	BASEPRI, r3
 800f4e8:	f3bf 8f6f 	isb	sy
 800f4ec:	f3bf 8f4f 	dsb	sy
 800f4f0:	60fb      	str	r3, [r7, #12]
}
 800f4f2:	bf00      	nop
 800f4f4:	e7fe      	b.n	800f4f4 <prvDeleteTCB+0x54>
	}
 800f4f6:	bf00      	nop
 800f4f8:	3710      	adds	r7, #16
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
	...

0800f500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f506:	4b0c      	ldr	r3, [pc, #48]	; (800f538 <prvResetNextTaskUnblockTime+0x38>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d104      	bne.n	800f51a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f510:	4b0a      	ldr	r3, [pc, #40]	; (800f53c <prvResetNextTaskUnblockTime+0x3c>)
 800f512:	f04f 32ff 	mov.w	r2, #4294967295
 800f516:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f518:	e008      	b.n	800f52c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f51a:	4b07      	ldr	r3, [pc, #28]	; (800f538 <prvResetNextTaskUnblockTime+0x38>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	68db      	ldr	r3, [r3, #12]
 800f522:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	4a04      	ldr	r2, [pc, #16]	; (800f53c <prvResetNextTaskUnblockTime+0x3c>)
 800f52a:	6013      	str	r3, [r2, #0]
}
 800f52c:	bf00      	nop
 800f52e:	370c      	adds	r7, #12
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr
 800f538:	2000514c 	.word	0x2000514c
 800f53c:	200051b4 	.word	0x200051b4

0800f540 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f540:	b480      	push	{r7}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f546:	4b05      	ldr	r3, [pc, #20]	; (800f55c <xTaskGetCurrentTaskHandle+0x1c>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f54c:	687b      	ldr	r3, [r7, #4]
	}
 800f54e:	4618      	mov	r0, r3
 800f550:	370c      	adds	r7, #12
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	20004cc0 	.word	0x20004cc0

0800f560 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f560:	b480      	push	{r7}
 800f562:	b083      	sub	sp, #12
 800f564:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f566:	4b0b      	ldr	r3, [pc, #44]	; (800f594 <xTaskGetSchedulerState+0x34>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d102      	bne.n	800f574 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f56e:	2301      	movs	r3, #1
 800f570:	607b      	str	r3, [r7, #4]
 800f572:	e008      	b.n	800f586 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f574:	4b08      	ldr	r3, [pc, #32]	; (800f598 <xTaskGetSchedulerState+0x38>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d102      	bne.n	800f582 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f57c:	2302      	movs	r3, #2
 800f57e:	607b      	str	r3, [r7, #4]
 800f580:	e001      	b.n	800f586 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f582:	2300      	movs	r3, #0
 800f584:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f586:	687b      	ldr	r3, [r7, #4]
	}
 800f588:	4618      	mov	r0, r3
 800f58a:	370c      	adds	r7, #12
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr
 800f594:	200051a0 	.word	0x200051a0
 800f598:	200051bc 	.word	0x200051bc

0800f59c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d051      	beq.n	800f656 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5b6:	4b2a      	ldr	r3, [pc, #168]	; (800f660 <xTaskPriorityInherit+0xc4>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d241      	bcs.n	800f644 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	699b      	ldr	r3, [r3, #24]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	db06      	blt.n	800f5d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5c8:	4b25      	ldr	r3, [pc, #148]	; (800f660 <xTaskPriorityInherit+0xc4>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	6959      	ldr	r1, [r3, #20]
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5de:	4613      	mov	r3, r2
 800f5e0:	009b      	lsls	r3, r3, #2
 800f5e2:	4413      	add	r3, r2
 800f5e4:	009b      	lsls	r3, r3, #2
 800f5e6:	4a1f      	ldr	r2, [pc, #124]	; (800f664 <xTaskPriorityInherit+0xc8>)
 800f5e8:	4413      	add	r3, r2
 800f5ea:	4299      	cmp	r1, r3
 800f5ec:	d122      	bne.n	800f634 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	3304      	adds	r3, #4
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7fe f93e 	bl	800d874 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f5f8:	4b19      	ldr	r3, [pc, #100]	; (800f660 <xTaskPriorityInherit+0xc4>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f606:	4b18      	ldr	r3, [pc, #96]	; (800f668 <xTaskPriorityInherit+0xcc>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d903      	bls.n	800f616 <xTaskPriorityInherit+0x7a>
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f612:	4a15      	ldr	r2, [pc, #84]	; (800f668 <xTaskPriorityInherit+0xcc>)
 800f614:	6013      	str	r3, [r2, #0]
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f61a:	4613      	mov	r3, r2
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	4413      	add	r3, r2
 800f620:	009b      	lsls	r3, r3, #2
 800f622:	4a10      	ldr	r2, [pc, #64]	; (800f664 <xTaskPriorityInherit+0xc8>)
 800f624:	441a      	add	r2, r3
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	3304      	adds	r3, #4
 800f62a:	4619      	mov	r1, r3
 800f62c:	4610      	mov	r0, r2
 800f62e:	f7fe f8c4 	bl	800d7ba <vListInsertEnd>
 800f632:	e004      	b.n	800f63e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f634:	4b0a      	ldr	r3, [pc, #40]	; (800f660 <xTaskPriorityInherit+0xc4>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f63e:	2301      	movs	r3, #1
 800f640:	60fb      	str	r3, [r7, #12]
 800f642:	e008      	b.n	800f656 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f648:	4b05      	ldr	r3, [pc, #20]	; (800f660 <xTaskPriorityInherit+0xc4>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f64e:	429a      	cmp	r2, r3
 800f650:	d201      	bcs.n	800f656 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f652:	2301      	movs	r3, #1
 800f654:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f656:	68fb      	ldr	r3, [r7, #12]
	}
 800f658:	4618      	mov	r0, r3
 800f65a:	3710      	adds	r7, #16
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	20004cc0 	.word	0x20004cc0
 800f664:	20004cc4 	.word	0x20004cc4
 800f668:	2000519c 	.word	0x2000519c

0800f66c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b086      	sub	sp, #24
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f678:	2300      	movs	r3, #0
 800f67a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d056      	beq.n	800f730 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f682:	4b2e      	ldr	r3, [pc, #184]	; (800f73c <xTaskPriorityDisinherit+0xd0>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	693a      	ldr	r2, [r7, #16]
 800f688:	429a      	cmp	r2, r3
 800f68a:	d00a      	beq.n	800f6a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f690:	f383 8811 	msr	BASEPRI, r3
 800f694:	f3bf 8f6f 	isb	sy
 800f698:	f3bf 8f4f 	dsb	sy
 800f69c:	60fb      	str	r3, [r7, #12]
}
 800f69e:	bf00      	nop
 800f6a0:	e7fe      	b.n	800f6a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d10a      	bne.n	800f6c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ae:	f383 8811 	msr	BASEPRI, r3
 800f6b2:	f3bf 8f6f 	isb	sy
 800f6b6:	f3bf 8f4f 	dsb	sy
 800f6ba:	60bb      	str	r3, [r7, #8]
}
 800f6bc:	bf00      	nop
 800f6be:	e7fe      	b.n	800f6be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f6c4:	1e5a      	subs	r2, r3, #1
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d02c      	beq.n	800f730 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d128      	bne.n	800f730 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	3304      	adds	r3, #4
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fe f8c6 	bl	800d874 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f700:	4b0f      	ldr	r3, [pc, #60]	; (800f740 <xTaskPriorityDisinherit+0xd4>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	429a      	cmp	r2, r3
 800f706:	d903      	bls.n	800f710 <xTaskPriorityDisinherit+0xa4>
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f70c:	4a0c      	ldr	r2, [pc, #48]	; (800f740 <xTaskPriorityDisinherit+0xd4>)
 800f70e:	6013      	str	r3, [r2, #0]
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f714:	4613      	mov	r3, r2
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	4413      	add	r3, r2
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	4a09      	ldr	r2, [pc, #36]	; (800f744 <xTaskPriorityDisinherit+0xd8>)
 800f71e:	441a      	add	r2, r3
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	3304      	adds	r3, #4
 800f724:	4619      	mov	r1, r3
 800f726:	4610      	mov	r0, r2
 800f728:	f7fe f847 	bl	800d7ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f72c:	2301      	movs	r3, #1
 800f72e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f730:	697b      	ldr	r3, [r7, #20]
	}
 800f732:	4618      	mov	r0, r3
 800f734:	3718      	adds	r7, #24
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	20004cc0 	.word	0x20004cc0
 800f740:	2000519c 	.word	0x2000519c
 800f744:	20004cc4 	.word	0x20004cc4

0800f748 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b088      	sub	sp, #32
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f756:	2301      	movs	r3, #1
 800f758:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d06a      	beq.n	800f836 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f760:	69bb      	ldr	r3, [r7, #24]
 800f762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f764:	2b00      	cmp	r3, #0
 800f766:	d10a      	bne.n	800f77e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f76c:	f383 8811 	msr	BASEPRI, r3
 800f770:	f3bf 8f6f 	isb	sy
 800f774:	f3bf 8f4f 	dsb	sy
 800f778:	60fb      	str	r3, [r7, #12]
}
 800f77a:	bf00      	nop
 800f77c:	e7fe      	b.n	800f77c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f77e:	69bb      	ldr	r3, [r7, #24]
 800f780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f782:	683a      	ldr	r2, [r7, #0]
 800f784:	429a      	cmp	r2, r3
 800f786:	d902      	bls.n	800f78e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	61fb      	str	r3, [r7, #28]
 800f78c:	e002      	b.n	800f794 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f78e:	69bb      	ldr	r3, [r7, #24]
 800f790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f792:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f794:	69bb      	ldr	r3, [r7, #24]
 800f796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f798:	69fa      	ldr	r2, [r7, #28]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d04b      	beq.n	800f836 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f79e:	69bb      	ldr	r3, [r7, #24]
 800f7a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f7a2:	697a      	ldr	r2, [r7, #20]
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d146      	bne.n	800f836 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f7a8:	4b25      	ldr	r3, [pc, #148]	; (800f840 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	69ba      	ldr	r2, [r7, #24]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d10a      	bne.n	800f7c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b6:	f383 8811 	msr	BASEPRI, r3
 800f7ba:	f3bf 8f6f 	isb	sy
 800f7be:	f3bf 8f4f 	dsb	sy
 800f7c2:	60bb      	str	r3, [r7, #8]
}
 800f7c4:	bf00      	nop
 800f7c6:	e7fe      	b.n	800f7c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f7c8:	69bb      	ldr	r3, [r7, #24]
 800f7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f7ce:	69bb      	ldr	r3, [r7, #24]
 800f7d0:	69fa      	ldr	r2, [r7, #28]
 800f7d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f7d4:	69bb      	ldr	r3, [r7, #24]
 800f7d6:	699b      	ldr	r3, [r3, #24]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	db04      	blt.n	800f7e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7dc:	69fb      	ldr	r3, [r7, #28]
 800f7de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f7e2:	69bb      	ldr	r3, [r7, #24]
 800f7e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f7e6:	69bb      	ldr	r3, [r7, #24]
 800f7e8:	6959      	ldr	r1, [r3, #20]
 800f7ea:	693a      	ldr	r2, [r7, #16]
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	4413      	add	r3, r2
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	4a13      	ldr	r2, [pc, #76]	; (800f844 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f7f6:	4413      	add	r3, r2
 800f7f8:	4299      	cmp	r1, r3
 800f7fa:	d11c      	bne.n	800f836 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7fc:	69bb      	ldr	r3, [r7, #24]
 800f7fe:	3304      	adds	r3, #4
 800f800:	4618      	mov	r0, r3
 800f802:	f7fe f837 	bl	800d874 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f806:	69bb      	ldr	r3, [r7, #24]
 800f808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f80a:	4b0f      	ldr	r3, [pc, #60]	; (800f848 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	429a      	cmp	r2, r3
 800f810:	d903      	bls.n	800f81a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f812:	69bb      	ldr	r3, [r7, #24]
 800f814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f816:	4a0c      	ldr	r2, [pc, #48]	; (800f848 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f818:	6013      	str	r3, [r2, #0]
 800f81a:	69bb      	ldr	r3, [r7, #24]
 800f81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f81e:	4613      	mov	r3, r2
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	4413      	add	r3, r2
 800f824:	009b      	lsls	r3, r3, #2
 800f826:	4a07      	ldr	r2, [pc, #28]	; (800f844 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f828:	441a      	add	r2, r3
 800f82a:	69bb      	ldr	r3, [r7, #24]
 800f82c:	3304      	adds	r3, #4
 800f82e:	4619      	mov	r1, r3
 800f830:	4610      	mov	r0, r2
 800f832:	f7fd ffc2 	bl	800d7ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f836:	bf00      	nop
 800f838:	3720      	adds	r7, #32
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	20004cc0 	.word	0x20004cc0
 800f844:	20004cc4 	.word	0x20004cc4
 800f848:	2000519c 	.word	0x2000519c

0800f84c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800f852:	4b09      	ldr	r3, [pc, #36]	; (800f878 <uxTaskResetEventItemValue+0x2c>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	699b      	ldr	r3, [r3, #24]
 800f858:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f85a:	4b07      	ldr	r3, [pc, #28]	; (800f878 <uxTaskResetEventItemValue+0x2c>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f860:	4b05      	ldr	r3, [pc, #20]	; (800f878 <uxTaskResetEventItemValue+0x2c>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800f868:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800f86a:	687b      	ldr	r3, [r7, #4]
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	370c      	adds	r7, #12
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr
 800f878:	20004cc0 	.word	0x20004cc0

0800f87c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f87c:	b480      	push	{r7}
 800f87e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f880:	4b07      	ldr	r3, [pc, #28]	; (800f8a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d004      	beq.n	800f892 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f888:	4b05      	ldr	r3, [pc, #20]	; (800f8a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f88e:	3201      	adds	r2, #1
 800f890:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 800f892:	4b03      	ldr	r3, [pc, #12]	; (800f8a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f894:	681b      	ldr	r3, [r3, #0]
	}
 800f896:	4618      	mov	r0, r3
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr
 800f8a0:	20004cc0 	.word	0x20004cc0

0800f8a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f8ae:	4b21      	ldr	r3, [pc, #132]	; (800f934 <prvAddCurrentTaskToDelayedList+0x90>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8b4:	4b20      	ldr	r3, [pc, #128]	; (800f938 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	3304      	adds	r3, #4
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fd ffda 	bl	800d874 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8c6:	d10a      	bne.n	800f8de <prvAddCurrentTaskToDelayedList+0x3a>
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d007      	beq.n	800f8de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8ce:	4b1a      	ldr	r3, [pc, #104]	; (800f938 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	3304      	adds	r3, #4
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	4819      	ldr	r0, [pc, #100]	; (800f93c <prvAddCurrentTaskToDelayedList+0x98>)
 800f8d8:	f7fd ff6f 	bl	800d7ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f8dc:	e026      	b.n	800f92c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f8de:	68fa      	ldr	r2, [r7, #12]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	4413      	add	r3, r2
 800f8e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f8e6:	4b14      	ldr	r3, [pc, #80]	; (800f938 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	68ba      	ldr	r2, [r7, #8]
 800f8ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f8ee:	68ba      	ldr	r2, [r7, #8]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d209      	bcs.n	800f90a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8f6:	4b12      	ldr	r3, [pc, #72]	; (800f940 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	4b0f      	ldr	r3, [pc, #60]	; (800f938 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	3304      	adds	r3, #4
 800f900:	4619      	mov	r1, r3
 800f902:	4610      	mov	r0, r2
 800f904:	f7fd ff7d 	bl	800d802 <vListInsert>
}
 800f908:	e010      	b.n	800f92c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f90a:	4b0e      	ldr	r3, [pc, #56]	; (800f944 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	4b0a      	ldr	r3, [pc, #40]	; (800f938 <prvAddCurrentTaskToDelayedList+0x94>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	3304      	adds	r3, #4
 800f914:	4619      	mov	r1, r3
 800f916:	4610      	mov	r0, r2
 800f918:	f7fd ff73 	bl	800d802 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f91c:	4b0a      	ldr	r3, [pc, #40]	; (800f948 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	68ba      	ldr	r2, [r7, #8]
 800f922:	429a      	cmp	r2, r3
 800f924:	d202      	bcs.n	800f92c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f926:	4a08      	ldr	r2, [pc, #32]	; (800f948 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	6013      	str	r3, [r2, #0]
}
 800f92c:	bf00      	nop
 800f92e:	3710      	adds	r7, #16
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}
 800f934:	20005198 	.word	0x20005198
 800f938:	20004cc0 	.word	0x20004cc0
 800f93c:	20005180 	.word	0x20005180
 800f940:	20005150 	.word	0x20005150
 800f944:	2000514c 	.word	0x2000514c
 800f948:	200051b4 	.word	0x200051b4

0800f94c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b08a      	sub	sp, #40	; 0x28
 800f950:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f952:	2300      	movs	r3, #0
 800f954:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f956:	f000 fb07 	bl	800ff68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f95a:	4b1c      	ldr	r3, [pc, #112]	; (800f9cc <xTimerCreateTimerTask+0x80>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d021      	beq.n	800f9a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f962:	2300      	movs	r3, #0
 800f964:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f966:	2300      	movs	r3, #0
 800f968:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f96a:	1d3a      	adds	r2, r7, #4
 800f96c:	f107 0108 	add.w	r1, r7, #8
 800f970:	f107 030c 	add.w	r3, r7, #12
 800f974:	4618      	mov	r0, r3
 800f976:	f7fd fceb 	bl	800d350 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f97a:	6879      	ldr	r1, [r7, #4]
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	68fa      	ldr	r2, [r7, #12]
 800f980:	9202      	str	r2, [sp, #8]
 800f982:	9301      	str	r3, [sp, #4]
 800f984:	2302      	movs	r3, #2
 800f986:	9300      	str	r3, [sp, #0]
 800f988:	2300      	movs	r3, #0
 800f98a:	460a      	mov	r2, r1
 800f98c:	4910      	ldr	r1, [pc, #64]	; (800f9d0 <xTimerCreateTimerTask+0x84>)
 800f98e:	4811      	ldr	r0, [pc, #68]	; (800f9d4 <xTimerCreateTimerTask+0x88>)
 800f990:	f7fe ff1a 	bl	800e7c8 <xTaskCreateStatic>
 800f994:	4603      	mov	r3, r0
 800f996:	4a10      	ldr	r2, [pc, #64]	; (800f9d8 <xTimerCreateTimerTask+0x8c>)
 800f998:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f99a:	4b0f      	ldr	r3, [pc, #60]	; (800f9d8 <xTimerCreateTimerTask+0x8c>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d001      	beq.n	800f9a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d10a      	bne.n	800f9c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b0:	f383 8811 	msr	BASEPRI, r3
 800f9b4:	f3bf 8f6f 	isb	sy
 800f9b8:	f3bf 8f4f 	dsb	sy
 800f9bc:	613b      	str	r3, [r7, #16]
}
 800f9be:	bf00      	nop
 800f9c0:	e7fe      	b.n	800f9c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f9c2:	697b      	ldr	r3, [r7, #20]
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	3718      	adds	r7, #24
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}
 800f9cc:	200051f0 	.word	0x200051f0
 800f9d0:	08015404 	.word	0x08015404
 800f9d4:	0800fb11 	.word	0x0800fb11
 800f9d8:	200051f4 	.word	0x200051f4

0800f9dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b08a      	sub	sp, #40	; 0x28
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	60f8      	str	r0, [r7, #12]
 800f9e4:	60b9      	str	r1, [r7, #8]
 800f9e6:	607a      	str	r2, [r7, #4]
 800f9e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d10a      	bne.n	800fa0a <xTimerGenericCommand+0x2e>
	__asm volatile
 800f9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f8:	f383 8811 	msr	BASEPRI, r3
 800f9fc:	f3bf 8f6f 	isb	sy
 800fa00:	f3bf 8f4f 	dsb	sy
 800fa04:	623b      	str	r3, [r7, #32]
}
 800fa06:	bf00      	nop
 800fa08:	e7fe      	b.n	800fa08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fa0a:	4b1a      	ldr	r3, [pc, #104]	; (800fa74 <xTimerGenericCommand+0x98>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d02a      	beq.n	800fa68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	2b05      	cmp	r3, #5
 800fa22:	dc18      	bgt.n	800fa56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fa24:	f7ff fd9c 	bl	800f560 <xTaskGetSchedulerState>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b02      	cmp	r3, #2
 800fa2c:	d109      	bne.n	800fa42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fa2e:	4b11      	ldr	r3, [pc, #68]	; (800fa74 <xTimerGenericCommand+0x98>)
 800fa30:	6818      	ldr	r0, [r3, #0]
 800fa32:	f107 0110 	add.w	r1, r7, #16
 800fa36:	2300      	movs	r3, #0
 800fa38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa3a:	f7fe f939 	bl	800dcb0 <xQueueGenericSend>
 800fa3e:	6278      	str	r0, [r7, #36]	; 0x24
 800fa40:	e012      	b.n	800fa68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fa42:	4b0c      	ldr	r3, [pc, #48]	; (800fa74 <xTimerGenericCommand+0x98>)
 800fa44:	6818      	ldr	r0, [r3, #0]
 800fa46:	f107 0110 	add.w	r1, r7, #16
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	f7fe f92f 	bl	800dcb0 <xQueueGenericSend>
 800fa52:	6278      	str	r0, [r7, #36]	; 0x24
 800fa54:	e008      	b.n	800fa68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fa56:	4b07      	ldr	r3, [pc, #28]	; (800fa74 <xTimerGenericCommand+0x98>)
 800fa58:	6818      	ldr	r0, [r3, #0]
 800fa5a:	f107 0110 	add.w	r1, r7, #16
 800fa5e:	2300      	movs	r3, #0
 800fa60:	683a      	ldr	r2, [r7, #0]
 800fa62:	f7fe fa23 	bl	800deac <xQueueGenericSendFromISR>
 800fa66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3728      	adds	r7, #40	; 0x28
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	200051f0 	.word	0x200051f0

0800fa78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b088      	sub	sp, #32
 800fa7c:	af02      	add	r7, sp, #8
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa82:	4b22      	ldr	r3, [pc, #136]	; (800fb0c <prvProcessExpiredTimer+0x94>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	68db      	ldr	r3, [r3, #12]
 800fa88:	68db      	ldr	r3, [r3, #12]
 800fa8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	3304      	adds	r3, #4
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7fd feef 	bl	800d874 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa9c:	f003 0304 	and.w	r3, r3, #4
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d022      	beq.n	800faea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	699a      	ldr	r2, [r3, #24]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	18d1      	adds	r1, r2, r3
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	683a      	ldr	r2, [r7, #0]
 800fab0:	6978      	ldr	r0, [r7, #20]
 800fab2:	f000 f8d1 	bl	800fc58 <prvInsertTimerInActiveList>
 800fab6:	4603      	mov	r3, r0
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d01f      	beq.n	800fafc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fabc:	2300      	movs	r3, #0
 800fabe:	9300      	str	r3, [sp, #0]
 800fac0:	2300      	movs	r3, #0
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	2100      	movs	r1, #0
 800fac6:	6978      	ldr	r0, [r7, #20]
 800fac8:	f7ff ff88 	bl	800f9dc <xTimerGenericCommand>
 800facc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d113      	bne.n	800fafc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad8:	f383 8811 	msr	BASEPRI, r3
 800fadc:	f3bf 8f6f 	isb	sy
 800fae0:	f3bf 8f4f 	dsb	sy
 800fae4:	60fb      	str	r3, [r7, #12]
}
 800fae6:	bf00      	nop
 800fae8:	e7fe      	b.n	800fae8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800faf0:	f023 0301 	bic.w	r3, r3, #1
 800faf4:	b2da      	uxtb	r2, r3
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	6a1b      	ldr	r3, [r3, #32]
 800fb00:	6978      	ldr	r0, [r7, #20]
 800fb02:	4798      	blx	r3
}
 800fb04:	bf00      	nop
 800fb06:	3718      	adds	r7, #24
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	200051e8 	.word	0x200051e8

0800fb10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb18:	f107 0308 	add.w	r3, r7, #8
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f000 f857 	bl	800fbd0 <prvGetNextExpireTime>
 800fb22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	4619      	mov	r1, r3
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	f000 f803 	bl	800fb34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fb2e:	f000 f8d5 	bl	800fcdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb32:	e7f1      	b.n	800fb18 <prvTimerTask+0x8>

0800fb34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b084      	sub	sp, #16
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fb3e:	f7ff f87f 	bl	800ec40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb42:	f107 0308 	add.w	r3, r7, #8
 800fb46:	4618      	mov	r0, r3
 800fb48:	f000 f866 	bl	800fc18 <prvSampleTimeNow>
 800fb4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d130      	bne.n	800fbb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10a      	bne.n	800fb70 <prvProcessTimerOrBlockTask+0x3c>
 800fb5a:	687a      	ldr	r2, [r7, #4]
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d806      	bhi.n	800fb70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fb62:	f7ff f87b 	bl	800ec5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fb66:	68f9      	ldr	r1, [r7, #12]
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f7ff ff85 	bl	800fa78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fb6e:	e024      	b.n	800fbba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d008      	beq.n	800fb88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fb76:	4b13      	ldr	r3, [pc, #76]	; (800fbc4 <prvProcessTimerOrBlockTask+0x90>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d101      	bne.n	800fb84 <prvProcessTimerOrBlockTask+0x50>
 800fb80:	2301      	movs	r3, #1
 800fb82:	e000      	b.n	800fb86 <prvProcessTimerOrBlockTask+0x52>
 800fb84:	2300      	movs	r3, #0
 800fb86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fb88:	4b0f      	ldr	r3, [pc, #60]	; (800fbc8 <prvProcessTimerOrBlockTask+0x94>)
 800fb8a:	6818      	ldr	r0, [r3, #0]
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	1ad3      	subs	r3, r2, r3
 800fb92:	683a      	ldr	r2, [r7, #0]
 800fb94:	4619      	mov	r1, r3
 800fb96:	f7fe fde3 	bl	800e760 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fb9a:	f7ff f85f 	bl	800ec5c <xTaskResumeAll>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d10a      	bne.n	800fbba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fba4:	4b09      	ldr	r3, [pc, #36]	; (800fbcc <prvProcessTimerOrBlockTask+0x98>)
 800fba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbaa:	601a      	str	r2, [r3, #0]
 800fbac:	f3bf 8f4f 	dsb	sy
 800fbb0:	f3bf 8f6f 	isb	sy
}
 800fbb4:	e001      	b.n	800fbba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fbb6:	f7ff f851 	bl	800ec5c <xTaskResumeAll>
}
 800fbba:	bf00      	nop
 800fbbc:	3710      	adds	r7, #16
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	200051ec 	.word	0x200051ec
 800fbc8:	200051f0 	.word	0x200051f0
 800fbcc:	e000ed04 	.word	0xe000ed04

0800fbd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b085      	sub	sp, #20
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fbd8:	4b0e      	ldr	r3, [pc, #56]	; (800fc14 <prvGetNextExpireTime+0x44>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d101      	bne.n	800fbe6 <prvGetNextExpireTime+0x16>
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	e000      	b.n	800fbe8 <prvGetNextExpireTime+0x18>
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d105      	bne.n	800fc00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fbf4:	4b07      	ldr	r3, [pc, #28]	; (800fc14 <prvGetNextExpireTime+0x44>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	68db      	ldr	r3, [r3, #12]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	60fb      	str	r3, [r7, #12]
 800fbfe:	e001      	b.n	800fc04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fc00:	2300      	movs	r3, #0
 800fc02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fc04:	68fb      	ldr	r3, [r7, #12]
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3714      	adds	r7, #20
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop
 800fc14:	200051e8 	.word	0x200051e8

0800fc18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b084      	sub	sp, #16
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fc20:	f7ff f8ba 	bl	800ed98 <xTaskGetTickCount>
 800fc24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fc26:	4b0b      	ldr	r3, [pc, #44]	; (800fc54 <prvSampleTimeNow+0x3c>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	68fa      	ldr	r2, [r7, #12]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d205      	bcs.n	800fc3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fc30:	f000 f936 	bl	800fea0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2201      	movs	r2, #1
 800fc38:	601a      	str	r2, [r3, #0]
 800fc3a:	e002      	b.n	800fc42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fc42:	4a04      	ldr	r2, [pc, #16]	; (800fc54 <prvSampleTimeNow+0x3c>)
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fc48:	68fb      	ldr	r3, [r7, #12]
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3710      	adds	r7, #16
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
 800fc52:	bf00      	nop
 800fc54:	200051f8 	.word	0x200051f8

0800fc58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b086      	sub	sp, #24
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	60b9      	str	r1, [r7, #8]
 800fc62:	607a      	str	r2, [r7, #4]
 800fc64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fc66:	2300      	movs	r3, #0
 800fc68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	68ba      	ldr	r2, [r7, #8]
 800fc6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	68fa      	ldr	r2, [r7, #12]
 800fc74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fc76:	68ba      	ldr	r2, [r7, #8]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d812      	bhi.n	800fca4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	1ad2      	subs	r2, r2, r3
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	699b      	ldr	r3, [r3, #24]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d302      	bcc.n	800fc92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	617b      	str	r3, [r7, #20]
 800fc90:	e01b      	b.n	800fcca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fc92:	4b10      	ldr	r3, [pc, #64]	; (800fcd4 <prvInsertTimerInActiveList+0x7c>)
 800fc94:	681a      	ldr	r2, [r3, #0]
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	3304      	adds	r3, #4
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	4610      	mov	r0, r2
 800fc9e:	f7fd fdb0 	bl	800d802 <vListInsert>
 800fca2:	e012      	b.n	800fcca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fca4:	687a      	ldr	r2, [r7, #4]
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d206      	bcs.n	800fcba <prvInsertTimerInActiveList+0x62>
 800fcac:	68ba      	ldr	r2, [r7, #8]
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d302      	bcc.n	800fcba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	617b      	str	r3, [r7, #20]
 800fcb8:	e007      	b.n	800fcca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fcba:	4b07      	ldr	r3, [pc, #28]	; (800fcd8 <prvInsertTimerInActiveList+0x80>)
 800fcbc:	681a      	ldr	r2, [r3, #0]
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	3304      	adds	r3, #4
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	4610      	mov	r0, r2
 800fcc6:	f7fd fd9c 	bl	800d802 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fcca:	697b      	ldr	r3, [r7, #20]
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3718      	adds	r7, #24
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	200051ec 	.word	0x200051ec
 800fcd8:	200051e8 	.word	0x200051e8

0800fcdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b08e      	sub	sp, #56	; 0x38
 800fce0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fce2:	e0ca      	b.n	800fe7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	da18      	bge.n	800fd1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fcea:	1d3b      	adds	r3, r7, #4
 800fcec:	3304      	adds	r3, #4
 800fcee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d10a      	bne.n	800fd0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcfa:	f383 8811 	msr	BASEPRI, r3
 800fcfe:	f3bf 8f6f 	isb	sy
 800fd02:	f3bf 8f4f 	dsb	sy
 800fd06:	61fb      	str	r3, [r7, #28]
}
 800fd08:	bf00      	nop
 800fd0a:	e7fe      	b.n	800fd0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd12:	6850      	ldr	r0, [r2, #4]
 800fd14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd16:	6892      	ldr	r2, [r2, #8]
 800fd18:	4611      	mov	r1, r2
 800fd1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	f2c0 80aa 	blt.w	800fe78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2a:	695b      	ldr	r3, [r3, #20]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d004      	beq.n	800fd3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd32:	3304      	adds	r3, #4
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7fd fd9d 	bl	800d874 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd3a:	463b      	mov	r3, r7
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7ff ff6b 	bl	800fc18 <prvSampleTimeNow>
 800fd42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2b09      	cmp	r3, #9
 800fd48:	f200 8097 	bhi.w	800fe7a <prvProcessReceivedCommands+0x19e>
 800fd4c:	a201      	add	r2, pc, #4	; (adr r2, 800fd54 <prvProcessReceivedCommands+0x78>)
 800fd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd52:	bf00      	nop
 800fd54:	0800fd7d 	.word	0x0800fd7d
 800fd58:	0800fd7d 	.word	0x0800fd7d
 800fd5c:	0800fd7d 	.word	0x0800fd7d
 800fd60:	0800fdf1 	.word	0x0800fdf1
 800fd64:	0800fe05 	.word	0x0800fe05
 800fd68:	0800fe4f 	.word	0x0800fe4f
 800fd6c:	0800fd7d 	.word	0x0800fd7d
 800fd70:	0800fd7d 	.word	0x0800fd7d
 800fd74:	0800fdf1 	.word	0x0800fdf1
 800fd78:	0800fe05 	.word	0x0800fe05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd82:	f043 0301 	orr.w	r3, r3, #1
 800fd86:	b2da      	uxtb	r2, r3
 800fd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fd8e:	68ba      	ldr	r2, [r7, #8]
 800fd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd92:	699b      	ldr	r3, [r3, #24]
 800fd94:	18d1      	adds	r1, r2, r3
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd9c:	f7ff ff5c 	bl	800fc58 <prvInsertTimerInActiveList>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d069      	beq.n	800fe7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda8:	6a1b      	ldr	r3, [r3, #32]
 800fdaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdb4:	f003 0304 	and.w	r3, r3, #4
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d05e      	beq.n	800fe7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fdbc:	68ba      	ldr	r2, [r7, #8]
 800fdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc0:	699b      	ldr	r3, [r3, #24]
 800fdc2:	441a      	add	r2, r3
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	9300      	str	r3, [sp, #0]
 800fdc8:	2300      	movs	r3, #0
 800fdca:	2100      	movs	r1, #0
 800fdcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdce:	f7ff fe05 	bl	800f9dc <xTimerGenericCommand>
 800fdd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fdd4:	6a3b      	ldr	r3, [r7, #32]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d14f      	bne.n	800fe7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdde:	f383 8811 	msr	BASEPRI, r3
 800fde2:	f3bf 8f6f 	isb	sy
 800fde6:	f3bf 8f4f 	dsb	sy
 800fdea:	61bb      	str	r3, [r7, #24]
}
 800fdec:	bf00      	nop
 800fdee:	e7fe      	b.n	800fdee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdf6:	f023 0301 	bic.w	r3, r3, #1
 800fdfa:	b2da      	uxtb	r2, r3
 800fdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fe02:	e03a      	b.n	800fe7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe0a:	f043 0301 	orr.w	r3, r3, #1
 800fe0e:	b2da      	uxtb	r2, r3
 800fe10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fe16:	68ba      	ldr	r2, [r7, #8]
 800fe18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fe1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe1e:	699b      	ldr	r3, [r3, #24]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d10a      	bne.n	800fe3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fe24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe28:	f383 8811 	msr	BASEPRI, r3
 800fe2c:	f3bf 8f6f 	isb	sy
 800fe30:	f3bf 8f4f 	dsb	sy
 800fe34:	617b      	str	r3, [r7, #20]
}
 800fe36:	bf00      	nop
 800fe38:	e7fe      	b.n	800fe38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fe3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3c:	699a      	ldr	r2, [r3, #24]
 800fe3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe40:	18d1      	adds	r1, r2, r3
 800fe42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe48:	f7ff ff06 	bl	800fc58 <prvInsertTimerInActiveList>
					break;
 800fe4c:	e015      	b.n	800fe7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fe4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe54:	f003 0302 	and.w	r3, r3, #2
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d103      	bne.n	800fe64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fe5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe5e:	f000 fbff 	bl	8010660 <vPortFree>
 800fe62:	e00a      	b.n	800fe7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe6a:	f023 0301 	bic.w	r3, r3, #1
 800fe6e:	b2da      	uxtb	r2, r3
 800fe70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fe76:	e000      	b.n	800fe7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fe78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fe7a:	4b08      	ldr	r3, [pc, #32]	; (800fe9c <prvProcessReceivedCommands+0x1c0>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	1d39      	adds	r1, r7, #4
 800fe80:	2200      	movs	r2, #0
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7fe f8ae 	bl	800dfe4 <xQueueReceive>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	f47f af2a 	bne.w	800fce4 <prvProcessReceivedCommands+0x8>
	}
}
 800fe90:	bf00      	nop
 800fe92:	bf00      	nop
 800fe94:	3730      	adds	r7, #48	; 0x30
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	200051f0 	.word	0x200051f0

0800fea0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b088      	sub	sp, #32
 800fea4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fea6:	e048      	b.n	800ff3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fea8:	4b2d      	ldr	r3, [pc, #180]	; (800ff60 <prvSwitchTimerLists+0xc0>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feb2:	4b2b      	ldr	r3, [pc, #172]	; (800ff60 <prvSwitchTimerLists+0xc0>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	68db      	ldr	r3, [r3, #12]
 800feba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	3304      	adds	r3, #4
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7fd fcd7 	bl	800d874 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	6a1b      	ldr	r3, [r3, #32]
 800feca:	68f8      	ldr	r0, [r7, #12]
 800fecc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fed4:	f003 0304 	and.w	r3, r3, #4
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d02e      	beq.n	800ff3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	699b      	ldr	r3, [r3, #24]
 800fee0:	693a      	ldr	r2, [r7, #16]
 800fee2:	4413      	add	r3, r2
 800fee4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fee6:	68ba      	ldr	r2, [r7, #8]
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	429a      	cmp	r2, r3
 800feec:	d90e      	bls.n	800ff0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	68ba      	ldr	r2, [r7, #8]
 800fef2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	68fa      	ldr	r2, [r7, #12]
 800fef8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fefa:	4b19      	ldr	r3, [pc, #100]	; (800ff60 <prvSwitchTimerLists+0xc0>)
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	3304      	adds	r3, #4
 800ff02:	4619      	mov	r1, r3
 800ff04:	4610      	mov	r0, r2
 800ff06:	f7fd fc7c 	bl	800d802 <vListInsert>
 800ff0a:	e016      	b.n	800ff3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	9300      	str	r3, [sp, #0]
 800ff10:	2300      	movs	r3, #0
 800ff12:	693a      	ldr	r2, [r7, #16]
 800ff14:	2100      	movs	r1, #0
 800ff16:	68f8      	ldr	r0, [r7, #12]
 800ff18:	f7ff fd60 	bl	800f9dc <xTimerGenericCommand>
 800ff1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d10a      	bne.n	800ff3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ff24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff28:	f383 8811 	msr	BASEPRI, r3
 800ff2c:	f3bf 8f6f 	isb	sy
 800ff30:	f3bf 8f4f 	dsb	sy
 800ff34:	603b      	str	r3, [r7, #0]
}
 800ff36:	bf00      	nop
 800ff38:	e7fe      	b.n	800ff38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff3a:	4b09      	ldr	r3, [pc, #36]	; (800ff60 <prvSwitchTimerLists+0xc0>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d1b1      	bne.n	800fea8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ff44:	4b06      	ldr	r3, [pc, #24]	; (800ff60 <prvSwitchTimerLists+0xc0>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ff4a:	4b06      	ldr	r3, [pc, #24]	; (800ff64 <prvSwitchTimerLists+0xc4>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	4a04      	ldr	r2, [pc, #16]	; (800ff60 <prvSwitchTimerLists+0xc0>)
 800ff50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ff52:	4a04      	ldr	r2, [pc, #16]	; (800ff64 <prvSwitchTimerLists+0xc4>)
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	6013      	str	r3, [r2, #0]
}
 800ff58:	bf00      	nop
 800ff5a:	3718      	adds	r7, #24
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}
 800ff60:	200051e8 	.word	0x200051e8
 800ff64:	200051ec 	.word	0x200051ec

0800ff68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ff6e:	f000 f989 	bl	8010284 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ff72:	4b15      	ldr	r3, [pc, #84]	; (800ffc8 <prvCheckForValidListAndQueue+0x60>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d120      	bne.n	800ffbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ff7a:	4814      	ldr	r0, [pc, #80]	; (800ffcc <prvCheckForValidListAndQueue+0x64>)
 800ff7c:	f7fd fbf0 	bl	800d760 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ff80:	4813      	ldr	r0, [pc, #76]	; (800ffd0 <prvCheckForValidListAndQueue+0x68>)
 800ff82:	f7fd fbed 	bl	800d760 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ff86:	4b13      	ldr	r3, [pc, #76]	; (800ffd4 <prvCheckForValidListAndQueue+0x6c>)
 800ff88:	4a10      	ldr	r2, [pc, #64]	; (800ffcc <prvCheckForValidListAndQueue+0x64>)
 800ff8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ff8c:	4b12      	ldr	r3, [pc, #72]	; (800ffd8 <prvCheckForValidListAndQueue+0x70>)
 800ff8e:	4a10      	ldr	r2, [pc, #64]	; (800ffd0 <prvCheckForValidListAndQueue+0x68>)
 800ff90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ff92:	2300      	movs	r3, #0
 800ff94:	9300      	str	r3, [sp, #0]
 800ff96:	4b11      	ldr	r3, [pc, #68]	; (800ffdc <prvCheckForValidListAndQueue+0x74>)
 800ff98:	4a11      	ldr	r2, [pc, #68]	; (800ffe0 <prvCheckForValidListAndQueue+0x78>)
 800ff9a:	2110      	movs	r1, #16
 800ff9c:	200a      	movs	r0, #10
 800ff9e:	f7fd fcfb 	bl	800d998 <xQueueGenericCreateStatic>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	4a08      	ldr	r2, [pc, #32]	; (800ffc8 <prvCheckForValidListAndQueue+0x60>)
 800ffa6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ffa8:	4b07      	ldr	r3, [pc, #28]	; (800ffc8 <prvCheckForValidListAndQueue+0x60>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d005      	beq.n	800ffbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ffb0:	4b05      	ldr	r3, [pc, #20]	; (800ffc8 <prvCheckForValidListAndQueue+0x60>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	490b      	ldr	r1, [pc, #44]	; (800ffe4 <prvCheckForValidListAndQueue+0x7c>)
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fe fba8 	bl	800e70c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ffbc:	f000 f992 	bl	80102e4 <vPortExitCritical>
}
 800ffc0:	bf00      	nop
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	200051f0 	.word	0x200051f0
 800ffcc:	200051c0 	.word	0x200051c0
 800ffd0:	200051d4 	.word	0x200051d4
 800ffd4:	200051e8 	.word	0x200051e8
 800ffd8:	200051ec 	.word	0x200051ec
 800ffdc:	2000529c 	.word	0x2000529c
 800ffe0:	200051fc 	.word	0x200051fc
 800ffe4:	0801540c 	.word	0x0801540c

0800ffe8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b08a      	sub	sp, #40	; 0x28
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	60f8      	str	r0, [r7, #12]
 800fff0:	60b9      	str	r1, [r7, #8]
 800fff2:	607a      	str	r2, [r7, #4]
 800fff4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800fff6:	f06f 0301 	mvn.w	r3, #1
 800fffa:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010008:	4b06      	ldr	r3, [pc, #24]	; (8010024 <xTimerPendFunctionCallFromISR+0x3c>)
 801000a:	6818      	ldr	r0, [r3, #0]
 801000c:	f107 0114 	add.w	r1, r7, #20
 8010010:	2300      	movs	r3, #0
 8010012:	683a      	ldr	r2, [r7, #0]
 8010014:	f7fd ff4a 	bl	800deac <xQueueGenericSendFromISR>
 8010018:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801001a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801001c:	4618      	mov	r0, r3
 801001e:	3728      	adds	r7, #40	; 0x28
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}
 8010024:	200051f0 	.word	0x200051f0

08010028 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010028:	b480      	push	{r7}
 801002a:	b085      	sub	sp, #20
 801002c:	af00      	add	r7, sp, #0
 801002e:	60f8      	str	r0, [r7, #12]
 8010030:	60b9      	str	r1, [r7, #8]
 8010032:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	3b04      	subs	r3, #4
 8010038:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	3b04      	subs	r3, #4
 8010046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	f023 0201 	bic.w	r2, r3, #1
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	3b04      	subs	r3, #4
 8010056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010058:	4a0c      	ldr	r2, [pc, #48]	; (801008c <pxPortInitialiseStack+0x64>)
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	3b14      	subs	r3, #20
 8010062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010064:	687a      	ldr	r2, [r7, #4]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	3b04      	subs	r3, #4
 801006e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f06f 0202 	mvn.w	r2, #2
 8010076:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	3b20      	subs	r3, #32
 801007c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801007e:	68fb      	ldr	r3, [r7, #12]
}
 8010080:	4618      	mov	r0, r3
 8010082:	3714      	adds	r7, #20
 8010084:	46bd      	mov	sp, r7
 8010086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008a:	4770      	bx	lr
 801008c:	08010091 	.word	0x08010091

08010090 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010090:	b480      	push	{r7}
 8010092:	b085      	sub	sp, #20
 8010094:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010096:	2300      	movs	r3, #0
 8010098:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801009a:	4b12      	ldr	r3, [pc, #72]	; (80100e4 <prvTaskExitError+0x54>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100a2:	d00a      	beq.n	80100ba <prvTaskExitError+0x2a>
	__asm volatile
 80100a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a8:	f383 8811 	msr	BASEPRI, r3
 80100ac:	f3bf 8f6f 	isb	sy
 80100b0:	f3bf 8f4f 	dsb	sy
 80100b4:	60fb      	str	r3, [r7, #12]
}
 80100b6:	bf00      	nop
 80100b8:	e7fe      	b.n	80100b8 <prvTaskExitError+0x28>
	__asm volatile
 80100ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100be:	f383 8811 	msr	BASEPRI, r3
 80100c2:	f3bf 8f6f 	isb	sy
 80100c6:	f3bf 8f4f 	dsb	sy
 80100ca:	60bb      	str	r3, [r7, #8]
}
 80100cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80100ce:	bf00      	nop
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d0fc      	beq.n	80100d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80100d6:	bf00      	nop
 80100d8:	bf00      	nop
 80100da:	3714      	adds	r7, #20
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr
 80100e4:	20000080 	.word	0x20000080
	...

080100f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80100f0:	4b07      	ldr	r3, [pc, #28]	; (8010110 <pxCurrentTCBConst2>)
 80100f2:	6819      	ldr	r1, [r3, #0]
 80100f4:	6808      	ldr	r0, [r1, #0]
 80100f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100fa:	f380 8809 	msr	PSP, r0
 80100fe:	f3bf 8f6f 	isb	sy
 8010102:	f04f 0000 	mov.w	r0, #0
 8010106:	f380 8811 	msr	BASEPRI, r0
 801010a:	4770      	bx	lr
 801010c:	f3af 8000 	nop.w

08010110 <pxCurrentTCBConst2>:
 8010110:	20004cc0 	.word	0x20004cc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010114:	bf00      	nop
 8010116:	bf00      	nop

08010118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010118:	4808      	ldr	r0, [pc, #32]	; (801013c <prvPortStartFirstTask+0x24>)
 801011a:	6800      	ldr	r0, [r0, #0]
 801011c:	6800      	ldr	r0, [r0, #0]
 801011e:	f380 8808 	msr	MSP, r0
 8010122:	f04f 0000 	mov.w	r0, #0
 8010126:	f380 8814 	msr	CONTROL, r0
 801012a:	b662      	cpsie	i
 801012c:	b661      	cpsie	f
 801012e:	f3bf 8f4f 	dsb	sy
 8010132:	f3bf 8f6f 	isb	sy
 8010136:	df00      	svc	0
 8010138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801013a:	bf00      	nop
 801013c:	e000ed08 	.word	0xe000ed08

08010140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b086      	sub	sp, #24
 8010144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010146:	4b46      	ldr	r3, [pc, #280]	; (8010260 <xPortStartScheduler+0x120>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	4a46      	ldr	r2, [pc, #280]	; (8010264 <xPortStartScheduler+0x124>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d10a      	bne.n	8010166 <xPortStartScheduler+0x26>
	__asm volatile
 8010150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010154:	f383 8811 	msr	BASEPRI, r3
 8010158:	f3bf 8f6f 	isb	sy
 801015c:	f3bf 8f4f 	dsb	sy
 8010160:	613b      	str	r3, [r7, #16]
}
 8010162:	bf00      	nop
 8010164:	e7fe      	b.n	8010164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010166:	4b3e      	ldr	r3, [pc, #248]	; (8010260 <xPortStartScheduler+0x120>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	4a3f      	ldr	r2, [pc, #252]	; (8010268 <xPortStartScheduler+0x128>)
 801016c:	4293      	cmp	r3, r2
 801016e:	d10a      	bne.n	8010186 <xPortStartScheduler+0x46>
	__asm volatile
 8010170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010174:	f383 8811 	msr	BASEPRI, r3
 8010178:	f3bf 8f6f 	isb	sy
 801017c:	f3bf 8f4f 	dsb	sy
 8010180:	60fb      	str	r3, [r7, #12]
}
 8010182:	bf00      	nop
 8010184:	e7fe      	b.n	8010184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010186:	4b39      	ldr	r3, [pc, #228]	; (801026c <xPortStartScheduler+0x12c>)
 8010188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	b2db      	uxtb	r3, r3
 8010190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	22ff      	movs	r2, #255	; 0xff
 8010196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	b2db      	uxtb	r3, r3
 801019e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80101a0:	78fb      	ldrb	r3, [r7, #3]
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80101a8:	b2da      	uxtb	r2, r3
 80101aa:	4b31      	ldr	r3, [pc, #196]	; (8010270 <xPortStartScheduler+0x130>)
 80101ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80101ae:	4b31      	ldr	r3, [pc, #196]	; (8010274 <xPortStartScheduler+0x134>)
 80101b0:	2207      	movs	r2, #7
 80101b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101b4:	e009      	b.n	80101ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80101b6:	4b2f      	ldr	r3, [pc, #188]	; (8010274 <xPortStartScheduler+0x134>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	3b01      	subs	r3, #1
 80101bc:	4a2d      	ldr	r2, [pc, #180]	; (8010274 <xPortStartScheduler+0x134>)
 80101be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80101c0:	78fb      	ldrb	r3, [r7, #3]
 80101c2:	b2db      	uxtb	r3, r3
 80101c4:	005b      	lsls	r3, r3, #1
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101ca:	78fb      	ldrb	r3, [r7, #3]
 80101cc:	b2db      	uxtb	r3, r3
 80101ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101d2:	2b80      	cmp	r3, #128	; 0x80
 80101d4:	d0ef      	beq.n	80101b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80101d6:	4b27      	ldr	r3, [pc, #156]	; (8010274 <xPortStartScheduler+0x134>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f1c3 0307 	rsb	r3, r3, #7
 80101de:	2b04      	cmp	r3, #4
 80101e0:	d00a      	beq.n	80101f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80101e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e6:	f383 8811 	msr	BASEPRI, r3
 80101ea:	f3bf 8f6f 	isb	sy
 80101ee:	f3bf 8f4f 	dsb	sy
 80101f2:	60bb      	str	r3, [r7, #8]
}
 80101f4:	bf00      	nop
 80101f6:	e7fe      	b.n	80101f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80101f8:	4b1e      	ldr	r3, [pc, #120]	; (8010274 <xPortStartScheduler+0x134>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	021b      	lsls	r3, r3, #8
 80101fe:	4a1d      	ldr	r2, [pc, #116]	; (8010274 <xPortStartScheduler+0x134>)
 8010200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010202:	4b1c      	ldr	r3, [pc, #112]	; (8010274 <xPortStartScheduler+0x134>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801020a:	4a1a      	ldr	r2, [pc, #104]	; (8010274 <xPortStartScheduler+0x134>)
 801020c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	b2da      	uxtb	r2, r3
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010216:	4b18      	ldr	r3, [pc, #96]	; (8010278 <xPortStartScheduler+0x138>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4a17      	ldr	r2, [pc, #92]	; (8010278 <xPortStartScheduler+0x138>)
 801021c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010222:	4b15      	ldr	r3, [pc, #84]	; (8010278 <xPortStartScheduler+0x138>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	4a14      	ldr	r2, [pc, #80]	; (8010278 <xPortStartScheduler+0x138>)
 8010228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801022c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801022e:	f000 f8dd 	bl	80103ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010232:	4b12      	ldr	r3, [pc, #72]	; (801027c <xPortStartScheduler+0x13c>)
 8010234:	2200      	movs	r2, #0
 8010236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010238:	f000 f8fc 	bl	8010434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801023c:	4b10      	ldr	r3, [pc, #64]	; (8010280 <xPortStartScheduler+0x140>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4a0f      	ldr	r2, [pc, #60]	; (8010280 <xPortStartScheduler+0x140>)
 8010242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010248:	f7ff ff66 	bl	8010118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801024c:	f7fe fe6e 	bl	800ef2c <vTaskSwitchContext>
	prvTaskExitError();
 8010250:	f7ff ff1e 	bl	8010090 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010254:	2300      	movs	r3, #0
}
 8010256:	4618      	mov	r0, r3
 8010258:	3718      	adds	r7, #24
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	e000ed00 	.word	0xe000ed00
 8010264:	410fc271 	.word	0x410fc271
 8010268:	410fc270 	.word	0x410fc270
 801026c:	e000e400 	.word	0xe000e400
 8010270:	200052ec 	.word	0x200052ec
 8010274:	200052f0 	.word	0x200052f0
 8010278:	e000ed20 	.word	0xe000ed20
 801027c:	20000080 	.word	0x20000080
 8010280:	e000ef34 	.word	0xe000ef34

08010284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010284:	b480      	push	{r7}
 8010286:	b083      	sub	sp, #12
 8010288:	af00      	add	r7, sp, #0
	__asm volatile
 801028a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028e:	f383 8811 	msr	BASEPRI, r3
 8010292:	f3bf 8f6f 	isb	sy
 8010296:	f3bf 8f4f 	dsb	sy
 801029a:	607b      	str	r3, [r7, #4]
}
 801029c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801029e:	4b0f      	ldr	r3, [pc, #60]	; (80102dc <vPortEnterCritical+0x58>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	3301      	adds	r3, #1
 80102a4:	4a0d      	ldr	r2, [pc, #52]	; (80102dc <vPortEnterCritical+0x58>)
 80102a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80102a8:	4b0c      	ldr	r3, [pc, #48]	; (80102dc <vPortEnterCritical+0x58>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d10f      	bne.n	80102d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80102b0:	4b0b      	ldr	r3, [pc, #44]	; (80102e0 <vPortEnterCritical+0x5c>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d00a      	beq.n	80102d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80102ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102be:	f383 8811 	msr	BASEPRI, r3
 80102c2:	f3bf 8f6f 	isb	sy
 80102c6:	f3bf 8f4f 	dsb	sy
 80102ca:	603b      	str	r3, [r7, #0]
}
 80102cc:	bf00      	nop
 80102ce:	e7fe      	b.n	80102ce <vPortEnterCritical+0x4a>
	}
}
 80102d0:	bf00      	nop
 80102d2:	370c      	adds	r7, #12
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr
 80102dc:	20000080 	.word	0x20000080
 80102e0:	e000ed04 	.word	0xe000ed04

080102e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80102e4:	b480      	push	{r7}
 80102e6:	b083      	sub	sp, #12
 80102e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80102ea:	4b12      	ldr	r3, [pc, #72]	; (8010334 <vPortExitCritical+0x50>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d10a      	bne.n	8010308 <vPortExitCritical+0x24>
	__asm volatile
 80102f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f6:	f383 8811 	msr	BASEPRI, r3
 80102fa:	f3bf 8f6f 	isb	sy
 80102fe:	f3bf 8f4f 	dsb	sy
 8010302:	607b      	str	r3, [r7, #4]
}
 8010304:	bf00      	nop
 8010306:	e7fe      	b.n	8010306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010308:	4b0a      	ldr	r3, [pc, #40]	; (8010334 <vPortExitCritical+0x50>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	3b01      	subs	r3, #1
 801030e:	4a09      	ldr	r2, [pc, #36]	; (8010334 <vPortExitCritical+0x50>)
 8010310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010312:	4b08      	ldr	r3, [pc, #32]	; (8010334 <vPortExitCritical+0x50>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d105      	bne.n	8010326 <vPortExitCritical+0x42>
 801031a:	2300      	movs	r3, #0
 801031c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	f383 8811 	msr	BASEPRI, r3
}
 8010324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010326:	bf00      	nop
 8010328:	370c      	adds	r7, #12
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr
 8010332:	bf00      	nop
 8010334:	20000080 	.word	0x20000080
	...

08010340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010340:	f3ef 8009 	mrs	r0, PSP
 8010344:	f3bf 8f6f 	isb	sy
 8010348:	4b15      	ldr	r3, [pc, #84]	; (80103a0 <pxCurrentTCBConst>)
 801034a:	681a      	ldr	r2, [r3, #0]
 801034c:	f01e 0f10 	tst.w	lr, #16
 8010350:	bf08      	it	eq
 8010352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801035a:	6010      	str	r0, [r2, #0]
 801035c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010364:	f380 8811 	msr	BASEPRI, r0
 8010368:	f3bf 8f4f 	dsb	sy
 801036c:	f3bf 8f6f 	isb	sy
 8010370:	f7fe fddc 	bl	800ef2c <vTaskSwitchContext>
 8010374:	f04f 0000 	mov.w	r0, #0
 8010378:	f380 8811 	msr	BASEPRI, r0
 801037c:	bc09      	pop	{r0, r3}
 801037e:	6819      	ldr	r1, [r3, #0]
 8010380:	6808      	ldr	r0, [r1, #0]
 8010382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010386:	f01e 0f10 	tst.w	lr, #16
 801038a:	bf08      	it	eq
 801038c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010390:	f380 8809 	msr	PSP, r0
 8010394:	f3bf 8f6f 	isb	sy
 8010398:	4770      	bx	lr
 801039a:	bf00      	nop
 801039c:	f3af 8000 	nop.w

080103a0 <pxCurrentTCBConst>:
 80103a0:	20004cc0 	.word	0x20004cc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80103a4:	bf00      	nop
 80103a6:	bf00      	nop

080103a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
	__asm volatile
 80103ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b2:	f383 8811 	msr	BASEPRI, r3
 80103b6:	f3bf 8f6f 	isb	sy
 80103ba:	f3bf 8f4f 	dsb	sy
 80103be:	607b      	str	r3, [r7, #4]
}
 80103c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80103c2:	f7fe fcf9 	bl	800edb8 <xTaskIncrementTick>
 80103c6:	4603      	mov	r3, r0
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d003      	beq.n	80103d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80103cc:	4b06      	ldr	r3, [pc, #24]	; (80103e8 <xPortSysTickHandler+0x40>)
 80103ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103d2:	601a      	str	r2, [r3, #0]
 80103d4:	2300      	movs	r3, #0
 80103d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	f383 8811 	msr	BASEPRI, r3
}
 80103de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80103e0:	bf00      	nop
 80103e2:	3708      	adds	r7, #8
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	e000ed04 	.word	0xe000ed04

080103ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80103ec:	b480      	push	{r7}
 80103ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80103f0:	4b0b      	ldr	r3, [pc, #44]	; (8010420 <vPortSetupTimerInterrupt+0x34>)
 80103f2:	2200      	movs	r2, #0
 80103f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80103f6:	4b0b      	ldr	r3, [pc, #44]	; (8010424 <vPortSetupTimerInterrupt+0x38>)
 80103f8:	2200      	movs	r2, #0
 80103fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80103fc:	4b0a      	ldr	r3, [pc, #40]	; (8010428 <vPortSetupTimerInterrupt+0x3c>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	4a0a      	ldr	r2, [pc, #40]	; (801042c <vPortSetupTimerInterrupt+0x40>)
 8010402:	fba2 2303 	umull	r2, r3, r2, r3
 8010406:	099b      	lsrs	r3, r3, #6
 8010408:	4a09      	ldr	r2, [pc, #36]	; (8010430 <vPortSetupTimerInterrupt+0x44>)
 801040a:	3b01      	subs	r3, #1
 801040c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801040e:	4b04      	ldr	r3, [pc, #16]	; (8010420 <vPortSetupTimerInterrupt+0x34>)
 8010410:	2207      	movs	r2, #7
 8010412:	601a      	str	r2, [r3, #0]
}
 8010414:	bf00      	nop
 8010416:	46bd      	mov	sp, r7
 8010418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041c:	4770      	bx	lr
 801041e:	bf00      	nop
 8010420:	e000e010 	.word	0xe000e010
 8010424:	e000e018 	.word	0xe000e018
 8010428:	20000074 	.word	0x20000074
 801042c:	10624dd3 	.word	0x10624dd3
 8010430:	e000e014 	.word	0xe000e014

08010434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010444 <vPortEnableVFP+0x10>
 8010438:	6801      	ldr	r1, [r0, #0]
 801043a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801043e:	6001      	str	r1, [r0, #0]
 8010440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010442:	bf00      	nop
 8010444:	e000ed88 	.word	0xe000ed88

08010448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010448:	b480      	push	{r7}
 801044a:	b085      	sub	sp, #20
 801044c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801044e:	f3ef 8305 	mrs	r3, IPSR
 8010452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2b0f      	cmp	r3, #15
 8010458:	d914      	bls.n	8010484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801045a:	4a17      	ldr	r2, [pc, #92]	; (80104b8 <vPortValidateInterruptPriority+0x70>)
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	4413      	add	r3, r2
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010464:	4b15      	ldr	r3, [pc, #84]	; (80104bc <vPortValidateInterruptPriority+0x74>)
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	7afa      	ldrb	r2, [r7, #11]
 801046a:	429a      	cmp	r2, r3
 801046c:	d20a      	bcs.n	8010484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801046e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010472:	f383 8811 	msr	BASEPRI, r3
 8010476:	f3bf 8f6f 	isb	sy
 801047a:	f3bf 8f4f 	dsb	sy
 801047e:	607b      	str	r3, [r7, #4]
}
 8010480:	bf00      	nop
 8010482:	e7fe      	b.n	8010482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010484:	4b0e      	ldr	r3, [pc, #56]	; (80104c0 <vPortValidateInterruptPriority+0x78>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801048c:	4b0d      	ldr	r3, [pc, #52]	; (80104c4 <vPortValidateInterruptPriority+0x7c>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	429a      	cmp	r2, r3
 8010492:	d90a      	bls.n	80104aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010498:	f383 8811 	msr	BASEPRI, r3
 801049c:	f3bf 8f6f 	isb	sy
 80104a0:	f3bf 8f4f 	dsb	sy
 80104a4:	603b      	str	r3, [r7, #0]
}
 80104a6:	bf00      	nop
 80104a8:	e7fe      	b.n	80104a8 <vPortValidateInterruptPriority+0x60>
	}
 80104aa:	bf00      	nop
 80104ac:	3714      	adds	r7, #20
 80104ae:	46bd      	mov	sp, r7
 80104b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b4:	4770      	bx	lr
 80104b6:	bf00      	nop
 80104b8:	e000e3f0 	.word	0xe000e3f0
 80104bc:	200052ec 	.word	0x200052ec
 80104c0:	e000ed0c 	.word	0xe000ed0c
 80104c4:	200052f0 	.word	0x200052f0

080104c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b08a      	sub	sp, #40	; 0x28
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80104d0:	2300      	movs	r3, #0
 80104d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80104d4:	f7fe fbb4 	bl	800ec40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80104d8:	4b5b      	ldr	r3, [pc, #364]	; (8010648 <pvPortMalloc+0x180>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d101      	bne.n	80104e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80104e0:	f000 f920 	bl	8010724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80104e4:	4b59      	ldr	r3, [pc, #356]	; (801064c <pvPortMalloc+0x184>)
 80104e6:	681a      	ldr	r2, [r3, #0]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4013      	ands	r3, r2
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	f040 8093 	bne.w	8010618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d01d      	beq.n	8010534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80104f8:	2208      	movs	r2, #8
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	4413      	add	r3, r2
 80104fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f003 0307 	and.w	r3, r3, #7
 8010506:	2b00      	cmp	r3, #0
 8010508:	d014      	beq.n	8010534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f023 0307 	bic.w	r3, r3, #7
 8010510:	3308      	adds	r3, #8
 8010512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f003 0307 	and.w	r3, r3, #7
 801051a:	2b00      	cmp	r3, #0
 801051c:	d00a      	beq.n	8010534 <pvPortMalloc+0x6c>
	__asm volatile
 801051e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010522:	f383 8811 	msr	BASEPRI, r3
 8010526:	f3bf 8f6f 	isb	sy
 801052a:	f3bf 8f4f 	dsb	sy
 801052e:	617b      	str	r3, [r7, #20]
}
 8010530:	bf00      	nop
 8010532:	e7fe      	b.n	8010532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d06e      	beq.n	8010618 <pvPortMalloc+0x150>
 801053a:	4b45      	ldr	r3, [pc, #276]	; (8010650 <pvPortMalloc+0x188>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	429a      	cmp	r2, r3
 8010542:	d869      	bhi.n	8010618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010544:	4b43      	ldr	r3, [pc, #268]	; (8010654 <pvPortMalloc+0x18c>)
 8010546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010548:	4b42      	ldr	r3, [pc, #264]	; (8010654 <pvPortMalloc+0x18c>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801054e:	e004      	b.n	801055a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055c:	685b      	ldr	r3, [r3, #4]
 801055e:	687a      	ldr	r2, [r7, #4]
 8010560:	429a      	cmp	r2, r3
 8010562:	d903      	bls.n	801056c <pvPortMalloc+0xa4>
 8010564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d1f1      	bne.n	8010550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801056c:	4b36      	ldr	r3, [pc, #216]	; (8010648 <pvPortMalloc+0x180>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010572:	429a      	cmp	r2, r3
 8010574:	d050      	beq.n	8010618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010576:	6a3b      	ldr	r3, [r7, #32]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	2208      	movs	r2, #8
 801057c:	4413      	add	r3, r2
 801057e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	6a3b      	ldr	r3, [r7, #32]
 8010586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058a:	685a      	ldr	r2, [r3, #4]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	1ad2      	subs	r2, r2, r3
 8010590:	2308      	movs	r3, #8
 8010592:	005b      	lsls	r3, r3, #1
 8010594:	429a      	cmp	r2, r3
 8010596:	d91f      	bls.n	80105d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	4413      	add	r3, r2
 801059e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80105a0:	69bb      	ldr	r3, [r7, #24]
 80105a2:	f003 0307 	and.w	r3, r3, #7
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d00a      	beq.n	80105c0 <pvPortMalloc+0xf8>
	__asm volatile
 80105aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ae:	f383 8811 	msr	BASEPRI, r3
 80105b2:	f3bf 8f6f 	isb	sy
 80105b6:	f3bf 8f4f 	dsb	sy
 80105ba:	613b      	str	r3, [r7, #16]
}
 80105bc:	bf00      	nop
 80105be:	e7fe      	b.n	80105be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80105c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c2:	685a      	ldr	r2, [r3, #4]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	1ad2      	subs	r2, r2, r3
 80105c8:	69bb      	ldr	r3, [r7, #24]
 80105ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80105cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ce:	687a      	ldr	r2, [r7, #4]
 80105d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80105d2:	69b8      	ldr	r0, [r7, #24]
 80105d4:	f000 f908 	bl	80107e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80105d8:	4b1d      	ldr	r3, [pc, #116]	; (8010650 <pvPortMalloc+0x188>)
 80105da:	681a      	ldr	r2, [r3, #0]
 80105dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	4a1b      	ldr	r2, [pc, #108]	; (8010650 <pvPortMalloc+0x188>)
 80105e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80105e6:	4b1a      	ldr	r3, [pc, #104]	; (8010650 <pvPortMalloc+0x188>)
 80105e8:	681a      	ldr	r2, [r3, #0]
 80105ea:	4b1b      	ldr	r3, [pc, #108]	; (8010658 <pvPortMalloc+0x190>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d203      	bcs.n	80105fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80105f2:	4b17      	ldr	r3, [pc, #92]	; (8010650 <pvPortMalloc+0x188>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	4a18      	ldr	r2, [pc, #96]	; (8010658 <pvPortMalloc+0x190>)
 80105f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80105fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fc:	685a      	ldr	r2, [r3, #4]
 80105fe:	4b13      	ldr	r3, [pc, #76]	; (801064c <pvPortMalloc+0x184>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	431a      	orrs	r2, r3
 8010604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060a:	2200      	movs	r2, #0
 801060c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801060e:	4b13      	ldr	r3, [pc, #76]	; (801065c <pvPortMalloc+0x194>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	3301      	adds	r3, #1
 8010614:	4a11      	ldr	r2, [pc, #68]	; (801065c <pvPortMalloc+0x194>)
 8010616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010618:	f7fe fb20 	bl	800ec5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801061c:	69fb      	ldr	r3, [r7, #28]
 801061e:	f003 0307 	and.w	r3, r3, #7
 8010622:	2b00      	cmp	r3, #0
 8010624:	d00a      	beq.n	801063c <pvPortMalloc+0x174>
	__asm volatile
 8010626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801062a:	f383 8811 	msr	BASEPRI, r3
 801062e:	f3bf 8f6f 	isb	sy
 8010632:	f3bf 8f4f 	dsb	sy
 8010636:	60fb      	str	r3, [r7, #12]
}
 8010638:	bf00      	nop
 801063a:	e7fe      	b.n	801063a <pvPortMalloc+0x172>
	return pvReturn;
 801063c:	69fb      	ldr	r3, [r7, #28]
}
 801063e:	4618      	mov	r0, r3
 8010640:	3728      	adds	r7, #40	; 0x28
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	2001164c 	.word	0x2001164c
 801064c:	20011660 	.word	0x20011660
 8010650:	20011650 	.word	0x20011650
 8010654:	20011644 	.word	0x20011644
 8010658:	20011654 	.word	0x20011654
 801065c:	20011658 	.word	0x20011658

08010660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b086      	sub	sp, #24
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d04d      	beq.n	801070e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010672:	2308      	movs	r3, #8
 8010674:	425b      	negs	r3, r3
 8010676:	697a      	ldr	r2, [r7, #20]
 8010678:	4413      	add	r3, r2
 801067a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	685a      	ldr	r2, [r3, #4]
 8010684:	4b24      	ldr	r3, [pc, #144]	; (8010718 <vPortFree+0xb8>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	4013      	ands	r3, r2
 801068a:	2b00      	cmp	r3, #0
 801068c:	d10a      	bne.n	80106a4 <vPortFree+0x44>
	__asm volatile
 801068e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010692:	f383 8811 	msr	BASEPRI, r3
 8010696:	f3bf 8f6f 	isb	sy
 801069a:	f3bf 8f4f 	dsb	sy
 801069e:	60fb      	str	r3, [r7, #12]
}
 80106a0:	bf00      	nop
 80106a2:	e7fe      	b.n	80106a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d00a      	beq.n	80106c2 <vPortFree+0x62>
	__asm volatile
 80106ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b0:	f383 8811 	msr	BASEPRI, r3
 80106b4:	f3bf 8f6f 	isb	sy
 80106b8:	f3bf 8f4f 	dsb	sy
 80106bc:	60bb      	str	r3, [r7, #8]
}
 80106be:	bf00      	nop
 80106c0:	e7fe      	b.n	80106c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	685a      	ldr	r2, [r3, #4]
 80106c6:	4b14      	ldr	r3, [pc, #80]	; (8010718 <vPortFree+0xb8>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	4013      	ands	r3, r2
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d01e      	beq.n	801070e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d11a      	bne.n	801070e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	685a      	ldr	r2, [r3, #4]
 80106dc:	4b0e      	ldr	r3, [pc, #56]	; (8010718 <vPortFree+0xb8>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	43db      	mvns	r3, r3
 80106e2:	401a      	ands	r2, r3
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80106e8:	f7fe faaa 	bl	800ec40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	685a      	ldr	r2, [r3, #4]
 80106f0:	4b0a      	ldr	r3, [pc, #40]	; (801071c <vPortFree+0xbc>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	4413      	add	r3, r2
 80106f6:	4a09      	ldr	r2, [pc, #36]	; (801071c <vPortFree+0xbc>)
 80106f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80106fa:	6938      	ldr	r0, [r7, #16]
 80106fc:	f000 f874 	bl	80107e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010700:	4b07      	ldr	r3, [pc, #28]	; (8010720 <vPortFree+0xc0>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	3301      	adds	r3, #1
 8010706:	4a06      	ldr	r2, [pc, #24]	; (8010720 <vPortFree+0xc0>)
 8010708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801070a:	f7fe faa7 	bl	800ec5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801070e:	bf00      	nop
 8010710:	3718      	adds	r7, #24
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
 8010716:	bf00      	nop
 8010718:	20011660 	.word	0x20011660
 801071c:	20011650 	.word	0x20011650
 8010720:	2001165c 	.word	0x2001165c

08010724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010724:	b480      	push	{r7}
 8010726:	b085      	sub	sp, #20
 8010728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801072a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801072e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010730:	4b27      	ldr	r3, [pc, #156]	; (80107d0 <prvHeapInit+0xac>)
 8010732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	f003 0307 	and.w	r3, r3, #7
 801073a:	2b00      	cmp	r3, #0
 801073c:	d00c      	beq.n	8010758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	3307      	adds	r3, #7
 8010742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f023 0307 	bic.w	r3, r3, #7
 801074a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801074c:	68ba      	ldr	r2, [r7, #8]
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	1ad3      	subs	r3, r2, r3
 8010752:	4a1f      	ldr	r2, [pc, #124]	; (80107d0 <prvHeapInit+0xac>)
 8010754:	4413      	add	r3, r2
 8010756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801075c:	4a1d      	ldr	r2, [pc, #116]	; (80107d4 <prvHeapInit+0xb0>)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010762:	4b1c      	ldr	r3, [pc, #112]	; (80107d4 <prvHeapInit+0xb0>)
 8010764:	2200      	movs	r2, #0
 8010766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	68ba      	ldr	r2, [r7, #8]
 801076c:	4413      	add	r3, r2
 801076e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010770:	2208      	movs	r2, #8
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	1a9b      	subs	r3, r3, r2
 8010776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f023 0307 	bic.w	r3, r3, #7
 801077e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	4a15      	ldr	r2, [pc, #84]	; (80107d8 <prvHeapInit+0xb4>)
 8010784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010786:	4b14      	ldr	r3, [pc, #80]	; (80107d8 <prvHeapInit+0xb4>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	2200      	movs	r2, #0
 801078c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801078e:	4b12      	ldr	r3, [pc, #72]	; (80107d8 <prvHeapInit+0xb4>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	2200      	movs	r2, #0
 8010794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	68fa      	ldr	r2, [r7, #12]
 801079e:	1ad2      	subs	r2, r2, r3
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80107a4:	4b0c      	ldr	r3, [pc, #48]	; (80107d8 <prvHeapInit+0xb4>)
 80107a6:	681a      	ldr	r2, [r3, #0]
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	685b      	ldr	r3, [r3, #4]
 80107b0:	4a0a      	ldr	r2, [pc, #40]	; (80107dc <prvHeapInit+0xb8>)
 80107b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	685b      	ldr	r3, [r3, #4]
 80107b8:	4a09      	ldr	r2, [pc, #36]	; (80107e0 <prvHeapInit+0xbc>)
 80107ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80107bc:	4b09      	ldr	r3, [pc, #36]	; (80107e4 <prvHeapInit+0xc0>)
 80107be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80107c2:	601a      	str	r2, [r3, #0]
}
 80107c4:	bf00      	nop
 80107c6:	3714      	adds	r7, #20
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr
 80107d0:	200052f4 	.word	0x200052f4
 80107d4:	20011644 	.word	0x20011644
 80107d8:	2001164c 	.word	0x2001164c
 80107dc:	20011654 	.word	0x20011654
 80107e0:	20011650 	.word	0x20011650
 80107e4:	20011660 	.word	0x20011660

080107e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80107e8:	b480      	push	{r7}
 80107ea:	b085      	sub	sp, #20
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80107f0:	4b28      	ldr	r3, [pc, #160]	; (8010894 <prvInsertBlockIntoFreeList+0xac>)
 80107f2:	60fb      	str	r3, [r7, #12]
 80107f4:	e002      	b.n	80107fc <prvInsertBlockIntoFreeList+0x14>
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	60fb      	str	r3, [r7, #12]
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	687a      	ldr	r2, [r7, #4]
 8010802:	429a      	cmp	r2, r3
 8010804:	d8f7      	bhi.n	80107f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	68ba      	ldr	r2, [r7, #8]
 8010810:	4413      	add	r3, r2
 8010812:	687a      	ldr	r2, [r7, #4]
 8010814:	429a      	cmp	r2, r3
 8010816:	d108      	bne.n	801082a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	685a      	ldr	r2, [r3, #4]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	685b      	ldr	r3, [r3, #4]
 8010820:	441a      	add	r2, r3
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	68ba      	ldr	r2, [r7, #8]
 8010834:	441a      	add	r2, r3
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	429a      	cmp	r2, r3
 801083c:	d118      	bne.n	8010870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	4b15      	ldr	r3, [pc, #84]	; (8010898 <prvInsertBlockIntoFreeList+0xb0>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	429a      	cmp	r2, r3
 8010848:	d00d      	beq.n	8010866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	685a      	ldr	r2, [r3, #4]
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	685b      	ldr	r3, [r3, #4]
 8010854:	441a      	add	r2, r3
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	681a      	ldr	r2, [r3, #0]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	601a      	str	r2, [r3, #0]
 8010864:	e008      	b.n	8010878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010866:	4b0c      	ldr	r3, [pc, #48]	; (8010898 <prvInsertBlockIntoFreeList+0xb0>)
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	601a      	str	r2, [r3, #0]
 801086e:	e003      	b.n	8010878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	681a      	ldr	r2, [r3, #0]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	429a      	cmp	r2, r3
 801087e:	d002      	beq.n	8010886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	687a      	ldr	r2, [r7, #4]
 8010884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010886:	bf00      	nop
 8010888:	3714      	adds	r7, #20
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr
 8010892:	bf00      	nop
 8010894:	20011644 	.word	0x20011644
 8010898:	2001164c 	.word	0x2001164c

0801089c <__errno>:
 801089c:	4b01      	ldr	r3, [pc, #4]	; (80108a4 <__errno+0x8>)
 801089e:	6818      	ldr	r0, [r3, #0]
 80108a0:	4770      	bx	lr
 80108a2:	bf00      	nop
 80108a4:	20000084 	.word	0x20000084

080108a8 <__libc_init_array>:
 80108a8:	b570      	push	{r4, r5, r6, lr}
 80108aa:	4d0d      	ldr	r5, [pc, #52]	; (80108e0 <__libc_init_array+0x38>)
 80108ac:	4c0d      	ldr	r4, [pc, #52]	; (80108e4 <__libc_init_array+0x3c>)
 80108ae:	1b64      	subs	r4, r4, r5
 80108b0:	10a4      	asrs	r4, r4, #2
 80108b2:	2600      	movs	r6, #0
 80108b4:	42a6      	cmp	r6, r4
 80108b6:	d109      	bne.n	80108cc <__libc_init_array+0x24>
 80108b8:	4d0b      	ldr	r5, [pc, #44]	; (80108e8 <__libc_init_array+0x40>)
 80108ba:	4c0c      	ldr	r4, [pc, #48]	; (80108ec <__libc_init_array+0x44>)
 80108bc:	f004 fc90 	bl	80151e0 <_init>
 80108c0:	1b64      	subs	r4, r4, r5
 80108c2:	10a4      	asrs	r4, r4, #2
 80108c4:	2600      	movs	r6, #0
 80108c6:	42a6      	cmp	r6, r4
 80108c8:	d105      	bne.n	80108d6 <__libc_init_array+0x2e>
 80108ca:	bd70      	pop	{r4, r5, r6, pc}
 80108cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80108d0:	4798      	blx	r3
 80108d2:	3601      	adds	r6, #1
 80108d4:	e7ee      	b.n	80108b4 <__libc_init_array+0xc>
 80108d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80108da:	4798      	blx	r3
 80108dc:	3601      	adds	r6, #1
 80108de:	e7f2      	b.n	80108c6 <__libc_init_array+0x1e>
 80108e0:	08015dd4 	.word	0x08015dd4
 80108e4:	08015dd4 	.word	0x08015dd4
 80108e8:	08015dd4 	.word	0x08015dd4
 80108ec:	08015dd8 	.word	0x08015dd8

080108f0 <memcpy>:
 80108f0:	440a      	add	r2, r1
 80108f2:	4291      	cmp	r1, r2
 80108f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80108f8:	d100      	bne.n	80108fc <memcpy+0xc>
 80108fa:	4770      	bx	lr
 80108fc:	b510      	push	{r4, lr}
 80108fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010902:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010906:	4291      	cmp	r1, r2
 8010908:	d1f9      	bne.n	80108fe <memcpy+0xe>
 801090a:	bd10      	pop	{r4, pc}

0801090c <memset>:
 801090c:	4402      	add	r2, r0
 801090e:	4603      	mov	r3, r0
 8010910:	4293      	cmp	r3, r2
 8010912:	d100      	bne.n	8010916 <memset+0xa>
 8010914:	4770      	bx	lr
 8010916:	f803 1b01 	strb.w	r1, [r3], #1
 801091a:	e7f9      	b.n	8010910 <memset+0x4>

0801091c <__cvt>:
 801091c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010920:	ec55 4b10 	vmov	r4, r5, d0
 8010924:	2d00      	cmp	r5, #0
 8010926:	460e      	mov	r6, r1
 8010928:	4619      	mov	r1, r3
 801092a:	462b      	mov	r3, r5
 801092c:	bfbb      	ittet	lt
 801092e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010932:	461d      	movlt	r5, r3
 8010934:	2300      	movge	r3, #0
 8010936:	232d      	movlt	r3, #45	; 0x2d
 8010938:	700b      	strb	r3, [r1, #0]
 801093a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801093c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010940:	4691      	mov	r9, r2
 8010942:	f023 0820 	bic.w	r8, r3, #32
 8010946:	bfbc      	itt	lt
 8010948:	4622      	movlt	r2, r4
 801094a:	4614      	movlt	r4, r2
 801094c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010950:	d005      	beq.n	801095e <__cvt+0x42>
 8010952:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010956:	d100      	bne.n	801095a <__cvt+0x3e>
 8010958:	3601      	adds	r6, #1
 801095a:	2102      	movs	r1, #2
 801095c:	e000      	b.n	8010960 <__cvt+0x44>
 801095e:	2103      	movs	r1, #3
 8010960:	ab03      	add	r3, sp, #12
 8010962:	9301      	str	r3, [sp, #4]
 8010964:	ab02      	add	r3, sp, #8
 8010966:	9300      	str	r3, [sp, #0]
 8010968:	ec45 4b10 	vmov	d0, r4, r5
 801096c:	4653      	mov	r3, sl
 801096e:	4632      	mov	r2, r6
 8010970:	f001 fdae 	bl	80124d0 <_dtoa_r>
 8010974:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010978:	4607      	mov	r7, r0
 801097a:	d102      	bne.n	8010982 <__cvt+0x66>
 801097c:	f019 0f01 	tst.w	r9, #1
 8010980:	d022      	beq.n	80109c8 <__cvt+0xac>
 8010982:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010986:	eb07 0906 	add.w	r9, r7, r6
 801098a:	d110      	bne.n	80109ae <__cvt+0x92>
 801098c:	783b      	ldrb	r3, [r7, #0]
 801098e:	2b30      	cmp	r3, #48	; 0x30
 8010990:	d10a      	bne.n	80109a8 <__cvt+0x8c>
 8010992:	2200      	movs	r2, #0
 8010994:	2300      	movs	r3, #0
 8010996:	4620      	mov	r0, r4
 8010998:	4629      	mov	r1, r5
 801099a:	f7f0 f8ad 	bl	8000af8 <__aeabi_dcmpeq>
 801099e:	b918      	cbnz	r0, 80109a8 <__cvt+0x8c>
 80109a0:	f1c6 0601 	rsb	r6, r6, #1
 80109a4:	f8ca 6000 	str.w	r6, [sl]
 80109a8:	f8da 3000 	ldr.w	r3, [sl]
 80109ac:	4499      	add	r9, r3
 80109ae:	2200      	movs	r2, #0
 80109b0:	2300      	movs	r3, #0
 80109b2:	4620      	mov	r0, r4
 80109b4:	4629      	mov	r1, r5
 80109b6:	f7f0 f89f 	bl	8000af8 <__aeabi_dcmpeq>
 80109ba:	b108      	cbz	r0, 80109c0 <__cvt+0xa4>
 80109bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80109c0:	2230      	movs	r2, #48	; 0x30
 80109c2:	9b03      	ldr	r3, [sp, #12]
 80109c4:	454b      	cmp	r3, r9
 80109c6:	d307      	bcc.n	80109d8 <__cvt+0xbc>
 80109c8:	9b03      	ldr	r3, [sp, #12]
 80109ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80109cc:	1bdb      	subs	r3, r3, r7
 80109ce:	4638      	mov	r0, r7
 80109d0:	6013      	str	r3, [r2, #0]
 80109d2:	b004      	add	sp, #16
 80109d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109d8:	1c59      	adds	r1, r3, #1
 80109da:	9103      	str	r1, [sp, #12]
 80109dc:	701a      	strb	r2, [r3, #0]
 80109de:	e7f0      	b.n	80109c2 <__cvt+0xa6>

080109e0 <__exponent>:
 80109e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109e2:	4603      	mov	r3, r0
 80109e4:	2900      	cmp	r1, #0
 80109e6:	bfb8      	it	lt
 80109e8:	4249      	neglt	r1, r1
 80109ea:	f803 2b02 	strb.w	r2, [r3], #2
 80109ee:	bfb4      	ite	lt
 80109f0:	222d      	movlt	r2, #45	; 0x2d
 80109f2:	222b      	movge	r2, #43	; 0x2b
 80109f4:	2909      	cmp	r1, #9
 80109f6:	7042      	strb	r2, [r0, #1]
 80109f8:	dd2a      	ble.n	8010a50 <__exponent+0x70>
 80109fa:	f10d 0407 	add.w	r4, sp, #7
 80109fe:	46a4      	mov	ip, r4
 8010a00:	270a      	movs	r7, #10
 8010a02:	46a6      	mov	lr, r4
 8010a04:	460a      	mov	r2, r1
 8010a06:	fb91 f6f7 	sdiv	r6, r1, r7
 8010a0a:	fb07 1516 	mls	r5, r7, r6, r1
 8010a0e:	3530      	adds	r5, #48	; 0x30
 8010a10:	2a63      	cmp	r2, #99	; 0x63
 8010a12:	f104 34ff 	add.w	r4, r4, #4294967295
 8010a16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010a1a:	4631      	mov	r1, r6
 8010a1c:	dcf1      	bgt.n	8010a02 <__exponent+0x22>
 8010a1e:	3130      	adds	r1, #48	; 0x30
 8010a20:	f1ae 0502 	sub.w	r5, lr, #2
 8010a24:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010a28:	1c44      	adds	r4, r0, #1
 8010a2a:	4629      	mov	r1, r5
 8010a2c:	4561      	cmp	r1, ip
 8010a2e:	d30a      	bcc.n	8010a46 <__exponent+0x66>
 8010a30:	f10d 0209 	add.w	r2, sp, #9
 8010a34:	eba2 020e 	sub.w	r2, r2, lr
 8010a38:	4565      	cmp	r5, ip
 8010a3a:	bf88      	it	hi
 8010a3c:	2200      	movhi	r2, #0
 8010a3e:	4413      	add	r3, r2
 8010a40:	1a18      	subs	r0, r3, r0
 8010a42:	b003      	add	sp, #12
 8010a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010a4e:	e7ed      	b.n	8010a2c <__exponent+0x4c>
 8010a50:	2330      	movs	r3, #48	; 0x30
 8010a52:	3130      	adds	r1, #48	; 0x30
 8010a54:	7083      	strb	r3, [r0, #2]
 8010a56:	70c1      	strb	r1, [r0, #3]
 8010a58:	1d03      	adds	r3, r0, #4
 8010a5a:	e7f1      	b.n	8010a40 <__exponent+0x60>

08010a5c <_printf_float>:
 8010a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a60:	ed2d 8b02 	vpush	{d8}
 8010a64:	b08d      	sub	sp, #52	; 0x34
 8010a66:	460c      	mov	r4, r1
 8010a68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010a6c:	4616      	mov	r6, r2
 8010a6e:	461f      	mov	r7, r3
 8010a70:	4605      	mov	r5, r0
 8010a72:	f002 fe8b 	bl	801378c <_localeconv_r>
 8010a76:	f8d0 a000 	ldr.w	sl, [r0]
 8010a7a:	4650      	mov	r0, sl
 8010a7c:	f7ef fbc0 	bl	8000200 <strlen>
 8010a80:	2300      	movs	r3, #0
 8010a82:	930a      	str	r3, [sp, #40]	; 0x28
 8010a84:	6823      	ldr	r3, [r4, #0]
 8010a86:	9305      	str	r3, [sp, #20]
 8010a88:	f8d8 3000 	ldr.w	r3, [r8]
 8010a8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010a90:	3307      	adds	r3, #7
 8010a92:	f023 0307 	bic.w	r3, r3, #7
 8010a96:	f103 0208 	add.w	r2, r3, #8
 8010a9a:	f8c8 2000 	str.w	r2, [r8]
 8010a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010aa6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010aaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010aae:	9307      	str	r3, [sp, #28]
 8010ab0:	f8cd 8018 	str.w	r8, [sp, #24]
 8010ab4:	ee08 0a10 	vmov	s16, r0
 8010ab8:	4b9f      	ldr	r3, [pc, #636]	; (8010d38 <_printf_float+0x2dc>)
 8010aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010abe:	f04f 32ff 	mov.w	r2, #4294967295
 8010ac2:	f7f0 f84b 	bl	8000b5c <__aeabi_dcmpun>
 8010ac6:	bb88      	cbnz	r0, 8010b2c <_printf_float+0xd0>
 8010ac8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010acc:	4b9a      	ldr	r3, [pc, #616]	; (8010d38 <_printf_float+0x2dc>)
 8010ace:	f04f 32ff 	mov.w	r2, #4294967295
 8010ad2:	f7f0 f825 	bl	8000b20 <__aeabi_dcmple>
 8010ad6:	bb48      	cbnz	r0, 8010b2c <_printf_float+0xd0>
 8010ad8:	2200      	movs	r2, #0
 8010ada:	2300      	movs	r3, #0
 8010adc:	4640      	mov	r0, r8
 8010ade:	4649      	mov	r1, r9
 8010ae0:	f7f0 f814 	bl	8000b0c <__aeabi_dcmplt>
 8010ae4:	b110      	cbz	r0, 8010aec <_printf_float+0x90>
 8010ae6:	232d      	movs	r3, #45	; 0x2d
 8010ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010aec:	4b93      	ldr	r3, [pc, #588]	; (8010d3c <_printf_float+0x2e0>)
 8010aee:	4894      	ldr	r0, [pc, #592]	; (8010d40 <_printf_float+0x2e4>)
 8010af0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010af4:	bf94      	ite	ls
 8010af6:	4698      	movls	r8, r3
 8010af8:	4680      	movhi	r8, r0
 8010afa:	2303      	movs	r3, #3
 8010afc:	6123      	str	r3, [r4, #16]
 8010afe:	9b05      	ldr	r3, [sp, #20]
 8010b00:	f023 0204 	bic.w	r2, r3, #4
 8010b04:	6022      	str	r2, [r4, #0]
 8010b06:	f04f 0900 	mov.w	r9, #0
 8010b0a:	9700      	str	r7, [sp, #0]
 8010b0c:	4633      	mov	r3, r6
 8010b0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010b10:	4621      	mov	r1, r4
 8010b12:	4628      	mov	r0, r5
 8010b14:	f000 f9d8 	bl	8010ec8 <_printf_common>
 8010b18:	3001      	adds	r0, #1
 8010b1a:	f040 8090 	bne.w	8010c3e <_printf_float+0x1e2>
 8010b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8010b22:	b00d      	add	sp, #52	; 0x34
 8010b24:	ecbd 8b02 	vpop	{d8}
 8010b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b2c:	4642      	mov	r2, r8
 8010b2e:	464b      	mov	r3, r9
 8010b30:	4640      	mov	r0, r8
 8010b32:	4649      	mov	r1, r9
 8010b34:	f7f0 f812 	bl	8000b5c <__aeabi_dcmpun>
 8010b38:	b140      	cbz	r0, 8010b4c <_printf_float+0xf0>
 8010b3a:	464b      	mov	r3, r9
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	bfbc      	itt	lt
 8010b40:	232d      	movlt	r3, #45	; 0x2d
 8010b42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010b46:	487f      	ldr	r0, [pc, #508]	; (8010d44 <_printf_float+0x2e8>)
 8010b48:	4b7f      	ldr	r3, [pc, #508]	; (8010d48 <_printf_float+0x2ec>)
 8010b4a:	e7d1      	b.n	8010af0 <_printf_float+0x94>
 8010b4c:	6863      	ldr	r3, [r4, #4]
 8010b4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010b52:	9206      	str	r2, [sp, #24]
 8010b54:	1c5a      	adds	r2, r3, #1
 8010b56:	d13f      	bne.n	8010bd8 <_printf_float+0x17c>
 8010b58:	2306      	movs	r3, #6
 8010b5a:	6063      	str	r3, [r4, #4]
 8010b5c:	9b05      	ldr	r3, [sp, #20]
 8010b5e:	6861      	ldr	r1, [r4, #4]
 8010b60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010b64:	2300      	movs	r3, #0
 8010b66:	9303      	str	r3, [sp, #12]
 8010b68:	ab0a      	add	r3, sp, #40	; 0x28
 8010b6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010b6e:	ab09      	add	r3, sp, #36	; 0x24
 8010b70:	ec49 8b10 	vmov	d0, r8, r9
 8010b74:	9300      	str	r3, [sp, #0]
 8010b76:	6022      	str	r2, [r4, #0]
 8010b78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010b7c:	4628      	mov	r0, r5
 8010b7e:	f7ff fecd 	bl	801091c <__cvt>
 8010b82:	9b06      	ldr	r3, [sp, #24]
 8010b84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b86:	2b47      	cmp	r3, #71	; 0x47
 8010b88:	4680      	mov	r8, r0
 8010b8a:	d108      	bne.n	8010b9e <_printf_float+0x142>
 8010b8c:	1cc8      	adds	r0, r1, #3
 8010b8e:	db02      	blt.n	8010b96 <_printf_float+0x13a>
 8010b90:	6863      	ldr	r3, [r4, #4]
 8010b92:	4299      	cmp	r1, r3
 8010b94:	dd41      	ble.n	8010c1a <_printf_float+0x1be>
 8010b96:	f1ab 0b02 	sub.w	fp, fp, #2
 8010b9a:	fa5f fb8b 	uxtb.w	fp, fp
 8010b9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010ba2:	d820      	bhi.n	8010be6 <_printf_float+0x18a>
 8010ba4:	3901      	subs	r1, #1
 8010ba6:	465a      	mov	r2, fp
 8010ba8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010bac:	9109      	str	r1, [sp, #36]	; 0x24
 8010bae:	f7ff ff17 	bl	80109e0 <__exponent>
 8010bb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010bb4:	1813      	adds	r3, r2, r0
 8010bb6:	2a01      	cmp	r2, #1
 8010bb8:	4681      	mov	r9, r0
 8010bba:	6123      	str	r3, [r4, #16]
 8010bbc:	dc02      	bgt.n	8010bc4 <_printf_float+0x168>
 8010bbe:	6822      	ldr	r2, [r4, #0]
 8010bc0:	07d2      	lsls	r2, r2, #31
 8010bc2:	d501      	bpl.n	8010bc8 <_printf_float+0x16c>
 8010bc4:	3301      	adds	r3, #1
 8010bc6:	6123      	str	r3, [r4, #16]
 8010bc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d09c      	beq.n	8010b0a <_printf_float+0xae>
 8010bd0:	232d      	movs	r3, #45	; 0x2d
 8010bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bd6:	e798      	b.n	8010b0a <_printf_float+0xae>
 8010bd8:	9a06      	ldr	r2, [sp, #24]
 8010bda:	2a47      	cmp	r2, #71	; 0x47
 8010bdc:	d1be      	bne.n	8010b5c <_printf_float+0x100>
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d1bc      	bne.n	8010b5c <_printf_float+0x100>
 8010be2:	2301      	movs	r3, #1
 8010be4:	e7b9      	b.n	8010b5a <_printf_float+0xfe>
 8010be6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010bea:	d118      	bne.n	8010c1e <_printf_float+0x1c2>
 8010bec:	2900      	cmp	r1, #0
 8010bee:	6863      	ldr	r3, [r4, #4]
 8010bf0:	dd0b      	ble.n	8010c0a <_printf_float+0x1ae>
 8010bf2:	6121      	str	r1, [r4, #16]
 8010bf4:	b913      	cbnz	r3, 8010bfc <_printf_float+0x1a0>
 8010bf6:	6822      	ldr	r2, [r4, #0]
 8010bf8:	07d0      	lsls	r0, r2, #31
 8010bfa:	d502      	bpl.n	8010c02 <_printf_float+0x1a6>
 8010bfc:	3301      	adds	r3, #1
 8010bfe:	440b      	add	r3, r1
 8010c00:	6123      	str	r3, [r4, #16]
 8010c02:	65a1      	str	r1, [r4, #88]	; 0x58
 8010c04:	f04f 0900 	mov.w	r9, #0
 8010c08:	e7de      	b.n	8010bc8 <_printf_float+0x16c>
 8010c0a:	b913      	cbnz	r3, 8010c12 <_printf_float+0x1b6>
 8010c0c:	6822      	ldr	r2, [r4, #0]
 8010c0e:	07d2      	lsls	r2, r2, #31
 8010c10:	d501      	bpl.n	8010c16 <_printf_float+0x1ba>
 8010c12:	3302      	adds	r3, #2
 8010c14:	e7f4      	b.n	8010c00 <_printf_float+0x1a4>
 8010c16:	2301      	movs	r3, #1
 8010c18:	e7f2      	b.n	8010c00 <_printf_float+0x1a4>
 8010c1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c20:	4299      	cmp	r1, r3
 8010c22:	db05      	blt.n	8010c30 <_printf_float+0x1d4>
 8010c24:	6823      	ldr	r3, [r4, #0]
 8010c26:	6121      	str	r1, [r4, #16]
 8010c28:	07d8      	lsls	r0, r3, #31
 8010c2a:	d5ea      	bpl.n	8010c02 <_printf_float+0x1a6>
 8010c2c:	1c4b      	adds	r3, r1, #1
 8010c2e:	e7e7      	b.n	8010c00 <_printf_float+0x1a4>
 8010c30:	2900      	cmp	r1, #0
 8010c32:	bfd4      	ite	le
 8010c34:	f1c1 0202 	rsble	r2, r1, #2
 8010c38:	2201      	movgt	r2, #1
 8010c3a:	4413      	add	r3, r2
 8010c3c:	e7e0      	b.n	8010c00 <_printf_float+0x1a4>
 8010c3e:	6823      	ldr	r3, [r4, #0]
 8010c40:	055a      	lsls	r2, r3, #21
 8010c42:	d407      	bmi.n	8010c54 <_printf_float+0x1f8>
 8010c44:	6923      	ldr	r3, [r4, #16]
 8010c46:	4642      	mov	r2, r8
 8010c48:	4631      	mov	r1, r6
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	47b8      	blx	r7
 8010c4e:	3001      	adds	r0, #1
 8010c50:	d12c      	bne.n	8010cac <_printf_float+0x250>
 8010c52:	e764      	b.n	8010b1e <_printf_float+0xc2>
 8010c54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010c58:	f240 80e0 	bls.w	8010e1c <_printf_float+0x3c0>
 8010c5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010c60:	2200      	movs	r2, #0
 8010c62:	2300      	movs	r3, #0
 8010c64:	f7ef ff48 	bl	8000af8 <__aeabi_dcmpeq>
 8010c68:	2800      	cmp	r0, #0
 8010c6a:	d034      	beq.n	8010cd6 <_printf_float+0x27a>
 8010c6c:	4a37      	ldr	r2, [pc, #220]	; (8010d4c <_printf_float+0x2f0>)
 8010c6e:	2301      	movs	r3, #1
 8010c70:	4631      	mov	r1, r6
 8010c72:	4628      	mov	r0, r5
 8010c74:	47b8      	blx	r7
 8010c76:	3001      	adds	r0, #1
 8010c78:	f43f af51 	beq.w	8010b1e <_printf_float+0xc2>
 8010c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c80:	429a      	cmp	r2, r3
 8010c82:	db02      	blt.n	8010c8a <_printf_float+0x22e>
 8010c84:	6823      	ldr	r3, [r4, #0]
 8010c86:	07d8      	lsls	r0, r3, #31
 8010c88:	d510      	bpl.n	8010cac <_printf_float+0x250>
 8010c8a:	ee18 3a10 	vmov	r3, s16
 8010c8e:	4652      	mov	r2, sl
 8010c90:	4631      	mov	r1, r6
 8010c92:	4628      	mov	r0, r5
 8010c94:	47b8      	blx	r7
 8010c96:	3001      	adds	r0, #1
 8010c98:	f43f af41 	beq.w	8010b1e <_printf_float+0xc2>
 8010c9c:	f04f 0800 	mov.w	r8, #0
 8010ca0:	f104 091a 	add.w	r9, r4, #26
 8010ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	4543      	cmp	r3, r8
 8010caa:	dc09      	bgt.n	8010cc0 <_printf_float+0x264>
 8010cac:	6823      	ldr	r3, [r4, #0]
 8010cae:	079b      	lsls	r3, r3, #30
 8010cb0:	f100 8105 	bmi.w	8010ebe <_printf_float+0x462>
 8010cb4:	68e0      	ldr	r0, [r4, #12]
 8010cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cb8:	4298      	cmp	r0, r3
 8010cba:	bfb8      	it	lt
 8010cbc:	4618      	movlt	r0, r3
 8010cbe:	e730      	b.n	8010b22 <_printf_float+0xc6>
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	464a      	mov	r2, r9
 8010cc4:	4631      	mov	r1, r6
 8010cc6:	4628      	mov	r0, r5
 8010cc8:	47b8      	blx	r7
 8010cca:	3001      	adds	r0, #1
 8010ccc:	f43f af27 	beq.w	8010b1e <_printf_float+0xc2>
 8010cd0:	f108 0801 	add.w	r8, r8, #1
 8010cd4:	e7e6      	b.n	8010ca4 <_printf_float+0x248>
 8010cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	dc39      	bgt.n	8010d50 <_printf_float+0x2f4>
 8010cdc:	4a1b      	ldr	r2, [pc, #108]	; (8010d4c <_printf_float+0x2f0>)
 8010cde:	2301      	movs	r3, #1
 8010ce0:	4631      	mov	r1, r6
 8010ce2:	4628      	mov	r0, r5
 8010ce4:	47b8      	blx	r7
 8010ce6:	3001      	adds	r0, #1
 8010ce8:	f43f af19 	beq.w	8010b1e <_printf_float+0xc2>
 8010cec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010cf0:	4313      	orrs	r3, r2
 8010cf2:	d102      	bne.n	8010cfa <_printf_float+0x29e>
 8010cf4:	6823      	ldr	r3, [r4, #0]
 8010cf6:	07d9      	lsls	r1, r3, #31
 8010cf8:	d5d8      	bpl.n	8010cac <_printf_float+0x250>
 8010cfa:	ee18 3a10 	vmov	r3, s16
 8010cfe:	4652      	mov	r2, sl
 8010d00:	4631      	mov	r1, r6
 8010d02:	4628      	mov	r0, r5
 8010d04:	47b8      	blx	r7
 8010d06:	3001      	adds	r0, #1
 8010d08:	f43f af09 	beq.w	8010b1e <_printf_float+0xc2>
 8010d0c:	f04f 0900 	mov.w	r9, #0
 8010d10:	f104 0a1a 	add.w	sl, r4, #26
 8010d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d16:	425b      	negs	r3, r3
 8010d18:	454b      	cmp	r3, r9
 8010d1a:	dc01      	bgt.n	8010d20 <_printf_float+0x2c4>
 8010d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d1e:	e792      	b.n	8010c46 <_printf_float+0x1ea>
 8010d20:	2301      	movs	r3, #1
 8010d22:	4652      	mov	r2, sl
 8010d24:	4631      	mov	r1, r6
 8010d26:	4628      	mov	r0, r5
 8010d28:	47b8      	blx	r7
 8010d2a:	3001      	adds	r0, #1
 8010d2c:	f43f aef7 	beq.w	8010b1e <_printf_float+0xc2>
 8010d30:	f109 0901 	add.w	r9, r9, #1
 8010d34:	e7ee      	b.n	8010d14 <_printf_float+0x2b8>
 8010d36:	bf00      	nop
 8010d38:	7fefffff 	.word	0x7fefffff
 8010d3c:	0801592c 	.word	0x0801592c
 8010d40:	08015930 	.word	0x08015930
 8010d44:	08015938 	.word	0x08015938
 8010d48:	08015934 	.word	0x08015934
 8010d4c:	0801593c 	.word	0x0801593c
 8010d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010d54:	429a      	cmp	r2, r3
 8010d56:	bfa8      	it	ge
 8010d58:	461a      	movge	r2, r3
 8010d5a:	2a00      	cmp	r2, #0
 8010d5c:	4691      	mov	r9, r2
 8010d5e:	dc37      	bgt.n	8010dd0 <_printf_float+0x374>
 8010d60:	f04f 0b00 	mov.w	fp, #0
 8010d64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d68:	f104 021a 	add.w	r2, r4, #26
 8010d6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010d6e:	9305      	str	r3, [sp, #20]
 8010d70:	eba3 0309 	sub.w	r3, r3, r9
 8010d74:	455b      	cmp	r3, fp
 8010d76:	dc33      	bgt.n	8010de0 <_printf_float+0x384>
 8010d78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	db3b      	blt.n	8010df8 <_printf_float+0x39c>
 8010d80:	6823      	ldr	r3, [r4, #0]
 8010d82:	07da      	lsls	r2, r3, #31
 8010d84:	d438      	bmi.n	8010df8 <_printf_float+0x39c>
 8010d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d88:	9a05      	ldr	r2, [sp, #20]
 8010d8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d8c:	1a9a      	subs	r2, r3, r2
 8010d8e:	eba3 0901 	sub.w	r9, r3, r1
 8010d92:	4591      	cmp	r9, r2
 8010d94:	bfa8      	it	ge
 8010d96:	4691      	movge	r9, r2
 8010d98:	f1b9 0f00 	cmp.w	r9, #0
 8010d9c:	dc35      	bgt.n	8010e0a <_printf_float+0x3ae>
 8010d9e:	f04f 0800 	mov.w	r8, #0
 8010da2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010da6:	f104 0a1a 	add.w	sl, r4, #26
 8010daa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010dae:	1a9b      	subs	r3, r3, r2
 8010db0:	eba3 0309 	sub.w	r3, r3, r9
 8010db4:	4543      	cmp	r3, r8
 8010db6:	f77f af79 	ble.w	8010cac <_printf_float+0x250>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	4652      	mov	r2, sl
 8010dbe:	4631      	mov	r1, r6
 8010dc0:	4628      	mov	r0, r5
 8010dc2:	47b8      	blx	r7
 8010dc4:	3001      	adds	r0, #1
 8010dc6:	f43f aeaa 	beq.w	8010b1e <_printf_float+0xc2>
 8010dca:	f108 0801 	add.w	r8, r8, #1
 8010dce:	e7ec      	b.n	8010daa <_printf_float+0x34e>
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	4631      	mov	r1, r6
 8010dd4:	4642      	mov	r2, r8
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	47b8      	blx	r7
 8010dda:	3001      	adds	r0, #1
 8010ddc:	d1c0      	bne.n	8010d60 <_printf_float+0x304>
 8010dde:	e69e      	b.n	8010b1e <_printf_float+0xc2>
 8010de0:	2301      	movs	r3, #1
 8010de2:	4631      	mov	r1, r6
 8010de4:	4628      	mov	r0, r5
 8010de6:	9205      	str	r2, [sp, #20]
 8010de8:	47b8      	blx	r7
 8010dea:	3001      	adds	r0, #1
 8010dec:	f43f ae97 	beq.w	8010b1e <_printf_float+0xc2>
 8010df0:	9a05      	ldr	r2, [sp, #20]
 8010df2:	f10b 0b01 	add.w	fp, fp, #1
 8010df6:	e7b9      	b.n	8010d6c <_printf_float+0x310>
 8010df8:	ee18 3a10 	vmov	r3, s16
 8010dfc:	4652      	mov	r2, sl
 8010dfe:	4631      	mov	r1, r6
 8010e00:	4628      	mov	r0, r5
 8010e02:	47b8      	blx	r7
 8010e04:	3001      	adds	r0, #1
 8010e06:	d1be      	bne.n	8010d86 <_printf_float+0x32a>
 8010e08:	e689      	b.n	8010b1e <_printf_float+0xc2>
 8010e0a:	9a05      	ldr	r2, [sp, #20]
 8010e0c:	464b      	mov	r3, r9
 8010e0e:	4442      	add	r2, r8
 8010e10:	4631      	mov	r1, r6
 8010e12:	4628      	mov	r0, r5
 8010e14:	47b8      	blx	r7
 8010e16:	3001      	adds	r0, #1
 8010e18:	d1c1      	bne.n	8010d9e <_printf_float+0x342>
 8010e1a:	e680      	b.n	8010b1e <_printf_float+0xc2>
 8010e1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e1e:	2a01      	cmp	r2, #1
 8010e20:	dc01      	bgt.n	8010e26 <_printf_float+0x3ca>
 8010e22:	07db      	lsls	r3, r3, #31
 8010e24:	d538      	bpl.n	8010e98 <_printf_float+0x43c>
 8010e26:	2301      	movs	r3, #1
 8010e28:	4642      	mov	r2, r8
 8010e2a:	4631      	mov	r1, r6
 8010e2c:	4628      	mov	r0, r5
 8010e2e:	47b8      	blx	r7
 8010e30:	3001      	adds	r0, #1
 8010e32:	f43f ae74 	beq.w	8010b1e <_printf_float+0xc2>
 8010e36:	ee18 3a10 	vmov	r3, s16
 8010e3a:	4652      	mov	r2, sl
 8010e3c:	4631      	mov	r1, r6
 8010e3e:	4628      	mov	r0, r5
 8010e40:	47b8      	blx	r7
 8010e42:	3001      	adds	r0, #1
 8010e44:	f43f ae6b 	beq.w	8010b1e <_printf_float+0xc2>
 8010e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	2300      	movs	r3, #0
 8010e50:	f7ef fe52 	bl	8000af8 <__aeabi_dcmpeq>
 8010e54:	b9d8      	cbnz	r0, 8010e8e <_printf_float+0x432>
 8010e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e58:	f108 0201 	add.w	r2, r8, #1
 8010e5c:	3b01      	subs	r3, #1
 8010e5e:	4631      	mov	r1, r6
 8010e60:	4628      	mov	r0, r5
 8010e62:	47b8      	blx	r7
 8010e64:	3001      	adds	r0, #1
 8010e66:	d10e      	bne.n	8010e86 <_printf_float+0x42a>
 8010e68:	e659      	b.n	8010b1e <_printf_float+0xc2>
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	4652      	mov	r2, sl
 8010e6e:	4631      	mov	r1, r6
 8010e70:	4628      	mov	r0, r5
 8010e72:	47b8      	blx	r7
 8010e74:	3001      	adds	r0, #1
 8010e76:	f43f ae52 	beq.w	8010b1e <_printf_float+0xc2>
 8010e7a:	f108 0801 	add.w	r8, r8, #1
 8010e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e80:	3b01      	subs	r3, #1
 8010e82:	4543      	cmp	r3, r8
 8010e84:	dcf1      	bgt.n	8010e6a <_printf_float+0x40e>
 8010e86:	464b      	mov	r3, r9
 8010e88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010e8c:	e6dc      	b.n	8010c48 <_printf_float+0x1ec>
 8010e8e:	f04f 0800 	mov.w	r8, #0
 8010e92:	f104 0a1a 	add.w	sl, r4, #26
 8010e96:	e7f2      	b.n	8010e7e <_printf_float+0x422>
 8010e98:	2301      	movs	r3, #1
 8010e9a:	4642      	mov	r2, r8
 8010e9c:	e7df      	b.n	8010e5e <_printf_float+0x402>
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	464a      	mov	r2, r9
 8010ea2:	4631      	mov	r1, r6
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	47b8      	blx	r7
 8010ea8:	3001      	adds	r0, #1
 8010eaa:	f43f ae38 	beq.w	8010b1e <_printf_float+0xc2>
 8010eae:	f108 0801 	add.w	r8, r8, #1
 8010eb2:	68e3      	ldr	r3, [r4, #12]
 8010eb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010eb6:	1a5b      	subs	r3, r3, r1
 8010eb8:	4543      	cmp	r3, r8
 8010eba:	dcf0      	bgt.n	8010e9e <_printf_float+0x442>
 8010ebc:	e6fa      	b.n	8010cb4 <_printf_float+0x258>
 8010ebe:	f04f 0800 	mov.w	r8, #0
 8010ec2:	f104 0919 	add.w	r9, r4, #25
 8010ec6:	e7f4      	b.n	8010eb2 <_printf_float+0x456>

08010ec8 <_printf_common>:
 8010ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ecc:	4616      	mov	r6, r2
 8010ece:	4699      	mov	r9, r3
 8010ed0:	688a      	ldr	r2, [r1, #8]
 8010ed2:	690b      	ldr	r3, [r1, #16]
 8010ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	bfb8      	it	lt
 8010edc:	4613      	movlt	r3, r2
 8010ede:	6033      	str	r3, [r6, #0]
 8010ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ee4:	4607      	mov	r7, r0
 8010ee6:	460c      	mov	r4, r1
 8010ee8:	b10a      	cbz	r2, 8010eee <_printf_common+0x26>
 8010eea:	3301      	adds	r3, #1
 8010eec:	6033      	str	r3, [r6, #0]
 8010eee:	6823      	ldr	r3, [r4, #0]
 8010ef0:	0699      	lsls	r1, r3, #26
 8010ef2:	bf42      	ittt	mi
 8010ef4:	6833      	ldrmi	r3, [r6, #0]
 8010ef6:	3302      	addmi	r3, #2
 8010ef8:	6033      	strmi	r3, [r6, #0]
 8010efa:	6825      	ldr	r5, [r4, #0]
 8010efc:	f015 0506 	ands.w	r5, r5, #6
 8010f00:	d106      	bne.n	8010f10 <_printf_common+0x48>
 8010f02:	f104 0a19 	add.w	sl, r4, #25
 8010f06:	68e3      	ldr	r3, [r4, #12]
 8010f08:	6832      	ldr	r2, [r6, #0]
 8010f0a:	1a9b      	subs	r3, r3, r2
 8010f0c:	42ab      	cmp	r3, r5
 8010f0e:	dc26      	bgt.n	8010f5e <_printf_common+0x96>
 8010f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010f14:	1e13      	subs	r3, r2, #0
 8010f16:	6822      	ldr	r2, [r4, #0]
 8010f18:	bf18      	it	ne
 8010f1a:	2301      	movne	r3, #1
 8010f1c:	0692      	lsls	r2, r2, #26
 8010f1e:	d42b      	bmi.n	8010f78 <_printf_common+0xb0>
 8010f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f24:	4649      	mov	r1, r9
 8010f26:	4638      	mov	r0, r7
 8010f28:	47c0      	blx	r8
 8010f2a:	3001      	adds	r0, #1
 8010f2c:	d01e      	beq.n	8010f6c <_printf_common+0xa4>
 8010f2e:	6823      	ldr	r3, [r4, #0]
 8010f30:	68e5      	ldr	r5, [r4, #12]
 8010f32:	6832      	ldr	r2, [r6, #0]
 8010f34:	f003 0306 	and.w	r3, r3, #6
 8010f38:	2b04      	cmp	r3, #4
 8010f3a:	bf08      	it	eq
 8010f3c:	1aad      	subeq	r5, r5, r2
 8010f3e:	68a3      	ldr	r3, [r4, #8]
 8010f40:	6922      	ldr	r2, [r4, #16]
 8010f42:	bf0c      	ite	eq
 8010f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f48:	2500      	movne	r5, #0
 8010f4a:	4293      	cmp	r3, r2
 8010f4c:	bfc4      	itt	gt
 8010f4e:	1a9b      	subgt	r3, r3, r2
 8010f50:	18ed      	addgt	r5, r5, r3
 8010f52:	2600      	movs	r6, #0
 8010f54:	341a      	adds	r4, #26
 8010f56:	42b5      	cmp	r5, r6
 8010f58:	d11a      	bne.n	8010f90 <_printf_common+0xc8>
 8010f5a:	2000      	movs	r0, #0
 8010f5c:	e008      	b.n	8010f70 <_printf_common+0xa8>
 8010f5e:	2301      	movs	r3, #1
 8010f60:	4652      	mov	r2, sl
 8010f62:	4649      	mov	r1, r9
 8010f64:	4638      	mov	r0, r7
 8010f66:	47c0      	blx	r8
 8010f68:	3001      	adds	r0, #1
 8010f6a:	d103      	bne.n	8010f74 <_printf_common+0xac>
 8010f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f74:	3501      	adds	r5, #1
 8010f76:	e7c6      	b.n	8010f06 <_printf_common+0x3e>
 8010f78:	18e1      	adds	r1, r4, r3
 8010f7a:	1c5a      	adds	r2, r3, #1
 8010f7c:	2030      	movs	r0, #48	; 0x30
 8010f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010f82:	4422      	add	r2, r4
 8010f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010f88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010f8c:	3302      	adds	r3, #2
 8010f8e:	e7c7      	b.n	8010f20 <_printf_common+0x58>
 8010f90:	2301      	movs	r3, #1
 8010f92:	4622      	mov	r2, r4
 8010f94:	4649      	mov	r1, r9
 8010f96:	4638      	mov	r0, r7
 8010f98:	47c0      	blx	r8
 8010f9a:	3001      	adds	r0, #1
 8010f9c:	d0e6      	beq.n	8010f6c <_printf_common+0xa4>
 8010f9e:	3601      	adds	r6, #1
 8010fa0:	e7d9      	b.n	8010f56 <_printf_common+0x8e>
	...

08010fa4 <_printf_i>:
 8010fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fa8:	7e0f      	ldrb	r7, [r1, #24]
 8010faa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010fac:	2f78      	cmp	r7, #120	; 0x78
 8010fae:	4691      	mov	r9, r2
 8010fb0:	4680      	mov	r8, r0
 8010fb2:	460c      	mov	r4, r1
 8010fb4:	469a      	mov	sl, r3
 8010fb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010fba:	d807      	bhi.n	8010fcc <_printf_i+0x28>
 8010fbc:	2f62      	cmp	r7, #98	; 0x62
 8010fbe:	d80a      	bhi.n	8010fd6 <_printf_i+0x32>
 8010fc0:	2f00      	cmp	r7, #0
 8010fc2:	f000 80d8 	beq.w	8011176 <_printf_i+0x1d2>
 8010fc6:	2f58      	cmp	r7, #88	; 0x58
 8010fc8:	f000 80a3 	beq.w	8011112 <_printf_i+0x16e>
 8010fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010fd4:	e03a      	b.n	801104c <_printf_i+0xa8>
 8010fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010fda:	2b15      	cmp	r3, #21
 8010fdc:	d8f6      	bhi.n	8010fcc <_printf_i+0x28>
 8010fde:	a101      	add	r1, pc, #4	; (adr r1, 8010fe4 <_printf_i+0x40>)
 8010fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010fe4:	0801103d 	.word	0x0801103d
 8010fe8:	08011051 	.word	0x08011051
 8010fec:	08010fcd 	.word	0x08010fcd
 8010ff0:	08010fcd 	.word	0x08010fcd
 8010ff4:	08010fcd 	.word	0x08010fcd
 8010ff8:	08010fcd 	.word	0x08010fcd
 8010ffc:	08011051 	.word	0x08011051
 8011000:	08010fcd 	.word	0x08010fcd
 8011004:	08010fcd 	.word	0x08010fcd
 8011008:	08010fcd 	.word	0x08010fcd
 801100c:	08010fcd 	.word	0x08010fcd
 8011010:	0801115d 	.word	0x0801115d
 8011014:	08011081 	.word	0x08011081
 8011018:	0801113f 	.word	0x0801113f
 801101c:	08010fcd 	.word	0x08010fcd
 8011020:	08010fcd 	.word	0x08010fcd
 8011024:	0801117f 	.word	0x0801117f
 8011028:	08010fcd 	.word	0x08010fcd
 801102c:	08011081 	.word	0x08011081
 8011030:	08010fcd 	.word	0x08010fcd
 8011034:	08010fcd 	.word	0x08010fcd
 8011038:	08011147 	.word	0x08011147
 801103c:	682b      	ldr	r3, [r5, #0]
 801103e:	1d1a      	adds	r2, r3, #4
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	602a      	str	r2, [r5, #0]
 8011044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801104c:	2301      	movs	r3, #1
 801104e:	e0a3      	b.n	8011198 <_printf_i+0x1f4>
 8011050:	6820      	ldr	r0, [r4, #0]
 8011052:	6829      	ldr	r1, [r5, #0]
 8011054:	0606      	lsls	r6, r0, #24
 8011056:	f101 0304 	add.w	r3, r1, #4
 801105a:	d50a      	bpl.n	8011072 <_printf_i+0xce>
 801105c:	680e      	ldr	r6, [r1, #0]
 801105e:	602b      	str	r3, [r5, #0]
 8011060:	2e00      	cmp	r6, #0
 8011062:	da03      	bge.n	801106c <_printf_i+0xc8>
 8011064:	232d      	movs	r3, #45	; 0x2d
 8011066:	4276      	negs	r6, r6
 8011068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801106c:	485e      	ldr	r0, [pc, #376]	; (80111e8 <_printf_i+0x244>)
 801106e:	230a      	movs	r3, #10
 8011070:	e019      	b.n	80110a6 <_printf_i+0x102>
 8011072:	680e      	ldr	r6, [r1, #0]
 8011074:	602b      	str	r3, [r5, #0]
 8011076:	f010 0f40 	tst.w	r0, #64	; 0x40
 801107a:	bf18      	it	ne
 801107c:	b236      	sxthne	r6, r6
 801107e:	e7ef      	b.n	8011060 <_printf_i+0xbc>
 8011080:	682b      	ldr	r3, [r5, #0]
 8011082:	6820      	ldr	r0, [r4, #0]
 8011084:	1d19      	adds	r1, r3, #4
 8011086:	6029      	str	r1, [r5, #0]
 8011088:	0601      	lsls	r1, r0, #24
 801108a:	d501      	bpl.n	8011090 <_printf_i+0xec>
 801108c:	681e      	ldr	r6, [r3, #0]
 801108e:	e002      	b.n	8011096 <_printf_i+0xf2>
 8011090:	0646      	lsls	r6, r0, #25
 8011092:	d5fb      	bpl.n	801108c <_printf_i+0xe8>
 8011094:	881e      	ldrh	r6, [r3, #0]
 8011096:	4854      	ldr	r0, [pc, #336]	; (80111e8 <_printf_i+0x244>)
 8011098:	2f6f      	cmp	r7, #111	; 0x6f
 801109a:	bf0c      	ite	eq
 801109c:	2308      	moveq	r3, #8
 801109e:	230a      	movne	r3, #10
 80110a0:	2100      	movs	r1, #0
 80110a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80110a6:	6865      	ldr	r5, [r4, #4]
 80110a8:	60a5      	str	r5, [r4, #8]
 80110aa:	2d00      	cmp	r5, #0
 80110ac:	bfa2      	ittt	ge
 80110ae:	6821      	ldrge	r1, [r4, #0]
 80110b0:	f021 0104 	bicge.w	r1, r1, #4
 80110b4:	6021      	strge	r1, [r4, #0]
 80110b6:	b90e      	cbnz	r6, 80110bc <_printf_i+0x118>
 80110b8:	2d00      	cmp	r5, #0
 80110ba:	d04d      	beq.n	8011158 <_printf_i+0x1b4>
 80110bc:	4615      	mov	r5, r2
 80110be:	fbb6 f1f3 	udiv	r1, r6, r3
 80110c2:	fb03 6711 	mls	r7, r3, r1, r6
 80110c6:	5dc7      	ldrb	r7, [r0, r7]
 80110c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80110cc:	4637      	mov	r7, r6
 80110ce:	42bb      	cmp	r3, r7
 80110d0:	460e      	mov	r6, r1
 80110d2:	d9f4      	bls.n	80110be <_printf_i+0x11a>
 80110d4:	2b08      	cmp	r3, #8
 80110d6:	d10b      	bne.n	80110f0 <_printf_i+0x14c>
 80110d8:	6823      	ldr	r3, [r4, #0]
 80110da:	07de      	lsls	r6, r3, #31
 80110dc:	d508      	bpl.n	80110f0 <_printf_i+0x14c>
 80110de:	6923      	ldr	r3, [r4, #16]
 80110e0:	6861      	ldr	r1, [r4, #4]
 80110e2:	4299      	cmp	r1, r3
 80110e4:	bfde      	ittt	le
 80110e6:	2330      	movle	r3, #48	; 0x30
 80110e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80110ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80110f0:	1b52      	subs	r2, r2, r5
 80110f2:	6122      	str	r2, [r4, #16]
 80110f4:	f8cd a000 	str.w	sl, [sp]
 80110f8:	464b      	mov	r3, r9
 80110fa:	aa03      	add	r2, sp, #12
 80110fc:	4621      	mov	r1, r4
 80110fe:	4640      	mov	r0, r8
 8011100:	f7ff fee2 	bl	8010ec8 <_printf_common>
 8011104:	3001      	adds	r0, #1
 8011106:	d14c      	bne.n	80111a2 <_printf_i+0x1fe>
 8011108:	f04f 30ff 	mov.w	r0, #4294967295
 801110c:	b004      	add	sp, #16
 801110e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011112:	4835      	ldr	r0, [pc, #212]	; (80111e8 <_printf_i+0x244>)
 8011114:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011118:	6829      	ldr	r1, [r5, #0]
 801111a:	6823      	ldr	r3, [r4, #0]
 801111c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011120:	6029      	str	r1, [r5, #0]
 8011122:	061d      	lsls	r5, r3, #24
 8011124:	d514      	bpl.n	8011150 <_printf_i+0x1ac>
 8011126:	07df      	lsls	r7, r3, #31
 8011128:	bf44      	itt	mi
 801112a:	f043 0320 	orrmi.w	r3, r3, #32
 801112e:	6023      	strmi	r3, [r4, #0]
 8011130:	b91e      	cbnz	r6, 801113a <_printf_i+0x196>
 8011132:	6823      	ldr	r3, [r4, #0]
 8011134:	f023 0320 	bic.w	r3, r3, #32
 8011138:	6023      	str	r3, [r4, #0]
 801113a:	2310      	movs	r3, #16
 801113c:	e7b0      	b.n	80110a0 <_printf_i+0xfc>
 801113e:	6823      	ldr	r3, [r4, #0]
 8011140:	f043 0320 	orr.w	r3, r3, #32
 8011144:	6023      	str	r3, [r4, #0]
 8011146:	2378      	movs	r3, #120	; 0x78
 8011148:	4828      	ldr	r0, [pc, #160]	; (80111ec <_printf_i+0x248>)
 801114a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801114e:	e7e3      	b.n	8011118 <_printf_i+0x174>
 8011150:	0659      	lsls	r1, r3, #25
 8011152:	bf48      	it	mi
 8011154:	b2b6      	uxthmi	r6, r6
 8011156:	e7e6      	b.n	8011126 <_printf_i+0x182>
 8011158:	4615      	mov	r5, r2
 801115a:	e7bb      	b.n	80110d4 <_printf_i+0x130>
 801115c:	682b      	ldr	r3, [r5, #0]
 801115e:	6826      	ldr	r6, [r4, #0]
 8011160:	6961      	ldr	r1, [r4, #20]
 8011162:	1d18      	adds	r0, r3, #4
 8011164:	6028      	str	r0, [r5, #0]
 8011166:	0635      	lsls	r5, r6, #24
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	d501      	bpl.n	8011170 <_printf_i+0x1cc>
 801116c:	6019      	str	r1, [r3, #0]
 801116e:	e002      	b.n	8011176 <_printf_i+0x1d2>
 8011170:	0670      	lsls	r0, r6, #25
 8011172:	d5fb      	bpl.n	801116c <_printf_i+0x1c8>
 8011174:	8019      	strh	r1, [r3, #0]
 8011176:	2300      	movs	r3, #0
 8011178:	6123      	str	r3, [r4, #16]
 801117a:	4615      	mov	r5, r2
 801117c:	e7ba      	b.n	80110f4 <_printf_i+0x150>
 801117e:	682b      	ldr	r3, [r5, #0]
 8011180:	1d1a      	adds	r2, r3, #4
 8011182:	602a      	str	r2, [r5, #0]
 8011184:	681d      	ldr	r5, [r3, #0]
 8011186:	6862      	ldr	r2, [r4, #4]
 8011188:	2100      	movs	r1, #0
 801118a:	4628      	mov	r0, r5
 801118c:	f7ef f840 	bl	8000210 <memchr>
 8011190:	b108      	cbz	r0, 8011196 <_printf_i+0x1f2>
 8011192:	1b40      	subs	r0, r0, r5
 8011194:	6060      	str	r0, [r4, #4]
 8011196:	6863      	ldr	r3, [r4, #4]
 8011198:	6123      	str	r3, [r4, #16]
 801119a:	2300      	movs	r3, #0
 801119c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111a0:	e7a8      	b.n	80110f4 <_printf_i+0x150>
 80111a2:	6923      	ldr	r3, [r4, #16]
 80111a4:	462a      	mov	r2, r5
 80111a6:	4649      	mov	r1, r9
 80111a8:	4640      	mov	r0, r8
 80111aa:	47d0      	blx	sl
 80111ac:	3001      	adds	r0, #1
 80111ae:	d0ab      	beq.n	8011108 <_printf_i+0x164>
 80111b0:	6823      	ldr	r3, [r4, #0]
 80111b2:	079b      	lsls	r3, r3, #30
 80111b4:	d413      	bmi.n	80111de <_printf_i+0x23a>
 80111b6:	68e0      	ldr	r0, [r4, #12]
 80111b8:	9b03      	ldr	r3, [sp, #12]
 80111ba:	4298      	cmp	r0, r3
 80111bc:	bfb8      	it	lt
 80111be:	4618      	movlt	r0, r3
 80111c0:	e7a4      	b.n	801110c <_printf_i+0x168>
 80111c2:	2301      	movs	r3, #1
 80111c4:	4632      	mov	r2, r6
 80111c6:	4649      	mov	r1, r9
 80111c8:	4640      	mov	r0, r8
 80111ca:	47d0      	blx	sl
 80111cc:	3001      	adds	r0, #1
 80111ce:	d09b      	beq.n	8011108 <_printf_i+0x164>
 80111d0:	3501      	adds	r5, #1
 80111d2:	68e3      	ldr	r3, [r4, #12]
 80111d4:	9903      	ldr	r1, [sp, #12]
 80111d6:	1a5b      	subs	r3, r3, r1
 80111d8:	42ab      	cmp	r3, r5
 80111da:	dcf2      	bgt.n	80111c2 <_printf_i+0x21e>
 80111dc:	e7eb      	b.n	80111b6 <_printf_i+0x212>
 80111de:	2500      	movs	r5, #0
 80111e0:	f104 0619 	add.w	r6, r4, #25
 80111e4:	e7f5      	b.n	80111d2 <_printf_i+0x22e>
 80111e6:	bf00      	nop
 80111e8:	0801593e 	.word	0x0801593e
 80111ec:	0801594f 	.word	0x0801594f

080111f0 <_scanf_float>:
 80111f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f4:	b087      	sub	sp, #28
 80111f6:	4617      	mov	r7, r2
 80111f8:	9303      	str	r3, [sp, #12]
 80111fa:	688b      	ldr	r3, [r1, #8]
 80111fc:	1e5a      	subs	r2, r3, #1
 80111fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011202:	bf83      	ittte	hi
 8011204:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011208:	195b      	addhi	r3, r3, r5
 801120a:	9302      	strhi	r3, [sp, #8]
 801120c:	2300      	movls	r3, #0
 801120e:	bf86      	itte	hi
 8011210:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011214:	608b      	strhi	r3, [r1, #8]
 8011216:	9302      	strls	r3, [sp, #8]
 8011218:	680b      	ldr	r3, [r1, #0]
 801121a:	468b      	mov	fp, r1
 801121c:	2500      	movs	r5, #0
 801121e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011222:	f84b 3b1c 	str.w	r3, [fp], #28
 8011226:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801122a:	4680      	mov	r8, r0
 801122c:	460c      	mov	r4, r1
 801122e:	465e      	mov	r6, fp
 8011230:	46aa      	mov	sl, r5
 8011232:	46a9      	mov	r9, r5
 8011234:	9501      	str	r5, [sp, #4]
 8011236:	68a2      	ldr	r2, [r4, #8]
 8011238:	b152      	cbz	r2, 8011250 <_scanf_float+0x60>
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	2b4e      	cmp	r3, #78	; 0x4e
 8011240:	d864      	bhi.n	801130c <_scanf_float+0x11c>
 8011242:	2b40      	cmp	r3, #64	; 0x40
 8011244:	d83c      	bhi.n	80112c0 <_scanf_float+0xd0>
 8011246:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801124a:	b2c8      	uxtb	r0, r1
 801124c:	280e      	cmp	r0, #14
 801124e:	d93a      	bls.n	80112c6 <_scanf_float+0xd6>
 8011250:	f1b9 0f00 	cmp.w	r9, #0
 8011254:	d003      	beq.n	801125e <_scanf_float+0x6e>
 8011256:	6823      	ldr	r3, [r4, #0]
 8011258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801125c:	6023      	str	r3, [r4, #0]
 801125e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011262:	f1ba 0f01 	cmp.w	sl, #1
 8011266:	f200 8113 	bhi.w	8011490 <_scanf_float+0x2a0>
 801126a:	455e      	cmp	r6, fp
 801126c:	f200 8105 	bhi.w	801147a <_scanf_float+0x28a>
 8011270:	2501      	movs	r5, #1
 8011272:	4628      	mov	r0, r5
 8011274:	b007      	add	sp, #28
 8011276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801127a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801127e:	2a0d      	cmp	r2, #13
 8011280:	d8e6      	bhi.n	8011250 <_scanf_float+0x60>
 8011282:	a101      	add	r1, pc, #4	; (adr r1, 8011288 <_scanf_float+0x98>)
 8011284:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011288:	080113c7 	.word	0x080113c7
 801128c:	08011251 	.word	0x08011251
 8011290:	08011251 	.word	0x08011251
 8011294:	08011251 	.word	0x08011251
 8011298:	08011427 	.word	0x08011427
 801129c:	080113ff 	.word	0x080113ff
 80112a0:	08011251 	.word	0x08011251
 80112a4:	08011251 	.word	0x08011251
 80112a8:	080113d5 	.word	0x080113d5
 80112ac:	08011251 	.word	0x08011251
 80112b0:	08011251 	.word	0x08011251
 80112b4:	08011251 	.word	0x08011251
 80112b8:	08011251 	.word	0x08011251
 80112bc:	0801138d 	.word	0x0801138d
 80112c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80112c4:	e7db      	b.n	801127e <_scanf_float+0x8e>
 80112c6:	290e      	cmp	r1, #14
 80112c8:	d8c2      	bhi.n	8011250 <_scanf_float+0x60>
 80112ca:	a001      	add	r0, pc, #4	; (adr r0, 80112d0 <_scanf_float+0xe0>)
 80112cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80112d0:	0801137f 	.word	0x0801137f
 80112d4:	08011251 	.word	0x08011251
 80112d8:	0801137f 	.word	0x0801137f
 80112dc:	08011413 	.word	0x08011413
 80112e0:	08011251 	.word	0x08011251
 80112e4:	0801132d 	.word	0x0801132d
 80112e8:	08011369 	.word	0x08011369
 80112ec:	08011369 	.word	0x08011369
 80112f0:	08011369 	.word	0x08011369
 80112f4:	08011369 	.word	0x08011369
 80112f8:	08011369 	.word	0x08011369
 80112fc:	08011369 	.word	0x08011369
 8011300:	08011369 	.word	0x08011369
 8011304:	08011369 	.word	0x08011369
 8011308:	08011369 	.word	0x08011369
 801130c:	2b6e      	cmp	r3, #110	; 0x6e
 801130e:	d809      	bhi.n	8011324 <_scanf_float+0x134>
 8011310:	2b60      	cmp	r3, #96	; 0x60
 8011312:	d8b2      	bhi.n	801127a <_scanf_float+0x8a>
 8011314:	2b54      	cmp	r3, #84	; 0x54
 8011316:	d077      	beq.n	8011408 <_scanf_float+0x218>
 8011318:	2b59      	cmp	r3, #89	; 0x59
 801131a:	d199      	bne.n	8011250 <_scanf_float+0x60>
 801131c:	2d07      	cmp	r5, #7
 801131e:	d197      	bne.n	8011250 <_scanf_float+0x60>
 8011320:	2508      	movs	r5, #8
 8011322:	e029      	b.n	8011378 <_scanf_float+0x188>
 8011324:	2b74      	cmp	r3, #116	; 0x74
 8011326:	d06f      	beq.n	8011408 <_scanf_float+0x218>
 8011328:	2b79      	cmp	r3, #121	; 0x79
 801132a:	e7f6      	b.n	801131a <_scanf_float+0x12a>
 801132c:	6821      	ldr	r1, [r4, #0]
 801132e:	05c8      	lsls	r0, r1, #23
 8011330:	d51a      	bpl.n	8011368 <_scanf_float+0x178>
 8011332:	9b02      	ldr	r3, [sp, #8]
 8011334:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011338:	6021      	str	r1, [r4, #0]
 801133a:	f109 0901 	add.w	r9, r9, #1
 801133e:	b11b      	cbz	r3, 8011348 <_scanf_float+0x158>
 8011340:	3b01      	subs	r3, #1
 8011342:	3201      	adds	r2, #1
 8011344:	9302      	str	r3, [sp, #8]
 8011346:	60a2      	str	r2, [r4, #8]
 8011348:	68a3      	ldr	r3, [r4, #8]
 801134a:	3b01      	subs	r3, #1
 801134c:	60a3      	str	r3, [r4, #8]
 801134e:	6923      	ldr	r3, [r4, #16]
 8011350:	3301      	adds	r3, #1
 8011352:	6123      	str	r3, [r4, #16]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	3b01      	subs	r3, #1
 8011358:	2b00      	cmp	r3, #0
 801135a:	607b      	str	r3, [r7, #4]
 801135c:	f340 8084 	ble.w	8011468 <_scanf_float+0x278>
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	3301      	adds	r3, #1
 8011364:	603b      	str	r3, [r7, #0]
 8011366:	e766      	b.n	8011236 <_scanf_float+0x46>
 8011368:	eb1a 0f05 	cmn.w	sl, r5
 801136c:	f47f af70 	bne.w	8011250 <_scanf_float+0x60>
 8011370:	6822      	ldr	r2, [r4, #0]
 8011372:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011376:	6022      	str	r2, [r4, #0]
 8011378:	f806 3b01 	strb.w	r3, [r6], #1
 801137c:	e7e4      	b.n	8011348 <_scanf_float+0x158>
 801137e:	6822      	ldr	r2, [r4, #0]
 8011380:	0610      	lsls	r0, r2, #24
 8011382:	f57f af65 	bpl.w	8011250 <_scanf_float+0x60>
 8011386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801138a:	e7f4      	b.n	8011376 <_scanf_float+0x186>
 801138c:	f1ba 0f00 	cmp.w	sl, #0
 8011390:	d10e      	bne.n	80113b0 <_scanf_float+0x1c0>
 8011392:	f1b9 0f00 	cmp.w	r9, #0
 8011396:	d10e      	bne.n	80113b6 <_scanf_float+0x1c6>
 8011398:	6822      	ldr	r2, [r4, #0]
 801139a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801139e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80113a2:	d108      	bne.n	80113b6 <_scanf_float+0x1c6>
 80113a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80113a8:	6022      	str	r2, [r4, #0]
 80113aa:	f04f 0a01 	mov.w	sl, #1
 80113ae:	e7e3      	b.n	8011378 <_scanf_float+0x188>
 80113b0:	f1ba 0f02 	cmp.w	sl, #2
 80113b4:	d055      	beq.n	8011462 <_scanf_float+0x272>
 80113b6:	2d01      	cmp	r5, #1
 80113b8:	d002      	beq.n	80113c0 <_scanf_float+0x1d0>
 80113ba:	2d04      	cmp	r5, #4
 80113bc:	f47f af48 	bne.w	8011250 <_scanf_float+0x60>
 80113c0:	3501      	adds	r5, #1
 80113c2:	b2ed      	uxtb	r5, r5
 80113c4:	e7d8      	b.n	8011378 <_scanf_float+0x188>
 80113c6:	f1ba 0f01 	cmp.w	sl, #1
 80113ca:	f47f af41 	bne.w	8011250 <_scanf_float+0x60>
 80113ce:	f04f 0a02 	mov.w	sl, #2
 80113d2:	e7d1      	b.n	8011378 <_scanf_float+0x188>
 80113d4:	b97d      	cbnz	r5, 80113f6 <_scanf_float+0x206>
 80113d6:	f1b9 0f00 	cmp.w	r9, #0
 80113da:	f47f af3c 	bne.w	8011256 <_scanf_float+0x66>
 80113de:	6822      	ldr	r2, [r4, #0]
 80113e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80113e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80113e8:	f47f af39 	bne.w	801125e <_scanf_float+0x6e>
 80113ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80113f0:	6022      	str	r2, [r4, #0]
 80113f2:	2501      	movs	r5, #1
 80113f4:	e7c0      	b.n	8011378 <_scanf_float+0x188>
 80113f6:	2d03      	cmp	r5, #3
 80113f8:	d0e2      	beq.n	80113c0 <_scanf_float+0x1d0>
 80113fa:	2d05      	cmp	r5, #5
 80113fc:	e7de      	b.n	80113bc <_scanf_float+0x1cc>
 80113fe:	2d02      	cmp	r5, #2
 8011400:	f47f af26 	bne.w	8011250 <_scanf_float+0x60>
 8011404:	2503      	movs	r5, #3
 8011406:	e7b7      	b.n	8011378 <_scanf_float+0x188>
 8011408:	2d06      	cmp	r5, #6
 801140a:	f47f af21 	bne.w	8011250 <_scanf_float+0x60>
 801140e:	2507      	movs	r5, #7
 8011410:	e7b2      	b.n	8011378 <_scanf_float+0x188>
 8011412:	6822      	ldr	r2, [r4, #0]
 8011414:	0591      	lsls	r1, r2, #22
 8011416:	f57f af1b 	bpl.w	8011250 <_scanf_float+0x60>
 801141a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801141e:	6022      	str	r2, [r4, #0]
 8011420:	f8cd 9004 	str.w	r9, [sp, #4]
 8011424:	e7a8      	b.n	8011378 <_scanf_float+0x188>
 8011426:	6822      	ldr	r2, [r4, #0]
 8011428:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801142c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011430:	d006      	beq.n	8011440 <_scanf_float+0x250>
 8011432:	0550      	lsls	r0, r2, #21
 8011434:	f57f af0c 	bpl.w	8011250 <_scanf_float+0x60>
 8011438:	f1b9 0f00 	cmp.w	r9, #0
 801143c:	f43f af0f 	beq.w	801125e <_scanf_float+0x6e>
 8011440:	0591      	lsls	r1, r2, #22
 8011442:	bf58      	it	pl
 8011444:	9901      	ldrpl	r1, [sp, #4]
 8011446:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801144a:	bf58      	it	pl
 801144c:	eba9 0101 	subpl.w	r1, r9, r1
 8011450:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011454:	bf58      	it	pl
 8011456:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801145a:	6022      	str	r2, [r4, #0]
 801145c:	f04f 0900 	mov.w	r9, #0
 8011460:	e78a      	b.n	8011378 <_scanf_float+0x188>
 8011462:	f04f 0a03 	mov.w	sl, #3
 8011466:	e787      	b.n	8011378 <_scanf_float+0x188>
 8011468:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801146c:	4639      	mov	r1, r7
 801146e:	4640      	mov	r0, r8
 8011470:	4798      	blx	r3
 8011472:	2800      	cmp	r0, #0
 8011474:	f43f aedf 	beq.w	8011236 <_scanf_float+0x46>
 8011478:	e6ea      	b.n	8011250 <_scanf_float+0x60>
 801147a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801147e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011482:	463a      	mov	r2, r7
 8011484:	4640      	mov	r0, r8
 8011486:	4798      	blx	r3
 8011488:	6923      	ldr	r3, [r4, #16]
 801148a:	3b01      	subs	r3, #1
 801148c:	6123      	str	r3, [r4, #16]
 801148e:	e6ec      	b.n	801126a <_scanf_float+0x7a>
 8011490:	1e6b      	subs	r3, r5, #1
 8011492:	2b06      	cmp	r3, #6
 8011494:	d825      	bhi.n	80114e2 <_scanf_float+0x2f2>
 8011496:	2d02      	cmp	r5, #2
 8011498:	d836      	bhi.n	8011508 <_scanf_float+0x318>
 801149a:	455e      	cmp	r6, fp
 801149c:	f67f aee8 	bls.w	8011270 <_scanf_float+0x80>
 80114a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80114a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80114a8:	463a      	mov	r2, r7
 80114aa:	4640      	mov	r0, r8
 80114ac:	4798      	blx	r3
 80114ae:	6923      	ldr	r3, [r4, #16]
 80114b0:	3b01      	subs	r3, #1
 80114b2:	6123      	str	r3, [r4, #16]
 80114b4:	e7f1      	b.n	801149a <_scanf_float+0x2aa>
 80114b6:	9802      	ldr	r0, [sp, #8]
 80114b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80114bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80114c0:	9002      	str	r0, [sp, #8]
 80114c2:	463a      	mov	r2, r7
 80114c4:	4640      	mov	r0, r8
 80114c6:	4798      	blx	r3
 80114c8:	6923      	ldr	r3, [r4, #16]
 80114ca:	3b01      	subs	r3, #1
 80114cc:	6123      	str	r3, [r4, #16]
 80114ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80114d2:	fa5f fa8a 	uxtb.w	sl, sl
 80114d6:	f1ba 0f02 	cmp.w	sl, #2
 80114da:	d1ec      	bne.n	80114b6 <_scanf_float+0x2c6>
 80114dc:	3d03      	subs	r5, #3
 80114de:	b2ed      	uxtb	r5, r5
 80114e0:	1b76      	subs	r6, r6, r5
 80114e2:	6823      	ldr	r3, [r4, #0]
 80114e4:	05da      	lsls	r2, r3, #23
 80114e6:	d52f      	bpl.n	8011548 <_scanf_float+0x358>
 80114e8:	055b      	lsls	r3, r3, #21
 80114ea:	d510      	bpl.n	801150e <_scanf_float+0x31e>
 80114ec:	455e      	cmp	r6, fp
 80114ee:	f67f aebf 	bls.w	8011270 <_scanf_float+0x80>
 80114f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80114f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80114fa:	463a      	mov	r2, r7
 80114fc:	4640      	mov	r0, r8
 80114fe:	4798      	blx	r3
 8011500:	6923      	ldr	r3, [r4, #16]
 8011502:	3b01      	subs	r3, #1
 8011504:	6123      	str	r3, [r4, #16]
 8011506:	e7f1      	b.n	80114ec <_scanf_float+0x2fc>
 8011508:	46aa      	mov	sl, r5
 801150a:	9602      	str	r6, [sp, #8]
 801150c:	e7df      	b.n	80114ce <_scanf_float+0x2de>
 801150e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011512:	6923      	ldr	r3, [r4, #16]
 8011514:	2965      	cmp	r1, #101	; 0x65
 8011516:	f103 33ff 	add.w	r3, r3, #4294967295
 801151a:	f106 35ff 	add.w	r5, r6, #4294967295
 801151e:	6123      	str	r3, [r4, #16]
 8011520:	d00c      	beq.n	801153c <_scanf_float+0x34c>
 8011522:	2945      	cmp	r1, #69	; 0x45
 8011524:	d00a      	beq.n	801153c <_scanf_float+0x34c>
 8011526:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801152a:	463a      	mov	r2, r7
 801152c:	4640      	mov	r0, r8
 801152e:	4798      	blx	r3
 8011530:	6923      	ldr	r3, [r4, #16]
 8011532:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011536:	3b01      	subs	r3, #1
 8011538:	1eb5      	subs	r5, r6, #2
 801153a:	6123      	str	r3, [r4, #16]
 801153c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011540:	463a      	mov	r2, r7
 8011542:	4640      	mov	r0, r8
 8011544:	4798      	blx	r3
 8011546:	462e      	mov	r6, r5
 8011548:	6825      	ldr	r5, [r4, #0]
 801154a:	f015 0510 	ands.w	r5, r5, #16
 801154e:	d159      	bne.n	8011604 <_scanf_float+0x414>
 8011550:	7035      	strb	r5, [r6, #0]
 8011552:	6823      	ldr	r3, [r4, #0]
 8011554:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801155c:	d11b      	bne.n	8011596 <_scanf_float+0x3a6>
 801155e:	9b01      	ldr	r3, [sp, #4]
 8011560:	454b      	cmp	r3, r9
 8011562:	eba3 0209 	sub.w	r2, r3, r9
 8011566:	d123      	bne.n	80115b0 <_scanf_float+0x3c0>
 8011568:	2200      	movs	r2, #0
 801156a:	4659      	mov	r1, fp
 801156c:	4640      	mov	r0, r8
 801156e:	f000 fe99 	bl	80122a4 <_strtod_r>
 8011572:	6822      	ldr	r2, [r4, #0]
 8011574:	9b03      	ldr	r3, [sp, #12]
 8011576:	f012 0f02 	tst.w	r2, #2
 801157a:	ec57 6b10 	vmov	r6, r7, d0
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	d021      	beq.n	80115c6 <_scanf_float+0x3d6>
 8011582:	9903      	ldr	r1, [sp, #12]
 8011584:	1d1a      	adds	r2, r3, #4
 8011586:	600a      	str	r2, [r1, #0]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	e9c3 6700 	strd	r6, r7, [r3]
 801158e:	68e3      	ldr	r3, [r4, #12]
 8011590:	3301      	adds	r3, #1
 8011592:	60e3      	str	r3, [r4, #12]
 8011594:	e66d      	b.n	8011272 <_scanf_float+0x82>
 8011596:	9b04      	ldr	r3, [sp, #16]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d0e5      	beq.n	8011568 <_scanf_float+0x378>
 801159c:	9905      	ldr	r1, [sp, #20]
 801159e:	230a      	movs	r3, #10
 80115a0:	462a      	mov	r2, r5
 80115a2:	3101      	adds	r1, #1
 80115a4:	4640      	mov	r0, r8
 80115a6:	f000 ff05 	bl	80123b4 <_strtol_r>
 80115aa:	9b04      	ldr	r3, [sp, #16]
 80115ac:	9e05      	ldr	r6, [sp, #20]
 80115ae:	1ac2      	subs	r2, r0, r3
 80115b0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80115b4:	429e      	cmp	r6, r3
 80115b6:	bf28      	it	cs
 80115b8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80115bc:	4912      	ldr	r1, [pc, #72]	; (8011608 <_scanf_float+0x418>)
 80115be:	4630      	mov	r0, r6
 80115c0:	f000 f82c 	bl	801161c <siprintf>
 80115c4:	e7d0      	b.n	8011568 <_scanf_float+0x378>
 80115c6:	9903      	ldr	r1, [sp, #12]
 80115c8:	f012 0f04 	tst.w	r2, #4
 80115cc:	f103 0204 	add.w	r2, r3, #4
 80115d0:	600a      	str	r2, [r1, #0]
 80115d2:	d1d9      	bne.n	8011588 <_scanf_float+0x398>
 80115d4:	f8d3 8000 	ldr.w	r8, [r3]
 80115d8:	ee10 2a10 	vmov	r2, s0
 80115dc:	ee10 0a10 	vmov	r0, s0
 80115e0:	463b      	mov	r3, r7
 80115e2:	4639      	mov	r1, r7
 80115e4:	f7ef faba 	bl	8000b5c <__aeabi_dcmpun>
 80115e8:	b128      	cbz	r0, 80115f6 <_scanf_float+0x406>
 80115ea:	4808      	ldr	r0, [pc, #32]	; (801160c <_scanf_float+0x41c>)
 80115ec:	f000 f810 	bl	8011610 <nanf>
 80115f0:	ed88 0a00 	vstr	s0, [r8]
 80115f4:	e7cb      	b.n	801158e <_scanf_float+0x39e>
 80115f6:	4630      	mov	r0, r6
 80115f8:	4639      	mov	r1, r7
 80115fa:	f7ef fb0d 	bl	8000c18 <__aeabi_d2f>
 80115fe:	f8c8 0000 	str.w	r0, [r8]
 8011602:	e7c4      	b.n	801158e <_scanf_float+0x39e>
 8011604:	2500      	movs	r5, #0
 8011606:	e634      	b.n	8011272 <_scanf_float+0x82>
 8011608:	08015960 	.word	0x08015960
 801160c:	08015d68 	.word	0x08015d68

08011610 <nanf>:
 8011610:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011618 <nanf+0x8>
 8011614:	4770      	bx	lr
 8011616:	bf00      	nop
 8011618:	7fc00000 	.word	0x7fc00000

0801161c <siprintf>:
 801161c:	b40e      	push	{r1, r2, r3}
 801161e:	b500      	push	{lr}
 8011620:	b09c      	sub	sp, #112	; 0x70
 8011622:	ab1d      	add	r3, sp, #116	; 0x74
 8011624:	9002      	str	r0, [sp, #8]
 8011626:	9006      	str	r0, [sp, #24]
 8011628:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801162c:	4809      	ldr	r0, [pc, #36]	; (8011654 <siprintf+0x38>)
 801162e:	9107      	str	r1, [sp, #28]
 8011630:	9104      	str	r1, [sp, #16]
 8011632:	4909      	ldr	r1, [pc, #36]	; (8011658 <siprintf+0x3c>)
 8011634:	f853 2b04 	ldr.w	r2, [r3], #4
 8011638:	9105      	str	r1, [sp, #20]
 801163a:	6800      	ldr	r0, [r0, #0]
 801163c:	9301      	str	r3, [sp, #4]
 801163e:	a902      	add	r1, sp, #8
 8011640:	f002 fed6 	bl	80143f0 <_svfiprintf_r>
 8011644:	9b02      	ldr	r3, [sp, #8]
 8011646:	2200      	movs	r2, #0
 8011648:	701a      	strb	r2, [r3, #0]
 801164a:	b01c      	add	sp, #112	; 0x70
 801164c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011650:	b003      	add	sp, #12
 8011652:	4770      	bx	lr
 8011654:	20000084 	.word	0x20000084
 8011658:	ffff0208 	.word	0xffff0208

0801165c <sulp>:
 801165c:	b570      	push	{r4, r5, r6, lr}
 801165e:	4604      	mov	r4, r0
 8011660:	460d      	mov	r5, r1
 8011662:	ec45 4b10 	vmov	d0, r4, r5
 8011666:	4616      	mov	r6, r2
 8011668:	f002 fc20 	bl	8013eac <__ulp>
 801166c:	ec51 0b10 	vmov	r0, r1, d0
 8011670:	b17e      	cbz	r6, 8011692 <sulp+0x36>
 8011672:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011676:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801167a:	2b00      	cmp	r3, #0
 801167c:	dd09      	ble.n	8011692 <sulp+0x36>
 801167e:	051b      	lsls	r3, r3, #20
 8011680:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011684:	2400      	movs	r4, #0
 8011686:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801168a:	4622      	mov	r2, r4
 801168c:	462b      	mov	r3, r5
 801168e:	f7ee ffcb 	bl	8000628 <__aeabi_dmul>
 8011692:	bd70      	pop	{r4, r5, r6, pc}
 8011694:	0000      	movs	r0, r0
	...

08011698 <_strtod_l>:
 8011698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801169c:	ed2d 8b02 	vpush	{d8}
 80116a0:	b09d      	sub	sp, #116	; 0x74
 80116a2:	461f      	mov	r7, r3
 80116a4:	2300      	movs	r3, #0
 80116a6:	9318      	str	r3, [sp, #96]	; 0x60
 80116a8:	4ba2      	ldr	r3, [pc, #648]	; (8011934 <_strtod_l+0x29c>)
 80116aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	9305      	str	r3, [sp, #20]
 80116b0:	4604      	mov	r4, r0
 80116b2:	4618      	mov	r0, r3
 80116b4:	4688      	mov	r8, r1
 80116b6:	f7ee fda3 	bl	8000200 <strlen>
 80116ba:	f04f 0a00 	mov.w	sl, #0
 80116be:	4605      	mov	r5, r0
 80116c0:	f04f 0b00 	mov.w	fp, #0
 80116c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80116c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80116ca:	781a      	ldrb	r2, [r3, #0]
 80116cc:	2a2b      	cmp	r2, #43	; 0x2b
 80116ce:	d04e      	beq.n	801176e <_strtod_l+0xd6>
 80116d0:	d83b      	bhi.n	801174a <_strtod_l+0xb2>
 80116d2:	2a0d      	cmp	r2, #13
 80116d4:	d834      	bhi.n	8011740 <_strtod_l+0xa8>
 80116d6:	2a08      	cmp	r2, #8
 80116d8:	d834      	bhi.n	8011744 <_strtod_l+0xac>
 80116da:	2a00      	cmp	r2, #0
 80116dc:	d03e      	beq.n	801175c <_strtod_l+0xc4>
 80116de:	2300      	movs	r3, #0
 80116e0:	930a      	str	r3, [sp, #40]	; 0x28
 80116e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80116e4:	7833      	ldrb	r3, [r6, #0]
 80116e6:	2b30      	cmp	r3, #48	; 0x30
 80116e8:	f040 80b0 	bne.w	801184c <_strtod_l+0x1b4>
 80116ec:	7873      	ldrb	r3, [r6, #1]
 80116ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80116f2:	2b58      	cmp	r3, #88	; 0x58
 80116f4:	d168      	bne.n	80117c8 <_strtod_l+0x130>
 80116f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116f8:	9301      	str	r3, [sp, #4]
 80116fa:	ab18      	add	r3, sp, #96	; 0x60
 80116fc:	9702      	str	r7, [sp, #8]
 80116fe:	9300      	str	r3, [sp, #0]
 8011700:	4a8d      	ldr	r2, [pc, #564]	; (8011938 <_strtod_l+0x2a0>)
 8011702:	ab19      	add	r3, sp, #100	; 0x64
 8011704:	a917      	add	r1, sp, #92	; 0x5c
 8011706:	4620      	mov	r0, r4
 8011708:	f001 fd38 	bl	801317c <__gethex>
 801170c:	f010 0707 	ands.w	r7, r0, #7
 8011710:	4605      	mov	r5, r0
 8011712:	d005      	beq.n	8011720 <_strtod_l+0x88>
 8011714:	2f06      	cmp	r7, #6
 8011716:	d12c      	bne.n	8011772 <_strtod_l+0xda>
 8011718:	3601      	adds	r6, #1
 801171a:	2300      	movs	r3, #0
 801171c:	9617      	str	r6, [sp, #92]	; 0x5c
 801171e:	930a      	str	r3, [sp, #40]	; 0x28
 8011720:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011722:	2b00      	cmp	r3, #0
 8011724:	f040 8590 	bne.w	8012248 <_strtod_l+0xbb0>
 8011728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801172a:	b1eb      	cbz	r3, 8011768 <_strtod_l+0xd0>
 801172c:	4652      	mov	r2, sl
 801172e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011732:	ec43 2b10 	vmov	d0, r2, r3
 8011736:	b01d      	add	sp, #116	; 0x74
 8011738:	ecbd 8b02 	vpop	{d8}
 801173c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011740:	2a20      	cmp	r2, #32
 8011742:	d1cc      	bne.n	80116de <_strtod_l+0x46>
 8011744:	3301      	adds	r3, #1
 8011746:	9317      	str	r3, [sp, #92]	; 0x5c
 8011748:	e7be      	b.n	80116c8 <_strtod_l+0x30>
 801174a:	2a2d      	cmp	r2, #45	; 0x2d
 801174c:	d1c7      	bne.n	80116de <_strtod_l+0x46>
 801174e:	2201      	movs	r2, #1
 8011750:	920a      	str	r2, [sp, #40]	; 0x28
 8011752:	1c5a      	adds	r2, r3, #1
 8011754:	9217      	str	r2, [sp, #92]	; 0x5c
 8011756:	785b      	ldrb	r3, [r3, #1]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d1c2      	bne.n	80116e2 <_strtod_l+0x4a>
 801175c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801175e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011762:	2b00      	cmp	r3, #0
 8011764:	f040 856e 	bne.w	8012244 <_strtod_l+0xbac>
 8011768:	4652      	mov	r2, sl
 801176a:	465b      	mov	r3, fp
 801176c:	e7e1      	b.n	8011732 <_strtod_l+0x9a>
 801176e:	2200      	movs	r2, #0
 8011770:	e7ee      	b.n	8011750 <_strtod_l+0xb8>
 8011772:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011774:	b13a      	cbz	r2, 8011786 <_strtod_l+0xee>
 8011776:	2135      	movs	r1, #53	; 0x35
 8011778:	a81a      	add	r0, sp, #104	; 0x68
 801177a:	f002 fca2 	bl	80140c2 <__copybits>
 801177e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011780:	4620      	mov	r0, r4
 8011782:	f002 f861 	bl	8013848 <_Bfree>
 8011786:	3f01      	subs	r7, #1
 8011788:	2f04      	cmp	r7, #4
 801178a:	d806      	bhi.n	801179a <_strtod_l+0x102>
 801178c:	e8df f007 	tbb	[pc, r7]
 8011790:	1714030a 	.word	0x1714030a
 8011794:	0a          	.byte	0x0a
 8011795:	00          	.byte	0x00
 8011796:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801179a:	0728      	lsls	r0, r5, #28
 801179c:	d5c0      	bpl.n	8011720 <_strtod_l+0x88>
 801179e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80117a2:	e7bd      	b.n	8011720 <_strtod_l+0x88>
 80117a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80117a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80117aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80117ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80117b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80117b6:	e7f0      	b.n	801179a <_strtod_l+0x102>
 80117b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801193c <_strtod_l+0x2a4>
 80117bc:	e7ed      	b.n	801179a <_strtod_l+0x102>
 80117be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80117c2:	f04f 3aff 	mov.w	sl, #4294967295
 80117c6:	e7e8      	b.n	801179a <_strtod_l+0x102>
 80117c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117ca:	1c5a      	adds	r2, r3, #1
 80117cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80117ce:	785b      	ldrb	r3, [r3, #1]
 80117d0:	2b30      	cmp	r3, #48	; 0x30
 80117d2:	d0f9      	beq.n	80117c8 <_strtod_l+0x130>
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d0a3      	beq.n	8011720 <_strtod_l+0x88>
 80117d8:	2301      	movs	r3, #1
 80117da:	f04f 0900 	mov.w	r9, #0
 80117de:	9304      	str	r3, [sp, #16]
 80117e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117e2:	9308      	str	r3, [sp, #32]
 80117e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80117e8:	464f      	mov	r7, r9
 80117ea:	220a      	movs	r2, #10
 80117ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80117ee:	7806      	ldrb	r6, [r0, #0]
 80117f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80117f4:	b2d9      	uxtb	r1, r3
 80117f6:	2909      	cmp	r1, #9
 80117f8:	d92a      	bls.n	8011850 <_strtod_l+0x1b8>
 80117fa:	9905      	ldr	r1, [sp, #20]
 80117fc:	462a      	mov	r2, r5
 80117fe:	f002 ff0f 	bl	8014620 <strncmp>
 8011802:	b398      	cbz	r0, 801186c <_strtod_l+0x1d4>
 8011804:	2000      	movs	r0, #0
 8011806:	4632      	mov	r2, r6
 8011808:	463d      	mov	r5, r7
 801180a:	9005      	str	r0, [sp, #20]
 801180c:	4603      	mov	r3, r0
 801180e:	2a65      	cmp	r2, #101	; 0x65
 8011810:	d001      	beq.n	8011816 <_strtod_l+0x17e>
 8011812:	2a45      	cmp	r2, #69	; 0x45
 8011814:	d118      	bne.n	8011848 <_strtod_l+0x1b0>
 8011816:	b91d      	cbnz	r5, 8011820 <_strtod_l+0x188>
 8011818:	9a04      	ldr	r2, [sp, #16]
 801181a:	4302      	orrs	r2, r0
 801181c:	d09e      	beq.n	801175c <_strtod_l+0xc4>
 801181e:	2500      	movs	r5, #0
 8011820:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8011824:	f108 0201 	add.w	r2, r8, #1
 8011828:	9217      	str	r2, [sp, #92]	; 0x5c
 801182a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801182e:	2a2b      	cmp	r2, #43	; 0x2b
 8011830:	d075      	beq.n	801191e <_strtod_l+0x286>
 8011832:	2a2d      	cmp	r2, #45	; 0x2d
 8011834:	d07b      	beq.n	801192e <_strtod_l+0x296>
 8011836:	f04f 0c00 	mov.w	ip, #0
 801183a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801183e:	2909      	cmp	r1, #9
 8011840:	f240 8082 	bls.w	8011948 <_strtod_l+0x2b0>
 8011844:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011848:	2600      	movs	r6, #0
 801184a:	e09d      	b.n	8011988 <_strtod_l+0x2f0>
 801184c:	2300      	movs	r3, #0
 801184e:	e7c4      	b.n	80117da <_strtod_l+0x142>
 8011850:	2f08      	cmp	r7, #8
 8011852:	bfd8      	it	le
 8011854:	9907      	ldrle	r1, [sp, #28]
 8011856:	f100 0001 	add.w	r0, r0, #1
 801185a:	bfda      	itte	le
 801185c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011860:	9307      	strle	r3, [sp, #28]
 8011862:	fb02 3909 	mlagt	r9, r2, r9, r3
 8011866:	3701      	adds	r7, #1
 8011868:	9017      	str	r0, [sp, #92]	; 0x5c
 801186a:	e7bf      	b.n	80117ec <_strtod_l+0x154>
 801186c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801186e:	195a      	adds	r2, r3, r5
 8011870:	9217      	str	r2, [sp, #92]	; 0x5c
 8011872:	5d5a      	ldrb	r2, [r3, r5]
 8011874:	2f00      	cmp	r7, #0
 8011876:	d037      	beq.n	80118e8 <_strtod_l+0x250>
 8011878:	9005      	str	r0, [sp, #20]
 801187a:	463d      	mov	r5, r7
 801187c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011880:	2b09      	cmp	r3, #9
 8011882:	d912      	bls.n	80118aa <_strtod_l+0x212>
 8011884:	2301      	movs	r3, #1
 8011886:	e7c2      	b.n	801180e <_strtod_l+0x176>
 8011888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801188a:	1c5a      	adds	r2, r3, #1
 801188c:	9217      	str	r2, [sp, #92]	; 0x5c
 801188e:	785a      	ldrb	r2, [r3, #1]
 8011890:	3001      	adds	r0, #1
 8011892:	2a30      	cmp	r2, #48	; 0x30
 8011894:	d0f8      	beq.n	8011888 <_strtod_l+0x1f0>
 8011896:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801189a:	2b08      	cmp	r3, #8
 801189c:	f200 84d9 	bhi.w	8012252 <_strtod_l+0xbba>
 80118a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80118a2:	9005      	str	r0, [sp, #20]
 80118a4:	2000      	movs	r0, #0
 80118a6:	9308      	str	r3, [sp, #32]
 80118a8:	4605      	mov	r5, r0
 80118aa:	3a30      	subs	r2, #48	; 0x30
 80118ac:	f100 0301 	add.w	r3, r0, #1
 80118b0:	d014      	beq.n	80118dc <_strtod_l+0x244>
 80118b2:	9905      	ldr	r1, [sp, #20]
 80118b4:	4419      	add	r1, r3
 80118b6:	9105      	str	r1, [sp, #20]
 80118b8:	462b      	mov	r3, r5
 80118ba:	eb00 0e05 	add.w	lr, r0, r5
 80118be:	210a      	movs	r1, #10
 80118c0:	4573      	cmp	r3, lr
 80118c2:	d113      	bne.n	80118ec <_strtod_l+0x254>
 80118c4:	182b      	adds	r3, r5, r0
 80118c6:	2b08      	cmp	r3, #8
 80118c8:	f105 0501 	add.w	r5, r5, #1
 80118cc:	4405      	add	r5, r0
 80118ce:	dc1c      	bgt.n	801190a <_strtod_l+0x272>
 80118d0:	9907      	ldr	r1, [sp, #28]
 80118d2:	230a      	movs	r3, #10
 80118d4:	fb03 2301 	mla	r3, r3, r1, r2
 80118d8:	9307      	str	r3, [sp, #28]
 80118da:	2300      	movs	r3, #0
 80118dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80118de:	1c51      	adds	r1, r2, #1
 80118e0:	9117      	str	r1, [sp, #92]	; 0x5c
 80118e2:	7852      	ldrb	r2, [r2, #1]
 80118e4:	4618      	mov	r0, r3
 80118e6:	e7c9      	b.n	801187c <_strtod_l+0x1e4>
 80118e8:	4638      	mov	r0, r7
 80118ea:	e7d2      	b.n	8011892 <_strtod_l+0x1fa>
 80118ec:	2b08      	cmp	r3, #8
 80118ee:	dc04      	bgt.n	80118fa <_strtod_l+0x262>
 80118f0:	9e07      	ldr	r6, [sp, #28]
 80118f2:	434e      	muls	r6, r1
 80118f4:	9607      	str	r6, [sp, #28]
 80118f6:	3301      	adds	r3, #1
 80118f8:	e7e2      	b.n	80118c0 <_strtod_l+0x228>
 80118fa:	f103 0c01 	add.w	ip, r3, #1
 80118fe:	f1bc 0f10 	cmp.w	ip, #16
 8011902:	bfd8      	it	le
 8011904:	fb01 f909 	mulle.w	r9, r1, r9
 8011908:	e7f5      	b.n	80118f6 <_strtod_l+0x25e>
 801190a:	2d10      	cmp	r5, #16
 801190c:	bfdc      	itt	le
 801190e:	230a      	movle	r3, #10
 8011910:	fb03 2909 	mlale	r9, r3, r9, r2
 8011914:	e7e1      	b.n	80118da <_strtod_l+0x242>
 8011916:	2300      	movs	r3, #0
 8011918:	9305      	str	r3, [sp, #20]
 801191a:	2301      	movs	r3, #1
 801191c:	e77c      	b.n	8011818 <_strtod_l+0x180>
 801191e:	f04f 0c00 	mov.w	ip, #0
 8011922:	f108 0202 	add.w	r2, r8, #2
 8011926:	9217      	str	r2, [sp, #92]	; 0x5c
 8011928:	f898 2002 	ldrb.w	r2, [r8, #2]
 801192c:	e785      	b.n	801183a <_strtod_l+0x1a2>
 801192e:	f04f 0c01 	mov.w	ip, #1
 8011932:	e7f6      	b.n	8011922 <_strtod_l+0x28a>
 8011934:	08015bb0 	.word	0x08015bb0
 8011938:	08015968 	.word	0x08015968
 801193c:	7ff00000 	.word	0x7ff00000
 8011940:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011942:	1c51      	adds	r1, r2, #1
 8011944:	9117      	str	r1, [sp, #92]	; 0x5c
 8011946:	7852      	ldrb	r2, [r2, #1]
 8011948:	2a30      	cmp	r2, #48	; 0x30
 801194a:	d0f9      	beq.n	8011940 <_strtod_l+0x2a8>
 801194c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011950:	2908      	cmp	r1, #8
 8011952:	f63f af79 	bhi.w	8011848 <_strtod_l+0x1b0>
 8011956:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801195a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801195c:	9206      	str	r2, [sp, #24]
 801195e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011960:	1c51      	adds	r1, r2, #1
 8011962:	9117      	str	r1, [sp, #92]	; 0x5c
 8011964:	7852      	ldrb	r2, [r2, #1]
 8011966:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801196a:	2e09      	cmp	r6, #9
 801196c:	d937      	bls.n	80119de <_strtod_l+0x346>
 801196e:	9e06      	ldr	r6, [sp, #24]
 8011970:	1b89      	subs	r1, r1, r6
 8011972:	2908      	cmp	r1, #8
 8011974:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011978:	dc02      	bgt.n	8011980 <_strtod_l+0x2e8>
 801197a:	4576      	cmp	r6, lr
 801197c:	bfa8      	it	ge
 801197e:	4676      	movge	r6, lr
 8011980:	f1bc 0f00 	cmp.w	ip, #0
 8011984:	d000      	beq.n	8011988 <_strtod_l+0x2f0>
 8011986:	4276      	negs	r6, r6
 8011988:	2d00      	cmp	r5, #0
 801198a:	d14d      	bne.n	8011a28 <_strtod_l+0x390>
 801198c:	9904      	ldr	r1, [sp, #16]
 801198e:	4301      	orrs	r1, r0
 8011990:	f47f aec6 	bne.w	8011720 <_strtod_l+0x88>
 8011994:	2b00      	cmp	r3, #0
 8011996:	f47f aee1 	bne.w	801175c <_strtod_l+0xc4>
 801199a:	2a69      	cmp	r2, #105	; 0x69
 801199c:	d027      	beq.n	80119ee <_strtod_l+0x356>
 801199e:	dc24      	bgt.n	80119ea <_strtod_l+0x352>
 80119a0:	2a49      	cmp	r2, #73	; 0x49
 80119a2:	d024      	beq.n	80119ee <_strtod_l+0x356>
 80119a4:	2a4e      	cmp	r2, #78	; 0x4e
 80119a6:	f47f aed9 	bne.w	801175c <_strtod_l+0xc4>
 80119aa:	499f      	ldr	r1, [pc, #636]	; (8011c28 <_strtod_l+0x590>)
 80119ac:	a817      	add	r0, sp, #92	; 0x5c
 80119ae:	f001 fe3d 	bl	801362c <__match>
 80119b2:	2800      	cmp	r0, #0
 80119b4:	f43f aed2 	beq.w	801175c <_strtod_l+0xc4>
 80119b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	2b28      	cmp	r3, #40	; 0x28
 80119be:	d12d      	bne.n	8011a1c <_strtod_l+0x384>
 80119c0:	499a      	ldr	r1, [pc, #616]	; (8011c2c <_strtod_l+0x594>)
 80119c2:	aa1a      	add	r2, sp, #104	; 0x68
 80119c4:	a817      	add	r0, sp, #92	; 0x5c
 80119c6:	f001 fe45 	bl	8013654 <__hexnan>
 80119ca:	2805      	cmp	r0, #5
 80119cc:	d126      	bne.n	8011a1c <_strtod_l+0x384>
 80119ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80119d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80119d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80119d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80119dc:	e6a0      	b.n	8011720 <_strtod_l+0x88>
 80119de:	210a      	movs	r1, #10
 80119e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80119e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80119e8:	e7b9      	b.n	801195e <_strtod_l+0x2c6>
 80119ea:	2a6e      	cmp	r2, #110	; 0x6e
 80119ec:	e7db      	b.n	80119a6 <_strtod_l+0x30e>
 80119ee:	4990      	ldr	r1, [pc, #576]	; (8011c30 <_strtod_l+0x598>)
 80119f0:	a817      	add	r0, sp, #92	; 0x5c
 80119f2:	f001 fe1b 	bl	801362c <__match>
 80119f6:	2800      	cmp	r0, #0
 80119f8:	f43f aeb0 	beq.w	801175c <_strtod_l+0xc4>
 80119fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80119fe:	498d      	ldr	r1, [pc, #564]	; (8011c34 <_strtod_l+0x59c>)
 8011a00:	3b01      	subs	r3, #1
 8011a02:	a817      	add	r0, sp, #92	; 0x5c
 8011a04:	9317      	str	r3, [sp, #92]	; 0x5c
 8011a06:	f001 fe11 	bl	801362c <__match>
 8011a0a:	b910      	cbnz	r0, 8011a12 <_strtod_l+0x37a>
 8011a0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a0e:	3301      	adds	r3, #1
 8011a10:	9317      	str	r3, [sp, #92]	; 0x5c
 8011a12:	f8df b230 	ldr.w	fp, [pc, #560]	; 8011c44 <_strtod_l+0x5ac>
 8011a16:	f04f 0a00 	mov.w	sl, #0
 8011a1a:	e681      	b.n	8011720 <_strtod_l+0x88>
 8011a1c:	4886      	ldr	r0, [pc, #536]	; (8011c38 <_strtod_l+0x5a0>)
 8011a1e:	f002 fde7 	bl	80145f0 <nan>
 8011a22:	ec5b ab10 	vmov	sl, fp, d0
 8011a26:	e67b      	b.n	8011720 <_strtod_l+0x88>
 8011a28:	9b05      	ldr	r3, [sp, #20]
 8011a2a:	9807      	ldr	r0, [sp, #28]
 8011a2c:	1af3      	subs	r3, r6, r3
 8011a2e:	2f00      	cmp	r7, #0
 8011a30:	bf08      	it	eq
 8011a32:	462f      	moveq	r7, r5
 8011a34:	2d10      	cmp	r5, #16
 8011a36:	9306      	str	r3, [sp, #24]
 8011a38:	46a8      	mov	r8, r5
 8011a3a:	bfa8      	it	ge
 8011a3c:	f04f 0810 	movge.w	r8, #16
 8011a40:	f7ee fd78 	bl	8000534 <__aeabi_ui2d>
 8011a44:	2d09      	cmp	r5, #9
 8011a46:	4682      	mov	sl, r0
 8011a48:	468b      	mov	fp, r1
 8011a4a:	dd13      	ble.n	8011a74 <_strtod_l+0x3dc>
 8011a4c:	4b7b      	ldr	r3, [pc, #492]	; (8011c3c <_strtod_l+0x5a4>)
 8011a4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011a52:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011a56:	f7ee fde7 	bl	8000628 <__aeabi_dmul>
 8011a5a:	4682      	mov	sl, r0
 8011a5c:	4648      	mov	r0, r9
 8011a5e:	468b      	mov	fp, r1
 8011a60:	f7ee fd68 	bl	8000534 <__aeabi_ui2d>
 8011a64:	4602      	mov	r2, r0
 8011a66:	460b      	mov	r3, r1
 8011a68:	4650      	mov	r0, sl
 8011a6a:	4659      	mov	r1, fp
 8011a6c:	f7ee fc26 	bl	80002bc <__adddf3>
 8011a70:	4682      	mov	sl, r0
 8011a72:	468b      	mov	fp, r1
 8011a74:	2d0f      	cmp	r5, #15
 8011a76:	dc38      	bgt.n	8011aea <_strtod_l+0x452>
 8011a78:	9b06      	ldr	r3, [sp, #24]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	f43f ae50 	beq.w	8011720 <_strtod_l+0x88>
 8011a80:	dd24      	ble.n	8011acc <_strtod_l+0x434>
 8011a82:	2b16      	cmp	r3, #22
 8011a84:	dc0b      	bgt.n	8011a9e <_strtod_l+0x406>
 8011a86:	496d      	ldr	r1, [pc, #436]	; (8011c3c <_strtod_l+0x5a4>)
 8011a88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a90:	4652      	mov	r2, sl
 8011a92:	465b      	mov	r3, fp
 8011a94:	f7ee fdc8 	bl	8000628 <__aeabi_dmul>
 8011a98:	4682      	mov	sl, r0
 8011a9a:	468b      	mov	fp, r1
 8011a9c:	e640      	b.n	8011720 <_strtod_l+0x88>
 8011a9e:	9a06      	ldr	r2, [sp, #24]
 8011aa0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	db20      	blt.n	8011aea <_strtod_l+0x452>
 8011aa8:	4c64      	ldr	r4, [pc, #400]	; (8011c3c <_strtod_l+0x5a4>)
 8011aaa:	f1c5 050f 	rsb	r5, r5, #15
 8011aae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011ab2:	4652      	mov	r2, sl
 8011ab4:	465b      	mov	r3, fp
 8011ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011aba:	f7ee fdb5 	bl	8000628 <__aeabi_dmul>
 8011abe:	9b06      	ldr	r3, [sp, #24]
 8011ac0:	1b5d      	subs	r5, r3, r5
 8011ac2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011ac6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011aca:	e7e3      	b.n	8011a94 <_strtod_l+0x3fc>
 8011acc:	9b06      	ldr	r3, [sp, #24]
 8011ace:	3316      	adds	r3, #22
 8011ad0:	db0b      	blt.n	8011aea <_strtod_l+0x452>
 8011ad2:	9b05      	ldr	r3, [sp, #20]
 8011ad4:	1b9e      	subs	r6, r3, r6
 8011ad6:	4b59      	ldr	r3, [pc, #356]	; (8011c3c <_strtod_l+0x5a4>)
 8011ad8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011adc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011ae0:	4650      	mov	r0, sl
 8011ae2:	4659      	mov	r1, fp
 8011ae4:	f7ee feca 	bl	800087c <__aeabi_ddiv>
 8011ae8:	e7d6      	b.n	8011a98 <_strtod_l+0x400>
 8011aea:	9b06      	ldr	r3, [sp, #24]
 8011aec:	eba5 0808 	sub.w	r8, r5, r8
 8011af0:	4498      	add	r8, r3
 8011af2:	f1b8 0f00 	cmp.w	r8, #0
 8011af6:	dd74      	ble.n	8011be2 <_strtod_l+0x54a>
 8011af8:	f018 030f 	ands.w	r3, r8, #15
 8011afc:	d00a      	beq.n	8011b14 <_strtod_l+0x47c>
 8011afe:	494f      	ldr	r1, [pc, #316]	; (8011c3c <_strtod_l+0x5a4>)
 8011b00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011b04:	4652      	mov	r2, sl
 8011b06:	465b      	mov	r3, fp
 8011b08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b0c:	f7ee fd8c 	bl	8000628 <__aeabi_dmul>
 8011b10:	4682      	mov	sl, r0
 8011b12:	468b      	mov	fp, r1
 8011b14:	f038 080f 	bics.w	r8, r8, #15
 8011b18:	d04f      	beq.n	8011bba <_strtod_l+0x522>
 8011b1a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011b1e:	dd22      	ble.n	8011b66 <_strtod_l+0x4ce>
 8011b20:	2500      	movs	r5, #0
 8011b22:	462e      	mov	r6, r5
 8011b24:	9507      	str	r5, [sp, #28]
 8011b26:	9505      	str	r5, [sp, #20]
 8011b28:	2322      	movs	r3, #34	; 0x22
 8011b2a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8011c44 <_strtod_l+0x5ac>
 8011b2e:	6023      	str	r3, [r4, #0]
 8011b30:	f04f 0a00 	mov.w	sl, #0
 8011b34:	9b07      	ldr	r3, [sp, #28]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	f43f adf2 	beq.w	8011720 <_strtod_l+0x88>
 8011b3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011b3e:	4620      	mov	r0, r4
 8011b40:	f001 fe82 	bl	8013848 <_Bfree>
 8011b44:	9905      	ldr	r1, [sp, #20]
 8011b46:	4620      	mov	r0, r4
 8011b48:	f001 fe7e 	bl	8013848 <_Bfree>
 8011b4c:	4631      	mov	r1, r6
 8011b4e:	4620      	mov	r0, r4
 8011b50:	f001 fe7a 	bl	8013848 <_Bfree>
 8011b54:	9907      	ldr	r1, [sp, #28]
 8011b56:	4620      	mov	r0, r4
 8011b58:	f001 fe76 	bl	8013848 <_Bfree>
 8011b5c:	4629      	mov	r1, r5
 8011b5e:	4620      	mov	r0, r4
 8011b60:	f001 fe72 	bl	8013848 <_Bfree>
 8011b64:	e5dc      	b.n	8011720 <_strtod_l+0x88>
 8011b66:	4b36      	ldr	r3, [pc, #216]	; (8011c40 <_strtod_l+0x5a8>)
 8011b68:	9304      	str	r3, [sp, #16]
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011b70:	4650      	mov	r0, sl
 8011b72:	4659      	mov	r1, fp
 8011b74:	4699      	mov	r9, r3
 8011b76:	f1b8 0f01 	cmp.w	r8, #1
 8011b7a:	dc21      	bgt.n	8011bc0 <_strtod_l+0x528>
 8011b7c:	b10b      	cbz	r3, 8011b82 <_strtod_l+0x4ea>
 8011b7e:	4682      	mov	sl, r0
 8011b80:	468b      	mov	fp, r1
 8011b82:	4b2f      	ldr	r3, [pc, #188]	; (8011c40 <_strtod_l+0x5a8>)
 8011b84:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011b88:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011b8c:	4652      	mov	r2, sl
 8011b8e:	465b      	mov	r3, fp
 8011b90:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011b94:	f7ee fd48 	bl	8000628 <__aeabi_dmul>
 8011b98:	4b2a      	ldr	r3, [pc, #168]	; (8011c44 <_strtod_l+0x5ac>)
 8011b9a:	460a      	mov	r2, r1
 8011b9c:	400b      	ands	r3, r1
 8011b9e:	492a      	ldr	r1, [pc, #168]	; (8011c48 <_strtod_l+0x5b0>)
 8011ba0:	428b      	cmp	r3, r1
 8011ba2:	4682      	mov	sl, r0
 8011ba4:	d8bc      	bhi.n	8011b20 <_strtod_l+0x488>
 8011ba6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011baa:	428b      	cmp	r3, r1
 8011bac:	bf86      	itte	hi
 8011bae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8011c4c <_strtod_l+0x5b4>
 8011bb2:	f04f 3aff 	movhi.w	sl, #4294967295
 8011bb6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011bba:	2300      	movs	r3, #0
 8011bbc:	9304      	str	r3, [sp, #16]
 8011bbe:	e084      	b.n	8011cca <_strtod_l+0x632>
 8011bc0:	f018 0f01 	tst.w	r8, #1
 8011bc4:	d005      	beq.n	8011bd2 <_strtod_l+0x53a>
 8011bc6:	9b04      	ldr	r3, [sp, #16]
 8011bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bcc:	f7ee fd2c 	bl	8000628 <__aeabi_dmul>
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	9a04      	ldr	r2, [sp, #16]
 8011bd4:	3208      	adds	r2, #8
 8011bd6:	f109 0901 	add.w	r9, r9, #1
 8011bda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011bde:	9204      	str	r2, [sp, #16]
 8011be0:	e7c9      	b.n	8011b76 <_strtod_l+0x4de>
 8011be2:	d0ea      	beq.n	8011bba <_strtod_l+0x522>
 8011be4:	f1c8 0800 	rsb	r8, r8, #0
 8011be8:	f018 020f 	ands.w	r2, r8, #15
 8011bec:	d00a      	beq.n	8011c04 <_strtod_l+0x56c>
 8011bee:	4b13      	ldr	r3, [pc, #76]	; (8011c3c <_strtod_l+0x5a4>)
 8011bf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011bf4:	4650      	mov	r0, sl
 8011bf6:	4659      	mov	r1, fp
 8011bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bfc:	f7ee fe3e 	bl	800087c <__aeabi_ddiv>
 8011c00:	4682      	mov	sl, r0
 8011c02:	468b      	mov	fp, r1
 8011c04:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011c08:	d0d7      	beq.n	8011bba <_strtod_l+0x522>
 8011c0a:	f1b8 0f1f 	cmp.w	r8, #31
 8011c0e:	dd1f      	ble.n	8011c50 <_strtod_l+0x5b8>
 8011c10:	2500      	movs	r5, #0
 8011c12:	462e      	mov	r6, r5
 8011c14:	9507      	str	r5, [sp, #28]
 8011c16:	9505      	str	r5, [sp, #20]
 8011c18:	2322      	movs	r3, #34	; 0x22
 8011c1a:	f04f 0a00 	mov.w	sl, #0
 8011c1e:	f04f 0b00 	mov.w	fp, #0
 8011c22:	6023      	str	r3, [r4, #0]
 8011c24:	e786      	b.n	8011b34 <_strtod_l+0x49c>
 8011c26:	bf00      	nop
 8011c28:	08015939 	.word	0x08015939
 8011c2c:	0801597c 	.word	0x0801597c
 8011c30:	08015931 	.word	0x08015931
 8011c34:	08015abc 	.word	0x08015abc
 8011c38:	08015d68 	.word	0x08015d68
 8011c3c:	08015c48 	.word	0x08015c48
 8011c40:	08015c20 	.word	0x08015c20
 8011c44:	7ff00000 	.word	0x7ff00000
 8011c48:	7ca00000 	.word	0x7ca00000
 8011c4c:	7fefffff 	.word	0x7fefffff
 8011c50:	f018 0310 	ands.w	r3, r8, #16
 8011c54:	bf18      	it	ne
 8011c56:	236a      	movne	r3, #106	; 0x6a
 8011c58:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8012008 <_strtod_l+0x970>
 8011c5c:	9304      	str	r3, [sp, #16]
 8011c5e:	4650      	mov	r0, sl
 8011c60:	4659      	mov	r1, fp
 8011c62:	2300      	movs	r3, #0
 8011c64:	f018 0f01 	tst.w	r8, #1
 8011c68:	d004      	beq.n	8011c74 <_strtod_l+0x5dc>
 8011c6a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011c6e:	f7ee fcdb 	bl	8000628 <__aeabi_dmul>
 8011c72:	2301      	movs	r3, #1
 8011c74:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011c78:	f109 0908 	add.w	r9, r9, #8
 8011c7c:	d1f2      	bne.n	8011c64 <_strtod_l+0x5cc>
 8011c7e:	b10b      	cbz	r3, 8011c84 <_strtod_l+0x5ec>
 8011c80:	4682      	mov	sl, r0
 8011c82:	468b      	mov	fp, r1
 8011c84:	9b04      	ldr	r3, [sp, #16]
 8011c86:	b1c3      	cbz	r3, 8011cba <_strtod_l+0x622>
 8011c88:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011c8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	4659      	mov	r1, fp
 8011c94:	dd11      	ble.n	8011cba <_strtod_l+0x622>
 8011c96:	2b1f      	cmp	r3, #31
 8011c98:	f340 8124 	ble.w	8011ee4 <_strtod_l+0x84c>
 8011c9c:	2b34      	cmp	r3, #52	; 0x34
 8011c9e:	bfde      	ittt	le
 8011ca0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011ca4:	f04f 33ff 	movle.w	r3, #4294967295
 8011ca8:	fa03 f202 	lslle.w	r2, r3, r2
 8011cac:	f04f 0a00 	mov.w	sl, #0
 8011cb0:	bfcc      	ite	gt
 8011cb2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011cb6:	ea02 0b01 	andle.w	fp, r2, r1
 8011cba:	2200      	movs	r2, #0
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	4650      	mov	r0, sl
 8011cc0:	4659      	mov	r1, fp
 8011cc2:	f7ee ff19 	bl	8000af8 <__aeabi_dcmpeq>
 8011cc6:	2800      	cmp	r0, #0
 8011cc8:	d1a2      	bne.n	8011c10 <_strtod_l+0x578>
 8011cca:	9b07      	ldr	r3, [sp, #28]
 8011ccc:	9300      	str	r3, [sp, #0]
 8011cce:	9908      	ldr	r1, [sp, #32]
 8011cd0:	462b      	mov	r3, r5
 8011cd2:	463a      	mov	r2, r7
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	f001 fe1f 	bl	8013918 <__s2b>
 8011cda:	9007      	str	r0, [sp, #28]
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	f43f af1f 	beq.w	8011b20 <_strtod_l+0x488>
 8011ce2:	9b05      	ldr	r3, [sp, #20]
 8011ce4:	1b9e      	subs	r6, r3, r6
 8011ce6:	9b06      	ldr	r3, [sp, #24]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	bfb4      	ite	lt
 8011cec:	4633      	movlt	r3, r6
 8011cee:	2300      	movge	r3, #0
 8011cf0:	930c      	str	r3, [sp, #48]	; 0x30
 8011cf2:	9b06      	ldr	r3, [sp, #24]
 8011cf4:	2500      	movs	r5, #0
 8011cf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011cfa:	9312      	str	r3, [sp, #72]	; 0x48
 8011cfc:	462e      	mov	r6, r5
 8011cfe:	9b07      	ldr	r3, [sp, #28]
 8011d00:	4620      	mov	r0, r4
 8011d02:	6859      	ldr	r1, [r3, #4]
 8011d04:	f001 fd60 	bl	80137c8 <_Balloc>
 8011d08:	9005      	str	r0, [sp, #20]
 8011d0a:	2800      	cmp	r0, #0
 8011d0c:	f43f af0c 	beq.w	8011b28 <_strtod_l+0x490>
 8011d10:	9b07      	ldr	r3, [sp, #28]
 8011d12:	691a      	ldr	r2, [r3, #16]
 8011d14:	3202      	adds	r2, #2
 8011d16:	f103 010c 	add.w	r1, r3, #12
 8011d1a:	0092      	lsls	r2, r2, #2
 8011d1c:	300c      	adds	r0, #12
 8011d1e:	f7fe fde7 	bl	80108f0 <memcpy>
 8011d22:	ec4b ab10 	vmov	d0, sl, fp
 8011d26:	aa1a      	add	r2, sp, #104	; 0x68
 8011d28:	a919      	add	r1, sp, #100	; 0x64
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	f002 f93a 	bl	8013fa4 <__d2b>
 8011d30:	ec4b ab18 	vmov	d8, sl, fp
 8011d34:	9018      	str	r0, [sp, #96]	; 0x60
 8011d36:	2800      	cmp	r0, #0
 8011d38:	f43f aef6 	beq.w	8011b28 <_strtod_l+0x490>
 8011d3c:	2101      	movs	r1, #1
 8011d3e:	4620      	mov	r0, r4
 8011d40:	f001 fe84 	bl	8013a4c <__i2b>
 8011d44:	4606      	mov	r6, r0
 8011d46:	2800      	cmp	r0, #0
 8011d48:	f43f aeee 	beq.w	8011b28 <_strtod_l+0x490>
 8011d4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011d4e:	9904      	ldr	r1, [sp, #16]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	bfab      	itete	ge
 8011d54:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8011d56:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011d58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8011d5a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8011d5e:	bfac      	ite	ge
 8011d60:	eb03 0902 	addge.w	r9, r3, r2
 8011d64:	1ad7      	sublt	r7, r2, r3
 8011d66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011d68:	eba3 0801 	sub.w	r8, r3, r1
 8011d6c:	4490      	add	r8, r2
 8011d6e:	4ba1      	ldr	r3, [pc, #644]	; (8011ff4 <_strtod_l+0x95c>)
 8011d70:	f108 38ff 	add.w	r8, r8, #4294967295
 8011d74:	4598      	cmp	r8, r3
 8011d76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011d7a:	f280 80c7 	bge.w	8011f0c <_strtod_l+0x874>
 8011d7e:	eba3 0308 	sub.w	r3, r3, r8
 8011d82:	2b1f      	cmp	r3, #31
 8011d84:	eba2 0203 	sub.w	r2, r2, r3
 8011d88:	f04f 0101 	mov.w	r1, #1
 8011d8c:	f300 80b1 	bgt.w	8011ef2 <_strtod_l+0x85a>
 8011d90:	fa01 f303 	lsl.w	r3, r1, r3
 8011d94:	930d      	str	r3, [sp, #52]	; 0x34
 8011d96:	2300      	movs	r3, #0
 8011d98:	9308      	str	r3, [sp, #32]
 8011d9a:	eb09 0802 	add.w	r8, r9, r2
 8011d9e:	9b04      	ldr	r3, [sp, #16]
 8011da0:	45c1      	cmp	r9, r8
 8011da2:	4417      	add	r7, r2
 8011da4:	441f      	add	r7, r3
 8011da6:	464b      	mov	r3, r9
 8011da8:	bfa8      	it	ge
 8011daa:	4643      	movge	r3, r8
 8011dac:	42bb      	cmp	r3, r7
 8011dae:	bfa8      	it	ge
 8011db0:	463b      	movge	r3, r7
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	bfc2      	ittt	gt
 8011db6:	eba8 0803 	subgt.w	r8, r8, r3
 8011dba:	1aff      	subgt	r7, r7, r3
 8011dbc:	eba9 0903 	subgt.w	r9, r9, r3
 8011dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	dd17      	ble.n	8011df6 <_strtod_l+0x75e>
 8011dc6:	4631      	mov	r1, r6
 8011dc8:	461a      	mov	r2, r3
 8011dca:	4620      	mov	r0, r4
 8011dcc:	f001 fefe 	bl	8013bcc <__pow5mult>
 8011dd0:	4606      	mov	r6, r0
 8011dd2:	2800      	cmp	r0, #0
 8011dd4:	f43f aea8 	beq.w	8011b28 <_strtod_l+0x490>
 8011dd8:	4601      	mov	r1, r0
 8011dda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011ddc:	4620      	mov	r0, r4
 8011dde:	f001 fe4b 	bl	8013a78 <__multiply>
 8011de2:	900b      	str	r0, [sp, #44]	; 0x2c
 8011de4:	2800      	cmp	r0, #0
 8011de6:	f43f ae9f 	beq.w	8011b28 <_strtod_l+0x490>
 8011dea:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011dec:	4620      	mov	r0, r4
 8011dee:	f001 fd2b 	bl	8013848 <_Bfree>
 8011df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011df4:	9318      	str	r3, [sp, #96]	; 0x60
 8011df6:	f1b8 0f00 	cmp.w	r8, #0
 8011dfa:	f300 808c 	bgt.w	8011f16 <_strtod_l+0x87e>
 8011dfe:	9b06      	ldr	r3, [sp, #24]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	dd08      	ble.n	8011e16 <_strtod_l+0x77e>
 8011e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011e06:	9905      	ldr	r1, [sp, #20]
 8011e08:	4620      	mov	r0, r4
 8011e0a:	f001 fedf 	bl	8013bcc <__pow5mult>
 8011e0e:	9005      	str	r0, [sp, #20]
 8011e10:	2800      	cmp	r0, #0
 8011e12:	f43f ae89 	beq.w	8011b28 <_strtod_l+0x490>
 8011e16:	2f00      	cmp	r7, #0
 8011e18:	dd08      	ble.n	8011e2c <_strtod_l+0x794>
 8011e1a:	9905      	ldr	r1, [sp, #20]
 8011e1c:	463a      	mov	r2, r7
 8011e1e:	4620      	mov	r0, r4
 8011e20:	f001 ff2e 	bl	8013c80 <__lshift>
 8011e24:	9005      	str	r0, [sp, #20]
 8011e26:	2800      	cmp	r0, #0
 8011e28:	f43f ae7e 	beq.w	8011b28 <_strtod_l+0x490>
 8011e2c:	f1b9 0f00 	cmp.w	r9, #0
 8011e30:	dd08      	ble.n	8011e44 <_strtod_l+0x7ac>
 8011e32:	4631      	mov	r1, r6
 8011e34:	464a      	mov	r2, r9
 8011e36:	4620      	mov	r0, r4
 8011e38:	f001 ff22 	bl	8013c80 <__lshift>
 8011e3c:	4606      	mov	r6, r0
 8011e3e:	2800      	cmp	r0, #0
 8011e40:	f43f ae72 	beq.w	8011b28 <_strtod_l+0x490>
 8011e44:	9a05      	ldr	r2, [sp, #20]
 8011e46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011e48:	4620      	mov	r0, r4
 8011e4a:	f001 ffa5 	bl	8013d98 <__mdiff>
 8011e4e:	4605      	mov	r5, r0
 8011e50:	2800      	cmp	r0, #0
 8011e52:	f43f ae69 	beq.w	8011b28 <_strtod_l+0x490>
 8011e56:	68c3      	ldr	r3, [r0, #12]
 8011e58:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	60c3      	str	r3, [r0, #12]
 8011e5e:	4631      	mov	r1, r6
 8011e60:	f001 ff7e 	bl	8013d60 <__mcmp>
 8011e64:	2800      	cmp	r0, #0
 8011e66:	da60      	bge.n	8011f2a <_strtod_l+0x892>
 8011e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e6a:	ea53 030a 	orrs.w	r3, r3, sl
 8011e6e:	f040 8082 	bne.w	8011f76 <_strtod_l+0x8de>
 8011e72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d17d      	bne.n	8011f76 <_strtod_l+0x8de>
 8011e7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011e7e:	0d1b      	lsrs	r3, r3, #20
 8011e80:	051b      	lsls	r3, r3, #20
 8011e82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011e86:	d976      	bls.n	8011f76 <_strtod_l+0x8de>
 8011e88:	696b      	ldr	r3, [r5, #20]
 8011e8a:	b913      	cbnz	r3, 8011e92 <_strtod_l+0x7fa>
 8011e8c:	692b      	ldr	r3, [r5, #16]
 8011e8e:	2b01      	cmp	r3, #1
 8011e90:	dd71      	ble.n	8011f76 <_strtod_l+0x8de>
 8011e92:	4629      	mov	r1, r5
 8011e94:	2201      	movs	r2, #1
 8011e96:	4620      	mov	r0, r4
 8011e98:	f001 fef2 	bl	8013c80 <__lshift>
 8011e9c:	4631      	mov	r1, r6
 8011e9e:	4605      	mov	r5, r0
 8011ea0:	f001 ff5e 	bl	8013d60 <__mcmp>
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	dd66      	ble.n	8011f76 <_strtod_l+0x8de>
 8011ea8:	9904      	ldr	r1, [sp, #16]
 8011eaa:	4a53      	ldr	r2, [pc, #332]	; (8011ff8 <_strtod_l+0x960>)
 8011eac:	465b      	mov	r3, fp
 8011eae:	2900      	cmp	r1, #0
 8011eb0:	f000 8081 	beq.w	8011fb6 <_strtod_l+0x91e>
 8011eb4:	ea02 010b 	and.w	r1, r2, fp
 8011eb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011ebc:	dc7b      	bgt.n	8011fb6 <_strtod_l+0x91e>
 8011ebe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011ec2:	f77f aea9 	ble.w	8011c18 <_strtod_l+0x580>
 8011ec6:	4b4d      	ldr	r3, [pc, #308]	; (8011ffc <_strtod_l+0x964>)
 8011ec8:	4650      	mov	r0, sl
 8011eca:	4659      	mov	r1, fp
 8011ecc:	2200      	movs	r2, #0
 8011ece:	f7ee fbab 	bl	8000628 <__aeabi_dmul>
 8011ed2:	460b      	mov	r3, r1
 8011ed4:	4303      	orrs	r3, r0
 8011ed6:	bf08      	it	eq
 8011ed8:	2322      	moveq	r3, #34	; 0x22
 8011eda:	4682      	mov	sl, r0
 8011edc:	468b      	mov	fp, r1
 8011ede:	bf08      	it	eq
 8011ee0:	6023      	streq	r3, [r4, #0]
 8011ee2:	e62b      	b.n	8011b3c <_strtod_l+0x4a4>
 8011ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8011eec:	ea03 0a0a 	and.w	sl, r3, sl
 8011ef0:	e6e3      	b.n	8011cba <_strtod_l+0x622>
 8011ef2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011ef6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011efa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011efe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011f02:	fa01 f308 	lsl.w	r3, r1, r8
 8011f06:	9308      	str	r3, [sp, #32]
 8011f08:	910d      	str	r1, [sp, #52]	; 0x34
 8011f0a:	e746      	b.n	8011d9a <_strtod_l+0x702>
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	9308      	str	r3, [sp, #32]
 8011f10:	2301      	movs	r3, #1
 8011f12:	930d      	str	r3, [sp, #52]	; 0x34
 8011f14:	e741      	b.n	8011d9a <_strtod_l+0x702>
 8011f16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011f18:	4642      	mov	r2, r8
 8011f1a:	4620      	mov	r0, r4
 8011f1c:	f001 feb0 	bl	8013c80 <__lshift>
 8011f20:	9018      	str	r0, [sp, #96]	; 0x60
 8011f22:	2800      	cmp	r0, #0
 8011f24:	f47f af6b 	bne.w	8011dfe <_strtod_l+0x766>
 8011f28:	e5fe      	b.n	8011b28 <_strtod_l+0x490>
 8011f2a:	465f      	mov	r7, fp
 8011f2c:	d16e      	bne.n	801200c <_strtod_l+0x974>
 8011f2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011f30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f34:	b342      	cbz	r2, 8011f88 <_strtod_l+0x8f0>
 8011f36:	4a32      	ldr	r2, [pc, #200]	; (8012000 <_strtod_l+0x968>)
 8011f38:	4293      	cmp	r3, r2
 8011f3a:	d128      	bne.n	8011f8e <_strtod_l+0x8f6>
 8011f3c:	9b04      	ldr	r3, [sp, #16]
 8011f3e:	4651      	mov	r1, sl
 8011f40:	b1eb      	cbz	r3, 8011f7e <_strtod_l+0x8e6>
 8011f42:	4b2d      	ldr	r3, [pc, #180]	; (8011ff8 <_strtod_l+0x960>)
 8011f44:	403b      	ands	r3, r7
 8011f46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f4e:	d819      	bhi.n	8011f84 <_strtod_l+0x8ec>
 8011f50:	0d1b      	lsrs	r3, r3, #20
 8011f52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011f56:	fa02 f303 	lsl.w	r3, r2, r3
 8011f5a:	4299      	cmp	r1, r3
 8011f5c:	d117      	bne.n	8011f8e <_strtod_l+0x8f6>
 8011f5e:	4b29      	ldr	r3, [pc, #164]	; (8012004 <_strtod_l+0x96c>)
 8011f60:	429f      	cmp	r7, r3
 8011f62:	d102      	bne.n	8011f6a <_strtod_l+0x8d2>
 8011f64:	3101      	adds	r1, #1
 8011f66:	f43f addf 	beq.w	8011b28 <_strtod_l+0x490>
 8011f6a:	4b23      	ldr	r3, [pc, #140]	; (8011ff8 <_strtod_l+0x960>)
 8011f6c:	403b      	ands	r3, r7
 8011f6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011f72:	f04f 0a00 	mov.w	sl, #0
 8011f76:	9b04      	ldr	r3, [sp, #16]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d1a4      	bne.n	8011ec6 <_strtod_l+0x82e>
 8011f7c:	e5de      	b.n	8011b3c <_strtod_l+0x4a4>
 8011f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f82:	e7ea      	b.n	8011f5a <_strtod_l+0x8c2>
 8011f84:	4613      	mov	r3, r2
 8011f86:	e7e8      	b.n	8011f5a <_strtod_l+0x8c2>
 8011f88:	ea53 030a 	orrs.w	r3, r3, sl
 8011f8c:	d08c      	beq.n	8011ea8 <_strtod_l+0x810>
 8011f8e:	9b08      	ldr	r3, [sp, #32]
 8011f90:	b1db      	cbz	r3, 8011fca <_strtod_l+0x932>
 8011f92:	423b      	tst	r3, r7
 8011f94:	d0ef      	beq.n	8011f76 <_strtod_l+0x8de>
 8011f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f98:	9a04      	ldr	r2, [sp, #16]
 8011f9a:	4650      	mov	r0, sl
 8011f9c:	4659      	mov	r1, fp
 8011f9e:	b1c3      	cbz	r3, 8011fd2 <_strtod_l+0x93a>
 8011fa0:	f7ff fb5c 	bl	801165c <sulp>
 8011fa4:	4602      	mov	r2, r0
 8011fa6:	460b      	mov	r3, r1
 8011fa8:	ec51 0b18 	vmov	r0, r1, d8
 8011fac:	f7ee f986 	bl	80002bc <__adddf3>
 8011fb0:	4682      	mov	sl, r0
 8011fb2:	468b      	mov	fp, r1
 8011fb4:	e7df      	b.n	8011f76 <_strtod_l+0x8de>
 8011fb6:	4013      	ands	r3, r2
 8011fb8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011fbc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011fc0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011fc4:	f04f 3aff 	mov.w	sl, #4294967295
 8011fc8:	e7d5      	b.n	8011f76 <_strtod_l+0x8de>
 8011fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fcc:	ea13 0f0a 	tst.w	r3, sl
 8011fd0:	e7e0      	b.n	8011f94 <_strtod_l+0x8fc>
 8011fd2:	f7ff fb43 	bl	801165c <sulp>
 8011fd6:	4602      	mov	r2, r0
 8011fd8:	460b      	mov	r3, r1
 8011fda:	ec51 0b18 	vmov	r0, r1, d8
 8011fde:	f7ee f96b 	bl	80002b8 <__aeabi_dsub>
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	4682      	mov	sl, r0
 8011fe8:	468b      	mov	fp, r1
 8011fea:	f7ee fd85 	bl	8000af8 <__aeabi_dcmpeq>
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	d0c1      	beq.n	8011f76 <_strtod_l+0x8de>
 8011ff2:	e611      	b.n	8011c18 <_strtod_l+0x580>
 8011ff4:	fffffc02 	.word	0xfffffc02
 8011ff8:	7ff00000 	.word	0x7ff00000
 8011ffc:	39500000 	.word	0x39500000
 8012000:	000fffff 	.word	0x000fffff
 8012004:	7fefffff 	.word	0x7fefffff
 8012008:	08015990 	.word	0x08015990
 801200c:	4631      	mov	r1, r6
 801200e:	4628      	mov	r0, r5
 8012010:	f002 f824 	bl	801405c <__ratio>
 8012014:	ec59 8b10 	vmov	r8, r9, d0
 8012018:	ee10 0a10 	vmov	r0, s0
 801201c:	2200      	movs	r2, #0
 801201e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012022:	4649      	mov	r1, r9
 8012024:	f7ee fd7c 	bl	8000b20 <__aeabi_dcmple>
 8012028:	2800      	cmp	r0, #0
 801202a:	d07a      	beq.n	8012122 <_strtod_l+0xa8a>
 801202c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801202e:	2b00      	cmp	r3, #0
 8012030:	d04a      	beq.n	80120c8 <_strtod_l+0xa30>
 8012032:	4b95      	ldr	r3, [pc, #596]	; (8012288 <_strtod_l+0xbf0>)
 8012034:	2200      	movs	r2, #0
 8012036:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801203a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8012288 <_strtod_l+0xbf0>
 801203e:	f04f 0800 	mov.w	r8, #0
 8012042:	4b92      	ldr	r3, [pc, #584]	; (801228c <_strtod_l+0xbf4>)
 8012044:	403b      	ands	r3, r7
 8012046:	930d      	str	r3, [sp, #52]	; 0x34
 8012048:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801204a:	4b91      	ldr	r3, [pc, #580]	; (8012290 <_strtod_l+0xbf8>)
 801204c:	429a      	cmp	r2, r3
 801204e:	f040 80b0 	bne.w	80121b2 <_strtod_l+0xb1a>
 8012052:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012056:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801205a:	ec4b ab10 	vmov	d0, sl, fp
 801205e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012062:	f001 ff23 	bl	8013eac <__ulp>
 8012066:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801206a:	ec53 2b10 	vmov	r2, r3, d0
 801206e:	f7ee fadb 	bl	8000628 <__aeabi_dmul>
 8012072:	4652      	mov	r2, sl
 8012074:	465b      	mov	r3, fp
 8012076:	f7ee f921 	bl	80002bc <__adddf3>
 801207a:	460b      	mov	r3, r1
 801207c:	4983      	ldr	r1, [pc, #524]	; (801228c <_strtod_l+0xbf4>)
 801207e:	4a85      	ldr	r2, [pc, #532]	; (8012294 <_strtod_l+0xbfc>)
 8012080:	4019      	ands	r1, r3
 8012082:	4291      	cmp	r1, r2
 8012084:	4682      	mov	sl, r0
 8012086:	d960      	bls.n	801214a <_strtod_l+0xab2>
 8012088:	ee18 3a90 	vmov	r3, s17
 801208c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012090:	4293      	cmp	r3, r2
 8012092:	d104      	bne.n	801209e <_strtod_l+0xa06>
 8012094:	ee18 3a10 	vmov	r3, s16
 8012098:	3301      	adds	r3, #1
 801209a:	f43f ad45 	beq.w	8011b28 <_strtod_l+0x490>
 801209e:	f8df b200 	ldr.w	fp, [pc, #512]	; 80122a0 <_strtod_l+0xc08>
 80120a2:	f04f 3aff 	mov.w	sl, #4294967295
 80120a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80120a8:	4620      	mov	r0, r4
 80120aa:	f001 fbcd 	bl	8013848 <_Bfree>
 80120ae:	9905      	ldr	r1, [sp, #20]
 80120b0:	4620      	mov	r0, r4
 80120b2:	f001 fbc9 	bl	8013848 <_Bfree>
 80120b6:	4631      	mov	r1, r6
 80120b8:	4620      	mov	r0, r4
 80120ba:	f001 fbc5 	bl	8013848 <_Bfree>
 80120be:	4629      	mov	r1, r5
 80120c0:	4620      	mov	r0, r4
 80120c2:	f001 fbc1 	bl	8013848 <_Bfree>
 80120c6:	e61a      	b.n	8011cfe <_strtod_l+0x666>
 80120c8:	f1ba 0f00 	cmp.w	sl, #0
 80120cc:	d11b      	bne.n	8012106 <_strtod_l+0xa6e>
 80120ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80120d2:	b9f3      	cbnz	r3, 8012112 <_strtod_l+0xa7a>
 80120d4:	4b6c      	ldr	r3, [pc, #432]	; (8012288 <_strtod_l+0xbf0>)
 80120d6:	2200      	movs	r2, #0
 80120d8:	4640      	mov	r0, r8
 80120da:	4649      	mov	r1, r9
 80120dc:	f7ee fd16 	bl	8000b0c <__aeabi_dcmplt>
 80120e0:	b9d0      	cbnz	r0, 8012118 <_strtod_l+0xa80>
 80120e2:	4640      	mov	r0, r8
 80120e4:	4649      	mov	r1, r9
 80120e6:	4b6c      	ldr	r3, [pc, #432]	; (8012298 <_strtod_l+0xc00>)
 80120e8:	2200      	movs	r2, #0
 80120ea:	f7ee fa9d 	bl	8000628 <__aeabi_dmul>
 80120ee:	4680      	mov	r8, r0
 80120f0:	4689      	mov	r9, r1
 80120f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80120f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80120fa:	9315      	str	r3, [sp, #84]	; 0x54
 80120fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012100:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012104:	e79d      	b.n	8012042 <_strtod_l+0x9aa>
 8012106:	f1ba 0f01 	cmp.w	sl, #1
 801210a:	d102      	bne.n	8012112 <_strtod_l+0xa7a>
 801210c:	2f00      	cmp	r7, #0
 801210e:	f43f ad83 	beq.w	8011c18 <_strtod_l+0x580>
 8012112:	4b62      	ldr	r3, [pc, #392]	; (801229c <_strtod_l+0xc04>)
 8012114:	2200      	movs	r2, #0
 8012116:	e78e      	b.n	8012036 <_strtod_l+0x99e>
 8012118:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8012298 <_strtod_l+0xc00>
 801211c:	f04f 0800 	mov.w	r8, #0
 8012120:	e7e7      	b.n	80120f2 <_strtod_l+0xa5a>
 8012122:	4b5d      	ldr	r3, [pc, #372]	; (8012298 <_strtod_l+0xc00>)
 8012124:	4640      	mov	r0, r8
 8012126:	4649      	mov	r1, r9
 8012128:	2200      	movs	r2, #0
 801212a:	f7ee fa7d 	bl	8000628 <__aeabi_dmul>
 801212e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012130:	4680      	mov	r8, r0
 8012132:	4689      	mov	r9, r1
 8012134:	b933      	cbnz	r3, 8012144 <_strtod_l+0xaac>
 8012136:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801213a:	900e      	str	r0, [sp, #56]	; 0x38
 801213c:	930f      	str	r3, [sp, #60]	; 0x3c
 801213e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012142:	e7dd      	b.n	8012100 <_strtod_l+0xa68>
 8012144:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8012148:	e7f9      	b.n	801213e <_strtod_l+0xaa6>
 801214a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801214e:	9b04      	ldr	r3, [sp, #16]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d1a8      	bne.n	80120a6 <_strtod_l+0xa0e>
 8012154:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801215a:	0d1b      	lsrs	r3, r3, #20
 801215c:	051b      	lsls	r3, r3, #20
 801215e:	429a      	cmp	r2, r3
 8012160:	d1a1      	bne.n	80120a6 <_strtod_l+0xa0e>
 8012162:	4640      	mov	r0, r8
 8012164:	4649      	mov	r1, r9
 8012166:	f7ee fe0f 	bl	8000d88 <__aeabi_d2lz>
 801216a:	f7ee fa2f 	bl	80005cc <__aeabi_l2d>
 801216e:	4602      	mov	r2, r0
 8012170:	460b      	mov	r3, r1
 8012172:	4640      	mov	r0, r8
 8012174:	4649      	mov	r1, r9
 8012176:	f7ee f89f 	bl	80002b8 <__aeabi_dsub>
 801217a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801217c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012180:	ea43 030a 	orr.w	r3, r3, sl
 8012184:	4313      	orrs	r3, r2
 8012186:	4680      	mov	r8, r0
 8012188:	4689      	mov	r9, r1
 801218a:	d055      	beq.n	8012238 <_strtod_l+0xba0>
 801218c:	a336      	add	r3, pc, #216	; (adr r3, 8012268 <_strtod_l+0xbd0>)
 801218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012192:	f7ee fcbb 	bl	8000b0c <__aeabi_dcmplt>
 8012196:	2800      	cmp	r0, #0
 8012198:	f47f acd0 	bne.w	8011b3c <_strtod_l+0x4a4>
 801219c:	a334      	add	r3, pc, #208	; (adr r3, 8012270 <_strtod_l+0xbd8>)
 801219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a2:	4640      	mov	r0, r8
 80121a4:	4649      	mov	r1, r9
 80121a6:	f7ee fccf 	bl	8000b48 <__aeabi_dcmpgt>
 80121aa:	2800      	cmp	r0, #0
 80121ac:	f43f af7b 	beq.w	80120a6 <_strtod_l+0xa0e>
 80121b0:	e4c4      	b.n	8011b3c <_strtod_l+0x4a4>
 80121b2:	9b04      	ldr	r3, [sp, #16]
 80121b4:	b333      	cbz	r3, 8012204 <_strtod_l+0xb6c>
 80121b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80121bc:	d822      	bhi.n	8012204 <_strtod_l+0xb6c>
 80121be:	a32e      	add	r3, pc, #184	; (adr r3, 8012278 <_strtod_l+0xbe0>)
 80121c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c4:	4640      	mov	r0, r8
 80121c6:	4649      	mov	r1, r9
 80121c8:	f7ee fcaa 	bl	8000b20 <__aeabi_dcmple>
 80121cc:	b1a0      	cbz	r0, 80121f8 <_strtod_l+0xb60>
 80121ce:	4649      	mov	r1, r9
 80121d0:	4640      	mov	r0, r8
 80121d2:	f7ee fd01 	bl	8000bd8 <__aeabi_d2uiz>
 80121d6:	2801      	cmp	r0, #1
 80121d8:	bf38      	it	cc
 80121da:	2001      	movcc	r0, #1
 80121dc:	f7ee f9aa 	bl	8000534 <__aeabi_ui2d>
 80121e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121e2:	4680      	mov	r8, r0
 80121e4:	4689      	mov	r9, r1
 80121e6:	bb23      	cbnz	r3, 8012232 <_strtod_l+0xb9a>
 80121e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121ec:	9010      	str	r0, [sp, #64]	; 0x40
 80121ee:	9311      	str	r3, [sp, #68]	; 0x44
 80121f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80121f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80121f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80121fc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012200:	1a9b      	subs	r3, r3, r2
 8012202:	9309      	str	r3, [sp, #36]	; 0x24
 8012204:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012208:	eeb0 0a48 	vmov.f32	s0, s16
 801220c:	eef0 0a68 	vmov.f32	s1, s17
 8012210:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012214:	f001 fe4a 	bl	8013eac <__ulp>
 8012218:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801221c:	ec53 2b10 	vmov	r2, r3, d0
 8012220:	f7ee fa02 	bl	8000628 <__aeabi_dmul>
 8012224:	ec53 2b18 	vmov	r2, r3, d8
 8012228:	f7ee f848 	bl	80002bc <__adddf3>
 801222c:	4682      	mov	sl, r0
 801222e:	468b      	mov	fp, r1
 8012230:	e78d      	b.n	801214e <_strtod_l+0xab6>
 8012232:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8012236:	e7db      	b.n	80121f0 <_strtod_l+0xb58>
 8012238:	a311      	add	r3, pc, #68	; (adr r3, 8012280 <_strtod_l+0xbe8>)
 801223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801223e:	f7ee fc65 	bl	8000b0c <__aeabi_dcmplt>
 8012242:	e7b2      	b.n	80121aa <_strtod_l+0xb12>
 8012244:	2300      	movs	r3, #0
 8012246:	930a      	str	r3, [sp, #40]	; 0x28
 8012248:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801224a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801224c:	6013      	str	r3, [r2, #0]
 801224e:	f7ff ba6b 	b.w	8011728 <_strtod_l+0x90>
 8012252:	2a65      	cmp	r2, #101	; 0x65
 8012254:	f43f ab5f 	beq.w	8011916 <_strtod_l+0x27e>
 8012258:	2a45      	cmp	r2, #69	; 0x45
 801225a:	f43f ab5c 	beq.w	8011916 <_strtod_l+0x27e>
 801225e:	2301      	movs	r3, #1
 8012260:	f7ff bb94 	b.w	801198c <_strtod_l+0x2f4>
 8012264:	f3af 8000 	nop.w
 8012268:	94a03595 	.word	0x94a03595
 801226c:	3fdfffff 	.word	0x3fdfffff
 8012270:	35afe535 	.word	0x35afe535
 8012274:	3fe00000 	.word	0x3fe00000
 8012278:	ffc00000 	.word	0xffc00000
 801227c:	41dfffff 	.word	0x41dfffff
 8012280:	94a03595 	.word	0x94a03595
 8012284:	3fcfffff 	.word	0x3fcfffff
 8012288:	3ff00000 	.word	0x3ff00000
 801228c:	7ff00000 	.word	0x7ff00000
 8012290:	7fe00000 	.word	0x7fe00000
 8012294:	7c9fffff 	.word	0x7c9fffff
 8012298:	3fe00000 	.word	0x3fe00000
 801229c:	bff00000 	.word	0xbff00000
 80122a0:	7fefffff 	.word	0x7fefffff

080122a4 <_strtod_r>:
 80122a4:	4b01      	ldr	r3, [pc, #4]	; (80122ac <_strtod_r+0x8>)
 80122a6:	f7ff b9f7 	b.w	8011698 <_strtod_l>
 80122aa:	bf00      	nop
 80122ac:	200000ec 	.word	0x200000ec

080122b0 <_strtol_l.constprop.0>:
 80122b0:	2b01      	cmp	r3, #1
 80122b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122b6:	d001      	beq.n	80122bc <_strtol_l.constprop.0+0xc>
 80122b8:	2b24      	cmp	r3, #36	; 0x24
 80122ba:	d906      	bls.n	80122ca <_strtol_l.constprop.0+0x1a>
 80122bc:	f7fe faee 	bl	801089c <__errno>
 80122c0:	2316      	movs	r3, #22
 80122c2:	6003      	str	r3, [r0, #0]
 80122c4:	2000      	movs	r0, #0
 80122c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80123b0 <_strtol_l.constprop.0+0x100>
 80122ce:	460d      	mov	r5, r1
 80122d0:	462e      	mov	r6, r5
 80122d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80122d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80122da:	f017 0708 	ands.w	r7, r7, #8
 80122de:	d1f7      	bne.n	80122d0 <_strtol_l.constprop.0+0x20>
 80122e0:	2c2d      	cmp	r4, #45	; 0x2d
 80122e2:	d132      	bne.n	801234a <_strtol_l.constprop.0+0x9a>
 80122e4:	782c      	ldrb	r4, [r5, #0]
 80122e6:	2701      	movs	r7, #1
 80122e8:	1cb5      	adds	r5, r6, #2
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d05b      	beq.n	80123a6 <_strtol_l.constprop.0+0xf6>
 80122ee:	2b10      	cmp	r3, #16
 80122f0:	d109      	bne.n	8012306 <_strtol_l.constprop.0+0x56>
 80122f2:	2c30      	cmp	r4, #48	; 0x30
 80122f4:	d107      	bne.n	8012306 <_strtol_l.constprop.0+0x56>
 80122f6:	782c      	ldrb	r4, [r5, #0]
 80122f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80122fc:	2c58      	cmp	r4, #88	; 0x58
 80122fe:	d14d      	bne.n	801239c <_strtol_l.constprop.0+0xec>
 8012300:	786c      	ldrb	r4, [r5, #1]
 8012302:	2310      	movs	r3, #16
 8012304:	3502      	adds	r5, #2
 8012306:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801230a:	f108 38ff 	add.w	r8, r8, #4294967295
 801230e:	f04f 0c00 	mov.w	ip, #0
 8012312:	fbb8 f9f3 	udiv	r9, r8, r3
 8012316:	4666      	mov	r6, ip
 8012318:	fb03 8a19 	mls	sl, r3, r9, r8
 801231c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012320:	f1be 0f09 	cmp.w	lr, #9
 8012324:	d816      	bhi.n	8012354 <_strtol_l.constprop.0+0xa4>
 8012326:	4674      	mov	r4, lr
 8012328:	42a3      	cmp	r3, r4
 801232a:	dd24      	ble.n	8012376 <_strtol_l.constprop.0+0xc6>
 801232c:	f1bc 0f00 	cmp.w	ip, #0
 8012330:	db1e      	blt.n	8012370 <_strtol_l.constprop.0+0xc0>
 8012332:	45b1      	cmp	r9, r6
 8012334:	d31c      	bcc.n	8012370 <_strtol_l.constprop.0+0xc0>
 8012336:	d101      	bne.n	801233c <_strtol_l.constprop.0+0x8c>
 8012338:	45a2      	cmp	sl, r4
 801233a:	db19      	blt.n	8012370 <_strtol_l.constprop.0+0xc0>
 801233c:	fb06 4603 	mla	r6, r6, r3, r4
 8012340:	f04f 0c01 	mov.w	ip, #1
 8012344:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012348:	e7e8      	b.n	801231c <_strtol_l.constprop.0+0x6c>
 801234a:	2c2b      	cmp	r4, #43	; 0x2b
 801234c:	bf04      	itt	eq
 801234e:	782c      	ldrbeq	r4, [r5, #0]
 8012350:	1cb5      	addeq	r5, r6, #2
 8012352:	e7ca      	b.n	80122ea <_strtol_l.constprop.0+0x3a>
 8012354:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012358:	f1be 0f19 	cmp.w	lr, #25
 801235c:	d801      	bhi.n	8012362 <_strtol_l.constprop.0+0xb2>
 801235e:	3c37      	subs	r4, #55	; 0x37
 8012360:	e7e2      	b.n	8012328 <_strtol_l.constprop.0+0x78>
 8012362:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8012366:	f1be 0f19 	cmp.w	lr, #25
 801236a:	d804      	bhi.n	8012376 <_strtol_l.constprop.0+0xc6>
 801236c:	3c57      	subs	r4, #87	; 0x57
 801236e:	e7db      	b.n	8012328 <_strtol_l.constprop.0+0x78>
 8012370:	f04f 3cff 	mov.w	ip, #4294967295
 8012374:	e7e6      	b.n	8012344 <_strtol_l.constprop.0+0x94>
 8012376:	f1bc 0f00 	cmp.w	ip, #0
 801237a:	da05      	bge.n	8012388 <_strtol_l.constprop.0+0xd8>
 801237c:	2322      	movs	r3, #34	; 0x22
 801237e:	6003      	str	r3, [r0, #0]
 8012380:	4646      	mov	r6, r8
 8012382:	b942      	cbnz	r2, 8012396 <_strtol_l.constprop.0+0xe6>
 8012384:	4630      	mov	r0, r6
 8012386:	e79e      	b.n	80122c6 <_strtol_l.constprop.0+0x16>
 8012388:	b107      	cbz	r7, 801238c <_strtol_l.constprop.0+0xdc>
 801238a:	4276      	negs	r6, r6
 801238c:	2a00      	cmp	r2, #0
 801238e:	d0f9      	beq.n	8012384 <_strtol_l.constprop.0+0xd4>
 8012390:	f1bc 0f00 	cmp.w	ip, #0
 8012394:	d000      	beq.n	8012398 <_strtol_l.constprop.0+0xe8>
 8012396:	1e69      	subs	r1, r5, #1
 8012398:	6011      	str	r1, [r2, #0]
 801239a:	e7f3      	b.n	8012384 <_strtol_l.constprop.0+0xd4>
 801239c:	2430      	movs	r4, #48	; 0x30
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d1b1      	bne.n	8012306 <_strtol_l.constprop.0+0x56>
 80123a2:	2308      	movs	r3, #8
 80123a4:	e7af      	b.n	8012306 <_strtol_l.constprop.0+0x56>
 80123a6:	2c30      	cmp	r4, #48	; 0x30
 80123a8:	d0a5      	beq.n	80122f6 <_strtol_l.constprop.0+0x46>
 80123aa:	230a      	movs	r3, #10
 80123ac:	e7ab      	b.n	8012306 <_strtol_l.constprop.0+0x56>
 80123ae:	bf00      	nop
 80123b0:	080159b9 	.word	0x080159b9

080123b4 <_strtol_r>:
 80123b4:	f7ff bf7c 	b.w	80122b0 <_strtol_l.constprop.0>

080123b8 <quorem>:
 80123b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123bc:	6903      	ldr	r3, [r0, #16]
 80123be:	690c      	ldr	r4, [r1, #16]
 80123c0:	42a3      	cmp	r3, r4
 80123c2:	4607      	mov	r7, r0
 80123c4:	f2c0 8081 	blt.w	80124ca <quorem+0x112>
 80123c8:	3c01      	subs	r4, #1
 80123ca:	f101 0814 	add.w	r8, r1, #20
 80123ce:	f100 0514 	add.w	r5, r0, #20
 80123d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80123d6:	9301      	str	r3, [sp, #4]
 80123d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80123dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80123e0:	3301      	adds	r3, #1
 80123e2:	429a      	cmp	r2, r3
 80123e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80123e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80123ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80123f0:	d331      	bcc.n	8012456 <quorem+0x9e>
 80123f2:	f04f 0e00 	mov.w	lr, #0
 80123f6:	4640      	mov	r0, r8
 80123f8:	46ac      	mov	ip, r5
 80123fa:	46f2      	mov	sl, lr
 80123fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8012400:	b293      	uxth	r3, r2
 8012402:	fb06 e303 	mla	r3, r6, r3, lr
 8012406:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801240a:	b29b      	uxth	r3, r3
 801240c:	ebaa 0303 	sub.w	r3, sl, r3
 8012410:	f8dc a000 	ldr.w	sl, [ip]
 8012414:	0c12      	lsrs	r2, r2, #16
 8012416:	fa13 f38a 	uxtah	r3, r3, sl
 801241a:	fb06 e202 	mla	r2, r6, r2, lr
 801241e:	9300      	str	r3, [sp, #0]
 8012420:	9b00      	ldr	r3, [sp, #0]
 8012422:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012426:	b292      	uxth	r2, r2
 8012428:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801242c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012430:	f8bd 3000 	ldrh.w	r3, [sp]
 8012434:	4581      	cmp	r9, r0
 8012436:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801243a:	f84c 3b04 	str.w	r3, [ip], #4
 801243e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012442:	d2db      	bcs.n	80123fc <quorem+0x44>
 8012444:	f855 300b 	ldr.w	r3, [r5, fp]
 8012448:	b92b      	cbnz	r3, 8012456 <quorem+0x9e>
 801244a:	9b01      	ldr	r3, [sp, #4]
 801244c:	3b04      	subs	r3, #4
 801244e:	429d      	cmp	r5, r3
 8012450:	461a      	mov	r2, r3
 8012452:	d32e      	bcc.n	80124b2 <quorem+0xfa>
 8012454:	613c      	str	r4, [r7, #16]
 8012456:	4638      	mov	r0, r7
 8012458:	f001 fc82 	bl	8013d60 <__mcmp>
 801245c:	2800      	cmp	r0, #0
 801245e:	db24      	blt.n	80124aa <quorem+0xf2>
 8012460:	3601      	adds	r6, #1
 8012462:	4628      	mov	r0, r5
 8012464:	f04f 0c00 	mov.w	ip, #0
 8012468:	f858 2b04 	ldr.w	r2, [r8], #4
 801246c:	f8d0 e000 	ldr.w	lr, [r0]
 8012470:	b293      	uxth	r3, r2
 8012472:	ebac 0303 	sub.w	r3, ip, r3
 8012476:	0c12      	lsrs	r2, r2, #16
 8012478:	fa13 f38e 	uxtah	r3, r3, lr
 801247c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012480:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012484:	b29b      	uxth	r3, r3
 8012486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801248a:	45c1      	cmp	r9, r8
 801248c:	f840 3b04 	str.w	r3, [r0], #4
 8012490:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012494:	d2e8      	bcs.n	8012468 <quorem+0xb0>
 8012496:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801249a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801249e:	b922      	cbnz	r2, 80124aa <quorem+0xf2>
 80124a0:	3b04      	subs	r3, #4
 80124a2:	429d      	cmp	r5, r3
 80124a4:	461a      	mov	r2, r3
 80124a6:	d30a      	bcc.n	80124be <quorem+0x106>
 80124a8:	613c      	str	r4, [r7, #16]
 80124aa:	4630      	mov	r0, r6
 80124ac:	b003      	add	sp, #12
 80124ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124b2:	6812      	ldr	r2, [r2, #0]
 80124b4:	3b04      	subs	r3, #4
 80124b6:	2a00      	cmp	r2, #0
 80124b8:	d1cc      	bne.n	8012454 <quorem+0x9c>
 80124ba:	3c01      	subs	r4, #1
 80124bc:	e7c7      	b.n	801244e <quorem+0x96>
 80124be:	6812      	ldr	r2, [r2, #0]
 80124c0:	3b04      	subs	r3, #4
 80124c2:	2a00      	cmp	r2, #0
 80124c4:	d1f0      	bne.n	80124a8 <quorem+0xf0>
 80124c6:	3c01      	subs	r4, #1
 80124c8:	e7eb      	b.n	80124a2 <quorem+0xea>
 80124ca:	2000      	movs	r0, #0
 80124cc:	e7ee      	b.n	80124ac <quorem+0xf4>
	...

080124d0 <_dtoa_r>:
 80124d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d4:	ed2d 8b04 	vpush	{d8-d9}
 80124d8:	ec57 6b10 	vmov	r6, r7, d0
 80124dc:	b093      	sub	sp, #76	; 0x4c
 80124de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80124e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80124e4:	9106      	str	r1, [sp, #24]
 80124e6:	ee10 aa10 	vmov	sl, s0
 80124ea:	4604      	mov	r4, r0
 80124ec:	9209      	str	r2, [sp, #36]	; 0x24
 80124ee:	930c      	str	r3, [sp, #48]	; 0x30
 80124f0:	46bb      	mov	fp, r7
 80124f2:	b975      	cbnz	r5, 8012512 <_dtoa_r+0x42>
 80124f4:	2010      	movs	r0, #16
 80124f6:	f001 f94d 	bl	8013794 <malloc>
 80124fa:	4602      	mov	r2, r0
 80124fc:	6260      	str	r0, [r4, #36]	; 0x24
 80124fe:	b920      	cbnz	r0, 801250a <_dtoa_r+0x3a>
 8012500:	4ba7      	ldr	r3, [pc, #668]	; (80127a0 <_dtoa_r+0x2d0>)
 8012502:	21ea      	movs	r1, #234	; 0xea
 8012504:	48a7      	ldr	r0, [pc, #668]	; (80127a4 <_dtoa_r+0x2d4>)
 8012506:	f002 f8ad 	bl	8014664 <__assert_func>
 801250a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801250e:	6005      	str	r5, [r0, #0]
 8012510:	60c5      	str	r5, [r0, #12]
 8012512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012514:	6819      	ldr	r1, [r3, #0]
 8012516:	b151      	cbz	r1, 801252e <_dtoa_r+0x5e>
 8012518:	685a      	ldr	r2, [r3, #4]
 801251a:	604a      	str	r2, [r1, #4]
 801251c:	2301      	movs	r3, #1
 801251e:	4093      	lsls	r3, r2
 8012520:	608b      	str	r3, [r1, #8]
 8012522:	4620      	mov	r0, r4
 8012524:	f001 f990 	bl	8013848 <_Bfree>
 8012528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801252a:	2200      	movs	r2, #0
 801252c:	601a      	str	r2, [r3, #0]
 801252e:	1e3b      	subs	r3, r7, #0
 8012530:	bfaa      	itet	ge
 8012532:	2300      	movge	r3, #0
 8012534:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012538:	f8c8 3000 	strge.w	r3, [r8]
 801253c:	4b9a      	ldr	r3, [pc, #616]	; (80127a8 <_dtoa_r+0x2d8>)
 801253e:	bfbc      	itt	lt
 8012540:	2201      	movlt	r2, #1
 8012542:	f8c8 2000 	strlt.w	r2, [r8]
 8012546:	ea33 030b 	bics.w	r3, r3, fp
 801254a:	d11b      	bne.n	8012584 <_dtoa_r+0xb4>
 801254c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801254e:	f242 730f 	movw	r3, #9999	; 0x270f
 8012552:	6013      	str	r3, [r2, #0]
 8012554:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012558:	4333      	orrs	r3, r6
 801255a:	f000 8592 	beq.w	8013082 <_dtoa_r+0xbb2>
 801255e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012560:	b963      	cbnz	r3, 801257c <_dtoa_r+0xac>
 8012562:	4b92      	ldr	r3, [pc, #584]	; (80127ac <_dtoa_r+0x2dc>)
 8012564:	e022      	b.n	80125ac <_dtoa_r+0xdc>
 8012566:	4b92      	ldr	r3, [pc, #584]	; (80127b0 <_dtoa_r+0x2e0>)
 8012568:	9301      	str	r3, [sp, #4]
 801256a:	3308      	adds	r3, #8
 801256c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801256e:	6013      	str	r3, [r2, #0]
 8012570:	9801      	ldr	r0, [sp, #4]
 8012572:	b013      	add	sp, #76	; 0x4c
 8012574:	ecbd 8b04 	vpop	{d8-d9}
 8012578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801257c:	4b8b      	ldr	r3, [pc, #556]	; (80127ac <_dtoa_r+0x2dc>)
 801257e:	9301      	str	r3, [sp, #4]
 8012580:	3303      	adds	r3, #3
 8012582:	e7f3      	b.n	801256c <_dtoa_r+0x9c>
 8012584:	2200      	movs	r2, #0
 8012586:	2300      	movs	r3, #0
 8012588:	4650      	mov	r0, sl
 801258a:	4659      	mov	r1, fp
 801258c:	f7ee fab4 	bl	8000af8 <__aeabi_dcmpeq>
 8012590:	ec4b ab19 	vmov	d9, sl, fp
 8012594:	4680      	mov	r8, r0
 8012596:	b158      	cbz	r0, 80125b0 <_dtoa_r+0xe0>
 8012598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801259a:	2301      	movs	r3, #1
 801259c:	6013      	str	r3, [r2, #0]
 801259e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	f000 856b 	beq.w	801307c <_dtoa_r+0xbac>
 80125a6:	4883      	ldr	r0, [pc, #524]	; (80127b4 <_dtoa_r+0x2e4>)
 80125a8:	6018      	str	r0, [r3, #0]
 80125aa:	1e43      	subs	r3, r0, #1
 80125ac:	9301      	str	r3, [sp, #4]
 80125ae:	e7df      	b.n	8012570 <_dtoa_r+0xa0>
 80125b0:	ec4b ab10 	vmov	d0, sl, fp
 80125b4:	aa10      	add	r2, sp, #64	; 0x40
 80125b6:	a911      	add	r1, sp, #68	; 0x44
 80125b8:	4620      	mov	r0, r4
 80125ba:	f001 fcf3 	bl	8013fa4 <__d2b>
 80125be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80125c2:	ee08 0a10 	vmov	s16, r0
 80125c6:	2d00      	cmp	r5, #0
 80125c8:	f000 8084 	beq.w	80126d4 <_dtoa_r+0x204>
 80125cc:	ee19 3a90 	vmov	r3, s19
 80125d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80125d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80125d8:	4656      	mov	r6, sl
 80125da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80125de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80125e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80125e6:	4b74      	ldr	r3, [pc, #464]	; (80127b8 <_dtoa_r+0x2e8>)
 80125e8:	2200      	movs	r2, #0
 80125ea:	4630      	mov	r0, r6
 80125ec:	4639      	mov	r1, r7
 80125ee:	f7ed fe63 	bl	80002b8 <__aeabi_dsub>
 80125f2:	a365      	add	r3, pc, #404	; (adr r3, 8012788 <_dtoa_r+0x2b8>)
 80125f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f8:	f7ee f816 	bl	8000628 <__aeabi_dmul>
 80125fc:	a364      	add	r3, pc, #400	; (adr r3, 8012790 <_dtoa_r+0x2c0>)
 80125fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012602:	f7ed fe5b 	bl	80002bc <__adddf3>
 8012606:	4606      	mov	r6, r0
 8012608:	4628      	mov	r0, r5
 801260a:	460f      	mov	r7, r1
 801260c:	f7ed ffa2 	bl	8000554 <__aeabi_i2d>
 8012610:	a361      	add	r3, pc, #388	; (adr r3, 8012798 <_dtoa_r+0x2c8>)
 8012612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012616:	f7ee f807 	bl	8000628 <__aeabi_dmul>
 801261a:	4602      	mov	r2, r0
 801261c:	460b      	mov	r3, r1
 801261e:	4630      	mov	r0, r6
 8012620:	4639      	mov	r1, r7
 8012622:	f7ed fe4b 	bl	80002bc <__adddf3>
 8012626:	4606      	mov	r6, r0
 8012628:	460f      	mov	r7, r1
 801262a:	f7ee faad 	bl	8000b88 <__aeabi_d2iz>
 801262e:	2200      	movs	r2, #0
 8012630:	9000      	str	r0, [sp, #0]
 8012632:	2300      	movs	r3, #0
 8012634:	4630      	mov	r0, r6
 8012636:	4639      	mov	r1, r7
 8012638:	f7ee fa68 	bl	8000b0c <__aeabi_dcmplt>
 801263c:	b150      	cbz	r0, 8012654 <_dtoa_r+0x184>
 801263e:	9800      	ldr	r0, [sp, #0]
 8012640:	f7ed ff88 	bl	8000554 <__aeabi_i2d>
 8012644:	4632      	mov	r2, r6
 8012646:	463b      	mov	r3, r7
 8012648:	f7ee fa56 	bl	8000af8 <__aeabi_dcmpeq>
 801264c:	b910      	cbnz	r0, 8012654 <_dtoa_r+0x184>
 801264e:	9b00      	ldr	r3, [sp, #0]
 8012650:	3b01      	subs	r3, #1
 8012652:	9300      	str	r3, [sp, #0]
 8012654:	9b00      	ldr	r3, [sp, #0]
 8012656:	2b16      	cmp	r3, #22
 8012658:	d85a      	bhi.n	8012710 <_dtoa_r+0x240>
 801265a:	9a00      	ldr	r2, [sp, #0]
 801265c:	4b57      	ldr	r3, [pc, #348]	; (80127bc <_dtoa_r+0x2ec>)
 801265e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012666:	ec51 0b19 	vmov	r0, r1, d9
 801266a:	f7ee fa4f 	bl	8000b0c <__aeabi_dcmplt>
 801266e:	2800      	cmp	r0, #0
 8012670:	d050      	beq.n	8012714 <_dtoa_r+0x244>
 8012672:	9b00      	ldr	r3, [sp, #0]
 8012674:	3b01      	subs	r3, #1
 8012676:	9300      	str	r3, [sp, #0]
 8012678:	2300      	movs	r3, #0
 801267a:	930b      	str	r3, [sp, #44]	; 0x2c
 801267c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801267e:	1b5d      	subs	r5, r3, r5
 8012680:	1e6b      	subs	r3, r5, #1
 8012682:	9305      	str	r3, [sp, #20]
 8012684:	bf45      	ittet	mi
 8012686:	f1c5 0301 	rsbmi	r3, r5, #1
 801268a:	9304      	strmi	r3, [sp, #16]
 801268c:	2300      	movpl	r3, #0
 801268e:	2300      	movmi	r3, #0
 8012690:	bf4c      	ite	mi
 8012692:	9305      	strmi	r3, [sp, #20]
 8012694:	9304      	strpl	r3, [sp, #16]
 8012696:	9b00      	ldr	r3, [sp, #0]
 8012698:	2b00      	cmp	r3, #0
 801269a:	db3d      	blt.n	8012718 <_dtoa_r+0x248>
 801269c:	9b05      	ldr	r3, [sp, #20]
 801269e:	9a00      	ldr	r2, [sp, #0]
 80126a0:	920a      	str	r2, [sp, #40]	; 0x28
 80126a2:	4413      	add	r3, r2
 80126a4:	9305      	str	r3, [sp, #20]
 80126a6:	2300      	movs	r3, #0
 80126a8:	9307      	str	r3, [sp, #28]
 80126aa:	9b06      	ldr	r3, [sp, #24]
 80126ac:	2b09      	cmp	r3, #9
 80126ae:	f200 8089 	bhi.w	80127c4 <_dtoa_r+0x2f4>
 80126b2:	2b05      	cmp	r3, #5
 80126b4:	bfc4      	itt	gt
 80126b6:	3b04      	subgt	r3, #4
 80126b8:	9306      	strgt	r3, [sp, #24]
 80126ba:	9b06      	ldr	r3, [sp, #24]
 80126bc:	f1a3 0302 	sub.w	r3, r3, #2
 80126c0:	bfcc      	ite	gt
 80126c2:	2500      	movgt	r5, #0
 80126c4:	2501      	movle	r5, #1
 80126c6:	2b03      	cmp	r3, #3
 80126c8:	f200 8087 	bhi.w	80127da <_dtoa_r+0x30a>
 80126cc:	e8df f003 	tbb	[pc, r3]
 80126d0:	59383a2d 	.word	0x59383a2d
 80126d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80126d8:	441d      	add	r5, r3
 80126da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80126de:	2b20      	cmp	r3, #32
 80126e0:	bfc1      	itttt	gt
 80126e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80126e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80126ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80126ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80126f2:	bfda      	itte	le
 80126f4:	f1c3 0320 	rsble	r3, r3, #32
 80126f8:	fa06 f003 	lslle.w	r0, r6, r3
 80126fc:	4318      	orrgt	r0, r3
 80126fe:	f7ed ff19 	bl	8000534 <__aeabi_ui2d>
 8012702:	2301      	movs	r3, #1
 8012704:	4606      	mov	r6, r0
 8012706:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801270a:	3d01      	subs	r5, #1
 801270c:	930e      	str	r3, [sp, #56]	; 0x38
 801270e:	e76a      	b.n	80125e6 <_dtoa_r+0x116>
 8012710:	2301      	movs	r3, #1
 8012712:	e7b2      	b.n	801267a <_dtoa_r+0x1aa>
 8012714:	900b      	str	r0, [sp, #44]	; 0x2c
 8012716:	e7b1      	b.n	801267c <_dtoa_r+0x1ac>
 8012718:	9b04      	ldr	r3, [sp, #16]
 801271a:	9a00      	ldr	r2, [sp, #0]
 801271c:	1a9b      	subs	r3, r3, r2
 801271e:	9304      	str	r3, [sp, #16]
 8012720:	4253      	negs	r3, r2
 8012722:	9307      	str	r3, [sp, #28]
 8012724:	2300      	movs	r3, #0
 8012726:	930a      	str	r3, [sp, #40]	; 0x28
 8012728:	e7bf      	b.n	80126aa <_dtoa_r+0x1da>
 801272a:	2300      	movs	r3, #0
 801272c:	9308      	str	r3, [sp, #32]
 801272e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012730:	2b00      	cmp	r3, #0
 8012732:	dc55      	bgt.n	80127e0 <_dtoa_r+0x310>
 8012734:	2301      	movs	r3, #1
 8012736:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801273a:	461a      	mov	r2, r3
 801273c:	9209      	str	r2, [sp, #36]	; 0x24
 801273e:	e00c      	b.n	801275a <_dtoa_r+0x28a>
 8012740:	2301      	movs	r3, #1
 8012742:	e7f3      	b.n	801272c <_dtoa_r+0x25c>
 8012744:	2300      	movs	r3, #0
 8012746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012748:	9308      	str	r3, [sp, #32]
 801274a:	9b00      	ldr	r3, [sp, #0]
 801274c:	4413      	add	r3, r2
 801274e:	9302      	str	r3, [sp, #8]
 8012750:	3301      	adds	r3, #1
 8012752:	2b01      	cmp	r3, #1
 8012754:	9303      	str	r3, [sp, #12]
 8012756:	bfb8      	it	lt
 8012758:	2301      	movlt	r3, #1
 801275a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801275c:	2200      	movs	r2, #0
 801275e:	6042      	str	r2, [r0, #4]
 8012760:	2204      	movs	r2, #4
 8012762:	f102 0614 	add.w	r6, r2, #20
 8012766:	429e      	cmp	r6, r3
 8012768:	6841      	ldr	r1, [r0, #4]
 801276a:	d93d      	bls.n	80127e8 <_dtoa_r+0x318>
 801276c:	4620      	mov	r0, r4
 801276e:	f001 f82b 	bl	80137c8 <_Balloc>
 8012772:	9001      	str	r0, [sp, #4]
 8012774:	2800      	cmp	r0, #0
 8012776:	d13b      	bne.n	80127f0 <_dtoa_r+0x320>
 8012778:	4b11      	ldr	r3, [pc, #68]	; (80127c0 <_dtoa_r+0x2f0>)
 801277a:	4602      	mov	r2, r0
 801277c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012780:	e6c0      	b.n	8012504 <_dtoa_r+0x34>
 8012782:	2301      	movs	r3, #1
 8012784:	e7df      	b.n	8012746 <_dtoa_r+0x276>
 8012786:	bf00      	nop
 8012788:	636f4361 	.word	0x636f4361
 801278c:	3fd287a7 	.word	0x3fd287a7
 8012790:	8b60c8b3 	.word	0x8b60c8b3
 8012794:	3fc68a28 	.word	0x3fc68a28
 8012798:	509f79fb 	.word	0x509f79fb
 801279c:	3fd34413 	.word	0x3fd34413
 80127a0:	08015ac6 	.word	0x08015ac6
 80127a4:	08015add 	.word	0x08015add
 80127a8:	7ff00000 	.word	0x7ff00000
 80127ac:	08015ac2 	.word	0x08015ac2
 80127b0:	08015ab9 	.word	0x08015ab9
 80127b4:	0801593d 	.word	0x0801593d
 80127b8:	3ff80000 	.word	0x3ff80000
 80127bc:	08015c48 	.word	0x08015c48
 80127c0:	08015b38 	.word	0x08015b38
 80127c4:	2501      	movs	r5, #1
 80127c6:	2300      	movs	r3, #0
 80127c8:	9306      	str	r3, [sp, #24]
 80127ca:	9508      	str	r5, [sp, #32]
 80127cc:	f04f 33ff 	mov.w	r3, #4294967295
 80127d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80127d4:	2200      	movs	r2, #0
 80127d6:	2312      	movs	r3, #18
 80127d8:	e7b0      	b.n	801273c <_dtoa_r+0x26c>
 80127da:	2301      	movs	r3, #1
 80127dc:	9308      	str	r3, [sp, #32]
 80127de:	e7f5      	b.n	80127cc <_dtoa_r+0x2fc>
 80127e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80127e6:	e7b8      	b.n	801275a <_dtoa_r+0x28a>
 80127e8:	3101      	adds	r1, #1
 80127ea:	6041      	str	r1, [r0, #4]
 80127ec:	0052      	lsls	r2, r2, #1
 80127ee:	e7b8      	b.n	8012762 <_dtoa_r+0x292>
 80127f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127f2:	9a01      	ldr	r2, [sp, #4]
 80127f4:	601a      	str	r2, [r3, #0]
 80127f6:	9b03      	ldr	r3, [sp, #12]
 80127f8:	2b0e      	cmp	r3, #14
 80127fa:	f200 809d 	bhi.w	8012938 <_dtoa_r+0x468>
 80127fe:	2d00      	cmp	r5, #0
 8012800:	f000 809a 	beq.w	8012938 <_dtoa_r+0x468>
 8012804:	9b00      	ldr	r3, [sp, #0]
 8012806:	2b00      	cmp	r3, #0
 8012808:	dd32      	ble.n	8012870 <_dtoa_r+0x3a0>
 801280a:	4ab7      	ldr	r2, [pc, #732]	; (8012ae8 <_dtoa_r+0x618>)
 801280c:	f003 030f 	and.w	r3, r3, #15
 8012810:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012814:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012818:	9b00      	ldr	r3, [sp, #0]
 801281a:	05d8      	lsls	r0, r3, #23
 801281c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012820:	d516      	bpl.n	8012850 <_dtoa_r+0x380>
 8012822:	4bb2      	ldr	r3, [pc, #712]	; (8012aec <_dtoa_r+0x61c>)
 8012824:	ec51 0b19 	vmov	r0, r1, d9
 8012828:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801282c:	f7ee f826 	bl	800087c <__aeabi_ddiv>
 8012830:	f007 070f 	and.w	r7, r7, #15
 8012834:	4682      	mov	sl, r0
 8012836:	468b      	mov	fp, r1
 8012838:	2503      	movs	r5, #3
 801283a:	4eac      	ldr	r6, [pc, #688]	; (8012aec <_dtoa_r+0x61c>)
 801283c:	b957      	cbnz	r7, 8012854 <_dtoa_r+0x384>
 801283e:	4642      	mov	r2, r8
 8012840:	464b      	mov	r3, r9
 8012842:	4650      	mov	r0, sl
 8012844:	4659      	mov	r1, fp
 8012846:	f7ee f819 	bl	800087c <__aeabi_ddiv>
 801284a:	4682      	mov	sl, r0
 801284c:	468b      	mov	fp, r1
 801284e:	e028      	b.n	80128a2 <_dtoa_r+0x3d2>
 8012850:	2502      	movs	r5, #2
 8012852:	e7f2      	b.n	801283a <_dtoa_r+0x36a>
 8012854:	07f9      	lsls	r1, r7, #31
 8012856:	d508      	bpl.n	801286a <_dtoa_r+0x39a>
 8012858:	4640      	mov	r0, r8
 801285a:	4649      	mov	r1, r9
 801285c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012860:	f7ed fee2 	bl	8000628 <__aeabi_dmul>
 8012864:	3501      	adds	r5, #1
 8012866:	4680      	mov	r8, r0
 8012868:	4689      	mov	r9, r1
 801286a:	107f      	asrs	r7, r7, #1
 801286c:	3608      	adds	r6, #8
 801286e:	e7e5      	b.n	801283c <_dtoa_r+0x36c>
 8012870:	f000 809b 	beq.w	80129aa <_dtoa_r+0x4da>
 8012874:	9b00      	ldr	r3, [sp, #0]
 8012876:	4f9d      	ldr	r7, [pc, #628]	; (8012aec <_dtoa_r+0x61c>)
 8012878:	425e      	negs	r6, r3
 801287a:	4b9b      	ldr	r3, [pc, #620]	; (8012ae8 <_dtoa_r+0x618>)
 801287c:	f006 020f 	and.w	r2, r6, #15
 8012880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012888:	ec51 0b19 	vmov	r0, r1, d9
 801288c:	f7ed fecc 	bl	8000628 <__aeabi_dmul>
 8012890:	1136      	asrs	r6, r6, #4
 8012892:	4682      	mov	sl, r0
 8012894:	468b      	mov	fp, r1
 8012896:	2300      	movs	r3, #0
 8012898:	2502      	movs	r5, #2
 801289a:	2e00      	cmp	r6, #0
 801289c:	d17a      	bne.n	8012994 <_dtoa_r+0x4c4>
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d1d3      	bne.n	801284a <_dtoa_r+0x37a>
 80128a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	f000 8082 	beq.w	80129ae <_dtoa_r+0x4de>
 80128aa:	4b91      	ldr	r3, [pc, #580]	; (8012af0 <_dtoa_r+0x620>)
 80128ac:	2200      	movs	r2, #0
 80128ae:	4650      	mov	r0, sl
 80128b0:	4659      	mov	r1, fp
 80128b2:	f7ee f92b 	bl	8000b0c <__aeabi_dcmplt>
 80128b6:	2800      	cmp	r0, #0
 80128b8:	d079      	beq.n	80129ae <_dtoa_r+0x4de>
 80128ba:	9b03      	ldr	r3, [sp, #12]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d076      	beq.n	80129ae <_dtoa_r+0x4de>
 80128c0:	9b02      	ldr	r3, [sp, #8]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	dd36      	ble.n	8012934 <_dtoa_r+0x464>
 80128c6:	9b00      	ldr	r3, [sp, #0]
 80128c8:	4650      	mov	r0, sl
 80128ca:	4659      	mov	r1, fp
 80128cc:	1e5f      	subs	r7, r3, #1
 80128ce:	2200      	movs	r2, #0
 80128d0:	4b88      	ldr	r3, [pc, #544]	; (8012af4 <_dtoa_r+0x624>)
 80128d2:	f7ed fea9 	bl	8000628 <__aeabi_dmul>
 80128d6:	9e02      	ldr	r6, [sp, #8]
 80128d8:	4682      	mov	sl, r0
 80128da:	468b      	mov	fp, r1
 80128dc:	3501      	adds	r5, #1
 80128de:	4628      	mov	r0, r5
 80128e0:	f7ed fe38 	bl	8000554 <__aeabi_i2d>
 80128e4:	4652      	mov	r2, sl
 80128e6:	465b      	mov	r3, fp
 80128e8:	f7ed fe9e 	bl	8000628 <__aeabi_dmul>
 80128ec:	4b82      	ldr	r3, [pc, #520]	; (8012af8 <_dtoa_r+0x628>)
 80128ee:	2200      	movs	r2, #0
 80128f0:	f7ed fce4 	bl	80002bc <__adddf3>
 80128f4:	46d0      	mov	r8, sl
 80128f6:	46d9      	mov	r9, fp
 80128f8:	4682      	mov	sl, r0
 80128fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80128fe:	2e00      	cmp	r6, #0
 8012900:	d158      	bne.n	80129b4 <_dtoa_r+0x4e4>
 8012902:	4b7e      	ldr	r3, [pc, #504]	; (8012afc <_dtoa_r+0x62c>)
 8012904:	2200      	movs	r2, #0
 8012906:	4640      	mov	r0, r8
 8012908:	4649      	mov	r1, r9
 801290a:	f7ed fcd5 	bl	80002b8 <__aeabi_dsub>
 801290e:	4652      	mov	r2, sl
 8012910:	465b      	mov	r3, fp
 8012912:	4680      	mov	r8, r0
 8012914:	4689      	mov	r9, r1
 8012916:	f7ee f917 	bl	8000b48 <__aeabi_dcmpgt>
 801291a:	2800      	cmp	r0, #0
 801291c:	f040 8295 	bne.w	8012e4a <_dtoa_r+0x97a>
 8012920:	4652      	mov	r2, sl
 8012922:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012926:	4640      	mov	r0, r8
 8012928:	4649      	mov	r1, r9
 801292a:	f7ee f8ef 	bl	8000b0c <__aeabi_dcmplt>
 801292e:	2800      	cmp	r0, #0
 8012930:	f040 8289 	bne.w	8012e46 <_dtoa_r+0x976>
 8012934:	ec5b ab19 	vmov	sl, fp, d9
 8012938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801293a:	2b00      	cmp	r3, #0
 801293c:	f2c0 8148 	blt.w	8012bd0 <_dtoa_r+0x700>
 8012940:	9a00      	ldr	r2, [sp, #0]
 8012942:	2a0e      	cmp	r2, #14
 8012944:	f300 8144 	bgt.w	8012bd0 <_dtoa_r+0x700>
 8012948:	4b67      	ldr	r3, [pc, #412]	; (8012ae8 <_dtoa_r+0x618>)
 801294a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801294e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012954:	2b00      	cmp	r3, #0
 8012956:	f280 80d5 	bge.w	8012b04 <_dtoa_r+0x634>
 801295a:	9b03      	ldr	r3, [sp, #12]
 801295c:	2b00      	cmp	r3, #0
 801295e:	f300 80d1 	bgt.w	8012b04 <_dtoa_r+0x634>
 8012962:	f040 826f 	bne.w	8012e44 <_dtoa_r+0x974>
 8012966:	4b65      	ldr	r3, [pc, #404]	; (8012afc <_dtoa_r+0x62c>)
 8012968:	2200      	movs	r2, #0
 801296a:	4640      	mov	r0, r8
 801296c:	4649      	mov	r1, r9
 801296e:	f7ed fe5b 	bl	8000628 <__aeabi_dmul>
 8012972:	4652      	mov	r2, sl
 8012974:	465b      	mov	r3, fp
 8012976:	f7ee f8dd 	bl	8000b34 <__aeabi_dcmpge>
 801297a:	9e03      	ldr	r6, [sp, #12]
 801297c:	4637      	mov	r7, r6
 801297e:	2800      	cmp	r0, #0
 8012980:	f040 8245 	bne.w	8012e0e <_dtoa_r+0x93e>
 8012984:	9d01      	ldr	r5, [sp, #4]
 8012986:	2331      	movs	r3, #49	; 0x31
 8012988:	f805 3b01 	strb.w	r3, [r5], #1
 801298c:	9b00      	ldr	r3, [sp, #0]
 801298e:	3301      	adds	r3, #1
 8012990:	9300      	str	r3, [sp, #0]
 8012992:	e240      	b.n	8012e16 <_dtoa_r+0x946>
 8012994:	07f2      	lsls	r2, r6, #31
 8012996:	d505      	bpl.n	80129a4 <_dtoa_r+0x4d4>
 8012998:	e9d7 2300 	ldrd	r2, r3, [r7]
 801299c:	f7ed fe44 	bl	8000628 <__aeabi_dmul>
 80129a0:	3501      	adds	r5, #1
 80129a2:	2301      	movs	r3, #1
 80129a4:	1076      	asrs	r6, r6, #1
 80129a6:	3708      	adds	r7, #8
 80129a8:	e777      	b.n	801289a <_dtoa_r+0x3ca>
 80129aa:	2502      	movs	r5, #2
 80129ac:	e779      	b.n	80128a2 <_dtoa_r+0x3d2>
 80129ae:	9f00      	ldr	r7, [sp, #0]
 80129b0:	9e03      	ldr	r6, [sp, #12]
 80129b2:	e794      	b.n	80128de <_dtoa_r+0x40e>
 80129b4:	9901      	ldr	r1, [sp, #4]
 80129b6:	4b4c      	ldr	r3, [pc, #304]	; (8012ae8 <_dtoa_r+0x618>)
 80129b8:	4431      	add	r1, r6
 80129ba:	910d      	str	r1, [sp, #52]	; 0x34
 80129bc:	9908      	ldr	r1, [sp, #32]
 80129be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80129c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80129c6:	2900      	cmp	r1, #0
 80129c8:	d043      	beq.n	8012a52 <_dtoa_r+0x582>
 80129ca:	494d      	ldr	r1, [pc, #308]	; (8012b00 <_dtoa_r+0x630>)
 80129cc:	2000      	movs	r0, #0
 80129ce:	f7ed ff55 	bl	800087c <__aeabi_ddiv>
 80129d2:	4652      	mov	r2, sl
 80129d4:	465b      	mov	r3, fp
 80129d6:	f7ed fc6f 	bl	80002b8 <__aeabi_dsub>
 80129da:	9d01      	ldr	r5, [sp, #4]
 80129dc:	4682      	mov	sl, r0
 80129de:	468b      	mov	fp, r1
 80129e0:	4649      	mov	r1, r9
 80129e2:	4640      	mov	r0, r8
 80129e4:	f7ee f8d0 	bl	8000b88 <__aeabi_d2iz>
 80129e8:	4606      	mov	r6, r0
 80129ea:	f7ed fdb3 	bl	8000554 <__aeabi_i2d>
 80129ee:	4602      	mov	r2, r0
 80129f0:	460b      	mov	r3, r1
 80129f2:	4640      	mov	r0, r8
 80129f4:	4649      	mov	r1, r9
 80129f6:	f7ed fc5f 	bl	80002b8 <__aeabi_dsub>
 80129fa:	3630      	adds	r6, #48	; 0x30
 80129fc:	f805 6b01 	strb.w	r6, [r5], #1
 8012a00:	4652      	mov	r2, sl
 8012a02:	465b      	mov	r3, fp
 8012a04:	4680      	mov	r8, r0
 8012a06:	4689      	mov	r9, r1
 8012a08:	f7ee f880 	bl	8000b0c <__aeabi_dcmplt>
 8012a0c:	2800      	cmp	r0, #0
 8012a0e:	d163      	bne.n	8012ad8 <_dtoa_r+0x608>
 8012a10:	4642      	mov	r2, r8
 8012a12:	464b      	mov	r3, r9
 8012a14:	4936      	ldr	r1, [pc, #216]	; (8012af0 <_dtoa_r+0x620>)
 8012a16:	2000      	movs	r0, #0
 8012a18:	f7ed fc4e 	bl	80002b8 <__aeabi_dsub>
 8012a1c:	4652      	mov	r2, sl
 8012a1e:	465b      	mov	r3, fp
 8012a20:	f7ee f874 	bl	8000b0c <__aeabi_dcmplt>
 8012a24:	2800      	cmp	r0, #0
 8012a26:	f040 80b5 	bne.w	8012b94 <_dtoa_r+0x6c4>
 8012a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a2c:	429d      	cmp	r5, r3
 8012a2e:	d081      	beq.n	8012934 <_dtoa_r+0x464>
 8012a30:	4b30      	ldr	r3, [pc, #192]	; (8012af4 <_dtoa_r+0x624>)
 8012a32:	2200      	movs	r2, #0
 8012a34:	4650      	mov	r0, sl
 8012a36:	4659      	mov	r1, fp
 8012a38:	f7ed fdf6 	bl	8000628 <__aeabi_dmul>
 8012a3c:	4b2d      	ldr	r3, [pc, #180]	; (8012af4 <_dtoa_r+0x624>)
 8012a3e:	4682      	mov	sl, r0
 8012a40:	468b      	mov	fp, r1
 8012a42:	4640      	mov	r0, r8
 8012a44:	4649      	mov	r1, r9
 8012a46:	2200      	movs	r2, #0
 8012a48:	f7ed fdee 	bl	8000628 <__aeabi_dmul>
 8012a4c:	4680      	mov	r8, r0
 8012a4e:	4689      	mov	r9, r1
 8012a50:	e7c6      	b.n	80129e0 <_dtoa_r+0x510>
 8012a52:	4650      	mov	r0, sl
 8012a54:	4659      	mov	r1, fp
 8012a56:	f7ed fde7 	bl	8000628 <__aeabi_dmul>
 8012a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a5c:	9d01      	ldr	r5, [sp, #4]
 8012a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012a60:	4682      	mov	sl, r0
 8012a62:	468b      	mov	fp, r1
 8012a64:	4649      	mov	r1, r9
 8012a66:	4640      	mov	r0, r8
 8012a68:	f7ee f88e 	bl	8000b88 <__aeabi_d2iz>
 8012a6c:	4606      	mov	r6, r0
 8012a6e:	f7ed fd71 	bl	8000554 <__aeabi_i2d>
 8012a72:	3630      	adds	r6, #48	; 0x30
 8012a74:	4602      	mov	r2, r0
 8012a76:	460b      	mov	r3, r1
 8012a78:	4640      	mov	r0, r8
 8012a7a:	4649      	mov	r1, r9
 8012a7c:	f7ed fc1c 	bl	80002b8 <__aeabi_dsub>
 8012a80:	f805 6b01 	strb.w	r6, [r5], #1
 8012a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a86:	429d      	cmp	r5, r3
 8012a88:	4680      	mov	r8, r0
 8012a8a:	4689      	mov	r9, r1
 8012a8c:	f04f 0200 	mov.w	r2, #0
 8012a90:	d124      	bne.n	8012adc <_dtoa_r+0x60c>
 8012a92:	4b1b      	ldr	r3, [pc, #108]	; (8012b00 <_dtoa_r+0x630>)
 8012a94:	4650      	mov	r0, sl
 8012a96:	4659      	mov	r1, fp
 8012a98:	f7ed fc10 	bl	80002bc <__adddf3>
 8012a9c:	4602      	mov	r2, r0
 8012a9e:	460b      	mov	r3, r1
 8012aa0:	4640      	mov	r0, r8
 8012aa2:	4649      	mov	r1, r9
 8012aa4:	f7ee f850 	bl	8000b48 <__aeabi_dcmpgt>
 8012aa8:	2800      	cmp	r0, #0
 8012aaa:	d173      	bne.n	8012b94 <_dtoa_r+0x6c4>
 8012aac:	4652      	mov	r2, sl
 8012aae:	465b      	mov	r3, fp
 8012ab0:	4913      	ldr	r1, [pc, #76]	; (8012b00 <_dtoa_r+0x630>)
 8012ab2:	2000      	movs	r0, #0
 8012ab4:	f7ed fc00 	bl	80002b8 <__aeabi_dsub>
 8012ab8:	4602      	mov	r2, r0
 8012aba:	460b      	mov	r3, r1
 8012abc:	4640      	mov	r0, r8
 8012abe:	4649      	mov	r1, r9
 8012ac0:	f7ee f824 	bl	8000b0c <__aeabi_dcmplt>
 8012ac4:	2800      	cmp	r0, #0
 8012ac6:	f43f af35 	beq.w	8012934 <_dtoa_r+0x464>
 8012aca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012acc:	1e6b      	subs	r3, r5, #1
 8012ace:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ad0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012ad4:	2b30      	cmp	r3, #48	; 0x30
 8012ad6:	d0f8      	beq.n	8012aca <_dtoa_r+0x5fa>
 8012ad8:	9700      	str	r7, [sp, #0]
 8012ada:	e049      	b.n	8012b70 <_dtoa_r+0x6a0>
 8012adc:	4b05      	ldr	r3, [pc, #20]	; (8012af4 <_dtoa_r+0x624>)
 8012ade:	f7ed fda3 	bl	8000628 <__aeabi_dmul>
 8012ae2:	4680      	mov	r8, r0
 8012ae4:	4689      	mov	r9, r1
 8012ae6:	e7bd      	b.n	8012a64 <_dtoa_r+0x594>
 8012ae8:	08015c48 	.word	0x08015c48
 8012aec:	08015c20 	.word	0x08015c20
 8012af0:	3ff00000 	.word	0x3ff00000
 8012af4:	40240000 	.word	0x40240000
 8012af8:	401c0000 	.word	0x401c0000
 8012afc:	40140000 	.word	0x40140000
 8012b00:	3fe00000 	.word	0x3fe00000
 8012b04:	9d01      	ldr	r5, [sp, #4]
 8012b06:	4656      	mov	r6, sl
 8012b08:	465f      	mov	r7, fp
 8012b0a:	4642      	mov	r2, r8
 8012b0c:	464b      	mov	r3, r9
 8012b0e:	4630      	mov	r0, r6
 8012b10:	4639      	mov	r1, r7
 8012b12:	f7ed feb3 	bl	800087c <__aeabi_ddiv>
 8012b16:	f7ee f837 	bl	8000b88 <__aeabi_d2iz>
 8012b1a:	4682      	mov	sl, r0
 8012b1c:	f7ed fd1a 	bl	8000554 <__aeabi_i2d>
 8012b20:	4642      	mov	r2, r8
 8012b22:	464b      	mov	r3, r9
 8012b24:	f7ed fd80 	bl	8000628 <__aeabi_dmul>
 8012b28:	4602      	mov	r2, r0
 8012b2a:	460b      	mov	r3, r1
 8012b2c:	4630      	mov	r0, r6
 8012b2e:	4639      	mov	r1, r7
 8012b30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012b34:	f7ed fbc0 	bl	80002b8 <__aeabi_dsub>
 8012b38:	f805 6b01 	strb.w	r6, [r5], #1
 8012b3c:	9e01      	ldr	r6, [sp, #4]
 8012b3e:	9f03      	ldr	r7, [sp, #12]
 8012b40:	1bae      	subs	r6, r5, r6
 8012b42:	42b7      	cmp	r7, r6
 8012b44:	4602      	mov	r2, r0
 8012b46:	460b      	mov	r3, r1
 8012b48:	d135      	bne.n	8012bb6 <_dtoa_r+0x6e6>
 8012b4a:	f7ed fbb7 	bl	80002bc <__adddf3>
 8012b4e:	4642      	mov	r2, r8
 8012b50:	464b      	mov	r3, r9
 8012b52:	4606      	mov	r6, r0
 8012b54:	460f      	mov	r7, r1
 8012b56:	f7ed fff7 	bl	8000b48 <__aeabi_dcmpgt>
 8012b5a:	b9d0      	cbnz	r0, 8012b92 <_dtoa_r+0x6c2>
 8012b5c:	4642      	mov	r2, r8
 8012b5e:	464b      	mov	r3, r9
 8012b60:	4630      	mov	r0, r6
 8012b62:	4639      	mov	r1, r7
 8012b64:	f7ed ffc8 	bl	8000af8 <__aeabi_dcmpeq>
 8012b68:	b110      	cbz	r0, 8012b70 <_dtoa_r+0x6a0>
 8012b6a:	f01a 0f01 	tst.w	sl, #1
 8012b6e:	d110      	bne.n	8012b92 <_dtoa_r+0x6c2>
 8012b70:	4620      	mov	r0, r4
 8012b72:	ee18 1a10 	vmov	r1, s16
 8012b76:	f000 fe67 	bl	8013848 <_Bfree>
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	9800      	ldr	r0, [sp, #0]
 8012b7e:	702b      	strb	r3, [r5, #0]
 8012b80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b82:	3001      	adds	r0, #1
 8012b84:	6018      	str	r0, [r3, #0]
 8012b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	f43f acf1 	beq.w	8012570 <_dtoa_r+0xa0>
 8012b8e:	601d      	str	r5, [r3, #0]
 8012b90:	e4ee      	b.n	8012570 <_dtoa_r+0xa0>
 8012b92:	9f00      	ldr	r7, [sp, #0]
 8012b94:	462b      	mov	r3, r5
 8012b96:	461d      	mov	r5, r3
 8012b98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b9c:	2a39      	cmp	r2, #57	; 0x39
 8012b9e:	d106      	bne.n	8012bae <_dtoa_r+0x6de>
 8012ba0:	9a01      	ldr	r2, [sp, #4]
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	d1f7      	bne.n	8012b96 <_dtoa_r+0x6c6>
 8012ba6:	9901      	ldr	r1, [sp, #4]
 8012ba8:	2230      	movs	r2, #48	; 0x30
 8012baa:	3701      	adds	r7, #1
 8012bac:	700a      	strb	r2, [r1, #0]
 8012bae:	781a      	ldrb	r2, [r3, #0]
 8012bb0:	3201      	adds	r2, #1
 8012bb2:	701a      	strb	r2, [r3, #0]
 8012bb4:	e790      	b.n	8012ad8 <_dtoa_r+0x608>
 8012bb6:	4ba6      	ldr	r3, [pc, #664]	; (8012e50 <_dtoa_r+0x980>)
 8012bb8:	2200      	movs	r2, #0
 8012bba:	f7ed fd35 	bl	8000628 <__aeabi_dmul>
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	4606      	mov	r6, r0
 8012bc4:	460f      	mov	r7, r1
 8012bc6:	f7ed ff97 	bl	8000af8 <__aeabi_dcmpeq>
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	d09d      	beq.n	8012b0a <_dtoa_r+0x63a>
 8012bce:	e7cf      	b.n	8012b70 <_dtoa_r+0x6a0>
 8012bd0:	9a08      	ldr	r2, [sp, #32]
 8012bd2:	2a00      	cmp	r2, #0
 8012bd4:	f000 80d7 	beq.w	8012d86 <_dtoa_r+0x8b6>
 8012bd8:	9a06      	ldr	r2, [sp, #24]
 8012bda:	2a01      	cmp	r2, #1
 8012bdc:	f300 80ba 	bgt.w	8012d54 <_dtoa_r+0x884>
 8012be0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012be2:	2a00      	cmp	r2, #0
 8012be4:	f000 80b2 	beq.w	8012d4c <_dtoa_r+0x87c>
 8012be8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012bec:	9e07      	ldr	r6, [sp, #28]
 8012bee:	9d04      	ldr	r5, [sp, #16]
 8012bf0:	9a04      	ldr	r2, [sp, #16]
 8012bf2:	441a      	add	r2, r3
 8012bf4:	9204      	str	r2, [sp, #16]
 8012bf6:	9a05      	ldr	r2, [sp, #20]
 8012bf8:	2101      	movs	r1, #1
 8012bfa:	441a      	add	r2, r3
 8012bfc:	4620      	mov	r0, r4
 8012bfe:	9205      	str	r2, [sp, #20]
 8012c00:	f000 ff24 	bl	8013a4c <__i2b>
 8012c04:	4607      	mov	r7, r0
 8012c06:	2d00      	cmp	r5, #0
 8012c08:	dd0c      	ble.n	8012c24 <_dtoa_r+0x754>
 8012c0a:	9b05      	ldr	r3, [sp, #20]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	dd09      	ble.n	8012c24 <_dtoa_r+0x754>
 8012c10:	42ab      	cmp	r3, r5
 8012c12:	9a04      	ldr	r2, [sp, #16]
 8012c14:	bfa8      	it	ge
 8012c16:	462b      	movge	r3, r5
 8012c18:	1ad2      	subs	r2, r2, r3
 8012c1a:	9204      	str	r2, [sp, #16]
 8012c1c:	9a05      	ldr	r2, [sp, #20]
 8012c1e:	1aed      	subs	r5, r5, r3
 8012c20:	1ad3      	subs	r3, r2, r3
 8012c22:	9305      	str	r3, [sp, #20]
 8012c24:	9b07      	ldr	r3, [sp, #28]
 8012c26:	b31b      	cbz	r3, 8012c70 <_dtoa_r+0x7a0>
 8012c28:	9b08      	ldr	r3, [sp, #32]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	f000 80af 	beq.w	8012d8e <_dtoa_r+0x8be>
 8012c30:	2e00      	cmp	r6, #0
 8012c32:	dd13      	ble.n	8012c5c <_dtoa_r+0x78c>
 8012c34:	4639      	mov	r1, r7
 8012c36:	4632      	mov	r2, r6
 8012c38:	4620      	mov	r0, r4
 8012c3a:	f000 ffc7 	bl	8013bcc <__pow5mult>
 8012c3e:	ee18 2a10 	vmov	r2, s16
 8012c42:	4601      	mov	r1, r0
 8012c44:	4607      	mov	r7, r0
 8012c46:	4620      	mov	r0, r4
 8012c48:	f000 ff16 	bl	8013a78 <__multiply>
 8012c4c:	ee18 1a10 	vmov	r1, s16
 8012c50:	4680      	mov	r8, r0
 8012c52:	4620      	mov	r0, r4
 8012c54:	f000 fdf8 	bl	8013848 <_Bfree>
 8012c58:	ee08 8a10 	vmov	s16, r8
 8012c5c:	9b07      	ldr	r3, [sp, #28]
 8012c5e:	1b9a      	subs	r2, r3, r6
 8012c60:	d006      	beq.n	8012c70 <_dtoa_r+0x7a0>
 8012c62:	ee18 1a10 	vmov	r1, s16
 8012c66:	4620      	mov	r0, r4
 8012c68:	f000 ffb0 	bl	8013bcc <__pow5mult>
 8012c6c:	ee08 0a10 	vmov	s16, r0
 8012c70:	2101      	movs	r1, #1
 8012c72:	4620      	mov	r0, r4
 8012c74:	f000 feea 	bl	8013a4c <__i2b>
 8012c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	4606      	mov	r6, r0
 8012c7e:	f340 8088 	ble.w	8012d92 <_dtoa_r+0x8c2>
 8012c82:	461a      	mov	r2, r3
 8012c84:	4601      	mov	r1, r0
 8012c86:	4620      	mov	r0, r4
 8012c88:	f000 ffa0 	bl	8013bcc <__pow5mult>
 8012c8c:	9b06      	ldr	r3, [sp, #24]
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	4606      	mov	r6, r0
 8012c92:	f340 8081 	ble.w	8012d98 <_dtoa_r+0x8c8>
 8012c96:	f04f 0800 	mov.w	r8, #0
 8012c9a:	6933      	ldr	r3, [r6, #16]
 8012c9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012ca0:	6918      	ldr	r0, [r3, #16]
 8012ca2:	f000 fe83 	bl	80139ac <__hi0bits>
 8012ca6:	f1c0 0020 	rsb	r0, r0, #32
 8012caa:	9b05      	ldr	r3, [sp, #20]
 8012cac:	4418      	add	r0, r3
 8012cae:	f010 001f 	ands.w	r0, r0, #31
 8012cb2:	f000 8092 	beq.w	8012dda <_dtoa_r+0x90a>
 8012cb6:	f1c0 0320 	rsb	r3, r0, #32
 8012cba:	2b04      	cmp	r3, #4
 8012cbc:	f340 808a 	ble.w	8012dd4 <_dtoa_r+0x904>
 8012cc0:	f1c0 001c 	rsb	r0, r0, #28
 8012cc4:	9b04      	ldr	r3, [sp, #16]
 8012cc6:	4403      	add	r3, r0
 8012cc8:	9304      	str	r3, [sp, #16]
 8012cca:	9b05      	ldr	r3, [sp, #20]
 8012ccc:	4403      	add	r3, r0
 8012cce:	4405      	add	r5, r0
 8012cd0:	9305      	str	r3, [sp, #20]
 8012cd2:	9b04      	ldr	r3, [sp, #16]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	dd07      	ble.n	8012ce8 <_dtoa_r+0x818>
 8012cd8:	ee18 1a10 	vmov	r1, s16
 8012cdc:	461a      	mov	r2, r3
 8012cde:	4620      	mov	r0, r4
 8012ce0:	f000 ffce 	bl	8013c80 <__lshift>
 8012ce4:	ee08 0a10 	vmov	s16, r0
 8012ce8:	9b05      	ldr	r3, [sp, #20]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	dd05      	ble.n	8012cfa <_dtoa_r+0x82a>
 8012cee:	4631      	mov	r1, r6
 8012cf0:	461a      	mov	r2, r3
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	f000 ffc4 	bl	8013c80 <__lshift>
 8012cf8:	4606      	mov	r6, r0
 8012cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d06e      	beq.n	8012dde <_dtoa_r+0x90e>
 8012d00:	ee18 0a10 	vmov	r0, s16
 8012d04:	4631      	mov	r1, r6
 8012d06:	f001 f82b 	bl	8013d60 <__mcmp>
 8012d0a:	2800      	cmp	r0, #0
 8012d0c:	da67      	bge.n	8012dde <_dtoa_r+0x90e>
 8012d0e:	9b00      	ldr	r3, [sp, #0]
 8012d10:	3b01      	subs	r3, #1
 8012d12:	ee18 1a10 	vmov	r1, s16
 8012d16:	9300      	str	r3, [sp, #0]
 8012d18:	220a      	movs	r2, #10
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f000 fdb5 	bl	801388c <__multadd>
 8012d22:	9b08      	ldr	r3, [sp, #32]
 8012d24:	ee08 0a10 	vmov	s16, r0
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	f000 81b1 	beq.w	8013090 <_dtoa_r+0xbc0>
 8012d2e:	2300      	movs	r3, #0
 8012d30:	4639      	mov	r1, r7
 8012d32:	220a      	movs	r2, #10
 8012d34:	4620      	mov	r0, r4
 8012d36:	f000 fda9 	bl	801388c <__multadd>
 8012d3a:	9b02      	ldr	r3, [sp, #8]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	4607      	mov	r7, r0
 8012d40:	f300 808e 	bgt.w	8012e60 <_dtoa_r+0x990>
 8012d44:	9b06      	ldr	r3, [sp, #24]
 8012d46:	2b02      	cmp	r3, #2
 8012d48:	dc51      	bgt.n	8012dee <_dtoa_r+0x91e>
 8012d4a:	e089      	b.n	8012e60 <_dtoa_r+0x990>
 8012d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012d52:	e74b      	b.n	8012bec <_dtoa_r+0x71c>
 8012d54:	9b03      	ldr	r3, [sp, #12]
 8012d56:	1e5e      	subs	r6, r3, #1
 8012d58:	9b07      	ldr	r3, [sp, #28]
 8012d5a:	42b3      	cmp	r3, r6
 8012d5c:	bfbf      	itttt	lt
 8012d5e:	9b07      	ldrlt	r3, [sp, #28]
 8012d60:	9607      	strlt	r6, [sp, #28]
 8012d62:	1af2      	sublt	r2, r6, r3
 8012d64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012d66:	bfb6      	itet	lt
 8012d68:	189b      	addlt	r3, r3, r2
 8012d6a:	1b9e      	subge	r6, r3, r6
 8012d6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012d6e:	9b03      	ldr	r3, [sp, #12]
 8012d70:	bfb8      	it	lt
 8012d72:	2600      	movlt	r6, #0
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	bfb7      	itett	lt
 8012d78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8012d7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012d80:	1a9d      	sublt	r5, r3, r2
 8012d82:	2300      	movlt	r3, #0
 8012d84:	e734      	b.n	8012bf0 <_dtoa_r+0x720>
 8012d86:	9e07      	ldr	r6, [sp, #28]
 8012d88:	9d04      	ldr	r5, [sp, #16]
 8012d8a:	9f08      	ldr	r7, [sp, #32]
 8012d8c:	e73b      	b.n	8012c06 <_dtoa_r+0x736>
 8012d8e:	9a07      	ldr	r2, [sp, #28]
 8012d90:	e767      	b.n	8012c62 <_dtoa_r+0x792>
 8012d92:	9b06      	ldr	r3, [sp, #24]
 8012d94:	2b01      	cmp	r3, #1
 8012d96:	dc18      	bgt.n	8012dca <_dtoa_r+0x8fa>
 8012d98:	f1ba 0f00 	cmp.w	sl, #0
 8012d9c:	d115      	bne.n	8012dca <_dtoa_r+0x8fa>
 8012d9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012da2:	b993      	cbnz	r3, 8012dca <_dtoa_r+0x8fa>
 8012da4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012da8:	0d1b      	lsrs	r3, r3, #20
 8012daa:	051b      	lsls	r3, r3, #20
 8012dac:	b183      	cbz	r3, 8012dd0 <_dtoa_r+0x900>
 8012dae:	9b04      	ldr	r3, [sp, #16]
 8012db0:	3301      	adds	r3, #1
 8012db2:	9304      	str	r3, [sp, #16]
 8012db4:	9b05      	ldr	r3, [sp, #20]
 8012db6:	3301      	adds	r3, #1
 8012db8:	9305      	str	r3, [sp, #20]
 8012dba:	f04f 0801 	mov.w	r8, #1
 8012dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	f47f af6a 	bne.w	8012c9a <_dtoa_r+0x7ca>
 8012dc6:	2001      	movs	r0, #1
 8012dc8:	e76f      	b.n	8012caa <_dtoa_r+0x7da>
 8012dca:	f04f 0800 	mov.w	r8, #0
 8012dce:	e7f6      	b.n	8012dbe <_dtoa_r+0x8ee>
 8012dd0:	4698      	mov	r8, r3
 8012dd2:	e7f4      	b.n	8012dbe <_dtoa_r+0x8ee>
 8012dd4:	f43f af7d 	beq.w	8012cd2 <_dtoa_r+0x802>
 8012dd8:	4618      	mov	r0, r3
 8012dda:	301c      	adds	r0, #28
 8012ddc:	e772      	b.n	8012cc4 <_dtoa_r+0x7f4>
 8012dde:	9b03      	ldr	r3, [sp, #12]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	dc37      	bgt.n	8012e54 <_dtoa_r+0x984>
 8012de4:	9b06      	ldr	r3, [sp, #24]
 8012de6:	2b02      	cmp	r3, #2
 8012de8:	dd34      	ble.n	8012e54 <_dtoa_r+0x984>
 8012dea:	9b03      	ldr	r3, [sp, #12]
 8012dec:	9302      	str	r3, [sp, #8]
 8012dee:	9b02      	ldr	r3, [sp, #8]
 8012df0:	b96b      	cbnz	r3, 8012e0e <_dtoa_r+0x93e>
 8012df2:	4631      	mov	r1, r6
 8012df4:	2205      	movs	r2, #5
 8012df6:	4620      	mov	r0, r4
 8012df8:	f000 fd48 	bl	801388c <__multadd>
 8012dfc:	4601      	mov	r1, r0
 8012dfe:	4606      	mov	r6, r0
 8012e00:	ee18 0a10 	vmov	r0, s16
 8012e04:	f000 ffac 	bl	8013d60 <__mcmp>
 8012e08:	2800      	cmp	r0, #0
 8012e0a:	f73f adbb 	bgt.w	8012984 <_dtoa_r+0x4b4>
 8012e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e10:	9d01      	ldr	r5, [sp, #4]
 8012e12:	43db      	mvns	r3, r3
 8012e14:	9300      	str	r3, [sp, #0]
 8012e16:	f04f 0800 	mov.w	r8, #0
 8012e1a:	4631      	mov	r1, r6
 8012e1c:	4620      	mov	r0, r4
 8012e1e:	f000 fd13 	bl	8013848 <_Bfree>
 8012e22:	2f00      	cmp	r7, #0
 8012e24:	f43f aea4 	beq.w	8012b70 <_dtoa_r+0x6a0>
 8012e28:	f1b8 0f00 	cmp.w	r8, #0
 8012e2c:	d005      	beq.n	8012e3a <_dtoa_r+0x96a>
 8012e2e:	45b8      	cmp	r8, r7
 8012e30:	d003      	beq.n	8012e3a <_dtoa_r+0x96a>
 8012e32:	4641      	mov	r1, r8
 8012e34:	4620      	mov	r0, r4
 8012e36:	f000 fd07 	bl	8013848 <_Bfree>
 8012e3a:	4639      	mov	r1, r7
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	f000 fd03 	bl	8013848 <_Bfree>
 8012e42:	e695      	b.n	8012b70 <_dtoa_r+0x6a0>
 8012e44:	2600      	movs	r6, #0
 8012e46:	4637      	mov	r7, r6
 8012e48:	e7e1      	b.n	8012e0e <_dtoa_r+0x93e>
 8012e4a:	9700      	str	r7, [sp, #0]
 8012e4c:	4637      	mov	r7, r6
 8012e4e:	e599      	b.n	8012984 <_dtoa_r+0x4b4>
 8012e50:	40240000 	.word	0x40240000
 8012e54:	9b08      	ldr	r3, [sp, #32]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	f000 80ca 	beq.w	8012ff0 <_dtoa_r+0xb20>
 8012e5c:	9b03      	ldr	r3, [sp, #12]
 8012e5e:	9302      	str	r3, [sp, #8]
 8012e60:	2d00      	cmp	r5, #0
 8012e62:	dd05      	ble.n	8012e70 <_dtoa_r+0x9a0>
 8012e64:	4639      	mov	r1, r7
 8012e66:	462a      	mov	r2, r5
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f000 ff09 	bl	8013c80 <__lshift>
 8012e6e:	4607      	mov	r7, r0
 8012e70:	f1b8 0f00 	cmp.w	r8, #0
 8012e74:	d05b      	beq.n	8012f2e <_dtoa_r+0xa5e>
 8012e76:	6879      	ldr	r1, [r7, #4]
 8012e78:	4620      	mov	r0, r4
 8012e7a:	f000 fca5 	bl	80137c8 <_Balloc>
 8012e7e:	4605      	mov	r5, r0
 8012e80:	b928      	cbnz	r0, 8012e8e <_dtoa_r+0x9be>
 8012e82:	4b87      	ldr	r3, [pc, #540]	; (80130a0 <_dtoa_r+0xbd0>)
 8012e84:	4602      	mov	r2, r0
 8012e86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012e8a:	f7ff bb3b 	b.w	8012504 <_dtoa_r+0x34>
 8012e8e:	693a      	ldr	r2, [r7, #16]
 8012e90:	3202      	adds	r2, #2
 8012e92:	0092      	lsls	r2, r2, #2
 8012e94:	f107 010c 	add.w	r1, r7, #12
 8012e98:	300c      	adds	r0, #12
 8012e9a:	f7fd fd29 	bl	80108f0 <memcpy>
 8012e9e:	2201      	movs	r2, #1
 8012ea0:	4629      	mov	r1, r5
 8012ea2:	4620      	mov	r0, r4
 8012ea4:	f000 feec 	bl	8013c80 <__lshift>
 8012ea8:	9b01      	ldr	r3, [sp, #4]
 8012eaa:	f103 0901 	add.w	r9, r3, #1
 8012eae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012eb2:	4413      	add	r3, r2
 8012eb4:	9305      	str	r3, [sp, #20]
 8012eb6:	f00a 0301 	and.w	r3, sl, #1
 8012eba:	46b8      	mov	r8, r7
 8012ebc:	9304      	str	r3, [sp, #16]
 8012ebe:	4607      	mov	r7, r0
 8012ec0:	4631      	mov	r1, r6
 8012ec2:	ee18 0a10 	vmov	r0, s16
 8012ec6:	f7ff fa77 	bl	80123b8 <quorem>
 8012eca:	4641      	mov	r1, r8
 8012ecc:	9002      	str	r0, [sp, #8]
 8012ece:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012ed2:	ee18 0a10 	vmov	r0, s16
 8012ed6:	f000 ff43 	bl	8013d60 <__mcmp>
 8012eda:	463a      	mov	r2, r7
 8012edc:	9003      	str	r0, [sp, #12]
 8012ede:	4631      	mov	r1, r6
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	f000 ff59 	bl	8013d98 <__mdiff>
 8012ee6:	68c2      	ldr	r2, [r0, #12]
 8012ee8:	f109 3bff 	add.w	fp, r9, #4294967295
 8012eec:	4605      	mov	r5, r0
 8012eee:	bb02      	cbnz	r2, 8012f32 <_dtoa_r+0xa62>
 8012ef0:	4601      	mov	r1, r0
 8012ef2:	ee18 0a10 	vmov	r0, s16
 8012ef6:	f000 ff33 	bl	8013d60 <__mcmp>
 8012efa:	4602      	mov	r2, r0
 8012efc:	4629      	mov	r1, r5
 8012efe:	4620      	mov	r0, r4
 8012f00:	9207      	str	r2, [sp, #28]
 8012f02:	f000 fca1 	bl	8013848 <_Bfree>
 8012f06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012f0a:	ea43 0102 	orr.w	r1, r3, r2
 8012f0e:	9b04      	ldr	r3, [sp, #16]
 8012f10:	430b      	orrs	r3, r1
 8012f12:	464d      	mov	r5, r9
 8012f14:	d10f      	bne.n	8012f36 <_dtoa_r+0xa66>
 8012f16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012f1a:	d02a      	beq.n	8012f72 <_dtoa_r+0xaa2>
 8012f1c:	9b03      	ldr	r3, [sp, #12]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	dd02      	ble.n	8012f28 <_dtoa_r+0xa58>
 8012f22:	9b02      	ldr	r3, [sp, #8]
 8012f24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012f28:	f88b a000 	strb.w	sl, [fp]
 8012f2c:	e775      	b.n	8012e1a <_dtoa_r+0x94a>
 8012f2e:	4638      	mov	r0, r7
 8012f30:	e7ba      	b.n	8012ea8 <_dtoa_r+0x9d8>
 8012f32:	2201      	movs	r2, #1
 8012f34:	e7e2      	b.n	8012efc <_dtoa_r+0xa2c>
 8012f36:	9b03      	ldr	r3, [sp, #12]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	db04      	blt.n	8012f46 <_dtoa_r+0xa76>
 8012f3c:	9906      	ldr	r1, [sp, #24]
 8012f3e:	430b      	orrs	r3, r1
 8012f40:	9904      	ldr	r1, [sp, #16]
 8012f42:	430b      	orrs	r3, r1
 8012f44:	d122      	bne.n	8012f8c <_dtoa_r+0xabc>
 8012f46:	2a00      	cmp	r2, #0
 8012f48:	ddee      	ble.n	8012f28 <_dtoa_r+0xa58>
 8012f4a:	ee18 1a10 	vmov	r1, s16
 8012f4e:	2201      	movs	r2, #1
 8012f50:	4620      	mov	r0, r4
 8012f52:	f000 fe95 	bl	8013c80 <__lshift>
 8012f56:	4631      	mov	r1, r6
 8012f58:	ee08 0a10 	vmov	s16, r0
 8012f5c:	f000 ff00 	bl	8013d60 <__mcmp>
 8012f60:	2800      	cmp	r0, #0
 8012f62:	dc03      	bgt.n	8012f6c <_dtoa_r+0xa9c>
 8012f64:	d1e0      	bne.n	8012f28 <_dtoa_r+0xa58>
 8012f66:	f01a 0f01 	tst.w	sl, #1
 8012f6a:	d0dd      	beq.n	8012f28 <_dtoa_r+0xa58>
 8012f6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012f70:	d1d7      	bne.n	8012f22 <_dtoa_r+0xa52>
 8012f72:	2339      	movs	r3, #57	; 0x39
 8012f74:	f88b 3000 	strb.w	r3, [fp]
 8012f78:	462b      	mov	r3, r5
 8012f7a:	461d      	mov	r5, r3
 8012f7c:	3b01      	subs	r3, #1
 8012f7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012f82:	2a39      	cmp	r2, #57	; 0x39
 8012f84:	d071      	beq.n	801306a <_dtoa_r+0xb9a>
 8012f86:	3201      	adds	r2, #1
 8012f88:	701a      	strb	r2, [r3, #0]
 8012f8a:	e746      	b.n	8012e1a <_dtoa_r+0x94a>
 8012f8c:	2a00      	cmp	r2, #0
 8012f8e:	dd07      	ble.n	8012fa0 <_dtoa_r+0xad0>
 8012f90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012f94:	d0ed      	beq.n	8012f72 <_dtoa_r+0xaa2>
 8012f96:	f10a 0301 	add.w	r3, sl, #1
 8012f9a:	f88b 3000 	strb.w	r3, [fp]
 8012f9e:	e73c      	b.n	8012e1a <_dtoa_r+0x94a>
 8012fa0:	9b05      	ldr	r3, [sp, #20]
 8012fa2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012fa6:	4599      	cmp	r9, r3
 8012fa8:	d047      	beq.n	801303a <_dtoa_r+0xb6a>
 8012faa:	ee18 1a10 	vmov	r1, s16
 8012fae:	2300      	movs	r3, #0
 8012fb0:	220a      	movs	r2, #10
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	f000 fc6a 	bl	801388c <__multadd>
 8012fb8:	45b8      	cmp	r8, r7
 8012fba:	ee08 0a10 	vmov	s16, r0
 8012fbe:	f04f 0300 	mov.w	r3, #0
 8012fc2:	f04f 020a 	mov.w	r2, #10
 8012fc6:	4641      	mov	r1, r8
 8012fc8:	4620      	mov	r0, r4
 8012fca:	d106      	bne.n	8012fda <_dtoa_r+0xb0a>
 8012fcc:	f000 fc5e 	bl	801388c <__multadd>
 8012fd0:	4680      	mov	r8, r0
 8012fd2:	4607      	mov	r7, r0
 8012fd4:	f109 0901 	add.w	r9, r9, #1
 8012fd8:	e772      	b.n	8012ec0 <_dtoa_r+0x9f0>
 8012fda:	f000 fc57 	bl	801388c <__multadd>
 8012fde:	4639      	mov	r1, r7
 8012fe0:	4680      	mov	r8, r0
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	220a      	movs	r2, #10
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	f000 fc50 	bl	801388c <__multadd>
 8012fec:	4607      	mov	r7, r0
 8012fee:	e7f1      	b.n	8012fd4 <_dtoa_r+0xb04>
 8012ff0:	9b03      	ldr	r3, [sp, #12]
 8012ff2:	9302      	str	r3, [sp, #8]
 8012ff4:	9d01      	ldr	r5, [sp, #4]
 8012ff6:	ee18 0a10 	vmov	r0, s16
 8012ffa:	4631      	mov	r1, r6
 8012ffc:	f7ff f9dc 	bl	80123b8 <quorem>
 8013000:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013004:	9b01      	ldr	r3, [sp, #4]
 8013006:	f805 ab01 	strb.w	sl, [r5], #1
 801300a:	1aea      	subs	r2, r5, r3
 801300c:	9b02      	ldr	r3, [sp, #8]
 801300e:	4293      	cmp	r3, r2
 8013010:	dd09      	ble.n	8013026 <_dtoa_r+0xb56>
 8013012:	ee18 1a10 	vmov	r1, s16
 8013016:	2300      	movs	r3, #0
 8013018:	220a      	movs	r2, #10
 801301a:	4620      	mov	r0, r4
 801301c:	f000 fc36 	bl	801388c <__multadd>
 8013020:	ee08 0a10 	vmov	s16, r0
 8013024:	e7e7      	b.n	8012ff6 <_dtoa_r+0xb26>
 8013026:	9b02      	ldr	r3, [sp, #8]
 8013028:	2b00      	cmp	r3, #0
 801302a:	bfc8      	it	gt
 801302c:	461d      	movgt	r5, r3
 801302e:	9b01      	ldr	r3, [sp, #4]
 8013030:	bfd8      	it	le
 8013032:	2501      	movle	r5, #1
 8013034:	441d      	add	r5, r3
 8013036:	f04f 0800 	mov.w	r8, #0
 801303a:	ee18 1a10 	vmov	r1, s16
 801303e:	2201      	movs	r2, #1
 8013040:	4620      	mov	r0, r4
 8013042:	f000 fe1d 	bl	8013c80 <__lshift>
 8013046:	4631      	mov	r1, r6
 8013048:	ee08 0a10 	vmov	s16, r0
 801304c:	f000 fe88 	bl	8013d60 <__mcmp>
 8013050:	2800      	cmp	r0, #0
 8013052:	dc91      	bgt.n	8012f78 <_dtoa_r+0xaa8>
 8013054:	d102      	bne.n	801305c <_dtoa_r+0xb8c>
 8013056:	f01a 0f01 	tst.w	sl, #1
 801305a:	d18d      	bne.n	8012f78 <_dtoa_r+0xaa8>
 801305c:	462b      	mov	r3, r5
 801305e:	461d      	mov	r5, r3
 8013060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013064:	2a30      	cmp	r2, #48	; 0x30
 8013066:	d0fa      	beq.n	801305e <_dtoa_r+0xb8e>
 8013068:	e6d7      	b.n	8012e1a <_dtoa_r+0x94a>
 801306a:	9a01      	ldr	r2, [sp, #4]
 801306c:	429a      	cmp	r2, r3
 801306e:	d184      	bne.n	8012f7a <_dtoa_r+0xaaa>
 8013070:	9b00      	ldr	r3, [sp, #0]
 8013072:	3301      	adds	r3, #1
 8013074:	9300      	str	r3, [sp, #0]
 8013076:	2331      	movs	r3, #49	; 0x31
 8013078:	7013      	strb	r3, [r2, #0]
 801307a:	e6ce      	b.n	8012e1a <_dtoa_r+0x94a>
 801307c:	4b09      	ldr	r3, [pc, #36]	; (80130a4 <_dtoa_r+0xbd4>)
 801307e:	f7ff ba95 	b.w	80125ac <_dtoa_r+0xdc>
 8013082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013084:	2b00      	cmp	r3, #0
 8013086:	f47f aa6e 	bne.w	8012566 <_dtoa_r+0x96>
 801308a:	4b07      	ldr	r3, [pc, #28]	; (80130a8 <_dtoa_r+0xbd8>)
 801308c:	f7ff ba8e 	b.w	80125ac <_dtoa_r+0xdc>
 8013090:	9b02      	ldr	r3, [sp, #8]
 8013092:	2b00      	cmp	r3, #0
 8013094:	dcae      	bgt.n	8012ff4 <_dtoa_r+0xb24>
 8013096:	9b06      	ldr	r3, [sp, #24]
 8013098:	2b02      	cmp	r3, #2
 801309a:	f73f aea8 	bgt.w	8012dee <_dtoa_r+0x91e>
 801309e:	e7a9      	b.n	8012ff4 <_dtoa_r+0xb24>
 80130a0:	08015b38 	.word	0x08015b38
 80130a4:	0801593c 	.word	0x0801593c
 80130a8:	08015ab9 	.word	0x08015ab9

080130ac <rshift>:
 80130ac:	6903      	ldr	r3, [r0, #16]
 80130ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80130b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80130ba:	f100 0414 	add.w	r4, r0, #20
 80130be:	dd45      	ble.n	801314c <rshift+0xa0>
 80130c0:	f011 011f 	ands.w	r1, r1, #31
 80130c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80130c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80130cc:	d10c      	bne.n	80130e8 <rshift+0x3c>
 80130ce:	f100 0710 	add.w	r7, r0, #16
 80130d2:	4629      	mov	r1, r5
 80130d4:	42b1      	cmp	r1, r6
 80130d6:	d334      	bcc.n	8013142 <rshift+0x96>
 80130d8:	1a9b      	subs	r3, r3, r2
 80130da:	009b      	lsls	r3, r3, #2
 80130dc:	1eea      	subs	r2, r5, #3
 80130de:	4296      	cmp	r6, r2
 80130e0:	bf38      	it	cc
 80130e2:	2300      	movcc	r3, #0
 80130e4:	4423      	add	r3, r4
 80130e6:	e015      	b.n	8013114 <rshift+0x68>
 80130e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80130ec:	f1c1 0820 	rsb	r8, r1, #32
 80130f0:	40cf      	lsrs	r7, r1
 80130f2:	f105 0e04 	add.w	lr, r5, #4
 80130f6:	46a1      	mov	r9, r4
 80130f8:	4576      	cmp	r6, lr
 80130fa:	46f4      	mov	ip, lr
 80130fc:	d815      	bhi.n	801312a <rshift+0x7e>
 80130fe:	1a9a      	subs	r2, r3, r2
 8013100:	0092      	lsls	r2, r2, #2
 8013102:	3a04      	subs	r2, #4
 8013104:	3501      	adds	r5, #1
 8013106:	42ae      	cmp	r6, r5
 8013108:	bf38      	it	cc
 801310a:	2200      	movcc	r2, #0
 801310c:	18a3      	adds	r3, r4, r2
 801310e:	50a7      	str	r7, [r4, r2]
 8013110:	b107      	cbz	r7, 8013114 <rshift+0x68>
 8013112:	3304      	adds	r3, #4
 8013114:	1b1a      	subs	r2, r3, r4
 8013116:	42a3      	cmp	r3, r4
 8013118:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801311c:	bf08      	it	eq
 801311e:	2300      	moveq	r3, #0
 8013120:	6102      	str	r2, [r0, #16]
 8013122:	bf08      	it	eq
 8013124:	6143      	streq	r3, [r0, #20]
 8013126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801312a:	f8dc c000 	ldr.w	ip, [ip]
 801312e:	fa0c fc08 	lsl.w	ip, ip, r8
 8013132:	ea4c 0707 	orr.w	r7, ip, r7
 8013136:	f849 7b04 	str.w	r7, [r9], #4
 801313a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801313e:	40cf      	lsrs	r7, r1
 8013140:	e7da      	b.n	80130f8 <rshift+0x4c>
 8013142:	f851 cb04 	ldr.w	ip, [r1], #4
 8013146:	f847 cf04 	str.w	ip, [r7, #4]!
 801314a:	e7c3      	b.n	80130d4 <rshift+0x28>
 801314c:	4623      	mov	r3, r4
 801314e:	e7e1      	b.n	8013114 <rshift+0x68>

08013150 <__hexdig_fun>:
 8013150:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013154:	2b09      	cmp	r3, #9
 8013156:	d802      	bhi.n	801315e <__hexdig_fun+0xe>
 8013158:	3820      	subs	r0, #32
 801315a:	b2c0      	uxtb	r0, r0
 801315c:	4770      	bx	lr
 801315e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013162:	2b05      	cmp	r3, #5
 8013164:	d801      	bhi.n	801316a <__hexdig_fun+0x1a>
 8013166:	3847      	subs	r0, #71	; 0x47
 8013168:	e7f7      	b.n	801315a <__hexdig_fun+0xa>
 801316a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801316e:	2b05      	cmp	r3, #5
 8013170:	d801      	bhi.n	8013176 <__hexdig_fun+0x26>
 8013172:	3827      	subs	r0, #39	; 0x27
 8013174:	e7f1      	b.n	801315a <__hexdig_fun+0xa>
 8013176:	2000      	movs	r0, #0
 8013178:	4770      	bx	lr
	...

0801317c <__gethex>:
 801317c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013180:	ed2d 8b02 	vpush	{d8}
 8013184:	b089      	sub	sp, #36	; 0x24
 8013186:	ee08 0a10 	vmov	s16, r0
 801318a:	9304      	str	r3, [sp, #16]
 801318c:	4bb4      	ldr	r3, [pc, #720]	; (8013460 <__gethex+0x2e4>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	9301      	str	r3, [sp, #4]
 8013192:	4618      	mov	r0, r3
 8013194:	468b      	mov	fp, r1
 8013196:	4690      	mov	r8, r2
 8013198:	f7ed f832 	bl	8000200 <strlen>
 801319c:	9b01      	ldr	r3, [sp, #4]
 801319e:	f8db 2000 	ldr.w	r2, [fp]
 80131a2:	4403      	add	r3, r0
 80131a4:	4682      	mov	sl, r0
 80131a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80131aa:	9305      	str	r3, [sp, #20]
 80131ac:	1c93      	adds	r3, r2, #2
 80131ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80131b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80131b6:	32fe      	adds	r2, #254	; 0xfe
 80131b8:	18d1      	adds	r1, r2, r3
 80131ba:	461f      	mov	r7, r3
 80131bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80131c0:	9100      	str	r1, [sp, #0]
 80131c2:	2830      	cmp	r0, #48	; 0x30
 80131c4:	d0f8      	beq.n	80131b8 <__gethex+0x3c>
 80131c6:	f7ff ffc3 	bl	8013150 <__hexdig_fun>
 80131ca:	4604      	mov	r4, r0
 80131cc:	2800      	cmp	r0, #0
 80131ce:	d13a      	bne.n	8013246 <__gethex+0xca>
 80131d0:	9901      	ldr	r1, [sp, #4]
 80131d2:	4652      	mov	r2, sl
 80131d4:	4638      	mov	r0, r7
 80131d6:	f001 fa23 	bl	8014620 <strncmp>
 80131da:	4605      	mov	r5, r0
 80131dc:	2800      	cmp	r0, #0
 80131de:	d168      	bne.n	80132b2 <__gethex+0x136>
 80131e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80131e4:	eb07 060a 	add.w	r6, r7, sl
 80131e8:	f7ff ffb2 	bl	8013150 <__hexdig_fun>
 80131ec:	2800      	cmp	r0, #0
 80131ee:	d062      	beq.n	80132b6 <__gethex+0x13a>
 80131f0:	4633      	mov	r3, r6
 80131f2:	7818      	ldrb	r0, [r3, #0]
 80131f4:	2830      	cmp	r0, #48	; 0x30
 80131f6:	461f      	mov	r7, r3
 80131f8:	f103 0301 	add.w	r3, r3, #1
 80131fc:	d0f9      	beq.n	80131f2 <__gethex+0x76>
 80131fe:	f7ff ffa7 	bl	8013150 <__hexdig_fun>
 8013202:	2301      	movs	r3, #1
 8013204:	fab0 f480 	clz	r4, r0
 8013208:	0964      	lsrs	r4, r4, #5
 801320a:	4635      	mov	r5, r6
 801320c:	9300      	str	r3, [sp, #0]
 801320e:	463a      	mov	r2, r7
 8013210:	4616      	mov	r6, r2
 8013212:	3201      	adds	r2, #1
 8013214:	7830      	ldrb	r0, [r6, #0]
 8013216:	f7ff ff9b 	bl	8013150 <__hexdig_fun>
 801321a:	2800      	cmp	r0, #0
 801321c:	d1f8      	bne.n	8013210 <__gethex+0x94>
 801321e:	9901      	ldr	r1, [sp, #4]
 8013220:	4652      	mov	r2, sl
 8013222:	4630      	mov	r0, r6
 8013224:	f001 f9fc 	bl	8014620 <strncmp>
 8013228:	b980      	cbnz	r0, 801324c <__gethex+0xd0>
 801322a:	b94d      	cbnz	r5, 8013240 <__gethex+0xc4>
 801322c:	eb06 050a 	add.w	r5, r6, sl
 8013230:	462a      	mov	r2, r5
 8013232:	4616      	mov	r6, r2
 8013234:	3201      	adds	r2, #1
 8013236:	7830      	ldrb	r0, [r6, #0]
 8013238:	f7ff ff8a 	bl	8013150 <__hexdig_fun>
 801323c:	2800      	cmp	r0, #0
 801323e:	d1f8      	bne.n	8013232 <__gethex+0xb6>
 8013240:	1bad      	subs	r5, r5, r6
 8013242:	00ad      	lsls	r5, r5, #2
 8013244:	e004      	b.n	8013250 <__gethex+0xd4>
 8013246:	2400      	movs	r4, #0
 8013248:	4625      	mov	r5, r4
 801324a:	e7e0      	b.n	801320e <__gethex+0x92>
 801324c:	2d00      	cmp	r5, #0
 801324e:	d1f7      	bne.n	8013240 <__gethex+0xc4>
 8013250:	7833      	ldrb	r3, [r6, #0]
 8013252:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013256:	2b50      	cmp	r3, #80	; 0x50
 8013258:	d13b      	bne.n	80132d2 <__gethex+0x156>
 801325a:	7873      	ldrb	r3, [r6, #1]
 801325c:	2b2b      	cmp	r3, #43	; 0x2b
 801325e:	d02c      	beq.n	80132ba <__gethex+0x13e>
 8013260:	2b2d      	cmp	r3, #45	; 0x2d
 8013262:	d02e      	beq.n	80132c2 <__gethex+0x146>
 8013264:	1c71      	adds	r1, r6, #1
 8013266:	f04f 0900 	mov.w	r9, #0
 801326a:	7808      	ldrb	r0, [r1, #0]
 801326c:	f7ff ff70 	bl	8013150 <__hexdig_fun>
 8013270:	1e43      	subs	r3, r0, #1
 8013272:	b2db      	uxtb	r3, r3
 8013274:	2b18      	cmp	r3, #24
 8013276:	d82c      	bhi.n	80132d2 <__gethex+0x156>
 8013278:	f1a0 0210 	sub.w	r2, r0, #16
 801327c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013280:	f7ff ff66 	bl	8013150 <__hexdig_fun>
 8013284:	1e43      	subs	r3, r0, #1
 8013286:	b2db      	uxtb	r3, r3
 8013288:	2b18      	cmp	r3, #24
 801328a:	d91d      	bls.n	80132c8 <__gethex+0x14c>
 801328c:	f1b9 0f00 	cmp.w	r9, #0
 8013290:	d000      	beq.n	8013294 <__gethex+0x118>
 8013292:	4252      	negs	r2, r2
 8013294:	4415      	add	r5, r2
 8013296:	f8cb 1000 	str.w	r1, [fp]
 801329a:	b1e4      	cbz	r4, 80132d6 <__gethex+0x15a>
 801329c:	9b00      	ldr	r3, [sp, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	bf14      	ite	ne
 80132a2:	2700      	movne	r7, #0
 80132a4:	2706      	moveq	r7, #6
 80132a6:	4638      	mov	r0, r7
 80132a8:	b009      	add	sp, #36	; 0x24
 80132aa:	ecbd 8b02 	vpop	{d8}
 80132ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132b2:	463e      	mov	r6, r7
 80132b4:	4625      	mov	r5, r4
 80132b6:	2401      	movs	r4, #1
 80132b8:	e7ca      	b.n	8013250 <__gethex+0xd4>
 80132ba:	f04f 0900 	mov.w	r9, #0
 80132be:	1cb1      	adds	r1, r6, #2
 80132c0:	e7d3      	b.n	801326a <__gethex+0xee>
 80132c2:	f04f 0901 	mov.w	r9, #1
 80132c6:	e7fa      	b.n	80132be <__gethex+0x142>
 80132c8:	230a      	movs	r3, #10
 80132ca:	fb03 0202 	mla	r2, r3, r2, r0
 80132ce:	3a10      	subs	r2, #16
 80132d0:	e7d4      	b.n	801327c <__gethex+0x100>
 80132d2:	4631      	mov	r1, r6
 80132d4:	e7df      	b.n	8013296 <__gethex+0x11a>
 80132d6:	1bf3      	subs	r3, r6, r7
 80132d8:	3b01      	subs	r3, #1
 80132da:	4621      	mov	r1, r4
 80132dc:	2b07      	cmp	r3, #7
 80132de:	dc0b      	bgt.n	80132f8 <__gethex+0x17c>
 80132e0:	ee18 0a10 	vmov	r0, s16
 80132e4:	f000 fa70 	bl	80137c8 <_Balloc>
 80132e8:	4604      	mov	r4, r0
 80132ea:	b940      	cbnz	r0, 80132fe <__gethex+0x182>
 80132ec:	4b5d      	ldr	r3, [pc, #372]	; (8013464 <__gethex+0x2e8>)
 80132ee:	4602      	mov	r2, r0
 80132f0:	21de      	movs	r1, #222	; 0xde
 80132f2:	485d      	ldr	r0, [pc, #372]	; (8013468 <__gethex+0x2ec>)
 80132f4:	f001 f9b6 	bl	8014664 <__assert_func>
 80132f8:	3101      	adds	r1, #1
 80132fa:	105b      	asrs	r3, r3, #1
 80132fc:	e7ee      	b.n	80132dc <__gethex+0x160>
 80132fe:	f100 0914 	add.w	r9, r0, #20
 8013302:	f04f 0b00 	mov.w	fp, #0
 8013306:	f1ca 0301 	rsb	r3, sl, #1
 801330a:	f8cd 9008 	str.w	r9, [sp, #8]
 801330e:	f8cd b000 	str.w	fp, [sp]
 8013312:	9306      	str	r3, [sp, #24]
 8013314:	42b7      	cmp	r7, r6
 8013316:	d340      	bcc.n	801339a <__gethex+0x21e>
 8013318:	9802      	ldr	r0, [sp, #8]
 801331a:	9b00      	ldr	r3, [sp, #0]
 801331c:	f840 3b04 	str.w	r3, [r0], #4
 8013320:	eba0 0009 	sub.w	r0, r0, r9
 8013324:	1080      	asrs	r0, r0, #2
 8013326:	0146      	lsls	r6, r0, #5
 8013328:	6120      	str	r0, [r4, #16]
 801332a:	4618      	mov	r0, r3
 801332c:	f000 fb3e 	bl	80139ac <__hi0bits>
 8013330:	1a30      	subs	r0, r6, r0
 8013332:	f8d8 6000 	ldr.w	r6, [r8]
 8013336:	42b0      	cmp	r0, r6
 8013338:	dd63      	ble.n	8013402 <__gethex+0x286>
 801333a:	1b87      	subs	r7, r0, r6
 801333c:	4639      	mov	r1, r7
 801333e:	4620      	mov	r0, r4
 8013340:	f000 fee2 	bl	8014108 <__any_on>
 8013344:	4682      	mov	sl, r0
 8013346:	b1a8      	cbz	r0, 8013374 <__gethex+0x1f8>
 8013348:	1e7b      	subs	r3, r7, #1
 801334a:	1159      	asrs	r1, r3, #5
 801334c:	f003 021f 	and.w	r2, r3, #31
 8013350:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013354:	f04f 0a01 	mov.w	sl, #1
 8013358:	fa0a f202 	lsl.w	r2, sl, r2
 801335c:	420a      	tst	r2, r1
 801335e:	d009      	beq.n	8013374 <__gethex+0x1f8>
 8013360:	4553      	cmp	r3, sl
 8013362:	dd05      	ble.n	8013370 <__gethex+0x1f4>
 8013364:	1eb9      	subs	r1, r7, #2
 8013366:	4620      	mov	r0, r4
 8013368:	f000 fece 	bl	8014108 <__any_on>
 801336c:	2800      	cmp	r0, #0
 801336e:	d145      	bne.n	80133fc <__gethex+0x280>
 8013370:	f04f 0a02 	mov.w	sl, #2
 8013374:	4639      	mov	r1, r7
 8013376:	4620      	mov	r0, r4
 8013378:	f7ff fe98 	bl	80130ac <rshift>
 801337c:	443d      	add	r5, r7
 801337e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013382:	42ab      	cmp	r3, r5
 8013384:	da4c      	bge.n	8013420 <__gethex+0x2a4>
 8013386:	ee18 0a10 	vmov	r0, s16
 801338a:	4621      	mov	r1, r4
 801338c:	f000 fa5c 	bl	8013848 <_Bfree>
 8013390:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013392:	2300      	movs	r3, #0
 8013394:	6013      	str	r3, [r2, #0]
 8013396:	27a3      	movs	r7, #163	; 0xa3
 8013398:	e785      	b.n	80132a6 <__gethex+0x12a>
 801339a:	1e73      	subs	r3, r6, #1
 801339c:	9a05      	ldr	r2, [sp, #20]
 801339e:	9303      	str	r3, [sp, #12]
 80133a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80133a4:	4293      	cmp	r3, r2
 80133a6:	d019      	beq.n	80133dc <__gethex+0x260>
 80133a8:	f1bb 0f20 	cmp.w	fp, #32
 80133ac:	d107      	bne.n	80133be <__gethex+0x242>
 80133ae:	9b02      	ldr	r3, [sp, #8]
 80133b0:	9a00      	ldr	r2, [sp, #0]
 80133b2:	f843 2b04 	str.w	r2, [r3], #4
 80133b6:	9302      	str	r3, [sp, #8]
 80133b8:	2300      	movs	r3, #0
 80133ba:	9300      	str	r3, [sp, #0]
 80133bc:	469b      	mov	fp, r3
 80133be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80133c2:	f7ff fec5 	bl	8013150 <__hexdig_fun>
 80133c6:	9b00      	ldr	r3, [sp, #0]
 80133c8:	f000 000f 	and.w	r0, r0, #15
 80133cc:	fa00 f00b 	lsl.w	r0, r0, fp
 80133d0:	4303      	orrs	r3, r0
 80133d2:	9300      	str	r3, [sp, #0]
 80133d4:	f10b 0b04 	add.w	fp, fp, #4
 80133d8:	9b03      	ldr	r3, [sp, #12]
 80133da:	e00d      	b.n	80133f8 <__gethex+0x27c>
 80133dc:	9b03      	ldr	r3, [sp, #12]
 80133de:	9a06      	ldr	r2, [sp, #24]
 80133e0:	4413      	add	r3, r2
 80133e2:	42bb      	cmp	r3, r7
 80133e4:	d3e0      	bcc.n	80133a8 <__gethex+0x22c>
 80133e6:	4618      	mov	r0, r3
 80133e8:	9901      	ldr	r1, [sp, #4]
 80133ea:	9307      	str	r3, [sp, #28]
 80133ec:	4652      	mov	r2, sl
 80133ee:	f001 f917 	bl	8014620 <strncmp>
 80133f2:	9b07      	ldr	r3, [sp, #28]
 80133f4:	2800      	cmp	r0, #0
 80133f6:	d1d7      	bne.n	80133a8 <__gethex+0x22c>
 80133f8:	461e      	mov	r6, r3
 80133fa:	e78b      	b.n	8013314 <__gethex+0x198>
 80133fc:	f04f 0a03 	mov.w	sl, #3
 8013400:	e7b8      	b.n	8013374 <__gethex+0x1f8>
 8013402:	da0a      	bge.n	801341a <__gethex+0x29e>
 8013404:	1a37      	subs	r7, r6, r0
 8013406:	4621      	mov	r1, r4
 8013408:	ee18 0a10 	vmov	r0, s16
 801340c:	463a      	mov	r2, r7
 801340e:	f000 fc37 	bl	8013c80 <__lshift>
 8013412:	1bed      	subs	r5, r5, r7
 8013414:	4604      	mov	r4, r0
 8013416:	f100 0914 	add.w	r9, r0, #20
 801341a:	f04f 0a00 	mov.w	sl, #0
 801341e:	e7ae      	b.n	801337e <__gethex+0x202>
 8013420:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013424:	42a8      	cmp	r0, r5
 8013426:	dd72      	ble.n	801350e <__gethex+0x392>
 8013428:	1b45      	subs	r5, r0, r5
 801342a:	42ae      	cmp	r6, r5
 801342c:	dc36      	bgt.n	801349c <__gethex+0x320>
 801342e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013432:	2b02      	cmp	r3, #2
 8013434:	d02a      	beq.n	801348c <__gethex+0x310>
 8013436:	2b03      	cmp	r3, #3
 8013438:	d02c      	beq.n	8013494 <__gethex+0x318>
 801343a:	2b01      	cmp	r3, #1
 801343c:	d11c      	bne.n	8013478 <__gethex+0x2fc>
 801343e:	42ae      	cmp	r6, r5
 8013440:	d11a      	bne.n	8013478 <__gethex+0x2fc>
 8013442:	2e01      	cmp	r6, #1
 8013444:	d112      	bne.n	801346c <__gethex+0x2f0>
 8013446:	9a04      	ldr	r2, [sp, #16]
 8013448:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801344c:	6013      	str	r3, [r2, #0]
 801344e:	2301      	movs	r3, #1
 8013450:	6123      	str	r3, [r4, #16]
 8013452:	f8c9 3000 	str.w	r3, [r9]
 8013456:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013458:	2762      	movs	r7, #98	; 0x62
 801345a:	601c      	str	r4, [r3, #0]
 801345c:	e723      	b.n	80132a6 <__gethex+0x12a>
 801345e:	bf00      	nop
 8013460:	08015bb0 	.word	0x08015bb0
 8013464:	08015b38 	.word	0x08015b38
 8013468:	08015b49 	.word	0x08015b49
 801346c:	1e71      	subs	r1, r6, #1
 801346e:	4620      	mov	r0, r4
 8013470:	f000 fe4a 	bl	8014108 <__any_on>
 8013474:	2800      	cmp	r0, #0
 8013476:	d1e6      	bne.n	8013446 <__gethex+0x2ca>
 8013478:	ee18 0a10 	vmov	r0, s16
 801347c:	4621      	mov	r1, r4
 801347e:	f000 f9e3 	bl	8013848 <_Bfree>
 8013482:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013484:	2300      	movs	r3, #0
 8013486:	6013      	str	r3, [r2, #0]
 8013488:	2750      	movs	r7, #80	; 0x50
 801348a:	e70c      	b.n	80132a6 <__gethex+0x12a>
 801348c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801348e:	2b00      	cmp	r3, #0
 8013490:	d1f2      	bne.n	8013478 <__gethex+0x2fc>
 8013492:	e7d8      	b.n	8013446 <__gethex+0x2ca>
 8013494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013496:	2b00      	cmp	r3, #0
 8013498:	d1d5      	bne.n	8013446 <__gethex+0x2ca>
 801349a:	e7ed      	b.n	8013478 <__gethex+0x2fc>
 801349c:	1e6f      	subs	r7, r5, #1
 801349e:	f1ba 0f00 	cmp.w	sl, #0
 80134a2:	d131      	bne.n	8013508 <__gethex+0x38c>
 80134a4:	b127      	cbz	r7, 80134b0 <__gethex+0x334>
 80134a6:	4639      	mov	r1, r7
 80134a8:	4620      	mov	r0, r4
 80134aa:	f000 fe2d 	bl	8014108 <__any_on>
 80134ae:	4682      	mov	sl, r0
 80134b0:	117b      	asrs	r3, r7, #5
 80134b2:	2101      	movs	r1, #1
 80134b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80134b8:	f007 071f 	and.w	r7, r7, #31
 80134bc:	fa01 f707 	lsl.w	r7, r1, r7
 80134c0:	421f      	tst	r7, r3
 80134c2:	4629      	mov	r1, r5
 80134c4:	4620      	mov	r0, r4
 80134c6:	bf18      	it	ne
 80134c8:	f04a 0a02 	orrne.w	sl, sl, #2
 80134cc:	1b76      	subs	r6, r6, r5
 80134ce:	f7ff fded 	bl	80130ac <rshift>
 80134d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80134d6:	2702      	movs	r7, #2
 80134d8:	f1ba 0f00 	cmp.w	sl, #0
 80134dc:	d048      	beq.n	8013570 <__gethex+0x3f4>
 80134de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80134e2:	2b02      	cmp	r3, #2
 80134e4:	d015      	beq.n	8013512 <__gethex+0x396>
 80134e6:	2b03      	cmp	r3, #3
 80134e8:	d017      	beq.n	801351a <__gethex+0x39e>
 80134ea:	2b01      	cmp	r3, #1
 80134ec:	d109      	bne.n	8013502 <__gethex+0x386>
 80134ee:	f01a 0f02 	tst.w	sl, #2
 80134f2:	d006      	beq.n	8013502 <__gethex+0x386>
 80134f4:	f8d9 0000 	ldr.w	r0, [r9]
 80134f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80134fc:	f01a 0f01 	tst.w	sl, #1
 8013500:	d10e      	bne.n	8013520 <__gethex+0x3a4>
 8013502:	f047 0710 	orr.w	r7, r7, #16
 8013506:	e033      	b.n	8013570 <__gethex+0x3f4>
 8013508:	f04f 0a01 	mov.w	sl, #1
 801350c:	e7d0      	b.n	80134b0 <__gethex+0x334>
 801350e:	2701      	movs	r7, #1
 8013510:	e7e2      	b.n	80134d8 <__gethex+0x35c>
 8013512:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013514:	f1c3 0301 	rsb	r3, r3, #1
 8013518:	9315      	str	r3, [sp, #84]	; 0x54
 801351a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801351c:	2b00      	cmp	r3, #0
 801351e:	d0f0      	beq.n	8013502 <__gethex+0x386>
 8013520:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013524:	f104 0314 	add.w	r3, r4, #20
 8013528:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801352c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013530:	f04f 0c00 	mov.w	ip, #0
 8013534:	4618      	mov	r0, r3
 8013536:	f853 2b04 	ldr.w	r2, [r3], #4
 801353a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801353e:	d01c      	beq.n	801357a <__gethex+0x3fe>
 8013540:	3201      	adds	r2, #1
 8013542:	6002      	str	r2, [r0, #0]
 8013544:	2f02      	cmp	r7, #2
 8013546:	f104 0314 	add.w	r3, r4, #20
 801354a:	d13f      	bne.n	80135cc <__gethex+0x450>
 801354c:	f8d8 2000 	ldr.w	r2, [r8]
 8013550:	3a01      	subs	r2, #1
 8013552:	42b2      	cmp	r2, r6
 8013554:	d10a      	bne.n	801356c <__gethex+0x3f0>
 8013556:	1171      	asrs	r1, r6, #5
 8013558:	2201      	movs	r2, #1
 801355a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801355e:	f006 061f 	and.w	r6, r6, #31
 8013562:	fa02 f606 	lsl.w	r6, r2, r6
 8013566:	421e      	tst	r6, r3
 8013568:	bf18      	it	ne
 801356a:	4617      	movne	r7, r2
 801356c:	f047 0720 	orr.w	r7, r7, #32
 8013570:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013572:	601c      	str	r4, [r3, #0]
 8013574:	9b04      	ldr	r3, [sp, #16]
 8013576:	601d      	str	r5, [r3, #0]
 8013578:	e695      	b.n	80132a6 <__gethex+0x12a>
 801357a:	4299      	cmp	r1, r3
 801357c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013580:	d8d8      	bhi.n	8013534 <__gethex+0x3b8>
 8013582:	68a3      	ldr	r3, [r4, #8]
 8013584:	459b      	cmp	fp, r3
 8013586:	db19      	blt.n	80135bc <__gethex+0x440>
 8013588:	6861      	ldr	r1, [r4, #4]
 801358a:	ee18 0a10 	vmov	r0, s16
 801358e:	3101      	adds	r1, #1
 8013590:	f000 f91a 	bl	80137c8 <_Balloc>
 8013594:	4681      	mov	r9, r0
 8013596:	b918      	cbnz	r0, 80135a0 <__gethex+0x424>
 8013598:	4b1a      	ldr	r3, [pc, #104]	; (8013604 <__gethex+0x488>)
 801359a:	4602      	mov	r2, r0
 801359c:	2184      	movs	r1, #132	; 0x84
 801359e:	e6a8      	b.n	80132f2 <__gethex+0x176>
 80135a0:	6922      	ldr	r2, [r4, #16]
 80135a2:	3202      	adds	r2, #2
 80135a4:	f104 010c 	add.w	r1, r4, #12
 80135a8:	0092      	lsls	r2, r2, #2
 80135aa:	300c      	adds	r0, #12
 80135ac:	f7fd f9a0 	bl	80108f0 <memcpy>
 80135b0:	4621      	mov	r1, r4
 80135b2:	ee18 0a10 	vmov	r0, s16
 80135b6:	f000 f947 	bl	8013848 <_Bfree>
 80135ba:	464c      	mov	r4, r9
 80135bc:	6923      	ldr	r3, [r4, #16]
 80135be:	1c5a      	adds	r2, r3, #1
 80135c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80135c4:	6122      	str	r2, [r4, #16]
 80135c6:	2201      	movs	r2, #1
 80135c8:	615a      	str	r2, [r3, #20]
 80135ca:	e7bb      	b.n	8013544 <__gethex+0x3c8>
 80135cc:	6922      	ldr	r2, [r4, #16]
 80135ce:	455a      	cmp	r2, fp
 80135d0:	dd0b      	ble.n	80135ea <__gethex+0x46e>
 80135d2:	2101      	movs	r1, #1
 80135d4:	4620      	mov	r0, r4
 80135d6:	f7ff fd69 	bl	80130ac <rshift>
 80135da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135de:	3501      	adds	r5, #1
 80135e0:	42ab      	cmp	r3, r5
 80135e2:	f6ff aed0 	blt.w	8013386 <__gethex+0x20a>
 80135e6:	2701      	movs	r7, #1
 80135e8:	e7c0      	b.n	801356c <__gethex+0x3f0>
 80135ea:	f016 061f 	ands.w	r6, r6, #31
 80135ee:	d0fa      	beq.n	80135e6 <__gethex+0x46a>
 80135f0:	4453      	add	r3, sl
 80135f2:	f1c6 0620 	rsb	r6, r6, #32
 80135f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80135fa:	f000 f9d7 	bl	80139ac <__hi0bits>
 80135fe:	42b0      	cmp	r0, r6
 8013600:	dbe7      	blt.n	80135d2 <__gethex+0x456>
 8013602:	e7f0      	b.n	80135e6 <__gethex+0x46a>
 8013604:	08015b38 	.word	0x08015b38

08013608 <L_shift>:
 8013608:	f1c2 0208 	rsb	r2, r2, #8
 801360c:	0092      	lsls	r2, r2, #2
 801360e:	b570      	push	{r4, r5, r6, lr}
 8013610:	f1c2 0620 	rsb	r6, r2, #32
 8013614:	6843      	ldr	r3, [r0, #4]
 8013616:	6804      	ldr	r4, [r0, #0]
 8013618:	fa03 f506 	lsl.w	r5, r3, r6
 801361c:	432c      	orrs	r4, r5
 801361e:	40d3      	lsrs	r3, r2
 8013620:	6004      	str	r4, [r0, #0]
 8013622:	f840 3f04 	str.w	r3, [r0, #4]!
 8013626:	4288      	cmp	r0, r1
 8013628:	d3f4      	bcc.n	8013614 <L_shift+0xc>
 801362a:	bd70      	pop	{r4, r5, r6, pc}

0801362c <__match>:
 801362c:	b530      	push	{r4, r5, lr}
 801362e:	6803      	ldr	r3, [r0, #0]
 8013630:	3301      	adds	r3, #1
 8013632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013636:	b914      	cbnz	r4, 801363e <__match+0x12>
 8013638:	6003      	str	r3, [r0, #0]
 801363a:	2001      	movs	r0, #1
 801363c:	bd30      	pop	{r4, r5, pc}
 801363e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013642:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013646:	2d19      	cmp	r5, #25
 8013648:	bf98      	it	ls
 801364a:	3220      	addls	r2, #32
 801364c:	42a2      	cmp	r2, r4
 801364e:	d0f0      	beq.n	8013632 <__match+0x6>
 8013650:	2000      	movs	r0, #0
 8013652:	e7f3      	b.n	801363c <__match+0x10>

08013654 <__hexnan>:
 8013654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013658:	680b      	ldr	r3, [r1, #0]
 801365a:	115e      	asrs	r6, r3, #5
 801365c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013660:	f013 031f 	ands.w	r3, r3, #31
 8013664:	b087      	sub	sp, #28
 8013666:	bf18      	it	ne
 8013668:	3604      	addne	r6, #4
 801366a:	2500      	movs	r5, #0
 801366c:	1f37      	subs	r7, r6, #4
 801366e:	4690      	mov	r8, r2
 8013670:	6802      	ldr	r2, [r0, #0]
 8013672:	9301      	str	r3, [sp, #4]
 8013674:	4682      	mov	sl, r0
 8013676:	f846 5c04 	str.w	r5, [r6, #-4]
 801367a:	46b9      	mov	r9, r7
 801367c:	463c      	mov	r4, r7
 801367e:	9502      	str	r5, [sp, #8]
 8013680:	46ab      	mov	fp, r5
 8013682:	7851      	ldrb	r1, [r2, #1]
 8013684:	1c53      	adds	r3, r2, #1
 8013686:	9303      	str	r3, [sp, #12]
 8013688:	b341      	cbz	r1, 80136dc <__hexnan+0x88>
 801368a:	4608      	mov	r0, r1
 801368c:	9205      	str	r2, [sp, #20]
 801368e:	9104      	str	r1, [sp, #16]
 8013690:	f7ff fd5e 	bl	8013150 <__hexdig_fun>
 8013694:	2800      	cmp	r0, #0
 8013696:	d14f      	bne.n	8013738 <__hexnan+0xe4>
 8013698:	9904      	ldr	r1, [sp, #16]
 801369a:	9a05      	ldr	r2, [sp, #20]
 801369c:	2920      	cmp	r1, #32
 801369e:	d818      	bhi.n	80136d2 <__hexnan+0x7e>
 80136a0:	9b02      	ldr	r3, [sp, #8]
 80136a2:	459b      	cmp	fp, r3
 80136a4:	dd13      	ble.n	80136ce <__hexnan+0x7a>
 80136a6:	454c      	cmp	r4, r9
 80136a8:	d206      	bcs.n	80136b8 <__hexnan+0x64>
 80136aa:	2d07      	cmp	r5, #7
 80136ac:	dc04      	bgt.n	80136b8 <__hexnan+0x64>
 80136ae:	462a      	mov	r2, r5
 80136b0:	4649      	mov	r1, r9
 80136b2:	4620      	mov	r0, r4
 80136b4:	f7ff ffa8 	bl	8013608 <L_shift>
 80136b8:	4544      	cmp	r4, r8
 80136ba:	d950      	bls.n	801375e <__hexnan+0x10a>
 80136bc:	2300      	movs	r3, #0
 80136be:	f1a4 0904 	sub.w	r9, r4, #4
 80136c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80136c6:	f8cd b008 	str.w	fp, [sp, #8]
 80136ca:	464c      	mov	r4, r9
 80136cc:	461d      	mov	r5, r3
 80136ce:	9a03      	ldr	r2, [sp, #12]
 80136d0:	e7d7      	b.n	8013682 <__hexnan+0x2e>
 80136d2:	2929      	cmp	r1, #41	; 0x29
 80136d4:	d156      	bne.n	8013784 <__hexnan+0x130>
 80136d6:	3202      	adds	r2, #2
 80136d8:	f8ca 2000 	str.w	r2, [sl]
 80136dc:	f1bb 0f00 	cmp.w	fp, #0
 80136e0:	d050      	beq.n	8013784 <__hexnan+0x130>
 80136e2:	454c      	cmp	r4, r9
 80136e4:	d206      	bcs.n	80136f4 <__hexnan+0xa0>
 80136e6:	2d07      	cmp	r5, #7
 80136e8:	dc04      	bgt.n	80136f4 <__hexnan+0xa0>
 80136ea:	462a      	mov	r2, r5
 80136ec:	4649      	mov	r1, r9
 80136ee:	4620      	mov	r0, r4
 80136f0:	f7ff ff8a 	bl	8013608 <L_shift>
 80136f4:	4544      	cmp	r4, r8
 80136f6:	d934      	bls.n	8013762 <__hexnan+0x10e>
 80136f8:	f1a8 0204 	sub.w	r2, r8, #4
 80136fc:	4623      	mov	r3, r4
 80136fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8013702:	f842 1f04 	str.w	r1, [r2, #4]!
 8013706:	429f      	cmp	r7, r3
 8013708:	d2f9      	bcs.n	80136fe <__hexnan+0xaa>
 801370a:	1b3b      	subs	r3, r7, r4
 801370c:	f023 0303 	bic.w	r3, r3, #3
 8013710:	3304      	adds	r3, #4
 8013712:	3401      	adds	r4, #1
 8013714:	3e03      	subs	r6, #3
 8013716:	42b4      	cmp	r4, r6
 8013718:	bf88      	it	hi
 801371a:	2304      	movhi	r3, #4
 801371c:	4443      	add	r3, r8
 801371e:	2200      	movs	r2, #0
 8013720:	f843 2b04 	str.w	r2, [r3], #4
 8013724:	429f      	cmp	r7, r3
 8013726:	d2fb      	bcs.n	8013720 <__hexnan+0xcc>
 8013728:	683b      	ldr	r3, [r7, #0]
 801372a:	b91b      	cbnz	r3, 8013734 <__hexnan+0xe0>
 801372c:	4547      	cmp	r7, r8
 801372e:	d127      	bne.n	8013780 <__hexnan+0x12c>
 8013730:	2301      	movs	r3, #1
 8013732:	603b      	str	r3, [r7, #0]
 8013734:	2005      	movs	r0, #5
 8013736:	e026      	b.n	8013786 <__hexnan+0x132>
 8013738:	3501      	adds	r5, #1
 801373a:	2d08      	cmp	r5, #8
 801373c:	f10b 0b01 	add.w	fp, fp, #1
 8013740:	dd06      	ble.n	8013750 <__hexnan+0xfc>
 8013742:	4544      	cmp	r4, r8
 8013744:	d9c3      	bls.n	80136ce <__hexnan+0x7a>
 8013746:	2300      	movs	r3, #0
 8013748:	f844 3c04 	str.w	r3, [r4, #-4]
 801374c:	2501      	movs	r5, #1
 801374e:	3c04      	subs	r4, #4
 8013750:	6822      	ldr	r2, [r4, #0]
 8013752:	f000 000f 	and.w	r0, r0, #15
 8013756:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801375a:	6022      	str	r2, [r4, #0]
 801375c:	e7b7      	b.n	80136ce <__hexnan+0x7a>
 801375e:	2508      	movs	r5, #8
 8013760:	e7b5      	b.n	80136ce <__hexnan+0x7a>
 8013762:	9b01      	ldr	r3, [sp, #4]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d0df      	beq.n	8013728 <__hexnan+0xd4>
 8013768:	f04f 32ff 	mov.w	r2, #4294967295
 801376c:	f1c3 0320 	rsb	r3, r3, #32
 8013770:	fa22 f303 	lsr.w	r3, r2, r3
 8013774:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013778:	401a      	ands	r2, r3
 801377a:	f846 2c04 	str.w	r2, [r6, #-4]
 801377e:	e7d3      	b.n	8013728 <__hexnan+0xd4>
 8013780:	3f04      	subs	r7, #4
 8013782:	e7d1      	b.n	8013728 <__hexnan+0xd4>
 8013784:	2004      	movs	r0, #4
 8013786:	b007      	add	sp, #28
 8013788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801378c <_localeconv_r>:
 801378c:	4800      	ldr	r0, [pc, #0]	; (8013790 <_localeconv_r+0x4>)
 801378e:	4770      	bx	lr
 8013790:	200001dc 	.word	0x200001dc

08013794 <malloc>:
 8013794:	4b02      	ldr	r3, [pc, #8]	; (80137a0 <malloc+0xc>)
 8013796:	4601      	mov	r1, r0
 8013798:	6818      	ldr	r0, [r3, #0]
 801379a:	f000 bd59 	b.w	8014250 <_malloc_r>
 801379e:	bf00      	nop
 80137a0:	20000084 	.word	0x20000084

080137a4 <__ascii_mbtowc>:
 80137a4:	b082      	sub	sp, #8
 80137a6:	b901      	cbnz	r1, 80137aa <__ascii_mbtowc+0x6>
 80137a8:	a901      	add	r1, sp, #4
 80137aa:	b142      	cbz	r2, 80137be <__ascii_mbtowc+0x1a>
 80137ac:	b14b      	cbz	r3, 80137c2 <__ascii_mbtowc+0x1e>
 80137ae:	7813      	ldrb	r3, [r2, #0]
 80137b0:	600b      	str	r3, [r1, #0]
 80137b2:	7812      	ldrb	r2, [r2, #0]
 80137b4:	1e10      	subs	r0, r2, #0
 80137b6:	bf18      	it	ne
 80137b8:	2001      	movne	r0, #1
 80137ba:	b002      	add	sp, #8
 80137bc:	4770      	bx	lr
 80137be:	4610      	mov	r0, r2
 80137c0:	e7fb      	b.n	80137ba <__ascii_mbtowc+0x16>
 80137c2:	f06f 0001 	mvn.w	r0, #1
 80137c6:	e7f8      	b.n	80137ba <__ascii_mbtowc+0x16>

080137c8 <_Balloc>:
 80137c8:	b570      	push	{r4, r5, r6, lr}
 80137ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80137cc:	4604      	mov	r4, r0
 80137ce:	460d      	mov	r5, r1
 80137d0:	b976      	cbnz	r6, 80137f0 <_Balloc+0x28>
 80137d2:	2010      	movs	r0, #16
 80137d4:	f7ff ffde 	bl	8013794 <malloc>
 80137d8:	4602      	mov	r2, r0
 80137da:	6260      	str	r0, [r4, #36]	; 0x24
 80137dc:	b920      	cbnz	r0, 80137e8 <_Balloc+0x20>
 80137de:	4b18      	ldr	r3, [pc, #96]	; (8013840 <_Balloc+0x78>)
 80137e0:	4818      	ldr	r0, [pc, #96]	; (8013844 <_Balloc+0x7c>)
 80137e2:	2166      	movs	r1, #102	; 0x66
 80137e4:	f000 ff3e 	bl	8014664 <__assert_func>
 80137e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80137ec:	6006      	str	r6, [r0, #0]
 80137ee:	60c6      	str	r6, [r0, #12]
 80137f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80137f2:	68f3      	ldr	r3, [r6, #12]
 80137f4:	b183      	cbz	r3, 8013818 <_Balloc+0x50>
 80137f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137f8:	68db      	ldr	r3, [r3, #12]
 80137fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80137fe:	b9b8      	cbnz	r0, 8013830 <_Balloc+0x68>
 8013800:	2101      	movs	r1, #1
 8013802:	fa01 f605 	lsl.w	r6, r1, r5
 8013806:	1d72      	adds	r2, r6, #5
 8013808:	0092      	lsls	r2, r2, #2
 801380a:	4620      	mov	r0, r4
 801380c:	f000 fc9d 	bl	801414a <_calloc_r>
 8013810:	b160      	cbz	r0, 801382c <_Balloc+0x64>
 8013812:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013816:	e00e      	b.n	8013836 <_Balloc+0x6e>
 8013818:	2221      	movs	r2, #33	; 0x21
 801381a:	2104      	movs	r1, #4
 801381c:	4620      	mov	r0, r4
 801381e:	f000 fc94 	bl	801414a <_calloc_r>
 8013822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013824:	60f0      	str	r0, [r6, #12]
 8013826:	68db      	ldr	r3, [r3, #12]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d1e4      	bne.n	80137f6 <_Balloc+0x2e>
 801382c:	2000      	movs	r0, #0
 801382e:	bd70      	pop	{r4, r5, r6, pc}
 8013830:	6802      	ldr	r2, [r0, #0]
 8013832:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013836:	2300      	movs	r3, #0
 8013838:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801383c:	e7f7      	b.n	801382e <_Balloc+0x66>
 801383e:	bf00      	nop
 8013840:	08015ac6 	.word	0x08015ac6
 8013844:	08015bc4 	.word	0x08015bc4

08013848 <_Bfree>:
 8013848:	b570      	push	{r4, r5, r6, lr}
 801384a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801384c:	4605      	mov	r5, r0
 801384e:	460c      	mov	r4, r1
 8013850:	b976      	cbnz	r6, 8013870 <_Bfree+0x28>
 8013852:	2010      	movs	r0, #16
 8013854:	f7ff ff9e 	bl	8013794 <malloc>
 8013858:	4602      	mov	r2, r0
 801385a:	6268      	str	r0, [r5, #36]	; 0x24
 801385c:	b920      	cbnz	r0, 8013868 <_Bfree+0x20>
 801385e:	4b09      	ldr	r3, [pc, #36]	; (8013884 <_Bfree+0x3c>)
 8013860:	4809      	ldr	r0, [pc, #36]	; (8013888 <_Bfree+0x40>)
 8013862:	218a      	movs	r1, #138	; 0x8a
 8013864:	f000 fefe 	bl	8014664 <__assert_func>
 8013868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801386c:	6006      	str	r6, [r0, #0]
 801386e:	60c6      	str	r6, [r0, #12]
 8013870:	b13c      	cbz	r4, 8013882 <_Bfree+0x3a>
 8013872:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013874:	6862      	ldr	r2, [r4, #4]
 8013876:	68db      	ldr	r3, [r3, #12]
 8013878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801387c:	6021      	str	r1, [r4, #0]
 801387e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013882:	bd70      	pop	{r4, r5, r6, pc}
 8013884:	08015ac6 	.word	0x08015ac6
 8013888:	08015bc4 	.word	0x08015bc4

0801388c <__multadd>:
 801388c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013890:	690d      	ldr	r5, [r1, #16]
 8013892:	4607      	mov	r7, r0
 8013894:	460c      	mov	r4, r1
 8013896:	461e      	mov	r6, r3
 8013898:	f101 0c14 	add.w	ip, r1, #20
 801389c:	2000      	movs	r0, #0
 801389e:	f8dc 3000 	ldr.w	r3, [ip]
 80138a2:	b299      	uxth	r1, r3
 80138a4:	fb02 6101 	mla	r1, r2, r1, r6
 80138a8:	0c1e      	lsrs	r6, r3, #16
 80138aa:	0c0b      	lsrs	r3, r1, #16
 80138ac:	fb02 3306 	mla	r3, r2, r6, r3
 80138b0:	b289      	uxth	r1, r1
 80138b2:	3001      	adds	r0, #1
 80138b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80138b8:	4285      	cmp	r5, r0
 80138ba:	f84c 1b04 	str.w	r1, [ip], #4
 80138be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80138c2:	dcec      	bgt.n	801389e <__multadd+0x12>
 80138c4:	b30e      	cbz	r6, 801390a <__multadd+0x7e>
 80138c6:	68a3      	ldr	r3, [r4, #8]
 80138c8:	42ab      	cmp	r3, r5
 80138ca:	dc19      	bgt.n	8013900 <__multadd+0x74>
 80138cc:	6861      	ldr	r1, [r4, #4]
 80138ce:	4638      	mov	r0, r7
 80138d0:	3101      	adds	r1, #1
 80138d2:	f7ff ff79 	bl	80137c8 <_Balloc>
 80138d6:	4680      	mov	r8, r0
 80138d8:	b928      	cbnz	r0, 80138e6 <__multadd+0x5a>
 80138da:	4602      	mov	r2, r0
 80138dc:	4b0c      	ldr	r3, [pc, #48]	; (8013910 <__multadd+0x84>)
 80138de:	480d      	ldr	r0, [pc, #52]	; (8013914 <__multadd+0x88>)
 80138e0:	21b5      	movs	r1, #181	; 0xb5
 80138e2:	f000 febf 	bl	8014664 <__assert_func>
 80138e6:	6922      	ldr	r2, [r4, #16]
 80138e8:	3202      	adds	r2, #2
 80138ea:	f104 010c 	add.w	r1, r4, #12
 80138ee:	0092      	lsls	r2, r2, #2
 80138f0:	300c      	adds	r0, #12
 80138f2:	f7fc fffd 	bl	80108f0 <memcpy>
 80138f6:	4621      	mov	r1, r4
 80138f8:	4638      	mov	r0, r7
 80138fa:	f7ff ffa5 	bl	8013848 <_Bfree>
 80138fe:	4644      	mov	r4, r8
 8013900:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013904:	3501      	adds	r5, #1
 8013906:	615e      	str	r6, [r3, #20]
 8013908:	6125      	str	r5, [r4, #16]
 801390a:	4620      	mov	r0, r4
 801390c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013910:	08015b38 	.word	0x08015b38
 8013914:	08015bc4 	.word	0x08015bc4

08013918 <__s2b>:
 8013918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801391c:	460c      	mov	r4, r1
 801391e:	4615      	mov	r5, r2
 8013920:	461f      	mov	r7, r3
 8013922:	2209      	movs	r2, #9
 8013924:	3308      	adds	r3, #8
 8013926:	4606      	mov	r6, r0
 8013928:	fb93 f3f2 	sdiv	r3, r3, r2
 801392c:	2100      	movs	r1, #0
 801392e:	2201      	movs	r2, #1
 8013930:	429a      	cmp	r2, r3
 8013932:	db09      	blt.n	8013948 <__s2b+0x30>
 8013934:	4630      	mov	r0, r6
 8013936:	f7ff ff47 	bl	80137c8 <_Balloc>
 801393a:	b940      	cbnz	r0, 801394e <__s2b+0x36>
 801393c:	4602      	mov	r2, r0
 801393e:	4b19      	ldr	r3, [pc, #100]	; (80139a4 <__s2b+0x8c>)
 8013940:	4819      	ldr	r0, [pc, #100]	; (80139a8 <__s2b+0x90>)
 8013942:	21ce      	movs	r1, #206	; 0xce
 8013944:	f000 fe8e 	bl	8014664 <__assert_func>
 8013948:	0052      	lsls	r2, r2, #1
 801394a:	3101      	adds	r1, #1
 801394c:	e7f0      	b.n	8013930 <__s2b+0x18>
 801394e:	9b08      	ldr	r3, [sp, #32]
 8013950:	6143      	str	r3, [r0, #20]
 8013952:	2d09      	cmp	r5, #9
 8013954:	f04f 0301 	mov.w	r3, #1
 8013958:	6103      	str	r3, [r0, #16]
 801395a:	dd16      	ble.n	801398a <__s2b+0x72>
 801395c:	f104 0909 	add.w	r9, r4, #9
 8013960:	46c8      	mov	r8, r9
 8013962:	442c      	add	r4, r5
 8013964:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013968:	4601      	mov	r1, r0
 801396a:	3b30      	subs	r3, #48	; 0x30
 801396c:	220a      	movs	r2, #10
 801396e:	4630      	mov	r0, r6
 8013970:	f7ff ff8c 	bl	801388c <__multadd>
 8013974:	45a0      	cmp	r8, r4
 8013976:	d1f5      	bne.n	8013964 <__s2b+0x4c>
 8013978:	f1a5 0408 	sub.w	r4, r5, #8
 801397c:	444c      	add	r4, r9
 801397e:	1b2d      	subs	r5, r5, r4
 8013980:	1963      	adds	r3, r4, r5
 8013982:	42bb      	cmp	r3, r7
 8013984:	db04      	blt.n	8013990 <__s2b+0x78>
 8013986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801398a:	340a      	adds	r4, #10
 801398c:	2509      	movs	r5, #9
 801398e:	e7f6      	b.n	801397e <__s2b+0x66>
 8013990:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013994:	4601      	mov	r1, r0
 8013996:	3b30      	subs	r3, #48	; 0x30
 8013998:	220a      	movs	r2, #10
 801399a:	4630      	mov	r0, r6
 801399c:	f7ff ff76 	bl	801388c <__multadd>
 80139a0:	e7ee      	b.n	8013980 <__s2b+0x68>
 80139a2:	bf00      	nop
 80139a4:	08015b38 	.word	0x08015b38
 80139a8:	08015bc4 	.word	0x08015bc4

080139ac <__hi0bits>:
 80139ac:	0c03      	lsrs	r3, r0, #16
 80139ae:	041b      	lsls	r3, r3, #16
 80139b0:	b9d3      	cbnz	r3, 80139e8 <__hi0bits+0x3c>
 80139b2:	0400      	lsls	r0, r0, #16
 80139b4:	2310      	movs	r3, #16
 80139b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80139ba:	bf04      	itt	eq
 80139bc:	0200      	lsleq	r0, r0, #8
 80139be:	3308      	addeq	r3, #8
 80139c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80139c4:	bf04      	itt	eq
 80139c6:	0100      	lsleq	r0, r0, #4
 80139c8:	3304      	addeq	r3, #4
 80139ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80139ce:	bf04      	itt	eq
 80139d0:	0080      	lsleq	r0, r0, #2
 80139d2:	3302      	addeq	r3, #2
 80139d4:	2800      	cmp	r0, #0
 80139d6:	db05      	blt.n	80139e4 <__hi0bits+0x38>
 80139d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80139dc:	f103 0301 	add.w	r3, r3, #1
 80139e0:	bf08      	it	eq
 80139e2:	2320      	moveq	r3, #32
 80139e4:	4618      	mov	r0, r3
 80139e6:	4770      	bx	lr
 80139e8:	2300      	movs	r3, #0
 80139ea:	e7e4      	b.n	80139b6 <__hi0bits+0xa>

080139ec <__lo0bits>:
 80139ec:	6803      	ldr	r3, [r0, #0]
 80139ee:	f013 0207 	ands.w	r2, r3, #7
 80139f2:	4601      	mov	r1, r0
 80139f4:	d00b      	beq.n	8013a0e <__lo0bits+0x22>
 80139f6:	07da      	lsls	r2, r3, #31
 80139f8:	d423      	bmi.n	8013a42 <__lo0bits+0x56>
 80139fa:	0798      	lsls	r0, r3, #30
 80139fc:	bf49      	itett	mi
 80139fe:	085b      	lsrmi	r3, r3, #1
 8013a00:	089b      	lsrpl	r3, r3, #2
 8013a02:	2001      	movmi	r0, #1
 8013a04:	600b      	strmi	r3, [r1, #0]
 8013a06:	bf5c      	itt	pl
 8013a08:	600b      	strpl	r3, [r1, #0]
 8013a0a:	2002      	movpl	r0, #2
 8013a0c:	4770      	bx	lr
 8013a0e:	b298      	uxth	r0, r3
 8013a10:	b9a8      	cbnz	r0, 8013a3e <__lo0bits+0x52>
 8013a12:	0c1b      	lsrs	r3, r3, #16
 8013a14:	2010      	movs	r0, #16
 8013a16:	b2da      	uxtb	r2, r3
 8013a18:	b90a      	cbnz	r2, 8013a1e <__lo0bits+0x32>
 8013a1a:	3008      	adds	r0, #8
 8013a1c:	0a1b      	lsrs	r3, r3, #8
 8013a1e:	071a      	lsls	r2, r3, #28
 8013a20:	bf04      	itt	eq
 8013a22:	091b      	lsreq	r3, r3, #4
 8013a24:	3004      	addeq	r0, #4
 8013a26:	079a      	lsls	r2, r3, #30
 8013a28:	bf04      	itt	eq
 8013a2a:	089b      	lsreq	r3, r3, #2
 8013a2c:	3002      	addeq	r0, #2
 8013a2e:	07da      	lsls	r2, r3, #31
 8013a30:	d403      	bmi.n	8013a3a <__lo0bits+0x4e>
 8013a32:	085b      	lsrs	r3, r3, #1
 8013a34:	f100 0001 	add.w	r0, r0, #1
 8013a38:	d005      	beq.n	8013a46 <__lo0bits+0x5a>
 8013a3a:	600b      	str	r3, [r1, #0]
 8013a3c:	4770      	bx	lr
 8013a3e:	4610      	mov	r0, r2
 8013a40:	e7e9      	b.n	8013a16 <__lo0bits+0x2a>
 8013a42:	2000      	movs	r0, #0
 8013a44:	4770      	bx	lr
 8013a46:	2020      	movs	r0, #32
 8013a48:	4770      	bx	lr
	...

08013a4c <__i2b>:
 8013a4c:	b510      	push	{r4, lr}
 8013a4e:	460c      	mov	r4, r1
 8013a50:	2101      	movs	r1, #1
 8013a52:	f7ff feb9 	bl	80137c8 <_Balloc>
 8013a56:	4602      	mov	r2, r0
 8013a58:	b928      	cbnz	r0, 8013a66 <__i2b+0x1a>
 8013a5a:	4b05      	ldr	r3, [pc, #20]	; (8013a70 <__i2b+0x24>)
 8013a5c:	4805      	ldr	r0, [pc, #20]	; (8013a74 <__i2b+0x28>)
 8013a5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013a62:	f000 fdff 	bl	8014664 <__assert_func>
 8013a66:	2301      	movs	r3, #1
 8013a68:	6144      	str	r4, [r0, #20]
 8013a6a:	6103      	str	r3, [r0, #16]
 8013a6c:	bd10      	pop	{r4, pc}
 8013a6e:	bf00      	nop
 8013a70:	08015b38 	.word	0x08015b38
 8013a74:	08015bc4 	.word	0x08015bc4

08013a78 <__multiply>:
 8013a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a7c:	4691      	mov	r9, r2
 8013a7e:	690a      	ldr	r2, [r1, #16]
 8013a80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013a84:	429a      	cmp	r2, r3
 8013a86:	bfb8      	it	lt
 8013a88:	460b      	movlt	r3, r1
 8013a8a:	460c      	mov	r4, r1
 8013a8c:	bfbc      	itt	lt
 8013a8e:	464c      	movlt	r4, r9
 8013a90:	4699      	movlt	r9, r3
 8013a92:	6927      	ldr	r7, [r4, #16]
 8013a94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013a98:	68a3      	ldr	r3, [r4, #8]
 8013a9a:	6861      	ldr	r1, [r4, #4]
 8013a9c:	eb07 060a 	add.w	r6, r7, sl
 8013aa0:	42b3      	cmp	r3, r6
 8013aa2:	b085      	sub	sp, #20
 8013aa4:	bfb8      	it	lt
 8013aa6:	3101      	addlt	r1, #1
 8013aa8:	f7ff fe8e 	bl	80137c8 <_Balloc>
 8013aac:	b930      	cbnz	r0, 8013abc <__multiply+0x44>
 8013aae:	4602      	mov	r2, r0
 8013ab0:	4b44      	ldr	r3, [pc, #272]	; (8013bc4 <__multiply+0x14c>)
 8013ab2:	4845      	ldr	r0, [pc, #276]	; (8013bc8 <__multiply+0x150>)
 8013ab4:	f240 115d 	movw	r1, #349	; 0x15d
 8013ab8:	f000 fdd4 	bl	8014664 <__assert_func>
 8013abc:	f100 0514 	add.w	r5, r0, #20
 8013ac0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013ac4:	462b      	mov	r3, r5
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	4543      	cmp	r3, r8
 8013aca:	d321      	bcc.n	8013b10 <__multiply+0x98>
 8013acc:	f104 0314 	add.w	r3, r4, #20
 8013ad0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013ad4:	f109 0314 	add.w	r3, r9, #20
 8013ad8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013adc:	9202      	str	r2, [sp, #8]
 8013ade:	1b3a      	subs	r2, r7, r4
 8013ae0:	3a15      	subs	r2, #21
 8013ae2:	f022 0203 	bic.w	r2, r2, #3
 8013ae6:	3204      	adds	r2, #4
 8013ae8:	f104 0115 	add.w	r1, r4, #21
 8013aec:	428f      	cmp	r7, r1
 8013aee:	bf38      	it	cc
 8013af0:	2204      	movcc	r2, #4
 8013af2:	9201      	str	r2, [sp, #4]
 8013af4:	9a02      	ldr	r2, [sp, #8]
 8013af6:	9303      	str	r3, [sp, #12]
 8013af8:	429a      	cmp	r2, r3
 8013afa:	d80c      	bhi.n	8013b16 <__multiply+0x9e>
 8013afc:	2e00      	cmp	r6, #0
 8013afe:	dd03      	ble.n	8013b08 <__multiply+0x90>
 8013b00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d05a      	beq.n	8013bbe <__multiply+0x146>
 8013b08:	6106      	str	r6, [r0, #16]
 8013b0a:	b005      	add	sp, #20
 8013b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b10:	f843 2b04 	str.w	r2, [r3], #4
 8013b14:	e7d8      	b.n	8013ac8 <__multiply+0x50>
 8013b16:	f8b3 a000 	ldrh.w	sl, [r3]
 8013b1a:	f1ba 0f00 	cmp.w	sl, #0
 8013b1e:	d024      	beq.n	8013b6a <__multiply+0xf2>
 8013b20:	f104 0e14 	add.w	lr, r4, #20
 8013b24:	46a9      	mov	r9, r5
 8013b26:	f04f 0c00 	mov.w	ip, #0
 8013b2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013b2e:	f8d9 1000 	ldr.w	r1, [r9]
 8013b32:	fa1f fb82 	uxth.w	fp, r2
 8013b36:	b289      	uxth	r1, r1
 8013b38:	fb0a 110b 	mla	r1, sl, fp, r1
 8013b3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013b40:	f8d9 2000 	ldr.w	r2, [r9]
 8013b44:	4461      	add	r1, ip
 8013b46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013b4a:	fb0a c20b 	mla	r2, sl, fp, ip
 8013b4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013b52:	b289      	uxth	r1, r1
 8013b54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013b58:	4577      	cmp	r7, lr
 8013b5a:	f849 1b04 	str.w	r1, [r9], #4
 8013b5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013b62:	d8e2      	bhi.n	8013b2a <__multiply+0xb2>
 8013b64:	9a01      	ldr	r2, [sp, #4]
 8013b66:	f845 c002 	str.w	ip, [r5, r2]
 8013b6a:	9a03      	ldr	r2, [sp, #12]
 8013b6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013b70:	3304      	adds	r3, #4
 8013b72:	f1b9 0f00 	cmp.w	r9, #0
 8013b76:	d020      	beq.n	8013bba <__multiply+0x142>
 8013b78:	6829      	ldr	r1, [r5, #0]
 8013b7a:	f104 0c14 	add.w	ip, r4, #20
 8013b7e:	46ae      	mov	lr, r5
 8013b80:	f04f 0a00 	mov.w	sl, #0
 8013b84:	f8bc b000 	ldrh.w	fp, [ip]
 8013b88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013b8c:	fb09 220b 	mla	r2, r9, fp, r2
 8013b90:	4492      	add	sl, r2
 8013b92:	b289      	uxth	r1, r1
 8013b94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013b98:	f84e 1b04 	str.w	r1, [lr], #4
 8013b9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013ba0:	f8be 1000 	ldrh.w	r1, [lr]
 8013ba4:	0c12      	lsrs	r2, r2, #16
 8013ba6:	fb09 1102 	mla	r1, r9, r2, r1
 8013baa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013bae:	4567      	cmp	r7, ip
 8013bb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013bb4:	d8e6      	bhi.n	8013b84 <__multiply+0x10c>
 8013bb6:	9a01      	ldr	r2, [sp, #4]
 8013bb8:	50a9      	str	r1, [r5, r2]
 8013bba:	3504      	adds	r5, #4
 8013bbc:	e79a      	b.n	8013af4 <__multiply+0x7c>
 8013bbe:	3e01      	subs	r6, #1
 8013bc0:	e79c      	b.n	8013afc <__multiply+0x84>
 8013bc2:	bf00      	nop
 8013bc4:	08015b38 	.word	0x08015b38
 8013bc8:	08015bc4 	.word	0x08015bc4

08013bcc <__pow5mult>:
 8013bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bd0:	4615      	mov	r5, r2
 8013bd2:	f012 0203 	ands.w	r2, r2, #3
 8013bd6:	4606      	mov	r6, r0
 8013bd8:	460f      	mov	r7, r1
 8013bda:	d007      	beq.n	8013bec <__pow5mult+0x20>
 8013bdc:	4c25      	ldr	r4, [pc, #148]	; (8013c74 <__pow5mult+0xa8>)
 8013bde:	3a01      	subs	r2, #1
 8013be0:	2300      	movs	r3, #0
 8013be2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013be6:	f7ff fe51 	bl	801388c <__multadd>
 8013bea:	4607      	mov	r7, r0
 8013bec:	10ad      	asrs	r5, r5, #2
 8013bee:	d03d      	beq.n	8013c6c <__pow5mult+0xa0>
 8013bf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013bf2:	b97c      	cbnz	r4, 8013c14 <__pow5mult+0x48>
 8013bf4:	2010      	movs	r0, #16
 8013bf6:	f7ff fdcd 	bl	8013794 <malloc>
 8013bfa:	4602      	mov	r2, r0
 8013bfc:	6270      	str	r0, [r6, #36]	; 0x24
 8013bfe:	b928      	cbnz	r0, 8013c0c <__pow5mult+0x40>
 8013c00:	4b1d      	ldr	r3, [pc, #116]	; (8013c78 <__pow5mult+0xac>)
 8013c02:	481e      	ldr	r0, [pc, #120]	; (8013c7c <__pow5mult+0xb0>)
 8013c04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013c08:	f000 fd2c 	bl	8014664 <__assert_func>
 8013c0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c10:	6004      	str	r4, [r0, #0]
 8013c12:	60c4      	str	r4, [r0, #12]
 8013c14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013c18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013c1c:	b94c      	cbnz	r4, 8013c32 <__pow5mult+0x66>
 8013c1e:	f240 2171 	movw	r1, #625	; 0x271
 8013c22:	4630      	mov	r0, r6
 8013c24:	f7ff ff12 	bl	8013a4c <__i2b>
 8013c28:	2300      	movs	r3, #0
 8013c2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c2e:	4604      	mov	r4, r0
 8013c30:	6003      	str	r3, [r0, #0]
 8013c32:	f04f 0900 	mov.w	r9, #0
 8013c36:	07eb      	lsls	r3, r5, #31
 8013c38:	d50a      	bpl.n	8013c50 <__pow5mult+0x84>
 8013c3a:	4639      	mov	r1, r7
 8013c3c:	4622      	mov	r2, r4
 8013c3e:	4630      	mov	r0, r6
 8013c40:	f7ff ff1a 	bl	8013a78 <__multiply>
 8013c44:	4639      	mov	r1, r7
 8013c46:	4680      	mov	r8, r0
 8013c48:	4630      	mov	r0, r6
 8013c4a:	f7ff fdfd 	bl	8013848 <_Bfree>
 8013c4e:	4647      	mov	r7, r8
 8013c50:	106d      	asrs	r5, r5, #1
 8013c52:	d00b      	beq.n	8013c6c <__pow5mult+0xa0>
 8013c54:	6820      	ldr	r0, [r4, #0]
 8013c56:	b938      	cbnz	r0, 8013c68 <__pow5mult+0x9c>
 8013c58:	4622      	mov	r2, r4
 8013c5a:	4621      	mov	r1, r4
 8013c5c:	4630      	mov	r0, r6
 8013c5e:	f7ff ff0b 	bl	8013a78 <__multiply>
 8013c62:	6020      	str	r0, [r4, #0]
 8013c64:	f8c0 9000 	str.w	r9, [r0]
 8013c68:	4604      	mov	r4, r0
 8013c6a:	e7e4      	b.n	8013c36 <__pow5mult+0x6a>
 8013c6c:	4638      	mov	r0, r7
 8013c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c72:	bf00      	nop
 8013c74:	08015d10 	.word	0x08015d10
 8013c78:	08015ac6 	.word	0x08015ac6
 8013c7c:	08015bc4 	.word	0x08015bc4

08013c80 <__lshift>:
 8013c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c84:	460c      	mov	r4, r1
 8013c86:	6849      	ldr	r1, [r1, #4]
 8013c88:	6923      	ldr	r3, [r4, #16]
 8013c8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013c8e:	68a3      	ldr	r3, [r4, #8]
 8013c90:	4607      	mov	r7, r0
 8013c92:	4691      	mov	r9, r2
 8013c94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013c98:	f108 0601 	add.w	r6, r8, #1
 8013c9c:	42b3      	cmp	r3, r6
 8013c9e:	db0b      	blt.n	8013cb8 <__lshift+0x38>
 8013ca0:	4638      	mov	r0, r7
 8013ca2:	f7ff fd91 	bl	80137c8 <_Balloc>
 8013ca6:	4605      	mov	r5, r0
 8013ca8:	b948      	cbnz	r0, 8013cbe <__lshift+0x3e>
 8013caa:	4602      	mov	r2, r0
 8013cac:	4b2a      	ldr	r3, [pc, #168]	; (8013d58 <__lshift+0xd8>)
 8013cae:	482b      	ldr	r0, [pc, #172]	; (8013d5c <__lshift+0xdc>)
 8013cb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013cb4:	f000 fcd6 	bl	8014664 <__assert_func>
 8013cb8:	3101      	adds	r1, #1
 8013cba:	005b      	lsls	r3, r3, #1
 8013cbc:	e7ee      	b.n	8013c9c <__lshift+0x1c>
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	f100 0114 	add.w	r1, r0, #20
 8013cc4:	f100 0210 	add.w	r2, r0, #16
 8013cc8:	4618      	mov	r0, r3
 8013cca:	4553      	cmp	r3, sl
 8013ccc:	db37      	blt.n	8013d3e <__lshift+0xbe>
 8013cce:	6920      	ldr	r0, [r4, #16]
 8013cd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013cd4:	f104 0314 	add.w	r3, r4, #20
 8013cd8:	f019 091f 	ands.w	r9, r9, #31
 8013cdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013ce0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013ce4:	d02f      	beq.n	8013d46 <__lshift+0xc6>
 8013ce6:	f1c9 0e20 	rsb	lr, r9, #32
 8013cea:	468a      	mov	sl, r1
 8013cec:	f04f 0c00 	mov.w	ip, #0
 8013cf0:	681a      	ldr	r2, [r3, #0]
 8013cf2:	fa02 f209 	lsl.w	r2, r2, r9
 8013cf6:	ea42 020c 	orr.w	r2, r2, ip
 8013cfa:	f84a 2b04 	str.w	r2, [sl], #4
 8013cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d02:	4298      	cmp	r0, r3
 8013d04:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013d08:	d8f2      	bhi.n	8013cf0 <__lshift+0x70>
 8013d0a:	1b03      	subs	r3, r0, r4
 8013d0c:	3b15      	subs	r3, #21
 8013d0e:	f023 0303 	bic.w	r3, r3, #3
 8013d12:	3304      	adds	r3, #4
 8013d14:	f104 0215 	add.w	r2, r4, #21
 8013d18:	4290      	cmp	r0, r2
 8013d1a:	bf38      	it	cc
 8013d1c:	2304      	movcc	r3, #4
 8013d1e:	f841 c003 	str.w	ip, [r1, r3]
 8013d22:	f1bc 0f00 	cmp.w	ip, #0
 8013d26:	d001      	beq.n	8013d2c <__lshift+0xac>
 8013d28:	f108 0602 	add.w	r6, r8, #2
 8013d2c:	3e01      	subs	r6, #1
 8013d2e:	4638      	mov	r0, r7
 8013d30:	612e      	str	r6, [r5, #16]
 8013d32:	4621      	mov	r1, r4
 8013d34:	f7ff fd88 	bl	8013848 <_Bfree>
 8013d38:	4628      	mov	r0, r5
 8013d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013d42:	3301      	adds	r3, #1
 8013d44:	e7c1      	b.n	8013cca <__lshift+0x4a>
 8013d46:	3904      	subs	r1, #4
 8013d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013d50:	4298      	cmp	r0, r3
 8013d52:	d8f9      	bhi.n	8013d48 <__lshift+0xc8>
 8013d54:	e7ea      	b.n	8013d2c <__lshift+0xac>
 8013d56:	bf00      	nop
 8013d58:	08015b38 	.word	0x08015b38
 8013d5c:	08015bc4 	.word	0x08015bc4

08013d60 <__mcmp>:
 8013d60:	b530      	push	{r4, r5, lr}
 8013d62:	6902      	ldr	r2, [r0, #16]
 8013d64:	690c      	ldr	r4, [r1, #16]
 8013d66:	1b12      	subs	r2, r2, r4
 8013d68:	d10e      	bne.n	8013d88 <__mcmp+0x28>
 8013d6a:	f100 0314 	add.w	r3, r0, #20
 8013d6e:	3114      	adds	r1, #20
 8013d70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013d74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013d78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013d7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013d80:	42a5      	cmp	r5, r4
 8013d82:	d003      	beq.n	8013d8c <__mcmp+0x2c>
 8013d84:	d305      	bcc.n	8013d92 <__mcmp+0x32>
 8013d86:	2201      	movs	r2, #1
 8013d88:	4610      	mov	r0, r2
 8013d8a:	bd30      	pop	{r4, r5, pc}
 8013d8c:	4283      	cmp	r3, r0
 8013d8e:	d3f3      	bcc.n	8013d78 <__mcmp+0x18>
 8013d90:	e7fa      	b.n	8013d88 <__mcmp+0x28>
 8013d92:	f04f 32ff 	mov.w	r2, #4294967295
 8013d96:	e7f7      	b.n	8013d88 <__mcmp+0x28>

08013d98 <__mdiff>:
 8013d98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d9c:	460c      	mov	r4, r1
 8013d9e:	4606      	mov	r6, r0
 8013da0:	4611      	mov	r1, r2
 8013da2:	4620      	mov	r0, r4
 8013da4:	4690      	mov	r8, r2
 8013da6:	f7ff ffdb 	bl	8013d60 <__mcmp>
 8013daa:	1e05      	subs	r5, r0, #0
 8013dac:	d110      	bne.n	8013dd0 <__mdiff+0x38>
 8013dae:	4629      	mov	r1, r5
 8013db0:	4630      	mov	r0, r6
 8013db2:	f7ff fd09 	bl	80137c8 <_Balloc>
 8013db6:	b930      	cbnz	r0, 8013dc6 <__mdiff+0x2e>
 8013db8:	4b3a      	ldr	r3, [pc, #232]	; (8013ea4 <__mdiff+0x10c>)
 8013dba:	4602      	mov	r2, r0
 8013dbc:	f240 2132 	movw	r1, #562	; 0x232
 8013dc0:	4839      	ldr	r0, [pc, #228]	; (8013ea8 <__mdiff+0x110>)
 8013dc2:	f000 fc4f 	bl	8014664 <__assert_func>
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013dcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dd0:	bfa4      	itt	ge
 8013dd2:	4643      	movge	r3, r8
 8013dd4:	46a0      	movge	r8, r4
 8013dd6:	4630      	mov	r0, r6
 8013dd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013ddc:	bfa6      	itte	ge
 8013dde:	461c      	movge	r4, r3
 8013de0:	2500      	movge	r5, #0
 8013de2:	2501      	movlt	r5, #1
 8013de4:	f7ff fcf0 	bl	80137c8 <_Balloc>
 8013de8:	b920      	cbnz	r0, 8013df4 <__mdiff+0x5c>
 8013dea:	4b2e      	ldr	r3, [pc, #184]	; (8013ea4 <__mdiff+0x10c>)
 8013dec:	4602      	mov	r2, r0
 8013dee:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013df2:	e7e5      	b.n	8013dc0 <__mdiff+0x28>
 8013df4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013df8:	6926      	ldr	r6, [r4, #16]
 8013dfa:	60c5      	str	r5, [r0, #12]
 8013dfc:	f104 0914 	add.w	r9, r4, #20
 8013e00:	f108 0514 	add.w	r5, r8, #20
 8013e04:	f100 0e14 	add.w	lr, r0, #20
 8013e08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013e0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013e10:	f108 0210 	add.w	r2, r8, #16
 8013e14:	46f2      	mov	sl, lr
 8013e16:	2100      	movs	r1, #0
 8013e18:	f859 3b04 	ldr.w	r3, [r9], #4
 8013e1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013e20:	fa1f f883 	uxth.w	r8, r3
 8013e24:	fa11 f18b 	uxtah	r1, r1, fp
 8013e28:	0c1b      	lsrs	r3, r3, #16
 8013e2a:	eba1 0808 	sub.w	r8, r1, r8
 8013e2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013e32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013e36:	fa1f f888 	uxth.w	r8, r8
 8013e3a:	1419      	asrs	r1, r3, #16
 8013e3c:	454e      	cmp	r6, r9
 8013e3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013e42:	f84a 3b04 	str.w	r3, [sl], #4
 8013e46:	d8e7      	bhi.n	8013e18 <__mdiff+0x80>
 8013e48:	1b33      	subs	r3, r6, r4
 8013e4a:	3b15      	subs	r3, #21
 8013e4c:	f023 0303 	bic.w	r3, r3, #3
 8013e50:	3304      	adds	r3, #4
 8013e52:	3415      	adds	r4, #21
 8013e54:	42a6      	cmp	r6, r4
 8013e56:	bf38      	it	cc
 8013e58:	2304      	movcc	r3, #4
 8013e5a:	441d      	add	r5, r3
 8013e5c:	4473      	add	r3, lr
 8013e5e:	469e      	mov	lr, r3
 8013e60:	462e      	mov	r6, r5
 8013e62:	4566      	cmp	r6, ip
 8013e64:	d30e      	bcc.n	8013e84 <__mdiff+0xec>
 8013e66:	f10c 0203 	add.w	r2, ip, #3
 8013e6a:	1b52      	subs	r2, r2, r5
 8013e6c:	f022 0203 	bic.w	r2, r2, #3
 8013e70:	3d03      	subs	r5, #3
 8013e72:	45ac      	cmp	ip, r5
 8013e74:	bf38      	it	cc
 8013e76:	2200      	movcc	r2, #0
 8013e78:	441a      	add	r2, r3
 8013e7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013e7e:	b17b      	cbz	r3, 8013ea0 <__mdiff+0x108>
 8013e80:	6107      	str	r7, [r0, #16]
 8013e82:	e7a3      	b.n	8013dcc <__mdiff+0x34>
 8013e84:	f856 8b04 	ldr.w	r8, [r6], #4
 8013e88:	fa11 f288 	uxtah	r2, r1, r8
 8013e8c:	1414      	asrs	r4, r2, #16
 8013e8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013e92:	b292      	uxth	r2, r2
 8013e94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013e98:	f84e 2b04 	str.w	r2, [lr], #4
 8013e9c:	1421      	asrs	r1, r4, #16
 8013e9e:	e7e0      	b.n	8013e62 <__mdiff+0xca>
 8013ea0:	3f01      	subs	r7, #1
 8013ea2:	e7ea      	b.n	8013e7a <__mdiff+0xe2>
 8013ea4:	08015b38 	.word	0x08015b38
 8013ea8:	08015bc4 	.word	0x08015bc4

08013eac <__ulp>:
 8013eac:	b082      	sub	sp, #8
 8013eae:	ed8d 0b00 	vstr	d0, [sp]
 8013eb2:	9b01      	ldr	r3, [sp, #4]
 8013eb4:	4912      	ldr	r1, [pc, #72]	; (8013f00 <__ulp+0x54>)
 8013eb6:	4019      	ands	r1, r3
 8013eb8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013ebc:	2900      	cmp	r1, #0
 8013ebe:	dd05      	ble.n	8013ecc <__ulp+0x20>
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	460b      	mov	r3, r1
 8013ec4:	ec43 2b10 	vmov	d0, r2, r3
 8013ec8:	b002      	add	sp, #8
 8013eca:	4770      	bx	lr
 8013ecc:	4249      	negs	r1, r1
 8013ece:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013ed2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013ed6:	f04f 0200 	mov.w	r2, #0
 8013eda:	f04f 0300 	mov.w	r3, #0
 8013ede:	da04      	bge.n	8013eea <__ulp+0x3e>
 8013ee0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013ee4:	fa41 f300 	asr.w	r3, r1, r0
 8013ee8:	e7ec      	b.n	8013ec4 <__ulp+0x18>
 8013eea:	f1a0 0114 	sub.w	r1, r0, #20
 8013eee:	291e      	cmp	r1, #30
 8013ef0:	bfda      	itte	le
 8013ef2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013ef6:	fa20 f101 	lsrle.w	r1, r0, r1
 8013efa:	2101      	movgt	r1, #1
 8013efc:	460a      	mov	r2, r1
 8013efe:	e7e1      	b.n	8013ec4 <__ulp+0x18>
 8013f00:	7ff00000 	.word	0x7ff00000

08013f04 <__b2d>:
 8013f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f06:	6905      	ldr	r5, [r0, #16]
 8013f08:	f100 0714 	add.w	r7, r0, #20
 8013f0c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013f10:	1f2e      	subs	r6, r5, #4
 8013f12:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013f16:	4620      	mov	r0, r4
 8013f18:	f7ff fd48 	bl	80139ac <__hi0bits>
 8013f1c:	f1c0 0320 	rsb	r3, r0, #32
 8013f20:	280a      	cmp	r0, #10
 8013f22:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013fa0 <__b2d+0x9c>
 8013f26:	600b      	str	r3, [r1, #0]
 8013f28:	dc14      	bgt.n	8013f54 <__b2d+0x50>
 8013f2a:	f1c0 0e0b 	rsb	lr, r0, #11
 8013f2e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013f32:	42b7      	cmp	r7, r6
 8013f34:	ea41 030c 	orr.w	r3, r1, ip
 8013f38:	bf34      	ite	cc
 8013f3a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013f3e:	2100      	movcs	r1, #0
 8013f40:	3015      	adds	r0, #21
 8013f42:	fa04 f000 	lsl.w	r0, r4, r0
 8013f46:	fa21 f10e 	lsr.w	r1, r1, lr
 8013f4a:	ea40 0201 	orr.w	r2, r0, r1
 8013f4e:	ec43 2b10 	vmov	d0, r2, r3
 8013f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f54:	42b7      	cmp	r7, r6
 8013f56:	bf3a      	itte	cc
 8013f58:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013f5c:	f1a5 0608 	subcc.w	r6, r5, #8
 8013f60:	2100      	movcs	r1, #0
 8013f62:	380b      	subs	r0, #11
 8013f64:	d017      	beq.n	8013f96 <__b2d+0x92>
 8013f66:	f1c0 0c20 	rsb	ip, r0, #32
 8013f6a:	fa04 f500 	lsl.w	r5, r4, r0
 8013f6e:	42be      	cmp	r6, r7
 8013f70:	fa21 f40c 	lsr.w	r4, r1, ip
 8013f74:	ea45 0504 	orr.w	r5, r5, r4
 8013f78:	bf8c      	ite	hi
 8013f7a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013f7e:	2400      	movls	r4, #0
 8013f80:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013f84:	fa01 f000 	lsl.w	r0, r1, r0
 8013f88:	fa24 f40c 	lsr.w	r4, r4, ip
 8013f8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013f90:	ea40 0204 	orr.w	r2, r0, r4
 8013f94:	e7db      	b.n	8013f4e <__b2d+0x4a>
 8013f96:	ea44 030c 	orr.w	r3, r4, ip
 8013f9a:	460a      	mov	r2, r1
 8013f9c:	e7d7      	b.n	8013f4e <__b2d+0x4a>
 8013f9e:	bf00      	nop
 8013fa0:	3ff00000 	.word	0x3ff00000

08013fa4 <__d2b>:
 8013fa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013fa8:	4689      	mov	r9, r1
 8013faa:	2101      	movs	r1, #1
 8013fac:	ec57 6b10 	vmov	r6, r7, d0
 8013fb0:	4690      	mov	r8, r2
 8013fb2:	f7ff fc09 	bl	80137c8 <_Balloc>
 8013fb6:	4604      	mov	r4, r0
 8013fb8:	b930      	cbnz	r0, 8013fc8 <__d2b+0x24>
 8013fba:	4602      	mov	r2, r0
 8013fbc:	4b25      	ldr	r3, [pc, #148]	; (8014054 <__d2b+0xb0>)
 8013fbe:	4826      	ldr	r0, [pc, #152]	; (8014058 <__d2b+0xb4>)
 8013fc0:	f240 310a 	movw	r1, #778	; 0x30a
 8013fc4:	f000 fb4e 	bl	8014664 <__assert_func>
 8013fc8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013fcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013fd0:	bb35      	cbnz	r5, 8014020 <__d2b+0x7c>
 8013fd2:	2e00      	cmp	r6, #0
 8013fd4:	9301      	str	r3, [sp, #4]
 8013fd6:	d028      	beq.n	801402a <__d2b+0x86>
 8013fd8:	4668      	mov	r0, sp
 8013fda:	9600      	str	r6, [sp, #0]
 8013fdc:	f7ff fd06 	bl	80139ec <__lo0bits>
 8013fe0:	9900      	ldr	r1, [sp, #0]
 8013fe2:	b300      	cbz	r0, 8014026 <__d2b+0x82>
 8013fe4:	9a01      	ldr	r2, [sp, #4]
 8013fe6:	f1c0 0320 	rsb	r3, r0, #32
 8013fea:	fa02 f303 	lsl.w	r3, r2, r3
 8013fee:	430b      	orrs	r3, r1
 8013ff0:	40c2      	lsrs	r2, r0
 8013ff2:	6163      	str	r3, [r4, #20]
 8013ff4:	9201      	str	r2, [sp, #4]
 8013ff6:	9b01      	ldr	r3, [sp, #4]
 8013ff8:	61a3      	str	r3, [r4, #24]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	bf14      	ite	ne
 8013ffe:	2202      	movne	r2, #2
 8014000:	2201      	moveq	r2, #1
 8014002:	6122      	str	r2, [r4, #16]
 8014004:	b1d5      	cbz	r5, 801403c <__d2b+0x98>
 8014006:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801400a:	4405      	add	r5, r0
 801400c:	f8c9 5000 	str.w	r5, [r9]
 8014010:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014014:	f8c8 0000 	str.w	r0, [r8]
 8014018:	4620      	mov	r0, r4
 801401a:	b003      	add	sp, #12
 801401c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014024:	e7d5      	b.n	8013fd2 <__d2b+0x2e>
 8014026:	6161      	str	r1, [r4, #20]
 8014028:	e7e5      	b.n	8013ff6 <__d2b+0x52>
 801402a:	a801      	add	r0, sp, #4
 801402c:	f7ff fcde 	bl	80139ec <__lo0bits>
 8014030:	9b01      	ldr	r3, [sp, #4]
 8014032:	6163      	str	r3, [r4, #20]
 8014034:	2201      	movs	r2, #1
 8014036:	6122      	str	r2, [r4, #16]
 8014038:	3020      	adds	r0, #32
 801403a:	e7e3      	b.n	8014004 <__d2b+0x60>
 801403c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014040:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014044:	f8c9 0000 	str.w	r0, [r9]
 8014048:	6918      	ldr	r0, [r3, #16]
 801404a:	f7ff fcaf 	bl	80139ac <__hi0bits>
 801404e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014052:	e7df      	b.n	8014014 <__d2b+0x70>
 8014054:	08015b38 	.word	0x08015b38
 8014058:	08015bc4 	.word	0x08015bc4

0801405c <__ratio>:
 801405c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014060:	4688      	mov	r8, r1
 8014062:	4669      	mov	r1, sp
 8014064:	4681      	mov	r9, r0
 8014066:	f7ff ff4d 	bl	8013f04 <__b2d>
 801406a:	a901      	add	r1, sp, #4
 801406c:	4640      	mov	r0, r8
 801406e:	ec55 4b10 	vmov	r4, r5, d0
 8014072:	f7ff ff47 	bl	8013f04 <__b2d>
 8014076:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801407a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801407e:	eba3 0c02 	sub.w	ip, r3, r2
 8014082:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014086:	1a9b      	subs	r3, r3, r2
 8014088:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801408c:	ec51 0b10 	vmov	r0, r1, d0
 8014090:	2b00      	cmp	r3, #0
 8014092:	bfd6      	itet	le
 8014094:	460a      	movle	r2, r1
 8014096:	462a      	movgt	r2, r5
 8014098:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801409c:	468b      	mov	fp, r1
 801409e:	462f      	mov	r7, r5
 80140a0:	bfd4      	ite	le
 80140a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80140a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80140aa:	4620      	mov	r0, r4
 80140ac:	ee10 2a10 	vmov	r2, s0
 80140b0:	465b      	mov	r3, fp
 80140b2:	4639      	mov	r1, r7
 80140b4:	f7ec fbe2 	bl	800087c <__aeabi_ddiv>
 80140b8:	ec41 0b10 	vmov	d0, r0, r1
 80140bc:	b003      	add	sp, #12
 80140be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080140c2 <__copybits>:
 80140c2:	3901      	subs	r1, #1
 80140c4:	b570      	push	{r4, r5, r6, lr}
 80140c6:	1149      	asrs	r1, r1, #5
 80140c8:	6914      	ldr	r4, [r2, #16]
 80140ca:	3101      	adds	r1, #1
 80140cc:	f102 0314 	add.w	r3, r2, #20
 80140d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80140d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80140d8:	1f05      	subs	r5, r0, #4
 80140da:	42a3      	cmp	r3, r4
 80140dc:	d30c      	bcc.n	80140f8 <__copybits+0x36>
 80140de:	1aa3      	subs	r3, r4, r2
 80140e0:	3b11      	subs	r3, #17
 80140e2:	f023 0303 	bic.w	r3, r3, #3
 80140e6:	3211      	adds	r2, #17
 80140e8:	42a2      	cmp	r2, r4
 80140ea:	bf88      	it	hi
 80140ec:	2300      	movhi	r3, #0
 80140ee:	4418      	add	r0, r3
 80140f0:	2300      	movs	r3, #0
 80140f2:	4288      	cmp	r0, r1
 80140f4:	d305      	bcc.n	8014102 <__copybits+0x40>
 80140f6:	bd70      	pop	{r4, r5, r6, pc}
 80140f8:	f853 6b04 	ldr.w	r6, [r3], #4
 80140fc:	f845 6f04 	str.w	r6, [r5, #4]!
 8014100:	e7eb      	b.n	80140da <__copybits+0x18>
 8014102:	f840 3b04 	str.w	r3, [r0], #4
 8014106:	e7f4      	b.n	80140f2 <__copybits+0x30>

08014108 <__any_on>:
 8014108:	f100 0214 	add.w	r2, r0, #20
 801410c:	6900      	ldr	r0, [r0, #16]
 801410e:	114b      	asrs	r3, r1, #5
 8014110:	4298      	cmp	r0, r3
 8014112:	b510      	push	{r4, lr}
 8014114:	db11      	blt.n	801413a <__any_on+0x32>
 8014116:	dd0a      	ble.n	801412e <__any_on+0x26>
 8014118:	f011 011f 	ands.w	r1, r1, #31
 801411c:	d007      	beq.n	801412e <__any_on+0x26>
 801411e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014122:	fa24 f001 	lsr.w	r0, r4, r1
 8014126:	fa00 f101 	lsl.w	r1, r0, r1
 801412a:	428c      	cmp	r4, r1
 801412c:	d10b      	bne.n	8014146 <__any_on+0x3e>
 801412e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014132:	4293      	cmp	r3, r2
 8014134:	d803      	bhi.n	801413e <__any_on+0x36>
 8014136:	2000      	movs	r0, #0
 8014138:	bd10      	pop	{r4, pc}
 801413a:	4603      	mov	r3, r0
 801413c:	e7f7      	b.n	801412e <__any_on+0x26>
 801413e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014142:	2900      	cmp	r1, #0
 8014144:	d0f5      	beq.n	8014132 <__any_on+0x2a>
 8014146:	2001      	movs	r0, #1
 8014148:	e7f6      	b.n	8014138 <__any_on+0x30>

0801414a <_calloc_r>:
 801414a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801414c:	fba1 2402 	umull	r2, r4, r1, r2
 8014150:	b94c      	cbnz	r4, 8014166 <_calloc_r+0x1c>
 8014152:	4611      	mov	r1, r2
 8014154:	9201      	str	r2, [sp, #4]
 8014156:	f000 f87b 	bl	8014250 <_malloc_r>
 801415a:	9a01      	ldr	r2, [sp, #4]
 801415c:	4605      	mov	r5, r0
 801415e:	b930      	cbnz	r0, 801416e <_calloc_r+0x24>
 8014160:	4628      	mov	r0, r5
 8014162:	b003      	add	sp, #12
 8014164:	bd30      	pop	{r4, r5, pc}
 8014166:	220c      	movs	r2, #12
 8014168:	6002      	str	r2, [r0, #0]
 801416a:	2500      	movs	r5, #0
 801416c:	e7f8      	b.n	8014160 <_calloc_r+0x16>
 801416e:	4621      	mov	r1, r4
 8014170:	f7fc fbcc 	bl	801090c <memset>
 8014174:	e7f4      	b.n	8014160 <_calloc_r+0x16>
	...

08014178 <_free_r>:
 8014178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801417a:	2900      	cmp	r1, #0
 801417c:	d044      	beq.n	8014208 <_free_r+0x90>
 801417e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014182:	9001      	str	r0, [sp, #4]
 8014184:	2b00      	cmp	r3, #0
 8014186:	f1a1 0404 	sub.w	r4, r1, #4
 801418a:	bfb8      	it	lt
 801418c:	18e4      	addlt	r4, r4, r3
 801418e:	f000 fab3 	bl	80146f8 <__malloc_lock>
 8014192:	4a1e      	ldr	r2, [pc, #120]	; (801420c <_free_r+0x94>)
 8014194:	9801      	ldr	r0, [sp, #4]
 8014196:	6813      	ldr	r3, [r2, #0]
 8014198:	b933      	cbnz	r3, 80141a8 <_free_r+0x30>
 801419a:	6063      	str	r3, [r4, #4]
 801419c:	6014      	str	r4, [r2, #0]
 801419e:	b003      	add	sp, #12
 80141a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80141a4:	f000 baae 	b.w	8014704 <__malloc_unlock>
 80141a8:	42a3      	cmp	r3, r4
 80141aa:	d908      	bls.n	80141be <_free_r+0x46>
 80141ac:	6825      	ldr	r5, [r4, #0]
 80141ae:	1961      	adds	r1, r4, r5
 80141b0:	428b      	cmp	r3, r1
 80141b2:	bf01      	itttt	eq
 80141b4:	6819      	ldreq	r1, [r3, #0]
 80141b6:	685b      	ldreq	r3, [r3, #4]
 80141b8:	1949      	addeq	r1, r1, r5
 80141ba:	6021      	streq	r1, [r4, #0]
 80141bc:	e7ed      	b.n	801419a <_free_r+0x22>
 80141be:	461a      	mov	r2, r3
 80141c0:	685b      	ldr	r3, [r3, #4]
 80141c2:	b10b      	cbz	r3, 80141c8 <_free_r+0x50>
 80141c4:	42a3      	cmp	r3, r4
 80141c6:	d9fa      	bls.n	80141be <_free_r+0x46>
 80141c8:	6811      	ldr	r1, [r2, #0]
 80141ca:	1855      	adds	r5, r2, r1
 80141cc:	42a5      	cmp	r5, r4
 80141ce:	d10b      	bne.n	80141e8 <_free_r+0x70>
 80141d0:	6824      	ldr	r4, [r4, #0]
 80141d2:	4421      	add	r1, r4
 80141d4:	1854      	adds	r4, r2, r1
 80141d6:	42a3      	cmp	r3, r4
 80141d8:	6011      	str	r1, [r2, #0]
 80141da:	d1e0      	bne.n	801419e <_free_r+0x26>
 80141dc:	681c      	ldr	r4, [r3, #0]
 80141de:	685b      	ldr	r3, [r3, #4]
 80141e0:	6053      	str	r3, [r2, #4]
 80141e2:	4421      	add	r1, r4
 80141e4:	6011      	str	r1, [r2, #0]
 80141e6:	e7da      	b.n	801419e <_free_r+0x26>
 80141e8:	d902      	bls.n	80141f0 <_free_r+0x78>
 80141ea:	230c      	movs	r3, #12
 80141ec:	6003      	str	r3, [r0, #0]
 80141ee:	e7d6      	b.n	801419e <_free_r+0x26>
 80141f0:	6825      	ldr	r5, [r4, #0]
 80141f2:	1961      	adds	r1, r4, r5
 80141f4:	428b      	cmp	r3, r1
 80141f6:	bf04      	itt	eq
 80141f8:	6819      	ldreq	r1, [r3, #0]
 80141fa:	685b      	ldreq	r3, [r3, #4]
 80141fc:	6063      	str	r3, [r4, #4]
 80141fe:	bf04      	itt	eq
 8014200:	1949      	addeq	r1, r1, r5
 8014202:	6021      	streq	r1, [r4, #0]
 8014204:	6054      	str	r4, [r2, #4]
 8014206:	e7ca      	b.n	801419e <_free_r+0x26>
 8014208:	b003      	add	sp, #12
 801420a:	bd30      	pop	{r4, r5, pc}
 801420c:	20011664 	.word	0x20011664

08014210 <sbrk_aligned>:
 8014210:	b570      	push	{r4, r5, r6, lr}
 8014212:	4e0e      	ldr	r6, [pc, #56]	; (801424c <sbrk_aligned+0x3c>)
 8014214:	460c      	mov	r4, r1
 8014216:	6831      	ldr	r1, [r6, #0]
 8014218:	4605      	mov	r5, r0
 801421a:	b911      	cbnz	r1, 8014222 <sbrk_aligned+0x12>
 801421c:	f000 f9f0 	bl	8014600 <_sbrk_r>
 8014220:	6030      	str	r0, [r6, #0]
 8014222:	4621      	mov	r1, r4
 8014224:	4628      	mov	r0, r5
 8014226:	f000 f9eb 	bl	8014600 <_sbrk_r>
 801422a:	1c43      	adds	r3, r0, #1
 801422c:	d00a      	beq.n	8014244 <sbrk_aligned+0x34>
 801422e:	1cc4      	adds	r4, r0, #3
 8014230:	f024 0403 	bic.w	r4, r4, #3
 8014234:	42a0      	cmp	r0, r4
 8014236:	d007      	beq.n	8014248 <sbrk_aligned+0x38>
 8014238:	1a21      	subs	r1, r4, r0
 801423a:	4628      	mov	r0, r5
 801423c:	f000 f9e0 	bl	8014600 <_sbrk_r>
 8014240:	3001      	adds	r0, #1
 8014242:	d101      	bne.n	8014248 <sbrk_aligned+0x38>
 8014244:	f04f 34ff 	mov.w	r4, #4294967295
 8014248:	4620      	mov	r0, r4
 801424a:	bd70      	pop	{r4, r5, r6, pc}
 801424c:	20011668 	.word	0x20011668

08014250 <_malloc_r>:
 8014250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014254:	1ccd      	adds	r5, r1, #3
 8014256:	f025 0503 	bic.w	r5, r5, #3
 801425a:	3508      	adds	r5, #8
 801425c:	2d0c      	cmp	r5, #12
 801425e:	bf38      	it	cc
 8014260:	250c      	movcc	r5, #12
 8014262:	2d00      	cmp	r5, #0
 8014264:	4607      	mov	r7, r0
 8014266:	db01      	blt.n	801426c <_malloc_r+0x1c>
 8014268:	42a9      	cmp	r1, r5
 801426a:	d905      	bls.n	8014278 <_malloc_r+0x28>
 801426c:	230c      	movs	r3, #12
 801426e:	603b      	str	r3, [r7, #0]
 8014270:	2600      	movs	r6, #0
 8014272:	4630      	mov	r0, r6
 8014274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014278:	4e2e      	ldr	r6, [pc, #184]	; (8014334 <_malloc_r+0xe4>)
 801427a:	f000 fa3d 	bl	80146f8 <__malloc_lock>
 801427e:	6833      	ldr	r3, [r6, #0]
 8014280:	461c      	mov	r4, r3
 8014282:	bb34      	cbnz	r4, 80142d2 <_malloc_r+0x82>
 8014284:	4629      	mov	r1, r5
 8014286:	4638      	mov	r0, r7
 8014288:	f7ff ffc2 	bl	8014210 <sbrk_aligned>
 801428c:	1c43      	adds	r3, r0, #1
 801428e:	4604      	mov	r4, r0
 8014290:	d14d      	bne.n	801432e <_malloc_r+0xde>
 8014292:	6834      	ldr	r4, [r6, #0]
 8014294:	4626      	mov	r6, r4
 8014296:	2e00      	cmp	r6, #0
 8014298:	d140      	bne.n	801431c <_malloc_r+0xcc>
 801429a:	6823      	ldr	r3, [r4, #0]
 801429c:	4631      	mov	r1, r6
 801429e:	4638      	mov	r0, r7
 80142a0:	eb04 0803 	add.w	r8, r4, r3
 80142a4:	f000 f9ac 	bl	8014600 <_sbrk_r>
 80142a8:	4580      	cmp	r8, r0
 80142aa:	d13a      	bne.n	8014322 <_malloc_r+0xd2>
 80142ac:	6821      	ldr	r1, [r4, #0]
 80142ae:	3503      	adds	r5, #3
 80142b0:	1a6d      	subs	r5, r5, r1
 80142b2:	f025 0503 	bic.w	r5, r5, #3
 80142b6:	3508      	adds	r5, #8
 80142b8:	2d0c      	cmp	r5, #12
 80142ba:	bf38      	it	cc
 80142bc:	250c      	movcc	r5, #12
 80142be:	4629      	mov	r1, r5
 80142c0:	4638      	mov	r0, r7
 80142c2:	f7ff ffa5 	bl	8014210 <sbrk_aligned>
 80142c6:	3001      	adds	r0, #1
 80142c8:	d02b      	beq.n	8014322 <_malloc_r+0xd2>
 80142ca:	6823      	ldr	r3, [r4, #0]
 80142cc:	442b      	add	r3, r5
 80142ce:	6023      	str	r3, [r4, #0]
 80142d0:	e00e      	b.n	80142f0 <_malloc_r+0xa0>
 80142d2:	6822      	ldr	r2, [r4, #0]
 80142d4:	1b52      	subs	r2, r2, r5
 80142d6:	d41e      	bmi.n	8014316 <_malloc_r+0xc6>
 80142d8:	2a0b      	cmp	r2, #11
 80142da:	d916      	bls.n	801430a <_malloc_r+0xba>
 80142dc:	1961      	adds	r1, r4, r5
 80142de:	42a3      	cmp	r3, r4
 80142e0:	6025      	str	r5, [r4, #0]
 80142e2:	bf18      	it	ne
 80142e4:	6059      	strne	r1, [r3, #4]
 80142e6:	6863      	ldr	r3, [r4, #4]
 80142e8:	bf08      	it	eq
 80142ea:	6031      	streq	r1, [r6, #0]
 80142ec:	5162      	str	r2, [r4, r5]
 80142ee:	604b      	str	r3, [r1, #4]
 80142f0:	4638      	mov	r0, r7
 80142f2:	f104 060b 	add.w	r6, r4, #11
 80142f6:	f000 fa05 	bl	8014704 <__malloc_unlock>
 80142fa:	f026 0607 	bic.w	r6, r6, #7
 80142fe:	1d23      	adds	r3, r4, #4
 8014300:	1af2      	subs	r2, r6, r3
 8014302:	d0b6      	beq.n	8014272 <_malloc_r+0x22>
 8014304:	1b9b      	subs	r3, r3, r6
 8014306:	50a3      	str	r3, [r4, r2]
 8014308:	e7b3      	b.n	8014272 <_malloc_r+0x22>
 801430a:	6862      	ldr	r2, [r4, #4]
 801430c:	42a3      	cmp	r3, r4
 801430e:	bf0c      	ite	eq
 8014310:	6032      	streq	r2, [r6, #0]
 8014312:	605a      	strne	r2, [r3, #4]
 8014314:	e7ec      	b.n	80142f0 <_malloc_r+0xa0>
 8014316:	4623      	mov	r3, r4
 8014318:	6864      	ldr	r4, [r4, #4]
 801431a:	e7b2      	b.n	8014282 <_malloc_r+0x32>
 801431c:	4634      	mov	r4, r6
 801431e:	6876      	ldr	r6, [r6, #4]
 8014320:	e7b9      	b.n	8014296 <_malloc_r+0x46>
 8014322:	230c      	movs	r3, #12
 8014324:	603b      	str	r3, [r7, #0]
 8014326:	4638      	mov	r0, r7
 8014328:	f000 f9ec 	bl	8014704 <__malloc_unlock>
 801432c:	e7a1      	b.n	8014272 <_malloc_r+0x22>
 801432e:	6025      	str	r5, [r4, #0]
 8014330:	e7de      	b.n	80142f0 <_malloc_r+0xa0>
 8014332:	bf00      	nop
 8014334:	20011664 	.word	0x20011664

08014338 <__ssputs_r>:
 8014338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801433c:	688e      	ldr	r6, [r1, #8]
 801433e:	429e      	cmp	r6, r3
 8014340:	4682      	mov	sl, r0
 8014342:	460c      	mov	r4, r1
 8014344:	4690      	mov	r8, r2
 8014346:	461f      	mov	r7, r3
 8014348:	d838      	bhi.n	80143bc <__ssputs_r+0x84>
 801434a:	898a      	ldrh	r2, [r1, #12]
 801434c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014350:	d032      	beq.n	80143b8 <__ssputs_r+0x80>
 8014352:	6825      	ldr	r5, [r4, #0]
 8014354:	6909      	ldr	r1, [r1, #16]
 8014356:	eba5 0901 	sub.w	r9, r5, r1
 801435a:	6965      	ldr	r5, [r4, #20]
 801435c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014360:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014364:	3301      	adds	r3, #1
 8014366:	444b      	add	r3, r9
 8014368:	106d      	asrs	r5, r5, #1
 801436a:	429d      	cmp	r5, r3
 801436c:	bf38      	it	cc
 801436e:	461d      	movcc	r5, r3
 8014370:	0553      	lsls	r3, r2, #21
 8014372:	d531      	bpl.n	80143d8 <__ssputs_r+0xa0>
 8014374:	4629      	mov	r1, r5
 8014376:	f7ff ff6b 	bl	8014250 <_malloc_r>
 801437a:	4606      	mov	r6, r0
 801437c:	b950      	cbnz	r0, 8014394 <__ssputs_r+0x5c>
 801437e:	230c      	movs	r3, #12
 8014380:	f8ca 3000 	str.w	r3, [sl]
 8014384:	89a3      	ldrh	r3, [r4, #12]
 8014386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801438a:	81a3      	strh	r3, [r4, #12]
 801438c:	f04f 30ff 	mov.w	r0, #4294967295
 8014390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014394:	6921      	ldr	r1, [r4, #16]
 8014396:	464a      	mov	r2, r9
 8014398:	f7fc faaa 	bl	80108f0 <memcpy>
 801439c:	89a3      	ldrh	r3, [r4, #12]
 801439e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80143a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143a6:	81a3      	strh	r3, [r4, #12]
 80143a8:	6126      	str	r6, [r4, #16]
 80143aa:	6165      	str	r5, [r4, #20]
 80143ac:	444e      	add	r6, r9
 80143ae:	eba5 0509 	sub.w	r5, r5, r9
 80143b2:	6026      	str	r6, [r4, #0]
 80143b4:	60a5      	str	r5, [r4, #8]
 80143b6:	463e      	mov	r6, r7
 80143b8:	42be      	cmp	r6, r7
 80143ba:	d900      	bls.n	80143be <__ssputs_r+0x86>
 80143bc:	463e      	mov	r6, r7
 80143be:	6820      	ldr	r0, [r4, #0]
 80143c0:	4632      	mov	r2, r6
 80143c2:	4641      	mov	r1, r8
 80143c4:	f000 f97e 	bl	80146c4 <memmove>
 80143c8:	68a3      	ldr	r3, [r4, #8]
 80143ca:	1b9b      	subs	r3, r3, r6
 80143cc:	60a3      	str	r3, [r4, #8]
 80143ce:	6823      	ldr	r3, [r4, #0]
 80143d0:	4433      	add	r3, r6
 80143d2:	6023      	str	r3, [r4, #0]
 80143d4:	2000      	movs	r0, #0
 80143d6:	e7db      	b.n	8014390 <__ssputs_r+0x58>
 80143d8:	462a      	mov	r2, r5
 80143da:	f000 f999 	bl	8014710 <_realloc_r>
 80143de:	4606      	mov	r6, r0
 80143e0:	2800      	cmp	r0, #0
 80143e2:	d1e1      	bne.n	80143a8 <__ssputs_r+0x70>
 80143e4:	6921      	ldr	r1, [r4, #16]
 80143e6:	4650      	mov	r0, sl
 80143e8:	f7ff fec6 	bl	8014178 <_free_r>
 80143ec:	e7c7      	b.n	801437e <__ssputs_r+0x46>
	...

080143f0 <_svfiprintf_r>:
 80143f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143f4:	4698      	mov	r8, r3
 80143f6:	898b      	ldrh	r3, [r1, #12]
 80143f8:	061b      	lsls	r3, r3, #24
 80143fa:	b09d      	sub	sp, #116	; 0x74
 80143fc:	4607      	mov	r7, r0
 80143fe:	460d      	mov	r5, r1
 8014400:	4614      	mov	r4, r2
 8014402:	d50e      	bpl.n	8014422 <_svfiprintf_r+0x32>
 8014404:	690b      	ldr	r3, [r1, #16]
 8014406:	b963      	cbnz	r3, 8014422 <_svfiprintf_r+0x32>
 8014408:	2140      	movs	r1, #64	; 0x40
 801440a:	f7ff ff21 	bl	8014250 <_malloc_r>
 801440e:	6028      	str	r0, [r5, #0]
 8014410:	6128      	str	r0, [r5, #16]
 8014412:	b920      	cbnz	r0, 801441e <_svfiprintf_r+0x2e>
 8014414:	230c      	movs	r3, #12
 8014416:	603b      	str	r3, [r7, #0]
 8014418:	f04f 30ff 	mov.w	r0, #4294967295
 801441c:	e0d1      	b.n	80145c2 <_svfiprintf_r+0x1d2>
 801441e:	2340      	movs	r3, #64	; 0x40
 8014420:	616b      	str	r3, [r5, #20]
 8014422:	2300      	movs	r3, #0
 8014424:	9309      	str	r3, [sp, #36]	; 0x24
 8014426:	2320      	movs	r3, #32
 8014428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801442c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014430:	2330      	movs	r3, #48	; 0x30
 8014432:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80145dc <_svfiprintf_r+0x1ec>
 8014436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801443a:	f04f 0901 	mov.w	r9, #1
 801443e:	4623      	mov	r3, r4
 8014440:	469a      	mov	sl, r3
 8014442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014446:	b10a      	cbz	r2, 801444c <_svfiprintf_r+0x5c>
 8014448:	2a25      	cmp	r2, #37	; 0x25
 801444a:	d1f9      	bne.n	8014440 <_svfiprintf_r+0x50>
 801444c:	ebba 0b04 	subs.w	fp, sl, r4
 8014450:	d00b      	beq.n	801446a <_svfiprintf_r+0x7a>
 8014452:	465b      	mov	r3, fp
 8014454:	4622      	mov	r2, r4
 8014456:	4629      	mov	r1, r5
 8014458:	4638      	mov	r0, r7
 801445a:	f7ff ff6d 	bl	8014338 <__ssputs_r>
 801445e:	3001      	adds	r0, #1
 8014460:	f000 80aa 	beq.w	80145b8 <_svfiprintf_r+0x1c8>
 8014464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014466:	445a      	add	r2, fp
 8014468:	9209      	str	r2, [sp, #36]	; 0x24
 801446a:	f89a 3000 	ldrb.w	r3, [sl]
 801446e:	2b00      	cmp	r3, #0
 8014470:	f000 80a2 	beq.w	80145b8 <_svfiprintf_r+0x1c8>
 8014474:	2300      	movs	r3, #0
 8014476:	f04f 32ff 	mov.w	r2, #4294967295
 801447a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801447e:	f10a 0a01 	add.w	sl, sl, #1
 8014482:	9304      	str	r3, [sp, #16]
 8014484:	9307      	str	r3, [sp, #28]
 8014486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801448a:	931a      	str	r3, [sp, #104]	; 0x68
 801448c:	4654      	mov	r4, sl
 801448e:	2205      	movs	r2, #5
 8014490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014494:	4851      	ldr	r0, [pc, #324]	; (80145dc <_svfiprintf_r+0x1ec>)
 8014496:	f7eb febb 	bl	8000210 <memchr>
 801449a:	9a04      	ldr	r2, [sp, #16]
 801449c:	b9d8      	cbnz	r0, 80144d6 <_svfiprintf_r+0xe6>
 801449e:	06d0      	lsls	r0, r2, #27
 80144a0:	bf44      	itt	mi
 80144a2:	2320      	movmi	r3, #32
 80144a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80144a8:	0711      	lsls	r1, r2, #28
 80144aa:	bf44      	itt	mi
 80144ac:	232b      	movmi	r3, #43	; 0x2b
 80144ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80144b2:	f89a 3000 	ldrb.w	r3, [sl]
 80144b6:	2b2a      	cmp	r3, #42	; 0x2a
 80144b8:	d015      	beq.n	80144e6 <_svfiprintf_r+0xf6>
 80144ba:	9a07      	ldr	r2, [sp, #28]
 80144bc:	4654      	mov	r4, sl
 80144be:	2000      	movs	r0, #0
 80144c0:	f04f 0c0a 	mov.w	ip, #10
 80144c4:	4621      	mov	r1, r4
 80144c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144ca:	3b30      	subs	r3, #48	; 0x30
 80144cc:	2b09      	cmp	r3, #9
 80144ce:	d94e      	bls.n	801456e <_svfiprintf_r+0x17e>
 80144d0:	b1b0      	cbz	r0, 8014500 <_svfiprintf_r+0x110>
 80144d2:	9207      	str	r2, [sp, #28]
 80144d4:	e014      	b.n	8014500 <_svfiprintf_r+0x110>
 80144d6:	eba0 0308 	sub.w	r3, r0, r8
 80144da:	fa09 f303 	lsl.w	r3, r9, r3
 80144de:	4313      	orrs	r3, r2
 80144e0:	9304      	str	r3, [sp, #16]
 80144e2:	46a2      	mov	sl, r4
 80144e4:	e7d2      	b.n	801448c <_svfiprintf_r+0x9c>
 80144e6:	9b03      	ldr	r3, [sp, #12]
 80144e8:	1d19      	adds	r1, r3, #4
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	9103      	str	r1, [sp, #12]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	bfbb      	ittet	lt
 80144f2:	425b      	neglt	r3, r3
 80144f4:	f042 0202 	orrlt.w	r2, r2, #2
 80144f8:	9307      	strge	r3, [sp, #28]
 80144fa:	9307      	strlt	r3, [sp, #28]
 80144fc:	bfb8      	it	lt
 80144fe:	9204      	strlt	r2, [sp, #16]
 8014500:	7823      	ldrb	r3, [r4, #0]
 8014502:	2b2e      	cmp	r3, #46	; 0x2e
 8014504:	d10c      	bne.n	8014520 <_svfiprintf_r+0x130>
 8014506:	7863      	ldrb	r3, [r4, #1]
 8014508:	2b2a      	cmp	r3, #42	; 0x2a
 801450a:	d135      	bne.n	8014578 <_svfiprintf_r+0x188>
 801450c:	9b03      	ldr	r3, [sp, #12]
 801450e:	1d1a      	adds	r2, r3, #4
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	9203      	str	r2, [sp, #12]
 8014514:	2b00      	cmp	r3, #0
 8014516:	bfb8      	it	lt
 8014518:	f04f 33ff 	movlt.w	r3, #4294967295
 801451c:	3402      	adds	r4, #2
 801451e:	9305      	str	r3, [sp, #20]
 8014520:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80145ec <_svfiprintf_r+0x1fc>
 8014524:	7821      	ldrb	r1, [r4, #0]
 8014526:	2203      	movs	r2, #3
 8014528:	4650      	mov	r0, sl
 801452a:	f7eb fe71 	bl	8000210 <memchr>
 801452e:	b140      	cbz	r0, 8014542 <_svfiprintf_r+0x152>
 8014530:	2340      	movs	r3, #64	; 0x40
 8014532:	eba0 000a 	sub.w	r0, r0, sl
 8014536:	fa03 f000 	lsl.w	r0, r3, r0
 801453a:	9b04      	ldr	r3, [sp, #16]
 801453c:	4303      	orrs	r3, r0
 801453e:	3401      	adds	r4, #1
 8014540:	9304      	str	r3, [sp, #16]
 8014542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014546:	4826      	ldr	r0, [pc, #152]	; (80145e0 <_svfiprintf_r+0x1f0>)
 8014548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801454c:	2206      	movs	r2, #6
 801454e:	f7eb fe5f 	bl	8000210 <memchr>
 8014552:	2800      	cmp	r0, #0
 8014554:	d038      	beq.n	80145c8 <_svfiprintf_r+0x1d8>
 8014556:	4b23      	ldr	r3, [pc, #140]	; (80145e4 <_svfiprintf_r+0x1f4>)
 8014558:	bb1b      	cbnz	r3, 80145a2 <_svfiprintf_r+0x1b2>
 801455a:	9b03      	ldr	r3, [sp, #12]
 801455c:	3307      	adds	r3, #7
 801455e:	f023 0307 	bic.w	r3, r3, #7
 8014562:	3308      	adds	r3, #8
 8014564:	9303      	str	r3, [sp, #12]
 8014566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014568:	4433      	add	r3, r6
 801456a:	9309      	str	r3, [sp, #36]	; 0x24
 801456c:	e767      	b.n	801443e <_svfiprintf_r+0x4e>
 801456e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014572:	460c      	mov	r4, r1
 8014574:	2001      	movs	r0, #1
 8014576:	e7a5      	b.n	80144c4 <_svfiprintf_r+0xd4>
 8014578:	2300      	movs	r3, #0
 801457a:	3401      	adds	r4, #1
 801457c:	9305      	str	r3, [sp, #20]
 801457e:	4619      	mov	r1, r3
 8014580:	f04f 0c0a 	mov.w	ip, #10
 8014584:	4620      	mov	r0, r4
 8014586:	f810 2b01 	ldrb.w	r2, [r0], #1
 801458a:	3a30      	subs	r2, #48	; 0x30
 801458c:	2a09      	cmp	r2, #9
 801458e:	d903      	bls.n	8014598 <_svfiprintf_r+0x1a8>
 8014590:	2b00      	cmp	r3, #0
 8014592:	d0c5      	beq.n	8014520 <_svfiprintf_r+0x130>
 8014594:	9105      	str	r1, [sp, #20]
 8014596:	e7c3      	b.n	8014520 <_svfiprintf_r+0x130>
 8014598:	fb0c 2101 	mla	r1, ip, r1, r2
 801459c:	4604      	mov	r4, r0
 801459e:	2301      	movs	r3, #1
 80145a0:	e7f0      	b.n	8014584 <_svfiprintf_r+0x194>
 80145a2:	ab03      	add	r3, sp, #12
 80145a4:	9300      	str	r3, [sp, #0]
 80145a6:	462a      	mov	r2, r5
 80145a8:	4b0f      	ldr	r3, [pc, #60]	; (80145e8 <_svfiprintf_r+0x1f8>)
 80145aa:	a904      	add	r1, sp, #16
 80145ac:	4638      	mov	r0, r7
 80145ae:	f7fc fa55 	bl	8010a5c <_printf_float>
 80145b2:	1c42      	adds	r2, r0, #1
 80145b4:	4606      	mov	r6, r0
 80145b6:	d1d6      	bne.n	8014566 <_svfiprintf_r+0x176>
 80145b8:	89ab      	ldrh	r3, [r5, #12]
 80145ba:	065b      	lsls	r3, r3, #25
 80145bc:	f53f af2c 	bmi.w	8014418 <_svfiprintf_r+0x28>
 80145c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145c2:	b01d      	add	sp, #116	; 0x74
 80145c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145c8:	ab03      	add	r3, sp, #12
 80145ca:	9300      	str	r3, [sp, #0]
 80145cc:	462a      	mov	r2, r5
 80145ce:	4b06      	ldr	r3, [pc, #24]	; (80145e8 <_svfiprintf_r+0x1f8>)
 80145d0:	a904      	add	r1, sp, #16
 80145d2:	4638      	mov	r0, r7
 80145d4:	f7fc fce6 	bl	8010fa4 <_printf_i>
 80145d8:	e7eb      	b.n	80145b2 <_svfiprintf_r+0x1c2>
 80145da:	bf00      	nop
 80145dc:	08015d1c 	.word	0x08015d1c
 80145e0:	08015d26 	.word	0x08015d26
 80145e4:	08010a5d 	.word	0x08010a5d
 80145e8:	08014339 	.word	0x08014339
 80145ec:	08015d22 	.word	0x08015d22

080145f0 <nan>:
 80145f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80145f8 <nan+0x8>
 80145f4:	4770      	bx	lr
 80145f6:	bf00      	nop
 80145f8:	00000000 	.word	0x00000000
 80145fc:	7ff80000 	.word	0x7ff80000

08014600 <_sbrk_r>:
 8014600:	b538      	push	{r3, r4, r5, lr}
 8014602:	4d06      	ldr	r5, [pc, #24]	; (801461c <_sbrk_r+0x1c>)
 8014604:	2300      	movs	r3, #0
 8014606:	4604      	mov	r4, r0
 8014608:	4608      	mov	r0, r1
 801460a:	602b      	str	r3, [r5, #0]
 801460c:	f7f1 faa2 	bl	8005b54 <_sbrk>
 8014610:	1c43      	adds	r3, r0, #1
 8014612:	d102      	bne.n	801461a <_sbrk_r+0x1a>
 8014614:	682b      	ldr	r3, [r5, #0]
 8014616:	b103      	cbz	r3, 801461a <_sbrk_r+0x1a>
 8014618:	6023      	str	r3, [r4, #0]
 801461a:	bd38      	pop	{r3, r4, r5, pc}
 801461c:	2001166c 	.word	0x2001166c

08014620 <strncmp>:
 8014620:	b510      	push	{r4, lr}
 8014622:	b17a      	cbz	r2, 8014644 <strncmp+0x24>
 8014624:	4603      	mov	r3, r0
 8014626:	3901      	subs	r1, #1
 8014628:	1884      	adds	r4, r0, r2
 801462a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801462e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014632:	4290      	cmp	r0, r2
 8014634:	d101      	bne.n	801463a <strncmp+0x1a>
 8014636:	42a3      	cmp	r3, r4
 8014638:	d101      	bne.n	801463e <strncmp+0x1e>
 801463a:	1a80      	subs	r0, r0, r2
 801463c:	bd10      	pop	{r4, pc}
 801463e:	2800      	cmp	r0, #0
 8014640:	d1f3      	bne.n	801462a <strncmp+0xa>
 8014642:	e7fa      	b.n	801463a <strncmp+0x1a>
 8014644:	4610      	mov	r0, r2
 8014646:	e7f9      	b.n	801463c <strncmp+0x1c>

08014648 <__ascii_wctomb>:
 8014648:	b149      	cbz	r1, 801465e <__ascii_wctomb+0x16>
 801464a:	2aff      	cmp	r2, #255	; 0xff
 801464c:	bf85      	ittet	hi
 801464e:	238a      	movhi	r3, #138	; 0x8a
 8014650:	6003      	strhi	r3, [r0, #0]
 8014652:	700a      	strbls	r2, [r1, #0]
 8014654:	f04f 30ff 	movhi.w	r0, #4294967295
 8014658:	bf98      	it	ls
 801465a:	2001      	movls	r0, #1
 801465c:	4770      	bx	lr
 801465e:	4608      	mov	r0, r1
 8014660:	4770      	bx	lr
	...

08014664 <__assert_func>:
 8014664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014666:	4614      	mov	r4, r2
 8014668:	461a      	mov	r2, r3
 801466a:	4b09      	ldr	r3, [pc, #36]	; (8014690 <__assert_func+0x2c>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	4605      	mov	r5, r0
 8014670:	68d8      	ldr	r0, [r3, #12]
 8014672:	b14c      	cbz	r4, 8014688 <__assert_func+0x24>
 8014674:	4b07      	ldr	r3, [pc, #28]	; (8014694 <__assert_func+0x30>)
 8014676:	9100      	str	r1, [sp, #0]
 8014678:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801467c:	4906      	ldr	r1, [pc, #24]	; (8014698 <__assert_func+0x34>)
 801467e:	462b      	mov	r3, r5
 8014680:	f000 f80e 	bl	80146a0 <fiprintf>
 8014684:	f000 fa8c 	bl	8014ba0 <abort>
 8014688:	4b04      	ldr	r3, [pc, #16]	; (801469c <__assert_func+0x38>)
 801468a:	461c      	mov	r4, r3
 801468c:	e7f3      	b.n	8014676 <__assert_func+0x12>
 801468e:	bf00      	nop
 8014690:	20000084 	.word	0x20000084
 8014694:	08015d2d 	.word	0x08015d2d
 8014698:	08015d3a 	.word	0x08015d3a
 801469c:	08015d68 	.word	0x08015d68

080146a0 <fiprintf>:
 80146a0:	b40e      	push	{r1, r2, r3}
 80146a2:	b503      	push	{r0, r1, lr}
 80146a4:	4601      	mov	r1, r0
 80146a6:	ab03      	add	r3, sp, #12
 80146a8:	4805      	ldr	r0, [pc, #20]	; (80146c0 <fiprintf+0x20>)
 80146aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80146ae:	6800      	ldr	r0, [r0, #0]
 80146b0:	9301      	str	r3, [sp, #4]
 80146b2:	f000 f885 	bl	80147c0 <_vfiprintf_r>
 80146b6:	b002      	add	sp, #8
 80146b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80146bc:	b003      	add	sp, #12
 80146be:	4770      	bx	lr
 80146c0:	20000084 	.word	0x20000084

080146c4 <memmove>:
 80146c4:	4288      	cmp	r0, r1
 80146c6:	b510      	push	{r4, lr}
 80146c8:	eb01 0402 	add.w	r4, r1, r2
 80146cc:	d902      	bls.n	80146d4 <memmove+0x10>
 80146ce:	4284      	cmp	r4, r0
 80146d0:	4623      	mov	r3, r4
 80146d2:	d807      	bhi.n	80146e4 <memmove+0x20>
 80146d4:	1e43      	subs	r3, r0, #1
 80146d6:	42a1      	cmp	r1, r4
 80146d8:	d008      	beq.n	80146ec <memmove+0x28>
 80146da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80146de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80146e2:	e7f8      	b.n	80146d6 <memmove+0x12>
 80146e4:	4402      	add	r2, r0
 80146e6:	4601      	mov	r1, r0
 80146e8:	428a      	cmp	r2, r1
 80146ea:	d100      	bne.n	80146ee <memmove+0x2a>
 80146ec:	bd10      	pop	{r4, pc}
 80146ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80146f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80146f6:	e7f7      	b.n	80146e8 <memmove+0x24>

080146f8 <__malloc_lock>:
 80146f8:	4801      	ldr	r0, [pc, #4]	; (8014700 <__malloc_lock+0x8>)
 80146fa:	f000 bc11 	b.w	8014f20 <__retarget_lock_acquire_recursive>
 80146fe:	bf00      	nop
 8014700:	20011670 	.word	0x20011670

08014704 <__malloc_unlock>:
 8014704:	4801      	ldr	r0, [pc, #4]	; (801470c <__malloc_unlock+0x8>)
 8014706:	f000 bc0c 	b.w	8014f22 <__retarget_lock_release_recursive>
 801470a:	bf00      	nop
 801470c:	20011670 	.word	0x20011670

08014710 <_realloc_r>:
 8014710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014714:	4680      	mov	r8, r0
 8014716:	4614      	mov	r4, r2
 8014718:	460e      	mov	r6, r1
 801471a:	b921      	cbnz	r1, 8014726 <_realloc_r+0x16>
 801471c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014720:	4611      	mov	r1, r2
 8014722:	f7ff bd95 	b.w	8014250 <_malloc_r>
 8014726:	b92a      	cbnz	r2, 8014734 <_realloc_r+0x24>
 8014728:	f7ff fd26 	bl	8014178 <_free_r>
 801472c:	4625      	mov	r5, r4
 801472e:	4628      	mov	r0, r5
 8014730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014734:	f000 fc5c 	bl	8014ff0 <_malloc_usable_size_r>
 8014738:	4284      	cmp	r4, r0
 801473a:	4607      	mov	r7, r0
 801473c:	d802      	bhi.n	8014744 <_realloc_r+0x34>
 801473e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014742:	d812      	bhi.n	801476a <_realloc_r+0x5a>
 8014744:	4621      	mov	r1, r4
 8014746:	4640      	mov	r0, r8
 8014748:	f7ff fd82 	bl	8014250 <_malloc_r>
 801474c:	4605      	mov	r5, r0
 801474e:	2800      	cmp	r0, #0
 8014750:	d0ed      	beq.n	801472e <_realloc_r+0x1e>
 8014752:	42bc      	cmp	r4, r7
 8014754:	4622      	mov	r2, r4
 8014756:	4631      	mov	r1, r6
 8014758:	bf28      	it	cs
 801475a:	463a      	movcs	r2, r7
 801475c:	f7fc f8c8 	bl	80108f0 <memcpy>
 8014760:	4631      	mov	r1, r6
 8014762:	4640      	mov	r0, r8
 8014764:	f7ff fd08 	bl	8014178 <_free_r>
 8014768:	e7e1      	b.n	801472e <_realloc_r+0x1e>
 801476a:	4635      	mov	r5, r6
 801476c:	e7df      	b.n	801472e <_realloc_r+0x1e>

0801476e <__sfputc_r>:
 801476e:	6893      	ldr	r3, [r2, #8]
 8014770:	3b01      	subs	r3, #1
 8014772:	2b00      	cmp	r3, #0
 8014774:	b410      	push	{r4}
 8014776:	6093      	str	r3, [r2, #8]
 8014778:	da08      	bge.n	801478c <__sfputc_r+0x1e>
 801477a:	6994      	ldr	r4, [r2, #24]
 801477c:	42a3      	cmp	r3, r4
 801477e:	db01      	blt.n	8014784 <__sfputc_r+0x16>
 8014780:	290a      	cmp	r1, #10
 8014782:	d103      	bne.n	801478c <__sfputc_r+0x1e>
 8014784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014788:	f000 b94a 	b.w	8014a20 <__swbuf_r>
 801478c:	6813      	ldr	r3, [r2, #0]
 801478e:	1c58      	adds	r0, r3, #1
 8014790:	6010      	str	r0, [r2, #0]
 8014792:	7019      	strb	r1, [r3, #0]
 8014794:	4608      	mov	r0, r1
 8014796:	f85d 4b04 	ldr.w	r4, [sp], #4
 801479a:	4770      	bx	lr

0801479c <__sfputs_r>:
 801479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801479e:	4606      	mov	r6, r0
 80147a0:	460f      	mov	r7, r1
 80147a2:	4614      	mov	r4, r2
 80147a4:	18d5      	adds	r5, r2, r3
 80147a6:	42ac      	cmp	r4, r5
 80147a8:	d101      	bne.n	80147ae <__sfputs_r+0x12>
 80147aa:	2000      	movs	r0, #0
 80147ac:	e007      	b.n	80147be <__sfputs_r+0x22>
 80147ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147b2:	463a      	mov	r2, r7
 80147b4:	4630      	mov	r0, r6
 80147b6:	f7ff ffda 	bl	801476e <__sfputc_r>
 80147ba:	1c43      	adds	r3, r0, #1
 80147bc:	d1f3      	bne.n	80147a6 <__sfputs_r+0xa>
 80147be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080147c0 <_vfiprintf_r>:
 80147c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147c4:	460d      	mov	r5, r1
 80147c6:	b09d      	sub	sp, #116	; 0x74
 80147c8:	4614      	mov	r4, r2
 80147ca:	4698      	mov	r8, r3
 80147cc:	4606      	mov	r6, r0
 80147ce:	b118      	cbz	r0, 80147d8 <_vfiprintf_r+0x18>
 80147d0:	6983      	ldr	r3, [r0, #24]
 80147d2:	b90b      	cbnz	r3, 80147d8 <_vfiprintf_r+0x18>
 80147d4:	f000 fb06 	bl	8014de4 <__sinit>
 80147d8:	4b89      	ldr	r3, [pc, #548]	; (8014a00 <_vfiprintf_r+0x240>)
 80147da:	429d      	cmp	r5, r3
 80147dc:	d11b      	bne.n	8014816 <_vfiprintf_r+0x56>
 80147de:	6875      	ldr	r5, [r6, #4]
 80147e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80147e2:	07d9      	lsls	r1, r3, #31
 80147e4:	d405      	bmi.n	80147f2 <_vfiprintf_r+0x32>
 80147e6:	89ab      	ldrh	r3, [r5, #12]
 80147e8:	059a      	lsls	r2, r3, #22
 80147ea:	d402      	bmi.n	80147f2 <_vfiprintf_r+0x32>
 80147ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80147ee:	f000 fb97 	bl	8014f20 <__retarget_lock_acquire_recursive>
 80147f2:	89ab      	ldrh	r3, [r5, #12]
 80147f4:	071b      	lsls	r3, r3, #28
 80147f6:	d501      	bpl.n	80147fc <_vfiprintf_r+0x3c>
 80147f8:	692b      	ldr	r3, [r5, #16]
 80147fa:	b9eb      	cbnz	r3, 8014838 <_vfiprintf_r+0x78>
 80147fc:	4629      	mov	r1, r5
 80147fe:	4630      	mov	r0, r6
 8014800:	f000 f960 	bl	8014ac4 <__swsetup_r>
 8014804:	b1c0      	cbz	r0, 8014838 <_vfiprintf_r+0x78>
 8014806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014808:	07dc      	lsls	r4, r3, #31
 801480a:	d50e      	bpl.n	801482a <_vfiprintf_r+0x6a>
 801480c:	f04f 30ff 	mov.w	r0, #4294967295
 8014810:	b01d      	add	sp, #116	; 0x74
 8014812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014816:	4b7b      	ldr	r3, [pc, #492]	; (8014a04 <_vfiprintf_r+0x244>)
 8014818:	429d      	cmp	r5, r3
 801481a:	d101      	bne.n	8014820 <_vfiprintf_r+0x60>
 801481c:	68b5      	ldr	r5, [r6, #8]
 801481e:	e7df      	b.n	80147e0 <_vfiprintf_r+0x20>
 8014820:	4b79      	ldr	r3, [pc, #484]	; (8014a08 <_vfiprintf_r+0x248>)
 8014822:	429d      	cmp	r5, r3
 8014824:	bf08      	it	eq
 8014826:	68f5      	ldreq	r5, [r6, #12]
 8014828:	e7da      	b.n	80147e0 <_vfiprintf_r+0x20>
 801482a:	89ab      	ldrh	r3, [r5, #12]
 801482c:	0598      	lsls	r0, r3, #22
 801482e:	d4ed      	bmi.n	801480c <_vfiprintf_r+0x4c>
 8014830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014832:	f000 fb76 	bl	8014f22 <__retarget_lock_release_recursive>
 8014836:	e7e9      	b.n	801480c <_vfiprintf_r+0x4c>
 8014838:	2300      	movs	r3, #0
 801483a:	9309      	str	r3, [sp, #36]	; 0x24
 801483c:	2320      	movs	r3, #32
 801483e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014842:	f8cd 800c 	str.w	r8, [sp, #12]
 8014846:	2330      	movs	r3, #48	; 0x30
 8014848:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014a0c <_vfiprintf_r+0x24c>
 801484c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014850:	f04f 0901 	mov.w	r9, #1
 8014854:	4623      	mov	r3, r4
 8014856:	469a      	mov	sl, r3
 8014858:	f813 2b01 	ldrb.w	r2, [r3], #1
 801485c:	b10a      	cbz	r2, 8014862 <_vfiprintf_r+0xa2>
 801485e:	2a25      	cmp	r2, #37	; 0x25
 8014860:	d1f9      	bne.n	8014856 <_vfiprintf_r+0x96>
 8014862:	ebba 0b04 	subs.w	fp, sl, r4
 8014866:	d00b      	beq.n	8014880 <_vfiprintf_r+0xc0>
 8014868:	465b      	mov	r3, fp
 801486a:	4622      	mov	r2, r4
 801486c:	4629      	mov	r1, r5
 801486e:	4630      	mov	r0, r6
 8014870:	f7ff ff94 	bl	801479c <__sfputs_r>
 8014874:	3001      	adds	r0, #1
 8014876:	f000 80aa 	beq.w	80149ce <_vfiprintf_r+0x20e>
 801487a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801487c:	445a      	add	r2, fp
 801487e:	9209      	str	r2, [sp, #36]	; 0x24
 8014880:	f89a 3000 	ldrb.w	r3, [sl]
 8014884:	2b00      	cmp	r3, #0
 8014886:	f000 80a2 	beq.w	80149ce <_vfiprintf_r+0x20e>
 801488a:	2300      	movs	r3, #0
 801488c:	f04f 32ff 	mov.w	r2, #4294967295
 8014890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014894:	f10a 0a01 	add.w	sl, sl, #1
 8014898:	9304      	str	r3, [sp, #16]
 801489a:	9307      	str	r3, [sp, #28]
 801489c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80148a0:	931a      	str	r3, [sp, #104]	; 0x68
 80148a2:	4654      	mov	r4, sl
 80148a4:	2205      	movs	r2, #5
 80148a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148aa:	4858      	ldr	r0, [pc, #352]	; (8014a0c <_vfiprintf_r+0x24c>)
 80148ac:	f7eb fcb0 	bl	8000210 <memchr>
 80148b0:	9a04      	ldr	r2, [sp, #16]
 80148b2:	b9d8      	cbnz	r0, 80148ec <_vfiprintf_r+0x12c>
 80148b4:	06d1      	lsls	r1, r2, #27
 80148b6:	bf44      	itt	mi
 80148b8:	2320      	movmi	r3, #32
 80148ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148be:	0713      	lsls	r3, r2, #28
 80148c0:	bf44      	itt	mi
 80148c2:	232b      	movmi	r3, #43	; 0x2b
 80148c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148c8:	f89a 3000 	ldrb.w	r3, [sl]
 80148cc:	2b2a      	cmp	r3, #42	; 0x2a
 80148ce:	d015      	beq.n	80148fc <_vfiprintf_r+0x13c>
 80148d0:	9a07      	ldr	r2, [sp, #28]
 80148d2:	4654      	mov	r4, sl
 80148d4:	2000      	movs	r0, #0
 80148d6:	f04f 0c0a 	mov.w	ip, #10
 80148da:	4621      	mov	r1, r4
 80148dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80148e0:	3b30      	subs	r3, #48	; 0x30
 80148e2:	2b09      	cmp	r3, #9
 80148e4:	d94e      	bls.n	8014984 <_vfiprintf_r+0x1c4>
 80148e6:	b1b0      	cbz	r0, 8014916 <_vfiprintf_r+0x156>
 80148e8:	9207      	str	r2, [sp, #28]
 80148ea:	e014      	b.n	8014916 <_vfiprintf_r+0x156>
 80148ec:	eba0 0308 	sub.w	r3, r0, r8
 80148f0:	fa09 f303 	lsl.w	r3, r9, r3
 80148f4:	4313      	orrs	r3, r2
 80148f6:	9304      	str	r3, [sp, #16]
 80148f8:	46a2      	mov	sl, r4
 80148fa:	e7d2      	b.n	80148a2 <_vfiprintf_r+0xe2>
 80148fc:	9b03      	ldr	r3, [sp, #12]
 80148fe:	1d19      	adds	r1, r3, #4
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	9103      	str	r1, [sp, #12]
 8014904:	2b00      	cmp	r3, #0
 8014906:	bfbb      	ittet	lt
 8014908:	425b      	neglt	r3, r3
 801490a:	f042 0202 	orrlt.w	r2, r2, #2
 801490e:	9307      	strge	r3, [sp, #28]
 8014910:	9307      	strlt	r3, [sp, #28]
 8014912:	bfb8      	it	lt
 8014914:	9204      	strlt	r2, [sp, #16]
 8014916:	7823      	ldrb	r3, [r4, #0]
 8014918:	2b2e      	cmp	r3, #46	; 0x2e
 801491a:	d10c      	bne.n	8014936 <_vfiprintf_r+0x176>
 801491c:	7863      	ldrb	r3, [r4, #1]
 801491e:	2b2a      	cmp	r3, #42	; 0x2a
 8014920:	d135      	bne.n	801498e <_vfiprintf_r+0x1ce>
 8014922:	9b03      	ldr	r3, [sp, #12]
 8014924:	1d1a      	adds	r2, r3, #4
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	9203      	str	r2, [sp, #12]
 801492a:	2b00      	cmp	r3, #0
 801492c:	bfb8      	it	lt
 801492e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014932:	3402      	adds	r4, #2
 8014934:	9305      	str	r3, [sp, #20]
 8014936:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014a1c <_vfiprintf_r+0x25c>
 801493a:	7821      	ldrb	r1, [r4, #0]
 801493c:	2203      	movs	r2, #3
 801493e:	4650      	mov	r0, sl
 8014940:	f7eb fc66 	bl	8000210 <memchr>
 8014944:	b140      	cbz	r0, 8014958 <_vfiprintf_r+0x198>
 8014946:	2340      	movs	r3, #64	; 0x40
 8014948:	eba0 000a 	sub.w	r0, r0, sl
 801494c:	fa03 f000 	lsl.w	r0, r3, r0
 8014950:	9b04      	ldr	r3, [sp, #16]
 8014952:	4303      	orrs	r3, r0
 8014954:	3401      	adds	r4, #1
 8014956:	9304      	str	r3, [sp, #16]
 8014958:	f814 1b01 	ldrb.w	r1, [r4], #1
 801495c:	482c      	ldr	r0, [pc, #176]	; (8014a10 <_vfiprintf_r+0x250>)
 801495e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014962:	2206      	movs	r2, #6
 8014964:	f7eb fc54 	bl	8000210 <memchr>
 8014968:	2800      	cmp	r0, #0
 801496a:	d03f      	beq.n	80149ec <_vfiprintf_r+0x22c>
 801496c:	4b29      	ldr	r3, [pc, #164]	; (8014a14 <_vfiprintf_r+0x254>)
 801496e:	bb1b      	cbnz	r3, 80149b8 <_vfiprintf_r+0x1f8>
 8014970:	9b03      	ldr	r3, [sp, #12]
 8014972:	3307      	adds	r3, #7
 8014974:	f023 0307 	bic.w	r3, r3, #7
 8014978:	3308      	adds	r3, #8
 801497a:	9303      	str	r3, [sp, #12]
 801497c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801497e:	443b      	add	r3, r7
 8014980:	9309      	str	r3, [sp, #36]	; 0x24
 8014982:	e767      	b.n	8014854 <_vfiprintf_r+0x94>
 8014984:	fb0c 3202 	mla	r2, ip, r2, r3
 8014988:	460c      	mov	r4, r1
 801498a:	2001      	movs	r0, #1
 801498c:	e7a5      	b.n	80148da <_vfiprintf_r+0x11a>
 801498e:	2300      	movs	r3, #0
 8014990:	3401      	adds	r4, #1
 8014992:	9305      	str	r3, [sp, #20]
 8014994:	4619      	mov	r1, r3
 8014996:	f04f 0c0a 	mov.w	ip, #10
 801499a:	4620      	mov	r0, r4
 801499c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149a0:	3a30      	subs	r2, #48	; 0x30
 80149a2:	2a09      	cmp	r2, #9
 80149a4:	d903      	bls.n	80149ae <_vfiprintf_r+0x1ee>
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d0c5      	beq.n	8014936 <_vfiprintf_r+0x176>
 80149aa:	9105      	str	r1, [sp, #20]
 80149ac:	e7c3      	b.n	8014936 <_vfiprintf_r+0x176>
 80149ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80149b2:	4604      	mov	r4, r0
 80149b4:	2301      	movs	r3, #1
 80149b6:	e7f0      	b.n	801499a <_vfiprintf_r+0x1da>
 80149b8:	ab03      	add	r3, sp, #12
 80149ba:	9300      	str	r3, [sp, #0]
 80149bc:	462a      	mov	r2, r5
 80149be:	4b16      	ldr	r3, [pc, #88]	; (8014a18 <_vfiprintf_r+0x258>)
 80149c0:	a904      	add	r1, sp, #16
 80149c2:	4630      	mov	r0, r6
 80149c4:	f7fc f84a 	bl	8010a5c <_printf_float>
 80149c8:	4607      	mov	r7, r0
 80149ca:	1c78      	adds	r0, r7, #1
 80149cc:	d1d6      	bne.n	801497c <_vfiprintf_r+0x1bc>
 80149ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149d0:	07d9      	lsls	r1, r3, #31
 80149d2:	d405      	bmi.n	80149e0 <_vfiprintf_r+0x220>
 80149d4:	89ab      	ldrh	r3, [r5, #12]
 80149d6:	059a      	lsls	r2, r3, #22
 80149d8:	d402      	bmi.n	80149e0 <_vfiprintf_r+0x220>
 80149da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149dc:	f000 faa1 	bl	8014f22 <__retarget_lock_release_recursive>
 80149e0:	89ab      	ldrh	r3, [r5, #12]
 80149e2:	065b      	lsls	r3, r3, #25
 80149e4:	f53f af12 	bmi.w	801480c <_vfiprintf_r+0x4c>
 80149e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149ea:	e711      	b.n	8014810 <_vfiprintf_r+0x50>
 80149ec:	ab03      	add	r3, sp, #12
 80149ee:	9300      	str	r3, [sp, #0]
 80149f0:	462a      	mov	r2, r5
 80149f2:	4b09      	ldr	r3, [pc, #36]	; (8014a18 <_vfiprintf_r+0x258>)
 80149f4:	a904      	add	r1, sp, #16
 80149f6:	4630      	mov	r0, r6
 80149f8:	f7fc fad4 	bl	8010fa4 <_printf_i>
 80149fc:	e7e4      	b.n	80149c8 <_vfiprintf_r+0x208>
 80149fe:	bf00      	nop
 8014a00:	08015d8c 	.word	0x08015d8c
 8014a04:	08015dac 	.word	0x08015dac
 8014a08:	08015d6c 	.word	0x08015d6c
 8014a0c:	08015d1c 	.word	0x08015d1c
 8014a10:	08015d26 	.word	0x08015d26
 8014a14:	08010a5d 	.word	0x08010a5d
 8014a18:	0801479d 	.word	0x0801479d
 8014a1c:	08015d22 	.word	0x08015d22

08014a20 <__swbuf_r>:
 8014a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a22:	460e      	mov	r6, r1
 8014a24:	4614      	mov	r4, r2
 8014a26:	4605      	mov	r5, r0
 8014a28:	b118      	cbz	r0, 8014a32 <__swbuf_r+0x12>
 8014a2a:	6983      	ldr	r3, [r0, #24]
 8014a2c:	b90b      	cbnz	r3, 8014a32 <__swbuf_r+0x12>
 8014a2e:	f000 f9d9 	bl	8014de4 <__sinit>
 8014a32:	4b21      	ldr	r3, [pc, #132]	; (8014ab8 <__swbuf_r+0x98>)
 8014a34:	429c      	cmp	r4, r3
 8014a36:	d12b      	bne.n	8014a90 <__swbuf_r+0x70>
 8014a38:	686c      	ldr	r4, [r5, #4]
 8014a3a:	69a3      	ldr	r3, [r4, #24]
 8014a3c:	60a3      	str	r3, [r4, #8]
 8014a3e:	89a3      	ldrh	r3, [r4, #12]
 8014a40:	071a      	lsls	r2, r3, #28
 8014a42:	d52f      	bpl.n	8014aa4 <__swbuf_r+0x84>
 8014a44:	6923      	ldr	r3, [r4, #16]
 8014a46:	b36b      	cbz	r3, 8014aa4 <__swbuf_r+0x84>
 8014a48:	6923      	ldr	r3, [r4, #16]
 8014a4a:	6820      	ldr	r0, [r4, #0]
 8014a4c:	1ac0      	subs	r0, r0, r3
 8014a4e:	6963      	ldr	r3, [r4, #20]
 8014a50:	b2f6      	uxtb	r6, r6
 8014a52:	4283      	cmp	r3, r0
 8014a54:	4637      	mov	r7, r6
 8014a56:	dc04      	bgt.n	8014a62 <__swbuf_r+0x42>
 8014a58:	4621      	mov	r1, r4
 8014a5a:	4628      	mov	r0, r5
 8014a5c:	f000 f92e 	bl	8014cbc <_fflush_r>
 8014a60:	bb30      	cbnz	r0, 8014ab0 <__swbuf_r+0x90>
 8014a62:	68a3      	ldr	r3, [r4, #8]
 8014a64:	3b01      	subs	r3, #1
 8014a66:	60a3      	str	r3, [r4, #8]
 8014a68:	6823      	ldr	r3, [r4, #0]
 8014a6a:	1c5a      	adds	r2, r3, #1
 8014a6c:	6022      	str	r2, [r4, #0]
 8014a6e:	701e      	strb	r6, [r3, #0]
 8014a70:	6963      	ldr	r3, [r4, #20]
 8014a72:	3001      	adds	r0, #1
 8014a74:	4283      	cmp	r3, r0
 8014a76:	d004      	beq.n	8014a82 <__swbuf_r+0x62>
 8014a78:	89a3      	ldrh	r3, [r4, #12]
 8014a7a:	07db      	lsls	r3, r3, #31
 8014a7c:	d506      	bpl.n	8014a8c <__swbuf_r+0x6c>
 8014a7e:	2e0a      	cmp	r6, #10
 8014a80:	d104      	bne.n	8014a8c <__swbuf_r+0x6c>
 8014a82:	4621      	mov	r1, r4
 8014a84:	4628      	mov	r0, r5
 8014a86:	f000 f919 	bl	8014cbc <_fflush_r>
 8014a8a:	b988      	cbnz	r0, 8014ab0 <__swbuf_r+0x90>
 8014a8c:	4638      	mov	r0, r7
 8014a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a90:	4b0a      	ldr	r3, [pc, #40]	; (8014abc <__swbuf_r+0x9c>)
 8014a92:	429c      	cmp	r4, r3
 8014a94:	d101      	bne.n	8014a9a <__swbuf_r+0x7a>
 8014a96:	68ac      	ldr	r4, [r5, #8]
 8014a98:	e7cf      	b.n	8014a3a <__swbuf_r+0x1a>
 8014a9a:	4b09      	ldr	r3, [pc, #36]	; (8014ac0 <__swbuf_r+0xa0>)
 8014a9c:	429c      	cmp	r4, r3
 8014a9e:	bf08      	it	eq
 8014aa0:	68ec      	ldreq	r4, [r5, #12]
 8014aa2:	e7ca      	b.n	8014a3a <__swbuf_r+0x1a>
 8014aa4:	4621      	mov	r1, r4
 8014aa6:	4628      	mov	r0, r5
 8014aa8:	f000 f80c 	bl	8014ac4 <__swsetup_r>
 8014aac:	2800      	cmp	r0, #0
 8014aae:	d0cb      	beq.n	8014a48 <__swbuf_r+0x28>
 8014ab0:	f04f 37ff 	mov.w	r7, #4294967295
 8014ab4:	e7ea      	b.n	8014a8c <__swbuf_r+0x6c>
 8014ab6:	bf00      	nop
 8014ab8:	08015d8c 	.word	0x08015d8c
 8014abc:	08015dac 	.word	0x08015dac
 8014ac0:	08015d6c 	.word	0x08015d6c

08014ac4 <__swsetup_r>:
 8014ac4:	4b32      	ldr	r3, [pc, #200]	; (8014b90 <__swsetup_r+0xcc>)
 8014ac6:	b570      	push	{r4, r5, r6, lr}
 8014ac8:	681d      	ldr	r5, [r3, #0]
 8014aca:	4606      	mov	r6, r0
 8014acc:	460c      	mov	r4, r1
 8014ace:	b125      	cbz	r5, 8014ada <__swsetup_r+0x16>
 8014ad0:	69ab      	ldr	r3, [r5, #24]
 8014ad2:	b913      	cbnz	r3, 8014ada <__swsetup_r+0x16>
 8014ad4:	4628      	mov	r0, r5
 8014ad6:	f000 f985 	bl	8014de4 <__sinit>
 8014ada:	4b2e      	ldr	r3, [pc, #184]	; (8014b94 <__swsetup_r+0xd0>)
 8014adc:	429c      	cmp	r4, r3
 8014ade:	d10f      	bne.n	8014b00 <__swsetup_r+0x3c>
 8014ae0:	686c      	ldr	r4, [r5, #4]
 8014ae2:	89a3      	ldrh	r3, [r4, #12]
 8014ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ae8:	0719      	lsls	r1, r3, #28
 8014aea:	d42c      	bmi.n	8014b46 <__swsetup_r+0x82>
 8014aec:	06dd      	lsls	r5, r3, #27
 8014aee:	d411      	bmi.n	8014b14 <__swsetup_r+0x50>
 8014af0:	2309      	movs	r3, #9
 8014af2:	6033      	str	r3, [r6, #0]
 8014af4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014af8:	81a3      	strh	r3, [r4, #12]
 8014afa:	f04f 30ff 	mov.w	r0, #4294967295
 8014afe:	e03e      	b.n	8014b7e <__swsetup_r+0xba>
 8014b00:	4b25      	ldr	r3, [pc, #148]	; (8014b98 <__swsetup_r+0xd4>)
 8014b02:	429c      	cmp	r4, r3
 8014b04:	d101      	bne.n	8014b0a <__swsetup_r+0x46>
 8014b06:	68ac      	ldr	r4, [r5, #8]
 8014b08:	e7eb      	b.n	8014ae2 <__swsetup_r+0x1e>
 8014b0a:	4b24      	ldr	r3, [pc, #144]	; (8014b9c <__swsetup_r+0xd8>)
 8014b0c:	429c      	cmp	r4, r3
 8014b0e:	bf08      	it	eq
 8014b10:	68ec      	ldreq	r4, [r5, #12]
 8014b12:	e7e6      	b.n	8014ae2 <__swsetup_r+0x1e>
 8014b14:	0758      	lsls	r0, r3, #29
 8014b16:	d512      	bpl.n	8014b3e <__swsetup_r+0x7a>
 8014b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b1a:	b141      	cbz	r1, 8014b2e <__swsetup_r+0x6a>
 8014b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b20:	4299      	cmp	r1, r3
 8014b22:	d002      	beq.n	8014b2a <__swsetup_r+0x66>
 8014b24:	4630      	mov	r0, r6
 8014b26:	f7ff fb27 	bl	8014178 <_free_r>
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	6363      	str	r3, [r4, #52]	; 0x34
 8014b2e:	89a3      	ldrh	r3, [r4, #12]
 8014b30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014b34:	81a3      	strh	r3, [r4, #12]
 8014b36:	2300      	movs	r3, #0
 8014b38:	6063      	str	r3, [r4, #4]
 8014b3a:	6923      	ldr	r3, [r4, #16]
 8014b3c:	6023      	str	r3, [r4, #0]
 8014b3e:	89a3      	ldrh	r3, [r4, #12]
 8014b40:	f043 0308 	orr.w	r3, r3, #8
 8014b44:	81a3      	strh	r3, [r4, #12]
 8014b46:	6923      	ldr	r3, [r4, #16]
 8014b48:	b94b      	cbnz	r3, 8014b5e <__swsetup_r+0x9a>
 8014b4a:	89a3      	ldrh	r3, [r4, #12]
 8014b4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b54:	d003      	beq.n	8014b5e <__swsetup_r+0x9a>
 8014b56:	4621      	mov	r1, r4
 8014b58:	4630      	mov	r0, r6
 8014b5a:	f000 fa09 	bl	8014f70 <__smakebuf_r>
 8014b5e:	89a0      	ldrh	r0, [r4, #12]
 8014b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b64:	f010 0301 	ands.w	r3, r0, #1
 8014b68:	d00a      	beq.n	8014b80 <__swsetup_r+0xbc>
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	60a3      	str	r3, [r4, #8]
 8014b6e:	6963      	ldr	r3, [r4, #20]
 8014b70:	425b      	negs	r3, r3
 8014b72:	61a3      	str	r3, [r4, #24]
 8014b74:	6923      	ldr	r3, [r4, #16]
 8014b76:	b943      	cbnz	r3, 8014b8a <__swsetup_r+0xc6>
 8014b78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014b7c:	d1ba      	bne.n	8014af4 <__swsetup_r+0x30>
 8014b7e:	bd70      	pop	{r4, r5, r6, pc}
 8014b80:	0781      	lsls	r1, r0, #30
 8014b82:	bf58      	it	pl
 8014b84:	6963      	ldrpl	r3, [r4, #20]
 8014b86:	60a3      	str	r3, [r4, #8]
 8014b88:	e7f4      	b.n	8014b74 <__swsetup_r+0xb0>
 8014b8a:	2000      	movs	r0, #0
 8014b8c:	e7f7      	b.n	8014b7e <__swsetup_r+0xba>
 8014b8e:	bf00      	nop
 8014b90:	20000084 	.word	0x20000084
 8014b94:	08015d8c 	.word	0x08015d8c
 8014b98:	08015dac 	.word	0x08015dac
 8014b9c:	08015d6c 	.word	0x08015d6c

08014ba0 <abort>:
 8014ba0:	b508      	push	{r3, lr}
 8014ba2:	2006      	movs	r0, #6
 8014ba4:	f000 fa54 	bl	8015050 <raise>
 8014ba8:	2001      	movs	r0, #1
 8014baa:	f7f0 ff5b 	bl	8005a64 <_exit>
	...

08014bb0 <__sflush_r>:
 8014bb0:	898a      	ldrh	r2, [r1, #12]
 8014bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bb6:	4605      	mov	r5, r0
 8014bb8:	0710      	lsls	r0, r2, #28
 8014bba:	460c      	mov	r4, r1
 8014bbc:	d458      	bmi.n	8014c70 <__sflush_r+0xc0>
 8014bbe:	684b      	ldr	r3, [r1, #4]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	dc05      	bgt.n	8014bd0 <__sflush_r+0x20>
 8014bc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	dc02      	bgt.n	8014bd0 <__sflush_r+0x20>
 8014bca:	2000      	movs	r0, #0
 8014bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014bd2:	2e00      	cmp	r6, #0
 8014bd4:	d0f9      	beq.n	8014bca <__sflush_r+0x1a>
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014bdc:	682f      	ldr	r7, [r5, #0]
 8014bde:	602b      	str	r3, [r5, #0]
 8014be0:	d032      	beq.n	8014c48 <__sflush_r+0x98>
 8014be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014be4:	89a3      	ldrh	r3, [r4, #12]
 8014be6:	075a      	lsls	r2, r3, #29
 8014be8:	d505      	bpl.n	8014bf6 <__sflush_r+0x46>
 8014bea:	6863      	ldr	r3, [r4, #4]
 8014bec:	1ac0      	subs	r0, r0, r3
 8014bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014bf0:	b10b      	cbz	r3, 8014bf6 <__sflush_r+0x46>
 8014bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014bf4:	1ac0      	subs	r0, r0, r3
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	4602      	mov	r2, r0
 8014bfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014bfc:	6a21      	ldr	r1, [r4, #32]
 8014bfe:	4628      	mov	r0, r5
 8014c00:	47b0      	blx	r6
 8014c02:	1c43      	adds	r3, r0, #1
 8014c04:	89a3      	ldrh	r3, [r4, #12]
 8014c06:	d106      	bne.n	8014c16 <__sflush_r+0x66>
 8014c08:	6829      	ldr	r1, [r5, #0]
 8014c0a:	291d      	cmp	r1, #29
 8014c0c:	d82c      	bhi.n	8014c68 <__sflush_r+0xb8>
 8014c0e:	4a2a      	ldr	r2, [pc, #168]	; (8014cb8 <__sflush_r+0x108>)
 8014c10:	40ca      	lsrs	r2, r1
 8014c12:	07d6      	lsls	r6, r2, #31
 8014c14:	d528      	bpl.n	8014c68 <__sflush_r+0xb8>
 8014c16:	2200      	movs	r2, #0
 8014c18:	6062      	str	r2, [r4, #4]
 8014c1a:	04d9      	lsls	r1, r3, #19
 8014c1c:	6922      	ldr	r2, [r4, #16]
 8014c1e:	6022      	str	r2, [r4, #0]
 8014c20:	d504      	bpl.n	8014c2c <__sflush_r+0x7c>
 8014c22:	1c42      	adds	r2, r0, #1
 8014c24:	d101      	bne.n	8014c2a <__sflush_r+0x7a>
 8014c26:	682b      	ldr	r3, [r5, #0]
 8014c28:	b903      	cbnz	r3, 8014c2c <__sflush_r+0x7c>
 8014c2a:	6560      	str	r0, [r4, #84]	; 0x54
 8014c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c2e:	602f      	str	r7, [r5, #0]
 8014c30:	2900      	cmp	r1, #0
 8014c32:	d0ca      	beq.n	8014bca <__sflush_r+0x1a>
 8014c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c38:	4299      	cmp	r1, r3
 8014c3a:	d002      	beq.n	8014c42 <__sflush_r+0x92>
 8014c3c:	4628      	mov	r0, r5
 8014c3e:	f7ff fa9b 	bl	8014178 <_free_r>
 8014c42:	2000      	movs	r0, #0
 8014c44:	6360      	str	r0, [r4, #52]	; 0x34
 8014c46:	e7c1      	b.n	8014bcc <__sflush_r+0x1c>
 8014c48:	6a21      	ldr	r1, [r4, #32]
 8014c4a:	2301      	movs	r3, #1
 8014c4c:	4628      	mov	r0, r5
 8014c4e:	47b0      	blx	r6
 8014c50:	1c41      	adds	r1, r0, #1
 8014c52:	d1c7      	bne.n	8014be4 <__sflush_r+0x34>
 8014c54:	682b      	ldr	r3, [r5, #0]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d0c4      	beq.n	8014be4 <__sflush_r+0x34>
 8014c5a:	2b1d      	cmp	r3, #29
 8014c5c:	d001      	beq.n	8014c62 <__sflush_r+0xb2>
 8014c5e:	2b16      	cmp	r3, #22
 8014c60:	d101      	bne.n	8014c66 <__sflush_r+0xb6>
 8014c62:	602f      	str	r7, [r5, #0]
 8014c64:	e7b1      	b.n	8014bca <__sflush_r+0x1a>
 8014c66:	89a3      	ldrh	r3, [r4, #12]
 8014c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c6c:	81a3      	strh	r3, [r4, #12]
 8014c6e:	e7ad      	b.n	8014bcc <__sflush_r+0x1c>
 8014c70:	690f      	ldr	r7, [r1, #16]
 8014c72:	2f00      	cmp	r7, #0
 8014c74:	d0a9      	beq.n	8014bca <__sflush_r+0x1a>
 8014c76:	0793      	lsls	r3, r2, #30
 8014c78:	680e      	ldr	r6, [r1, #0]
 8014c7a:	bf08      	it	eq
 8014c7c:	694b      	ldreq	r3, [r1, #20]
 8014c7e:	600f      	str	r7, [r1, #0]
 8014c80:	bf18      	it	ne
 8014c82:	2300      	movne	r3, #0
 8014c84:	eba6 0807 	sub.w	r8, r6, r7
 8014c88:	608b      	str	r3, [r1, #8]
 8014c8a:	f1b8 0f00 	cmp.w	r8, #0
 8014c8e:	dd9c      	ble.n	8014bca <__sflush_r+0x1a>
 8014c90:	6a21      	ldr	r1, [r4, #32]
 8014c92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014c94:	4643      	mov	r3, r8
 8014c96:	463a      	mov	r2, r7
 8014c98:	4628      	mov	r0, r5
 8014c9a:	47b0      	blx	r6
 8014c9c:	2800      	cmp	r0, #0
 8014c9e:	dc06      	bgt.n	8014cae <__sflush_r+0xfe>
 8014ca0:	89a3      	ldrh	r3, [r4, #12]
 8014ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ca6:	81a3      	strh	r3, [r4, #12]
 8014ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8014cac:	e78e      	b.n	8014bcc <__sflush_r+0x1c>
 8014cae:	4407      	add	r7, r0
 8014cb0:	eba8 0800 	sub.w	r8, r8, r0
 8014cb4:	e7e9      	b.n	8014c8a <__sflush_r+0xda>
 8014cb6:	bf00      	nop
 8014cb8:	20400001 	.word	0x20400001

08014cbc <_fflush_r>:
 8014cbc:	b538      	push	{r3, r4, r5, lr}
 8014cbe:	690b      	ldr	r3, [r1, #16]
 8014cc0:	4605      	mov	r5, r0
 8014cc2:	460c      	mov	r4, r1
 8014cc4:	b913      	cbnz	r3, 8014ccc <_fflush_r+0x10>
 8014cc6:	2500      	movs	r5, #0
 8014cc8:	4628      	mov	r0, r5
 8014cca:	bd38      	pop	{r3, r4, r5, pc}
 8014ccc:	b118      	cbz	r0, 8014cd6 <_fflush_r+0x1a>
 8014cce:	6983      	ldr	r3, [r0, #24]
 8014cd0:	b90b      	cbnz	r3, 8014cd6 <_fflush_r+0x1a>
 8014cd2:	f000 f887 	bl	8014de4 <__sinit>
 8014cd6:	4b14      	ldr	r3, [pc, #80]	; (8014d28 <_fflush_r+0x6c>)
 8014cd8:	429c      	cmp	r4, r3
 8014cda:	d11b      	bne.n	8014d14 <_fflush_r+0x58>
 8014cdc:	686c      	ldr	r4, [r5, #4]
 8014cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d0ef      	beq.n	8014cc6 <_fflush_r+0xa>
 8014ce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014ce8:	07d0      	lsls	r0, r2, #31
 8014cea:	d404      	bmi.n	8014cf6 <_fflush_r+0x3a>
 8014cec:	0599      	lsls	r1, r3, #22
 8014cee:	d402      	bmi.n	8014cf6 <_fflush_r+0x3a>
 8014cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014cf2:	f000 f915 	bl	8014f20 <__retarget_lock_acquire_recursive>
 8014cf6:	4628      	mov	r0, r5
 8014cf8:	4621      	mov	r1, r4
 8014cfa:	f7ff ff59 	bl	8014bb0 <__sflush_r>
 8014cfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014d00:	07da      	lsls	r2, r3, #31
 8014d02:	4605      	mov	r5, r0
 8014d04:	d4e0      	bmi.n	8014cc8 <_fflush_r+0xc>
 8014d06:	89a3      	ldrh	r3, [r4, #12]
 8014d08:	059b      	lsls	r3, r3, #22
 8014d0a:	d4dd      	bmi.n	8014cc8 <_fflush_r+0xc>
 8014d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d0e:	f000 f908 	bl	8014f22 <__retarget_lock_release_recursive>
 8014d12:	e7d9      	b.n	8014cc8 <_fflush_r+0xc>
 8014d14:	4b05      	ldr	r3, [pc, #20]	; (8014d2c <_fflush_r+0x70>)
 8014d16:	429c      	cmp	r4, r3
 8014d18:	d101      	bne.n	8014d1e <_fflush_r+0x62>
 8014d1a:	68ac      	ldr	r4, [r5, #8]
 8014d1c:	e7df      	b.n	8014cde <_fflush_r+0x22>
 8014d1e:	4b04      	ldr	r3, [pc, #16]	; (8014d30 <_fflush_r+0x74>)
 8014d20:	429c      	cmp	r4, r3
 8014d22:	bf08      	it	eq
 8014d24:	68ec      	ldreq	r4, [r5, #12]
 8014d26:	e7da      	b.n	8014cde <_fflush_r+0x22>
 8014d28:	08015d8c 	.word	0x08015d8c
 8014d2c:	08015dac 	.word	0x08015dac
 8014d30:	08015d6c 	.word	0x08015d6c

08014d34 <std>:
 8014d34:	2300      	movs	r3, #0
 8014d36:	b510      	push	{r4, lr}
 8014d38:	4604      	mov	r4, r0
 8014d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8014d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014d42:	6083      	str	r3, [r0, #8]
 8014d44:	8181      	strh	r1, [r0, #12]
 8014d46:	6643      	str	r3, [r0, #100]	; 0x64
 8014d48:	81c2      	strh	r2, [r0, #14]
 8014d4a:	6183      	str	r3, [r0, #24]
 8014d4c:	4619      	mov	r1, r3
 8014d4e:	2208      	movs	r2, #8
 8014d50:	305c      	adds	r0, #92	; 0x5c
 8014d52:	f7fb fddb 	bl	801090c <memset>
 8014d56:	4b05      	ldr	r3, [pc, #20]	; (8014d6c <std+0x38>)
 8014d58:	6263      	str	r3, [r4, #36]	; 0x24
 8014d5a:	4b05      	ldr	r3, [pc, #20]	; (8014d70 <std+0x3c>)
 8014d5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8014d5e:	4b05      	ldr	r3, [pc, #20]	; (8014d74 <std+0x40>)
 8014d60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014d62:	4b05      	ldr	r3, [pc, #20]	; (8014d78 <std+0x44>)
 8014d64:	6224      	str	r4, [r4, #32]
 8014d66:	6323      	str	r3, [r4, #48]	; 0x30
 8014d68:	bd10      	pop	{r4, pc}
 8014d6a:	bf00      	nop
 8014d6c:	08015089 	.word	0x08015089
 8014d70:	080150ab 	.word	0x080150ab
 8014d74:	080150e3 	.word	0x080150e3
 8014d78:	08015107 	.word	0x08015107

08014d7c <_cleanup_r>:
 8014d7c:	4901      	ldr	r1, [pc, #4]	; (8014d84 <_cleanup_r+0x8>)
 8014d7e:	f000 b8af 	b.w	8014ee0 <_fwalk_reent>
 8014d82:	bf00      	nop
 8014d84:	08014cbd 	.word	0x08014cbd

08014d88 <__sfmoreglue>:
 8014d88:	b570      	push	{r4, r5, r6, lr}
 8014d8a:	2268      	movs	r2, #104	; 0x68
 8014d8c:	1e4d      	subs	r5, r1, #1
 8014d8e:	4355      	muls	r5, r2
 8014d90:	460e      	mov	r6, r1
 8014d92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014d96:	f7ff fa5b 	bl	8014250 <_malloc_r>
 8014d9a:	4604      	mov	r4, r0
 8014d9c:	b140      	cbz	r0, 8014db0 <__sfmoreglue+0x28>
 8014d9e:	2100      	movs	r1, #0
 8014da0:	e9c0 1600 	strd	r1, r6, [r0]
 8014da4:	300c      	adds	r0, #12
 8014da6:	60a0      	str	r0, [r4, #8]
 8014da8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014dac:	f7fb fdae 	bl	801090c <memset>
 8014db0:	4620      	mov	r0, r4
 8014db2:	bd70      	pop	{r4, r5, r6, pc}

08014db4 <__sfp_lock_acquire>:
 8014db4:	4801      	ldr	r0, [pc, #4]	; (8014dbc <__sfp_lock_acquire+0x8>)
 8014db6:	f000 b8b3 	b.w	8014f20 <__retarget_lock_acquire_recursive>
 8014dba:	bf00      	nop
 8014dbc:	20011671 	.word	0x20011671

08014dc0 <__sfp_lock_release>:
 8014dc0:	4801      	ldr	r0, [pc, #4]	; (8014dc8 <__sfp_lock_release+0x8>)
 8014dc2:	f000 b8ae 	b.w	8014f22 <__retarget_lock_release_recursive>
 8014dc6:	bf00      	nop
 8014dc8:	20011671 	.word	0x20011671

08014dcc <__sinit_lock_acquire>:
 8014dcc:	4801      	ldr	r0, [pc, #4]	; (8014dd4 <__sinit_lock_acquire+0x8>)
 8014dce:	f000 b8a7 	b.w	8014f20 <__retarget_lock_acquire_recursive>
 8014dd2:	bf00      	nop
 8014dd4:	20011672 	.word	0x20011672

08014dd8 <__sinit_lock_release>:
 8014dd8:	4801      	ldr	r0, [pc, #4]	; (8014de0 <__sinit_lock_release+0x8>)
 8014dda:	f000 b8a2 	b.w	8014f22 <__retarget_lock_release_recursive>
 8014dde:	bf00      	nop
 8014de0:	20011672 	.word	0x20011672

08014de4 <__sinit>:
 8014de4:	b510      	push	{r4, lr}
 8014de6:	4604      	mov	r4, r0
 8014de8:	f7ff fff0 	bl	8014dcc <__sinit_lock_acquire>
 8014dec:	69a3      	ldr	r3, [r4, #24]
 8014dee:	b11b      	cbz	r3, 8014df8 <__sinit+0x14>
 8014df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014df4:	f7ff bff0 	b.w	8014dd8 <__sinit_lock_release>
 8014df8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014dfc:	6523      	str	r3, [r4, #80]	; 0x50
 8014dfe:	4b13      	ldr	r3, [pc, #76]	; (8014e4c <__sinit+0x68>)
 8014e00:	4a13      	ldr	r2, [pc, #76]	; (8014e50 <__sinit+0x6c>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	62a2      	str	r2, [r4, #40]	; 0x28
 8014e06:	42a3      	cmp	r3, r4
 8014e08:	bf04      	itt	eq
 8014e0a:	2301      	moveq	r3, #1
 8014e0c:	61a3      	streq	r3, [r4, #24]
 8014e0e:	4620      	mov	r0, r4
 8014e10:	f000 f820 	bl	8014e54 <__sfp>
 8014e14:	6060      	str	r0, [r4, #4]
 8014e16:	4620      	mov	r0, r4
 8014e18:	f000 f81c 	bl	8014e54 <__sfp>
 8014e1c:	60a0      	str	r0, [r4, #8]
 8014e1e:	4620      	mov	r0, r4
 8014e20:	f000 f818 	bl	8014e54 <__sfp>
 8014e24:	2200      	movs	r2, #0
 8014e26:	60e0      	str	r0, [r4, #12]
 8014e28:	2104      	movs	r1, #4
 8014e2a:	6860      	ldr	r0, [r4, #4]
 8014e2c:	f7ff ff82 	bl	8014d34 <std>
 8014e30:	68a0      	ldr	r0, [r4, #8]
 8014e32:	2201      	movs	r2, #1
 8014e34:	2109      	movs	r1, #9
 8014e36:	f7ff ff7d 	bl	8014d34 <std>
 8014e3a:	68e0      	ldr	r0, [r4, #12]
 8014e3c:	2202      	movs	r2, #2
 8014e3e:	2112      	movs	r1, #18
 8014e40:	f7ff ff78 	bl	8014d34 <std>
 8014e44:	2301      	movs	r3, #1
 8014e46:	61a3      	str	r3, [r4, #24]
 8014e48:	e7d2      	b.n	8014df0 <__sinit+0xc>
 8014e4a:	bf00      	nop
 8014e4c:	08015928 	.word	0x08015928
 8014e50:	08014d7d 	.word	0x08014d7d

08014e54 <__sfp>:
 8014e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e56:	4607      	mov	r7, r0
 8014e58:	f7ff ffac 	bl	8014db4 <__sfp_lock_acquire>
 8014e5c:	4b1e      	ldr	r3, [pc, #120]	; (8014ed8 <__sfp+0x84>)
 8014e5e:	681e      	ldr	r6, [r3, #0]
 8014e60:	69b3      	ldr	r3, [r6, #24]
 8014e62:	b913      	cbnz	r3, 8014e6a <__sfp+0x16>
 8014e64:	4630      	mov	r0, r6
 8014e66:	f7ff ffbd 	bl	8014de4 <__sinit>
 8014e6a:	3648      	adds	r6, #72	; 0x48
 8014e6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014e70:	3b01      	subs	r3, #1
 8014e72:	d503      	bpl.n	8014e7c <__sfp+0x28>
 8014e74:	6833      	ldr	r3, [r6, #0]
 8014e76:	b30b      	cbz	r3, 8014ebc <__sfp+0x68>
 8014e78:	6836      	ldr	r6, [r6, #0]
 8014e7a:	e7f7      	b.n	8014e6c <__sfp+0x18>
 8014e7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014e80:	b9d5      	cbnz	r5, 8014eb8 <__sfp+0x64>
 8014e82:	4b16      	ldr	r3, [pc, #88]	; (8014edc <__sfp+0x88>)
 8014e84:	60e3      	str	r3, [r4, #12]
 8014e86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014e8a:	6665      	str	r5, [r4, #100]	; 0x64
 8014e8c:	f000 f847 	bl	8014f1e <__retarget_lock_init_recursive>
 8014e90:	f7ff ff96 	bl	8014dc0 <__sfp_lock_release>
 8014e94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014e98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014e9c:	6025      	str	r5, [r4, #0]
 8014e9e:	61a5      	str	r5, [r4, #24]
 8014ea0:	2208      	movs	r2, #8
 8014ea2:	4629      	mov	r1, r5
 8014ea4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014ea8:	f7fb fd30 	bl	801090c <memset>
 8014eac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014eb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014eb4:	4620      	mov	r0, r4
 8014eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014eb8:	3468      	adds	r4, #104	; 0x68
 8014eba:	e7d9      	b.n	8014e70 <__sfp+0x1c>
 8014ebc:	2104      	movs	r1, #4
 8014ebe:	4638      	mov	r0, r7
 8014ec0:	f7ff ff62 	bl	8014d88 <__sfmoreglue>
 8014ec4:	4604      	mov	r4, r0
 8014ec6:	6030      	str	r0, [r6, #0]
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	d1d5      	bne.n	8014e78 <__sfp+0x24>
 8014ecc:	f7ff ff78 	bl	8014dc0 <__sfp_lock_release>
 8014ed0:	230c      	movs	r3, #12
 8014ed2:	603b      	str	r3, [r7, #0]
 8014ed4:	e7ee      	b.n	8014eb4 <__sfp+0x60>
 8014ed6:	bf00      	nop
 8014ed8:	08015928 	.word	0x08015928
 8014edc:	ffff0001 	.word	0xffff0001

08014ee0 <_fwalk_reent>:
 8014ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ee4:	4606      	mov	r6, r0
 8014ee6:	4688      	mov	r8, r1
 8014ee8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014eec:	2700      	movs	r7, #0
 8014eee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014ef2:	f1b9 0901 	subs.w	r9, r9, #1
 8014ef6:	d505      	bpl.n	8014f04 <_fwalk_reent+0x24>
 8014ef8:	6824      	ldr	r4, [r4, #0]
 8014efa:	2c00      	cmp	r4, #0
 8014efc:	d1f7      	bne.n	8014eee <_fwalk_reent+0xe>
 8014efe:	4638      	mov	r0, r7
 8014f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f04:	89ab      	ldrh	r3, [r5, #12]
 8014f06:	2b01      	cmp	r3, #1
 8014f08:	d907      	bls.n	8014f1a <_fwalk_reent+0x3a>
 8014f0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014f0e:	3301      	adds	r3, #1
 8014f10:	d003      	beq.n	8014f1a <_fwalk_reent+0x3a>
 8014f12:	4629      	mov	r1, r5
 8014f14:	4630      	mov	r0, r6
 8014f16:	47c0      	blx	r8
 8014f18:	4307      	orrs	r7, r0
 8014f1a:	3568      	adds	r5, #104	; 0x68
 8014f1c:	e7e9      	b.n	8014ef2 <_fwalk_reent+0x12>

08014f1e <__retarget_lock_init_recursive>:
 8014f1e:	4770      	bx	lr

08014f20 <__retarget_lock_acquire_recursive>:
 8014f20:	4770      	bx	lr

08014f22 <__retarget_lock_release_recursive>:
 8014f22:	4770      	bx	lr

08014f24 <__swhatbuf_r>:
 8014f24:	b570      	push	{r4, r5, r6, lr}
 8014f26:	460e      	mov	r6, r1
 8014f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f2c:	2900      	cmp	r1, #0
 8014f2e:	b096      	sub	sp, #88	; 0x58
 8014f30:	4614      	mov	r4, r2
 8014f32:	461d      	mov	r5, r3
 8014f34:	da08      	bge.n	8014f48 <__swhatbuf_r+0x24>
 8014f36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	602a      	str	r2, [r5, #0]
 8014f3e:	061a      	lsls	r2, r3, #24
 8014f40:	d410      	bmi.n	8014f64 <__swhatbuf_r+0x40>
 8014f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014f46:	e00e      	b.n	8014f66 <__swhatbuf_r+0x42>
 8014f48:	466a      	mov	r2, sp
 8014f4a:	f000 f903 	bl	8015154 <_fstat_r>
 8014f4e:	2800      	cmp	r0, #0
 8014f50:	dbf1      	blt.n	8014f36 <__swhatbuf_r+0x12>
 8014f52:	9a01      	ldr	r2, [sp, #4]
 8014f54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014f58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014f5c:	425a      	negs	r2, r3
 8014f5e:	415a      	adcs	r2, r3
 8014f60:	602a      	str	r2, [r5, #0]
 8014f62:	e7ee      	b.n	8014f42 <__swhatbuf_r+0x1e>
 8014f64:	2340      	movs	r3, #64	; 0x40
 8014f66:	2000      	movs	r0, #0
 8014f68:	6023      	str	r3, [r4, #0]
 8014f6a:	b016      	add	sp, #88	; 0x58
 8014f6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014f70 <__smakebuf_r>:
 8014f70:	898b      	ldrh	r3, [r1, #12]
 8014f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014f74:	079d      	lsls	r5, r3, #30
 8014f76:	4606      	mov	r6, r0
 8014f78:	460c      	mov	r4, r1
 8014f7a:	d507      	bpl.n	8014f8c <__smakebuf_r+0x1c>
 8014f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014f80:	6023      	str	r3, [r4, #0]
 8014f82:	6123      	str	r3, [r4, #16]
 8014f84:	2301      	movs	r3, #1
 8014f86:	6163      	str	r3, [r4, #20]
 8014f88:	b002      	add	sp, #8
 8014f8a:	bd70      	pop	{r4, r5, r6, pc}
 8014f8c:	ab01      	add	r3, sp, #4
 8014f8e:	466a      	mov	r2, sp
 8014f90:	f7ff ffc8 	bl	8014f24 <__swhatbuf_r>
 8014f94:	9900      	ldr	r1, [sp, #0]
 8014f96:	4605      	mov	r5, r0
 8014f98:	4630      	mov	r0, r6
 8014f9a:	f7ff f959 	bl	8014250 <_malloc_r>
 8014f9e:	b948      	cbnz	r0, 8014fb4 <__smakebuf_r+0x44>
 8014fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014fa4:	059a      	lsls	r2, r3, #22
 8014fa6:	d4ef      	bmi.n	8014f88 <__smakebuf_r+0x18>
 8014fa8:	f023 0303 	bic.w	r3, r3, #3
 8014fac:	f043 0302 	orr.w	r3, r3, #2
 8014fb0:	81a3      	strh	r3, [r4, #12]
 8014fb2:	e7e3      	b.n	8014f7c <__smakebuf_r+0xc>
 8014fb4:	4b0d      	ldr	r3, [pc, #52]	; (8014fec <__smakebuf_r+0x7c>)
 8014fb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8014fb8:	89a3      	ldrh	r3, [r4, #12]
 8014fba:	6020      	str	r0, [r4, #0]
 8014fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014fc0:	81a3      	strh	r3, [r4, #12]
 8014fc2:	9b00      	ldr	r3, [sp, #0]
 8014fc4:	6163      	str	r3, [r4, #20]
 8014fc6:	9b01      	ldr	r3, [sp, #4]
 8014fc8:	6120      	str	r0, [r4, #16]
 8014fca:	b15b      	cbz	r3, 8014fe4 <__smakebuf_r+0x74>
 8014fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014fd0:	4630      	mov	r0, r6
 8014fd2:	f000 f8d1 	bl	8015178 <_isatty_r>
 8014fd6:	b128      	cbz	r0, 8014fe4 <__smakebuf_r+0x74>
 8014fd8:	89a3      	ldrh	r3, [r4, #12]
 8014fda:	f023 0303 	bic.w	r3, r3, #3
 8014fde:	f043 0301 	orr.w	r3, r3, #1
 8014fe2:	81a3      	strh	r3, [r4, #12]
 8014fe4:	89a0      	ldrh	r0, [r4, #12]
 8014fe6:	4305      	orrs	r5, r0
 8014fe8:	81a5      	strh	r5, [r4, #12]
 8014fea:	e7cd      	b.n	8014f88 <__smakebuf_r+0x18>
 8014fec:	08014d7d 	.word	0x08014d7d

08014ff0 <_malloc_usable_size_r>:
 8014ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ff4:	1f18      	subs	r0, r3, #4
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	bfbc      	itt	lt
 8014ffa:	580b      	ldrlt	r3, [r1, r0]
 8014ffc:	18c0      	addlt	r0, r0, r3
 8014ffe:	4770      	bx	lr

08015000 <_raise_r>:
 8015000:	291f      	cmp	r1, #31
 8015002:	b538      	push	{r3, r4, r5, lr}
 8015004:	4604      	mov	r4, r0
 8015006:	460d      	mov	r5, r1
 8015008:	d904      	bls.n	8015014 <_raise_r+0x14>
 801500a:	2316      	movs	r3, #22
 801500c:	6003      	str	r3, [r0, #0]
 801500e:	f04f 30ff 	mov.w	r0, #4294967295
 8015012:	bd38      	pop	{r3, r4, r5, pc}
 8015014:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015016:	b112      	cbz	r2, 801501e <_raise_r+0x1e>
 8015018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801501c:	b94b      	cbnz	r3, 8015032 <_raise_r+0x32>
 801501e:	4620      	mov	r0, r4
 8015020:	f000 f830 	bl	8015084 <_getpid_r>
 8015024:	462a      	mov	r2, r5
 8015026:	4601      	mov	r1, r0
 8015028:	4620      	mov	r0, r4
 801502a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801502e:	f000 b817 	b.w	8015060 <_kill_r>
 8015032:	2b01      	cmp	r3, #1
 8015034:	d00a      	beq.n	801504c <_raise_r+0x4c>
 8015036:	1c59      	adds	r1, r3, #1
 8015038:	d103      	bne.n	8015042 <_raise_r+0x42>
 801503a:	2316      	movs	r3, #22
 801503c:	6003      	str	r3, [r0, #0]
 801503e:	2001      	movs	r0, #1
 8015040:	e7e7      	b.n	8015012 <_raise_r+0x12>
 8015042:	2400      	movs	r4, #0
 8015044:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015048:	4628      	mov	r0, r5
 801504a:	4798      	blx	r3
 801504c:	2000      	movs	r0, #0
 801504e:	e7e0      	b.n	8015012 <_raise_r+0x12>

08015050 <raise>:
 8015050:	4b02      	ldr	r3, [pc, #8]	; (801505c <raise+0xc>)
 8015052:	4601      	mov	r1, r0
 8015054:	6818      	ldr	r0, [r3, #0]
 8015056:	f7ff bfd3 	b.w	8015000 <_raise_r>
 801505a:	bf00      	nop
 801505c:	20000084 	.word	0x20000084

08015060 <_kill_r>:
 8015060:	b538      	push	{r3, r4, r5, lr}
 8015062:	4d07      	ldr	r5, [pc, #28]	; (8015080 <_kill_r+0x20>)
 8015064:	2300      	movs	r3, #0
 8015066:	4604      	mov	r4, r0
 8015068:	4608      	mov	r0, r1
 801506a:	4611      	mov	r1, r2
 801506c:	602b      	str	r3, [r5, #0]
 801506e:	f7f0 fce9 	bl	8005a44 <_kill>
 8015072:	1c43      	adds	r3, r0, #1
 8015074:	d102      	bne.n	801507c <_kill_r+0x1c>
 8015076:	682b      	ldr	r3, [r5, #0]
 8015078:	b103      	cbz	r3, 801507c <_kill_r+0x1c>
 801507a:	6023      	str	r3, [r4, #0]
 801507c:	bd38      	pop	{r3, r4, r5, pc}
 801507e:	bf00      	nop
 8015080:	2001166c 	.word	0x2001166c

08015084 <_getpid_r>:
 8015084:	f7f0 bcd6 	b.w	8005a34 <_getpid>

08015088 <__sread>:
 8015088:	b510      	push	{r4, lr}
 801508a:	460c      	mov	r4, r1
 801508c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015090:	f000 f894 	bl	80151bc <_read_r>
 8015094:	2800      	cmp	r0, #0
 8015096:	bfab      	itete	ge
 8015098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801509a:	89a3      	ldrhlt	r3, [r4, #12]
 801509c:	181b      	addge	r3, r3, r0
 801509e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80150a2:	bfac      	ite	ge
 80150a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80150a6:	81a3      	strhlt	r3, [r4, #12]
 80150a8:	bd10      	pop	{r4, pc}

080150aa <__swrite>:
 80150aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150ae:	461f      	mov	r7, r3
 80150b0:	898b      	ldrh	r3, [r1, #12]
 80150b2:	05db      	lsls	r3, r3, #23
 80150b4:	4605      	mov	r5, r0
 80150b6:	460c      	mov	r4, r1
 80150b8:	4616      	mov	r6, r2
 80150ba:	d505      	bpl.n	80150c8 <__swrite+0x1e>
 80150bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150c0:	2302      	movs	r3, #2
 80150c2:	2200      	movs	r2, #0
 80150c4:	f000 f868 	bl	8015198 <_lseek_r>
 80150c8:	89a3      	ldrh	r3, [r4, #12]
 80150ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80150d2:	81a3      	strh	r3, [r4, #12]
 80150d4:	4632      	mov	r2, r6
 80150d6:	463b      	mov	r3, r7
 80150d8:	4628      	mov	r0, r5
 80150da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150de:	f000 b817 	b.w	8015110 <_write_r>

080150e2 <__sseek>:
 80150e2:	b510      	push	{r4, lr}
 80150e4:	460c      	mov	r4, r1
 80150e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150ea:	f000 f855 	bl	8015198 <_lseek_r>
 80150ee:	1c43      	adds	r3, r0, #1
 80150f0:	89a3      	ldrh	r3, [r4, #12]
 80150f2:	bf15      	itete	ne
 80150f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80150f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80150fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80150fe:	81a3      	strheq	r3, [r4, #12]
 8015100:	bf18      	it	ne
 8015102:	81a3      	strhne	r3, [r4, #12]
 8015104:	bd10      	pop	{r4, pc}

08015106 <__sclose>:
 8015106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801510a:	f000 b813 	b.w	8015134 <_close_r>
	...

08015110 <_write_r>:
 8015110:	b538      	push	{r3, r4, r5, lr}
 8015112:	4d07      	ldr	r5, [pc, #28]	; (8015130 <_write_r+0x20>)
 8015114:	4604      	mov	r4, r0
 8015116:	4608      	mov	r0, r1
 8015118:	4611      	mov	r1, r2
 801511a:	2200      	movs	r2, #0
 801511c:	602a      	str	r2, [r5, #0]
 801511e:	461a      	mov	r2, r3
 8015120:	f7f0 fcc7 	bl	8005ab2 <_write>
 8015124:	1c43      	adds	r3, r0, #1
 8015126:	d102      	bne.n	801512e <_write_r+0x1e>
 8015128:	682b      	ldr	r3, [r5, #0]
 801512a:	b103      	cbz	r3, 801512e <_write_r+0x1e>
 801512c:	6023      	str	r3, [r4, #0]
 801512e:	bd38      	pop	{r3, r4, r5, pc}
 8015130:	2001166c 	.word	0x2001166c

08015134 <_close_r>:
 8015134:	b538      	push	{r3, r4, r5, lr}
 8015136:	4d06      	ldr	r5, [pc, #24]	; (8015150 <_close_r+0x1c>)
 8015138:	2300      	movs	r3, #0
 801513a:	4604      	mov	r4, r0
 801513c:	4608      	mov	r0, r1
 801513e:	602b      	str	r3, [r5, #0]
 8015140:	f7f0 fcd3 	bl	8005aea <_close>
 8015144:	1c43      	adds	r3, r0, #1
 8015146:	d102      	bne.n	801514e <_close_r+0x1a>
 8015148:	682b      	ldr	r3, [r5, #0]
 801514a:	b103      	cbz	r3, 801514e <_close_r+0x1a>
 801514c:	6023      	str	r3, [r4, #0]
 801514e:	bd38      	pop	{r3, r4, r5, pc}
 8015150:	2001166c 	.word	0x2001166c

08015154 <_fstat_r>:
 8015154:	b538      	push	{r3, r4, r5, lr}
 8015156:	4d07      	ldr	r5, [pc, #28]	; (8015174 <_fstat_r+0x20>)
 8015158:	2300      	movs	r3, #0
 801515a:	4604      	mov	r4, r0
 801515c:	4608      	mov	r0, r1
 801515e:	4611      	mov	r1, r2
 8015160:	602b      	str	r3, [r5, #0]
 8015162:	f7f0 fcce 	bl	8005b02 <_fstat>
 8015166:	1c43      	adds	r3, r0, #1
 8015168:	d102      	bne.n	8015170 <_fstat_r+0x1c>
 801516a:	682b      	ldr	r3, [r5, #0]
 801516c:	b103      	cbz	r3, 8015170 <_fstat_r+0x1c>
 801516e:	6023      	str	r3, [r4, #0]
 8015170:	bd38      	pop	{r3, r4, r5, pc}
 8015172:	bf00      	nop
 8015174:	2001166c 	.word	0x2001166c

08015178 <_isatty_r>:
 8015178:	b538      	push	{r3, r4, r5, lr}
 801517a:	4d06      	ldr	r5, [pc, #24]	; (8015194 <_isatty_r+0x1c>)
 801517c:	2300      	movs	r3, #0
 801517e:	4604      	mov	r4, r0
 8015180:	4608      	mov	r0, r1
 8015182:	602b      	str	r3, [r5, #0]
 8015184:	f7f0 fccd 	bl	8005b22 <_isatty>
 8015188:	1c43      	adds	r3, r0, #1
 801518a:	d102      	bne.n	8015192 <_isatty_r+0x1a>
 801518c:	682b      	ldr	r3, [r5, #0]
 801518e:	b103      	cbz	r3, 8015192 <_isatty_r+0x1a>
 8015190:	6023      	str	r3, [r4, #0]
 8015192:	bd38      	pop	{r3, r4, r5, pc}
 8015194:	2001166c 	.word	0x2001166c

08015198 <_lseek_r>:
 8015198:	b538      	push	{r3, r4, r5, lr}
 801519a:	4d07      	ldr	r5, [pc, #28]	; (80151b8 <_lseek_r+0x20>)
 801519c:	4604      	mov	r4, r0
 801519e:	4608      	mov	r0, r1
 80151a0:	4611      	mov	r1, r2
 80151a2:	2200      	movs	r2, #0
 80151a4:	602a      	str	r2, [r5, #0]
 80151a6:	461a      	mov	r2, r3
 80151a8:	f7f0 fcc6 	bl	8005b38 <_lseek>
 80151ac:	1c43      	adds	r3, r0, #1
 80151ae:	d102      	bne.n	80151b6 <_lseek_r+0x1e>
 80151b0:	682b      	ldr	r3, [r5, #0]
 80151b2:	b103      	cbz	r3, 80151b6 <_lseek_r+0x1e>
 80151b4:	6023      	str	r3, [r4, #0]
 80151b6:	bd38      	pop	{r3, r4, r5, pc}
 80151b8:	2001166c 	.word	0x2001166c

080151bc <_read_r>:
 80151bc:	b538      	push	{r3, r4, r5, lr}
 80151be:	4d07      	ldr	r5, [pc, #28]	; (80151dc <_read_r+0x20>)
 80151c0:	4604      	mov	r4, r0
 80151c2:	4608      	mov	r0, r1
 80151c4:	4611      	mov	r1, r2
 80151c6:	2200      	movs	r2, #0
 80151c8:	602a      	str	r2, [r5, #0]
 80151ca:	461a      	mov	r2, r3
 80151cc:	f7f0 fc54 	bl	8005a78 <_read>
 80151d0:	1c43      	adds	r3, r0, #1
 80151d2:	d102      	bne.n	80151da <_read_r+0x1e>
 80151d4:	682b      	ldr	r3, [r5, #0]
 80151d6:	b103      	cbz	r3, 80151da <_read_r+0x1e>
 80151d8:	6023      	str	r3, [r4, #0]
 80151da:	bd38      	pop	{r3, r4, r5, pc}
 80151dc:	2001166c 	.word	0x2001166c

080151e0 <_init>:
 80151e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151e2:	bf00      	nop
 80151e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151e6:	bc08      	pop	{r3}
 80151e8:	469e      	mov	lr, r3
 80151ea:	4770      	bx	lr

080151ec <_fini>:
 80151ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151ee:	bf00      	nop
 80151f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151f2:	bc08      	pop	{r3}
 80151f4:	469e      	mov	lr, r3
 80151f6:	4770      	bx	lr
