
C3V1-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4f4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800c6b4  0800c6b4  0001c6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb40  0800cb40  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb40  0800cb40  0001cb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb48  0800cb48  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb48  0800cb48  0001cb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb4c  0800cb4c  0001cb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800cb50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c578  200000e8  0800cc38  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  2000c660  0800cc38  0002c660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a962  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c5f  00000000  00000000  0004aa7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020a0  00000000  00000000  000506e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e18  00000000  00000000  00052780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003338c  00000000  00000000  00054598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029a98  00000000  00000000  00087924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a07c  00000000  00000000  000b13bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001db438  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008980  00000000  00000000  001db488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000e8 	.word	0x200000e8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c69c 	.word	0x0800c69c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000ec 	.word	0x200000ec
 80001fc:	0800c69c 	.word	0x0800c69c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <GFX_DrawPixelScreen>:

#if USING_STRINGS == 1
const uint8_t *font;
uint8_t size = 1;
static void GFX_DrawPixelScreen(uint16_t x, uint16_t y, uint8_t color, Screen_TypeDef Screen)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4604      	mov	r4, r0
 80005ac:	4608      	mov	r0, r1
 80005ae:	4611      	mov	r1, r2
 80005b0:	461a      	mov	r2, r3
 80005b2:	4623      	mov	r3, r4
 80005b4:	80fb      	strh	r3, [r7, #6]
 80005b6:	4603      	mov	r3, r0
 80005b8:	80bb      	strh	r3, [r7, #4]
 80005ba:	460b      	mov	r3, r1
 80005bc:	70fb      	strb	r3, [r7, #3]
 80005be:	4613      	mov	r3, r2
 80005c0:	70bb      	strb	r3, [r7, #2]
   if(Screen == OLED)
 80005c2:	78bb      	ldrb	r3, [r7, #2]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d108      	bne.n	80005da <GFX_DrawPixelScreen+0x36>
   {
      GFX_DrawPixelOled(x, y, color);
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	88ba      	ldrh	r2, [r7, #4]
 80005ce:	b2d1      	uxtb	r1, r2
 80005d0:	78fa      	ldrb	r2, [r7, #3]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fc3e 	bl	8001e54 <ssd1306_set_pixel>
   }
   else if(Screen == E_PAPIER)
   {
      GFX_DrawPixelEpapier(x, y, color);
   }
}
 80005d8:	e008      	b.n	80005ec <GFX_DrawPixelScreen+0x48>
   else if(Screen == E_PAPIER)
 80005da:	78bb      	ldrb	r3, [r7, #2]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d105      	bne.n	80005ec <GFX_DrawPixelScreen+0x48>
      GFX_DrawPixelEpapier(x, y, color);
 80005e0:	78fa      	ldrb	r2, [r7, #3]
 80005e2:	88b9      	ldrh	r1, [r7, #4]
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fb90 	bl	8000d0c <e_papier_set_pixel>
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd90      	pop	{r4, r7, pc}

080005f4 <GFX_SetFont>:
void GFX_SetFont(const uint8_t *font_t)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
   font = font_t;
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <GFX_SetFont+0x1c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6013      	str	r3, [r2, #0]
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000104 	.word	0x20000104

08000614 <GFX_DrawChar>:
{
   return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b089      	sub	sp, #36	; 0x24
 8000618:	af02      	add	r7, sp, #8
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	4611      	mov	r1, r2
 8000620:	461a      	mov	r2, r3
 8000622:	460b      	mov	r3, r1
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	4613      	mov	r3, r2
 8000628:	71bb      	strb	r3, [r7, #6]
   if(chr > 0x7E)
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b7e      	cmp	r3, #126	; 0x7e
 800062e:	f200 80a7 	bhi.w	8000780 <GFX_DrawChar+0x16c>
      return; // chr > '~'

   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 8000632:	2300      	movs	r3, #0
 8000634:	75fb      	strb	r3, [r7, #23]
 8000636:	e09a      	b.n	800076e <GFX_DrawChar+0x15a>
   {
      uint8_t line = (uint8_t)font[(chr - 0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8000638:	4b53      	ldr	r3, [pc, #332]	; (8000788 <GFX_DrawChar+0x174>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	3b20      	subs	r3, #32
 8000640:	4951      	ldr	r1, [pc, #324]	; (8000788 <GFX_DrawChar+0x174>)
 8000642:	6809      	ldr	r1, [r1, #0]
 8000644:	3101      	adds	r1, #1
 8000646:	7809      	ldrb	r1, [r1, #0]
 8000648:	fb03 f101 	mul.w	r1, r3, r1
 800064c:	7dfb      	ldrb	r3, [r7, #23]
 800064e:	440b      	add	r3, r1
 8000650:	3302      	adds	r3, #2
 8000652:	4413      	add	r3, r2
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	75bb      	strb	r3, [r7, #22]

      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 8000658:	2300      	movs	r3, #0
 800065a:	757b      	strb	r3, [r7, #21]
 800065c:	e07c      	b.n	8000758 <GFX_DrawChar+0x144>
      {
         if(line & 1) // Check last pixel in line
 800065e:	7dbb      	ldrb	r3, [r7, #22]
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d034      	beq.n	80006d2 <GFX_DrawChar+0xbe>
         {
            if(size == 1)
 8000668:	4b48      	ldr	r3, [pc, #288]	; (800078c <GFX_DrawChar+0x178>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d112      	bne.n	8000696 <GFX_DrawChar+0x82>
               GFX_DrawPixelScreen(x + i, y + j, color, Screen); // Draw this pixel
 8000670:	7dfb      	ldrb	r3, [r7, #23]
 8000672:	b29a      	uxth	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	b29b      	uxth	r3, r3
 8000678:	4413      	add	r3, r2
 800067a:	b298      	uxth	r0, r3
 800067c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000680:	b29a      	uxth	r2, r3
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	b29b      	uxth	r3, r3
 8000686:	4413      	add	r3, r2
 8000688:	b299      	uxth	r1, r3
 800068a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800068e:	79ba      	ldrb	r2, [r7, #6]
 8000690:	f7ff ff88 	bl	80005a4 <GFX_DrawPixelScreen>
 8000694:	e057      	b.n	8000746 <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, color, Screen); // Or bigger pixel
 8000696:	7dfb      	ldrb	r3, [r7, #23]
 8000698:	4a3c      	ldr	r2, [pc, #240]	; (800078c <GFX_DrawChar+0x178>)
 800069a:	7812      	ldrb	r2, [r2, #0]
 800069c:	fb03 f202 	mul.w	r2, r3, r2
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	18d0      	adds	r0, r2, r3
 80006a4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80006a8:	4a38      	ldr	r2, [pc, #224]	; (800078c <GFX_DrawChar+0x178>)
 80006aa:	7812      	ldrb	r2, [r2, #0]
 80006ac:	fb03 f202 	mul.w	r2, r3, r2
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	18d1      	adds	r1, r2, r3
 80006b4:	4b35      	ldr	r3, [pc, #212]	; (800078c <GFX_DrawChar+0x178>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <GFX_DrawChar+0x178>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b29c      	uxth	r4, r3
 80006c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	79bb      	ldrb	r3, [r7, #6]
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	4623      	mov	r3, r4
 80006cc:	f000 f968 	bl	80009a0 <GFX_DrawFillRectangle>
 80006d0:	e039      	b.n	8000746 <GFX_DrawChar+0x132>
         }
         else if(background == 0)
 80006d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d135      	bne.n	8000746 <GFX_DrawChar+0x132>
         {
            if(size == 1)
 80006da:	4b2c      	ldr	r3, [pc, #176]	; (800078c <GFX_DrawChar+0x178>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d113      	bne.n	800070a <GFX_DrawChar+0xf6>
               GFX_DrawPixelScreen(x + i, y + j, background, Screen); // Draw black BG
 80006e2:	7dfb      	ldrb	r3, [r7, #23]
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	4413      	add	r3, r2
 80006ec:	b298      	uxth	r0, r3
 80006ee:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	4413      	add	r3, r2
 80006fa:	b299      	uxth	r1, r3
 80006fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000700:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000704:	f7ff ff4e 	bl	80005a4 <GFX_DrawPixelScreen>
 8000708:	e01d      	b.n	8000746 <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, background, Screen); // Or bigger
 800070a:	7dfb      	ldrb	r3, [r7, #23]
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <GFX_DrawChar+0x178>)
 800070e:	7812      	ldrb	r2, [r2, #0]
 8000710:	fb03 f202 	mul.w	r2, r3, r2
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	18d0      	adds	r0, r2, r3
 8000718:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800071c:	4a1b      	ldr	r2, [pc, #108]	; (800078c <GFX_DrawChar+0x178>)
 800071e:	7812      	ldrb	r2, [r2, #0]
 8000720:	fb03 f202 	mul.w	r2, r3, r2
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	18d1      	adds	r1, r2, r3
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <GFX_DrawChar+0x178>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b29a      	uxth	r2, r3
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <GFX_DrawChar+0x178>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b29c      	uxth	r4, r3
 8000734:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	4623      	mov	r3, r4
 8000742:	f000 f92d 	bl	80009a0 <GFX_DrawFillRectangle>
      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 8000746:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	3301      	adds	r3, #1
 800074e:	b2db      	uxtb	r3, r3
 8000750:	757b      	strb	r3, [r7, #21]
 8000752:	7dbb      	ldrb	r3, [r7, #22]
 8000754:	085b      	lsrs	r3, r3, #1
 8000756:	75bb      	strb	r3, [r7, #22]
 8000758:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800075c:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <GFX_DrawChar+0x174>)
 800075e:	6812      	ldr	r2, [r2, #0]
 8000760:	7812      	ldrb	r2, [r2, #0]
 8000762:	4293      	cmp	r3, r2
 8000764:	f6ff af7b 	blt.w	800065e <GFX_DrawChar+0x4a>
   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 8000768:	7dfb      	ldrb	r3, [r7, #23]
 800076a:	3301      	adds	r3, #1
 800076c:	75fb      	strb	r3, [r7, #23]
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <GFX_DrawChar+0x174>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	3301      	adds	r3, #1
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	7dfa      	ldrb	r2, [r7, #23]
 8000778:	429a      	cmp	r2, r3
 800077a:	f4ff af5d 	bcc.w	8000638 <GFX_DrawChar+0x24>
 800077e:	e000      	b.n	8000782 <GFX_DrawChar+0x16e>
      return; // chr > '~'
 8000780:	bf00      	nop
         }
      }
   }
}
 8000782:	371c      	adds	r7, #28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd90      	pop	{r4, r7, pc}
 8000788:	20000104 	.word	0x20000104
 800078c:	20000000 	.word	0x20000000

08000790 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char *str, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af02      	add	r7, sp, #8
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	70fb      	strb	r3, [r7, #3]
   int x_tmp = x;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	617b      	str	r3, [r7, #20]

   char znak;
   znak = *str;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	74fb      	strb	r3, [r7, #19]

   while(*str++)
 80007a8:	e040      	b.n	800082c <GFX_DrawString+0x9c>
   {
      GFX_DrawChar(x_tmp, y, znak, color, background, Screen); // Draw current char
 80007aa:	78f9      	ldrb	r1, [r7, #3]
 80007ac:	7cfa      	ldrb	r2, [r7, #19]
 80007ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007b2:	9301      	str	r3, [sp, #4]
 80007b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	460b      	mov	r3, r1
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f7ff ff28 	bl	8000614 <GFX_DrawChar>

      x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <GFX_DrawString+0xb4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <GFX_DrawString+0xb8>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	fb02 f303 	mul.w	r3, r2, r3
 80007d6:	3301      	adds	r3, #1
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	4413      	add	r3, r2
 80007dc:	617b      	str	r3, [r7, #20]

      if(background == 0) // Draw black space if needed
 80007de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d11f      	bne.n	8000826 <GFX_DrawString+0x96>
      {
         for(uint8_t i = 0; i < (font[0] * size); i++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	74bb      	strb	r3, [r7, #18]
 80007ea:	e011      	b.n	8000810 <GFX_DrawString+0x80>
         {
            GFX_DrawPixelScreen(x_tmp - 1, y + i, PIXEL_BLACK, Screen);
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	3b01      	subs	r3, #1
 80007f2:	b298      	uxth	r0, r3
 80007f4:	7cbb      	ldrb	r3, [r7, #18]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	4413      	add	r3, r2
 80007fe:	b299      	uxth	r1, r3
 8000800:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000804:	2200      	movs	r2, #0
 8000806:	f7ff fecd 	bl	80005a4 <GFX_DrawPixelScreen>
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800080a:	7cbb      	ldrb	r3, [r7, #18]
 800080c:	3301      	adds	r3, #1
 800080e:	74bb      	strb	r3, [r7, #18]
 8000810:	7cba      	ldrb	r2, [r7, #18]
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <GFX_DrawString+0xb4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <GFX_DrawString+0xb8>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	fb01 f303 	mul.w	r3, r1, r3
 8000822:	429a      	cmp	r2, r3
 8000824:	dbe2      	blt.n	80007ec <GFX_DrawString+0x5c>
         }
      }

      znak = *str; // Next char
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	74fb      	strb	r3, [r7, #19]
   while(*str++)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1b8      	bne.n	80007aa <GFX_DrawString+0x1a>
   }
}
 8000838:	bf00      	nop
 800083a:	bf00      	nop
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000104 	.word	0x20000104
 8000848:	20000000 	.word	0x20000000

0800084c <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color, Screen_TypeDef Screen)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	603b      	str	r3, [r7, #0]
   int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800085a:	683a      	ldr	r2, [r7, #0]
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000864:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000868:	6879      	ldr	r1, [r7, #4]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	1acb      	subs	r3, r1, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	bfb8      	it	lt
 8000872:	425b      	neglt	r3, r3
 8000874:	429a      	cmp	r2, r3
 8000876:	bfcc      	ite	gt
 8000878:	2301      	movgt	r3, #1
 800087a:	2300      	movle	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	857b      	strh	r3, [r7, #42]	; 0x2a

   if(steep)
 8000880:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000884:	2b00      	cmp	r3, #0
 8000886:	d00b      	beq.n	80008a0 <GFX_WriteLine+0x54>
   {
      _swap_int(x_start, y_start);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000892:	60bb      	str	r3, [r7, #8]
      _swap_int(x_end, y_end);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	623b      	str	r3, [r7, #32]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	603b      	str	r3, [r7, #0]
   }

   if(x_start > x_end)
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dd0b      	ble.n	80008c0 <GFX_WriteLine+0x74>
   {
      _swap_int(x_start, x_end);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	607b      	str	r3, [r7, #4]
      _swap_int(y_start, y_end);
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	603b      	str	r3, [r7, #0]
   }

   int16_t dx, dy;
   dx = x_end - x_start;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	82fb      	strh	r3, [r7, #22]
   dy = abs(y_end - y_start);
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	bfb8      	it	lt
 80008d8:	425b      	neglt	r3, r3
 80008da:	82bb      	strh	r3, [r7, #20]

   int16_t err = dx / 2;
 80008dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008e0:	0fda      	lsrs	r2, r3, #31
 80008e2:	4413      	add	r3, r2
 80008e4:	105b      	asrs	r3, r3, #1
 80008e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
   int16_t ystep;

   if(y_start < y_end)
 80008e8:	68ba      	ldr	r2, [r7, #8]
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	da02      	bge.n	80008f6 <GFX_WriteLine+0xaa>
   {
      ystep = 1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80008f4:	e032      	b.n	800095c <GFX_WriteLine+0x110>
   }
   else
   {
      ystep = -1;
 80008f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
   }

   for(; x_start <= x_end; x_start++)
 80008fc:	e02e      	b.n	800095c <GFX_WriteLine+0x110>
   {
      if(steep)
 80008fe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000902:	2b00      	cmp	r3, #0
 8000904:	d00a      	beq.n	800091c <GFX_WriteLine+0xd0>
      {
         GFX_DrawPixelScreen(y_start, x_start, color, Screen);
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	b298      	uxth	r0, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	b299      	uxth	r1, r3
 800090e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000912:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000916:	f7ff fe45 	bl	80005a4 <GFX_DrawPixelScreen>
 800091a:	e009      	b.n	8000930 <GFX_WriteLine+0xe4>
      }
      else
      {
         GFX_DrawPixelScreen(x_start, y_start, color, Screen);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	b298      	uxth	r0, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	b299      	uxth	r1, r3
 8000924:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000928:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800092c:	f7ff fe3a 	bl	80005a4 <GFX_DrawPixelScreen>
      }
      err -= dy;
 8000930:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000932:	8abb      	ldrh	r3, [r7, #20]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	b29b      	uxth	r3, r3
 8000938:	85fb      	strh	r3, [r7, #46]	; 0x2e
      if(err < 0)
 800093a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800093e:	2b00      	cmp	r3, #0
 8000940:	da09      	bge.n	8000956 <GFX_WriteLine+0x10a>
      {
         y_start += ystep;
 8000942:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	4413      	add	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
         err += dx;
 800094c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800094e:	8afb      	ldrh	r3, [r7, #22]
 8000950:	4413      	add	r3, r2
 8000952:	b29b      	uxth	r3, r3
 8000954:	85fb      	strh	r3, [r7, #46]	; 0x2e
   for(; x_start <= x_end; x_start++)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	3301      	adds	r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fa      	ldr	r2, [r7, #12]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	ddcc      	ble.n	80008fe <GFX_WriteLine+0xb2>
      }
   }
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3730      	adds	r7, #48	; 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color, Screen_TypeDef Screen)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b086      	sub	sp, #24
 8000972:	af02      	add	r7, sp, #8
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
 800097a:	70fb      	strb	r3, [r7, #3]
   GFX_WriteLine(x_start, y_start, x_start, y_start + h - 1, color, Screen);
 800097c:	68ba      	ldr	r2, [r7, #8]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	1e5a      	subs	r2, r3, #1
 8000984:	7e3b      	ldrb	r3, [r7, #24]
 8000986:	9301      	str	r3, [sp, #4]
 8000988:	78fb      	ldrb	r3, [r7, #3]
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	4613      	mov	r3, r2
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f7ff ff5a 	bl	800084c <GFX_WriteLine>
}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <GFX_DrawFillRectangle>:
   GFX_DrawFastVLine(x + w - 1, y, h, color, Screen);
}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color, Screen_TypeDef Screen)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af02      	add	r7, sp, #8
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	4611      	mov	r1, r2
 80009ac:	461a      	mov	r2, r3
 80009ae:	460b      	mov	r3, r1
 80009b0:	80fb      	strh	r3, [r7, #6]
 80009b2:	4613      	mov	r3, r2
 80009b4:	80bb      	strh	r3, [r7, #4]
   for(int i = x; i < x + w; i++)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	e00d      	b.n	80009d8 <GFX_DrawFillRectangle+0x38>
   {
      GFX_DrawFastVLine(i, y, h, color, Screen);
 80009bc:	88ba      	ldrh	r2, [r7, #4]
 80009be:	f897 1020 	ldrb.w	r1, [r7, #32]
 80009c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	460b      	mov	r3, r1
 80009ca:	68b9      	ldr	r1, [r7, #8]
 80009cc:	6978      	ldr	r0, [r7, #20]
 80009ce:	f7ff ffce 	bl	800096e <GFX_DrawFastVLine>
   for(int i = x; i < x + w; i++)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	88fa      	ldrh	r2, [r7, #6]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4413      	add	r3, r2
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	dbeb      	blt.n	80009bc <GFX_DrawFillRectangle+0x1c>
   }
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HC12_ExitCommandMode>:
void HC12_EnterCommandMode(void)
{
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 0);
}
void HC12_ExitCommandMode(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 1);
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f002 fcc2 	bl	8003384 <HAL_GPIO_WritePin>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <HC12_TransmitData>:
void HC12_TransmitData(uint8_t *Data, uint32_t Length)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
   HAL_UART_Transmit(&huart1, Data, Length, 1000);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <HC12_TransmitData+0x24>)
 8000a1a:	f006 fab7 	bl	8006f8c <HAL_UART_Transmit>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200042dc 	.word	0x200042dc

08000a2c <HC12_ReciveToIdleDMA>:
void HC12_ReciveToIdleDMA(uint8_t *Data, uint32_t Length)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	6879      	ldr	r1, [r7, #4]
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <HC12_ReciveToIdleDMA+0x20>)
 8000a40:	f007 fe8a 	bl	8008758 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200042dc 	.word	0x200042dc

08000a50 <HC12_Init>:
void HC12_Init(RFP_TypeDef *TempRfp, uint8_t *Buffer)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
   rfp      = TempRfp;
 8000a5a:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <HC12_Init+0x24>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6013      	str	r3, [r2, #0]
   HC12Data = Buffer;
 8000a60:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <HC12_Init+0x28>)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	6013      	str	r3, [r2, #0]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000108 	.word	0x20000108
 8000a78:	2000010c 	.word	0x2000010c

08000a7c <Crc>:
#include "crc.h"
#include "main.h"
int RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
int k              = 0;
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b087      	sub	sp, #28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
   PreviuseCRC ^= data[0];
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4053      	eors	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8000a94:	2301      	movs	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e032      	b.n	8000b00 <Crc+0x84>
   {
      uint32_t temp = data[i];
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	613b      	str	r3, [r7, #16]
      if(temp == 0x00000000 )
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d115      	bne.n	8000ad6 <Crc+0x5a>
      {
         temp = RandomNumber[k % (sizeof(RandomNumber)-1)];
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <Crc+0xa0>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <Crc+0xa4>)
 8000ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8000ab6:	095a      	lsrs	r2, r3, #5
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	011b      	lsls	r3, r3, #4
 8000ac0:	1a9b      	subs	r3, r3, r2
 8000ac2:	1aca      	subs	r2, r1, r3
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <Crc+0xa8>)
 8000ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aca:	613b      	str	r3, [r7, #16]
         k++;
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <Crc+0xa0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <Crc+0xa0>)
 8000ad4:	6013      	str	r3, [r2, #0]
      }
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	fb02 f303 	mul.w	r3, r2, r3
 8000ade:	021b      	lsls	r3, r3, #8
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	4053      	eors	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
      if(PreviuseCRC & 0x80000000)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	da03      	bge.n	8000af4 <Crc+0x78>
      {
         PreviuseCRC ^= 0xABC245C2;
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <Crc+0xac>)
 8000af0:	4053      	eors	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
      }
      PreviuseCRC <<= 1;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	3301      	adds	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d3c8      	bcc.n	8000a9a <Crc+0x1e>
   }
   k = 0;
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <Crc+0xa0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
   return PreviuseCRC;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	371c      	adds	r7, #28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	20000110 	.word	0x20000110
 8000b20:	ae4c415d 	.word	0xae4c415d
 8000b24:	20000004 	.word	0x20000004
 8000b28:	abc245c2 	.word	0xabc245c2

08000b2c <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
   uint8_t temp = 1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	75fb      	strb	r3, [r7, #23]
   for(int i = 0; i < DataLength; i++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
 8000b40:	e03b      	b.n	8000bba <RepareMessage+0x8e>
   {
      for(int j = 0; j < 8; j++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
 8000b46:	e032      	b.n	8000bae <RepareMessage+0x82>
      {
         data[i] ^= (temp << j);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b25a      	sxtb	r2, r3
 8000b52:	7df9      	ldrb	r1, [r7, #23]
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5a:	b25b      	sxtb	r3, r3
 8000b5c:	4053      	eors	r3, r2
 8000b5e:	b259      	sxtb	r1, r3
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	4413      	add	r3, r2
 8000b66:	b2ca      	uxtb	r2, r1
 8000b68:	701a      	strb	r2, [r3, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3b04      	subs	r3, #4
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 30ff 	mov.w	r0, #4294967295
 8000b76:	f7ff ff81 	bl	8000a7c <Crc>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <RepareMessage+0x5a>
         {
            return CRC_OK;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e01e      	b.n	8000bc4 <RepareMessage+0x98>
         }
         else
         {
            data[i] ^= (temp << j);
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b25a      	sxtb	r2, r3
 8000b90:	7df9      	ldrb	r1, [r7, #23]
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	fa01 f303 	lsl.w	r3, r1, r3
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	4053      	eors	r3, r2
 8000b9c:	b259      	sxtb	r1, r3
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b2ca      	uxtb	r2, r1
 8000ba6:	701a      	strb	r2, [r3, #0]
      for(int j = 0; j < 8; j++)
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	3301      	adds	r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	2b07      	cmp	r3, #7
 8000bb2:	ddc9      	ble.n	8000b48 <RepareMessage+0x1c>
   for(int i = 0; i < DataLength; i++)
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d8bf      	bhi.n	8000b42 <RepareMessage+0x16>
         }
      }
   }
   return CRC_ERROR;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_DMA_Init+0x44>)
 8000bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <MX_DMA_Init+0x44>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6493      	str	r3, [r2, #72]	; 0x48
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_DMA_Init+0x44>)
 8000be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_DMA_Init+0x44>)
 8000bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <MX_DMA_Init+0x44>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6493      	str	r3, [r2, #72]	; 0x48
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_DMA_Init+0x44>)
 8000bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000

08000c14 <e_papier_reset>:
const unsigned char lut_bb[] = {
   0x80, 0x17, 0x00, 0x00, 0x00, 0x02, 0x90, 0x17, 0x17, 0x00, 0x00, 0x02, 0x80, 0x0A, 0x01, 0x00, 0x00, 0x01, 0x50, 0x0E, 0x0E,
   0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
void e_papier_reset(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <e_papier_reset+0x40>)
 8000c20:	f002 fbb0 	bl	8003384 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c24:	20c8      	movs	r0, #200	; 0xc8
 8000c26:	f001 fdcf 	bl	80027c8 <HAL_Delay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <e_papier_reset+0x40>)
 8000c32:	f002 fba7 	bl	8003384 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c36:	20c8      	movs	r0, #200	; 0xc8
 8000c38:	f001 fdc6 	bl	80027c8 <HAL_Delay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c42:	4804      	ldr	r0, [pc, #16]	; (8000c54 <e_papier_reset+0x40>)
 8000c44:	f002 fb9e 	bl	8003384 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c48:	20c8      	movs	r0, #200	; 0xc8
 8000c4a:	f001 fdbd 	bl	80027c8 <HAL_Delay>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	48000400 	.word	0x48000400

08000c58 <e_papier_send_command>:
void e_papier_send_command(uint8_t command)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2101      	movs	r1, #1
 8000c66:	480c      	ldr	r0, [pc, #48]	; (8000c98 <e_papier_send_command+0x40>)
 8000c68:	f002 fb8c 	bl	8003384 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2102      	movs	r1, #2
 8000c70:	4809      	ldr	r0, [pc, #36]	; (8000c98 <e_papier_send_command+0x40>)
 8000c72:	f002 fb87 	bl	8003384 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &command, 1, 1000);
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <e_papier_send_command+0x44>)
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	1df9      	adds	r1, r7, #7
 8000c7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c80:	2201      	movs	r2, #1
 8000c82:	f004 fcbc 	bl	80055fe <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 8000c86:	2201      	movs	r2, #1
 8000c88:	2102      	movs	r1, #2
 8000c8a:	4803      	ldr	r0, [pc, #12]	; (8000c98 <e_papier_send_command+0x40>)
 8000c8c:	f002 fb7a 	bl	8003384 <HAL_GPIO_WritePin>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	48000400 	.word	0x48000400
 8000c9c:	20000114 	.word	0x20000114

08000ca0 <e_papier_send_data>:
void e_papier_send_data(uint8_t data)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 1);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2101      	movs	r1, #1
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <e_papier_send_data+0x40>)
 8000cb0:	f002 fb68 	bl	8003384 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <e_papier_send_data+0x40>)
 8000cba:	f002 fb63 	bl	8003384 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &data, 1, 1000);
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <e_papier_send_data+0x44>)
 8000cc0:	6818      	ldr	r0, [r3, #0]
 8000cc2:	1df9      	adds	r1, r7, #7
 8000cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f004 fc98 	bl	80055fe <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <e_papier_send_data+0x40>)
 8000cd4:	f002 fb56 	bl	8003384 <HAL_GPIO_WritePin>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	48000400 	.word	0x48000400
 8000ce4:	20000114 	.word	0x20000114

08000ce8 <e_papier_wait_until_idle>:
void e_papier_wait_until_idle(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8000cec:	e002      	b.n	8000cf4 <e_papier_wait_until_idle+0xc>
   {
      osDelay(100);
 8000cee:	2064      	movs	r0, #100	; 0x64
 8000cf0:	f007 fefc 	bl	8008aec <osDelay>
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8000cf4:	2104      	movs	r1, #4
 8000cf6:	4804      	ldr	r0, [pc, #16]	; (8000d08 <e_papier_wait_until_idle+0x20>)
 8000cf8:	f002 fb2c 	bl	8003354 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f5      	beq.n	8000cee <e_papier_wait_until_idle+0x6>
   }
}
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	48000400 	.word	0x48000400

08000d0c <e_papier_set_pixel>:
void e_papier_set_pixel(uint16_t x, uint16_t y, color_t color)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
 8000d16:	460b      	mov	r3, r1
 8000d18:	80bb      	strh	r3, [r7, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	70fb      	strb	r3, [r7, #3]
   if(x >= EPD_WIDTH || x < 0 || y >= EPD_HEIGHT || y < 0)
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d24:	d247      	bcs.n	8000db6 <e_papier_set_pixel+0xaa>
 8000d26:	88bb      	ldrh	r3, [r7, #4]
 8000d28:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000d2c:	d243      	bcs.n	8000db6 <e_papier_set_pixel+0xaa>
   {
      return;
   }
   if(color == WHITE)
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d120      	bne.n	8000d76 <e_papier_set_pixel+0x6a>
   {
      buffer[x / 8 + y * EPD_WIDTH / 8] |= (0x80 > (x % 8));
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	08db      	lsrs	r3, r3, #3
 8000d38:	b299      	uxth	r1, r3
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	88bb      	ldrh	r3, [r7, #4]
 8000d3e:	2232      	movs	r2, #50	; 0x32
 8000d40:	fb02 f303 	mul.w	r3, r2, r3
 8000d44:	4403      	add	r3, r0
 8000d46:	4a1f      	ldr	r2, [pc, #124]	; (8000dc4 <e_papier_set_pixel+0xb8>)
 8000d48:	5cd3      	ldrb	r3, [r2, r3]
 8000d4a:	b25a      	sxtb	r2, r3
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	2b7f      	cmp	r3, #127	; 0x7f
 8000d56:	bf94      	ite	ls
 8000d58:	2301      	movls	r3, #1
 8000d5a:	2300      	movhi	r3, #0
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b258      	sxtb	r0, r3
 8000d64:	88bb      	ldrh	r3, [r7, #4]
 8000d66:	2232      	movs	r2, #50	; 0x32
 8000d68:	fb02 f303 	mul.w	r3, r2, r3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	b2c1      	uxtb	r1, r0
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <e_papier_set_pixel+0xb8>)
 8000d72:	54d1      	strb	r1, [r2, r3]
 8000d74:	e020      	b.n	8000db8 <e_papier_set_pixel+0xac>
   }
   else
   {
      buffer[x / 8 + y * EPD_WIDTH / 8] &= ~(0x80 >> (x % 8));
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	08db      	lsrs	r3, r3, #3
 8000d7a:	b298      	uxth	r0, r3
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	88bb      	ldrh	r3, [r7, #4]
 8000d80:	2232      	movs	r2, #50	; 0x32
 8000d82:	fb02 f303 	mul.w	r3, r2, r3
 8000d86:	440b      	add	r3, r1
 8000d88:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <e_papier_set_pixel+0xb8>)
 8000d8a:	5cd3      	ldrb	r3, [r2, r3]
 8000d8c:	b25a      	sxtb	r2, r3
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	fa41 f303 	asr.w	r3, r1, r3
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	4013      	ands	r3, r2
 8000da2:	b259      	sxtb	r1, r3
 8000da4:	88bb      	ldrh	r3, [r7, #4]
 8000da6:	2232      	movs	r2, #50	; 0x32
 8000da8:	fb02 f303 	mul.w	r3, r2, r3
 8000dac:	4403      	add	r3, r0
 8000dae:	b2c9      	uxtb	r1, r1
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <e_papier_set_pixel+0xb8>)
 8000db2:	54d1      	strb	r1, [r2, r3]
 8000db4:	e000      	b.n	8000db8 <e_papier_set_pixel+0xac>
      return;
 8000db6:	bf00      	nop
   }
}
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000118 	.word	0x20000118

08000dc8 <e_papier_set_lut>:
void e_papier_set_lut(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
   uint16_t count;
   e_papier_send_command(LUT_FOR_VCOM); // g vcom
 8000dce:	2020      	movs	r0, #32
 8000dd0:	f7ff ff42 	bl	8000c58 <e_papier_send_command>
   for(count = 0; count < 44; count++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	80fb      	strh	r3, [r7, #6]
 8000dd8:	e008      	b.n	8000dec <e_papier_set_lut+0x24>
   {
      e_papier_send_data(lut_vcom0[count]);
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	4a2b      	ldr	r2, [pc, #172]	; (8000e8c <e_papier_set_lut+0xc4>)
 8000dde:	5cd3      	ldrb	r3, [r2, r3]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff5d 	bl	8000ca0 <e_papier_send_data>
   for(count = 0; count < 44; count++)
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	3301      	adds	r3, #1
 8000dea:	80fb      	strh	r3, [r7, #6]
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	2b2b      	cmp	r3, #43	; 0x2b
 8000df0:	d9f3      	bls.n	8000dda <e_papier_set_lut+0x12>
   }

   e_papier_send_command(LUT_WHITE_TO_WHITE);
 8000df2:	2021      	movs	r0, #33	; 0x21
 8000df4:	f7ff ff30 	bl	8000c58 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	80fb      	strh	r3, [r7, #6]
 8000dfc:	e008      	b.n	8000e10 <e_papier_set_lut+0x48>
   {
      e_papier_send_data(lut_ww[count]);
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	4a23      	ldr	r2, [pc, #140]	; (8000e90 <e_papier_set_lut+0xc8>)
 8000e02:	5cd3      	ldrb	r3, [r2, r3]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff4b 	bl	8000ca0 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	80fb      	strh	r3, [r7, #6]
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	2b29      	cmp	r3, #41	; 0x29
 8000e14:	d9f3      	bls.n	8000dfe <e_papier_set_lut+0x36>
   }

   e_papier_send_command(LUT_BLACK_TO_WHITE);
 8000e16:	2022      	movs	r0, #34	; 0x22
 8000e18:	f7ff ff1e 	bl	8000c58 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	80fb      	strh	r3, [r7, #6]
 8000e20:	e008      	b.n	8000e34 <e_papier_set_lut+0x6c>
   {
      e_papier_send_data(lut_bw[count]);
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <e_papier_set_lut+0xcc>)
 8000e26:	5cd3      	ldrb	r3, [r2, r3]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff39 	bl	8000ca0 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	3301      	adds	r3, #1
 8000e32:	80fb      	strh	r3, [r7, #6]
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	2b29      	cmp	r3, #41	; 0x29
 8000e38:	d9f3      	bls.n	8000e22 <e_papier_set_lut+0x5a>
   }

   e_papier_send_command(LUT_WHITE_TO_BLACK);
 8000e3a:	2023      	movs	r0, #35	; 0x23
 8000e3c:	f7ff ff0c 	bl	8000c58 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	80fb      	strh	r3, [r7, #6]
 8000e44:	e008      	b.n	8000e58 <e_papier_set_lut+0x90>
   {
      e_papier_send_data(lut_wb[count]);
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	4a13      	ldr	r2, [pc, #76]	; (8000e98 <e_papier_set_lut+0xd0>)
 8000e4a:	5cd3      	ldrb	r3, [r2, r3]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff27 	bl	8000ca0 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	3301      	adds	r3, #1
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	2b29      	cmp	r3, #41	; 0x29
 8000e5c:	d9f3      	bls.n	8000e46 <e_papier_set_lut+0x7e>
   }

   e_papier_send_command(LUT_BLACK_TO_BLACK);
 8000e5e:	2024      	movs	r0, #36	; 0x24
 8000e60:	f7ff fefa 	bl	8000c58 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	80fb      	strh	r3, [r7, #6]
 8000e68:	e008      	b.n	8000e7c <e_papier_set_lut+0xb4>
   {
      e_papier_send_data(lut_bb[count]);
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <e_papier_set_lut+0xd4>)
 8000e6e:	5cd3      	ldrb	r3, [r2, r3]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff15 	bl	8000ca0 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	80fb      	strh	r3, [r7, #6]
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	2b29      	cmp	r3, #41	; 0x29
 8000e80:	d9f3      	bls.n	8000e6a <e_papier_set_lut+0xa2>
   }
}
 8000e82:	bf00      	nop
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	0800c744 	.word	0x0800c744
 8000e90:	0800c770 	.word	0x0800c770
 8000e94:	0800c79c 	.word	0x0800c79c
 8000e98:	0800c7c8 	.word	0x0800c7c8
 8000e9c:	0800c7f4 	.word	0x0800c7f4

08000ea0 <e_papier_turn_on_display>:
      }
   }
   // e_papier_wait_until_idle();
}
void e_papier_turn_on_display(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
   e_papier_send_command(DISPLAY_REFRESH);
 8000ea4:	2012      	movs	r0, #18
 8000ea6:	f7ff fed7 	bl	8000c58 <e_papier_send_command>
   e_papier_wait_until_idle();
 8000eaa:	f7ff ff1d 	bl	8000ce8 <e_papier_wait_until_idle>
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <e_papier_display>:
void e_papier_display(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
   uint16_t Width, Height;
   Width  = (EPD_WIDTH % 8 == 0) ? (EPD_WIDTH / 8) : (EPD_WIDTH / 8 + 1);
 8000eba:	2332      	movs	r3, #50	; 0x32
 8000ebc:	80fb      	strh	r3, [r7, #6]
   Height = EPD_HEIGHT;
 8000ebe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ec2:	80bb      	strh	r3, [r7, #4]

   e_papier_send_command(DATA_START_TRANSMISSION_1);
 8000ec4:	2010      	movs	r0, #16
 8000ec6:	f7ff fec7 	bl	8000c58 <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	81fb      	strh	r3, [r7, #14]
 8000ece:	e00f      	b.n	8000ef0 <e_papier_display+0x3c>
   {
      for(uint16_t i = 0; i < Width; i++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	81bb      	strh	r3, [r7, #12]
 8000ed4:	e005      	b.n	8000ee2 <e_papier_display+0x2e>
      {
         e_papier_send_data(0XFF);
 8000ed6:	20ff      	movs	r0, #255	; 0xff
 8000ed8:	f7ff fee2 	bl	8000ca0 <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 8000edc:	89bb      	ldrh	r3, [r7, #12]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	81bb      	strh	r3, [r7, #12]
 8000ee2:	89ba      	ldrh	r2, [r7, #12]
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d3f5      	bcc.n	8000ed6 <e_papier_display+0x22>
   for(uint16_t j = 0; j < Height; j++)
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	3301      	adds	r3, #1
 8000eee:	81fb      	strh	r3, [r7, #14]
 8000ef0:	89fa      	ldrh	r2, [r7, #14]
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3eb      	bcc.n	8000ed0 <e_papier_display+0x1c>
      }
   }
   e_papier_send_command(DATA_START_TRANSMISSION_2);
 8000ef8:	2013      	movs	r0, #19
 8000efa:	f7ff fead 	bl	8000c58 <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	817b      	strh	r3, [r7, #10]
 8000f02:	e017      	b.n	8000f34 <e_papier_display+0x80>
   {
      for(uint16_t i = 0; i < Width; i++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	813b      	strh	r3, [r7, #8]
 8000f08:	e00d      	b.n	8000f26 <e_papier_display+0x72>
      {
         e_papier_send_data(buffer[i + j * Width]);
 8000f0a:	893a      	ldrh	r2, [r7, #8]
 8000f0c:	897b      	ldrh	r3, [r7, #10]
 8000f0e:	88f9      	ldrh	r1, [r7, #6]
 8000f10:	fb01 f303 	mul.w	r3, r1, r3
 8000f14:	4413      	add	r3, r2
 8000f16:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <e_papier_display+0x98>)
 8000f18:	5cd3      	ldrb	r3, [r2, r3]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fec0 	bl	8000ca0 <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 8000f20:	893b      	ldrh	r3, [r7, #8]
 8000f22:	3301      	adds	r3, #1
 8000f24:	813b      	strh	r3, [r7, #8]
 8000f26:	893a      	ldrh	r2, [r7, #8]
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d3ed      	bcc.n	8000f0a <e_papier_display+0x56>
   for(uint16_t j = 0; j < Height; j++)
 8000f2e:	897b      	ldrh	r3, [r7, #10]
 8000f30:	3301      	adds	r3, #1
 8000f32:	817b      	strh	r3, [r7, #10]
 8000f34:	897a      	ldrh	r2, [r7, #10]
 8000f36:	88bb      	ldrh	r3, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3e3      	bcc.n	8000f04 <e_papier_display+0x50>
      }
   }
   e_papier_turn_on_display();
 8000f3c:	f7ff ffb0 	bl	8000ea0 <e_papier_turn_on_display>
   e_papier_wait_until_idle();
 8000f40:	f7ff fed2 	bl	8000ce8 <e_papier_wait_until_idle>
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000118 	.word	0x20000118

08000f50 <e_papier_clear>:
void e_papier_clear()
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
   memset(buffer, 0xff, EPD_HEIGHT * EPD_WIDTH / 8);
 8000f54:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000f58:	21ff      	movs	r1, #255	; 0xff
 8000f5a:	4802      	ldr	r0, [pc, #8]	; (8000f64 <e_papier_clear+0x14>)
 8000f5c:	f00a ff36 	bl	800bdcc <memset>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000118 	.word	0x20000118

08000f68 <e_papier_init>:
void e_papier_init(SPI_HandleTypeDef *spi)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
   e_papier_spi = spi;
 8000f70:	4a2c      	ldr	r2, [pc, #176]	; (8001024 <e_papier_init+0xbc>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
   e_papier_reset();
 8000f76:	f7ff fe4d 	bl	8000c14 <e_papier_reset>

   e_papier_send_command(POWER_SETTING); // POWER SETTING
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff fe6c 	bl	8000c58 <e_papier_send_command>
   e_papier_send_data(0x03);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f7ff fe8d 	bl	8000ca0 <e_papier_send_data>
   e_papier_send_data(0x00);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff fe8a 	bl	8000ca0 <e_papier_send_data>
   e_papier_send_data(0x2b);
 8000f8c:	202b      	movs	r0, #43	; 0x2b
 8000f8e:	f7ff fe87 	bl	8000ca0 <e_papier_send_data>
   e_papier_send_data(0x2b);
 8000f92:	202b      	movs	r0, #43	; 0x2b
 8000f94:	f7ff fe84 	bl	8000ca0 <e_papier_send_data>

   e_papier_send_command(BOOSTER_SOFT_START); // boost soft start
 8000f98:	2006      	movs	r0, #6
 8000f9a:	f7ff fe5d 	bl	8000c58 <e_papier_send_command>
   e_papier_send_data(0x17);                  // A
 8000f9e:	2017      	movs	r0, #23
 8000fa0:	f7ff fe7e 	bl	8000ca0 <e_papier_send_data>
   e_papier_send_data(0x17);                  // B
 8000fa4:	2017      	movs	r0, #23
 8000fa6:	f7ff fe7b 	bl	8000ca0 <e_papier_send_data>
   e_papier_send_data(0x17);                  // C
 8000faa:	2017      	movs	r0, #23
 8000fac:	f7ff fe78 	bl	8000ca0 <e_papier_send_data>

   e_papier_send_command(POWER_ON);
 8000fb0:	2004      	movs	r0, #4
 8000fb2:	f7ff fe51 	bl	8000c58 <e_papier_send_command>
   e_papier_wait_until_idle();
 8000fb6:	f7ff fe97 	bl	8000ce8 <e_papier_wait_until_idle>

   e_papier_send_command(PANEL_SETTING); // panel setting
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff fe4c 	bl	8000c58 <e_papier_send_command>
   e_papier_send_data(0xbf);             // KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 8000fc0:	20bf      	movs	r0, #191	; 0xbf
 8000fc2:	f7ff fe6d 	bl	8000ca0 <e_papier_send_data>
   e_papier_send_data(0x0d);
 8000fc6:	200d      	movs	r0, #13
 8000fc8:	f7ff fe6a 	bl	8000ca0 <e_papier_send_data>

   e_papier_send_command(PLL_CONTROL); // PLL setting
 8000fcc:	2030      	movs	r0, #48	; 0x30
 8000fce:	f7ff fe43 	bl	8000c58 <e_papier_send_command>
   e_papier_send_data(0x3C);           // 3A 100HZ   29 150Hz 39 200HZ	31 171HZ
 8000fd2:	203c      	movs	r0, #60	; 0x3c
 8000fd4:	f7ff fe64 	bl	8000ca0 <e_papier_send_data>

   e_papier_send_command(0x61); // resolution setting
 8000fd8:	2061      	movs	r0, #97	; 0x61
 8000fda:	f7ff fe3d 	bl	8000c58 <e_papier_send_command>
   e_papier_send_data(0x01);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff fe5e 	bl	8000ca0 <e_papier_send_data>
   e_papier_send_data(0x90); // 128
 8000fe4:	2090      	movs	r0, #144	; 0x90
 8000fe6:	f7ff fe5b 	bl	8000ca0 <e_papier_send_data>
   e_papier_send_data(0x01); //
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff fe58 	bl	8000ca0 <e_papier_send_data>
   e_papier_send_data(0x2c);
 8000ff0:	202c      	movs	r0, #44	; 0x2c
 8000ff2:	f7ff fe55 	bl	8000ca0 <e_papier_send_data>

   e_papier_send_command(0x82); // vcom_DC setting
 8000ff6:	2082      	movs	r0, #130	; 0x82
 8000ff8:	f7ff fe2e 	bl	8000c58 <e_papier_send_command>
   e_papier_send_data(0x28);
 8000ffc:	2028      	movs	r0, #40	; 0x28
 8000ffe:	f7ff fe4f 	bl	8000ca0 <e_papier_send_data>

   e_papier_send_command(0X50); // VCOM AND DATA INTERVAL SETTING
 8001002:	2050      	movs	r0, #80	; 0x50
 8001004:	f7ff fe28 	bl	8000c58 <e_papier_send_command>
   e_papier_send_data(0x97);    // 97white border 77black border		VBDF 17|D7 VBDW 97 VBDB 57		VBDF F7 VBDW 77 VBDB 37  VBDR B7
 8001008:	2097      	movs	r0, #151	; 0x97
 800100a:	f7ff fe49 	bl	8000ca0 <e_papier_send_data>

   e_papier_set_lut();
 800100e:	f7ff fedb 	bl	8000dc8 <e_papier_set_lut>
   e_papier_clear();
 8001012:	f7ff ff9d 	bl	8000f50 <e_papier_clear>
   e_papier_display();
 8001016:	f7ff ff4d 	bl	8000eb4 <e_papier_display>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000114 	.word	0x20000114

08001028 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */
   /* Create the mutex(es) */
   /* creation of ScreensDcMutex */
   ScreensDcMutexHandle = osMutexNew(&ScreensDcMutex_attributes);
 800102c:	4815      	ldr	r0, [pc, #84]	; (8001084 <MX_FREERTOS_Init+0x5c>)
 800102e:	f007 fdb7 	bl	8008ba0 <osMutexNew>
 8001032:	4603      	mov	r3, r0
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <MX_FREERTOS_Init+0x60>)
 8001036:	6013      	str	r3, [r2, #0]

   /* creation of SSD1306Mutex */
   SSD1306MutexHandle = osMutexNew(&SSD1306Mutex_attributes);
 8001038:	4814      	ldr	r0, [pc, #80]	; (800108c <MX_FREERTOS_Init+0x64>)
 800103a:	f007 fdb1 	bl	8008ba0 <osMutexNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a13      	ldr	r2, [pc, #76]	; (8001090 <MX_FREERTOS_Init+0x68>)
 8001042:	6013      	str	r3, [r2, #0]
   /* add queues, ... */
   /* USER CODE END RTOS_QUEUES */

   /* Create the thread(s) */
   /* creation of defaultTask */
   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001044:	4a13      	ldr	r2, [pc, #76]	; (8001094 <MX_FREERTOS_Init+0x6c>)
 8001046:	2100      	movs	r1, #0
 8001048:	4813      	ldr	r0, [pc, #76]	; (8001098 <MX_FREERTOS_Init+0x70>)
 800104a:	f007 fcbd 	bl	80089c8 <osThreadNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a12      	ldr	r2, [pc, #72]	; (800109c <MX_FREERTOS_Init+0x74>)
 8001052:	6013      	str	r3, [r2, #0]

   /* creation of InitAndTimeTask */
   InitAndTimeTaskHandle = osThreadNew(StartInitAndTimeTask, NULL, &InitAndTimeTask_attributes);
 8001054:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <MX_FREERTOS_Init+0x78>)
 8001056:	2100      	movs	r1, #0
 8001058:	4812      	ldr	r0, [pc, #72]	; (80010a4 <MX_FREERTOS_Init+0x7c>)
 800105a:	f007 fcb5 	bl	80089c8 <osThreadNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <MX_FREERTOS_Init+0x80>)
 8001062:	6013      	str	r3, [r2, #0]

   /* creation of RfpTask */
   RfpTaskHandle = osThreadNew(StartRfpTask, NULL, &RfpTask_attributes);
 8001064:	4a11      	ldr	r2, [pc, #68]	; (80010ac <MX_FREERTOS_Init+0x84>)
 8001066:	2100      	movs	r1, #0
 8001068:	4811      	ldr	r0, [pc, #68]	; (80010b0 <MX_FREERTOS_Init+0x88>)
 800106a:	f007 fcad 	bl	80089c8 <osThreadNew>
 800106e:	4603      	mov	r3, r0
 8001070:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <MX_FREERTOS_Init+0x8c>)
 8001072:	6013      	str	r3, [r2, #0]
   /* USER CODE BEGIN RTOS_THREADS */
   /* add threads, ... */
   /* USER CODE END RTOS_THREADS */

   /* creation of C3V1Flags */
   C3V1FlagsHandle = osEventFlagsNew(&C3V1Flags_attributes);
 8001074:	4810      	ldr	r0, [pc, #64]	; (80010b8 <MX_FREERTOS_Init+0x90>)
 8001076:	f007 fd54 	bl	8008b22 <osEventFlagsNew>
 800107a:	4603      	mov	r3, r0
 800107c:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <MX_FREERTOS_Init+0x94>)
 800107e:	6013      	str	r3, [r2, #0]

   /* USER CODE BEGIN RTOS_EVENTS */
   /* add events, ... */
   /* USER CODE END RTOS_EVENTS */
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	0800ca6c 	.word	0x0800ca6c
 8001088:	20003bd8 	.word	0x20003bd8
 800108c:	0800ca7c 	.word	0x0800ca7c
 8001090:	20003bdc 	.word	0x20003bdc
 8001094:	0800ca00 	.word	0x0800ca00
 8001098:	080010c1 	.word	0x080010c1
 800109c:	20003bcc 	.word	0x20003bcc
 80010a0:	0800ca24 	.word	0x0800ca24
 80010a4:	080010d1 	.word	0x080010d1
 80010a8:	20003bd0 	.word	0x20003bd0
 80010ac:	0800ca48 	.word	0x0800ca48
 80010b0:	08001209 	.word	0x08001209
 80010b4:	20003bd4 	.word	0x20003bd4
 80010b8:	0800ca8c 	.word	0x0800ca8c
 80010bc:	20003be0 	.word	0x20003be0

080010c0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartDefaultTask */
   /* Infinite loop */
   for(;;)
   {
      osDelay(1);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f007 fd0f 	bl	8008aec <osDelay>
 80010ce:	e7fb      	b.n	80010c8 <StartDefaultTask+0x8>

080010d0 <StartInitAndTimeTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInitAndTimeTask */
void StartInitAndTimeTask(void *argument)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0a4      	sub	sp, #144	; 0x90
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartInitAndTimeTask */
   RFP_Init(&Rfp, RFP_IDWS);
 80010d8:	2103      	movs	r1, #3
 80010da:	4841      	ldr	r0, [pc, #260]	; (80011e0 <StartInitAndTimeTask+0x110>)
 80010dc:	f000 fa0a 	bl	80014f4 <RFP_Init>
   e_papier_init(&hspi1);
 80010e0:	4840      	ldr	r0, [pc, #256]	; (80011e4 <StartInitAndTimeTask+0x114>)
 80010e2:	f7ff ff41 	bl	8000f68 <e_papier_init>
   ssd1306_init(&hspi1);
 80010e6:	483f      	ldr	r0, [pc, #252]	; (80011e4 <StartInitAndTimeTask+0x114>)
 80010e8:	f000 ff48 	bl	8001f7c <ssd1306_init>
   GFX_SetFont(font_8x5);
 80010ec:	483e      	ldr	r0, [pc, #248]	; (80011e8 <StartInitAndTimeTask+0x118>)
 80010ee:	f7ff fa81 	bl	80005f4 <GFX_SetFont>
   RTC_DateTypeDef RtcDate;
   char data[100];
   /* Infinite loop */
   for(;;)
   {
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80010f2:	4b3e      	ldr	r3, [pc, #248]	; (80011ec <StartInitAndTimeTask+0x11c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f04f 31ff 	mov.w	r1, #4294967295
 80010fa:	4618      	mov	r0, r3
 80010fc:	f007 fdd6 	bl	8008cac <osMutexAcquire>
      osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001100:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <StartInitAndTimeTask+0x120>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	4618      	mov	r0, r3
 800110a:	f007 fdcf 	bl	8008cac <osMutexAcquire>
      // TODO
      HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t*)&Random);
 800110e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001112:	4619      	mov	r1, r3
 8001114:	4837      	ldr	r0, [pc, #220]	; (80011f4 <StartInitAndTimeTask+0x124>)
 8001116:	f003 ff8b 	bl	8005030 <HAL_RNG_GenerateRandomNumber>
      ssd1306_clear();
 800111a:	f000 ff23 	bl	8001f64 <ssd1306_clear>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 800111e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001122:	2200      	movs	r2, #0
 8001124:	4619      	mov	r1, r3
 8001126:	4834      	ldr	r0, [pc, #208]	; (80011f8 <StartInitAndTimeTask+0x128>)
 8001128:	f004 f862 	bl	80051f0 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 800112c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001130:	2200      	movs	r2, #0
 8001132:	4619      	mov	r1, r3
 8001134:	4830      	ldr	r0, [pc, #192]	; (80011f8 <StartInitAndTimeTask+0x128>)
 8001136:	f004 f8bd 	bl	80052b4 <HAL_RTC_GetDate>
      sprintf(data, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 800113a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800113e:	461a      	mov	r2, r3
 8001140:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001144:	4619      	mov	r1, r3
 8001146:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800114a:	f107 0008 	add.w	r0, r7, #8
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	460b      	mov	r3, r1
 8001152:	492a      	ldr	r1, [pc, #168]	; (80011fc <StartInitAndTimeTask+0x12c>)
 8001154:	f00a fe42 	bl	800bddc <siprintf>
      GFX_DrawString(0, 0, data, WHITE, 0, OLED);
 8001158:	f107 0208 	add.w	r2, r7, #8
 800115c:	2300      	movs	r3, #0
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	2300      	movs	r3, #0
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	2100      	movs	r1, #0
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fb11 	bl	8000790 <GFX_DrawString>
      sprintf(data, "%d : %d ; 2022", RtcDate.Date, RtcDate.Month);
 800116e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001172:	461a      	mov	r2, r3
 8001174:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001178:	f107 0008 	add.w	r0, r7, #8
 800117c:	4920      	ldr	r1, [pc, #128]	; (8001200 <StartInitAndTimeTask+0x130>)
 800117e:	f00a fe2d 	bl	800bddc <siprintf>
      GFX_DrawString(0, 10, data, WHITE, 0, OLED);
 8001182:	f107 0208 	add.w	r2, r7, #8
 8001186:	2300      	movs	r3, #0
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2300      	movs	r3, #0
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2301      	movs	r3, #1
 8001190:	210a      	movs	r1, #10
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff fafc 	bl	8000790 <GFX_DrawString>
      sprintf(data, "RNG %d ", Random);
 8001198:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	4918      	ldr	r1, [pc, #96]	; (8001204 <StartInitAndTimeTask+0x134>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00a fe1a 	bl	800bddc <siprintf>
      GFX_DrawString(0, 20, data, WHITE, 0, OLED);
 80011a8:	f107 0208 	add.w	r2, r7, #8
 80011ac:	2300      	movs	r3, #0
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	2300      	movs	r3, #0
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	2114      	movs	r1, #20
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff fae9 	bl	8000790 <GFX_DrawString>
      ssd1306_display();
 80011be:	f000 fea5 	bl	8001f0c <ssd1306_display>
      osMutexRelease(SSD1306MutexHandle);
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <StartInitAndTimeTask+0x120>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f007 fdbb 	bl	8008d42 <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <StartInitAndTimeTask+0x11c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f007 fdb6 	bl	8008d42 <osMutexRelease>
      osDelay(1000);
 80011d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011da:	f007 fc87 	bl	8008aec <osDelay>
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80011de:	e788      	b.n	80010f2 <StartInitAndTimeTask+0x22>
 80011e0:	20003bb0 	.word	0x20003bb0
 80011e4:	20003d28 	.word	0x20003d28
 80011e8:	0800c820 	.word	0x0800c820
 80011ec:	20003bd8 	.word	0x20003bd8
 80011f0:	20003bdc 	.word	0x20003bdc
 80011f4:	20003ce0 	.word	0x20003ce0
 80011f8:	20003cf4 	.word	0x20003cf4
 80011fc:	0800c704 	.word	0x0800c704
 8001200:	0800c714 	.word	0x0800c714
 8001204:	0800c724 	.word	0x0800c724

08001208 <StartRfpTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfpTask */
void StartRfpTask(void *argument)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartRfpTask */
   /* Infinite loop */
   for(;;)
   {
      if(Rfp.Initialize == RFP_INITIALIZE)
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <StartRfpTask+0x1c>)
 8001212:	78db      	ldrb	r3, [r3, #3]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <StartRfpTask+0x14>
      {
         RFP_Handle();
 8001218:	f000 f950 	bl	80014bc <RFP_Handle>
      }
      osDelay(10);
 800121c:	200a      	movs	r0, #10
 800121e:	f007 fc65 	bl	8008aec <osDelay>
      if(Rfp.Initialize == RFP_INITIALIZE)
 8001222:	e7f5      	b.n	8001210 <StartRfpTask+0x8>
 8001224:	20003bb0 	.word	0x20003bb0

08001228 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	4b45      	ldr	r3, [pc, #276]	; (8001354 <MX_GPIO_Init+0x12c>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a44      	ldr	r2, [pc, #272]	; (8001354 <MX_GPIO_Init+0x12c>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b42      	ldr	r3, [pc, #264]	; (8001354 <MX_GPIO_Init+0x12c>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b3f      	ldr	r3, [pc, #252]	; (8001354 <MX_GPIO_Init+0x12c>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a3e      	ldr	r2, [pc, #248]	; (8001354 <MX_GPIO_Init+0x12c>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b3c      	ldr	r3, [pc, #240]	; (8001354 <MX_GPIO_Init+0x12c>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	4b39      	ldr	r3, [pc, #228]	; (8001354 <MX_GPIO_Init+0x12c>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a38      	ldr	r2, [pc, #224]	; (8001354 <MX_GPIO_Init+0x12c>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b36      	ldr	r3, [pc, #216]	; (8001354 <MX_GPIO_Init+0x12c>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD1306_CS_GPIO_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	2110      	movs	r1, #16
 800128a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128e:	f002 f879 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 8001292:	2201      	movs	r2, #1
 8001294:	f640 71c3 	movw	r1, #4035	; 0xfc3
 8001298:	482f      	ldr	r0, [pc, #188]	; (8001358 <MX_GPIO_Init+0x130>)
 800129a:	f002 f873 	bl	8003384 <HAL_GPIO_WritePin>
                          |FRAM_CS_Pin|FRAM_WP_Pin|FRAM_HOLD_Pin|FLASH_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEARTBEAT_Pin|BME280_CS_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80012a4:	482c      	ldr	r0, [pc, #176]	; (8001358 <MX_GPIO_Init+0x130>)
 80012a6:	f002 f86d 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b4:	f002 f866 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1306_CS_Pin;
 80012b8:	2310      	movs	r3, #16
 80012ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1306_CS_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f001 fead 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 80012d6:	f641 73c3 	movw	r3, #8131	; 0x1fc3
 80012da:	60fb      	str	r3, [r7, #12]
                          |HEARTBEAT_Pin|FRAM_CS_Pin|FRAM_WP_Pin|FRAM_HOLD_Pin
                          |FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	4619      	mov	r1, r3
 80012ee:	481a      	ldr	r0, [pc, #104]	; (8001358 <MX_GPIO_Init+0x130>)
 80012f0:	f001 fe9e 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EPAPIER_BUSY_Pin|ENCODER_SWITCH_Pin;
 80012f4:	f244 0304 	movw	r3, #16388	; 0x4004
 80012f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4619      	mov	r1, r3
 8001308:	4813      	ldr	r0, [pc, #76]	; (8001358 <MX_GPIO_Init+0x130>)
 800130a:	f001 fe91 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BME280_CS_Pin;
 800130e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BME280_CS_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4619      	mov	r1, r3
 8001326:	480c      	ldr	r0, [pc, #48]	; (8001358 <MX_GPIO_Init+0x130>)
 8001328:	f001 fe82 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HC12_SET_Pin;
 800132c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HC12_SET_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001348:	f001 fe72 	bl	8003030 <HAL_GPIO_Init>

}
 800134c:	bf00      	nop
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	48000400 	.word	0x48000400

0800135c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001360:	f001 f9f9 	bl	8002756 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001364:	f000 f81c 	bl	80013a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001368:	f7ff ff5e 	bl	8001228 <MX_GPIO_Init>
  MX_DMA_Init();
 800136c:	f7ff fc2e 	bl	8000bcc <MX_DMA_Init>
  MX_RTC_Init();
 8001370:	f000 fbe4 	bl	8001b3c <MX_RTC_Init>
  MX_RNG_Init();
 8001374:	f000 fb98 	bl	8001aa8 <MX_RNG_Init>
  MX_SPI1_Init();
 8001378:	f000 fc56 	bl	8001c28 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800137c:	f001 f8e8 	bl	8002550 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001380:	f000 fc90 	bl	8001ca4 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001384:	f000 ff82 	bl	800228c <MX_TIM2_Init>
  MX_TIM5_Init();
 8001388:	f000 fff6 	bl	8002378 <MX_TIM5_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800138c:	f000 f86a 	bl	8001464 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001390:	f007 fad0 	bl	8008934 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001394:	f7ff fe48 	bl	8001028 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001398:	f007 faf0 	bl	800897c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800139c:	e7fe      	b.n	800139c <main+0x40>
	...

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b098      	sub	sp, #96	; 0x60
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0318 	add.w	r3, r7, #24
 80013aa:	2248      	movs	r2, #72	; 0x48
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f00a fd0c 	bl	800bdcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80013c2:	2000      	movs	r0, #0
 80013c4:	f002 f826 	bl	8003414 <HAL_PWREx_ControlVoltageScaling>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80013ce:	f000 f86f 	bl	80014b0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013d2:	f001 ffef 	bl	80033b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <SystemClock_Config+0xc0>)
 80013d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013dc:	4a20      	ldr	r2, [pc, #128]	; (8001460 <SystemClock_Config+0xc0>)
 80013de:	f023 0318 	bic.w	r3, r3, #24
 80013e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 80013e6:	2334      	movs	r3, #52	; 0x34
 80013e8:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013ea:	2301      	movs	r3, #1
 80013ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013ee:	2301      	movs	r3, #1
 80013f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013f2:	2301      	movs	r3, #1
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013fa:	2360      	movs	r3, #96	; 0x60
 80013fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fe:	2302      	movs	r3, #2
 8001400:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001402:	2301      	movs	r3, #1
 8001404:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001406:	2301      	movs	r3, #1
 8001408:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 800140a:	233c      	movs	r3, #60	; 0x3c
 800140c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140e:	2302      	movs	r3, #2
 8001410:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001412:	2302      	movs	r3, #2
 8001414:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001416:	2302      	movs	r3, #2
 8001418:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141a:	f107 0318 	add.w	r3, r7, #24
 800141e:	4618      	mov	r0, r3
 8001420:	f002 f89c 	bl	800355c <HAL_RCC_OscConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800142a:	f000 f841 	bl	80014b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142e:	230f      	movs	r3, #15
 8001430:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001432:	2303      	movs	r3, #3
 8001434:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2105      	movs	r1, #5
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fd04 	bl	8003e54 <HAL_RCC_ClockConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001452:	f000 f82d 	bl	80014b0 <Error_Handler>
  }
}
 8001456:	bf00      	nop
 8001458:	3760      	adds	r7, #96	; 0x60
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000

08001464 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2105      	movs	r1, #5
 800146c:	200b      	movs	r0, #11
 800146e:	f001 fa87 	bl	8002980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001472:	200b      	movs	r0, #11
 8001474:	f001 faa0 	bl	80029b8 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2105      	movs	r1, #5
 800147c:	2025      	movs	r0, #37	; 0x25
 800147e:	f001 fa7f 	bl	8002980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001482:	2025      	movs	r0, #37	; 0x25
 8001484:	f001 fa98 	bl	80029b8 <HAL_NVIC_EnableIRQ>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d101      	bne.n	80014a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800149e:	f001 f973 	bl	8002788 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40014800 	.word	0x40014800

080014b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <Error_Handler+0x8>
	...

080014bc <RFP_Handle>:
        { RFP_WaitForResponseFunction }, { RFP_ParseResponseFunction } };
RFPCommandFunctions_TypeDef RfpCommandFunction[RFP_COMMAND_CNT];
RFPDataFunctions_TypeDef RfpDataFunctions;
RFPMessageFunctions_TypeDef RfpMessageFunction[RFP_MESSAGE_CNT];
void RFP_Handle(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
   RFP_ChangeState();
 80014c0:	f000 f856 	bl	8001570 <RFP_ChangeState>
   if(RfpFunction[Rfp->State].RfpFunction != NULL)
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <RFP_Handle+0x30>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <RFP_Handle+0x34>)
 80014ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <RFP_Handle+0x2a>
   {
      RfpFunction[Rfp->State].RfpFunction();
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <RFP_Handle+0x30>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <RFP_Handle+0x34>)
 80014e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e4:	4798      	blx	r3
   }
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20003cac 	.word	0x20003cac
 80014f0:	20000058 	.word	0x20000058

080014f4 <RFP_Init>:
void RFP_Init(RFP_TypeDef *RadioProtocol, RFPDeviceID_TypeDef Device)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	70fb      	strb	r3, [r7, #3]
   Rfp             = RadioProtocol;
 8001500:	4a17      	ldr	r2, [pc, #92]	; (8001560 <RFP_Init+0x6c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
   Rfp->Initialize = RFP_INITIALIZE;
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <RFP_Init+0x6c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2201      	movs	r2, #1
 800150c:	70da      	strb	r2, [r3, #3]
   Rfp->DeviceType = Device;
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <RFP_Init+0x6c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	78fa      	ldrb	r2, [r7, #3]
 8001514:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	e007      	b.n	800152c <RFP_Init+0x38>
   {
      RfpCommandFunction[i].RfpCommandFunction = NULL;
 800151c:	4a11      	ldr	r2, [pc, #68]	; (8001564 <RFP_Init+0x70>)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2100      	movs	r1, #0
 8001522:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3301      	adds	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b05      	cmp	r3, #5
 8001530:	ddf4      	ble.n	800151c <RFP_Init+0x28>
   }
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	e007      	b.n	8001548 <RFP_Init+0x54>
   {
      RfpMessageFunction[i].RfpMessageFunction = NULL;
 8001538:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <RFP_Init+0x74>)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	2100      	movs	r1, #0
 800153e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	3301      	adds	r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b04      	cmp	r3, #4
 800154c:	ddf4      	ble.n	8001538 <RFP_Init+0x44>
   }
   RfpDataFunctions.RfpDataFunction = NULL;
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <RFP_Init+0x78>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	20003cac 	.word	0x20003cac
 8001564:	20003cb0 	.word	0x20003cb0
 8001568:	20003ccc 	.word	0x20003ccc
 800156c:	20003cc8 	.word	0x20003cc8

08001570 <RFP_ChangeState>:
static void RFP_ChangeState(void)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	e02b      	b.n	80015d4 <RFP_ChangeState+0x64>
   {
      if(Rfp->State == RfpTransitionTable[i].Source && Rfp->NewEvent == RfpTransitionTable[i].Event)
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <RFP_ChangeState+0x7c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	7819      	ldrb	r1, [r3, #0]
 8001582:	481b      	ldr	r0, [pc, #108]	; (80015f0 <RFP_ChangeState+0x80>)
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	4403      	add	r3, r0
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4299      	cmp	r1, r3
 8001592:	d11c      	bne.n	80015ce <RFP_ChangeState+0x5e>
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <RFP_ChangeState+0x7c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	7859      	ldrb	r1, [r3, #1]
 800159a:	4815      	ldr	r0, [pc, #84]	; (80015f0 <RFP_ChangeState+0x80>)
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	4403      	add	r3, r0
 80015a6:	3302      	adds	r3, #2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	4299      	cmp	r1, r3
 80015ac:	d10f      	bne.n	80015ce <RFP_ChangeState+0x5e>
      {
         Rfp->State    = RfpTransitionTable[i].Destination;
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <RFP_ChangeState+0x7c>)
 80015b0:	6819      	ldr	r1, [r3, #0]
 80015b2:	480f      	ldr	r0, [pc, #60]	; (80015f0 <RFP_ChangeState+0x80>)
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	4403      	add	r3, r0
 80015be:	3301      	adds	r3, #1
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	700b      	strb	r3, [r1, #0]
         Rfp->NewEvent = RFP_EVENT_NOTHING;
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <RFP_ChangeState+0x7c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	705a      	strb	r2, [r3, #1]
         return;
 80015cc:	e009      	b.n	80015e2 <RFP_ChangeState+0x72>
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3301      	adds	r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b0b      	cmp	r3, #11
 80015d8:	d9d0      	bls.n	800157c <RFP_ChangeState+0xc>
      }
   }
   Rfp->NewEvent = RFP_EVENT_NOTHING;
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <RFP_ChangeState+0x7c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2200      	movs	r2, #0
 80015e0:	705a      	strb	r2, [r3, #1]
}
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	20003cac 	.word	0x20003cac
 80015f0:	20000034 	.word	0x20000034

080015f4 <RFP_SendResponseFunction>:
   RfpDataTransmit[3 + Length + 3] = (crc & 0xff);
   Rfp->SendFlag                   = RFP_SEND_FLAG_SET;
   Rfp->DataSizeTransmit           = 3 + Length + 4;
}
static void RFP_SendResponseFunction(RFPMessageType_TypeDef Response)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
   HAL_Delay(200);
 80015fe:	20c8      	movs	r0, #200	; 0xc8
 8001600:	f001 f8e2 	bl	80027c8 <HAL_Delay>
   RfpDataTransmit[0] = Rfp->SourceMessage;
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <RFP_SendResponseFunction+0x74>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	7c1a      	ldrb	r2, [r3, #16]
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <RFP_SendResponseFunction+0x78>)
 800160c:	701a      	strb	r2, [r3, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <RFP_SendResponseFunction+0x74>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	795a      	ldrb	r2, [r3, #5]
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <RFP_SendResponseFunction+0x78>)
 8001616:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = RFP_MESSAGE;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <RFP_SendResponseFunction+0x78>)
 800161a:	2203      	movs	r2, #3
 800161c:	709a      	strb	r2, [r3, #2]
   RfpDataTransmit[3] = Response;
 800161e:	4a13      	ldr	r2, [pc, #76]	; (800166c <RFP_SendResponseFunction+0x78>)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	70d3      	strb	r3, [r2, #3]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, RfpDataTransmit);
 8001624:	4a11      	ldr	r2, [pc, #68]	; (800166c <RFP_SendResponseFunction+0x78>)
 8001626:	2104      	movs	r1, #4
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f7ff fa26 	bl	8000a7c <Crc>
 8001630:	60f8      	str	r0, [r7, #12]
   RfpDataTransmit[4] = ((crc >> 24) & 0xff);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	0e1b      	lsrs	r3, r3, #24
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <RFP_SendResponseFunction+0x78>)
 800163a:	711a      	strb	r2, [r3, #4]
   RfpDataTransmit[5] = ((crc >> 16) & 0xff);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	0c1b      	lsrs	r3, r3, #16
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <RFP_SendResponseFunction+0x78>)
 8001644:	715a      	strb	r2, [r3, #5]
   RfpDataTransmit[6] = ((crc >> 8) & 0xff);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <RFP_SendResponseFunction+0x78>)
 800164e:	719a      	strb	r2, [r3, #6]
   RfpDataTransmit[7] = (crc & 0xff);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <RFP_SendResponseFunction+0x78>)
 8001656:	71da      	strb	r2, [r3, #7]
   HC12_TransmitData(RfpDataTransmit, 8);
 8001658:	2108      	movs	r1, #8
 800165a:	4804      	ldr	r0, [pc, #16]	; (800166c <RFP_SendResponseFunction+0x78>)
 800165c:	f7ff f9d2 	bl	8000a04 <HC12_TransmitData>
}
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20003cac 	.word	0x20003cac
 800166c:	20003c48 	.word	0x20003c48

08001670 <RFP_InitializeFunction>:
static void RFP_InitializeFunction(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
   Rfp->NewEvent = RFP_EVENT_END_INITIALIZE;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <RFP_InitializeFunction+0x28>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2202      	movs	r2, #2
 800167a:	705a      	strb	r2, [r3, #1]
   HC12_ExitCommandMode();
 800167c:	f7ff f9b7 	bl	80009ee <HC12_ExitCommandMode>
   HC12_Init(Rfp, RfpDataRecive);
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <RFP_InitializeFunction+0x28>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4905      	ldr	r1, [pc, #20]	; (800169c <RFP_InitializeFunction+0x2c>)
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff f9e2 	bl	8000a50 <HC12_Init>
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800168c:	2164      	movs	r1, #100	; 0x64
 800168e:	4803      	ldr	r0, [pc, #12]	; (800169c <RFP_InitializeFunction+0x2c>)
 8001690:	f7ff f9cc 	bl	8000a2c <HC12_ReciveToIdleDMA>
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20003cac 	.word	0x20003cac
 800169c:	20003be4 	.word	0x20003be4

080016a0 <RFP_IdleFunction>:
static void RFP_IdleFunction(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
   if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <RFP_IdleFunction+0x48>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	791b      	ldrb	r3, [r3, #4]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d108      	bne.n	80016c2 <RFP_IdleFunction+0x22>
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 80016b0:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <RFP_IdleFunction+0x48>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2200      	movs	r2, #0
 80016b6:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <RFP_IdleFunction+0x48>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2201      	movs	r2, #1
 80016be:	705a      	strb	r2, [r3, #1]
   {
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
      Rfp->NewEvent = RFP_EVENT_SEND;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 80016c0:	e010      	b.n	80016e4 <RFP_IdleFunction+0x44>
   else if(Rfp->SendFlag == RFP_SEND_FLAG_SET)
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <RFP_IdleFunction+0x48>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	7c5b      	ldrb	r3, [r3, #17]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d10b      	bne.n	80016e4 <RFP_IdleFunction+0x44>
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <RFP_IdleFunction+0x48>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2200      	movs	r2, #0
 80016d2:	745a      	strb	r2, [r3, #17]
      Rfp->NewEvent = RFP_EVENT_SEND;
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <RFP_IdleFunction+0x48>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2206      	movs	r2, #6
 80016da:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80016dc:	2164      	movs	r1, #100	; 0x64
 80016de:	4803      	ldr	r0, [pc, #12]	; (80016ec <RFP_IdleFunction+0x4c>)
 80016e0:	f7ff f9a4 	bl	8000a2c <HC12_ReciveToIdleDMA>
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20003cac 	.word	0x20003cac
 80016ec:	20003be4 	.word	0x20003be4

080016f0 <RFP_ParseFunction>:
static void RFP_ParseFunction(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
   Rfp->SourceMessage  = RfpDataRecive[1];
 80016fa:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <RFP_ParseFunction+0xf4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a3a      	ldr	r2, [pc, #232]	; (80017e8 <RFP_ParseFunction+0xf8>)
 8001700:	7852      	ldrb	r2, [r2, #1]
 8001702:	741a      	strb	r2, [r3, #16]
   if(RfpDataRecive[0] != Rfp->DeviceType)
 8001704:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <RFP_ParseFunction+0xf8>)
 8001706:	781a      	ldrb	r2, [r3, #0]
 8001708:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <RFP_ParseFunction+0xf4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	795b      	ldrb	r3, [r3, #5]
 800170e:	429a      	cmp	r2, r3
 8001710:	d00b      	beq.n	800172a <RFP_ParseFunction+0x3a>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8001712:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <RFP_ParseFunction+0xf4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2203      	movs	r2, #3
 8001718:	705a      	strb	r2, [r3, #1]
      RFP_SendResponseFunction(RFP_ERROR);
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff ff6a 	bl	80015f4 <RFP_SendResponseFunction>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8001720:	2164      	movs	r1, #100	; 0x64
 8001722:	4831      	ldr	r0, [pc, #196]	; (80017e8 <RFP_ParseFunction+0xf8>)
 8001724:	f7ff f982 	bl	8000a2c <HC12_ReciveToIdleDMA>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
            }
         }
      }
   }
}
 8001728:	e057      	b.n	80017da <RFP_ParseFunction+0xea>
      if(Rfp->DataSize != 0)
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <RFP_ParseFunction+0xf4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d052      	beq.n	80017da <RFP_ParseFunction+0xea>
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <RFP_ParseFunction+0xf4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	3b04      	subs	r3, #4
 800173c:	4a2a      	ldr	r2, [pc, #168]	; (80017e8 <RFP_ParseFunction+0xf8>)
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	061a      	lsls	r2, r3, #24
 8001742:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <RFP_ParseFunction+0xf4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	3b03      	subs	r3, #3
 800174a:	4927      	ldr	r1, [pc, #156]	; (80017e8 <RFP_ParseFunction+0xf8>)
 800174c:	5ccb      	ldrb	r3, [r1, r3]
 800174e:	041b      	lsls	r3, r3, #16
 8001750:	431a      	orrs	r2, r3
                       | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 8001752:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <RFP_ParseFunction+0xf4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	3b02      	subs	r3, #2
 800175a:	4923      	ldr	r1, [pc, #140]	; (80017e8 <RFP_ParseFunction+0xf8>)
 800175c:	5ccb      	ldrb	r3, [r1, r3]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	4313      	orrs	r3, r2
 8001762:	4a20      	ldr	r2, [pc, #128]	; (80017e4 <RFP_ParseFunction+0xf4>)
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	6892      	ldr	r2, [r2, #8]
 8001768:	3a01      	subs	r2, #1
 800176a:	491f      	ldr	r1, [pc, #124]	; (80017e8 <RFP_ParseFunction+0xf8>)
 800176c:	5c8a      	ldrb	r2, [r1, r2]
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800176e:	4313      	orrs	r3, r2
 8001770:	607b      	str	r3, [r7, #4]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <RFP_ParseFunction+0xf4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	3b04      	subs	r3, #4
 800177a:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <RFP_ParseFunction+0xf8>)
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 30ff 	mov.w	r0, #4294967295
 8001782:	f7ff f97b 	bl	8000a7c <Crc>
 8001786:	4602      	mov	r2, r0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4293      	cmp	r3, r2
 800178c:	d107      	bne.n	800179e <RFP_ParseFunction+0xae>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <RFP_ParseFunction+0xf4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2204      	movs	r2, #4
 8001794:	705a      	strb	r2, [r3, #1]
            RFP_SendResponseFunction(RFP_OK);
 8001796:	2004      	movs	r0, #4
 8001798:	f7ff ff2c 	bl	80015f4 <RFP_SendResponseFunction>
}
 800179c:	e01d      	b.n	80017da <RFP_ParseFunction+0xea>
            if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <RFP_ParseFunction+0xf4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4910      	ldr	r1, [pc, #64]	; (80017e8 <RFP_ParseFunction+0xf8>)
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff f9bf 	bl	8000b2c <RepareMessage>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d107      	bne.n	80017c4 <RFP_ParseFunction+0xd4>
               Rfp->NewEvent = RFP_EVENT_DATA_OK;
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <RFP_ParseFunction+0xf4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2204      	movs	r2, #4
 80017ba:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_OK);
 80017bc:	2004      	movs	r0, #4
 80017be:	f7ff ff19 	bl	80015f4 <RFP_SendResponseFunction>
}
 80017c2:	e00a      	b.n	80017da <RFP_ParseFunction+0xea>
               Rfp->NewEvent = RFP_EVENT_ERROR;
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <RFP_ParseFunction+0xf4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2203      	movs	r2, #3
 80017ca:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_CRC_ERROR);
 80017cc:	2002      	movs	r0, #2
 80017ce:	f7ff ff11 	bl	80015f4 <RFP_SendResponseFunction>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80017d2:	2164      	movs	r1, #100	; 0x64
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <RFP_ParseFunction+0xf8>)
 80017d6:	f7ff f929 	bl	8000a2c <HC12_ReciveToIdleDMA>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20003cac 	.word	0x20003cac
 80017e8:	20003be4 	.word	0x20003be4

080017ec <RFP_RunningFunction>:
static void RFP_RunningFunction(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
   switch(RfpDataRecive[2])
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <RFP_RunningFunction+0xa4>)
 80017f2:	789b      	ldrb	r3, [r3, #2]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d028      	beq.n	800184a <RFP_RunningFunction+0x5e>
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	dc3b      	bgt.n	8001874 <RFP_RunningFunction+0x88>
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d002      	beq.n	8001806 <RFP_RunningFunction+0x1a>
 8001800:	2b02      	cmp	r3, #2
 8001802:	d015      	beq.n	8001830 <RFP_RunningFunction+0x44>
         }
         break;
      }
      default:
      {
         break;
 8001804:	e036      	b.n	8001874 <RFP_RunningFunction+0x88>
         if(RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction != NULL)
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <RFP_RunningFunction+0xa4>)
 8001808:	78db      	ldrb	r3, [r3, #3]
 800180a:	3b01      	subs	r3, #1
 800180c:	4a21      	ldr	r2, [pc, #132]	; (8001894 <RFP_RunningFunction+0xa8>)
 800180e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d030      	beq.n	8001878 <RFP_RunningFunction+0x8c>
            RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction(RfpDataRecive, Rfp->DataSize, 4);
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <RFP_RunningFunction+0xa4>)
 8001818:	78db      	ldrb	r3, [r3, #3]
 800181a:	3b01      	subs	r3, #1
 800181c:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <RFP_RunningFunction+0xa8>)
 800181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001822:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <RFP_RunningFunction+0xac>)
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	6891      	ldr	r1, [r2, #8]
 8001828:	2204      	movs	r2, #4
 800182a:	4819      	ldr	r0, [pc, #100]	; (8001890 <RFP_RunningFunction+0xa4>)
 800182c:	4798      	blx	r3
         break;
 800182e:	e023      	b.n	8001878 <RFP_RunningFunction+0x8c>
         if(RfpDataFunctions.RfpDataFunction != NULL)
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <RFP_RunningFunction+0xb0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d021      	beq.n	800187c <RFP_RunningFunction+0x90>
            RfpDataFunctions.RfpDataFunction(RfpDataRecive, Rfp->DataSize, 4);
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <RFP_RunningFunction+0xb0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a16      	ldr	r2, [pc, #88]	; (8001898 <RFP_RunningFunction+0xac>)
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	6891      	ldr	r1, [r2, #8]
 8001842:	2204      	movs	r2, #4
 8001844:	4812      	ldr	r0, [pc, #72]	; (8001890 <RFP_RunningFunction+0xa4>)
 8001846:	4798      	blx	r3
         break;
 8001848:	e018      	b.n	800187c <RFP_RunningFunction+0x90>
         if(RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction != NULL)
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <RFP_RunningFunction+0xa4>)
 800184c:	78db      	ldrb	r3, [r3, #3]
 800184e:	3b01      	subs	r3, #1
 8001850:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <RFP_RunningFunction+0xb4>)
 8001852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d012      	beq.n	8001880 <RFP_RunningFunction+0x94>
            RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction(RfpDataRecive, Rfp->DataSize, 4);
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <RFP_RunningFunction+0xa4>)
 800185c:	78db      	ldrb	r3, [r3, #3]
 800185e:	3b01      	subs	r3, #1
 8001860:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <RFP_RunningFunction+0xb4>)
 8001862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001866:	4a0c      	ldr	r2, [pc, #48]	; (8001898 <RFP_RunningFunction+0xac>)
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	6891      	ldr	r1, [r2, #8]
 800186c:	2204      	movs	r2, #4
 800186e:	4808      	ldr	r0, [pc, #32]	; (8001890 <RFP_RunningFunction+0xa4>)
 8001870:	4798      	blx	r3
         break;
 8001872:	e005      	b.n	8001880 <RFP_RunningFunction+0x94>
         break;
 8001874:	bf00      	nop
 8001876:	e004      	b.n	8001882 <RFP_RunningFunction+0x96>
         break;
 8001878:	bf00      	nop
 800187a:	e002      	b.n	8001882 <RFP_RunningFunction+0x96>
         break;
 800187c:	bf00      	nop
 800187e:	e000      	b.n	8001882 <RFP_RunningFunction+0x96>
         break;
 8001880:	bf00      	nop
      }
   }
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8001882:	2164      	movs	r1, #100	; 0x64
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <RFP_RunningFunction+0xa4>)
 8001886:	f7ff f8d1 	bl	8000a2c <HC12_ReciveToIdleDMA>
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20003be4 	.word	0x20003be4
 8001894:	20003cb0 	.word	0x20003cb0
 8001898:	20003cac 	.word	0x20003cac
 800189c:	20003cc8 	.word	0x20003cc8
 80018a0:	20003ccc 	.word	0x20003ccc

080018a4 <RFP_SendFunction>:
static void RFP_SendFunction(void)
{
 80018a4:	b598      	push	{r3, r4, r7, lr}
 80018a6:	af00      	add	r7, sp, #0
   if(Rfp->Cnt < 5)
 80018a8:	4b16      	ldr	r3, [pc, #88]	; (8001904 <RFP_SendFunction+0x60>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d819      	bhi.n	80018e6 <RFP_SendFunction+0x42>
   {
      HAL_Delay(200);
 80018b2:	20c8      	movs	r0, #200	; 0xc8
 80018b4:	f000 ff88 	bl	80027c8 <HAL_Delay>
      HC12_TransmitData(RfpDataTransmit, Rfp->DataSizeTransmit);
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <RFP_SendFunction+0x60>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	4619      	mov	r1, r3
 80018c0:	4811      	ldr	r0, [pc, #68]	; (8001908 <RFP_SendFunction+0x64>)
 80018c2:	f7ff f89f 	bl	8000a04 <HC12_TransmitData>
      Rfp->Cnt++;
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <RFP_SendFunction+0x60>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	3201      	adds	r2, #1
 80018ce:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_WAIT_FOR_RESPONSE;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <RFP_SendFunction+0x60>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2205      	movs	r2, #5
 80018d6:	705a      	strb	r2, [r3, #1]
      Rfp->LastTick = HAL_GetTick();
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <RFP_SendFunction+0x60>)
 80018da:	681c      	ldr	r4, [r3, #0]
 80018dc:	f000 ff68 	bl	80027b0 <HAL_GetTick>
 80018e0:	4603      	mov	r3, r0
 80018e2:	61a3      	str	r3, [r4, #24]
   {
      Rfp->Cnt      = 0;
      Rfp->NewEvent = RFP_EVENT_ERROR;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 80018e4:	e00b      	b.n	80018fe <RFP_SendFunction+0x5a>
      Rfp->Cnt      = 0;
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <RFP_SendFunction+0x60>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2200      	movs	r2, #0
 80018ec:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_ERROR;
 80018ee:	4b05      	ldr	r3, [pc, #20]	; (8001904 <RFP_SendFunction+0x60>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2203      	movs	r2, #3
 80018f4:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80018f6:	2164      	movs	r1, #100	; 0x64
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <RFP_SendFunction+0x68>)
 80018fa:	f7ff f897 	bl	8000a2c <HC12_ReciveToIdleDMA>
}
 80018fe:	bf00      	nop
 8001900:	bd98      	pop	{r3, r4, r7, pc}
 8001902:	bf00      	nop
 8001904:	20003cac 	.word	0x20003cac
 8001908:	20003c48 	.word	0x20003c48
 800190c:	20003be4 	.word	0x20003be4

08001910 <RFP_WaitForResponseFunction>:
static void RFP_WaitForResponseFunction(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - Rfp->LastTick > 2000)
 8001914:	f000 ff4c 	bl	80027b0 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <RFP_WaitForResponseFunction+0x44>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001926:	d904      	bls.n	8001932 <RFP_WaitForResponseFunction+0x22>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <RFP_WaitForResponseFunction+0x44>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2203      	movs	r2, #3
 800192e:	705a      	strb	r2, [r3, #1]
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
   }
}
 8001930:	e00d      	b.n	800194e <RFP_WaitForResponseFunction+0x3e>
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <RFP_WaitForResponseFunction+0x44>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	791b      	ldrb	r3, [r3, #4]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b01      	cmp	r3, #1
 800193c:	d107      	bne.n	800194e <RFP_WaitForResponseFunction+0x3e>
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <RFP_WaitForResponseFunction+0x44>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2200      	movs	r2, #0
 8001944:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 8001946:	4b03      	ldr	r3, [pc, #12]	; (8001954 <RFP_WaitForResponseFunction+0x44>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2201      	movs	r2, #1
 800194c:	705a      	strb	r2, [r3, #1]
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20003cac 	.word	0x20003cac

08001958 <RFP_ParseResponseFunction>:
static void RFP_ParseResponseFunction(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800195e:	4b50      	ldr	r3, [pc, #320]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	3b04      	subs	r3, #4
 8001966:	4a4f      	ldr	r2, [pc, #316]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 8001968:	5cd3      	ldrb	r3, [r2, r3]
 800196a:	061a      	lsls	r2, r3, #24
 800196c:	4b4c      	ldr	r3, [pc, #304]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	3b03      	subs	r3, #3
 8001974:	494b      	ldr	r1, [pc, #300]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 8001976:	5ccb      	ldrb	r3, [r1, r3]
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	431a      	orrs	r2, r3
                          | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 800197c:	4b48      	ldr	r3, [pc, #288]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	3b02      	subs	r3, #2
 8001984:	4947      	ldr	r1, [pc, #284]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	4313      	orrs	r3, r2
 800198c:	4a44      	ldr	r2, [pc, #272]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	6892      	ldr	r2, [r2, #8]
 8001992:	3a01      	subs	r2, #1
 8001994:	4943      	ldr	r1, [pc, #268]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 8001996:	5c8a      	ldrb	r2, [r1, r2]
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8001998:	4313      	orrs	r3, r2
 800199a:	607b      	str	r3, [r7, #4]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 800199c:	4b40      	ldr	r3, [pc, #256]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	3b04      	subs	r3, #4
 80019a4:	4a3f      	ldr	r2, [pc, #252]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 80019a6:	4619      	mov	r1, r3
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f7ff f866 	bl	8000a7c <Crc>
 80019b0:	4602      	mov	r2, r0
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d12d      	bne.n	8001a14 <RFP_ParseResponseFunction+0xbc>
   {
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 80019b8:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 80019ba:	781a      	ldrb	r2, [r3, #0]
 80019bc:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	795b      	ldrb	r3, [r3, #5]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d11d      	bne.n	8001a02 <RFP_ParseResponseFunction+0xaa>
 80019c6:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 80019c8:	789b      	ldrb	r3, [r3, #2]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d119      	bne.n	8001a02 <RFP_ParseResponseFunction+0xaa>
      {
         if(RfpDataRecive[3] == RFP_OK)
 80019ce:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 80019d0:	78db      	ldrb	r3, [r3, #3]
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d10c      	bne.n	80019f0 <RFP_ParseResponseFunction+0x98>
         {
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 80019d6:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2204      	movs	r2, #4
 80019dc:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 80019de:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80019e6:	2164      	movs	r1, #100	; 0x64
 80019e8:	482e      	ldr	r0, [pc, #184]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 80019ea:	f7ff f81f 	bl	8000a2c <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 80019ee:	e053      	b.n	8001a98 <RFP_ParseResponseFunction+0x140>
         }
         else
         {
            Rfp->NewEvent = RFP_EVENT_ERROR;
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2203      	movs	r2, #3
 80019f6:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80019f8:	2164      	movs	r1, #100	; 0x64
 80019fa:	482a      	ldr	r0, [pc, #168]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 80019fc:	f7ff f816 	bl	8000a2c <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8001a00:	e04a      	b.n	8001a98 <RFP_ParseResponseFunction+0x140>
         }
      }
      else
      {
         Rfp->NewEvent = RFP_EVENT_ERROR;
 8001a02:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2203      	movs	r2, #3
 8001a08:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8001a0a:	2164      	movs	r1, #100	; 0x64
 8001a0c:	4825      	ldr	r0, [pc, #148]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 8001a0e:	f7ff f80d 	bl	8000a2c <HC12_ReciveToIdleDMA>
   else
   {
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
      Rfp->NewEvent = RFP_EVENT_ERROR;
   }
}
 8001a12:	e041      	b.n	8001a98 <RFP_ParseResponseFunction+0x140>
   else if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 8001a14:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4921      	ldr	r1, [pc, #132]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff f884 	bl	8000b2c <RepareMessage>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d12d      	bne.n	8001a86 <RFP_ParseResponseFunction+0x12e>
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 8001a2c:	781a      	ldrb	r2, [r3, #0]
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	795b      	ldrb	r3, [r3, #5]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d11d      	bne.n	8001a74 <RFP_ParseResponseFunction+0x11c>
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 8001a3a:	789b      	ldrb	r3, [r3, #2]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d119      	bne.n	8001a74 <RFP_ParseResponseFunction+0x11c>
         if(RfpDataRecive[3] == RFP_OK)
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 8001a42:	78db      	ldrb	r3, [r3, #3]
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d10c      	bne.n	8001a62 <RFP_ParseResponseFunction+0x10a>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 8001a50:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8001a58:	2164      	movs	r1, #100	; 0x64
 8001a5a:	4812      	ldr	r0, [pc, #72]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 8001a5c:	f7fe ffe6 	bl	8000a2c <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8001a60:	e01a      	b.n	8001a98 <RFP_ParseResponseFunction+0x140>
            Rfp->NewEvent = RFP_EVENT_ERROR;
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2203      	movs	r2, #3
 8001a68:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8001a6a:	2164      	movs	r1, #100	; 0x64
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 8001a6e:	f7fe ffdd 	bl	8000a2c <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8001a72:	e011      	b.n	8001a98 <RFP_ParseResponseFunction+0x140>
         Rfp->NewEvent = RFP_EVENT_ERROR;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2203      	movs	r2, #3
 8001a7a:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8001a7c:	2164      	movs	r1, #100	; 0x64
 8001a7e:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 8001a80:	f7fe ffd4 	bl	8000a2c <HC12_ReciveToIdleDMA>
}
 8001a84:	e008      	b.n	8001a98 <RFP_ParseResponseFunction+0x140>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8001a86:	2164      	movs	r1, #100	; 0x64
 8001a88:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <RFP_ParseResponseFunction+0x14c>)
 8001a8a:	f7fe ffcf 	bl	8000a2c <HC12_ReciveToIdleDMA>
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <RFP_ParseResponseFunction+0x148>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2203      	movs	r2, #3
 8001a94:	705a      	strb	r2, [r3, #1]
}
 8001a96:	e7ff      	b.n	8001a98 <RFP_ParseResponseFunction+0x140>
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20003cac 	.word	0x20003cac
 8001aa4:	20003be4 	.word	0x20003be4

08001aa8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <MX_RNG_Init+0x24>)
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <MX_RNG_Init+0x28>)
 8001ab0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_RNG_Init+0x24>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001ab8:	4804      	ldr	r0, [pc, #16]	; (8001acc <MX_RNG_Init+0x24>)
 8001aba:	f003 fa0f 	bl	8004edc <HAL_RNG_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001ac4:	f7ff fcf4 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20003ce0 	.word	0x20003ce0
 8001ad0:	50060800 	.word	0x50060800

08001ad4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b0aa      	sub	sp, #168	; 0xa8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	2298      	movs	r2, #152	; 0x98
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f00a f971 	bl	800bdcc <memset>
  if(rngHandle->Instance==RNG)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a11      	ldr	r2, [pc, #68]	; (8001b34 <HAL_RNG_MspInit+0x60>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d11b      	bne.n	8001b2c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001af4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001af8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fc95 	bl	8004434 <HAL_RCCEx_PeriphCLKConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001b10:	f7ff fcce 	bl	80014b0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_RNG_MspInit+0x64>)
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_RNG_MspInit+0x64>)
 8001b1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RNG_MspInit+0x64>)
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	37a8      	adds	r7, #168	; 0xa8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	50060800 	.word	0x50060800
 8001b38:	40021000 	.word	0x40021000

08001b3c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b50:	2300      	movs	r3, #0
 8001b52:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <MX_RTC_Init+0x68>)
 8001b56:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <MX_RTC_Init+0x6c>)
 8001b58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <MX_RTC_Init+0x68>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <MX_RTC_Init+0x68>)
 8001b62:	227f      	movs	r2, #127	; 0x7f
 8001b64:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_RTC_Init+0x68>)
 8001b68:	22ff      	movs	r2, #255	; 0xff
 8001b6a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <MX_RTC_Init+0x68>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_RTC_Init+0x68>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <MX_RTC_Init+0x68>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_RTC_Init+0x68>)
 8001b80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b84:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <MX_RTC_Init+0x68>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_RTC_Init+0x68>)
 8001b8e:	f003 fa9f 	bl	80050d0 <HAL_RTC_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001b98:	f7ff fc8a 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20003cf4 	.word	0x20003cf4
 8001ba8:	40002800 	.word	0x40002800

08001bac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b0aa      	sub	sp, #168	; 0xa8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	2298      	movs	r2, #152	; 0x98
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f00a f905 	bl	800bdcc <memset>
  if(rtcHandle->Instance==RTC)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_RTC_MspInit+0x74>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d124      	bne.n	8001c16 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fc28 	bl	8004434 <HAL_RCCEx_PeriphCLKConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001bea:	f7ff fc61 	bl	80014b0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_RTC_MspInit+0x78>)
 8001bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <HAL_RTC_MspInit+0x78>)
 8001bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_RTC_MspInit+0x78>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <HAL_RTC_MspInit+0x78>)
 8001c04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c08:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_RTC_MspInit+0x78>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c16:	bf00      	nop
 8001c18:	37a8      	adds	r7, #168	; 0xa8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40002800 	.word	0x40002800
 8001c24:	40021000 	.word	0x40021000

08001c28 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <MX_SPI1_Init+0x74>)
 8001c2e:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <MX_SPI1_Init+0x78>)
 8001c30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <MX_SPI1_Init+0x74>)
 8001c34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c3a:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <MX_SPI1_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <MX_SPI1_Init+0x74>)
 8001c42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <MX_SPI1_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <MX_SPI1_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_SPI1_Init+0x74>)
 8001c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <MX_SPI1_Init+0x74>)
 8001c5e:	2228      	movs	r2, #40	; 0x28
 8001c60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_SPI1_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_SPI1_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <MX_SPI1_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_SPI1_Init+0x74>)
 8001c76:	2207      	movs	r2, #7
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <MX_SPI1_Init+0x74>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_SPI1_Init+0x74>)
 8001c82:	2208      	movs	r2, #8
 8001c84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_SPI1_Init+0x74>)
 8001c88:	f003 fc16 	bl	80054b8 <HAL_SPI_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c92:	f7ff fc0d 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20003d28 	.word	0x20003d28
 8001ca0:	40013000 	.word	0x40013000

08001ca4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <MX_SPI3_Init+0x74>)
 8001caa:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <MX_SPI3_Init+0x78>)
 8001cac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <MX_SPI3_Init+0x74>)
 8001cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cb4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001cb6:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <MX_SPI3_Init+0x74>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <MX_SPI3_Init+0x74>)
 8001cbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cc2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <MX_SPI3_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <MX_SPI3_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_SPI3_Init+0x74>)
 8001cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_SPI3_Init+0x74>)
 8001cda:	2220      	movs	r2, #32
 8001cdc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_SPI3_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_SPI3_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <MX_SPI3_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_SPI3_Init+0x74>)
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <MX_SPI3_Init+0x74>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_SPI3_Init+0x74>)
 8001cfe:	2208      	movs	r2, #8
 8001d00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_SPI3_Init+0x74>)
 8001d04:	f003 fbd8 	bl	80054b8 <HAL_SPI_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001d0e:	f7ff fbcf 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20003d8c 	.word	0x20003d8c
 8001d1c:	40003c00 	.word	0x40003c00

08001d20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08c      	sub	sp, #48	; 0x30
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a2e      	ldr	r2, [pc, #184]	; (8001df8 <HAL_SPI_MspInit+0xd8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d129      	bne.n	8001d96 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d42:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <HAL_SPI_MspInit+0xdc>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	4a2d      	ldr	r2, [pc, #180]	; (8001dfc <HAL_SPI_MspInit+0xdc>)
 8001d48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d4e:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <HAL_SPI_MspInit+0xdc>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <HAL_SPI_MspInit+0xdc>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <HAL_SPI_MspInit+0xdc>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d66:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <HAL_SPI_MspInit+0xdc>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d72:	23e0      	movs	r3, #224	; 0xe0
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d82:	2305      	movs	r3, #5
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d90:	f001 f94e 	bl	8003030 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001d94:	e02c      	b.n	8001df0 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI3)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a19      	ldr	r2, [pc, #100]	; (8001e00 <HAL_SPI_MspInit+0xe0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d127      	bne.n	8001df0 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_SPI_MspInit+0xdc>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <HAL_SPI_MspInit+0xdc>)
 8001da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001daa:	6593      	str	r3, [r2, #88]	; 0x58
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_SPI_MspInit+0xdc>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db8:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <HAL_SPI_MspInit+0xdc>)
 8001dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbc:	4a0f      	ldr	r2, [pc, #60]	; (8001dfc <HAL_SPI_MspInit+0xdc>)
 8001dbe:	f043 0302 	orr.w	r3, r3, #2
 8001dc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <HAL_SPI_MspInit+0xdc>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001dd0:	2338      	movs	r3, #56	; 0x38
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001de0:	2306      	movs	r3, #6
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	4619      	mov	r1, r3
 8001dea:	4806      	ldr	r0, [pc, #24]	; (8001e04 <HAL_SPI_MspInit+0xe4>)
 8001dec:	f001 f920 	bl	8003030 <HAL_GPIO_Init>
}
 8001df0:	bf00      	nop
 8001df2:	3730      	adds	r7, #48	; 0x30
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40013000 	.word	0x40013000
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40003c00 	.word	0x40003c00
 8001e04:	48000400 	.word	0x48000400

08001e08 <ssd1306_command>:
#include "main.h"
#include "string.h"
SPI_HandleTypeDef *ssd1306_spi;
static uint8_t buffer[(SSD1306_LCDWIDTH * SSD1306_LCDHEIGHT) / 8];
static void ssd1306_command(uint8_t command)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2101      	movs	r1, #1
 8001e16:	480d      	ldr	r0, [pc, #52]	; (8001e4c <ssd1306_command+0x44>)
 8001e18:	f001 fab4 	bl	8003384 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2110      	movs	r1, #16
 8001e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e24:	f001 faae 	bl	8003384 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, &command, 1, 10);
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <ssd1306_command+0x48>)
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	1df9      	adds	r1, r7, #7
 8001e2e:	230a      	movs	r3, #10
 8001e30:	2201      	movs	r2, #1
 8001e32:	f003 fbe4 	bl	80055fe <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 8001e36:	2201      	movs	r2, #1
 8001e38:	2110      	movs	r1, #16
 8001e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3e:	f001 faa1 	bl	8003384 <HAL_GPIO_WritePin>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	48000400 	.word	0x48000400
 8001e50:	20003df0 	.word	0x20003df0

08001e54 <ssd1306_set_pixel>:
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(ssd1306_spi, &data, 1, 10);
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
// }
void ssd1306_set_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	71bb      	strb	r3, [r7, #6]
 8001e62:	4613      	mov	r3, r2
 8001e64:	717b      	strb	r3, [r7, #5]
   if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db43      	blt.n	8001ef6 <ssd1306_set_pixel+0xa2>
 8001e6e:	79bb      	ldrb	r3, [r7, #6]
 8001e70:	2b3f      	cmp	r3, #63	; 0x3f
 8001e72:	d840      	bhi.n	8001ef6 <ssd1306_set_pixel+0xa2>
   {
      return;
   }
   if(color != 0 && color != 1)
 8001e74:	797b      	ldrb	r3, [r7, #5]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <ssd1306_set_pixel+0x2c>
 8001e7a:	797b      	ldrb	r3, [r7, #5]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d13c      	bne.n	8001efa <ssd1306_set_pixel+0xa6>
   {
      return;
   }
   if(color == 0)
 8001e80:	797b      	ldrb	r3, [r7, #5]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d11c      	bne.n	8001ec0 <ssd1306_set_pixel+0x6c>
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8001e86:	79fa      	ldrb	r2, [r7, #7]
 8001e88:	79bb      	ldrb	r3, [r7, #6]
 8001e8a:	08db      	lsrs	r3, r3, #3
 8001e8c:	b2d8      	uxtb	r0, r3
 8001e8e:	4603      	mov	r3, r0
 8001e90:	01db      	lsls	r3, r3, #7
 8001e92:	4413      	add	r3, r2
 8001e94:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <ssd1306_set_pixel+0xb4>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	b25a      	sxtb	r2, r3
 8001e9a:	79bb      	ldrb	r3, [r7, #6]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	b25b      	sxtb	r3, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	4013      	ands	r3, r2
 8001eae:	b259      	sxtb	r1, r3
 8001eb0:	79fa      	ldrb	r2, [r7, #7]
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	01db      	lsls	r3, r3, #7
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b2c9      	uxtb	r1, r1
 8001eba:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <ssd1306_set_pixel+0xb4>)
 8001ebc:	54d1      	strb	r1, [r2, r3]
 8001ebe:	e01d      	b.n	8001efc <ssd1306_set_pixel+0xa8>
   }
   else
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8001ec0:	79fa      	ldrb	r2, [r7, #7]
 8001ec2:	79bb      	ldrb	r3, [r7, #6]
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	b2d8      	uxtb	r0, r3
 8001ec8:	4603      	mov	r3, r0
 8001eca:	01db      	lsls	r3, r3, #7
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <ssd1306_set_pixel+0xb4>)
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	b25a      	sxtb	r2, r3
 8001ed4:	79bb      	ldrb	r3, [r7, #6]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	b25b      	sxtb	r3, r3
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	b259      	sxtb	r1, r3
 8001ee6:	79fa      	ldrb	r2, [r7, #7]
 8001ee8:	4603      	mov	r3, r0
 8001eea:	01db      	lsls	r3, r3, #7
 8001eec:	4413      	add	r3, r2
 8001eee:	b2c9      	uxtb	r1, r1
 8001ef0:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <ssd1306_set_pixel+0xb4>)
 8001ef2:	54d1      	strb	r1, [r2, r3]
 8001ef4:	e002      	b.n	8001efc <ssd1306_set_pixel+0xa8>
      return;
 8001ef6:	bf00      	nop
 8001ef8:	e000      	b.n	8001efc <ssd1306_set_pixel+0xa8>
      return;
 8001efa:	bf00      	nop
   }
}
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20003df4 	.word	0x20003df4

08001f0c <ssd1306_display>:
void ssd1306_display()
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
   ssd1306_command(0x22);
 8001f10:	2022      	movs	r0, #34	; 0x22
 8001f12:	f7ff ff79 	bl	8001e08 <ssd1306_command>
   ssd1306_command(0x00);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff ff76 	bl	8001e08 <ssd1306_command>
   ssd1306_command(0x07);
 8001f1c:	2007      	movs	r0, #7
 8001f1e:	f7ff ff73 	bl	8001e08 <ssd1306_command>
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_SET);
 8001f22:	2201      	movs	r2, #1
 8001f24:	2101      	movs	r1, #1
 8001f26:	480c      	ldr	r0, [pc, #48]	; (8001f58 <ssd1306_display+0x4c>)
 8001f28:	f001 fa2c 	bl	8003384 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2110      	movs	r1, #16
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f34:	f001 fa26 	bl	8003384 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, (uint8_t *)&buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8), 100);
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <ssd1306_display+0x50>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	2364      	movs	r3, #100	; 0x64
 8001f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f42:	4907      	ldr	r1, [pc, #28]	; (8001f60 <ssd1306_display+0x54>)
 8001f44:	f003 fb5b 	bl	80055fe <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	2110      	movs	r1, #16
 8001f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f50:	f001 fa18 	bl	8003384 <HAL_GPIO_WritePin>
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	48000400 	.word	0x48000400
 8001f5c:	20003df0 	.word	0x20003df0
 8001f60:	20003df4 	.word	0x20003df4

08001f64 <ssd1306_clear>:
void ssd1306_clear()
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
   memset(buffer, 0x00, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 8001f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4802      	ldr	r0, [pc, #8]	; (8001f78 <ssd1306_clear+0x14>)
 8001f70:	f009 ff2c 	bl	800bdcc <memset>
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20003df4 	.word	0x20003df4

08001f7c <ssd1306_init>:
void ssd1306_init(SPI_HandleTypeDef *spi)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f8a:	4833      	ldr	r0, [pc, #204]	; (8002058 <ssd1306_init+0xdc>)
 8001f8c:	f001 f9fa 	bl	8003384 <HAL_GPIO_WritePin>
   HAL_Delay(150);
 8001f90:	2096      	movs	r0, #150	; 0x96
 8001f92:	f000 fc19 	bl	80027c8 <HAL_Delay>
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f9c:	482e      	ldr	r0, [pc, #184]	; (8002058 <ssd1306_init+0xdc>)
 8001f9e:	f001 f9f1 	bl	8003384 <HAL_GPIO_WritePin>
   HAL_Delay(100);
 8001fa2:	2064      	movs	r0, #100	; 0x64
 8001fa4:	f000 fc10 	bl	80027c8 <HAL_Delay>
   ssd1306_spi = spi;
 8001fa8:	4a2c      	ldr	r2, [pc, #176]	; (800205c <ssd1306_init+0xe0>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]
   ssd1306_command(0xAE); // Display Off
 8001fae:	20ae      	movs	r0, #174	; 0xae
 8001fb0:	f7ff ff2a 	bl	8001e08 <ssd1306_command>

   ssd1306_command(0x00);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7ff ff27 	bl	8001e08 <ssd1306_command>
   ssd1306_command(0x10);
 8001fba:	2010      	movs	r0, #16
 8001fbc:	f7ff ff24 	bl	8001e08 <ssd1306_command>
   ssd1306_command(0x40);
 8001fc0:	2040      	movs	r0, #64	; 0x40
 8001fc2:	f7ff ff21 	bl	8001e08 <ssd1306_command>
   ssd1306_command(0x20); // Set addressing mode
 8001fc6:	2020      	movs	r0, #32
 8001fc8:	f7ff ff1e 	bl	8001e08 <ssd1306_command>
   ssd1306_command(0x00); // Horizontal Addressing Mode
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff ff1b 	bl	8001e08 <ssd1306_command>

   ssd1306_command(0x81); // Set Contrast Control
 8001fd2:	2081      	movs	r0, #129	; 0x81
 8001fd4:	f7ff ff18 	bl	8001e08 <ssd1306_command>
   ssd1306_command(0xff);
 8001fd8:	20ff      	movs	r0, #255	; 0xff
 8001fda:	f7ff ff15 	bl	8001e08 <ssd1306_command>
   ssd1306_command(0xA0 | (0x01 & 1));
 8001fde:	20a1      	movs	r0, #161	; 0xa1
 8001fe0:	f7ff ff12 	bl	8001e08 <ssd1306_command>
   ssd1306_command(0xC0 | (0x08 & (1 << 3)));
 8001fe4:	20c8      	movs	r0, #200	; 0xc8
 8001fe6:	f7ff ff0f 	bl	8001e08 <ssd1306_command>

   ssd1306_command(0xA6); // Set Normal Display
 8001fea:	20a6      	movs	r0, #166	; 0xa6
 8001fec:	f7ff ff0c 	bl	8001e08 <ssd1306_command>

   ssd1306_command(0xA8); // Select Multiplex Ratio
 8001ff0:	20a8      	movs	r0, #168	; 0xa8
 8001ff2:	f7ff ff09 	bl	8001e08 <ssd1306_command>
   ssd1306_command(0x3F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8001ff6:	203f      	movs	r0, #63	; 0x3f
 8001ff8:	f7ff ff06 	bl	8001e08 <ssd1306_command>

   ssd1306_command(0xD3); // Setting Display Offset
 8001ffc:	20d3      	movs	r0, #211	; 0xd3
 8001ffe:	f7ff ff03 	bl	8001e08 <ssd1306_command>
   ssd1306_command(0x00); // 00H Reset
 8002002:	2000      	movs	r0, #0
 8002004:	f7ff ff00 	bl	8001e08 <ssd1306_command>

   ssd1306_command(0xD5); // SET DISPLAY CLOCK
 8002008:	20d5      	movs	r0, #213	; 0xd5
 800200a:	f7ff fefd 	bl	8001e08 <ssd1306_command>
   ssd1306_command(0x80); // 105HZ
 800200e:	2080      	movs	r0, #128	; 0x80
 8002010:	f7ff fefa 	bl	8001e08 <ssd1306_command>

   ssd1306_command(0xD9); // Set Pre-Charge period
 8002014:	20d9      	movs	r0, #217	; 0xd9
 8002016:	f7ff fef7 	bl	8001e08 <ssd1306_command>
   ssd1306_command(0x22);
 800201a:	2022      	movs	r0, #34	; 0x22
 800201c:	f7ff fef4 	bl	8001e08 <ssd1306_command>

   ssd1306_command(0xDA); // Set COM Hardware Configuration
 8002020:	20da      	movs	r0, #218	; 0xda
 8002022:	f7ff fef1 	bl	8001e08 <ssd1306_command>
   ssd1306_command(0x12); // Alternative COM Pin---See IC Spec page 34
 8002026:	2012      	movs	r0, #18
 8002028:	f7ff feee 	bl	8001e08 <ssd1306_command>
                          // (0x02)=> A4=0;Sequential COM pin configuration;A5=0;Disable COM Left/Right remap

   ssd1306_command(0xDB); // Set Deselect Vcomh level
 800202c:	20db      	movs	r0, #219	; 0xdb
 800202e:	f7ff feeb 	bl	8001e08 <ssd1306_command>
   ssd1306_command(0x40);
 8002032:	2040      	movs	r0, #64	; 0x40
 8002034:	f7ff fee8 	bl	8001e08 <ssd1306_command>

   ssd1306_command(0x8D); // Set Charge Pump
 8002038:	208d      	movs	r0, #141	; 0x8d
 800203a:	f7ff fee5 	bl	8001e08 <ssd1306_command>
   // ssd1306_command(0x10);  // Disable Charge Pump
   ssd1306_command(0x14); // Endable Charge Pump
 800203e:	2014      	movs	r0, #20
 8002040:	f7ff fee2 	bl	8001e08 <ssd1306_command>

   ssd1306_command(0xA4); // Entire Display ON
 8002044:	20a4      	movs	r0, #164	; 0xa4
 8002046:	f7ff fedf 	bl	8001e08 <ssd1306_command>
   ssd1306_command(SSD1306_DISPLAYON);
 800204a:	20af      	movs	r0, #175	; 0xaf
 800204c:	f7ff fedc 	bl	8001e08 <ssd1306_command>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	48000400 	.word	0x48000400
 800205c:	20003df0 	.word	0x20003df0

08002060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_MspInit+0x4c>)
 8002068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206a:	4a10      	ldr	r2, [pc, #64]	; (80020ac <HAL_MspInit+0x4c>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6613      	str	r3, [r2, #96]	; 0x60
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <HAL_MspInit+0x4c>)
 8002074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_MspInit+0x4c>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <HAL_MspInit+0x4c>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6593      	str	r3, [r2, #88]	; 0x58
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <HAL_MspInit+0x4c>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	210f      	movs	r1, #15
 800209a:	f06f 0001 	mvn.w	r0, #1
 800209e:	f000 fc6f 	bl	8002980 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000

080020b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08c      	sub	sp, #48	; 0x30
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80020be:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <HAL_InitTick+0xc8>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	4a2d      	ldr	r2, [pc, #180]	; (8002178 <HAL_InitTick+0xc8>)
 80020c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ca:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_InitTick+0xc8>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020d6:	f107 020c 	add.w	r2, r7, #12
 80020da:	f107 0310 	add.w	r3, r7, #16
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 f8b5 	bl	8004250 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80020e6:	f002 f89d 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 80020ea:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	4a23      	ldr	r2, [pc, #140]	; (800217c <HAL_InitTick+0xcc>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	0c9b      	lsrs	r3, r3, #18
 80020f6:	3b01      	subs	r3, #1
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80020fa:	4b21      	ldr	r3, [pc, #132]	; (8002180 <HAL_InitTick+0xd0>)
 80020fc:	4a21      	ldr	r2, [pc, #132]	; (8002184 <HAL_InitTick+0xd4>)
 80020fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002100:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <HAL_InitTick+0xd0>)
 8002102:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002106:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002108:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <HAL_InitTick+0xd0>)
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_InitTick+0xd0>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_InitTick+0xd0>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_InitTick+0xd0>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8002120:	4817      	ldr	r0, [pc, #92]	; (8002180 <HAL_InitTick+0xd0>)
 8002122:	f003 fd3f 	bl	8005ba4 <HAL_TIM_Base_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800212c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002130:	2b00      	cmp	r3, #0
 8002132:	d11b      	bne.n	800216c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8002134:	4812      	ldr	r0, [pc, #72]	; (8002180 <HAL_InitTick+0xd0>)
 8002136:	f003 fd8d 	bl	8005c54 <HAL_TIM_Base_Start_IT>
 800213a:	4603      	mov	r3, r0
 800213c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002144:	2b00      	cmp	r3, #0
 8002146:	d111      	bne.n	800216c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002148:	201a      	movs	r0, #26
 800214a:	f000 fc35 	bl	80029b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b0f      	cmp	r3, #15
 8002152:	d808      	bhi.n	8002166 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8002154:	2200      	movs	r2, #0
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	201a      	movs	r0, #26
 800215a:	f000 fc11 	bl	8002980 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <HAL_InitTick+0xd8>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	e002      	b.n	800216c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800216c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002170:	4618      	mov	r0, r3
 8002172:	3730      	adds	r7, #48	; 0x30
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	431bde83 	.word	0x431bde83
 8002180:	200041f4 	.word	0x200041f4
 8002184:	40014800 	.word	0x40014800
 8002188:	20000078 	.word	0x20000078

0800218c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <NMI_Handler+0x4>

08002192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002196:	e7fe      	b.n	8002196 <HardFault_Handler+0x4>

08002198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800219c:	e7fe      	b.n	800219c <MemManage_Handler+0x4>

0800219e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <BusFault_Handler+0x4>

080021a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <UsageFault_Handler+0x4>

080021aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <DMA1_Channel1_IRQHandler+0x10>)
 80021be:	f000 fde7 	bl	8002d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2000436c 	.word	0x2000436c

080021cc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80021d2:	f003 feb6 	bl	8005f42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200041f4 	.word	0x200041f4

080021e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <USART1_IRQHandler+0x10>)
 80021e6:	f004 ff67 	bl	80070b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200042dc 	.word	0x200042dc

080021f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021fc:	4a14      	ldr	r2, [pc, #80]	; (8002250 <_sbrk+0x5c>)
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <_sbrk+0x60>)
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <_sbrk+0x64>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <_sbrk+0x64>)
 8002212:	4a12      	ldr	r2, [pc, #72]	; (800225c <_sbrk+0x68>)
 8002214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	429a      	cmp	r2, r3
 8002222:	d207      	bcs.n	8002234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002224:	f009 fd9a 	bl	800bd5c <__errno>
 8002228:	4603      	mov	r3, r0
 800222a:	220c      	movs	r2, #12
 800222c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
 8002232:	e009      	b.n	8002248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223a:	4b07      	ldr	r3, [pc, #28]	; (8002258 <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <_sbrk+0x64>)
 8002244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002246:	68fb      	ldr	r3, [r7, #12]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20050000 	.word	0x20050000
 8002254:	00000c00 	.word	0x00000c00
 8002258:	20004240 	.word	0x20004240
 800225c:	2000c660 	.word	0x2000c660

08002260 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <SystemInit+0x28>)
 8002266:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800226a:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <SystemInit+0x28>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	4a05      	ldr	r2, [pc, #20]	; (8002288 <SystemInit+0x28>)
 8002274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08e      	sub	sp, #56	; 0x38
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ac:	463b      	mov	r3, r7
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]
 80022ba:	615a      	str	r2, [r3, #20]
 80022bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022be:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <MX_TIM2_Init+0xe8>)
 80022c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022c6:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <MX_TIM2_Init+0xe8>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022cc:	4b29      	ldr	r3, [pc, #164]	; (8002374 <MX_TIM2_Init+0xe8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022d2:	4b28      	ldr	r3, [pc, #160]	; (8002374 <MX_TIM2_Init+0xe8>)
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295
 80022d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <MX_TIM2_Init+0xe8>)
 80022dc:	2200      	movs	r2, #0
 80022de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <MX_TIM2_Init+0xe8>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022e6:	4823      	ldr	r0, [pc, #140]	; (8002374 <MX_TIM2_Init+0xe8>)
 80022e8:	f003 fc5c 	bl	8005ba4 <HAL_TIM_Base_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80022f2:	f7ff f8dd 	bl	80014b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002300:	4619      	mov	r1, r3
 8002302:	481c      	ldr	r0, [pc, #112]	; (8002374 <MX_TIM2_Init+0xe8>)
 8002304:	f004 f850 	bl	80063a8 <HAL_TIM_ConfigClockSource>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800230e:	f7ff f8cf 	bl	80014b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002312:	4818      	ldr	r0, [pc, #96]	; (8002374 <MX_TIM2_Init+0xe8>)
 8002314:	f003 fd0e 	bl	8005d34 <HAL_TIM_PWM_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800231e:	f7ff f8c7 	bl	80014b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	4619      	mov	r1, r3
 8002330:	4810      	ldr	r0, [pc, #64]	; (8002374 <MX_TIM2_Init+0xe8>)
 8002332:	f004 fd35 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800233c:	f7ff f8b8 	bl	80014b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002340:	2360      	movs	r3, #96	; 0x60
 8002342:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002348:	2300      	movs	r3, #0
 800234a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002350:	463b      	mov	r3, r7
 8002352:	2200      	movs	r2, #0
 8002354:	4619      	mov	r1, r3
 8002356:	4807      	ldr	r0, [pc, #28]	; (8002374 <MX_TIM2_Init+0xe8>)
 8002358:	f003 ff12 	bl	8006180 <HAL_TIM_PWM_ConfigChannel>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002362:	f7ff f8a5 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002366:	4803      	ldr	r0, [pc, #12]	; (8002374 <MX_TIM2_Init+0xe8>)
 8002368:	f000 f8bc 	bl	80024e4 <HAL_TIM_MspPostInit>

}
 800236c:	bf00      	nop
 800236e:	3738      	adds	r7, #56	; 0x38
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20004244 	.word	0x20004244

08002378 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08c      	sub	sp, #48	; 0x30
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f009 fd20 	bl	800bdcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238c:	463b      	mov	r3, r7
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002396:	4b21      	ldr	r3, [pc, #132]	; (800241c <MX_TIM5_Init+0xa4>)
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <MX_TIM5_Init+0xa8>)
 800239a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800239c:	4b1f      	ldr	r3, [pc, #124]	; (800241c <MX_TIM5_Init+0xa4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a2:	4b1e      	ldr	r3, [pc, #120]	; (800241c <MX_TIM5_Init+0xa4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80023a8:	4b1c      	ldr	r3, [pc, #112]	; (800241c <MX_TIM5_Init+0xa4>)
 80023aa:	f04f 32ff 	mov.w	r2, #4294967295
 80023ae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_TIM5_Init+0xa4>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b6:	4b19      	ldr	r3, [pc, #100]	; (800241c <MX_TIM5_Init+0xa4>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023bc:	2301      	movs	r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023c4:	2301      	movs	r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80023cc:	230f      	movs	r3, #15
 80023ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023d0:	2300      	movs	r3, #0
 80023d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023d4:	2301      	movs	r3, #1
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80023dc:	230f      	movs	r3, #15
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80023e0:	f107 030c 	add.w	r3, r7, #12
 80023e4:	4619      	mov	r1, r3
 80023e6:	480d      	ldr	r0, [pc, #52]	; (800241c <MX_TIM5_Init+0xa4>)
 80023e8:	f003 fd05 	bl	8005df6 <HAL_TIM_Encoder_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80023f2:	f7ff f85d 	bl	80014b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023fe:	463b      	mov	r3, r7
 8002400:	4619      	mov	r1, r3
 8002402:	4806      	ldr	r0, [pc, #24]	; (800241c <MX_TIM5_Init+0xa4>)
 8002404:	f004 fccc 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800240e:	f7ff f84f 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	3730      	adds	r7, #48	; 0x30
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20004290 	.word	0x20004290
 8002420:	40000c00 	.word	0x40000c00

08002424 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002434:	d10b      	bne.n	800244e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_TIM_Base_MspInit+0x38>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_TIM_Base_MspInit+0x38>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6593      	str	r3, [r2, #88]	; 0x58
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_TIM_Base_MspInit+0x38>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	; 0x28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a17      	ldr	r2, [pc, #92]	; (80024dc <HAL_TIM_Encoder_MspInit+0x7c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d128      	bne.n	80024d4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002482:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	4a16      	ldr	r2, [pc, #88]	; (80024e0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002488:	f043 0308 	orr.w	r3, r3, #8
 800248c:	6593      	str	r3, [r2, #88]	; 0x58
 800248e:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_TIM_Encoder_MspInit+0x80>)
 800249c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249e:	4a10      	ldr	r2, [pc, #64]	; (80024e0 <HAL_TIM_Encoder_MspInit+0x80>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <HAL_TIM_Encoder_MspInit+0x80>)
 80024a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024b2:	2303      	movs	r3, #3
 80024b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	2302      	movs	r3, #2
 80024b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024c2:	2302      	movs	r3, #2
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c6:	f107 0314 	add.w	r3, r7, #20
 80024ca:	4619      	mov	r1, r3
 80024cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024d0:	f000 fdae 	bl	8003030 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80024d4:	bf00      	nop
 80024d6:	3728      	adds	r7, #40	; 0x28
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40000c00 	.word	0x40000c00
 80024e0:	40021000 	.word	0x40021000

080024e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002504:	d11d      	bne.n	8002542 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <HAL_TIM_MspPostInit+0x68>)
 8002508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250a:	4a10      	ldr	r2, [pc, #64]	; (800254c <HAL_TIM_MspPostInit+0x68>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_TIM_MspPostInit+0x68>)
 8002514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800251e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002522:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002530:	2301      	movs	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	4619      	mov	r1, r3
 800253a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800253e:	f000 fd77 	bl	8003030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002542:	bf00      	nop
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000

08002550 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002554:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 8002556:	4a25      	ldr	r2, [pc, #148]	; (80025ec <MX_USART1_UART_Init+0x9c>)
 8002558:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 800255a:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 800255c:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002560:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002562:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002568:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 800256a:	2200      	movs	r2, #0
 800256c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002574:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 8002576:	220c      	movs	r2, #12
 8002578:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800257a:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 8002582:	2200      	movs	r2, #0
 8002584:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002586:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 8002588:	2200      	movs	r2, #0
 800258a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800258c:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 800258e:	2200      	movs	r2, #0
 8002590:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 8002594:	2210      	movs	r2, #16
 8002596:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002598:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 800259a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800259e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025a0:	4811      	ldr	r0, [pc, #68]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 80025a2:	f004 fca3 	bl	8006eec <HAL_UART_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 80025ac:	f7fe ff80 	bl	80014b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025b0:	2100      	movs	r1, #0
 80025b2:	480d      	ldr	r0, [pc, #52]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 80025b4:	f006 f854 	bl	8008660 <HAL_UARTEx_SetTxFifoThreshold>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 80025be:	f7fe ff77 	bl	80014b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025c2:	2100      	movs	r1, #0
 80025c4:	4808      	ldr	r0, [pc, #32]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 80025c6:	f006 f889 	bl	80086dc <HAL_UARTEx_SetRxFifoThreshold>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 80025d0:	f7fe ff6e 	bl	80014b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80025d4:	4804      	ldr	r0, [pc, #16]	; (80025e8 <MX_USART1_UART_Init+0x98>)
 80025d6:	f006 f80a 	bl	80085ee <HAL_UARTEx_DisableFifoMode>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 80025e0:	f7fe ff66 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	200042dc 	.word	0x200042dc
 80025ec:	40013800 	.word	0x40013800

080025f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b0b0      	sub	sp, #192	; 0xc0
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	2298      	movs	r2, #152	; 0x98
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f009 fbdb 	bl	800bdcc <memset>
  if(uartHandle->Instance==USART1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a36      	ldr	r2, [pc, #216]	; (80026f4 <HAL_UART_MspInit+0x104>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d165      	bne.n	80026ec <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002620:	2301      	movs	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002624:	2300      	movs	r3, #0
 8002626:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4618      	mov	r0, r3
 800262e:	f001 ff01 	bl	8004434 <HAL_RCCEx_PeriphCLKConfig>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002638:	f7fe ff3a 	bl	80014b0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800263c:	4b2e      	ldr	r3, [pc, #184]	; (80026f8 <HAL_UART_MspInit+0x108>)
 800263e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002640:	4a2d      	ldr	r2, [pc, #180]	; (80026f8 <HAL_UART_MspInit+0x108>)
 8002642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002646:	6613      	str	r3, [r2, #96]	; 0x60
 8002648:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <HAL_UART_MspInit+0x108>)
 800264a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002654:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <HAL_UART_MspInit+0x108>)
 8002656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002658:	4a27      	ldr	r2, [pc, #156]	; (80026f8 <HAL_UART_MspInit+0x108>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002660:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <HAL_UART_MspInit+0x108>)
 8002662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800266c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	2303      	movs	r3, #3
 8002682:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002686:	2307      	movs	r3, #7
 8002688:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002690:	4619      	mov	r1, r3
 8002692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002696:	f000 fccb 	bl	8003030 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_UART_MspInit+0x10c>)
 800269c:	4a18      	ldr	r2, [pc, #96]	; (8002700 <HAL_UART_MspInit+0x110>)
 800269e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80026a0:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_UART_MspInit+0x10c>)
 80026a2:	2219      	movs	r2, #25
 80026a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_UART_MspInit+0x10c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ac:	4b13      	ldr	r3, [pc, #76]	; (80026fc <HAL_UART_MspInit+0x10c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_UART_MspInit+0x10c>)
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_UART_MspInit+0x10c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <HAL_UART_MspInit+0x10c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <HAL_UART_MspInit+0x10c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_UART_MspInit+0x10c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026d0:	480a      	ldr	r0, [pc, #40]	; (80026fc <HAL_UART_MspInit+0x10c>)
 80026d2:	f000 f97f 	bl	80029d4 <HAL_DMA_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80026dc:	f7fe fee8 	bl	80014b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a06      	ldr	r2, [pc, #24]	; (80026fc <HAL_UART_MspInit+0x10c>)
 80026e4:	67da      	str	r2, [r3, #124]	; 0x7c
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <HAL_UART_MspInit+0x10c>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026ec:	bf00      	nop
 80026ee:	37c0      	adds	r7, #192	; 0xc0
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40021000 	.word	0x40021000
 80026fc:	2000436c 	.word	0x2000436c
 8002700:	40020008 	.word	0x40020008

08002704 <Reset_Handler>:
 8002704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800273c <LoopForever+0x2>
 8002708:	f7ff fdaa 	bl	8002260 <SystemInit>
 800270c:	480c      	ldr	r0, [pc, #48]	; (8002740 <LoopForever+0x6>)
 800270e:	490d      	ldr	r1, [pc, #52]	; (8002744 <LoopForever+0xa>)
 8002710:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <LoopForever+0xe>)
 8002712:	2300      	movs	r3, #0
 8002714:	e002      	b.n	800271c <LoopCopyDataInit>

08002716 <CopyDataInit>:
 8002716:	58d4      	ldr	r4, [r2, r3]
 8002718:	50c4      	str	r4, [r0, r3]
 800271a:	3304      	adds	r3, #4

0800271c <LoopCopyDataInit>:
 800271c:	18c4      	adds	r4, r0, r3
 800271e:	428c      	cmp	r4, r1
 8002720:	d3f9      	bcc.n	8002716 <CopyDataInit>
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <LoopForever+0x12>)
 8002724:	4c0a      	ldr	r4, [pc, #40]	; (8002750 <LoopForever+0x16>)
 8002726:	2300      	movs	r3, #0
 8002728:	e001      	b.n	800272e <LoopFillZerobss>

0800272a <FillZerobss>:
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	3204      	adds	r2, #4

0800272e <LoopFillZerobss>:
 800272e:	42a2      	cmp	r2, r4
 8002730:	d3fb      	bcc.n	800272a <FillZerobss>
 8002732:	f009 fb19 	bl	800bd68 <__libc_init_array>
 8002736:	f7fe fe11 	bl	800135c <main>

0800273a <LoopForever>:
 800273a:	e7fe      	b.n	800273a <LoopForever>
 800273c:	20050000 	.word	0x20050000
 8002740:	20000000 	.word	0x20000000
 8002744:	200000e8 	.word	0x200000e8
 8002748:	0800cb50 	.word	0x0800cb50
 800274c:	200000e8 	.word	0x200000e8
 8002750:	2000c660 	.word	0x2000c660

08002754 <ADC1_2_IRQHandler>:
 8002754:	e7fe      	b.n	8002754 <ADC1_2_IRQHandler>

08002756 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002760:	2003      	movs	r0, #3
 8002762:	f000 f902 	bl	800296a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002766:	2000      	movs	r0, #0
 8002768:	f7ff fca2 	bl	80020b0 <HAL_InitTick>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	71fb      	strb	r3, [r7, #7]
 8002776:	e001      	b.n	800277c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002778:	f7ff fc72 	bl	8002060 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800277c:	79fb      	ldrb	r3, [r7, #7]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_IncTick+0x20>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_IncTick+0x24>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4413      	add	r3, r2
 8002798:	4a04      	ldr	r2, [pc, #16]	; (80027ac <HAL_IncTick+0x24>)
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	2000007c 	.word	0x2000007c
 80027ac:	200043cc 	.word	0x200043cc

080027b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return uwTick;
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <HAL_GetTick+0x14>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	200043cc 	.word	0x200043cc

080027c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d0:	f7ff ffee 	bl	80027b0 <HAL_GetTick>
 80027d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d005      	beq.n	80027ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_Delay+0x44>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ee:	bf00      	nop
 80027f0:	f7ff ffde 	bl	80027b0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d8f7      	bhi.n	80027f0 <HAL_Delay+0x28>
  {
  }
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	2000007c 	.word	0x2000007c

08002810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800283c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002842:	4a04      	ldr	r2, [pc, #16]	; (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	60d3      	str	r3, [r2, #12]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <__NVIC_GetPriorityGrouping+0x18>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	f003 0307 	and.w	r3, r3, #7
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	2b00      	cmp	r3, #0
 8002884:	db0b      	blt.n	800289e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	4907      	ldr	r1, [pc, #28]	; (80028ac <__NVIC_EnableIRQ+0x38>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	2001      	movs	r0, #1
 8002896:	fa00 f202 	lsl.w	r2, r0, r2
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000e100 	.word	0xe000e100

080028b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db0a      	blt.n	80028da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	490c      	ldr	r1, [pc, #48]	; (80028fc <__NVIC_SetPriority+0x4c>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	440b      	add	r3, r1
 80028d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d8:	e00a      	b.n	80028f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4908      	ldr	r1, [pc, #32]	; (8002900 <__NVIC_SetPriority+0x50>)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	3b04      	subs	r3, #4
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	761a      	strb	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000e100 	.word	0xe000e100
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f1c3 0307 	rsb	r3, r3, #7
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf28      	it	cs
 8002922:	2304      	movcs	r3, #4
 8002924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3304      	adds	r3, #4
 800292a:	2b06      	cmp	r3, #6
 800292c:	d902      	bls.n	8002934 <NVIC_EncodePriority+0x30>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3b03      	subs	r3, #3
 8002932:	e000      	b.n	8002936 <NVIC_EncodePriority+0x32>
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	f04f 32ff 	mov.w	r2, #4294967295
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294c:	f04f 31ff 	mov.w	r1, #4294967295
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43d9      	mvns	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	4313      	orrs	r3, r2
         );
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	; 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ff4c 	bl	8002810 <__NVIC_SetPriorityGrouping>
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002992:	f7ff ff61 	bl	8002858 <__NVIC_GetPriorityGrouping>
 8002996:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	6978      	ldr	r0, [r7, #20]
 800299e:	f7ff ffb1 	bl	8002904 <NVIC_EncodePriority>
 80029a2:	4602      	mov	r2, r0
 80029a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff ff80 	bl	80028b0 <__NVIC_SetPriority>
}
 80029b0:	bf00      	nop
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ff54 	bl	8002874 <__NVIC_EnableIRQ>
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e08d      	b.n	8002b02 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_DMA_Init+0x138>)
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d80f      	bhi.n	8002a12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	4b45      	ldr	r3, [pc, #276]	; (8002b10 <HAL_DMA_Init+0x13c>)
 80029fa:	4413      	add	r3, r2
 80029fc:	4a45      	ldr	r2, [pc, #276]	; (8002b14 <HAL_DMA_Init+0x140>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	009a      	lsls	r2, r3, #2
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a42      	ldr	r2, [pc, #264]	; (8002b18 <HAL_DMA_Init+0x144>)
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a10:	e00e      	b.n	8002a30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	4b40      	ldr	r3, [pc, #256]	; (8002b1c <HAL_DMA_Init+0x148>)
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a3d      	ldr	r2, [pc, #244]	; (8002b14 <HAL_DMA_Init+0x140>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	009a      	lsls	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a3c      	ldr	r2, [pc, #240]	; (8002b20 <HAL_DMA_Init+0x14c>)
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa72 	bl	8002f6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a90:	d102      	bne.n	8002a98 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002aac:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d010      	beq.n	8002ad8 <HAL_DMA_Init+0x104>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d80c      	bhi.n	8002ad8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fa92 	bl	8002fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	e008      	b.n	8002aea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40020407 	.word	0x40020407
 8002b10:	bffdfff8 	.word	0xbffdfff8
 8002b14:	cccccccd 	.word	0xcccccccd
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	bffdfbf8 	.word	0xbffdfbf8
 8002b20:	40020400 	.word	0x40020400

08002b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_DMA_Start_IT+0x20>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e066      	b.n	8002c12 <HAL_DMA_Start_IT+0xee>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d155      	bne.n	8002c04 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0201 	bic.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f9b6 	bl	8002eee <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 020e 	orr.w	r2, r2, #14
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e00f      	b.n	8002bbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0204 	bic.w	r2, r2, #4
 8002baa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 020a 	orr.w	r2, r2, #10
 8002bba:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0201 	orr.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e005      	b.n	8002c10 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d008      	beq.n	8002c44 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2204      	movs	r2, #4
 8002c36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e040      	b.n	8002cc6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 020e 	bic.w	r2, r2, #14
 8002c52:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c62:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	f003 021c 	and.w	r2, r3, #28
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	2101      	movs	r1, #1
 8002c82:	fa01 f202 	lsl.w	r2, r1, r2
 8002c86:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c90:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00c      	beq.n	8002cb4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ca8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002cb2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d005      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2204      	movs	r2, #4
 8002cee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	e047      	b.n	8002d86 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 020e 	bic.w	r2, r2, #14
 8002d04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f003 021c 	and.w	r2, r3, #28
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2101      	movs	r1, #1
 8002d34:	fa01 f202 	lsl.w	r2, r1, r2
 8002d38:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d42:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00c      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d64:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	4798      	blx	r3
    }
  }
  return status;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dac:	f003 031c 	and.w	r3, r3, #28
 8002db0:	2204      	movs	r2, #4
 8002db2:	409a      	lsls	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d026      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x7a>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d021      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d107      	bne.n	8002de4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0204 	bic.w	r2, r2, #4
 8002de2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	f003 021c 	and.w	r2, r3, #28
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	2104      	movs	r1, #4
 8002df2:	fa01 f202 	lsl.w	r2, r1, r2
 8002df6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d071      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002e08:	e06c      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	f003 031c 	and.w	r3, r3, #28
 8002e12:	2202      	movs	r2, #2
 8002e14:	409a      	lsls	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d02e      	beq.n	8002e7c <HAL_DMA_IRQHandler+0xec>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d029      	beq.n	8002e7c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10b      	bne.n	8002e4e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 020a 	bic.w	r2, r2, #10
 8002e44:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	f003 021c 	and.w	r2, r3, #28
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e60:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d038      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e7a:	e033      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	f003 031c 	and.w	r3, r3, #28
 8002e84:	2208      	movs	r2, #8
 8002e86:	409a      	lsls	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d02a      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x156>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d025      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 020e 	bic.w	r2, r2, #14
 8002ea8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	f003 021c 	and.w	r2, r3, #28
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d004      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
}
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f04:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f16:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	f003 021c 	and.w	r2, r3, #28
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	2101      	movs	r1, #1
 8002f26:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d108      	bne.n	8002f4e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f4c:	e007      	b.n	8002f5e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	60da      	str	r2, [r3, #12]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d80a      	bhi.n	8002f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f8c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6493      	str	r3, [r2, #72]	; 0x48
 8002f94:	e007      	b.n	8002fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	009a      	lsls	r2, r3, #2
 8002f9e:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002fa0:	4413      	add	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	3b08      	subs	r3, #8
 8002fae:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a0a      	ldr	r2, [pc, #40]	; (8002fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002fbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	40020407 	.word	0x40020407
 8002fdc:	4002081c 	.word	0x4002081c
 8002fe0:	cccccccd 	.word	0xcccccccd
 8002fe4:	40020880 	.word	0x40020880

08002fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	461a      	mov	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a08      	ldr	r2, [pc, #32]	; (800302c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800300a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3b01      	subs	r3, #1
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2201      	movs	r2, #1
 8003016:	409a      	lsls	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	1000823f 	.word	0x1000823f
 800302c:	40020940 	.word	0x40020940

08003030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800303e:	e166      	b.n	800330e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2101      	movs	r1, #1
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	fa01 f303 	lsl.w	r3, r1, r3
 800304c:	4013      	ands	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 8158 	beq.w	8003308 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d005      	beq.n	8003070 <HAL_GPIO_Init+0x40>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d130      	bne.n	80030d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030a6:	2201      	movs	r2, #1
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f003 0201 	and.w	r2, r3, #1
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d017      	beq.n	800310e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	2203      	movs	r2, #3
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4013      	ands	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d123      	bne.n	8003162 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	08da      	lsrs	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3208      	adds	r2, #8
 8003122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003126:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	220f      	movs	r2, #15
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4013      	ands	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	08da      	lsrs	r2, r3, #3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3208      	adds	r2, #8
 800315c:	6939      	ldr	r1, [r7, #16]
 800315e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	2203      	movs	r2, #3
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0203 	and.w	r2, r3, #3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 80b2 	beq.w	8003308 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a4:	4b61      	ldr	r3, [pc, #388]	; (800332c <HAL_GPIO_Init+0x2fc>)
 80031a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a8:	4a60      	ldr	r2, [pc, #384]	; (800332c <HAL_GPIO_Init+0x2fc>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6613      	str	r3, [r2, #96]	; 0x60
 80031b0:	4b5e      	ldr	r3, [pc, #376]	; (800332c <HAL_GPIO_Init+0x2fc>)
 80031b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031bc:	4a5c      	ldr	r2, [pc, #368]	; (8003330 <HAL_GPIO_Init+0x300>)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	3302      	adds	r3, #2
 80031c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	220f      	movs	r2, #15
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031e6:	d02b      	beq.n	8003240 <HAL_GPIO_Init+0x210>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a52      	ldr	r2, [pc, #328]	; (8003334 <HAL_GPIO_Init+0x304>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d025      	beq.n	800323c <HAL_GPIO_Init+0x20c>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a51      	ldr	r2, [pc, #324]	; (8003338 <HAL_GPIO_Init+0x308>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d01f      	beq.n	8003238 <HAL_GPIO_Init+0x208>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a50      	ldr	r2, [pc, #320]	; (800333c <HAL_GPIO_Init+0x30c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d019      	beq.n	8003234 <HAL_GPIO_Init+0x204>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a4f      	ldr	r2, [pc, #316]	; (8003340 <HAL_GPIO_Init+0x310>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d013      	beq.n	8003230 <HAL_GPIO_Init+0x200>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a4e      	ldr	r2, [pc, #312]	; (8003344 <HAL_GPIO_Init+0x314>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00d      	beq.n	800322c <HAL_GPIO_Init+0x1fc>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a4d      	ldr	r2, [pc, #308]	; (8003348 <HAL_GPIO_Init+0x318>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d007      	beq.n	8003228 <HAL_GPIO_Init+0x1f8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a4c      	ldr	r2, [pc, #304]	; (800334c <HAL_GPIO_Init+0x31c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d101      	bne.n	8003224 <HAL_GPIO_Init+0x1f4>
 8003220:	2307      	movs	r3, #7
 8003222:	e00e      	b.n	8003242 <HAL_GPIO_Init+0x212>
 8003224:	2308      	movs	r3, #8
 8003226:	e00c      	b.n	8003242 <HAL_GPIO_Init+0x212>
 8003228:	2306      	movs	r3, #6
 800322a:	e00a      	b.n	8003242 <HAL_GPIO_Init+0x212>
 800322c:	2305      	movs	r3, #5
 800322e:	e008      	b.n	8003242 <HAL_GPIO_Init+0x212>
 8003230:	2304      	movs	r3, #4
 8003232:	e006      	b.n	8003242 <HAL_GPIO_Init+0x212>
 8003234:	2303      	movs	r3, #3
 8003236:	e004      	b.n	8003242 <HAL_GPIO_Init+0x212>
 8003238:	2302      	movs	r3, #2
 800323a:	e002      	b.n	8003242 <HAL_GPIO_Init+0x212>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_GPIO_Init+0x212>
 8003240:	2300      	movs	r3, #0
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	f002 0203 	and.w	r2, r2, #3
 8003248:	0092      	lsls	r2, r2, #2
 800324a:	4093      	lsls	r3, r2
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003252:	4937      	ldr	r1, [pc, #220]	; (8003330 <HAL_GPIO_Init+0x300>)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3302      	adds	r3, #2
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003260:	4b3b      	ldr	r3, [pc, #236]	; (8003350 <HAL_GPIO_Init+0x320>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	43db      	mvns	r3, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003284:	4a32      	ldr	r2, [pc, #200]	; (8003350 <HAL_GPIO_Init+0x320>)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800328a:	4b31      	ldr	r3, [pc, #196]	; (8003350 <HAL_GPIO_Init+0x320>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	43db      	mvns	r3, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032ae:	4a28      	ldr	r2, [pc, #160]	; (8003350 <HAL_GPIO_Init+0x320>)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032b4:	4b26      	ldr	r3, [pc, #152]	; (8003350 <HAL_GPIO_Init+0x320>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	43db      	mvns	r3, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032d8:	4a1d      	ldr	r2, [pc, #116]	; (8003350 <HAL_GPIO_Init+0x320>)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032de:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <HAL_GPIO_Init+0x320>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4013      	ands	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003302:	4a13      	ldr	r2, [pc, #76]	; (8003350 <HAL_GPIO_Init+0x320>)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3301      	adds	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	f47f ae91 	bne.w	8003040 <HAL_GPIO_Init+0x10>
  }
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	40021000 	.word	0x40021000
 8003330:	40010000 	.word	0x40010000
 8003334:	48000400 	.word	0x48000400
 8003338:	48000800 	.word	0x48000800
 800333c:	48000c00 	.word	0x48000c00
 8003340:	48001000 	.word	0x48001000
 8003344:	48001400 	.word	0x48001400
 8003348:	48001800 	.word	0x48001800
 800334c:	48001c00 	.word	0x48001c00
 8003350:	40010400 	.word	0x40010400

08003354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e001      	b.n	8003376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
 8003390:	4613      	mov	r3, r2
 8003392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003394:	787b      	ldrb	r3, [r7, #1]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800339a:	887a      	ldrh	r2, [r7, #2]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033a0:	e002      	b.n	80033a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a04      	ldr	r2, [pc, #16]	; (80033d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c2:	6013      	str	r3, [r2, #0]
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40007000 	.word	0x40007000

080033d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033d8:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <HAL_PWREx_GetVoltageRange+0x3c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e4:	d102      	bne.n	80033ec <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80033e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ea:	e00b      	b.n	8003404 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80033ec:	4b08      	ldr	r3, [pc, #32]	; (8003410 <HAL_PWREx_GetVoltageRange+0x3c>)
 80033ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fa:	d102      	bne.n	8003402 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80033fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003400:	e000      	b.n	8003404 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003402:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40007000 	.word	0x40007000

08003414 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d141      	bne.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003422:	4b4b      	ldr	r3, [pc, #300]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d131      	bne.n	8003494 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003430:	4b47      	ldr	r3, [pc, #284]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003436:	4a46      	ldr	r2, [pc, #280]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800343c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003440:	4b43      	ldr	r3, [pc, #268]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003448:	4a41      	ldr	r2, [pc, #260]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800344e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003450:	4b40      	ldr	r3, [pc, #256]	; (8003554 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2232      	movs	r2, #50	; 0x32
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	4a3f      	ldr	r2, [pc, #252]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	0c9b      	lsrs	r3, r3, #18
 8003462:	3301      	adds	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003466:	e002      	b.n	800346e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3b01      	subs	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800346e:	4b38      	ldr	r3, [pc, #224]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347a:	d102      	bne.n	8003482 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f2      	bne.n	8003468 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003482:	4b33      	ldr	r3, [pc, #204]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d158      	bne.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e057      	b.n	8003544 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003494:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800349a:	4a2d      	ldr	r2, [pc, #180]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034a4:	e04d      	b.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ac:	d141      	bne.n	8003532 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ae:	4b28      	ldr	r3, [pc, #160]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ba:	d131      	bne.n	8003520 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034bc:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034c2:	4a23      	ldr	r2, [pc, #140]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034cc:	4b20      	ldr	r3, [pc, #128]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034d4:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80034dc:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2232      	movs	r2, #50	; 0x32
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
 80034e6:	4a1c      	ldr	r2, [pc, #112]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	0c9b      	lsrs	r3, r3, #18
 80034ee:	3301      	adds	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034f2:	e002      	b.n	80034fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003506:	d102      	bne.n	800350e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f2      	bne.n	80034f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351a:	d112      	bne.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e011      	b.n	8003544 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003530:	e007      	b.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003532:	4b07      	ldr	r3, [pc, #28]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800353a:	4a05      	ldr	r2, [pc, #20]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800353c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003540:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	40007000 	.word	0x40007000
 8003554:	20000074 	.word	0x20000074
 8003558:	431bde83 	.word	0x431bde83

0800355c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	; 0x28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f000 bc68 	b.w	8003e40 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003570:	4b97      	ldr	r3, [pc, #604]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800357a:	4b95      	ldr	r3, [pc, #596]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80e6 	beq.w	800375e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_RCC_OscConfig+0x4c>
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	2b0c      	cmp	r3, #12
 800359c:	f040 808d 	bne.w	80036ba <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	f040 8089 	bne.w	80036ba <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035a8:	4b89      	ldr	r3, [pc, #548]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <HAL_RCC_OscConfig+0x66>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	f000 bc3f 	b.w	8003e40 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035c6:	4b82      	ldr	r3, [pc, #520]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d004      	beq.n	80035dc <HAL_RCC_OscConfig+0x80>
 80035d2:	4b7f      	ldr	r3, [pc, #508]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035da:	e005      	b.n	80035e8 <HAL_RCC_OscConfig+0x8c>
 80035dc:	4b7c      	ldr	r3, [pc, #496]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 80035de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d224      	bcs.n	8003636 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fe5f 	bl	80042b4 <RCC_SetFlashLatencyFromMSIRange>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	f000 bc1f 	b.w	8003e40 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003602:	4b73      	ldr	r3, [pc, #460]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a72      	ldr	r2, [pc, #456]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003608:	f043 0308 	orr.w	r3, r3, #8
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b70      	ldr	r3, [pc, #448]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	496d      	ldr	r1, [pc, #436]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003620:	4b6b      	ldr	r3, [pc, #428]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	4968      	ldr	r1, [pc, #416]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]
 8003634:	e025      	b.n	8003682 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003636:	4b66      	ldr	r3, [pc, #408]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a65      	ldr	r2, [pc, #404]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 800363c:	f043 0308 	orr.w	r3, r3, #8
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	4b63      	ldr	r3, [pc, #396]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	4960      	ldr	r1, [pc, #384]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003650:	4313      	orrs	r3, r2
 8003652:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003654:	4b5e      	ldr	r3, [pc, #376]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	495b      	ldr	r1, [pc, #364]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fe1e 	bl	80042b4 <RCC_SetFlashLatencyFromMSIRange>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e3de      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003682:	f000 fd21 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8003686:	4602      	mov	r2, r0
 8003688:	4b51      	ldr	r3, [pc, #324]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	4950      	ldr	r1, [pc, #320]	; (80037d4 <HAL_RCC_OscConfig+0x278>)
 8003694:	5ccb      	ldrb	r3, [r1, r3]
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	fa22 f303 	lsr.w	r3, r2, r3
 800369e:	4a4e      	ldr	r2, [pc, #312]	; (80037d8 <HAL_RCC_OscConfig+0x27c>)
 80036a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036a2:	4b4e      	ldr	r3, [pc, #312]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe fd02 	bl	80020b0 <HAL_InitTick>
 80036ac:	4603      	mov	r3, r0
 80036ae:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d052      	beq.n	800375c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
 80036b8:	e3c2      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d032      	beq.n	8003728 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036c2:	4b43      	ldr	r3, [pc, #268]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a42      	ldr	r2, [pc, #264]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036ce:	f7ff f86f 	bl	80027b0 <HAL_GetTick>
 80036d2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036d6:	f7ff f86b 	bl	80027b0 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e3ab      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036e8:	4b39      	ldr	r3, [pc, #228]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036f4:	4b36      	ldr	r3, [pc, #216]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a35      	ldr	r2, [pc, #212]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 80036fa:	f043 0308 	orr.w	r3, r3, #8
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	4b33      	ldr	r3, [pc, #204]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	4930      	ldr	r1, [pc, #192]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003712:	4b2f      	ldr	r3, [pc, #188]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	492b      	ldr	r1, [pc, #172]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]
 8003726:	e01a      	b.n	800375e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003728:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a28      	ldr	r2, [pc, #160]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003734:	f7ff f83c 	bl	80027b0 <HAL_GetTick>
 8003738:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800373c:	f7ff f838 	bl	80027b0 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e378      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x1e0>
 800375a:	e000      	b.n	800375e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800375c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d073      	beq.n	8003852 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	2b08      	cmp	r3, #8
 800376e:	d005      	beq.n	800377c <HAL_RCC_OscConfig+0x220>
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d10e      	bne.n	8003794 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d10b      	bne.n	8003794 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d063      	beq.n	8003850 <HAL_RCC_OscConfig+0x2f4>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d15f      	bne.n	8003850 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e355      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379c:	d106      	bne.n	80037ac <HAL_RCC_OscConfig+0x250>
 800379e:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a0b      	ldr	r2, [pc, #44]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e025      	b.n	80037f8 <HAL_RCC_OscConfig+0x29c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b4:	d114      	bne.n	80037e0 <HAL_RCC_OscConfig+0x284>
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a05      	ldr	r2, [pc, #20]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 80037bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a02      	ldr	r2, [pc, #8]	; (80037d0 <HAL_RCC_OscConfig+0x274>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e013      	b.n	80037f8 <HAL_RCC_OscConfig+0x29c>
 80037d0:	40021000 	.word	0x40021000
 80037d4:	0800ca9c 	.word	0x0800ca9c
 80037d8:	20000074 	.word	0x20000074
 80037dc:	20000078 	.word	0x20000078
 80037e0:	4b8f      	ldr	r3, [pc, #572]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a8e      	ldr	r2, [pc, #568]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80037e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4b8c      	ldr	r3, [pc, #560]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a8b      	ldr	r2, [pc, #556]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d013      	beq.n	8003828 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fe ffd6 	bl	80027b0 <HAL_GetTick>
 8003804:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7fe ffd2 	bl	80027b0 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e312      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800381a:	4b81      	ldr	r3, [pc, #516]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0x2ac>
 8003826:	e014      	b.n	8003852 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe ffc2 	bl	80027b0 <HAL_GetTick>
 800382c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003830:	f7fe ffbe 	bl	80027b0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e2fe      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003842:	4b77      	ldr	r3, [pc, #476]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x2d4>
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d060      	beq.n	8003920 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	2b04      	cmp	r3, #4
 8003862:	d005      	beq.n	8003870 <HAL_RCC_OscConfig+0x314>
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d119      	bne.n	800389e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d116      	bne.n	800389e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003870:	4b6b      	ldr	r3, [pc, #428]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_OscConfig+0x32c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e2db      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003888:	4b65      	ldr	r3, [pc, #404]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	061b      	lsls	r3, r3, #24
 8003896:	4962      	ldr	r1, [pc, #392]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800389c:	e040      	b.n	8003920 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d023      	beq.n	80038ee <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a6:	4b5e      	ldr	r3, [pc, #376]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a5d      	ldr	r2, [pc, #372]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80038ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fe ff7d 	bl	80027b0 <HAL_GetTick>
 80038b6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ba:	f7fe ff79 	bl	80027b0 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e2b9      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038cc:	4b54      	ldr	r3, [pc, #336]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d8:	4b51      	ldr	r3, [pc, #324]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	061b      	lsls	r3, r3, #24
 80038e6:	494e      	ldr	r1, [pc, #312]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]
 80038ec:	e018      	b.n	8003920 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ee:	4b4c      	ldr	r3, [pc, #304]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a4b      	ldr	r2, [pc, #300]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fa:	f7fe ff59 	bl	80027b0 <HAL_GetTick>
 80038fe:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003902:	f7fe ff55 	bl	80027b0 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e295      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003914:	4b42      	ldr	r3, [pc, #264]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f0      	bne.n	8003902 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8082 	beq.w	8003a32 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d05f      	beq.n	80039f6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003936:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	429a      	cmp	r2, r3
 800394a:	d037      	beq.n	80039bc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d006      	beq.n	8003964 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e26d      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d01b      	beq.n	80039a6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800396e:	4b2c      	ldr	r3, [pc, #176]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 8003970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003974:	4a2a      	ldr	r2, [pc, #168]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 8003976:	f023 0301 	bic.w	r3, r3, #1
 800397a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800397e:	f7fe ff17 	bl	80027b0 <HAL_GetTick>
 8003982:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003986:	f7fe ff13 	bl	80027b0 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b11      	cmp	r3, #17
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e253      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003998:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1ef      	bne.n	8003986 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80039a6:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ac:	f023 0210 	bic.w	r2, r3, #16
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	491a      	ldr	r1, [pc, #104]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039bc:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80039be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c2:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fe fef0 	bl	80027b0 <HAL_GetTick>
 80039d0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d4:	f7fe feec 	bl	80027b0 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b11      	cmp	r3, #17
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e22c      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039e6:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0ef      	beq.n	80039d4 <HAL_RCC_OscConfig+0x478>
 80039f4:	e01d      	b.n	8003a32 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fc:	4a08      	ldr	r2, [pc, #32]	; (8003a20 <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	f023 0301 	bic.w	r3, r3, #1
 8003a02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a06:	f7fe fed3 	bl	80027b0 <HAL_GetTick>
 8003a0a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0e:	f7fe fecf 	bl	80027b0 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b11      	cmp	r3, #17
 8003a1a:	d903      	bls.n	8003a24 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e20f      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
 8003a20:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a24:	4b83      	ldr	r3, [pc, #524]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ed      	bne.n	8003a0e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 80bd 	beq.w	8003bba <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a40:	2300      	movs	r3, #0
 8003a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a46:	4b7b      	ldr	r3, [pc, #492]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10e      	bne.n	8003a70 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a52:	4b78      	ldr	r3, [pc, #480]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	4a77      	ldr	r2, [pc, #476]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a5e:	4b75      	ldr	r3, [pc, #468]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a70:	4b71      	ldr	r3, [pc, #452]	; (8003c38 <HAL_RCC_OscConfig+0x6dc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d118      	bne.n	8003aae <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a7c:	4b6e      	ldr	r3, [pc, #440]	; (8003c38 <HAL_RCC_OscConfig+0x6dc>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a6d      	ldr	r2, [pc, #436]	; (8003c38 <HAL_RCC_OscConfig+0x6dc>)
 8003a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a88:	f7fe fe92 	bl	80027b0 <HAL_GetTick>
 8003a8c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a90:	f7fe fe8e 	bl	80027b0 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e1ce      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa2:	4b65      	ldr	r3, [pc, #404]	; (8003c38 <HAL_RCC_OscConfig+0x6dc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d02c      	beq.n	8003b14 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003aba:	4b5e      	ldr	r3, [pc, #376]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003acc:	4959      	ldr	r1, [pc, #356]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d010      	beq.n	8003b02 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ae0:	4b54      	ldr	r3, [pc, #336]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae6:	4a53      	ldr	r2, [pc, #332]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003ae8:	f043 0304 	orr.w	r3, r3, #4
 8003aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003af0:	4b50      	ldr	r3, [pc, #320]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	4a4f      	ldr	r2, [pc, #316]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b00:	e018      	b.n	8003b34 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b02:	4b4c      	ldr	r3, [pc, #304]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b08:	4a4a      	ldr	r2, [pc, #296]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b12:	e00f      	b.n	8003b34 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b14:	4b47      	ldr	r3, [pc, #284]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	4a46      	ldr	r2, [pc, #280]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b24:	4b43      	ldr	r3, [pc, #268]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	4a42      	ldr	r2, [pc, #264]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d016      	beq.n	8003b6a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fe fe38 	bl	80027b0 <HAL_GetTick>
 8003b40:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b44:	f7fe fe34 	bl	80027b0 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e172      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b5a:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ed      	beq.n	8003b44 <HAL_RCC_OscConfig+0x5e8>
 8003b68:	e01d      	b.n	8003ba6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6a:	f7fe fe21 	bl	80027b0 <HAL_GetTick>
 8003b6e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b70:	e00a      	b.n	8003b88 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b72:	f7fe fe1d 	bl	80027b0 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e15b      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b88:	4b2a      	ldr	r3, [pc, #168]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1ed      	bne.n	8003b72 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003b96:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	4a25      	ldr	r2, [pc, #148]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d105      	bne.n	8003bba <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bae:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb2:	4a20      	ldr	r2, [pc, #128]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d041      	beq.n	8003c4a <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d01c      	beq.n	8003c08 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bce:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd4:	4a17      	ldr	r2, [pc, #92]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bde:	f7fe fde7 	bl	80027b0 <HAL_GetTick>
 8003be2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003be6:	f7fe fde3 	bl	80027b0 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e123      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0ef      	beq.n	8003be6 <HAL_RCC_OscConfig+0x68a>
 8003c06:	e020      	b.n	8003c4a <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c0e:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <HAL_RCC_OscConfig+0x6d8>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c18:	f7fe fdca 	bl	80027b0 <HAL_GetTick>
 8003c1c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c1e:	e00d      	b.n	8003c3c <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c20:	f7fe fdc6 	bl	80027b0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d906      	bls.n	8003c3c <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e106      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c3c:	4b82      	ldr	r3, [pc, #520]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003c3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1ea      	bne.n	8003c20 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 80f5 	beq.w	8003e3e <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	f040 80cb 	bne.w	8003df4 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c5e:	4b7a      	ldr	r3, [pc, #488]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0203 	and.w	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d12c      	bne.n	8003ccc <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d123      	bne.n	8003ccc <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d11b      	bne.n	8003ccc <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d113      	bne.n	8003ccc <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	085b      	lsrs	r3, r3, #1
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d109      	bne.n	8003ccc <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d06d      	beq.n	8003da8 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d068      	beq.n	8003da4 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003cd2:	4b5d      	ldr	r3, [pc, #372]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d105      	bne.n	8003cea <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003cde:	4b5a      	ldr	r3, [pc, #360]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e0a8      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003cee:	4b56      	ldr	r3, [pc, #344]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a55      	ldr	r2, [pc, #340]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cfa:	f7fe fd59 	bl	80027b0 <HAL_GetTick>
 8003cfe:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d02:	f7fe fd55 	bl	80027b0 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e095      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d14:	4b4c      	ldr	r3, [pc, #304]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f0      	bne.n	8003d02 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d20:	4b49      	ldr	r3, [pc, #292]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	4b49      	ldr	r3, [pc, #292]	; (8003e4c <HAL_RCC_OscConfig+0x8f0>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d30:	3a01      	subs	r2, #1
 8003d32:	0112      	lsls	r2, r2, #4
 8003d34:	4311      	orrs	r1, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d3a:	0212      	lsls	r2, r2, #8
 8003d3c:	4311      	orrs	r1, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d42:	0852      	lsrs	r2, r2, #1
 8003d44:	3a01      	subs	r2, #1
 8003d46:	0552      	lsls	r2, r2, #21
 8003d48:	4311      	orrs	r1, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d4e:	0852      	lsrs	r2, r2, #1
 8003d50:	3a01      	subs	r2, #1
 8003d52:	0652      	lsls	r2, r2, #25
 8003d54:	4311      	orrs	r1, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d5a:	06d2      	lsls	r2, r2, #27
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	493a      	ldr	r1, [pc, #232]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d64:	4b38      	ldr	r3, [pc, #224]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a37      	ldr	r2, [pc, #220]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d70:	4b35      	ldr	r3, [pc, #212]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a34      	ldr	r2, [pc, #208]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d7c:	f7fe fd18 	bl	80027b0 <HAL_GetTick>
 8003d80:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fe fd14 	bl	80027b0 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e054      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d96:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da2:	e04c      	b.n	8003e3e <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e04b      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da8:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d144      	bne.n	8003e3e <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003db4:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a23      	ldr	r2, [pc, #140]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dc0:	4b21      	ldr	r3, [pc, #132]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a20      	ldr	r2, [pc, #128]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dcc:	f7fe fcf0 	bl	80027b0 <HAL_GetTick>
 8003dd0:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd4:	f7fe fcec 	bl	80027b0 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e02c      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de6:	4b18      	ldr	r3, [pc, #96]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x878>
 8003df2:	e024      	b.n	8003e3e <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	d01f      	beq.n	8003e3a <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfa:	4b13      	ldr	r3, [pc, #76]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003e00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fe fcd3 	bl	80027b0 <HAL_GetTick>
 8003e0a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0e:	f7fe fccf 	bl	80027b0 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e00f      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f0      	bne.n	8003e0e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	4905      	ldr	r1, [pc, #20]	; (8003e48 <HAL_RCC_OscConfig+0x8ec>)
 8003e32:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <HAL_RCC_OscConfig+0x8f4>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	60cb      	str	r3, [r1, #12]
 8003e38:	e001      	b.n	8003e3e <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3728      	adds	r7, #40	; 0x28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	019d800c 	.word	0x019d800c
 8003e50:	feeefffc 	.word	0xfeeefffc

08003e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e11d      	b.n	80040a8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b90      	ldr	r3, [pc, #576]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d910      	bls.n	8003e9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b8d      	ldr	r3, [pc, #564]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 020f 	bic.w	r2, r3, #15
 8003e82:	498b      	ldr	r1, [pc, #556]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b89      	ldr	r3, [pc, #548]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e105      	b.n	80040a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d010      	beq.n	8003eca <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	4b81      	ldr	r3, [pc, #516]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d908      	bls.n	8003eca <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb8:	4b7e      	ldr	r3, [pc, #504]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	497b      	ldr	r1, [pc, #492]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d079      	beq.n	8003fca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d11e      	bne.n	8003f1c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ede:	4b75      	ldr	r3, [pc, #468]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e0dc      	b.n	80040a8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003eee:	f000 fa3b 	bl	8004368 <RCC_GetSysClockFreqFromPLLSource>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4a70      	ldr	r2, [pc, #448]	; (80040b8 <HAL_RCC_ClockConfig+0x264>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d946      	bls.n	8003f88 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003efa:	4b6e      	ldr	r3, [pc, #440]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d140      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f06:	4b6b      	ldr	r3, [pc, #428]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f0e:	4a69      	ldr	r2, [pc, #420]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e035      	b.n	8003f88 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d107      	bne.n	8003f34 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f24:	4b63      	ldr	r3, [pc, #396]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d115      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0b9      	b.n	80040a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d107      	bne.n	8003f4c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f3c:	4b5d      	ldr	r3, [pc, #372]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d109      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e0ad      	b.n	80040a8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f4c:	4b59      	ldr	r3, [pc, #356]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0a5      	b.n	80040a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003f5c:	f000 f8b4 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8003f60:	4603      	mov	r3, r0
 8003f62:	4a55      	ldr	r2, [pc, #340]	; (80040b8 <HAL_RCC_ClockConfig+0x264>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d90f      	bls.n	8003f88 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003f68:	4b52      	ldr	r3, [pc, #328]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d109      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f74:	4b4f      	ldr	r3, [pc, #316]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f7c:	4a4d      	ldr	r2, [pc, #308]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f82:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f88:	4b4a      	ldr	r3, [pc, #296]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f023 0203 	bic.w	r2, r3, #3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4947      	ldr	r1, [pc, #284]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f9a:	f7fe fc09 	bl	80027b0 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa0:	e00a      	b.n	8003fb8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa2:	f7fe fc05 	bl	80027b0 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e077      	b.n	80040a8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb8:	4b3e      	ldr	r3, [pc, #248]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 020c 	and.w	r2, r3, #12
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d1eb      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b80      	cmp	r3, #128	; 0x80
 8003fce:	d105      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003fd0:	4b38      	ldr	r3, [pc, #224]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	4a37      	ldr	r2, [pc, #220]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fda:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d010      	beq.n	800400a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	4b31      	ldr	r3, [pc, #196]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d208      	bcs.n	800400a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff8:	4b2e      	ldr	r3, [pc, #184]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	492b      	ldr	r1, [pc, #172]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800400a:	4b29      	ldr	r3, [pc, #164]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d210      	bcs.n	800403a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004018:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f023 020f 	bic.w	r2, r3, #15
 8004020:	4923      	ldr	r1, [pc, #140]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004028:	4b21      	ldr	r3, [pc, #132]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d001      	beq.n	800403a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e036      	b.n	80040a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004046:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	4918      	ldr	r1, [pc, #96]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8004054:	4313      	orrs	r3, r2
 8004056:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d009      	beq.n	8004078 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004064:	4b13      	ldr	r3, [pc, #76]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4910      	ldr	r1, [pc, #64]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8004074:	4313      	orrs	r3, r2
 8004076:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004078:	f000 f826 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 800407c:	4602      	mov	r2, r0
 800407e:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	091b      	lsrs	r3, r3, #4
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	490c      	ldr	r1, [pc, #48]	; (80040bc <HAL_RCC_ClockConfig+0x268>)
 800408a:	5ccb      	ldrb	r3, [r1, r3]
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	fa22 f303 	lsr.w	r3, r2, r3
 8004094:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <HAL_RCC_ClockConfig+0x26c>)
 8004096:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <HAL_RCC_ClockConfig+0x270>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe f807 	bl	80020b0 <HAL_InitTick>
 80040a2:	4603      	mov	r3, r0
 80040a4:	73fb      	strb	r3, [r7, #15]

  return status;
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40022000 	.word	0x40022000
 80040b4:	40021000 	.word	0x40021000
 80040b8:	04c4b400 	.word	0x04c4b400
 80040bc:	0800ca9c 	.word	0x0800ca9c
 80040c0:	20000074 	.word	0x20000074
 80040c4:	20000078 	.word	0x20000078

080040c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	; 0x24
 80040cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	2300      	movs	r3, #0
 80040d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d6:	4b3e      	ldr	r3, [pc, #248]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e0:	4b3b      	ldr	r3, [pc, #236]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_GetSysClockFreq+0x34>
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b0c      	cmp	r3, #12
 80040f4:	d121      	bne.n	800413a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d11e      	bne.n	800413a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040fc:	4b34      	ldr	r3, [pc, #208]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d107      	bne.n	8004118 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004108:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800410a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800410e:	0a1b      	lsrs	r3, r3, #8
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	e005      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004118:	4b2d      	ldr	r3, [pc, #180]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004124:	4a2b      	ldr	r2, [pc, #172]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800412c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10d      	bne.n	8004150 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004138:	e00a      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b04      	cmp	r3, #4
 800413e:	d102      	bne.n	8004146 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004140:	4b25      	ldr	r3, [pc, #148]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	e004      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b08      	cmp	r3, #8
 800414a:	d101      	bne.n	8004150 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800414c:	4b23      	ldr	r3, [pc, #140]	; (80041dc <HAL_RCC_GetSysClockFreq+0x114>)
 800414e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	2b0c      	cmp	r3, #12
 8004154:	d134      	bne.n	80041c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004156:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d003      	beq.n	800416e <HAL_RCC_GetSysClockFreq+0xa6>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b03      	cmp	r3, #3
 800416a:	d003      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0xac>
 800416c:	e005      	b.n	800417a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800416e:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004170:	617b      	str	r3, [r7, #20]
      break;
 8004172:	e005      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <HAL_RCC_GetSysClockFreq+0x114>)
 8004176:	617b      	str	r3, [r7, #20]
      break;
 8004178:	e002      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	617b      	str	r3, [r7, #20]
      break;
 800417e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	3301      	adds	r3, #1
 800418c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800418e:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	fb03 f202 	mul.w	r2, r3, r2
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041a6:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	0e5b      	lsrs	r3, r3, #25
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	3301      	adds	r3, #1
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041c0:	69bb      	ldr	r3, [r7, #24]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3724      	adds	r7, #36	; 0x24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
 80041d4:	0800cab4 	.word	0x0800cab4
 80041d8:	00f42400 	.word	0x00f42400
 80041dc:	007a1200 	.word	0x007a1200

080041e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e4:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041e6:	681b      	ldr	r3, [r3, #0]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000074 	.word	0x20000074

080041f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041fc:	f7ff fff0 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 8004200:	4602      	mov	r2, r0
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	4904      	ldr	r1, [pc, #16]	; (8004220 <HAL_RCC_GetPCLK1Freq+0x28>)
 800420e:	5ccb      	ldrb	r3, [r1, r3]
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000
 8004220:	0800caac 	.word	0x0800caac

08004224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004228:	f7ff ffda 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 800422c:	4602      	mov	r2, r0
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	0adb      	lsrs	r3, r3, #11
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	4904      	ldr	r1, [pc, #16]	; (800424c <HAL_RCC_GetPCLK2Freq+0x28>)
 800423a:	5ccb      	ldrb	r3, [r1, r3]
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000
 800424c:	0800caac 	.word	0x0800caac

08004250 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	220f      	movs	r2, #15
 800425e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004260:	4b12      	ldr	r3, [pc, #72]	; (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0203 	and.w	r2, r3, #3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004284:	4b09      	ldr	r3, [pc, #36]	; (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	08db      	lsrs	r3, r3, #3
 800428a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <HAL_RCC_GetClockConfig+0x60>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 020f 	and.w	r2, r3, #15
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	601a      	str	r2, [r3, #0]
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40022000 	.word	0x40022000

080042b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042c0:	4b27      	ldr	r3, [pc, #156]	; (8004360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042cc:	f7ff f882 	bl	80033d4 <HAL_PWREx_GetVoltageRange>
 80042d0:	6178      	str	r0, [r7, #20]
 80042d2:	e014      	b.n	80042fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042d4:	4b22      	ldr	r3, [pc, #136]	; (8004360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80042d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d8:	4a21      	ldr	r2, [pc, #132]	; (8004360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80042da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042de:	6593      	str	r3, [r2, #88]	; 0x58
 80042e0:	4b1f      	ldr	r3, [pc, #124]	; (8004360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80042e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042ec:	f7ff f872 	bl	80033d4 <HAL_PWREx_GetVoltageRange>
 80042f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042f2:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	4a1a      	ldr	r2, [pc, #104]	; (8004360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80042f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004304:	d10b      	bne.n	800431e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b80      	cmp	r3, #128	; 0x80
 800430a:	d913      	bls.n	8004334 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2ba0      	cmp	r3, #160	; 0xa0
 8004310:	d902      	bls.n	8004318 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004312:	2302      	movs	r3, #2
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	e00d      	b.n	8004334 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004318:	2301      	movs	r3, #1
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	e00a      	b.n	8004334 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b7f      	cmp	r3, #127	; 0x7f
 8004322:	d902      	bls.n	800432a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004324:	2302      	movs	r3, #2
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	e004      	b.n	8004334 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b70      	cmp	r3, #112	; 0x70
 800432e:	d101      	bne.n	8004334 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004330:	2301      	movs	r3, #1
 8004332:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004334:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f023 020f 	bic.w	r2, r3, #15
 800433c:	4909      	ldr	r1, [pc, #36]	; (8004364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004344:	4b07      	ldr	r3, [pc, #28]	; (8004364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	429a      	cmp	r2, r3
 8004350:	d001      	beq.n	8004356 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000
 8004364:	40022000 	.word	0x40022000

08004368 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800436e:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b03      	cmp	r3, #3
 800437c:	d00b      	beq.n	8004396 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d825      	bhi.n	80043d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d008      	beq.n	800439c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d11f      	bne.n	80043d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004390:	4b25      	ldr	r3, [pc, #148]	; (8004428 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004392:	613b      	str	r3, [r7, #16]
    break;
 8004394:	e01f      	b.n	80043d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004396:	4b25      	ldr	r3, [pc, #148]	; (800442c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004398:	613b      	str	r3, [r7, #16]
    break;
 800439a:	e01c      	b.n	80043d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800439c:	4b21      	ldr	r3, [pc, #132]	; (8004424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d107      	bne.n	80043b8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043a8:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80043aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	e005      	b.n	80043c4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043b8:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80043c4:	4a1a      	ldr	r2, [pc, #104]	; (8004430 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043cc:	613b      	str	r3, [r7, #16]
    break;
 80043ce:	e002      	b.n	80043d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]
    break;
 80043d4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043d6:	4b13      	ldr	r3, [pc, #76]	; (8004424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	3301      	adds	r3, #1
 80043e2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043e4:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	0a1b      	lsrs	r3, r3, #8
 80043ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	fb03 f202 	mul.w	r2, r3, r2
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	0e5b      	lsrs	r3, r3, #25
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	3301      	adds	r3, #1
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004416:	683b      	ldr	r3, [r7, #0]
}
 8004418:	4618      	mov	r0, r3
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	40021000 	.word	0x40021000
 8004428:	00f42400 	.word	0x00f42400
 800442c:	007a1200 	.word	0x007a1200
 8004430:	0800cab4 	.word	0x0800cab4

08004434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800443c:	2300      	movs	r3, #0
 800443e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004440:	2300      	movs	r3, #0
 8004442:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800444c:	2b00      	cmp	r3, #0
 800444e:	d040      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004454:	2b80      	cmp	r3, #128	; 0x80
 8004456:	d02a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004458:	2b80      	cmp	r3, #128	; 0x80
 800445a:	d825      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800445c:	2b60      	cmp	r3, #96	; 0x60
 800445e:	d026      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004460:	2b60      	cmp	r3, #96	; 0x60
 8004462:	d821      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004464:	2b40      	cmp	r3, #64	; 0x40
 8004466:	d006      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d81d      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d009      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004470:	2b20      	cmp	r3, #32
 8004472:	d010      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004474:	e018      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004476:	4b89      	ldr	r3, [pc, #548]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	4a88      	ldr	r2, [pc, #544]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800447c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004480:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004482:	e015      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	2100      	movs	r1, #0
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fb3e 	bl	8004b0c <RCCEx_PLLSAI1_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004494:	e00c      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3320      	adds	r3, #32
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fc29 	bl	8004cf4 <RCCEx_PLLSAI2_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044a6:	e003      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	74fb      	strb	r3, [r7, #19]
      break;
 80044ac:	e000      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80044ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b0:	7cfb      	ldrb	r3, [r7, #19]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044b6:	4b79      	ldr	r3, [pc, #484]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044bc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c4:	4975      	ldr	r1, [pc, #468]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80044cc:	e001      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ce:	7cfb      	ldrb	r3, [r7, #19]
 80044d0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d047      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e6:	d030      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80044e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ec:	d82a      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80044ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f2:	d02a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80044f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f8:	d824      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80044fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044fe:	d008      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004504:	d81e      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800450a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800450e:	d010      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004510:	e018      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004512:	4b62      	ldr	r3, [pc, #392]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	4a61      	ldr	r2, [pc, #388]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800451e:	e015      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3304      	adds	r3, #4
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f000 faf0 	bl	8004b0c <RCCEx_PLLSAI1_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004530:	e00c      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3320      	adds	r3, #32
 8004536:	2100      	movs	r1, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fbdb 	bl	8004cf4 <RCCEx_PLLSAI2_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004542:	e003      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	74fb      	strb	r3, [r7, #19]
      break;
 8004548:	e000      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800454a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004552:	4b52      	ldr	r3, [pc, #328]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004554:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004560:	494e      	ldr	r1, [pc, #312]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004568:	e001      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456a:	7cfb      	ldrb	r3, [r7, #19]
 800456c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 809f 	beq.w	80046ba <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457c:	2300      	movs	r3, #0
 800457e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004580:	4b46      	ldr	r3, [pc, #280]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004590:	2300      	movs	r3, #0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00d      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004596:	4b41      	ldr	r3, [pc, #260]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459a:	4a40      	ldr	r2, [pc, #256]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800459c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a0:	6593      	str	r3, [r2, #88]	; 0x58
 80045a2:	4b3e      	ldr	r3, [pc, #248]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ae:	2301      	movs	r3, #1
 80045b0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b2:	4b3b      	ldr	r3, [pc, #236]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a3a      	ldr	r2, [pc, #232]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045be:	f7fe f8f7 	bl	80027b0 <HAL_GetTick>
 80045c2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045c4:	e009      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c6:	f7fe f8f3 	bl	80027b0 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d902      	bls.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	74fb      	strb	r3, [r7, #19]
        break;
 80045d8:	e005      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045da:	4b31      	ldr	r3, [pc, #196]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0ef      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80045e6:	7cfb      	ldrb	r3, [r7, #19]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d15b      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045ec:	4b2b      	ldr	r3, [pc, #172]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01f      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	429a      	cmp	r2, r3
 8004608:	d019      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800460a:	4b24      	ldr	r3, [pc, #144]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004614:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004616:	4b21      	ldr	r3, [pc, #132]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	4a1f      	ldr	r2, [pc, #124]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800461e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004626:	4b1d      	ldr	r3, [pc, #116]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462c:	4a1b      	ldr	r2, [pc, #108]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800462e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004636:	4a19      	ldr	r2, [pc, #100]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d016      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fe f8b2 	bl	80027b0 <HAL_GetTick>
 800464c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464e:	e00b      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004650:	f7fe f8ae 	bl	80027b0 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	f241 3288 	movw	r2, #5000	; 0x1388
 800465e:	4293      	cmp	r3, r2
 8004660:	d902      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	74fb      	strb	r3, [r7, #19]
            break;
 8004666:	e006      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800466a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0ec      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004676:	7cfb      	ldrb	r3, [r7, #19]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10c      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800468c:	4903      	ldr	r1, [pc, #12]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004694:	e008      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	74bb      	strb	r3, [r7, #18]
 800469a:	e005      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800469c:	40021000 	.word	0x40021000
 80046a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046a8:	7c7b      	ldrb	r3, [r7, #17]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d105      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ae:	4ba0      	ldr	r3, [pc, #640]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b2:	4a9f      	ldr	r2, [pc, #636]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046c6:	4b9a      	ldr	r3, [pc, #616]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	f023 0203 	bic.w	r2, r3, #3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d4:	4996      	ldr	r1, [pc, #600]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046e8:	4b91      	ldr	r3, [pc, #580]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	f023 020c 	bic.w	r2, r3, #12
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	498e      	ldr	r1, [pc, #568]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800470a:	4b89      	ldr	r3, [pc, #548]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004710:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004718:	4985      	ldr	r1, [pc, #532]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800472c:	4b80      	ldr	r3, [pc, #512]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004732:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473a:	497d      	ldr	r1, [pc, #500]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800474e:	4b78      	ldr	r3, [pc, #480]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475c:	4974      	ldr	r1, [pc, #464]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004770:	4b6f      	ldr	r3, [pc, #444]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477e:	496c      	ldr	r1, [pc, #432]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004792:	4b67      	ldr	r3, [pc, #412]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004798:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047a0:	4963      	ldr	r1, [pc, #396]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047b4:	4b5e      	ldr	r3, [pc, #376]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047c2:	495b      	ldr	r1, [pc, #364]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047d6:	4b56      	ldr	r3, [pc, #344]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	4952      	ldr	r1, [pc, #328]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047f8:	4b4d      	ldr	r3, [pc, #308]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	494a      	ldr	r1, [pc, #296]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800481a:	4b45      	ldr	r3, [pc, #276]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004828:	4941      	ldr	r1, [pc, #260]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800483c:	4b3c      	ldr	r3, [pc, #240]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800483e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004842:	f023 0203 	bic.w	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484a:	4939      	ldr	r1, [pc, #228]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d028      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800485e:	4b34      	ldr	r3, [pc, #208]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004864:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486c:	4930      	ldr	r1, [pc, #192]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800487c:	d106      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800487e:	4b2c      	ldr	r3, [pc, #176]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	4a2b      	ldr	r2, [pc, #172]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004888:	60d3      	str	r3, [r2, #12]
 800488a:	e011      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004894:	d10c      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3304      	adds	r3, #4
 800489a:	2101      	movs	r1, #1
 800489c:	4618      	mov	r0, r3
 800489e:	f000 f935 	bl	8004b0c <RCCEx_PLLSAI1_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048a6:	7cfb      	ldrb	r3, [r7, #19]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d04d      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048c4:	d108      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80048c6:	4b1a      	ldr	r3, [pc, #104]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048cc:	4a18      	ldr	r2, [pc, #96]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048d2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80048d6:	e012      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80048d8:	4b15      	ldr	r3, [pc, #84]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048de:	4a14      	ldr	r2, [pc, #80]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048e4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80048e8:	4b11      	ldr	r3, [pc, #68]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048f6:	490e      	ldr	r1, [pc, #56]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004902:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004906:	d106      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4a08      	ldr	r2, [pc, #32]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800490e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004912:	60d3      	str	r3, [r2, #12]
 8004914:	e020      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800491a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800491e:	d109      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004920:	4b03      	ldr	r3, [pc, #12]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4a02      	ldr	r2, [pc, #8]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492a:	60d3      	str	r3, [r2, #12]
 800492c:	e014      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800493c:	d10c      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3304      	adds	r3, #4
 8004942:	2101      	movs	r1, #1
 8004944:	4618      	mov	r0, r3
 8004946:	f000 f8e1 	bl	8004b0c <RCCEx_PLLSAI1_Config>
 800494a:	4603      	mov	r3, r0
 800494c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800494e:	7cfb      	ldrb	r3, [r7, #19]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004954:	7cfb      	ldrb	r3, [r7, #19]
 8004956:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d028      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004964:	4b68      	ldr	r3, [pc, #416]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004972:	4965      	ldr	r1, [pc, #404]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800497e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004982:	d106      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004984:	4b60      	ldr	r3, [pc, #384]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	4a5f      	ldr	r2, [pc, #380]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800498a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800498e:	60d3      	str	r3, [r2, #12]
 8004990:	e011      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800499a:	d10c      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3304      	adds	r3, #4
 80049a0:	2101      	movs	r1, #1
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 f8b2 	bl	8004b0c <RCCEx_PLLSAI1_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049ac:	7cfb      	ldrb	r3, [r7, #19]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80049b2:	7cfb      	ldrb	r3, [r7, #19]
 80049b4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d01e      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049c2:	4b51      	ldr	r3, [pc, #324]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049d2:	494d      	ldr	r1, [pc, #308]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3304      	adds	r3, #4
 80049ea:	2102      	movs	r1, #2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 f88d 	bl	8004b0c <RCCEx_PLLSAI1_Config>
 80049f2:	4603      	mov	r3, r0
 80049f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049f6:	7cfb      	ldrb	r3, [r7, #19]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80049fc:	7cfb      	ldrb	r3, [r7, #19]
 80049fe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00b      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a0c:	4b3e      	ldr	r3, [pc, #248]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a12:	f023 0204 	bic.w	r2, r3, #4
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a1c:	493a      	ldr	r1, [pc, #232]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00b      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a30:	4b35      	ldr	r3, [pc, #212]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a36:	f023 0218 	bic.w	r2, r3, #24
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	4931      	ldr	r1, [pc, #196]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d035      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a54:	4b2c      	ldr	r3, [pc, #176]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a2b      	ldr	r2, [pc, #172]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a60:	f7fd fea6 	bl	80027b0 <HAL_GetTick>
 8004a64:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a66:	e009      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a68:	f7fd fea2 	bl	80027b0 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d902      	bls.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	74fb      	strb	r3, [r7, #19]
        break;
 8004a7a:	e005      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a7c:	4b22      	ldr	r3, [pc, #136]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1ef      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004a88:	7cfb      	ldrb	r3, [r7, #19]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d113      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004a8e:	4b1e      	ldr	r3, [pc, #120]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a9e:	491a      	ldr	r1, [pc, #104]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3320      	adds	r3, #32
 8004aaa:	2102      	movs	r1, #2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 f921 	bl	8004cf4 <RCCEx_PLLSAI2_Config>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004abc:	7cfb      	ldrb	r3, [r7, #19]
 8004abe:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d017      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004acc:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ad2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004adc:	490a      	ldr	r1, [pc, #40]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aee:	d105      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4a04      	ldr	r2, [pc, #16]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004afa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004afc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40021000 	.word	0x40021000

08004b0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b1a:	4b72      	ldr	r3, [pc, #456]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00e      	beq.n	8004b44 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b26:	4b6f      	ldr	r3, [pc, #444]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0203 	and.w	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d103      	bne.n	8004b3e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
       ||
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d142      	bne.n	8004bc4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
 8004b42:	e03f      	b.n	8004bc4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d018      	beq.n	8004b7e <RCCEx_PLLSAI1_Config+0x72>
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d825      	bhi.n	8004b9c <RCCEx_PLLSAI1_Config+0x90>
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d002      	beq.n	8004b5a <RCCEx_PLLSAI1_Config+0x4e>
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d009      	beq.n	8004b6c <RCCEx_PLLSAI1_Config+0x60>
 8004b58:	e020      	b.n	8004b9c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b5a:	4b62      	ldr	r3, [pc, #392]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d11d      	bne.n	8004ba2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b6a:	e01a      	b.n	8004ba2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b6c:	4b5d      	ldr	r3, [pc, #372]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d116      	bne.n	8004ba6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b7c:	e013      	b.n	8004ba6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b7e:	4b59      	ldr	r3, [pc, #356]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10f      	bne.n	8004baa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b8a:	4b56      	ldr	r3, [pc, #344]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d109      	bne.n	8004baa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b9a:	e006      	b.n	8004baa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba0:	e004      	b.n	8004bac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004ba2:	bf00      	nop
 8004ba4:	e002      	b.n	8004bac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004baa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d108      	bne.n	8004bc4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004bb2:	4b4c      	ldr	r3, [pc, #304]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f023 0203 	bic.w	r2, r3, #3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4949      	ldr	r1, [pc, #292]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f040 8086 	bne.w	8004cd8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bcc:	4b45      	ldr	r3, [pc, #276]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a44      	ldr	r2, [pc, #272]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd8:	f7fd fdea 	bl	80027b0 <HAL_GetTick>
 8004bdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bde:	e009      	b.n	8004bf4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004be0:	f7fd fde6 	bl	80027b0 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d902      	bls.n	8004bf4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	73fb      	strb	r3, [r7, #15]
        break;
 8004bf2:	e005      	b.n	8004c00 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bf4:	4b3b      	ldr	r3, [pc, #236]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1ef      	bne.n	8004be0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d168      	bne.n	8004cd8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d113      	bne.n	8004c34 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c0c:	4b35      	ldr	r3, [pc, #212]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	4b35      	ldr	r3, [pc, #212]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6892      	ldr	r2, [r2, #8]
 8004c18:	0211      	lsls	r1, r2, #8
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68d2      	ldr	r2, [r2, #12]
 8004c1e:	06d2      	lsls	r2, r2, #27
 8004c20:	4311      	orrs	r1, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6852      	ldr	r2, [r2, #4]
 8004c26:	3a01      	subs	r2, #1
 8004c28:	0112      	lsls	r2, r2, #4
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	492d      	ldr	r1, [pc, #180]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	610b      	str	r3, [r1, #16]
 8004c32:	e02d      	b.n	8004c90 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d115      	bne.n	8004c66 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c3c:	691a      	ldr	r2, [r3, #16]
 8004c3e:	4b2b      	ldr	r3, [pc, #172]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6892      	ldr	r2, [r2, #8]
 8004c46:	0211      	lsls	r1, r2, #8
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6912      	ldr	r2, [r2, #16]
 8004c4c:	0852      	lsrs	r2, r2, #1
 8004c4e:	3a01      	subs	r2, #1
 8004c50:	0552      	lsls	r2, r2, #21
 8004c52:	4311      	orrs	r1, r2
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6852      	ldr	r2, [r2, #4]
 8004c58:	3a01      	subs	r2, #1
 8004c5a:	0112      	lsls	r2, r2, #4
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	4921      	ldr	r1, [pc, #132]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	610b      	str	r3, [r1, #16]
 8004c64:	e014      	b.n	8004c90 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c66:	4b1f      	ldr	r3, [pc, #124]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	4b21      	ldr	r3, [pc, #132]	; (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6892      	ldr	r2, [r2, #8]
 8004c72:	0211      	lsls	r1, r2, #8
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6952      	ldr	r2, [r2, #20]
 8004c78:	0852      	lsrs	r2, r2, #1
 8004c7a:	3a01      	subs	r2, #1
 8004c7c:	0652      	lsls	r2, r2, #25
 8004c7e:	4311      	orrs	r1, r2
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6852      	ldr	r2, [r2, #4]
 8004c84:	3a01      	subs	r2, #1
 8004c86:	0112      	lsls	r2, r2, #4
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	4916      	ldr	r1, [pc, #88]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c90:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a13      	ldr	r2, [pc, #76]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9c:	f7fd fd88 	bl	80027b0 <HAL_GetTick>
 8004ca0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ca2:	e009      	b.n	8004cb8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ca4:	f7fd fd84 	bl	80027b0 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d902      	bls.n	8004cb8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	73fb      	strb	r3, [r7, #15]
          break;
 8004cb6:	e005      	b.n	8004cc4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0ef      	beq.n	8004ca4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cca:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	4904      	ldr	r1, [pc, #16]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	07ff800f 	.word	0x07ff800f
 8004cec:	ff9f800f 	.word	0xff9f800f
 8004cf0:	f9ff800f 	.word	0xf9ff800f

08004cf4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d02:	4b72      	ldr	r3, [pc, #456]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00e      	beq.n	8004d2c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d0e:	4b6f      	ldr	r3, [pc, #444]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f003 0203 	and.w	r2, r3, #3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d103      	bne.n	8004d26 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
       ||
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d142      	bne.n	8004dac <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
 8004d2a:	e03f      	b.n	8004dac <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d018      	beq.n	8004d66 <RCCEx_PLLSAI2_Config+0x72>
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d825      	bhi.n	8004d84 <RCCEx_PLLSAI2_Config+0x90>
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d002      	beq.n	8004d42 <RCCEx_PLLSAI2_Config+0x4e>
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d009      	beq.n	8004d54 <RCCEx_PLLSAI2_Config+0x60>
 8004d40:	e020      	b.n	8004d84 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d42:	4b62      	ldr	r3, [pc, #392]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d11d      	bne.n	8004d8a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d52:	e01a      	b.n	8004d8a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d54:	4b5d      	ldr	r3, [pc, #372]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d116      	bne.n	8004d8e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d64:	e013      	b.n	8004d8e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d66:	4b59      	ldr	r3, [pc, #356]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10f      	bne.n	8004d92 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d72:	4b56      	ldr	r3, [pc, #344]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d82:	e006      	b.n	8004d92 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
      break;
 8004d88:	e004      	b.n	8004d94 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004d8a:	bf00      	nop
 8004d8c:	e002      	b.n	8004d94 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004d8e:	bf00      	nop
 8004d90:	e000      	b.n	8004d94 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004d92:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d108      	bne.n	8004dac <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004d9a:	4b4c      	ldr	r3, [pc, #304]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f023 0203 	bic.w	r2, r3, #3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4949      	ldr	r1, [pc, #292]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f040 8086 	bne.w	8004ec0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004db4:	4b45      	ldr	r3, [pc, #276]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a44      	ldr	r2, [pc, #272]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc0:	f7fd fcf6 	bl	80027b0 <HAL_GetTick>
 8004dc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dc6:	e009      	b.n	8004ddc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dc8:	f7fd fcf2 	bl	80027b0 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d902      	bls.n	8004ddc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	73fb      	strb	r3, [r7, #15]
        break;
 8004dda:	e005      	b.n	8004de8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ddc:	4b3b      	ldr	r3, [pc, #236]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1ef      	bne.n	8004dc8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d168      	bne.n	8004ec0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d113      	bne.n	8004e1c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004df4:	4b35      	ldr	r3, [pc, #212]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004df6:	695a      	ldr	r2, [r3, #20]
 8004df8:	4b35      	ldr	r3, [pc, #212]	; (8004ed0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6892      	ldr	r2, [r2, #8]
 8004e00:	0211      	lsls	r1, r2, #8
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	68d2      	ldr	r2, [r2, #12]
 8004e06:	06d2      	lsls	r2, r2, #27
 8004e08:	4311      	orrs	r1, r2
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6852      	ldr	r2, [r2, #4]
 8004e0e:	3a01      	subs	r2, #1
 8004e10:	0112      	lsls	r2, r2, #4
 8004e12:	430a      	orrs	r2, r1
 8004e14:	492d      	ldr	r1, [pc, #180]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	614b      	str	r3, [r1, #20]
 8004e1a:	e02d      	b.n	8004e78 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d115      	bne.n	8004e4e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e22:	4b2a      	ldr	r3, [pc, #168]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e24:	695a      	ldr	r2, [r3, #20]
 8004e26:	4b2b      	ldr	r3, [pc, #172]	; (8004ed4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6892      	ldr	r2, [r2, #8]
 8004e2e:	0211      	lsls	r1, r2, #8
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6912      	ldr	r2, [r2, #16]
 8004e34:	0852      	lsrs	r2, r2, #1
 8004e36:	3a01      	subs	r2, #1
 8004e38:	0552      	lsls	r2, r2, #21
 8004e3a:	4311      	orrs	r1, r2
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6852      	ldr	r2, [r2, #4]
 8004e40:	3a01      	subs	r2, #1
 8004e42:	0112      	lsls	r2, r2, #4
 8004e44:	430a      	orrs	r2, r1
 8004e46:	4921      	ldr	r1, [pc, #132]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	614b      	str	r3, [r1, #20]
 8004e4c:	e014      	b.n	8004e78 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e4e:	4b1f      	ldr	r3, [pc, #124]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e50:	695a      	ldr	r2, [r3, #20]
 8004e52:	4b21      	ldr	r3, [pc, #132]	; (8004ed8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6892      	ldr	r2, [r2, #8]
 8004e5a:	0211      	lsls	r1, r2, #8
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6952      	ldr	r2, [r2, #20]
 8004e60:	0852      	lsrs	r2, r2, #1
 8004e62:	3a01      	subs	r2, #1
 8004e64:	0652      	lsls	r2, r2, #25
 8004e66:	4311      	orrs	r1, r2
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6852      	ldr	r2, [r2, #4]
 8004e6c:	3a01      	subs	r2, #1
 8004e6e:	0112      	lsls	r2, r2, #4
 8004e70:	430a      	orrs	r2, r1
 8004e72:	4916      	ldr	r1, [pc, #88]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e78:	4b14      	ldr	r3, [pc, #80]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a13      	ldr	r2, [pc, #76]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fd fc94 	bl	80027b0 <HAL_GetTick>
 8004e88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e8a:	e009      	b.n	8004ea0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e8c:	f7fd fc90 	bl	80027b0 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d902      	bls.n	8004ea0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	73fb      	strb	r3, [r7, #15]
          break;
 8004e9e:	e005      	b.n	8004eac <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ef      	beq.n	8004e8c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004eb2:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eb4:	695a      	ldr	r2, [r3, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	4904      	ldr	r1, [pc, #16]	; (8004ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	07ff800f 	.word	0x07ff800f
 8004ed4:	ff9f800f 	.word	0xff9f800f
 8004ed8:	f9ff800f 	.word	0xf9ff800f

08004edc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e096      	b.n	800501c <HAL_RNG_Init+0x140>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	7a5b      	ldrb	r3, [r3, #9]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fc fde8 	bl	8001ad4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0204 	bic.w	r2, r2, #4
 8004f18:	601a      	str	r2, [r3, #0]

  /* RNG CR register configuration. Set value in CR register for CONFIG 1, CONFIG 2 and CONFIG 3 values */
  cr_value = (uint32_t) (RNG_CR_CONFIG_VAL);
 8004f1a:	4b42      	ldr	r3, [pc, #264]	; (8005024 <HAL_RNG_Init+0x148>)
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Configuration of 
     - Clock Error Detection 
     - CONFIG1, CONFIG2, CONFIG3 fields
     when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST | RNG_CR_RNG_CONFIG1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	4b40      	ldr	r3, [pc, #256]	; (8005028 <HAL_RNG_Init+0x14c>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6851      	ldr	r1, [r2, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f3a:	601a      	str	r2, [r3, #0]
                                 | RNG_CR_RNG_CONFIG2 | RNG_CR_RNG_CONFIG3,
                                 (uint32_t) (RNG_CR_CONDRST | hrng->Init.ClockErrorDetection | cr_value));

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a3a      	ldr	r2, [pc, #232]	; (800502c <HAL_RNG_Init+0x150>)
 8004f42:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f64a 2274 	movw	r2, #43636	; 0xaa74
 8004f4c:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bits CONDRST=0*/
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8004f5c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f5e:	f7fd fc27 	bl	80027b0 <HAL_GetTick>
 8004f62:	60b8      	str	r0, [r7, #8]

  /* Wait for conditioning reset process to be completed */
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8004f64:	e016      	b.n	8004f94 <HAL_RNG_Init+0xb8>
  {
    if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 8004f66:	f7fd fc23 	bl	80027b0 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d90f      	bls.n	8004f94 <HAL_RNG_Init+0xb8>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f82:	d107      	bne.n	8004f94 <HAL_RNG_Init+0xb8>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e043      	b.n	800501c <HAL_RNG_Init+0x140>
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa2:	d0e0      	beq.n	8004f66 <HAL_RNG_Init+0x8a>
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0204 	orr.w	r2, r2, #4
 8004fb2:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	d104      	bne.n	8004fcc <HAL_RNG_Init+0xf0>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e027      	b.n	800501c <HAL_RNG_Init+0x140>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004fcc:	f7fd fbf0 	bl	80027b0 <HAL_GetTick>
 8004fd0:	60b8      	str	r0, [r7, #8]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004fd2:	e015      	b.n	8005000 <HAL_RNG_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004fd4:	f7fd fbec 	bl	80027b0 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d90e      	bls.n	8005000 <HAL_RNG_Init+0x124>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d107      	bne.n	8005000 <HAL_RNG_Init+0x124>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e00d      	b.n	800501c <HAL_RNG_Init+0x140>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b04      	cmp	r3, #4
 800500c:	d0e2      	beq.n	8004fd4 <HAL_RNG_Init+0xf8>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	00f00d00 	.word	0x00f00d00
 8005028:	bc0f10df 	.word	0xbc0f10df
 800502c:	17590abc 	.word	0x17590abc

08005030 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	7a1b      	ldrb	r3, [r3, #8]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_RNG_GenerateRandomNumber+0x1a>
 8005046:	2302      	movs	r3, #2
 8005048:	e03d      	b.n	80050c6 <HAL_RNG_GenerateRandomNumber+0x96>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	7a5b      	ldrb	r3, [r3, #9]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b01      	cmp	r3, #1
 8005058:	d12c      	bne.n	80050b4 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005060:	f7fd fba6 	bl	80027b0 <HAL_GetTick>
 8005064:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005066:	e011      	b.n	800508c <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005068:	f7fd fba2 	bl	80027b0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d90a      	bls.n	800508c <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e01c      	b.n	80050c6 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b01      	cmp	r3, #1
 8005098:	d1e6      	bne.n	8005068 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	725a      	strb	r2, [r3, #9]
 80050b2:	e004      	b.n	80050be <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2204      	movs	r2, #4
 80050b8:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	721a      	strb	r2, [r3, #8]

  return status;
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d07f      	beq.n	80051e2 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc fd58 	bl	8001bac <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005102:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	22ca      	movs	r2, #202	; 0xca
 8005112:	625a      	str	r2, [r3, #36]	; 0x24
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2253      	movs	r2, #83	; 0x53
 800511a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f93d 	bl	800539c <RTC_EnterInitMode>
 8005122:	4603      	mov	r3, r0
 8005124:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d15a      	bne.n	80051e2 <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800513a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513e:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6999      	ldr	r1, [r3, #24]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6912      	ldr	r2, [r2, #16]
 8005166:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6919      	ldr	r1, [r3, #16]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	041a      	lsls	r2, r3, #16
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800517c:	4b1b      	ldr	r3, [pc, #108]	; (80051ec <HAL_RTC_Init+0x11c>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	430b      	orrs	r3, r1
 800518e:	4917      	ldr	r1, [pc, #92]	; (80051ec <HAL_RTC_Init+0x11c>)
 8005190:	4313      	orrs	r3, r2
 8005192:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f937 	bl	8005408 <RTC_ExitInitMode>
 800519a:	4603      	mov	r3, r0
 800519c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d11e      	bne.n	80051e2 <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80051b2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6999      	ldr	r1, [r3, #24]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	22ff      	movs	r2, #255	; 0xff
 80051d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40002800 	.word	0x40002800

080051f0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80051fc:	4b2c      	ldr	r3, [pc, #176]	; (80052b0 <HAL_RTC_GetTime+0xc0>)
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8005204:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <HAL_RTC_GetTime+0xc0>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005210:	d049      	beq.n	80052a6 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8005212:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <HAL_RTC_GetTime+0xc0>)
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800521e:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <HAL_RTC_GetTime+0xc0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005226:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800522a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	0c1b      	lsrs	r3, r3, #16
 8005230:	b2db      	uxtb	r3, r3
 8005232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005236:	b2da      	uxtb	r2, r3
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	0a1b      	lsrs	r3, r3, #8
 8005240:	b2db      	uxtb	r3, r3
 8005242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005246:	b2da      	uxtb	r2, r3
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005254:	b2da      	uxtb	r2, r3
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	0d9b      	lsrs	r3, r3, #22
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	b2da      	uxtb	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d11a      	bne.n	80052a6 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f000 f905 	bl	8005484 <RTC_Bcd2ToByte>
 800527a:	4603      	mov	r3, r0
 800527c:	461a      	mov	r2, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	4618      	mov	r0, r3
 8005288:	f000 f8fc 	bl	8005484 <RTC_Bcd2ToByte>
 800528c:	4603      	mov	r3, r0
 800528e:	461a      	mov	r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	789b      	ldrb	r3, [r3, #2]
 8005298:	4618      	mov	r0, r3
 800529a:	f000 f8f3 	bl	8005484 <RTC_Bcd2ToByte>
 800529e:	4603      	mov	r3, r0
 80052a0:	461a      	mov	r2, r3
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40002800 	.word	0x40002800

080052b4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80052c0:	4b22      	ldr	r3, [pc, #136]	; (800534c <HAL_RTC_GetDate+0x98>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80052c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80052cc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	0c1b      	lsrs	r3, r3, #16
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	0a1b      	lsrs	r3, r3, #8
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	0b5b      	lsrs	r3, r3, #13
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	b2da      	uxtb	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d11a      	bne.n	8005342 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	78db      	ldrb	r3, [r3, #3]
 8005310:	4618      	mov	r0, r3
 8005312:	f000 f8b7 	bl	8005484 <RTC_Bcd2ToByte>
 8005316:	4603      	mov	r3, r0
 8005318:	461a      	mov	r2, r3
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 f8ae 	bl	8005484 <RTC_Bcd2ToByte>
 8005328:	4603      	mov	r3, r0
 800532a:	461a      	mov	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	789b      	ldrb	r3, [r3, #2]
 8005334:	4618      	mov	r0, r3
 8005336:	f000 f8a5 	bl	8005484 <RTC_Bcd2ToByte>
 800533a:	4603      	mov	r3, r0
 800533c:	461a      	mov	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40002800 	.word	0x40002800

08005350 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005366:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8005368:	f7fd fa22 	bl	80027b0 <HAL_GetTick>
 800536c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800536e:	e009      	b.n	8005384 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005370:	f7fd fa1e 	bl	80027b0 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800537e:	d901      	bls.n	8005384 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e007      	b.n	8005394 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0ee      	beq.n	8005370 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d123      	bne.n	80053fe <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053c4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80053c6:	f7fd f9f3 	bl	80027b0 <HAL_GetTick>
 80053ca:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80053cc:	e00d      	b.n	80053ea <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80053ce:	f7fd f9ef 	bl	80027b0 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053dc:	d905      	bls.n	80053ea <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2203      	movs	r2, #3
 80053e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <RTC_EnterInitMode+0x62>
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d1e7      	bne.n	80053ce <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005414:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <RTC_ExitInitMode+0x78>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	4a19      	ldr	r2, [pc, #100]	; (8005480 <RTC_ExitInitMode+0x78>)
 800541a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800541e:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005420:	4b17      	ldr	r3, [pc, #92]	; (8005480 <RTC_ExitInitMode+0x78>)
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10c      	bne.n	8005446 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff ff8f 	bl	8005350 <HAL_RTC_WaitForSynchro>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01e      	beq.n	8005476 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2203      	movs	r2, #3
 800543c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	73fb      	strb	r3, [r7, #15]
 8005444:	e017      	b.n	8005476 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005446:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <RTC_ExitInitMode+0x78>)
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	4a0d      	ldr	r2, [pc, #52]	; (8005480 <RTC_ExitInitMode+0x78>)
 800544c:	f023 0320 	bic.w	r3, r3, #32
 8005450:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff ff7c 	bl	8005350 <HAL_RTC_WaitForSynchro>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2203      	movs	r2, #3
 8005462:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800546a:	4b05      	ldr	r3, [pc, #20]	; (8005480 <RTC_ExitInitMode+0x78>)
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	4a04      	ldr	r2, [pc, #16]	; (8005480 <RTC_ExitInitMode+0x78>)
 8005470:	f043 0320 	orr.w	r3, r3, #32
 8005474:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005476:	7bfb      	ldrb	r3, [r7, #15]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	40002800 	.word	0x40002800

08005484 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	b2db      	uxtb	r3, r3
 8005494:	461a      	mov	r2, r3
 8005496:	0092      	lsls	r2, r2, #2
 8005498:	4413      	add	r3, r2
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	4413      	add	r3, r2
 80054aa:	b2db      	uxtb	r3, r3
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e095      	b.n	80055f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d108      	bne.n	80054e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054da:	d009      	beq.n	80054f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	61da      	str	r2, [r3, #28]
 80054e2:	e005      	b.n	80054f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fc fc08 	bl	8001d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005526:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005530:	d902      	bls.n	8005538 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e002      	b.n	800553e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800553c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005546:	d007      	beq.n	8005558 <HAL_SPI_Init+0xa0>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005550:	d002      	beq.n	8005558 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559a:	ea42 0103 	orr.w	r1, r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	0c1b      	lsrs	r3, r3, #16
 80055b4:	f003 0204 	and.w	r2, r3, #4
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055d4:	ea42 0103 	orr.w	r1, r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b088      	sub	sp, #32
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	603b      	str	r3, [r7, #0]
 800560a:	4613      	mov	r3, r2
 800560c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_SPI_Transmit+0x22>
 800561c:	2302      	movs	r3, #2
 800561e:	e158      	b.n	80058d2 <HAL_SPI_Transmit+0x2d4>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005628:	f7fd f8c2 	bl	80027b0 <HAL_GetTick>
 800562c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b01      	cmp	r3, #1
 800563c:	d002      	beq.n	8005644 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800563e:	2302      	movs	r3, #2
 8005640:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005642:	e13d      	b.n	80058c0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_SPI_Transmit+0x52>
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d102      	bne.n	8005656 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005654:	e134      	b.n	80058c0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2203      	movs	r2, #3
 800565a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	88fa      	ldrh	r2, [r7, #6]
 800566e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a0:	d10f      	bne.n	80056c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b40      	cmp	r3, #64	; 0x40
 80056ce:	d007      	beq.n	80056e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056e8:	d94b      	bls.n	8005782 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <HAL_SPI_Transmit+0xfa>
 80056f2:	8afb      	ldrh	r3, [r7, #22]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d13e      	bne.n	8005776 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	881a      	ldrh	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	1c9a      	adds	r2, r3, #2
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800571c:	e02b      	b.n	8005776 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b02      	cmp	r3, #2
 800572a:	d112      	bne.n	8005752 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005730:	881a      	ldrh	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	1c9a      	adds	r2, r3, #2
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005750:	e011      	b.n	8005776 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005752:	f7fd f82d 	bl	80027b0 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d803      	bhi.n	800576a <HAL_SPI_Transmit+0x16c>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d102      	bne.n	8005770 <HAL_SPI_Transmit+0x172>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005774:	e0a4      	b.n	80058c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1ce      	bne.n	800571e <HAL_SPI_Transmit+0x120>
 8005780:	e07c      	b.n	800587c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <HAL_SPI_Transmit+0x192>
 800578a:	8afb      	ldrh	r3, [r7, #22]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d170      	bne.n	8005872 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b01      	cmp	r3, #1
 8005798:	d912      	bls.n	80057c0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	881a      	ldrh	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	1c9a      	adds	r2, r3, #2
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3b02      	subs	r3, #2
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057be:	e058      	b.n	8005872 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	7812      	ldrb	r2, [r2, #0]
 80057cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80057e6:	e044      	b.n	8005872 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d12b      	bne.n	800584e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d912      	bls.n	8005826 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	881a      	ldrh	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	1c9a      	adds	r2, r3, #2
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b02      	subs	r3, #2
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005824:	e025      	b.n	8005872 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	330c      	adds	r3, #12
 8005830:	7812      	ldrb	r2, [r2, #0]
 8005832:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800584c:	e011      	b.n	8005872 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800584e:	f7fc ffaf 	bl	80027b0 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d803      	bhi.n	8005866 <HAL_SPI_Transmit+0x268>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005864:	d102      	bne.n	800586c <HAL_SPI_Transmit+0x26e>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d102      	bne.n	8005872 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005870:	e026      	b.n	80058c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1b5      	bne.n	80057e8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f949 	bl	8005b18 <SPI_EndRxTxTransaction>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800589a:	2300      	movs	r3, #0
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	613b      	str	r3, [r7, #16]
 80058ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	77fb      	strb	r3, [r7, #31]
 80058bc:	e000      	b.n	80058c0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80058be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3720      	adds	r7, #32
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	4613      	mov	r3, r2
 80058ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058ec:	f7fc ff60 	bl	80027b0 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	1a9b      	subs	r3, r3, r2
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	4413      	add	r3, r2
 80058fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058fc:	f7fc ff58 	bl	80027b0 <HAL_GetTick>
 8005900:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005902:	4b39      	ldr	r3, [pc, #228]	; (80059e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	015b      	lsls	r3, r3, #5
 8005908:	0d1b      	lsrs	r3, r3, #20
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	fb02 f303 	mul.w	r3, r2, r3
 8005910:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005912:	e054      	b.n	80059be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591a:	d050      	beq.n	80059be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800591c:	f7fc ff48 	bl	80027b0 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	429a      	cmp	r2, r3
 800592a:	d902      	bls.n	8005932 <SPI_WaitFlagStateUntilTimeout+0x56>
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d13d      	bne.n	80059ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005940:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800594a:	d111      	bne.n	8005970 <SPI_WaitFlagStateUntilTimeout+0x94>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005954:	d004      	beq.n	8005960 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595e:	d107      	bne.n	8005970 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800596e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005978:	d10f      	bne.n	800599a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005998:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e017      	b.n	80059de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4013      	ands	r3, r2
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	bf0c      	ite	eq
 80059ce:	2301      	moveq	r3, #1
 80059d0:	2300      	movne	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d19b      	bne.n	8005914 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20000074 	.word	0x20000074

080059ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059fe:	f7fc fed7 	bl	80027b0 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a0e:	f7fc fecf 	bl	80027b0 <HAL_GetTick>
 8005a12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a1c:	4b3d      	ldr	r3, [pc, #244]	; (8005b14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	00da      	lsls	r2, r3, #3
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	0d1b      	lsrs	r3, r3, #20
 8005a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
 8005a32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a34:	e060      	b.n	8005af8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a3c:	d107      	bne.n	8005a4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a54:	d050      	beq.n	8005af8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a56:	f7fc feab 	bl	80027b0 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d902      	bls.n	8005a6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d13d      	bne.n	8005ae8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a84:	d111      	bne.n	8005aaa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a8e:	d004      	beq.n	8005a9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a98:	d107      	bne.n	8005aaa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab2:	d10f      	bne.n	8005ad4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ad2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e010      	b.n	8005b0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4013      	ands	r3, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d196      	bne.n	8005a36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3728      	adds	r7, #40	; 0x28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000074 	.word	0x20000074

08005b18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff ff5b 	bl	80059ec <SPI_WaitFifoStateUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b40:	f043 0220 	orr.w	r2, r3, #32
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e027      	b.n	8005b9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2200      	movs	r2, #0
 8005b54:	2180      	movs	r1, #128	; 0x80
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff fec0 	bl	80058dc <SPI_WaitFlagStateUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b66:	f043 0220 	orr.w	r2, r3, #32
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e014      	b.n	8005b9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7ff ff34 	bl	80059ec <SPI_WaitFifoStateUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b8e:	f043 0220 	orr.w	r2, r3, #32
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e000      	b.n	8005b9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e049      	b.n	8005c4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d106      	bne.n	8005bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fc fc2a 	bl	8002424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3304      	adds	r3, #4
 8005be0:	4619      	mov	r1, r3
 8005be2:	4610      	mov	r0, r2
 8005be4:	f000 fcd2 	bl	800658c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d001      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e04f      	b.n	8005d0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a23      	ldr	r2, [pc, #140]	; (8005d18 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01d      	beq.n	8005cca <HAL_TIM_Base_Start_IT+0x76>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c96:	d018      	beq.n	8005cca <HAL_TIM_Base_Start_IT+0x76>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a1f      	ldr	r2, [pc, #124]	; (8005d1c <HAL_TIM_Base_Start_IT+0xc8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d013      	beq.n	8005cca <HAL_TIM_Base_Start_IT+0x76>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1e      	ldr	r2, [pc, #120]	; (8005d20 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00e      	beq.n	8005cca <HAL_TIM_Base_Start_IT+0x76>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1c      	ldr	r2, [pc, #112]	; (8005d24 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d009      	beq.n	8005cca <HAL_TIM_Base_Start_IT+0x76>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1b      	ldr	r2, [pc, #108]	; (8005d28 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d004      	beq.n	8005cca <HAL_TIM_Base_Start_IT+0x76>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a19      	ldr	r2, [pc, #100]	; (8005d2c <HAL_TIM_Base_Start_IT+0xd8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d115      	bne.n	8005cf6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	4b17      	ldr	r3, [pc, #92]	; (8005d30 <HAL_TIM_Base_Start_IT+0xdc>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b06      	cmp	r3, #6
 8005cda:	d015      	beq.n	8005d08 <HAL_TIM_Base_Start_IT+0xb4>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce2:	d011      	beq.n	8005d08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0201 	orr.w	r2, r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf4:	e008      	b.n	8005d08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f042 0201 	orr.w	r2, r2, #1
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	e000      	b.n	8005d0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40000400 	.word	0x40000400
 8005d20:	40000800 	.word	0x40000800
 8005d24:	40000c00 	.word	0x40000c00
 8005d28:	40013400 	.word	0x40013400
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	00010007 	.word	0x00010007

08005d34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e049      	b.n	8005dda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f841 	bl	8005de2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f000 fc0a 	bl	800658c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b086      	sub	sp, #24
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e097      	b.n	8005f3a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fc fb1e 	bl	8002460 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6812      	ldr	r2, [r2, #0]
 8005e36:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005e3a:	f023 0307 	bic.w	r3, r3, #7
 8005e3e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3304      	adds	r3, #4
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f000 fb9e 	bl	800658c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e78:	f023 0303 	bic.w	r3, r3, #3
 8005e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	021b      	lsls	r3, r3, #8
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e96:	f023 030c 	bic.w	r3, r3, #12
 8005e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	011a      	lsls	r2, r3, #4
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	031b      	lsls	r3, r3, #12
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005ed4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005edc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d122      	bne.n	8005f9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d11b      	bne.n	8005f9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f06f 0202 	mvn.w	r2, #2
 8005f6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fae2 	bl	800654e <HAL_TIM_IC_CaptureCallback>
 8005f8a:	e005      	b.n	8005f98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fad4 	bl	800653a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fae5 	bl	8006562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d122      	bne.n	8005ff2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d11b      	bne.n	8005ff2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f06f 0204 	mvn.w	r2, #4
 8005fc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fab8 	bl	800654e <HAL_TIM_IC_CaptureCallback>
 8005fde:	e005      	b.n	8005fec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 faaa 	bl	800653a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fabb 	bl	8006562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d122      	bne.n	8006046 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b08      	cmp	r3, #8
 800600c:	d11b      	bne.n	8006046 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f06f 0208 	mvn.w	r2, #8
 8006016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2204      	movs	r2, #4
 800601c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	f003 0303 	and.w	r3, r3, #3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fa8e 	bl	800654e <HAL_TIM_IC_CaptureCallback>
 8006032:	e005      	b.n	8006040 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fa80 	bl	800653a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fa91 	bl	8006562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	2b10      	cmp	r3, #16
 8006052:	d122      	bne.n	800609a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b10      	cmp	r3, #16
 8006060:	d11b      	bne.n	800609a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f06f 0210 	mvn.w	r2, #16
 800606a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2208      	movs	r2, #8
 8006070:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69db      	ldr	r3, [r3, #28]
 8006078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fa64 	bl	800654e <HAL_TIM_IC_CaptureCallback>
 8006086:	e005      	b.n	8006094 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fa56 	bl	800653a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fa67 	bl	8006562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d10e      	bne.n	80060c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d107      	bne.n	80060c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f06f 0201 	mvn.w	r2, #1
 80060be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7fb f9e3 	bl	800148c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d0:	2b80      	cmp	r3, #128	; 0x80
 80060d2:	d10e      	bne.n	80060f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060de:	2b80      	cmp	r3, #128	; 0x80
 80060e0:	d107      	bne.n	80060f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fee9 	bl	8006ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006100:	d10e      	bne.n	8006120 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610c:	2b80      	cmp	r3, #128	; 0x80
 800610e:	d107      	bne.n	8006120 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fedc 	bl	8006ed8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d10e      	bne.n	800614c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006138:	2b40      	cmp	r3, #64	; 0x40
 800613a:	d107      	bne.n	800614c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fa15 	bl	8006576 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b20      	cmp	r3, #32
 8006158:	d10e      	bne.n	8006178 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b20      	cmp	r3, #32
 8006166:	d107      	bne.n	8006178 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f06f 0220 	mvn.w	r2, #32
 8006170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fe9c 	bl	8006eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006178:	bf00      	nop
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006196:	2b01      	cmp	r3, #1
 8006198:	d101      	bne.n	800619e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800619a:	2302      	movs	r3, #2
 800619c:	e0ff      	b.n	800639e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b14      	cmp	r3, #20
 80061aa:	f200 80f0 	bhi.w	800638e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80061ae:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	08006209 	.word	0x08006209
 80061b8:	0800638f 	.word	0x0800638f
 80061bc:	0800638f 	.word	0x0800638f
 80061c0:	0800638f 	.word	0x0800638f
 80061c4:	08006249 	.word	0x08006249
 80061c8:	0800638f 	.word	0x0800638f
 80061cc:	0800638f 	.word	0x0800638f
 80061d0:	0800638f 	.word	0x0800638f
 80061d4:	0800628b 	.word	0x0800628b
 80061d8:	0800638f 	.word	0x0800638f
 80061dc:	0800638f 	.word	0x0800638f
 80061e0:	0800638f 	.word	0x0800638f
 80061e4:	080062cb 	.word	0x080062cb
 80061e8:	0800638f 	.word	0x0800638f
 80061ec:	0800638f 	.word	0x0800638f
 80061f0:	0800638f 	.word	0x0800638f
 80061f4:	0800630d 	.word	0x0800630d
 80061f8:	0800638f 	.word	0x0800638f
 80061fc:	0800638f 	.word	0x0800638f
 8006200:	0800638f 	.word	0x0800638f
 8006204:	0800634d 	.word	0x0800634d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fa56 	bl	80066c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0208 	orr.w	r2, r2, #8
 8006222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0204 	bic.w	r2, r2, #4
 8006232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6999      	ldr	r1, [r3, #24]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	691a      	ldr	r2, [r3, #16]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	619a      	str	r2, [r3, #24]
      break;
 8006246:	e0a5      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68b9      	ldr	r1, [r7, #8]
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fac6 	bl	80067e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699a      	ldr	r2, [r3, #24]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6999      	ldr	r1, [r3, #24]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	021a      	lsls	r2, r3, #8
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	619a      	str	r2, [r3, #24]
      break;
 8006288:	e084      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	4618      	mov	r0, r3
 8006292:	f000 fb2f 	bl	80068f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69da      	ldr	r2, [r3, #28]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f042 0208 	orr.w	r2, r2, #8
 80062a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0204 	bic.w	r2, r2, #4
 80062b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69d9      	ldr	r1, [r3, #28]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	691a      	ldr	r2, [r3, #16]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	61da      	str	r2, [r3, #28]
      break;
 80062c8:	e064      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 fb97 	bl	8006a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69da      	ldr	r2, [r3, #28]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69d9      	ldr	r1, [r3, #28]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	021a      	lsls	r2, r3, #8
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	61da      	str	r2, [r3, #28]
      break;
 800630a:	e043      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fbe0 	bl	8006ad8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0208 	orr.w	r2, r2, #8
 8006326:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0204 	bic.w	r2, r2, #4
 8006336:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	691a      	ldr	r2, [r3, #16]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800634a:	e023      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fc24 	bl	8006ba0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006366:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006376:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	021a      	lsls	r2, r3, #8
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800638c:	e002      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	75fb      	strb	r3, [r7, #23]
      break;
 8006392:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800639c:	7dfb      	ldrb	r3, [r7, #23]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop

080063a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_TIM_ConfigClockSource+0x1c>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e0b6      	b.n	8006532 <HAL_TIM_ConfigClockSource+0x18a>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006400:	d03e      	beq.n	8006480 <HAL_TIM_ConfigClockSource+0xd8>
 8006402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006406:	f200 8087 	bhi.w	8006518 <HAL_TIM_ConfigClockSource+0x170>
 800640a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640e:	f000 8086 	beq.w	800651e <HAL_TIM_ConfigClockSource+0x176>
 8006412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006416:	d87f      	bhi.n	8006518 <HAL_TIM_ConfigClockSource+0x170>
 8006418:	2b70      	cmp	r3, #112	; 0x70
 800641a:	d01a      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0xaa>
 800641c:	2b70      	cmp	r3, #112	; 0x70
 800641e:	d87b      	bhi.n	8006518 <HAL_TIM_ConfigClockSource+0x170>
 8006420:	2b60      	cmp	r3, #96	; 0x60
 8006422:	d050      	beq.n	80064c6 <HAL_TIM_ConfigClockSource+0x11e>
 8006424:	2b60      	cmp	r3, #96	; 0x60
 8006426:	d877      	bhi.n	8006518 <HAL_TIM_ConfigClockSource+0x170>
 8006428:	2b50      	cmp	r3, #80	; 0x50
 800642a:	d03c      	beq.n	80064a6 <HAL_TIM_ConfigClockSource+0xfe>
 800642c:	2b50      	cmp	r3, #80	; 0x50
 800642e:	d873      	bhi.n	8006518 <HAL_TIM_ConfigClockSource+0x170>
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	d058      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x13e>
 8006434:	2b40      	cmp	r3, #64	; 0x40
 8006436:	d86f      	bhi.n	8006518 <HAL_TIM_ConfigClockSource+0x170>
 8006438:	2b30      	cmp	r3, #48	; 0x30
 800643a:	d064      	beq.n	8006506 <HAL_TIM_ConfigClockSource+0x15e>
 800643c:	2b30      	cmp	r3, #48	; 0x30
 800643e:	d86b      	bhi.n	8006518 <HAL_TIM_ConfigClockSource+0x170>
 8006440:	2b20      	cmp	r3, #32
 8006442:	d060      	beq.n	8006506 <HAL_TIM_ConfigClockSource+0x15e>
 8006444:	2b20      	cmp	r3, #32
 8006446:	d867      	bhi.n	8006518 <HAL_TIM_ConfigClockSource+0x170>
 8006448:	2b00      	cmp	r3, #0
 800644a:	d05c      	beq.n	8006506 <HAL_TIM_ConfigClockSource+0x15e>
 800644c:	2b10      	cmp	r3, #16
 800644e:	d05a      	beq.n	8006506 <HAL_TIM_ConfigClockSource+0x15e>
 8006450:	e062      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6818      	ldr	r0, [r3, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	6899      	ldr	r1, [r3, #8]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f000 fc7d 	bl	8006d60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006474:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	609a      	str	r2, [r3, #8]
      break;
 800647e:	e04f      	b.n	8006520 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6818      	ldr	r0, [r3, #0]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	6899      	ldr	r1, [r3, #8]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f000 fc66 	bl	8006d60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064a2:	609a      	str	r2, [r3, #8]
      break;
 80064a4:	e03c      	b.n	8006520 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6859      	ldr	r1, [r3, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f000 fbda 	bl	8006c6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2150      	movs	r1, #80	; 0x50
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fc33 	bl	8006d2a <TIM_ITRx_SetConfig>
      break;
 80064c4:	e02c      	b.n	8006520 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	6859      	ldr	r1, [r3, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f000 fbf9 	bl	8006cca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2160      	movs	r1, #96	; 0x60
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fc23 	bl	8006d2a <TIM_ITRx_SetConfig>
      break;
 80064e4:	e01c      	b.n	8006520 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6818      	ldr	r0, [r3, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	6859      	ldr	r1, [r3, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f000 fbba 	bl	8006c6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2140      	movs	r1, #64	; 0x40
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fc13 	bl	8006d2a <TIM_ITRx_SetConfig>
      break;
 8006504:	e00c      	b.n	8006520 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f000 fc0a 	bl	8006d2a <TIM_ITRx_SetConfig>
      break;
 8006516:	e003      	b.n	8006520 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	73fb      	strb	r3, [r7, #15]
      break;
 800651c:	e000      	b.n	8006520 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800651e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006530:	7bfb      	ldrb	r3, [r7, #15]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
	...

0800658c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a40      	ldr	r2, [pc, #256]	; (80066a0 <TIM_Base_SetConfig+0x114>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d013      	beq.n	80065cc <TIM_Base_SetConfig+0x40>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065aa:	d00f      	beq.n	80065cc <TIM_Base_SetConfig+0x40>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a3d      	ldr	r2, [pc, #244]	; (80066a4 <TIM_Base_SetConfig+0x118>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00b      	beq.n	80065cc <TIM_Base_SetConfig+0x40>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a3c      	ldr	r2, [pc, #240]	; (80066a8 <TIM_Base_SetConfig+0x11c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d007      	beq.n	80065cc <TIM_Base_SetConfig+0x40>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a3b      	ldr	r2, [pc, #236]	; (80066ac <TIM_Base_SetConfig+0x120>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d003      	beq.n	80065cc <TIM_Base_SetConfig+0x40>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a3a      	ldr	r2, [pc, #232]	; (80066b0 <TIM_Base_SetConfig+0x124>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d108      	bne.n	80065de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a2f      	ldr	r2, [pc, #188]	; (80066a0 <TIM_Base_SetConfig+0x114>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d01f      	beq.n	8006626 <TIM_Base_SetConfig+0x9a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ec:	d01b      	beq.n	8006626 <TIM_Base_SetConfig+0x9a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a2c      	ldr	r2, [pc, #176]	; (80066a4 <TIM_Base_SetConfig+0x118>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d017      	beq.n	8006626 <TIM_Base_SetConfig+0x9a>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a2b      	ldr	r2, [pc, #172]	; (80066a8 <TIM_Base_SetConfig+0x11c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d013      	beq.n	8006626 <TIM_Base_SetConfig+0x9a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a2a      	ldr	r2, [pc, #168]	; (80066ac <TIM_Base_SetConfig+0x120>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00f      	beq.n	8006626 <TIM_Base_SetConfig+0x9a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a29      	ldr	r2, [pc, #164]	; (80066b0 <TIM_Base_SetConfig+0x124>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00b      	beq.n	8006626 <TIM_Base_SetConfig+0x9a>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a28      	ldr	r2, [pc, #160]	; (80066b4 <TIM_Base_SetConfig+0x128>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d007      	beq.n	8006626 <TIM_Base_SetConfig+0x9a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a27      	ldr	r2, [pc, #156]	; (80066b8 <TIM_Base_SetConfig+0x12c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d003      	beq.n	8006626 <TIM_Base_SetConfig+0x9a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a26      	ldr	r2, [pc, #152]	; (80066bc <TIM_Base_SetConfig+0x130>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d108      	bne.n	8006638 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800662c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a10      	ldr	r2, [pc, #64]	; (80066a0 <TIM_Base_SetConfig+0x114>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00f      	beq.n	8006684 <TIM_Base_SetConfig+0xf8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a12      	ldr	r2, [pc, #72]	; (80066b0 <TIM_Base_SetConfig+0x124>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d00b      	beq.n	8006684 <TIM_Base_SetConfig+0xf8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a11      	ldr	r2, [pc, #68]	; (80066b4 <TIM_Base_SetConfig+0x128>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d007      	beq.n	8006684 <TIM_Base_SetConfig+0xf8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a10      	ldr	r2, [pc, #64]	; (80066b8 <TIM_Base_SetConfig+0x12c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <TIM_Base_SetConfig+0xf8>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a0f      	ldr	r2, [pc, #60]	; (80066bc <TIM_Base_SetConfig+0x130>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d103      	bne.n	800668c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	691a      	ldr	r2, [r3, #16]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	615a      	str	r2, [r3, #20]
}
 8006692:	bf00      	nop
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40012c00 	.word	0x40012c00
 80066a4:	40000400 	.word	0x40000400
 80066a8:	40000800 	.word	0x40000800
 80066ac:	40000c00 	.word	0x40000c00
 80066b0:	40013400 	.word	0x40013400
 80066b4:	40014000 	.word	0x40014000
 80066b8:	40014400 	.word	0x40014400
 80066bc:	40014800 	.word	0x40014800

080066c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	f023 0201 	bic.w	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0303 	bic.w	r3, r3, #3
 80066fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f023 0302 	bic.w	r3, r3, #2
 800670c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	4313      	orrs	r3, r2
 8006716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a2c      	ldr	r2, [pc, #176]	; (80067cc <TIM_OC1_SetConfig+0x10c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00f      	beq.n	8006740 <TIM_OC1_SetConfig+0x80>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a2b      	ldr	r2, [pc, #172]	; (80067d0 <TIM_OC1_SetConfig+0x110>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00b      	beq.n	8006740 <TIM_OC1_SetConfig+0x80>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a2a      	ldr	r2, [pc, #168]	; (80067d4 <TIM_OC1_SetConfig+0x114>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d007      	beq.n	8006740 <TIM_OC1_SetConfig+0x80>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a29      	ldr	r2, [pc, #164]	; (80067d8 <TIM_OC1_SetConfig+0x118>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_OC1_SetConfig+0x80>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a28      	ldr	r2, [pc, #160]	; (80067dc <TIM_OC1_SetConfig+0x11c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d10c      	bne.n	800675a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f023 0308 	bic.w	r3, r3, #8
 8006746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	4313      	orrs	r3, r2
 8006750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f023 0304 	bic.w	r3, r3, #4
 8006758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a1b      	ldr	r2, [pc, #108]	; (80067cc <TIM_OC1_SetConfig+0x10c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00f      	beq.n	8006782 <TIM_OC1_SetConfig+0xc2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a1a      	ldr	r2, [pc, #104]	; (80067d0 <TIM_OC1_SetConfig+0x110>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00b      	beq.n	8006782 <TIM_OC1_SetConfig+0xc2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a19      	ldr	r2, [pc, #100]	; (80067d4 <TIM_OC1_SetConfig+0x114>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d007      	beq.n	8006782 <TIM_OC1_SetConfig+0xc2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a18      	ldr	r2, [pc, #96]	; (80067d8 <TIM_OC1_SetConfig+0x118>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d003      	beq.n	8006782 <TIM_OC1_SetConfig+0xc2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a17      	ldr	r2, [pc, #92]	; (80067dc <TIM_OC1_SetConfig+0x11c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d111      	bne.n	80067a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	621a      	str	r2, [r3, #32]
}
 80067c0:	bf00      	nop
 80067c2:	371c      	adds	r7, #28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	40012c00 	.word	0x40012c00
 80067d0:	40013400 	.word	0x40013400
 80067d4:	40014000 	.word	0x40014000
 80067d8:	40014400 	.word	0x40014400
 80067dc:	40014800 	.word	0x40014800

080067e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f023 0210 	bic.w	r2, r3, #16
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800680e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800681a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	4313      	orrs	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f023 0320 	bic.w	r3, r3, #32
 800682e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a28      	ldr	r2, [pc, #160]	; (80068e0 <TIM_OC2_SetConfig+0x100>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d003      	beq.n	800684c <TIM_OC2_SetConfig+0x6c>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a27      	ldr	r2, [pc, #156]	; (80068e4 <TIM_OC2_SetConfig+0x104>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d10d      	bne.n	8006868 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a1d      	ldr	r2, [pc, #116]	; (80068e0 <TIM_OC2_SetConfig+0x100>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00f      	beq.n	8006890 <TIM_OC2_SetConfig+0xb0>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a1c      	ldr	r2, [pc, #112]	; (80068e4 <TIM_OC2_SetConfig+0x104>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00b      	beq.n	8006890 <TIM_OC2_SetConfig+0xb0>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <TIM_OC2_SetConfig+0x108>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d007      	beq.n	8006890 <TIM_OC2_SetConfig+0xb0>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a1a      	ldr	r2, [pc, #104]	; (80068ec <TIM_OC2_SetConfig+0x10c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_OC2_SetConfig+0xb0>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a19      	ldr	r2, [pc, #100]	; (80068f0 <TIM_OC2_SetConfig+0x110>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d113      	bne.n	80068b8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800689e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40012c00 	.word	0x40012c00
 80068e4:	40013400 	.word	0x40013400
 80068e8:	40014000 	.word	0x40014000
 80068ec:	40014400 	.word	0x40014400
 80068f0:	40014800 	.word	0x40014800

080068f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0303 	bic.w	r3, r3, #3
 800692e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a27      	ldr	r2, [pc, #156]	; (80069f0 <TIM_OC3_SetConfig+0xfc>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d003      	beq.n	800695e <TIM_OC3_SetConfig+0x6a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a26      	ldr	r2, [pc, #152]	; (80069f4 <TIM_OC3_SetConfig+0x100>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d10d      	bne.n	800697a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006964:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	021b      	lsls	r3, r3, #8
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a1c      	ldr	r2, [pc, #112]	; (80069f0 <TIM_OC3_SetConfig+0xfc>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00f      	beq.n	80069a2 <TIM_OC3_SetConfig+0xae>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a1b      	ldr	r2, [pc, #108]	; (80069f4 <TIM_OC3_SetConfig+0x100>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00b      	beq.n	80069a2 <TIM_OC3_SetConfig+0xae>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a1a      	ldr	r2, [pc, #104]	; (80069f8 <TIM_OC3_SetConfig+0x104>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d007      	beq.n	80069a2 <TIM_OC3_SetConfig+0xae>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a19      	ldr	r2, [pc, #100]	; (80069fc <TIM_OC3_SetConfig+0x108>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d003      	beq.n	80069a2 <TIM_OC3_SetConfig+0xae>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a18      	ldr	r2, [pc, #96]	; (8006a00 <TIM_OC3_SetConfig+0x10c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d113      	bne.n	80069ca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	621a      	str	r2, [r3, #32]
}
 80069e4:	bf00      	nop
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	40012c00 	.word	0x40012c00
 80069f4:	40013400 	.word	0x40013400
 80069f8:	40014000 	.word	0x40014000
 80069fc:	40014400 	.word	0x40014400
 8006a00:	40014800 	.word	0x40014800

08006a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	021b      	lsls	r3, r3, #8
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	031b      	lsls	r3, r3, #12
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a18      	ldr	r2, [pc, #96]	; (8006ac4 <TIM_OC4_SetConfig+0xc0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d00f      	beq.n	8006a88 <TIM_OC4_SetConfig+0x84>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a17      	ldr	r2, [pc, #92]	; (8006ac8 <TIM_OC4_SetConfig+0xc4>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00b      	beq.n	8006a88 <TIM_OC4_SetConfig+0x84>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a16      	ldr	r2, [pc, #88]	; (8006acc <TIM_OC4_SetConfig+0xc8>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d007      	beq.n	8006a88 <TIM_OC4_SetConfig+0x84>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a15      	ldr	r2, [pc, #84]	; (8006ad0 <TIM_OC4_SetConfig+0xcc>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d003      	beq.n	8006a88 <TIM_OC4_SetConfig+0x84>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a14      	ldr	r2, [pc, #80]	; (8006ad4 <TIM_OC4_SetConfig+0xd0>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d109      	bne.n	8006a9c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	019b      	lsls	r3, r3, #6
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	621a      	str	r2, [r3, #32]
}
 8006ab6:	bf00      	nop
 8006ab8:	371c      	adds	r7, #28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40013400 	.word	0x40013400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40014400 	.word	0x40014400
 8006ad4:	40014800 	.word	0x40014800

08006ad8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	041b      	lsls	r3, r3, #16
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a17      	ldr	r2, [pc, #92]	; (8006b8c <TIM_OC5_SetConfig+0xb4>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d00f      	beq.n	8006b52 <TIM_OC5_SetConfig+0x7a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a16      	ldr	r2, [pc, #88]	; (8006b90 <TIM_OC5_SetConfig+0xb8>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d00b      	beq.n	8006b52 <TIM_OC5_SetConfig+0x7a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a15      	ldr	r2, [pc, #84]	; (8006b94 <TIM_OC5_SetConfig+0xbc>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d007      	beq.n	8006b52 <TIM_OC5_SetConfig+0x7a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a14      	ldr	r2, [pc, #80]	; (8006b98 <TIM_OC5_SetConfig+0xc0>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d003      	beq.n	8006b52 <TIM_OC5_SetConfig+0x7a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a13      	ldr	r2, [pc, #76]	; (8006b9c <TIM_OC5_SetConfig+0xc4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d109      	bne.n	8006b66 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	621a      	str	r2, [r3, #32]
}
 8006b80:	bf00      	nop
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	40012c00 	.word	0x40012c00
 8006b90:	40013400 	.word	0x40013400
 8006b94:	40014000 	.word	0x40014000
 8006b98:	40014400 	.word	0x40014400
 8006b9c:	40014800 	.word	0x40014800

08006ba0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	021b      	lsls	r3, r3, #8
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	051b      	lsls	r3, r3, #20
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a18      	ldr	r2, [pc, #96]	; (8006c58 <TIM_OC6_SetConfig+0xb8>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00f      	beq.n	8006c1c <TIM_OC6_SetConfig+0x7c>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a17      	ldr	r2, [pc, #92]	; (8006c5c <TIM_OC6_SetConfig+0xbc>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d00b      	beq.n	8006c1c <TIM_OC6_SetConfig+0x7c>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a16      	ldr	r2, [pc, #88]	; (8006c60 <TIM_OC6_SetConfig+0xc0>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d007      	beq.n	8006c1c <TIM_OC6_SetConfig+0x7c>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a15      	ldr	r2, [pc, #84]	; (8006c64 <TIM_OC6_SetConfig+0xc4>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d003      	beq.n	8006c1c <TIM_OC6_SetConfig+0x7c>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a14      	ldr	r2, [pc, #80]	; (8006c68 <TIM_OC6_SetConfig+0xc8>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d109      	bne.n	8006c30 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	029b      	lsls	r3, r3, #10
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	621a      	str	r2, [r3, #32]
}
 8006c4a:	bf00      	nop
 8006c4c:	371c      	adds	r7, #28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	40012c00 	.word	0x40012c00
 8006c5c:	40013400 	.word	0x40013400
 8006c60:	40014000 	.word	0x40014000
 8006c64:	40014400 	.word	0x40014400
 8006c68:	40014800 	.word	0x40014800

08006c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	f023 0201 	bic.w	r2, r3, #1
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f023 030a 	bic.w	r3, r3, #10
 8006ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	621a      	str	r2, [r3, #32]
}
 8006cbe:	bf00      	nop
 8006cc0:	371c      	adds	r7, #28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b087      	sub	sp, #28
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	60b9      	str	r1, [r7, #8]
 8006cd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	f023 0210 	bic.w	r2, r3, #16
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	031b      	lsls	r3, r3, #12
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	f043 0307 	orr.w	r3, r3, #7
 8006d4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	609a      	str	r2, [r3, #8]
}
 8006d54:	bf00      	nop
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	021a      	lsls	r2, r3, #8
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	609a      	str	r2, [r3, #8]
}
 8006d94:	bf00      	nop
 8006d96:	371c      	adds	r7, #28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e068      	b.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a2e      	ldr	r2, [pc, #184]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d004      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a2d      	ldr	r2, [pc, #180]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d108      	bne.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006df2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a1e      	ldr	r2, [pc, #120]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d01d      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2a:	d018      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1b      	ldr	r2, [pc, #108]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d013      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00e      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a18      	ldr	r2, [pc, #96]	; (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d009      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a13      	ldr	r2, [pc, #76]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d004      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a14      	ldr	r2, [pc, #80]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d10c      	bne.n	8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	40012c00 	.word	0x40012c00
 8006e9c:	40013400 	.word	0x40013400
 8006ea0:	40000400 	.word	0x40000400
 8006ea4:	40000800 	.word	0x40000800
 8006ea8:	40000c00 	.word	0x40000c00
 8006eac:	40014000 	.word	0x40014000

08006eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e042      	b.n	8006f84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d106      	bne.n	8006f16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7fb fb6d 	bl	80025f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2224      	movs	r2, #36	; 0x24
 8006f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0201 	bic.w	r2, r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fc0e 	bl	8007750 <UART_SetConfig>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d101      	bne.n	8006f3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e022      	b.n	8006f84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d002      	beq.n	8006f4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fefe 	bl	8007d48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0201 	orr.w	r2, r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 ff85 	bl	8007e8c <UART_CheckIdleState>
 8006f82:	4603      	mov	r3, r0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08a      	sub	sp, #40	; 0x28
 8006f90:	af02      	add	r7, sp, #8
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	f040 8083 	bne.w	80070ae <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <HAL_UART_Transmit+0x28>
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e07b      	b.n	80070b0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d101      	bne.n	8006fc6 <HAL_UART_Transmit+0x3a>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e074      	b.n	80070b0 <HAL_UART_Transmit+0x124>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2221      	movs	r2, #33	; 0x21
 8006fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fde:	f7fb fbe7 	bl	80027b0 <HAL_GetTick>
 8006fe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	88fa      	ldrh	r2, [r7, #6]
 8006fe8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	88fa      	ldrh	r2, [r7, #6]
 8006ff0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffc:	d108      	bne.n	8007010 <HAL_UART_Transmit+0x84>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007006:	2300      	movs	r3, #0
 8007008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	e003      	b.n	8007018 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007014:	2300      	movs	r3, #0
 8007016:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007020:	e02c      	b.n	800707c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2200      	movs	r2, #0
 800702a:	2180      	movs	r1, #128	; 0x80
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 ff78 	bl	8007f22 <UART_WaitOnFlagUntilTimeout>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e039      	b.n	80070b0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10b      	bne.n	800705a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007050:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	3302      	adds	r3, #2
 8007056:	61bb      	str	r3, [r7, #24]
 8007058:	e007      	b.n	800706a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	3301      	adds	r3, #1
 8007068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007082:	b29b      	uxth	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1cc      	bne.n	8007022 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2200      	movs	r2, #0
 8007090:	2140      	movs	r1, #64	; 0x40
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 ff45 	bl	8007f22 <UART_WaitOnFlagUntilTimeout>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e006      	b.n	80070b0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e000      	b.n	80070b0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80070ae:	2302      	movs	r3, #2
  }
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3720      	adds	r7, #32
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b0ba      	sub	sp, #232	; 0xe8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80070e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80070e6:	4013      	ands	r3, r2
 80070e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80070ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d11b      	bne.n	800712c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d015      	beq.n	800712c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007104:	f003 0320 	and.w	r3, r3, #32
 8007108:	2b00      	cmp	r3, #0
 800710a:	d105      	bne.n	8007118 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800710c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d009      	beq.n	800712c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 82d6 	beq.w	80076ce <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	4798      	blx	r3
      }
      return;
 800712a:	e2d0      	b.n	80076ce <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800712c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 811f 	beq.w	8007374 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007136:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800713a:	4b8b      	ldr	r3, [pc, #556]	; (8007368 <HAL_UART_IRQHandler+0x2b0>)
 800713c:	4013      	ands	r3, r2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d106      	bne.n	8007150 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007142:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007146:	4b89      	ldr	r3, [pc, #548]	; (800736c <HAL_UART_IRQHandler+0x2b4>)
 8007148:	4013      	ands	r3, r2
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 8112 	beq.w	8007374 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d011      	beq.n	8007180 <HAL_UART_IRQHandler+0xc8>
 800715c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00b      	beq.n	8007180 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2201      	movs	r2, #1
 800716e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007176:	f043 0201 	orr.w	r2, r3, #1
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d011      	beq.n	80071b0 <HAL_UART_IRQHandler+0xf8>
 800718c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00b      	beq.n	80071b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2202      	movs	r2, #2
 800719e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071a6:	f043 0204 	orr.w	r2, r3, #4
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d011      	beq.n	80071e0 <HAL_UART_IRQHandler+0x128>
 80071bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00b      	beq.n	80071e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2204      	movs	r2, #4
 80071ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071d6:	f043 0202 	orr.w	r2, r3, #2
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e4:	f003 0308 	and.w	r3, r3, #8
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d017      	beq.n	800721c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80071ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f0:	f003 0320 	and.w	r3, r3, #32
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d105      	bne.n	8007204 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80071f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80071fc:	4b5a      	ldr	r3, [pc, #360]	; (8007368 <HAL_UART_IRQHandler+0x2b0>)
 80071fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00b      	beq.n	800721c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2208      	movs	r2, #8
 800720a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007212:	f043 0208 	orr.w	r2, r3, #8
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800721c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007224:	2b00      	cmp	r3, #0
 8007226:	d012      	beq.n	800724e <HAL_UART_IRQHandler+0x196>
 8007228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800722c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00c      	beq.n	800724e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800723c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007244:	f043 0220 	orr.w	r2, r3, #32
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 823c 	beq.w	80076d2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800725a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d013      	beq.n	800728e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800726a:	f003 0320 	and.w	r3, r3, #32
 800726e:	2b00      	cmp	r3, #0
 8007270:	d105      	bne.n	800727e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007294:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a2:	2b40      	cmp	r3, #64	; 0x40
 80072a4:	d005      	beq.n	80072b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d04f      	beq.n	8007352 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 ffe7 	bl	8008286 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c2:	2b40      	cmp	r3, #64	; 0x40
 80072c4:	d141      	bne.n	800734a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3308      	adds	r3, #8
 80072cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072d4:	e853 3f00 	ldrex	r3, [r3]
 80072d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3308      	adds	r3, #8
 80072ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800730a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1d9      	bne.n	80072c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d013      	beq.n	8007342 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800731e:	4a14      	ldr	r2, [pc, #80]	; (8007370 <HAL_UART_IRQHandler+0x2b8>)
 8007320:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007326:	4618      	mov	r0, r3
 8007328:	f7fb fcd3 	bl	8002cd2 <HAL_DMA_Abort_IT>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d017      	beq.n	8007362 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800733c:	4610      	mov	r0, r2
 800733e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007340:	e00f      	b.n	8007362 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f9ee 	bl	8007724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007348:	e00b      	b.n	8007362 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f9ea 	bl	8007724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007350:	e007      	b.n	8007362 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f9e6 	bl	8007724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007360:	e1b7      	b.n	80076d2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007362:	bf00      	nop
    return;
 8007364:	e1b5      	b.n	80076d2 <HAL_UART_IRQHandler+0x61a>
 8007366:	bf00      	nop
 8007368:	10000001 	.word	0x10000001
 800736c:	04000120 	.word	0x04000120
 8007370:	08008531 	.word	0x08008531

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007378:	2b01      	cmp	r3, #1
 800737a:	f040 814a 	bne.w	8007612 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800737e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007382:	f003 0310 	and.w	r3, r3, #16
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 8143 	beq.w	8007612 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800738c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007390:	f003 0310 	and.w	r3, r3, #16
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 813c 	beq.w	8007612 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2210      	movs	r2, #16
 80073a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ac:	2b40      	cmp	r3, #64	; 0x40
 80073ae:	f040 80b5 	bne.w	800751c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 8187 	beq.w	80076d6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073d2:	429a      	cmp	r2, r3
 80073d4:	f080 817f 	bcs.w	80076d6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f040 8086 	bne.w	8007500 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800740c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800741e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007422:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800742a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1da      	bne.n	80073f4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3308      	adds	r3, #8
 8007444:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800744e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007450:	f023 0301 	bic.w	r3, r3, #1
 8007454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3308      	adds	r3, #8
 800745e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007462:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007466:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800746a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800746e:	e841 2300 	strex	r3, r2, [r1]
 8007472:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e1      	bne.n	800743e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3308      	adds	r3, #8
 8007480:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007484:	e853 3f00 	ldrex	r3, [r3]
 8007488:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800748a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800748c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3308      	adds	r3, #8
 800749a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800749e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e3      	bne.n	800747a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2220      	movs	r2, #32
 80074b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074d0:	f023 0310 	bic.w	r3, r3, #16
 80074d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80074e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e4      	bne.n	80074c0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fb fb8d 	bl	8002c1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800750c:	b29b      	uxth	r3, r3
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	b29b      	uxth	r3, r3
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f90f 	bl	8007738 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800751a:	e0dc      	b.n	80076d6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007528:	b29b      	uxth	r3, r3
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007536:	b29b      	uxth	r3, r3
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 80ce 	beq.w	80076da <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800753e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 80c9 	beq.w	80076da <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007558:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800755c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	461a      	mov	r2, r3
 8007566:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800756a:	647b      	str	r3, [r7, #68]	; 0x44
 800756c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007570:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e4      	bne.n	8007548 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3308      	adds	r3, #8
 8007584:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	e853 3f00 	ldrex	r3, [r3]
 800758c:	623b      	str	r3, [r7, #32]
   return(result);
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007594:	f023 0301 	bic.w	r3, r3, #1
 8007598:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3308      	adds	r3, #8
 80075a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075a6:	633a      	str	r2, [r7, #48]	; 0x30
 80075a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e1      	bne.n	800757e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2220      	movs	r2, #32
 80075be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	e853 3f00 	ldrex	r3, [r3]
 80075da:	60fb      	str	r3, [r7, #12]
   return(result);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f023 0310 	bic.w	r3, r3, #16
 80075e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f4:	69b9      	ldr	r1, [r7, #24]
 80075f6:	69fa      	ldr	r2, [r7, #28]
 80075f8:	e841 2300 	strex	r3, r2, [r1]
 80075fc:	617b      	str	r3, [r7, #20]
   return(result);
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e4      	bne.n	80075ce <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007604:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f894 	bl	8007738 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007610:	e063      	b.n	80076da <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00e      	beq.n	800763c <HAL_UART_IRQHandler+0x584>
 800761e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d008      	beq.n	800763c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007632:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 ffbc 	bl	80085b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800763a:	e051      	b.n	80076e0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800763c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007644:	2b00      	cmp	r3, #0
 8007646:	d014      	beq.n	8007672 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800764c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007650:	2b00      	cmp	r3, #0
 8007652:	d105      	bne.n	8007660 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007658:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d008      	beq.n	8007672 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007664:	2b00      	cmp	r3, #0
 8007666:	d03a      	beq.n	80076de <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	4798      	blx	r3
    }
    return;
 8007670:	e035      	b.n	80076de <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767a:	2b00      	cmp	r3, #0
 800767c:	d009      	beq.n	8007692 <HAL_UART_IRQHandler+0x5da>
 800767e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 ff66 	bl	800855c <UART_EndTransmit_IT>
    return;
 8007690:	e026      	b.n	80076e0 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <HAL_UART_IRQHandler+0x5fa>
 800769e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 ff95 	bl	80085da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076b0:	e016      	b.n	80076e0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80076b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d010      	beq.n	80076e0 <HAL_UART_IRQHandler+0x628>
 80076be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	da0c      	bge.n	80076e0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 ff7d 	bl	80085c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076cc:	e008      	b.n	80076e0 <HAL_UART_IRQHandler+0x628>
      return;
 80076ce:	bf00      	nop
 80076d0:	e006      	b.n	80076e0 <HAL_UART_IRQHandler+0x628>
    return;
 80076d2:	bf00      	nop
 80076d4:	e004      	b.n	80076e0 <HAL_UART_IRQHandler+0x628>
      return;
 80076d6:	bf00      	nop
 80076d8:	e002      	b.n	80076e0 <HAL_UART_IRQHandler+0x628>
      return;
 80076da:	bf00      	nop
 80076dc:	e000      	b.n	80076e0 <HAL_UART_IRQHandler+0x628>
    return;
 80076de:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80076e0:	37e8      	adds	r7, #232	; 0xe8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop

080076e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007754:	b08c      	sub	sp, #48	; 0x30
 8007756:	af00      	add	r7, sp, #0
 8007758:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	431a      	orrs	r2, r3
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	431a      	orrs	r2, r3
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	4313      	orrs	r3, r2
 8007776:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	4baa      	ldr	r3, [pc, #680]	; (8007a28 <UART_SetConfig+0x2d8>)
 8007780:	4013      	ands	r3, r2
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	6812      	ldr	r2, [r2, #0]
 8007786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007788:	430b      	orrs	r3, r1
 800778a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a9f      	ldr	r2, [pc, #636]	; (8007a2c <UART_SetConfig+0x2dc>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d004      	beq.n	80077bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b8:	4313      	orrs	r3, r2
 80077ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80077c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	6812      	ldr	r2, [r2, #0]
 80077ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077d0:	430b      	orrs	r3, r1
 80077d2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077da:	f023 010f 	bic.w	r1, r3, #15
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	430a      	orrs	r2, r1
 80077e8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a90      	ldr	r2, [pc, #576]	; (8007a30 <UART_SetConfig+0x2e0>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d125      	bne.n	8007840 <UART_SetConfig+0xf0>
 80077f4:	4b8f      	ldr	r3, [pc, #572]	; (8007a34 <UART_SetConfig+0x2e4>)
 80077f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d81a      	bhi.n	8007838 <UART_SetConfig+0xe8>
 8007802:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <UART_SetConfig+0xb8>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	08007819 	.word	0x08007819
 800780c:	08007829 	.word	0x08007829
 8007810:	08007821 	.word	0x08007821
 8007814:	08007831 	.word	0x08007831
 8007818:	2301      	movs	r3, #1
 800781a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800781e:	e116      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007820:	2302      	movs	r3, #2
 8007822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007826:	e112      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007828:	2304      	movs	r3, #4
 800782a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800782e:	e10e      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007830:	2308      	movs	r3, #8
 8007832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007836:	e10a      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007838:	2310      	movs	r3, #16
 800783a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800783e:	e106      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a7c      	ldr	r2, [pc, #496]	; (8007a38 <UART_SetConfig+0x2e8>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d138      	bne.n	80078bc <UART_SetConfig+0x16c>
 800784a:	4b7a      	ldr	r3, [pc, #488]	; (8007a34 <UART_SetConfig+0x2e4>)
 800784c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007850:	f003 030c 	and.w	r3, r3, #12
 8007854:	2b0c      	cmp	r3, #12
 8007856:	d82d      	bhi.n	80078b4 <UART_SetConfig+0x164>
 8007858:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <UART_SetConfig+0x110>)
 800785a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785e:	bf00      	nop
 8007860:	08007895 	.word	0x08007895
 8007864:	080078b5 	.word	0x080078b5
 8007868:	080078b5 	.word	0x080078b5
 800786c:	080078b5 	.word	0x080078b5
 8007870:	080078a5 	.word	0x080078a5
 8007874:	080078b5 	.word	0x080078b5
 8007878:	080078b5 	.word	0x080078b5
 800787c:	080078b5 	.word	0x080078b5
 8007880:	0800789d 	.word	0x0800789d
 8007884:	080078b5 	.word	0x080078b5
 8007888:	080078b5 	.word	0x080078b5
 800788c:	080078b5 	.word	0x080078b5
 8007890:	080078ad 	.word	0x080078ad
 8007894:	2300      	movs	r3, #0
 8007896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800789a:	e0d8      	b.n	8007a4e <UART_SetConfig+0x2fe>
 800789c:	2302      	movs	r3, #2
 800789e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078a2:	e0d4      	b.n	8007a4e <UART_SetConfig+0x2fe>
 80078a4:	2304      	movs	r3, #4
 80078a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078aa:	e0d0      	b.n	8007a4e <UART_SetConfig+0x2fe>
 80078ac:	2308      	movs	r3, #8
 80078ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078b2:	e0cc      	b.n	8007a4e <UART_SetConfig+0x2fe>
 80078b4:	2310      	movs	r3, #16
 80078b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078ba:	e0c8      	b.n	8007a4e <UART_SetConfig+0x2fe>
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a5e      	ldr	r2, [pc, #376]	; (8007a3c <UART_SetConfig+0x2ec>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d125      	bne.n	8007912 <UART_SetConfig+0x1c2>
 80078c6:	4b5b      	ldr	r3, [pc, #364]	; (8007a34 <UART_SetConfig+0x2e4>)
 80078c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80078d0:	2b30      	cmp	r3, #48	; 0x30
 80078d2:	d016      	beq.n	8007902 <UART_SetConfig+0x1b2>
 80078d4:	2b30      	cmp	r3, #48	; 0x30
 80078d6:	d818      	bhi.n	800790a <UART_SetConfig+0x1ba>
 80078d8:	2b20      	cmp	r3, #32
 80078da:	d00a      	beq.n	80078f2 <UART_SetConfig+0x1a2>
 80078dc:	2b20      	cmp	r3, #32
 80078de:	d814      	bhi.n	800790a <UART_SetConfig+0x1ba>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <UART_SetConfig+0x19a>
 80078e4:	2b10      	cmp	r3, #16
 80078e6:	d008      	beq.n	80078fa <UART_SetConfig+0x1aa>
 80078e8:	e00f      	b.n	800790a <UART_SetConfig+0x1ba>
 80078ea:	2300      	movs	r3, #0
 80078ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078f0:	e0ad      	b.n	8007a4e <UART_SetConfig+0x2fe>
 80078f2:	2302      	movs	r3, #2
 80078f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078f8:	e0a9      	b.n	8007a4e <UART_SetConfig+0x2fe>
 80078fa:	2304      	movs	r3, #4
 80078fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007900:	e0a5      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007902:	2308      	movs	r3, #8
 8007904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007908:	e0a1      	b.n	8007a4e <UART_SetConfig+0x2fe>
 800790a:	2310      	movs	r3, #16
 800790c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007910:	e09d      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a4a      	ldr	r2, [pc, #296]	; (8007a40 <UART_SetConfig+0x2f0>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d125      	bne.n	8007968 <UART_SetConfig+0x218>
 800791c:	4b45      	ldr	r3, [pc, #276]	; (8007a34 <UART_SetConfig+0x2e4>)
 800791e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007922:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007926:	2bc0      	cmp	r3, #192	; 0xc0
 8007928:	d016      	beq.n	8007958 <UART_SetConfig+0x208>
 800792a:	2bc0      	cmp	r3, #192	; 0xc0
 800792c:	d818      	bhi.n	8007960 <UART_SetConfig+0x210>
 800792e:	2b80      	cmp	r3, #128	; 0x80
 8007930:	d00a      	beq.n	8007948 <UART_SetConfig+0x1f8>
 8007932:	2b80      	cmp	r3, #128	; 0x80
 8007934:	d814      	bhi.n	8007960 <UART_SetConfig+0x210>
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <UART_SetConfig+0x1f0>
 800793a:	2b40      	cmp	r3, #64	; 0x40
 800793c:	d008      	beq.n	8007950 <UART_SetConfig+0x200>
 800793e:	e00f      	b.n	8007960 <UART_SetConfig+0x210>
 8007940:	2300      	movs	r3, #0
 8007942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007946:	e082      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007948:	2302      	movs	r3, #2
 800794a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800794e:	e07e      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007950:	2304      	movs	r3, #4
 8007952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007956:	e07a      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007958:	2308      	movs	r3, #8
 800795a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800795e:	e076      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007960:	2310      	movs	r3, #16
 8007962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007966:	e072      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a35      	ldr	r2, [pc, #212]	; (8007a44 <UART_SetConfig+0x2f4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d12a      	bne.n	80079c8 <UART_SetConfig+0x278>
 8007972:	4b30      	ldr	r3, [pc, #192]	; (8007a34 <UART_SetConfig+0x2e4>)
 8007974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800797c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007980:	d01a      	beq.n	80079b8 <UART_SetConfig+0x268>
 8007982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007986:	d81b      	bhi.n	80079c0 <UART_SetConfig+0x270>
 8007988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800798c:	d00c      	beq.n	80079a8 <UART_SetConfig+0x258>
 800798e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007992:	d815      	bhi.n	80079c0 <UART_SetConfig+0x270>
 8007994:	2b00      	cmp	r3, #0
 8007996:	d003      	beq.n	80079a0 <UART_SetConfig+0x250>
 8007998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800799c:	d008      	beq.n	80079b0 <UART_SetConfig+0x260>
 800799e:	e00f      	b.n	80079c0 <UART_SetConfig+0x270>
 80079a0:	2300      	movs	r3, #0
 80079a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079a6:	e052      	b.n	8007a4e <UART_SetConfig+0x2fe>
 80079a8:	2302      	movs	r3, #2
 80079aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079ae:	e04e      	b.n	8007a4e <UART_SetConfig+0x2fe>
 80079b0:	2304      	movs	r3, #4
 80079b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079b6:	e04a      	b.n	8007a4e <UART_SetConfig+0x2fe>
 80079b8:	2308      	movs	r3, #8
 80079ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079be:	e046      	b.n	8007a4e <UART_SetConfig+0x2fe>
 80079c0:	2310      	movs	r3, #16
 80079c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079c6:	e042      	b.n	8007a4e <UART_SetConfig+0x2fe>
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a17      	ldr	r2, [pc, #92]	; (8007a2c <UART_SetConfig+0x2dc>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d13a      	bne.n	8007a48 <UART_SetConfig+0x2f8>
 80079d2:	4b18      	ldr	r3, [pc, #96]	; (8007a34 <UART_SetConfig+0x2e4>)
 80079d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079e0:	d01a      	beq.n	8007a18 <UART_SetConfig+0x2c8>
 80079e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079e6:	d81b      	bhi.n	8007a20 <UART_SetConfig+0x2d0>
 80079e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ec:	d00c      	beq.n	8007a08 <UART_SetConfig+0x2b8>
 80079ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079f2:	d815      	bhi.n	8007a20 <UART_SetConfig+0x2d0>
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <UART_SetConfig+0x2b0>
 80079f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079fc:	d008      	beq.n	8007a10 <UART_SetConfig+0x2c0>
 80079fe:	e00f      	b.n	8007a20 <UART_SetConfig+0x2d0>
 8007a00:	2300      	movs	r3, #0
 8007a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a06:	e022      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a0e:	e01e      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007a10:	2304      	movs	r3, #4
 8007a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a16:	e01a      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007a18:	2308      	movs	r3, #8
 8007a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a1e:	e016      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007a20:	2310      	movs	r3, #16
 8007a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a26:	e012      	b.n	8007a4e <UART_SetConfig+0x2fe>
 8007a28:	cfff69f3 	.word	0xcfff69f3
 8007a2c:	40008000 	.word	0x40008000
 8007a30:	40013800 	.word	0x40013800
 8007a34:	40021000 	.word	0x40021000
 8007a38:	40004400 	.word	0x40004400
 8007a3c:	40004800 	.word	0x40004800
 8007a40:	40004c00 	.word	0x40004c00
 8007a44:	40005000 	.word	0x40005000
 8007a48:	2310      	movs	r3, #16
 8007a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4aae      	ldr	r2, [pc, #696]	; (8007d0c <UART_SetConfig+0x5bc>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	f040 8097 	bne.w	8007b88 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a5e:	2b08      	cmp	r3, #8
 8007a60:	d823      	bhi.n	8007aaa <UART_SetConfig+0x35a>
 8007a62:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <UART_SetConfig+0x318>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007a8d 	.word	0x08007a8d
 8007a6c:	08007aab 	.word	0x08007aab
 8007a70:	08007a95 	.word	0x08007a95
 8007a74:	08007aab 	.word	0x08007aab
 8007a78:	08007a9b 	.word	0x08007a9b
 8007a7c:	08007aab 	.word	0x08007aab
 8007a80:	08007aab 	.word	0x08007aab
 8007a84:	08007aab 	.word	0x08007aab
 8007a88:	08007aa3 	.word	0x08007aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a8c:	f7fc fbb4 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8007a90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a92:	e010      	b.n	8007ab6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a94:	4b9e      	ldr	r3, [pc, #632]	; (8007d10 <UART_SetConfig+0x5c0>)
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a98:	e00d      	b.n	8007ab6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a9a:	f7fc fb15 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8007a9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007aa0:	e009      	b.n	8007ab6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007aa8:	e005      	b.n	8007ab6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ab4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 8130 	beq.w	8007d1e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	4a94      	ldr	r2, [pc, #592]	; (8007d14 <UART_SetConfig+0x5c4>)
 8007ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ad0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	4413      	add	r3, r2
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d305      	bcc.n	8007aee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d903      	bls.n	8007af6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007af4:	e113      	b.n	8007d1e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af8:	2200      	movs	r2, #0
 8007afa:	60bb      	str	r3, [r7, #8]
 8007afc:	60fa      	str	r2, [r7, #12]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	4a84      	ldr	r2, [pc, #528]	; (8007d14 <UART_SetConfig+0x5c4>)
 8007b04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	603b      	str	r3, [r7, #0]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b18:	f7f8 fbc2 	bl	80002a0 <__aeabi_uldivmod>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4610      	mov	r0, r2
 8007b22:	4619      	mov	r1, r3
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	f04f 0300 	mov.w	r3, #0
 8007b2c:	020b      	lsls	r3, r1, #8
 8007b2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b32:	0202      	lsls	r2, r0, #8
 8007b34:	6979      	ldr	r1, [r7, #20]
 8007b36:	6849      	ldr	r1, [r1, #4]
 8007b38:	0849      	lsrs	r1, r1, #1
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	4605      	mov	r5, r0
 8007b40:	eb12 0804 	adds.w	r8, r2, r4
 8007b44:	eb43 0905 	adc.w	r9, r3, r5
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	469a      	mov	sl, r3
 8007b50:	4693      	mov	fp, r2
 8007b52:	4652      	mov	r2, sl
 8007b54:	465b      	mov	r3, fp
 8007b56:	4640      	mov	r0, r8
 8007b58:	4649      	mov	r1, r9
 8007b5a:	f7f8 fba1 	bl	80002a0 <__aeabi_uldivmod>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	460b      	mov	r3, r1
 8007b62:	4613      	mov	r3, r2
 8007b64:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b6c:	d308      	bcc.n	8007b80 <UART_SetConfig+0x430>
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b74:	d204      	bcs.n	8007b80 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6a3a      	ldr	r2, [r7, #32]
 8007b7c:	60da      	str	r2, [r3, #12]
 8007b7e:	e0ce      	b.n	8007d1e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007b86:	e0ca      	b.n	8007d1e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b90:	d166      	bne.n	8007c60 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007b92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b96:	2b08      	cmp	r3, #8
 8007b98:	d827      	bhi.n	8007bea <UART_SetConfig+0x49a>
 8007b9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <UART_SetConfig+0x450>)
 8007b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba0:	08007bc5 	.word	0x08007bc5
 8007ba4:	08007bcd 	.word	0x08007bcd
 8007ba8:	08007bd5 	.word	0x08007bd5
 8007bac:	08007beb 	.word	0x08007beb
 8007bb0:	08007bdb 	.word	0x08007bdb
 8007bb4:	08007beb 	.word	0x08007beb
 8007bb8:	08007beb 	.word	0x08007beb
 8007bbc:	08007beb 	.word	0x08007beb
 8007bc0:	08007be3 	.word	0x08007be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bc4:	f7fc fb18 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8007bc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bca:	e014      	b.n	8007bf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bcc:	f7fc fb2a 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 8007bd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bd2:	e010      	b.n	8007bf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bd4:	4b4e      	ldr	r3, [pc, #312]	; (8007d10 <UART_SetConfig+0x5c0>)
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bd8:	e00d      	b.n	8007bf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bda:	f7fc fa75 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8007bde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007be0:	e009      	b.n	8007bf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007be8:	e005      	b.n	8007bf6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007bf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 8090 	beq.w	8007d1e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	4a44      	ldr	r2, [pc, #272]	; (8007d14 <UART_SetConfig+0x5c4>)
 8007c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c10:	005a      	lsls	r2, r3, #1
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	441a      	add	r2, r3
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c22:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	2b0f      	cmp	r3, #15
 8007c28:	d916      	bls.n	8007c58 <UART_SetConfig+0x508>
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c30:	d212      	bcs.n	8007c58 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	f023 030f 	bic.w	r3, r3, #15
 8007c3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	085b      	lsrs	r3, r3, #1
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	8bfb      	ldrh	r3, [r7, #30]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	8bfa      	ldrh	r2, [r7, #30]
 8007c54:	60da      	str	r2, [r3, #12]
 8007c56:	e062      	b.n	8007d1e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c5e:	e05e      	b.n	8007d1e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d828      	bhi.n	8007cba <UART_SetConfig+0x56a>
 8007c68:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <UART_SetConfig+0x520>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007c95 	.word	0x08007c95
 8007c74:	08007c9d 	.word	0x08007c9d
 8007c78:	08007ca5 	.word	0x08007ca5
 8007c7c:	08007cbb 	.word	0x08007cbb
 8007c80:	08007cab 	.word	0x08007cab
 8007c84:	08007cbb 	.word	0x08007cbb
 8007c88:	08007cbb 	.word	0x08007cbb
 8007c8c:	08007cbb 	.word	0x08007cbb
 8007c90:	08007cb3 	.word	0x08007cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c94:	f7fc fab0 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8007c98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c9a:	e014      	b.n	8007cc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c9c:	f7fc fac2 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 8007ca0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ca2:	e010      	b.n	8007cc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ca4:	4b1a      	ldr	r3, [pc, #104]	; (8007d10 <UART_SetConfig+0x5c0>)
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ca8:	e00d      	b.n	8007cc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007caa:	f7fc fa0d 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8007cae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cb0:	e009      	b.n	8007cc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cb8:	e005      	b.n	8007cc6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007cc4:	bf00      	nop
    }

    if (pclk != 0U)
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d028      	beq.n	8007d1e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	4a10      	ldr	r2, [pc, #64]	; (8007d14 <UART_SetConfig+0x5c4>)
 8007cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	085b      	lsrs	r3, r3, #1
 8007ce4:	441a      	add	r2, r3
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cee:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	2b0f      	cmp	r3, #15
 8007cf4:	d910      	bls.n	8007d18 <UART_SetConfig+0x5c8>
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cfc:	d20c      	bcs.n	8007d18 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60da      	str	r2, [r3, #12]
 8007d08:	e009      	b.n	8007d1e <UART_SetConfig+0x5ce>
 8007d0a:	bf00      	nop
 8007d0c:	40008000 	.word	0x40008000
 8007d10:	00f42400 	.word	0x00f42400
 8007d14:	0800cae4 	.word	0x0800cae4
      }
      else
      {
        ret = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2200      	movs	r2, #0
 8007d32:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2200      	movs	r2, #0
 8007d38:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007d3a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3730      	adds	r7, #48	; 0x30
 8007d42:	46bd      	mov	sp, r7
 8007d44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00a      	beq.n	8007d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	430a      	orrs	r2, r1
 8007d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00a      	beq.n	8007db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dba:	f003 0308 	and.w	r3, r3, #8
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00a      	beq.n	8007dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfe:	f003 0320 	and.w	r3, r3, #32
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00a      	beq.n	8007e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d01a      	beq.n	8007e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e46:	d10a      	bne.n	8007e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	605a      	str	r2, [r3, #4]
  }
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af02      	add	r7, sp, #8
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e9c:	f7fa fc88 	bl	80027b0 <HAL_GetTick>
 8007ea0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0308 	and.w	r3, r3, #8
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d10e      	bne.n	8007ece <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f82f 	bl	8007f22 <UART_WaitOnFlagUntilTimeout>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e025      	b.n	8007f1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d10e      	bne.n	8007efa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f819 	bl	8007f22 <UART_WaitOnFlagUntilTimeout>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e00f      	b.n	8007f1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2220      	movs	r2, #32
 8007f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b09c      	sub	sp, #112	; 0x70
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	603b      	str	r3, [r7, #0]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f32:	e0a9      	b.n	8008088 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3a:	f000 80a5 	beq.w	8008088 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f3e:	f7fa fc37 	bl	80027b0 <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d302      	bcc.n	8007f54 <UART_WaitOnFlagUntilTimeout+0x32>
 8007f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d140      	bne.n	8007fd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f68:	667b      	str	r3, [r7, #100]	; 0x64
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f74:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e6      	bne.n	8007f54 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f90:	e853 3f00 	ldrex	r3, [r3]
 8007f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f98:	f023 0301 	bic.w	r3, r3, #1
 8007f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fa6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e5      	bne.n	8007f86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e069      	b.n	80080aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d051      	beq.n	8008088 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ff2:	d149      	bne.n	8008088 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ffc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008012:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	461a      	mov	r2, r3
 800801a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801c:	637b      	str	r3, [r7, #52]	; 0x34
 800801e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e6      	bne.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3308      	adds	r3, #8
 8008036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	e853 3f00 	ldrex	r3, [r3]
 800803e:	613b      	str	r3, [r7, #16]
   return(result);
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f023 0301 	bic.w	r3, r3, #1
 8008046:	66bb      	str	r3, [r7, #104]	; 0x68
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3308      	adds	r3, #8
 800804e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008050:	623a      	str	r2, [r7, #32]
 8008052:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008054:	69f9      	ldr	r1, [r7, #28]
 8008056:	6a3a      	ldr	r2, [r7, #32]
 8008058:	e841 2300 	strex	r3, r2, [r1]
 800805c:	61bb      	str	r3, [r7, #24]
   return(result);
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e5      	bne.n	8008030 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2220      	movs	r2, #32
 8008068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2220      	movs	r2, #32
 8008070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2220      	movs	r2, #32
 8008078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e010      	b.n	80080aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	69da      	ldr	r2, [r3, #28]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	4013      	ands	r3, r2
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	429a      	cmp	r2, r3
 8008096:	bf0c      	ite	eq
 8008098:	2301      	moveq	r3, #1
 800809a:	2300      	movne	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	461a      	mov	r2, r3
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	f43f af46 	beq.w	8007f34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3770      	adds	r7, #112	; 0x70
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b096      	sub	sp, #88	; 0x58
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	4613      	mov	r3, r2
 80080c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	88fa      	ldrh	r2, [r7, #6]
 80080cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2222      	movs	r2, #34	; 0x22
 80080dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d02c      	beq.n	8008142 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080ec:	4a42      	ldr	r2, [pc, #264]	; (80081f8 <UART_Start_Receive_DMA+0x144>)
 80080ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080f4:	4a41      	ldr	r2, [pc, #260]	; (80081fc <UART_Start_Receive_DMA+0x148>)
 80080f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080fc:	4a40      	ldr	r2, [pc, #256]	; (8008200 <UART_Start_Receive_DMA+0x14c>)
 80080fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008104:	2200      	movs	r2, #0
 8008106:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3324      	adds	r3, #36	; 0x24
 8008112:	4619      	mov	r1, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008118:	461a      	mov	r2, r3
 800811a:	88fb      	ldrh	r3, [r7, #6]
 800811c:	f7fa fd02 	bl	8002b24 <HAL_DMA_Start_IT>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00d      	beq.n	8008142 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2210      	movs	r2, #16
 800812a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2220      	movs	r2, #32
 800813a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e055      	b.n	80081ee <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d018      	beq.n	8008184 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008166:	657b      	str	r3, [r7, #84]	; 0x54
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	461a      	mov	r2, r3
 800816e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008170:	64bb      	str	r3, [r7, #72]	; 0x48
 8008172:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008174:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008178:	e841 2300 	strex	r3, r2, [r1]
 800817c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800817e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e6      	bne.n	8008152 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3308      	adds	r3, #8
 800818a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818e:	e853 3f00 	ldrex	r3, [r3]
 8008192:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	f043 0301 	orr.w	r3, r3, #1
 800819a:	653b      	str	r3, [r7, #80]	; 0x50
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	3308      	adds	r3, #8
 80081a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081a4:	637a      	str	r2, [r7, #52]	; 0x34
 80081a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081ac:	e841 2300 	strex	r3, r2, [r1]
 80081b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e5      	bne.n	8008184 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3308      	adds	r3, #8
 80081be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	e853 3f00 	ldrex	r3, [r3]
 80081c6:	613b      	str	r3, [r7, #16]
   return(result);
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3308      	adds	r3, #8
 80081d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081d8:	623a      	str	r2, [r7, #32]
 80081da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081dc:	69f9      	ldr	r1, [r7, #28]
 80081de:	6a3a      	ldr	r2, [r7, #32]
 80081e0:	e841 2300 	strex	r3, r2, [r1]
 80081e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1e5      	bne.n	80081b8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3758      	adds	r7, #88	; 0x58
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	08008353 	.word	0x08008353
 80081fc:	08008479 	.word	0x08008479
 8008200:	080084b1 	.word	0x080084b1

08008204 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008204:	b480      	push	{r7}
 8008206:	b08f      	sub	sp, #60	; 0x3c
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	6a3b      	ldr	r3, [r7, #32]
 8008214:	e853 3f00 	ldrex	r3, [r3]
 8008218:	61fb      	str	r3, [r7, #28]
   return(result);
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008220:	637b      	str	r3, [r7, #52]	; 0x34
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800822c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e6      	bne.n	800820c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3308      	adds	r3, #8
 8008244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	60bb      	str	r3, [r7, #8]
   return(result);
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008254:	633b      	str	r3, [r7, #48]	; 0x30
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3308      	adds	r3, #8
 800825c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825e:	61ba      	str	r2, [r7, #24]
 8008260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008262:	6979      	ldr	r1, [r7, #20]
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	e841 2300 	strex	r3, r2, [r1]
 800826a:	613b      	str	r3, [r7, #16]
   return(result);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1e5      	bne.n	800823e <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2220      	movs	r2, #32
 8008276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800827a:	bf00      	nop
 800827c:	373c      	adds	r7, #60	; 0x3c
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008286:	b480      	push	{r7}
 8008288:	b095      	sub	sp, #84	; 0x54
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008296:	e853 3f00 	ldrex	r3, [r3]
 800829a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800829c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	461a      	mov	r2, r3
 80082aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ac:	643b      	str	r3, [r7, #64]	; 0x40
 80082ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e6      	bne.n	800828e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3308      	adds	r3, #8
 80082c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	e853 3f00 	ldrex	r3, [r3]
 80082ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082d6:	f023 0301 	bic.w	r3, r3, #1
 80082da:	64bb      	str	r3, [r7, #72]	; 0x48
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3308      	adds	r3, #8
 80082e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ec:	e841 2300 	strex	r3, r2, [r1]
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1e3      	bne.n	80082c0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d118      	bne.n	8008332 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	e853 3f00 	ldrex	r3, [r3]
 800830c:	60bb      	str	r3, [r7, #8]
   return(result);
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f023 0310 	bic.w	r3, r3, #16
 8008314:	647b      	str	r3, [r7, #68]	; 0x44
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800831e:	61bb      	str	r3, [r7, #24]
 8008320:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008322:	6979      	ldr	r1, [r7, #20]
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	e841 2300 	strex	r3, r2, [r1]
 800832a:	613b      	str	r3, [r7, #16]
   return(result);
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1e6      	bne.n	8008300 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2220      	movs	r2, #32
 8008336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008346:	bf00      	nop
 8008348:	3754      	adds	r7, #84	; 0x54
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b09c      	sub	sp, #112	; 0x70
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0320 	and.w	r3, r3, #32
 800836a:	2b00      	cmp	r3, #0
 800836c:	d171      	bne.n	8008452 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800836e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008370:	2200      	movs	r2, #0
 8008372:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800838a:	66bb      	str	r3, [r7, #104]	; 0x68
 800838c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008394:	65bb      	str	r3, [r7, #88]	; 0x58
 8008396:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800839a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800839c:	e841 2300 	strex	r3, r2, [r1]
 80083a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e6      	bne.n	8008376 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3308      	adds	r3, #8
 80083ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ba:	f023 0301 	bic.w	r3, r3, #1
 80083be:	667b      	str	r3, [r7, #100]	; 0x64
 80083c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3308      	adds	r3, #8
 80083c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80083c8:	647a      	str	r2, [r7, #68]	; 0x44
 80083ca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083d0:	e841 2300 	strex	r3, r2, [r1]
 80083d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1e5      	bne.n	80083a8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3308      	adds	r3, #8
 80083e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	e853 3f00 	ldrex	r3, [r3]
 80083ea:	623b      	str	r3, [r7, #32]
   return(result);
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083f2:	663b      	str	r3, [r7, #96]	; 0x60
 80083f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3308      	adds	r3, #8
 80083fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083fc:	633a      	str	r2, [r7, #48]	; 0x30
 80083fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008404:	e841 2300 	strex	r3, r2, [r1]
 8008408:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e5      	bne.n	80083dc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008412:	2220      	movs	r2, #32
 8008414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800841a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800841c:	2b01      	cmp	r3, #1
 800841e:	d118      	bne.n	8008452 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	e853 3f00 	ldrex	r3, [r3]
 800842c:	60fb      	str	r3, [r7, #12]
   return(result);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f023 0310 	bic.w	r3, r3, #16
 8008434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800843e:	61fb      	str	r3, [r7, #28]
 8008440:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	69b9      	ldr	r1, [r7, #24]
 8008444:	69fa      	ldr	r2, [r7, #28]
 8008446:	e841 2300 	strex	r3, r2, [r1]
 800844a:	617b      	str	r3, [r7, #20]
   return(result);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1e6      	bne.n	8008420 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008456:	2b01      	cmp	r3, #1
 8008458:	d107      	bne.n	800846a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800845a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800845c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008460:	4619      	mov	r1, r3
 8008462:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008464:	f7ff f968 	bl	8007738 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008468:	e002      	b.n	8008470 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800846a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800846c:	f7ff f946 	bl	80076fc <HAL_UART_RxCpltCallback>
}
 8008470:	bf00      	nop
 8008472:	3770      	adds	r7, #112	; 0x70
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008484:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800848a:	2b01      	cmp	r3, #1
 800848c:	d109      	bne.n	80084a2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008494:	085b      	lsrs	r3, r3, #1
 8008496:	b29b      	uxth	r3, r3
 8008498:	4619      	mov	r1, r3
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f7ff f94c 	bl	8007738 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084a0:	e002      	b.n	80084a8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f7ff f934 	bl	8007710 <HAL_UART_RxHalfCpltCallback>
}
 80084a8:	bf00      	nop
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084bc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084c4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d8:	2b80      	cmp	r3, #128	; 0x80
 80084da:	d109      	bne.n	80084f0 <UART_DMAError+0x40>
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	2b21      	cmp	r3, #33	; 0x21
 80084e0:	d106      	bne.n	80084f0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80084ea:	6978      	ldr	r0, [r7, #20]
 80084ec:	f7ff fe8a 	bl	8008204 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084fa:	2b40      	cmp	r3, #64	; 0x40
 80084fc:	d109      	bne.n	8008512 <UART_DMAError+0x62>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2b22      	cmp	r3, #34	; 0x22
 8008502:	d106      	bne.n	8008512 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2200      	movs	r2, #0
 8008508:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800850c:	6978      	ldr	r0, [r7, #20]
 800850e:	f7ff feba 	bl	8008286 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008518:	f043 0210 	orr.w	r2, r3, #16
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008522:	6978      	ldr	r0, [r7, #20]
 8008524:	f7ff f8fe 	bl	8007724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008528:	bf00      	nop
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f7ff f8e8 	bl	8007724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008554:	bf00      	nop
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	e853 3f00 	ldrex	r3, [r3]
 8008570:	60bb      	str	r3, [r7, #8]
   return(result);
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008578:	61fb      	str	r3, [r7, #28]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	461a      	mov	r2, r3
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	61bb      	str	r3, [r7, #24]
 8008584:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008586:	6979      	ldr	r1, [r7, #20]
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	e841 2300 	strex	r3, r2, [r1]
 800858e:	613b      	str	r3, [r7, #16]
   return(result);
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1e6      	bne.n	8008564 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2220      	movs	r2, #32
 800859a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7ff f89f 	bl	80076e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085aa:	bf00      	nop
 80085ac:	3720      	adds	r7, #32
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085ba:	bf00      	nop
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b083      	sub	sp, #12
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80085ce:	bf00      	nop
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80085da:	b480      	push	{r7}
 80085dc:	b083      	sub	sp, #12
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80085e2:	bf00      	nop
 80085e4:	370c      	adds	r7, #12
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b085      	sub	sp, #20
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d101      	bne.n	8008604 <HAL_UARTEx_DisableFifoMode+0x16>
 8008600:	2302      	movs	r3, #2
 8008602:	e027      	b.n	8008654 <HAL_UARTEx_DisableFifoMode+0x66>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2224      	movs	r2, #36	; 0x24
 8008610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 0201 	bic.w	r2, r2, #1
 800862a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008632:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2220      	movs	r2, #32
 8008646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008670:	2b01      	cmp	r3, #1
 8008672:	d101      	bne.n	8008678 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008674:	2302      	movs	r3, #2
 8008676:	e02d      	b.n	80086d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2224      	movs	r2, #36	; 0x24
 8008684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0201 	bic.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	430a      	orrs	r2, r1
 80086b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f8ab 	bl	8008810 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2220      	movs	r2, #32
 80086c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d101      	bne.n	80086f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80086f0:	2302      	movs	r3, #2
 80086f2:	e02d      	b.n	8008750 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2224      	movs	r2, #36	; 0x24
 8008700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f022 0201 	bic.w	r2, r2, #1
 800871a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f86d 	bl	8008810 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2220      	movs	r2, #32
 8008742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08c      	sub	sp, #48	; 0x30
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	4613      	mov	r3, r2
 8008764:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800876c:	2b20      	cmp	r3, #32
 800876e:	d14a      	bne.n	8008806 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008776:	88fb      	ldrh	r3, [r7, #6]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e043      	b.n	8008808 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800878a:	2302      	movs	r3, #2
 800878c:	e03c      	b.n	8008808 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800879c:	88fb      	ldrh	r3, [r7, #6]
 800879e:	461a      	mov	r2, r3
 80087a0:	68b9      	ldr	r1, [r7, #8]
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f7ff fc86 	bl	80080b4 <UART_Start_Receive_DMA>
 80087a8:	4603      	mov	r3, r0
 80087aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80087ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d124      	bne.n	8008800 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d11d      	bne.n	80087fa <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2210      	movs	r2, #16
 80087c4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	e853 3f00 	ldrex	r3, [r3]
 80087d2:	617b      	str	r3, [r7, #20]
   return(result);
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f043 0310 	orr.w	r3, r3, #16
 80087da:	62bb      	str	r3, [r7, #40]	; 0x28
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	461a      	mov	r2, r3
 80087e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e4:	627b      	str	r3, [r7, #36]	; 0x24
 80087e6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e8:	6a39      	ldr	r1, [r7, #32]
 80087ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ec:	e841 2300 	strex	r3, r2, [r1]
 80087f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1e6      	bne.n	80087c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80087f8:	e002      	b.n	8008800 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008804:	e000      	b.n	8008808 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8008806:	2302      	movs	r3, #2
  }
}
 8008808:	4618      	mov	r0, r3
 800880a:	3730      	adds	r7, #48	; 0x30
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800881c:	2b00      	cmp	r3, #0
 800881e:	d108      	bne.n	8008832 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008830:	e031      	b.n	8008896 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008832:	2308      	movs	r3, #8
 8008834:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008836:	2308      	movs	r3, #8
 8008838:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	0e5b      	lsrs	r3, r3, #25
 8008842:	b2db      	uxtb	r3, r3
 8008844:	f003 0307 	and.w	r3, r3, #7
 8008848:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	0f5b      	lsrs	r3, r3, #29
 8008852:	b2db      	uxtb	r3, r3
 8008854:	f003 0307 	and.w	r3, r3, #7
 8008858:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800885a:	7bbb      	ldrb	r3, [r7, #14]
 800885c:	7b3a      	ldrb	r2, [r7, #12]
 800885e:	4911      	ldr	r1, [pc, #68]	; (80088a4 <UARTEx_SetNbDataToProcess+0x94>)
 8008860:	5c8a      	ldrb	r2, [r1, r2]
 8008862:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008866:	7b3a      	ldrb	r2, [r7, #12]
 8008868:	490f      	ldr	r1, [pc, #60]	; (80088a8 <UARTEx_SetNbDataToProcess+0x98>)
 800886a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800886c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008870:	b29a      	uxth	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	7b7a      	ldrb	r2, [r7, #13]
 800887c:	4909      	ldr	r1, [pc, #36]	; (80088a4 <UARTEx_SetNbDataToProcess+0x94>)
 800887e:	5c8a      	ldrb	r2, [r1, r2]
 8008880:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008884:	7b7a      	ldrb	r2, [r7, #13]
 8008886:	4908      	ldr	r1, [pc, #32]	; (80088a8 <UARTEx_SetNbDataToProcess+0x98>)
 8008888:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800888a:	fb93 f3f2 	sdiv	r3, r3, r2
 800888e:	b29a      	uxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	0800cafc 	.word	0x0800cafc
 80088a8:	0800cb04 	.word	0x0800cb04

080088ac <__NVIC_SetPriority>:
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	4603      	mov	r3, r0
 80088b4:	6039      	str	r1, [r7, #0]
 80088b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	db0a      	blt.n	80088d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	490c      	ldr	r1, [pc, #48]	; (80088f8 <__NVIC_SetPriority+0x4c>)
 80088c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088ca:	0112      	lsls	r2, r2, #4
 80088cc:	b2d2      	uxtb	r2, r2
 80088ce:	440b      	add	r3, r1
 80088d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80088d4:	e00a      	b.n	80088ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	b2da      	uxtb	r2, r3
 80088da:	4908      	ldr	r1, [pc, #32]	; (80088fc <__NVIC_SetPriority+0x50>)
 80088dc:	79fb      	ldrb	r3, [r7, #7]
 80088de:	f003 030f 	and.w	r3, r3, #15
 80088e2:	3b04      	subs	r3, #4
 80088e4:	0112      	lsls	r2, r2, #4
 80088e6:	b2d2      	uxtb	r2, r2
 80088e8:	440b      	add	r3, r1
 80088ea:	761a      	strb	r2, [r3, #24]
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	e000e100 	.word	0xe000e100
 80088fc:	e000ed00 	.word	0xe000ed00

08008900 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008900:	b580      	push	{r7, lr}
 8008902:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008904:	4b05      	ldr	r3, [pc, #20]	; (800891c <SysTick_Handler+0x1c>)
 8008906:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008908:	f002 f8c0 	bl	800aa8c <xTaskGetSchedulerState>
 800890c:	4603      	mov	r3, r0
 800890e:	2b01      	cmp	r3, #1
 8008910:	d001      	beq.n	8008916 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008912:	f002 ffa9 	bl	800b868 <xPortSysTickHandler>
  }
}
 8008916:	bf00      	nop
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	e000e010 	.word	0xe000e010

08008920 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008924:	2100      	movs	r1, #0
 8008926:	f06f 0004 	mvn.w	r0, #4
 800892a:	f7ff ffbf 	bl	80088ac <__NVIC_SetPriority>
#endif
}
 800892e:	bf00      	nop
 8008930:	bd80      	pop	{r7, pc}
	...

08008934 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800893a:	f3ef 8305 	mrs	r3, IPSR
 800893e:	603b      	str	r3, [r7, #0]
  return(result);
 8008940:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008946:	f06f 0305 	mvn.w	r3, #5
 800894a:	607b      	str	r3, [r7, #4]
 800894c:	e00c      	b.n	8008968 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800894e:	4b0a      	ldr	r3, [pc, #40]	; (8008978 <osKernelInitialize+0x44>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d105      	bne.n	8008962 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008956:	4b08      	ldr	r3, [pc, #32]	; (8008978 <osKernelInitialize+0x44>)
 8008958:	2201      	movs	r2, #1
 800895a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800895c:	2300      	movs	r3, #0
 800895e:	607b      	str	r3, [r7, #4]
 8008960:	e002      	b.n	8008968 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008962:	f04f 33ff 	mov.w	r3, #4294967295
 8008966:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008968:	687b      	ldr	r3, [r7, #4]
}
 800896a:	4618      	mov	r0, r3
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	200043d0 	.word	0x200043d0

0800897c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008982:	f3ef 8305 	mrs	r3, IPSR
 8008986:	603b      	str	r3, [r7, #0]
  return(result);
 8008988:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <osKernelStart+0x1a>
    stat = osErrorISR;
 800898e:	f06f 0305 	mvn.w	r3, #5
 8008992:	607b      	str	r3, [r7, #4]
 8008994:	e010      	b.n	80089b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008996:	4b0b      	ldr	r3, [pc, #44]	; (80089c4 <osKernelStart+0x48>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d109      	bne.n	80089b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800899e:	f7ff ffbf 	bl	8008920 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80089a2:	4b08      	ldr	r3, [pc, #32]	; (80089c4 <osKernelStart+0x48>)
 80089a4:	2202      	movs	r2, #2
 80089a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80089a8:	f001 fc18 	bl	800a1dc <vTaskStartScheduler>
      stat = osOK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	607b      	str	r3, [r7, #4]
 80089b0:	e002      	b.n	80089b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80089b2:	f04f 33ff 	mov.w	r3, #4294967295
 80089b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80089b8:	687b      	ldr	r3, [r7, #4]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	200043d0 	.word	0x200043d0

080089c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08e      	sub	sp, #56	; 0x38
 80089cc:	af04      	add	r7, sp, #16
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80089d4:	2300      	movs	r3, #0
 80089d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089d8:	f3ef 8305 	mrs	r3, IPSR
 80089dc:	617b      	str	r3, [r7, #20]
  return(result);
 80089de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d17e      	bne.n	8008ae2 <osThreadNew+0x11a>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d07b      	beq.n	8008ae2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80089ea:	2380      	movs	r3, #128	; 0x80
 80089ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80089ee:	2318      	movs	r3, #24
 80089f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80089f6:	f04f 33ff 	mov.w	r3, #4294967295
 80089fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d045      	beq.n	8008a8e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d002      	beq.n	8008a10 <osThreadNew+0x48>
        name = attr->name;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d002      	beq.n	8008a1e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d008      	beq.n	8008a36 <osThreadNew+0x6e>
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	2b38      	cmp	r3, #56	; 0x38
 8008a28:	d805      	bhi.n	8008a36 <osThreadNew+0x6e>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <osThreadNew+0x72>
        return (NULL);
 8008a36:	2300      	movs	r3, #0
 8008a38:	e054      	b.n	8008ae4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	089b      	lsrs	r3, r3, #2
 8008a48:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00e      	beq.n	8008a70 <osThreadNew+0xa8>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	2b5b      	cmp	r3, #91	; 0x5b
 8008a58:	d90a      	bls.n	8008a70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d006      	beq.n	8008a70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <osThreadNew+0xa8>
        mem = 1;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	61bb      	str	r3, [r7, #24]
 8008a6e:	e010      	b.n	8008a92 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10c      	bne.n	8008a92 <osThreadNew+0xca>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d108      	bne.n	8008a92 <osThreadNew+0xca>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d104      	bne.n	8008a92 <osThreadNew+0xca>
          mem = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	61bb      	str	r3, [r7, #24]
 8008a8c:	e001      	b.n	8008a92 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d110      	bne.n	8008aba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008aa0:	9202      	str	r2, [sp, #8]
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	6a3a      	ldr	r2, [r7, #32]
 8008aac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f001 f9be 	bl	8009e30 <xTaskCreateStatic>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	613b      	str	r3, [r7, #16]
 8008ab8:	e013      	b.n	8008ae2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d110      	bne.n	8008ae2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	f107 0310 	add.w	r3, r7, #16
 8008ac8:	9301      	str	r3, [sp, #4]
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f001 fa09 	bl	8009eea <xTaskCreate>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d001      	beq.n	8008ae2 <osThreadNew+0x11a>
            hTask = NULL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008ae2:	693b      	ldr	r3, [r7, #16]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3728      	adds	r7, #40	; 0x28
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008af4:	f3ef 8305 	mrs	r3, IPSR
 8008af8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008afa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d003      	beq.n	8008b08 <osDelay+0x1c>
    stat = osErrorISR;
 8008b00:	f06f 0305 	mvn.w	r3, #5
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	e007      	b.n	8008b18 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 fb2e 	bl	800a174 <vTaskDelay>
    }
  }

  return (stat);
 8008b18:	68fb      	ldr	r3, [r7, #12]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b086      	sub	sp, #24
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b2e:	f3ef 8305 	mrs	r3, IPSR
 8008b32:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b34:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d12d      	bne.n	8008b96 <osEventFlagsNew+0x74>
    mem = -1;
 8008b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d015      	beq.n	8008b72 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d006      	beq.n	8008b5c <osEventFlagsNew+0x3a>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	2b1f      	cmp	r3, #31
 8008b54:	d902      	bls.n	8008b5c <osEventFlagsNew+0x3a>
        mem = 1;
 8008b56:	2301      	movs	r3, #1
 8008b58:	613b      	str	r3, [r7, #16]
 8008b5a:	e00c      	b.n	8008b76 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d108      	bne.n	8008b76 <osEventFlagsNew+0x54>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d104      	bne.n	8008b76 <osEventFlagsNew+0x54>
          mem = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	613b      	str	r3, [r7, #16]
 8008b70:	e001      	b.n	8008b76 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d106      	bne.n	8008b8a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 f94f 	bl	8008e24 <xEventGroupCreateStatic>
 8008b86:	6178      	str	r0, [r7, #20]
 8008b88:	e005      	b.n	8008b96 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d102      	bne.n	8008b96 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8008b90:	f000 f97f 	bl	8008e92 <xEventGroupCreate>
 8008b94:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8008b96:	697b      	ldr	r3, [r7, #20]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3718      	adds	r7, #24
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b088      	sub	sp, #32
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bac:	f3ef 8305 	mrs	r3, IPSR
 8008bb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bb2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d174      	bne.n	8008ca2 <osMutexNew+0x102>
    if (attr != NULL) {
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d003      	beq.n	8008bc6 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	61bb      	str	r3, [r7, #24]
 8008bc4:	e001      	b.n	8008bca <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d002      	beq.n	8008bda <osMutexNew+0x3a>
      rmtx = 1U;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	617b      	str	r3, [r7, #20]
 8008bd8:	e001      	b.n	8008bde <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	f003 0308 	and.w	r3, r3, #8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d15c      	bne.n	8008ca2 <osMutexNew+0x102>
      mem = -1;
 8008be8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bec:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d015      	beq.n	8008c20 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d006      	beq.n	8008c0a <osMutexNew+0x6a>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	2b4f      	cmp	r3, #79	; 0x4f
 8008c02:	d902      	bls.n	8008c0a <osMutexNew+0x6a>
          mem = 1;
 8008c04:	2301      	movs	r3, #1
 8008c06:	613b      	str	r3, [r7, #16]
 8008c08:	e00c      	b.n	8008c24 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d108      	bne.n	8008c24 <osMutexNew+0x84>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d104      	bne.n	8008c24 <osMutexNew+0x84>
            mem = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	613b      	str	r3, [r7, #16]
 8008c1e:	e001      	b.n	8008c24 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008c20:	2300      	movs	r3, #0
 8008c22:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d112      	bne.n	8008c50 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d007      	beq.n	8008c40 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	4619      	mov	r1, r3
 8008c36:	2004      	movs	r0, #4
 8008c38:	f000 fb69 	bl	800930e <xQueueCreateMutexStatic>
 8008c3c:	61f8      	str	r0, [r7, #28]
 8008c3e:	e016      	b.n	8008c6e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	4619      	mov	r1, r3
 8008c46:	2001      	movs	r0, #1
 8008c48:	f000 fb61 	bl	800930e <xQueueCreateMutexStatic>
 8008c4c:	61f8      	str	r0, [r7, #28]
 8008c4e:	e00e      	b.n	8008c6e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10b      	bne.n	8008c6e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d004      	beq.n	8008c66 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008c5c:	2004      	movs	r0, #4
 8008c5e:	f000 fb3e 	bl	80092de <xQueueCreateMutex>
 8008c62:	61f8      	str	r0, [r7, #28]
 8008c64:	e003      	b.n	8008c6e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008c66:	2001      	movs	r0, #1
 8008c68:	f000 fb39 	bl	80092de <xQueueCreateMutex>
 8008c6c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00c      	beq.n	8008c8e <osMutexNew+0xee>
        if (attr != NULL) {
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <osMutexNew+0xe2>
          name = attr->name;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	e001      	b.n	8008c86 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008c82:	2300      	movs	r3, #0
 8008c84:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008c86:	68f9      	ldr	r1, [r7, #12]
 8008c88:	69f8      	ldr	r0, [r7, #28]
 8008c8a:	f001 f873 	bl	8009d74 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d006      	beq.n	8008ca2 <osMutexNew+0x102>
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	f043 0301 	orr.w	r3, r3, #1
 8008ca0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008ca2:	69fb      	ldr	r3, [r7, #28]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3720      	adds	r7, #32
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f023 0301 	bic.w	r3, r3, #1
 8008cbc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cca:	f3ef 8305 	mrs	r3, IPSR
 8008cce:	60bb      	str	r3, [r7, #8]
  return(result);
 8008cd0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008cd6:	f06f 0305 	mvn.w	r3, #5
 8008cda:	617b      	str	r3, [r7, #20]
 8008cdc:	e02c      	b.n	8008d38 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d103      	bne.n	8008cec <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008ce4:	f06f 0303 	mvn.w	r3, #3
 8008ce8:	617b      	str	r3, [r7, #20]
 8008cea:	e025      	b.n	8008d38 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d011      	beq.n	8008d16 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6938      	ldr	r0, [r7, #16]
 8008cf6:	f000 fb59 	bl	80093ac <xQueueTakeMutexRecursive>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d01b      	beq.n	8008d38 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d003      	beq.n	8008d0e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008d06:	f06f 0301 	mvn.w	r3, #1
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	e014      	b.n	8008d38 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008d0e:	f06f 0302 	mvn.w	r3, #2
 8008d12:	617b      	str	r3, [r7, #20]
 8008d14:	e010      	b.n	8008d38 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6938      	ldr	r0, [r7, #16]
 8008d1a:	f000 fdf7 	bl	800990c <xQueueSemaphoreTake>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d009      	beq.n	8008d38 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008d2a:	f06f 0301 	mvn.w	r3, #1
 8008d2e:	617b      	str	r3, [r7, #20]
 8008d30:	e002      	b.n	8008d38 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008d32:	f06f 0302 	mvn.w	r3, #2
 8008d36:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008d38:	697b      	ldr	r3, [r7, #20]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b086      	sub	sp, #24
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f023 0301 	bic.w	r3, r3, #1
 8008d50:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d5e:	f3ef 8305 	mrs	r3, IPSR
 8008d62:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d64:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008d6a:	f06f 0305 	mvn.w	r3, #5
 8008d6e:	617b      	str	r3, [r7, #20]
 8008d70:	e01f      	b.n	8008db2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d103      	bne.n	8008d80 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008d78:	f06f 0303 	mvn.w	r3, #3
 8008d7c:	617b      	str	r3, [r7, #20]
 8008d7e:	e018      	b.n	8008db2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d009      	beq.n	8008d9a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008d86:	6938      	ldr	r0, [r7, #16]
 8008d88:	f000 fadc 	bl	8009344 <xQueueGiveMutexRecursive>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d00f      	beq.n	8008db2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008d92:	f06f 0302 	mvn.w	r3, #2
 8008d96:	617b      	str	r3, [r7, #20]
 8008d98:	e00b      	b.n	8008db2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	2100      	movs	r1, #0
 8008da0:	6938      	ldr	r0, [r7, #16]
 8008da2:	f000 fb39 	bl	8009418 <xQueueGenericSend>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d002      	beq.n	8008db2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008dac:	f06f 0302 	mvn.w	r3, #2
 8008db0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008db2:	697b      	ldr	r3, [r7, #20]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3718      	adds	r7, #24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	4a07      	ldr	r2, [pc, #28]	; (8008de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	4a06      	ldr	r2, [pc, #24]	; (8008dec <vApplicationGetIdleTaskMemory+0x30>)
 8008dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2280      	movs	r2, #128	; 0x80
 8008dd8:	601a      	str	r2, [r3, #0]
}
 8008dda:	bf00      	nop
 8008ddc:	3714      	adds	r7, #20
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	200043d4 	.word	0x200043d4
 8008dec:	20004430 	.word	0x20004430

08008df0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4a07      	ldr	r2, [pc, #28]	; (8008e1c <vApplicationGetTimerTaskMemory+0x2c>)
 8008e00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	4a06      	ldr	r2, [pc, #24]	; (8008e20 <vApplicationGetTimerTaskMemory+0x30>)
 8008e06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e0e:	601a      	str	r2, [r3, #0]
}
 8008e10:	bf00      	nop
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	20004630 	.word	0x20004630
 8008e20:	2000468c 	.word	0x2000468c

08008e24 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10a      	bne.n	8008e48 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008e44:	bf00      	nop
 8008e46:	e7fe      	b.n	8008e46 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008e48:	2320      	movs	r3, #32
 8008e4a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	2b20      	cmp	r3, #32
 8008e50:	d00a      	beq.n	8008e68 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	60fb      	str	r3, [r7, #12]
}
 8008e64:	bf00      	nop
 8008e66:	e7fe      	b.n	8008e66 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00a      	beq.n	8008e88 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	2200      	movs	r2, #0
 8008e76:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 f822 	bl	8008ec6 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	2201      	movs	r2, #1
 8008e86:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8008e88:	697b      	ldr	r3, [r7, #20]
	}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008e98:	2020      	movs	r0, #32
 8008e9a:	f002 fd75 	bl	800b988 <pvPortMalloc>
 8008e9e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00a      	beq.n	8008ebc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	3304      	adds	r3, #4
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 f808 	bl	8008ec6 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8008ebc:	687b      	ldr	r3, [r7, #4]
	}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b083      	sub	sp, #12
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f103 0208 	add.w	r2, r3, #8
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f04f 32ff 	mov.w	r2, #4294967295
 8008ede:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f103 0208 	add.w	r2, r3, #8
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f103 0208 	add.w	r2, r3, #8
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008efa:	bf00      	nop
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	689a      	ldr	r2, [r3, #8]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	601a      	str	r2, [r3, #0]
}
 8008f5c:	bf00      	nop
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f7e:	d103      	bne.n	8008f88 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	60fb      	str	r3, [r7, #12]
 8008f86:	e00c      	b.n	8008fa2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	60fb      	str	r3, [r7, #12]
 8008f8e:	e002      	b.n	8008f96 <vListInsert+0x2e>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d2f6      	bcs.n	8008f90 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	683a      	ldr	r2, [r7, #0]
 8008fbc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	1c5a      	adds	r2, r3, #1
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	601a      	str	r2, [r3, #0]
}
 8008fce:	bf00      	nop
 8008fd0:	3714      	adds	r7, #20
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b085      	sub	sp, #20
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	6892      	ldr	r2, [r2, #8]
 8008ff0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	6852      	ldr	r2, [r2, #4]
 8008ffa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	429a      	cmp	r2, r3
 8009004:	d103      	bne.n	800900e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	689a      	ldr	r2, [r3, #8]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	1e5a      	subs	r2, r3, #1
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
	...

08009030 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10a      	bne.n	800905a <xQueueGenericReset+0x2a>
	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	60bb      	str	r3, [r7, #8]
}
 8009056:	bf00      	nop
 8009058:	e7fe      	b.n	8009058 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800905a:	f002 fb73 	bl	800b744 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009066:	68f9      	ldr	r1, [r7, #12]
 8009068:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800906a:	fb01 f303 	mul.w	r3, r1, r3
 800906e:	441a      	add	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800908a:	3b01      	subs	r3, #1
 800908c:	68f9      	ldr	r1, [r7, #12]
 800908e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009090:	fb01 f303 	mul.w	r3, r1, r3
 8009094:	441a      	add	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	22ff      	movs	r2, #255	; 0xff
 800909e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	22ff      	movs	r2, #255	; 0xff
 80090a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d114      	bne.n	80090da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01a      	beq.n	80090ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3310      	adds	r3, #16
 80090bc:	4618      	mov	r0, r3
 80090be:	f001 fb17 	bl	800a6f0 <xTaskRemoveFromEventList>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d012      	beq.n	80090ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090c8:	4b0c      	ldr	r3, [pc, #48]	; (80090fc <xQueueGenericReset+0xcc>)
 80090ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	e009      	b.n	80090ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3310      	adds	r3, #16
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff fef1 	bl	8008ec6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3324      	adds	r3, #36	; 0x24
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff feec 	bl	8008ec6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090ee:	f002 fb59 	bl	800b7a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090f2:	2301      	movs	r3, #1
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	e000ed04 	.word	0xe000ed04

08009100 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08e      	sub	sp, #56	; 0x38
 8009104:	af02      	add	r7, sp, #8
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10a      	bne.n	800912a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009126:	bf00      	nop
 8009128:	e7fe      	b.n	8009128 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10a      	bne.n	8009146 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009142:	bf00      	nop
 8009144:	e7fe      	b.n	8009144 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <xQueueGenericCreateStatic+0x52>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <xQueueGenericCreateStatic+0x56>
 8009152:	2301      	movs	r3, #1
 8009154:	e000      	b.n	8009158 <xQueueGenericCreateStatic+0x58>
 8009156:	2300      	movs	r3, #0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10a      	bne.n	8009172 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	623b      	str	r3, [r7, #32]
}
 800916e:	bf00      	nop
 8009170:	e7fe      	b.n	8009170 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d102      	bne.n	800917e <xQueueGenericCreateStatic+0x7e>
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <xQueueGenericCreateStatic+0x82>
 800917e:	2301      	movs	r3, #1
 8009180:	e000      	b.n	8009184 <xQueueGenericCreateStatic+0x84>
 8009182:	2300      	movs	r3, #0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	61fb      	str	r3, [r7, #28]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800919e:	2350      	movs	r3, #80	; 0x50
 80091a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	2b50      	cmp	r3, #80	; 0x50
 80091a6:	d00a      	beq.n	80091be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	61bb      	str	r3, [r7, #24]
}
 80091ba:	bf00      	nop
 80091bc:	e7fe      	b.n	80091bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80091c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00d      	beq.n	80091e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80091d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	4613      	mov	r3, r2
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	68b9      	ldr	r1, [r7, #8]
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f000 f83f 	bl	8009264 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3730      	adds	r7, #48	; 0x30
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b08a      	sub	sp, #40	; 0x28
 80091f4:	af02      	add	r7, sp, #8
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	4613      	mov	r3, r2
 80091fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10a      	bne.n	800921a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	613b      	str	r3, [r7, #16]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	fb02 f303 	mul.w	r3, r2, r3
 8009222:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	3350      	adds	r3, #80	; 0x50
 8009228:	4618      	mov	r0, r3
 800922a:	f002 fbad 	bl	800b988 <pvPortMalloc>
 800922e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d011      	beq.n	800925a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	3350      	adds	r3, #80	; 0x50
 800923e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009248:	79fa      	ldrb	r2, [r7, #7]
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	4613      	mov	r3, r2
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	68b9      	ldr	r1, [r7, #8]
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f000 f805 	bl	8009264 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800925a:	69bb      	ldr	r3, [r7, #24]
	}
 800925c:	4618      	mov	r0, r3
 800925e:	3720      	adds	r7, #32
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
 8009270:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d103      	bne.n	8009280 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	e002      	b.n	8009286 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009292:	2101      	movs	r1, #1
 8009294:	69b8      	ldr	r0, [r7, #24]
 8009296:	f7ff fecb 	bl	8009030 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	78fa      	ldrb	r2, [r7, #3]
 800929e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80092a2:	bf00      	nop
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b082      	sub	sp, #8
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00e      	beq.n	80092d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80092ca:	2300      	movs	r3, #0
 80092cc:	2200      	movs	r2, #0
 80092ce:	2100      	movs	r1, #0
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f8a1 	bl	8009418 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80092d6:	bf00      	nop
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b086      	sub	sp, #24
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	4603      	mov	r3, r0
 80092e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80092e8:	2301      	movs	r3, #1
 80092ea:	617b      	str	r3, [r7, #20]
 80092ec:	2300      	movs	r3, #0
 80092ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	461a      	mov	r2, r3
 80092f4:	6939      	ldr	r1, [r7, #16]
 80092f6:	6978      	ldr	r0, [r7, #20]
 80092f8:	f7ff ff7a 	bl	80091f0 <xQueueGenericCreate>
 80092fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f7ff ffd3 	bl	80092aa <prvInitialiseMutex>

		return xNewQueue;
 8009304:	68fb      	ldr	r3, [r7, #12]
	}
 8009306:	4618      	mov	r0, r3
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800930e:	b580      	push	{r7, lr}
 8009310:	b088      	sub	sp, #32
 8009312:	af02      	add	r7, sp, #8
 8009314:	4603      	mov	r3, r0
 8009316:	6039      	str	r1, [r7, #0]
 8009318:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800931a:	2301      	movs	r3, #1
 800931c:	617b      	str	r3, [r7, #20]
 800931e:	2300      	movs	r3, #0
 8009320:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009322:	79fb      	ldrb	r3, [r7, #7]
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2200      	movs	r2, #0
 800932a:	6939      	ldr	r1, [r7, #16]
 800932c:	6978      	ldr	r0, [r7, #20]
 800932e:	f7ff fee7 	bl	8009100 <xQueueGenericCreateStatic>
 8009332:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f7ff ffb8 	bl	80092aa <prvInitialiseMutex>

		return xNewQueue;
 800933a:	68fb      	ldr	r3, [r7, #12]
	}
 800933c:	4618      	mov	r0, r3
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009344:	b590      	push	{r4, r7, lr}
 8009346:	b087      	sub	sp, #28
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10a      	bne.n	800936c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	60fb      	str	r3, [r7, #12]
}
 8009368:	bf00      	nop
 800936a:	e7fe      	b.n	800936a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	689c      	ldr	r4, [r3, #8]
 8009370:	f001 fb7c 	bl	800aa6c <xTaskGetCurrentTaskHandle>
 8009374:	4603      	mov	r3, r0
 8009376:	429c      	cmp	r4, r3
 8009378:	d111      	bne.n	800939e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	1e5a      	subs	r2, r3, #1
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d105      	bne.n	8009398 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800938c:	2300      	movs	r3, #0
 800938e:	2200      	movs	r2, #0
 8009390:	2100      	movs	r1, #0
 8009392:	6938      	ldr	r0, [r7, #16]
 8009394:	f000 f840 	bl	8009418 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009398:	2301      	movs	r3, #1
 800939a:	617b      	str	r3, [r7, #20]
 800939c:	e001      	b.n	80093a2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800939e:	2300      	movs	r3, #0
 80093a0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80093a2:	697b      	ldr	r3, [r7, #20]
	}
 80093a4:	4618      	mov	r0, r3
 80093a6:	371c      	adds	r7, #28
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd90      	pop	{r4, r7, pc}

080093ac <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80093ac:	b590      	push	{r4, r7, lr}
 80093ae:	b087      	sub	sp, #28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10a      	bne.n	80093d6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	60fb      	str	r3, [r7, #12]
}
 80093d2:	bf00      	nop
 80093d4:	e7fe      	b.n	80093d4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	689c      	ldr	r4, [r3, #8]
 80093da:	f001 fb47 	bl	800aa6c <xTaskGetCurrentTaskHandle>
 80093de:	4603      	mov	r3, r0
 80093e0:	429c      	cmp	r4, r3
 80093e2:	d107      	bne.n	80093f4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	1c5a      	adds	r2, r3, #1
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80093ee:	2301      	movs	r3, #1
 80093f0:	617b      	str	r3, [r7, #20]
 80093f2:	e00c      	b.n	800940e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6938      	ldr	r0, [r7, #16]
 80093f8:	f000 fa88 	bl	800990c <xQueueSemaphoreTake>
 80093fc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d004      	beq.n	800940e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	1c5a      	adds	r2, r3, #1
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800940e:	697b      	ldr	r3, [r7, #20]
	}
 8009410:	4618      	mov	r0, r3
 8009412:	371c      	adds	r7, #28
 8009414:	46bd      	mov	sp, r7
 8009416:	bd90      	pop	{r4, r7, pc}

08009418 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b08e      	sub	sp, #56	; 0x38
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009426:	2300      	movs	r3, #0
 8009428:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10a      	bne.n	800944a <xQueueGenericSend+0x32>
	__asm volatile
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009446:	bf00      	nop
 8009448:	e7fe      	b.n	8009448 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d103      	bne.n	8009458 <xQueueGenericSend+0x40>
 8009450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009454:	2b00      	cmp	r3, #0
 8009456:	d101      	bne.n	800945c <xQueueGenericSend+0x44>
 8009458:	2301      	movs	r3, #1
 800945a:	e000      	b.n	800945e <xQueueGenericSend+0x46>
 800945c:	2300      	movs	r3, #0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10a      	bne.n	8009478 <xQueueGenericSend+0x60>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009474:	bf00      	nop
 8009476:	e7fe      	b.n	8009476 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	2b02      	cmp	r3, #2
 800947c:	d103      	bne.n	8009486 <xQueueGenericSend+0x6e>
 800947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009482:	2b01      	cmp	r3, #1
 8009484:	d101      	bne.n	800948a <xQueueGenericSend+0x72>
 8009486:	2301      	movs	r3, #1
 8009488:	e000      	b.n	800948c <xQueueGenericSend+0x74>
 800948a:	2300      	movs	r3, #0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	623b      	str	r3, [r7, #32]
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094a6:	f001 faf1 	bl	800aa8c <xTaskGetSchedulerState>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d102      	bne.n	80094b6 <xQueueGenericSend+0x9e>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <xQueueGenericSend+0xa2>
 80094b6:	2301      	movs	r3, #1
 80094b8:	e000      	b.n	80094bc <xQueueGenericSend+0xa4>
 80094ba:	2300      	movs	r3, #0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10a      	bne.n	80094d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	61fb      	str	r3, [r7, #28]
}
 80094d2:	bf00      	nop
 80094d4:	e7fe      	b.n	80094d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094d6:	f002 f935 	bl	800b744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d302      	bcc.n	80094ec <xQueueGenericSend+0xd4>
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d129      	bne.n	8009540 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	68b9      	ldr	r1, [r7, #8]
 80094f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094f2:	f000 fb2f 	bl	8009b54 <prvCopyDataToQueue>
 80094f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d010      	beq.n	8009522 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009502:	3324      	adds	r3, #36	; 0x24
 8009504:	4618      	mov	r0, r3
 8009506:	f001 f8f3 	bl	800a6f0 <xTaskRemoveFromEventList>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d013      	beq.n	8009538 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009510:	4b3f      	ldr	r3, [pc, #252]	; (8009610 <xQueueGenericSend+0x1f8>)
 8009512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	e00a      	b.n	8009538 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009524:	2b00      	cmp	r3, #0
 8009526:	d007      	beq.n	8009538 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009528:	4b39      	ldr	r3, [pc, #228]	; (8009610 <xQueueGenericSend+0x1f8>)
 800952a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800952e:	601a      	str	r2, [r3, #0]
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009538:	f002 f934 	bl	800b7a4 <vPortExitCritical>
				return pdPASS;
 800953c:	2301      	movs	r3, #1
 800953e:	e063      	b.n	8009608 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d103      	bne.n	800954e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009546:	f002 f92d 	bl	800b7a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800954a:	2300      	movs	r3, #0
 800954c:	e05c      	b.n	8009608 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800954e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009550:	2b00      	cmp	r3, #0
 8009552:	d106      	bne.n	8009562 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009554:	f107 0314 	add.w	r3, r7, #20
 8009558:	4618      	mov	r0, r3
 800955a:	f001 f92d 	bl	800a7b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800955e:	2301      	movs	r3, #1
 8009560:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009562:	f002 f91f 	bl	800b7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009566:	f000 fe9f 	bl	800a2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800956a:	f002 f8eb 	bl	800b744 <vPortEnterCritical>
 800956e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009570:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009574:	b25b      	sxtb	r3, r3
 8009576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957a:	d103      	bne.n	8009584 <xQueueGenericSend+0x16c>
 800957c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957e:	2200      	movs	r2, #0
 8009580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009586:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800958a:	b25b      	sxtb	r3, r3
 800958c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009590:	d103      	bne.n	800959a <xQueueGenericSend+0x182>
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800959a:	f002 f903 	bl	800b7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800959e:	1d3a      	adds	r2, r7, #4
 80095a0:	f107 0314 	add.w	r3, r7, #20
 80095a4:	4611      	mov	r1, r2
 80095a6:	4618      	mov	r0, r3
 80095a8:	f001 f91c 	bl	800a7e4 <xTaskCheckForTimeOut>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d124      	bne.n	80095fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80095b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095b4:	f000 fbc6 	bl	8009d44 <prvIsQueueFull>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d018      	beq.n	80095f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80095be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c0:	3310      	adds	r3, #16
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	4611      	mov	r1, r2
 80095c6:	4618      	mov	r0, r3
 80095c8:	f001 f842 	bl	800a650 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80095cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ce:	f000 fb51 	bl	8009c74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80095d2:	f000 fe77 	bl	800a2c4 <xTaskResumeAll>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f47f af7c 	bne.w	80094d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80095de:	4b0c      	ldr	r3, [pc, #48]	; (8009610 <xQueueGenericSend+0x1f8>)
 80095e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	e772      	b.n	80094d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80095f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095f2:	f000 fb3f 	bl	8009c74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095f6:	f000 fe65 	bl	800a2c4 <xTaskResumeAll>
 80095fa:	e76c      	b.n	80094d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80095fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095fe:	f000 fb39 	bl	8009c74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009602:	f000 fe5f 	bl	800a2c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009606:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009608:	4618      	mov	r0, r3
 800960a:	3738      	adds	r7, #56	; 0x38
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	e000ed04 	.word	0xe000ed04

08009614 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b090      	sub	sp, #64	; 0x40
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	607a      	str	r2, [r7, #4]
 8009620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10a      	bne.n	8009642 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800963e:	bf00      	nop
 8009640:	e7fe      	b.n	8009640 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d103      	bne.n	8009650 <xQueueGenericSendFromISR+0x3c>
 8009648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964c:	2b00      	cmp	r3, #0
 800964e:	d101      	bne.n	8009654 <xQueueGenericSendFromISR+0x40>
 8009650:	2301      	movs	r3, #1
 8009652:	e000      	b.n	8009656 <xQueueGenericSendFromISR+0x42>
 8009654:	2300      	movs	r3, #0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10a      	bne.n	8009670 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800965a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965e:	f383 8811 	msr	BASEPRI, r3
 8009662:	f3bf 8f6f 	isb	sy
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800966c:	bf00      	nop
 800966e:	e7fe      	b.n	800966e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	2b02      	cmp	r3, #2
 8009674:	d103      	bne.n	800967e <xQueueGenericSendFromISR+0x6a>
 8009676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800967a:	2b01      	cmp	r3, #1
 800967c:	d101      	bne.n	8009682 <xQueueGenericSendFromISR+0x6e>
 800967e:	2301      	movs	r3, #1
 8009680:	e000      	b.n	8009684 <xQueueGenericSendFromISR+0x70>
 8009682:	2300      	movs	r3, #0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	623b      	str	r3, [r7, #32]
}
 800969a:	bf00      	nop
 800969c:	e7fe      	b.n	800969c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800969e:	f002 f933 	bl	800b908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096a2:	f3ef 8211 	mrs	r2, BASEPRI
 80096a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	61fa      	str	r2, [r7, #28]
 80096b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80096ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d302      	bcc.n	80096d0 <xQueueGenericSendFromISR+0xbc>
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d12f      	bne.n	8009730 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096e0:	683a      	ldr	r2, [r7, #0]
 80096e2:	68b9      	ldr	r1, [r7, #8]
 80096e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096e6:	f000 fa35 	bl	8009b54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80096ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80096ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f2:	d112      	bne.n	800971a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d016      	beq.n	800972a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fe:	3324      	adds	r3, #36	; 0x24
 8009700:	4618      	mov	r0, r3
 8009702:	f000 fff5 	bl	800a6f0 <xTaskRemoveFromEventList>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00e      	beq.n	800972a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00b      	beq.n	800972a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2201      	movs	r2, #1
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	e007      	b.n	800972a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800971a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800971e:	3301      	adds	r3, #1
 8009720:	b2db      	uxtb	r3, r3
 8009722:	b25a      	sxtb	r2, r3
 8009724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800972a:	2301      	movs	r3, #1
 800972c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800972e:	e001      	b.n	8009734 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009730:	2300      	movs	r3, #0
 8009732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009736:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800973e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009742:	4618      	mov	r0, r3
 8009744:	3740      	adds	r7, #64	; 0x40
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
	...

0800974c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b08c      	sub	sp, #48	; 0x30
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009758:	2300      	movs	r3, #0
 800975a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10a      	bne.n	800977c <xQueueReceive+0x30>
	__asm volatile
 8009766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976a:	f383 8811 	msr	BASEPRI, r3
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	623b      	str	r3, [r7, #32]
}
 8009778:	bf00      	nop
 800977a:	e7fe      	b.n	800977a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d103      	bne.n	800978a <xQueueReceive+0x3e>
 8009782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <xQueueReceive+0x42>
 800978a:	2301      	movs	r3, #1
 800978c:	e000      	b.n	8009790 <xQueueReceive+0x44>
 800978e:	2300      	movs	r3, #0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d10a      	bne.n	80097aa <xQueueReceive+0x5e>
	__asm volatile
 8009794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009798:	f383 8811 	msr	BASEPRI, r3
 800979c:	f3bf 8f6f 	isb	sy
 80097a0:	f3bf 8f4f 	dsb	sy
 80097a4:	61fb      	str	r3, [r7, #28]
}
 80097a6:	bf00      	nop
 80097a8:	e7fe      	b.n	80097a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097aa:	f001 f96f 	bl	800aa8c <xTaskGetSchedulerState>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d102      	bne.n	80097ba <xQueueReceive+0x6e>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <xQueueReceive+0x72>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e000      	b.n	80097c0 <xQueueReceive+0x74>
 80097be:	2300      	movs	r3, #0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10a      	bne.n	80097da <xQueueReceive+0x8e>
	__asm volatile
 80097c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	61bb      	str	r3, [r7, #24]
}
 80097d6:	bf00      	nop
 80097d8:	e7fe      	b.n	80097d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097da:	f001 ffb3 	bl	800b744 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d01f      	beq.n	800982a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097ea:	68b9      	ldr	r1, [r7, #8]
 80097ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ee:	f000 fa1b 	bl	8009c28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f4:	1e5a      	subs	r2, r3, #1
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00f      	beq.n	8009822 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009804:	3310      	adds	r3, #16
 8009806:	4618      	mov	r0, r3
 8009808:	f000 ff72 	bl	800a6f0 <xTaskRemoveFromEventList>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d007      	beq.n	8009822 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009812:	4b3d      	ldr	r3, [pc, #244]	; (8009908 <xQueueReceive+0x1bc>)
 8009814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009822:	f001 ffbf 	bl	800b7a4 <vPortExitCritical>
				return pdPASS;
 8009826:	2301      	movs	r3, #1
 8009828:	e069      	b.n	80098fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d103      	bne.n	8009838 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009830:	f001 ffb8 	bl	800b7a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009834:	2300      	movs	r3, #0
 8009836:	e062      	b.n	80098fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983a:	2b00      	cmp	r3, #0
 800983c:	d106      	bne.n	800984c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800983e:	f107 0310 	add.w	r3, r7, #16
 8009842:	4618      	mov	r0, r3
 8009844:	f000 ffb8 	bl	800a7b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009848:	2301      	movs	r3, #1
 800984a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800984c:	f001 ffaa 	bl	800b7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009850:	f000 fd2a 	bl	800a2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009854:	f001 ff76 	bl	800b744 <vPortEnterCritical>
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800985e:	b25b      	sxtb	r3, r3
 8009860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009864:	d103      	bne.n	800986e <xQueueReceive+0x122>
 8009866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009868:	2200      	movs	r2, #0
 800986a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800986e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009874:	b25b      	sxtb	r3, r3
 8009876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987a:	d103      	bne.n	8009884 <xQueueReceive+0x138>
 800987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009884:	f001 ff8e 	bl	800b7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009888:	1d3a      	adds	r2, r7, #4
 800988a:	f107 0310 	add.w	r3, r7, #16
 800988e:	4611      	mov	r1, r2
 8009890:	4618      	mov	r0, r3
 8009892:	f000 ffa7 	bl	800a7e4 <xTaskCheckForTimeOut>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d123      	bne.n	80098e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800989c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800989e:	f000 fa3b 	bl	8009d18 <prvIsQueueEmpty>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d017      	beq.n	80098d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098aa:	3324      	adds	r3, #36	; 0x24
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	4611      	mov	r1, r2
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 fecd 	bl	800a650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098b8:	f000 f9dc 	bl	8009c74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098bc:	f000 fd02 	bl	800a2c4 <xTaskResumeAll>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d189      	bne.n	80097da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80098c6:	4b10      	ldr	r3, [pc, #64]	; (8009908 <xQueueReceive+0x1bc>)
 80098c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098cc:	601a      	str	r2, [r3, #0]
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	e780      	b.n	80097da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80098d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098da:	f000 f9cb 	bl	8009c74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098de:	f000 fcf1 	bl	800a2c4 <xTaskResumeAll>
 80098e2:	e77a      	b.n	80097da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80098e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098e6:	f000 f9c5 	bl	8009c74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098ea:	f000 fceb 	bl	800a2c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098f0:	f000 fa12 	bl	8009d18 <prvIsQueueEmpty>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f43f af6f 	beq.w	80097da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80098fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3730      	adds	r7, #48	; 0x30
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	e000ed04 	.word	0xe000ed04

0800990c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08e      	sub	sp, #56	; 0x38
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009916:	2300      	movs	r3, #0
 8009918:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800991e:	2300      	movs	r3, #0
 8009920:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10a      	bne.n	800993e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	623b      	str	r3, [r7, #32]
}
 800993a:	bf00      	nop
 800993c:	e7fe      	b.n	800993c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800993e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00a      	beq.n	800995c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	61fb      	str	r3, [r7, #28]
}
 8009958:	bf00      	nop
 800995a:	e7fe      	b.n	800995a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800995c:	f001 f896 	bl	800aa8c <xTaskGetSchedulerState>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d102      	bne.n	800996c <xQueueSemaphoreTake+0x60>
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <xQueueSemaphoreTake+0x64>
 800996c:	2301      	movs	r3, #1
 800996e:	e000      	b.n	8009972 <xQueueSemaphoreTake+0x66>
 8009970:	2300      	movs	r3, #0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10a      	bne.n	800998c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	61bb      	str	r3, [r7, #24]
}
 8009988:	bf00      	nop
 800998a:	e7fe      	b.n	800998a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800998c:	f001 feda 	bl	800b744 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009994:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009998:	2b00      	cmp	r3, #0
 800999a:	d024      	beq.n	80099e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800999c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999e:	1e5a      	subs	r2, r3, #1
 80099a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d104      	bne.n	80099b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80099ac:	f001 f9e4 	bl	800ad78 <pvTaskIncrementMutexHeldCount>
 80099b0:	4602      	mov	r2, r0
 80099b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00f      	beq.n	80099de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c0:	3310      	adds	r3, #16
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 fe94 	bl	800a6f0 <xTaskRemoveFromEventList>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d007      	beq.n	80099de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80099ce:	4b54      	ldr	r3, [pc, #336]	; (8009b20 <xQueueSemaphoreTake+0x214>)
 80099d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80099de:	f001 fee1 	bl	800b7a4 <vPortExitCritical>
				return pdPASS;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e097      	b.n	8009b16 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d111      	bne.n	8009a10 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00a      	beq.n	8009a08 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	617b      	str	r3, [r7, #20]
}
 8009a04:	bf00      	nop
 8009a06:	e7fe      	b.n	8009a06 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009a08:	f001 fecc 	bl	800b7a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	e082      	b.n	8009b16 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d106      	bne.n	8009a24 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a16:	f107 030c 	add.w	r3, r7, #12
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 fecc 	bl	800a7b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a20:	2301      	movs	r3, #1
 8009a22:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a24:	f001 febe 	bl	800b7a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a28:	f000 fc3e 	bl	800a2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a2c:	f001 fe8a 	bl	800b744 <vPortEnterCritical>
 8009a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a36:	b25b      	sxtb	r3, r3
 8009a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3c:	d103      	bne.n	8009a46 <xQueueSemaphoreTake+0x13a>
 8009a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a4c:	b25b      	sxtb	r3, r3
 8009a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a52:	d103      	bne.n	8009a5c <xQueueSemaphoreTake+0x150>
 8009a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a5c:	f001 fea2 	bl	800b7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a60:	463a      	mov	r2, r7
 8009a62:	f107 030c 	add.w	r3, r7, #12
 8009a66:	4611      	mov	r1, r2
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f000 febb 	bl	800a7e4 <xTaskCheckForTimeOut>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d132      	bne.n	8009ada <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a76:	f000 f94f 	bl	8009d18 <prvIsQueueEmpty>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d026      	beq.n	8009ace <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d109      	bne.n	8009a9c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009a88:	f001 fe5c 	bl	800b744 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f001 f819 	bl	800aac8 <xTaskPriorityInherit>
 8009a96:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009a98:	f001 fe84 	bl	800b7a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9e:	3324      	adds	r3, #36	; 0x24
 8009aa0:	683a      	ldr	r2, [r7, #0]
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 fdd3 	bl	800a650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009aaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009aac:	f000 f8e2 	bl	8009c74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ab0:	f000 fc08 	bl	800a2c4 <xTaskResumeAll>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f47f af68 	bne.w	800998c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009abc:	4b18      	ldr	r3, [pc, #96]	; (8009b20 <xQueueSemaphoreTake+0x214>)
 8009abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	e75e      	b.n	800998c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009ace:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ad0:	f000 f8d0 	bl	8009c74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ad4:	f000 fbf6 	bl	800a2c4 <xTaskResumeAll>
 8009ad8:	e758      	b.n	800998c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009ada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009adc:	f000 f8ca 	bl	8009c74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ae0:	f000 fbf0 	bl	800a2c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ae6:	f000 f917 	bl	8009d18 <prvIsQueueEmpty>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f43f af4d 	beq.w	800998c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00d      	beq.n	8009b14 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009af8:	f001 fe24 	bl	800b744 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009afc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009afe:	f000 f811 	bl	8009b24 <prvGetDisinheritPriorityAfterTimeout>
 8009b02:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f001 f8b2 	bl	800ac74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009b10:	f001 fe48 	bl	800b7a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3738      	adds	r7, #56	; 0x38
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	e000ed04 	.word	0xe000ed04

08009b24 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009b24:	b480      	push	{r7}
 8009b26:	b085      	sub	sp, #20
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d006      	beq.n	8009b42 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009b3e:	60fb      	str	r3, [r7, #12]
 8009b40:	e001      	b.n	8009b46 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009b42:	2300      	movs	r3, #0
 8009b44:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009b46:	68fb      	ldr	r3, [r7, #12]
	}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3714      	adds	r7, #20
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009b60:	2300      	movs	r3, #0
 8009b62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10d      	bne.n	8009b8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d14d      	bne.n	8009c16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f001 f80a 	bl	800ab98 <xTaskPriorityDisinherit>
 8009b84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	609a      	str	r2, [r3, #8]
 8009b8c:	e043      	b.n	8009c16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d119      	bne.n	8009bc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6858      	ldr	r0, [r3, #4]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	68b9      	ldr	r1, [r7, #8]
 8009ba0:	f002 f906 	bl	800bdb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	685a      	ldr	r2, [r3, #4]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bac:	441a      	add	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d32b      	bcc.n	8009c16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	605a      	str	r2, [r3, #4]
 8009bc6:	e026      	b.n	8009c16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	68d8      	ldr	r0, [r3, #12]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	68b9      	ldr	r1, [r7, #8]
 8009bd4:	f002 f8ec 	bl	800bdb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	68da      	ldr	r2, [r3, #12]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be0:	425b      	negs	r3, r3
 8009be2:	441a      	add	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	68da      	ldr	r2, [r3, #12]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d207      	bcs.n	8009c04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	689a      	ldr	r2, [r3, #8]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfc:	425b      	negs	r3, r3
 8009bfe:	441a      	add	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d105      	bne.n	8009c16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	1c5a      	adds	r2, r3, #1
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009c1e:	697b      	ldr	r3, [r7, #20]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3718      	adds	r7, #24
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d018      	beq.n	8009c6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68da      	ldr	r2, [r3, #12]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	441a      	add	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	68da      	ldr	r2, [r3, #12]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d303      	bcc.n	8009c5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	68d9      	ldr	r1, [r3, #12]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c64:	461a      	mov	r2, r3
 8009c66:	6838      	ldr	r0, [r7, #0]
 8009c68:	f002 f8a2 	bl	800bdb0 <memcpy>
	}
}
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009c7c:	f001 fd62 	bl	800b744 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c88:	e011      	b.n	8009cae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d012      	beq.n	8009cb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	3324      	adds	r3, #36	; 0x24
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 fd2a 	bl	800a6f0 <xTaskRemoveFromEventList>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ca2:	f000 fe01 	bl	800a8a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	dce9      	bgt.n	8009c8a <prvUnlockQueue+0x16>
 8009cb6:	e000      	b.n	8009cba <prvUnlockQueue+0x46>
					break;
 8009cb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	22ff      	movs	r2, #255	; 0xff
 8009cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009cc2:	f001 fd6f 	bl	800b7a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009cc6:	f001 fd3d 	bl	800b744 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009cd2:	e011      	b.n	8009cf8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d012      	beq.n	8009d02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	3310      	adds	r3, #16
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 fd05 	bl	800a6f0 <xTaskRemoveFromEventList>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009cec:	f000 fddc 	bl	800a8a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009cf0:	7bbb      	ldrb	r3, [r7, #14]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009cf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	dce9      	bgt.n	8009cd4 <prvUnlockQueue+0x60>
 8009d00:	e000      	b.n	8009d04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	22ff      	movs	r2, #255	; 0xff
 8009d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009d0c:	f001 fd4a 	bl	800b7a4 <vPortExitCritical>
}
 8009d10:	bf00      	nop
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d20:	f001 fd10 	bl	800b744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d102      	bne.n	8009d32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	60fb      	str	r3, [r7, #12]
 8009d30:	e001      	b.n	8009d36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009d32:	2300      	movs	r3, #0
 8009d34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d36:	f001 fd35 	bl	800b7a4 <vPortExitCritical>

	return xReturn;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d4c:	f001 fcfa 	bl	800b744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d102      	bne.n	8009d62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	e001      	b.n	8009d66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009d62:	2300      	movs	r3, #0
 8009d64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d66:	f001 fd1d 	bl	800b7a4 <vPortExitCritical>

	return xReturn;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d7e:	2300      	movs	r3, #0
 8009d80:	60fb      	str	r3, [r7, #12]
 8009d82:	e014      	b.n	8009dae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009d84:	4a0f      	ldr	r2, [pc, #60]	; (8009dc4 <vQueueAddToRegistry+0x50>)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10b      	bne.n	8009da8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009d90:	490c      	ldr	r1, [pc, #48]	; (8009dc4 <vQueueAddToRegistry+0x50>)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009d9a:	4a0a      	ldr	r2, [pc, #40]	; (8009dc4 <vQueueAddToRegistry+0x50>)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	00db      	lsls	r3, r3, #3
 8009da0:	4413      	add	r3, r2
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009da6:	e006      	b.n	8009db6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	3301      	adds	r3, #1
 8009dac:	60fb      	str	r3, [r7, #12]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2b07      	cmp	r3, #7
 8009db2:	d9e7      	bls.n	8009d84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop
 8009db8:	3714      	adds	r7, #20
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	20004a8c 	.word	0x20004a8c

08009dc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009dd8:	f001 fcb4 	bl	800b744 <vPortEnterCritical>
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009de2:	b25b      	sxtb	r3, r3
 8009de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de8:	d103      	bne.n	8009df2 <vQueueWaitForMessageRestricted+0x2a>
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009df8:	b25b      	sxtb	r3, r3
 8009dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dfe:	d103      	bne.n	8009e08 <vQueueWaitForMessageRestricted+0x40>
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e08:	f001 fccc 	bl	800b7a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d106      	bne.n	8009e22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	3324      	adds	r3, #36	; 0x24
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	68b9      	ldr	r1, [r7, #8]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 fc3b 	bl	800a698 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009e22:	6978      	ldr	r0, [r7, #20]
 8009e24:	f7ff ff26 	bl	8009c74 <prvUnlockQueue>
	}
 8009e28:	bf00      	nop
 8009e2a:	3718      	adds	r7, #24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b08e      	sub	sp, #56	; 0x38
 8009e34:	af04      	add	r7, sp, #16
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
 8009e3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10a      	bne.n	8009e5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	623b      	str	r3, [r7, #32]
}
 8009e56:	bf00      	nop
 8009e58:	e7fe      	b.n	8009e58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10a      	bne.n	8009e76 <xTaskCreateStatic+0x46>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	61fb      	str	r3, [r7, #28]
}
 8009e72:	bf00      	nop
 8009e74:	e7fe      	b.n	8009e74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e76:	235c      	movs	r3, #92	; 0x5c
 8009e78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	2b5c      	cmp	r3, #92	; 0x5c
 8009e7e:	d00a      	beq.n	8009e96 <xTaskCreateStatic+0x66>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	61bb      	str	r3, [r7, #24]
}
 8009e92:	bf00      	nop
 8009e94:	e7fe      	b.n	8009e94 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d01e      	beq.n	8009edc <xTaskCreateStatic+0xac>
 8009e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d01b      	beq.n	8009edc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009eac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	2202      	movs	r2, #2
 8009eb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	9303      	str	r3, [sp, #12]
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	9302      	str	r3, [sp, #8]
 8009ebe:	f107 0314 	add.w	r3, r7, #20
 8009ec2:	9301      	str	r3, [sp, #4]
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	68b9      	ldr	r1, [r7, #8]
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f000 f850 	bl	8009f74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ed6:	f000 f8dd 	bl	800a094 <prvAddNewTaskToReadyList>
 8009eda:	e001      	b.n	8009ee0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009edc:	2300      	movs	r3, #0
 8009ede:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ee0:	697b      	ldr	r3, [r7, #20]
	}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3728      	adds	r7, #40	; 0x28
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b08c      	sub	sp, #48	; 0x30
 8009eee:	af04      	add	r7, sp, #16
 8009ef0:	60f8      	str	r0, [r7, #12]
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	603b      	str	r3, [r7, #0]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009efa:	88fb      	ldrh	r3, [r7, #6]
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4618      	mov	r0, r3
 8009f00:	f001 fd42 	bl	800b988 <pvPortMalloc>
 8009f04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00e      	beq.n	8009f2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f0c:	205c      	movs	r0, #92	; 0x5c
 8009f0e:	f001 fd3b 	bl	800b988 <pvPortMalloc>
 8009f12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d003      	beq.n	8009f22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	697a      	ldr	r2, [r7, #20]
 8009f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8009f20:	e005      	b.n	8009f2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f22:	6978      	ldr	r0, [r7, #20]
 8009f24:	f001 fdfc 	bl	800bb20 <vPortFree>
 8009f28:	e001      	b.n	8009f2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d017      	beq.n	8009f64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f3c:	88fa      	ldrh	r2, [r7, #6]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	9303      	str	r3, [sp, #12]
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	9302      	str	r3, [sp, #8]
 8009f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f48:	9301      	str	r3, [sp, #4]
 8009f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	68b9      	ldr	r1, [r7, #8]
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f000 f80e 	bl	8009f74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f58:	69f8      	ldr	r0, [r7, #28]
 8009f5a:	f000 f89b 	bl	800a094 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	61bb      	str	r3, [r7, #24]
 8009f62:	e002      	b.n	8009f6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f64:	f04f 33ff 	mov.w	r3, #4294967295
 8009f68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009f6a:	69bb      	ldr	r3, [r7, #24]
	}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3720      	adds	r7, #32
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b088      	sub	sp, #32
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	21a5      	movs	r1, #165	; 0xa5
 8009f8e:	f001 ff1d 	bl	800bdcc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	f023 0307 	bic.w	r3, r3, #7
 8009faa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	f003 0307 	and.w	r3, r3, #7
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00a      	beq.n	8009fcc <prvInitialiseNewTask+0x58>
	__asm volatile
 8009fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	617b      	str	r3, [r7, #20]
}
 8009fc8:	bf00      	nop
 8009fca:	e7fe      	b.n	8009fca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d01f      	beq.n	800a012 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	61fb      	str	r3, [r7, #28]
 8009fd6:	e012      	b.n	8009ffe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	4413      	add	r3, r2
 8009fde:	7819      	ldrb	r1, [r3, #0]
 8009fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	3334      	adds	r3, #52	; 0x34
 8009fe8:	460a      	mov	r2, r1
 8009fea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d006      	beq.n	800a006 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	61fb      	str	r3, [r7, #28]
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	2b0f      	cmp	r3, #15
 800a002:	d9e9      	bls.n	8009fd8 <prvInitialiseNewTask+0x64>
 800a004:	e000      	b.n	800a008 <prvInitialiseNewTask+0x94>
			{
				break;
 800a006:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00a:	2200      	movs	r2, #0
 800a00c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a010:	e003      	b.n	800a01a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a014:	2200      	movs	r2, #0
 800a016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01c:	2b37      	cmp	r3, #55	; 0x37
 800a01e:	d901      	bls.n	800a024 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a020:	2337      	movs	r3, #55	; 0x37
 800a022:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a028:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a02e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a032:	2200      	movs	r2, #0
 800a034:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a038:	3304      	adds	r3, #4
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe ff63 	bl	8008f06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a042:	3318      	adds	r3, #24
 800a044:	4618      	mov	r0, r3
 800a046:	f7fe ff5e 	bl	8008f06 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a04e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a052:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a05e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a062:	2200      	movs	r2, #0
 800a064:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	68f9      	ldr	r1, [r7, #12]
 800a072:	69b8      	ldr	r0, [r7, #24]
 800a074:	f001 fa36 	bl	800b4e4 <pxPortInitialiseStack>
 800a078:	4602      	mov	r2, r0
 800a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a088:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a08a:	bf00      	nop
 800a08c:	3720      	adds	r7, #32
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
	...

0800a094 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a09c:	f001 fb52 	bl	800b744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a0a0:	4b2d      	ldr	r3, [pc, #180]	; (800a158 <prvAddNewTaskToReadyList+0xc4>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	4a2c      	ldr	r2, [pc, #176]	; (800a158 <prvAddNewTaskToReadyList+0xc4>)
 800a0a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a0aa:	4b2c      	ldr	r3, [pc, #176]	; (800a15c <prvAddNewTaskToReadyList+0xc8>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d109      	bne.n	800a0c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a0b2:	4a2a      	ldr	r2, [pc, #168]	; (800a15c <prvAddNewTaskToReadyList+0xc8>)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a0b8:	4b27      	ldr	r3, [pc, #156]	; (800a158 <prvAddNewTaskToReadyList+0xc4>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d110      	bne.n	800a0e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a0c0:	f000 fc16 	bl	800a8f0 <prvInitialiseTaskLists>
 800a0c4:	e00d      	b.n	800a0e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a0c6:	4b26      	ldr	r3, [pc, #152]	; (800a160 <prvAddNewTaskToReadyList+0xcc>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d109      	bne.n	800a0e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a0ce:	4b23      	ldr	r3, [pc, #140]	; (800a15c <prvAddNewTaskToReadyList+0xc8>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d802      	bhi.n	800a0e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a0dc:	4a1f      	ldr	r2, [pc, #124]	; (800a15c <prvAddNewTaskToReadyList+0xc8>)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a0e2:	4b20      	ldr	r3, [pc, #128]	; (800a164 <prvAddNewTaskToReadyList+0xd0>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	4a1e      	ldr	r2, [pc, #120]	; (800a164 <prvAddNewTaskToReadyList+0xd0>)
 800a0ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a0ec:	4b1d      	ldr	r3, [pc, #116]	; (800a164 <prvAddNewTaskToReadyList+0xd0>)
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f8:	4b1b      	ldr	r3, [pc, #108]	; (800a168 <prvAddNewTaskToReadyList+0xd4>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d903      	bls.n	800a108 <prvAddNewTaskToReadyList+0x74>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a104:	4a18      	ldr	r2, [pc, #96]	; (800a168 <prvAddNewTaskToReadyList+0xd4>)
 800a106:	6013      	str	r3, [r2, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a10c:	4613      	mov	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4a15      	ldr	r2, [pc, #84]	; (800a16c <prvAddNewTaskToReadyList+0xd8>)
 800a116:	441a      	add	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	3304      	adds	r3, #4
 800a11c:	4619      	mov	r1, r3
 800a11e:	4610      	mov	r0, r2
 800a120:	f7fe fefe 	bl	8008f20 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a124:	f001 fb3e 	bl	800b7a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a128:	4b0d      	ldr	r3, [pc, #52]	; (800a160 <prvAddNewTaskToReadyList+0xcc>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00e      	beq.n	800a14e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a130:	4b0a      	ldr	r3, [pc, #40]	; (800a15c <prvAddNewTaskToReadyList+0xc8>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d207      	bcs.n	800a14e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a13e:	4b0c      	ldr	r3, [pc, #48]	; (800a170 <prvAddNewTaskToReadyList+0xdc>)
 800a140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a144:	601a      	str	r2, [r3, #0]
 800a146:	f3bf 8f4f 	dsb	sy
 800a14a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a14e:	bf00      	nop
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20004fa0 	.word	0x20004fa0
 800a15c:	20004acc 	.word	0x20004acc
 800a160:	20004fac 	.word	0x20004fac
 800a164:	20004fbc 	.word	0x20004fbc
 800a168:	20004fa8 	.word	0x20004fa8
 800a16c:	20004ad0 	.word	0x20004ad0
 800a170:	e000ed04 	.word	0xe000ed04

0800a174 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a17c:	2300      	movs	r3, #0
 800a17e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d017      	beq.n	800a1b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a186:	4b13      	ldr	r3, [pc, #76]	; (800a1d4 <vTaskDelay+0x60>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00a      	beq.n	800a1a4 <vTaskDelay+0x30>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	60bb      	str	r3, [r7, #8]
}
 800a1a0:	bf00      	nop
 800a1a2:	e7fe      	b.n	800a1a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a1a4:	f000 f880 	bl	800a2a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fdf8 	bl	800ada0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1b0:	f000 f888 	bl	800a2c4 <xTaskResumeAll>
 800a1b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d107      	bne.n	800a1cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a1bc:	4b06      	ldr	r3, [pc, #24]	; (800a1d8 <vTaskDelay+0x64>)
 800a1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1cc:	bf00      	nop
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	20004fc8 	.word	0x20004fc8
 800a1d8:	e000ed04 	.word	0xe000ed04

0800a1dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b08a      	sub	sp, #40	; 0x28
 800a1e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a1ea:	463a      	mov	r2, r7
 800a1ec:	1d39      	adds	r1, r7, #4
 800a1ee:	f107 0308 	add.w	r3, r7, #8
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe fde2 	bl	8008dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a1f8:	6839      	ldr	r1, [r7, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	9202      	str	r2, [sp, #8]
 800a200:	9301      	str	r3, [sp, #4]
 800a202:	2300      	movs	r3, #0
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	2300      	movs	r3, #0
 800a208:	460a      	mov	r2, r1
 800a20a:	4921      	ldr	r1, [pc, #132]	; (800a290 <vTaskStartScheduler+0xb4>)
 800a20c:	4821      	ldr	r0, [pc, #132]	; (800a294 <vTaskStartScheduler+0xb8>)
 800a20e:	f7ff fe0f 	bl	8009e30 <xTaskCreateStatic>
 800a212:	4603      	mov	r3, r0
 800a214:	4a20      	ldr	r2, [pc, #128]	; (800a298 <vTaskStartScheduler+0xbc>)
 800a216:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a218:	4b1f      	ldr	r3, [pc, #124]	; (800a298 <vTaskStartScheduler+0xbc>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a220:	2301      	movs	r3, #1
 800a222:	617b      	str	r3, [r7, #20]
 800a224:	e001      	b.n	800a22a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a226:	2300      	movs	r3, #0
 800a228:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d102      	bne.n	800a236 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a230:	f000 fe0a 	bl	800ae48 <xTimerCreateTimerTask>
 800a234:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d116      	bne.n	800a26a <vTaskStartScheduler+0x8e>
	__asm volatile
 800a23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	613b      	str	r3, [r7, #16]
}
 800a24e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a250:	4b12      	ldr	r3, [pc, #72]	; (800a29c <vTaskStartScheduler+0xc0>)
 800a252:	f04f 32ff 	mov.w	r2, #4294967295
 800a256:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a258:	4b11      	ldr	r3, [pc, #68]	; (800a2a0 <vTaskStartScheduler+0xc4>)
 800a25a:	2201      	movs	r2, #1
 800a25c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a25e:	4b11      	ldr	r3, [pc, #68]	; (800a2a4 <vTaskStartScheduler+0xc8>)
 800a260:	2200      	movs	r2, #0
 800a262:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a264:	f001 f9cc 	bl	800b600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a268:	e00e      	b.n	800a288 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a270:	d10a      	bne.n	800a288 <vTaskStartScheduler+0xac>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	60fb      	str	r3, [r7, #12]
}
 800a284:	bf00      	nop
 800a286:	e7fe      	b.n	800a286 <vTaskStartScheduler+0xaa>
}
 800a288:	bf00      	nop
 800a28a:	3718      	adds	r7, #24
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	0800c72c 	.word	0x0800c72c
 800a294:	0800a8c1 	.word	0x0800a8c1
 800a298:	20004fc4 	.word	0x20004fc4
 800a29c:	20004fc0 	.word	0x20004fc0
 800a2a0:	20004fac 	.word	0x20004fac
 800a2a4:	20004fa4 	.word	0x20004fa4

0800a2a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2ac:	4b04      	ldr	r3, [pc, #16]	; (800a2c0 <vTaskSuspendAll+0x18>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	4a03      	ldr	r2, [pc, #12]	; (800a2c0 <vTaskSuspendAll+0x18>)
 800a2b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a2b6:	bf00      	nop
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	20004fc8 	.word	0x20004fc8

0800a2c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2d2:	4b42      	ldr	r3, [pc, #264]	; (800a3dc <xTaskResumeAll+0x118>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10a      	bne.n	800a2f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800a2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2de:	f383 8811 	msr	BASEPRI, r3
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	603b      	str	r3, [r7, #0]
}
 800a2ec:	bf00      	nop
 800a2ee:	e7fe      	b.n	800a2ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a2f0:	f001 fa28 	bl	800b744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a2f4:	4b39      	ldr	r3, [pc, #228]	; (800a3dc <xTaskResumeAll+0x118>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	4a38      	ldr	r2, [pc, #224]	; (800a3dc <xTaskResumeAll+0x118>)
 800a2fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2fe:	4b37      	ldr	r3, [pc, #220]	; (800a3dc <xTaskResumeAll+0x118>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d162      	bne.n	800a3cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a306:	4b36      	ldr	r3, [pc, #216]	; (800a3e0 <xTaskResumeAll+0x11c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d05e      	beq.n	800a3cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a30e:	e02f      	b.n	800a370 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a310:	4b34      	ldr	r3, [pc, #208]	; (800a3e4 <xTaskResumeAll+0x120>)
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	3318      	adds	r3, #24
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fe fe5c 	bl	8008fda <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3304      	adds	r3, #4
 800a326:	4618      	mov	r0, r3
 800a328:	f7fe fe57 	bl	8008fda <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a330:	4b2d      	ldr	r3, [pc, #180]	; (800a3e8 <xTaskResumeAll+0x124>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	429a      	cmp	r2, r3
 800a336:	d903      	bls.n	800a340 <xTaskResumeAll+0x7c>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33c:	4a2a      	ldr	r2, [pc, #168]	; (800a3e8 <xTaskResumeAll+0x124>)
 800a33e:	6013      	str	r3, [r2, #0]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a344:	4613      	mov	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4413      	add	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4a27      	ldr	r2, [pc, #156]	; (800a3ec <xTaskResumeAll+0x128>)
 800a34e:	441a      	add	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	3304      	adds	r3, #4
 800a354:	4619      	mov	r1, r3
 800a356:	4610      	mov	r0, r2
 800a358:	f7fe fde2 	bl	8008f20 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a360:	4b23      	ldr	r3, [pc, #140]	; (800a3f0 <xTaskResumeAll+0x12c>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a366:	429a      	cmp	r2, r3
 800a368:	d302      	bcc.n	800a370 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a36a:	4b22      	ldr	r3, [pc, #136]	; (800a3f4 <xTaskResumeAll+0x130>)
 800a36c:	2201      	movs	r2, #1
 800a36e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a370:	4b1c      	ldr	r3, [pc, #112]	; (800a3e4 <xTaskResumeAll+0x120>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d1cb      	bne.n	800a310 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a37e:	f000 fb55 	bl	800aa2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a382:	4b1d      	ldr	r3, [pc, #116]	; (800a3f8 <xTaskResumeAll+0x134>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d010      	beq.n	800a3b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a38e:	f000 f847 	bl	800a420 <xTaskIncrementTick>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a398:	4b16      	ldr	r3, [pc, #88]	; (800a3f4 <xTaskResumeAll+0x130>)
 800a39a:	2201      	movs	r2, #1
 800a39c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1f1      	bne.n	800a38e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a3aa:	4b13      	ldr	r3, [pc, #76]	; (800a3f8 <xTaskResumeAll+0x134>)
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3b0:	4b10      	ldr	r3, [pc, #64]	; (800a3f4 <xTaskResumeAll+0x130>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d009      	beq.n	800a3cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3bc:	4b0f      	ldr	r3, [pc, #60]	; (800a3fc <xTaskResumeAll+0x138>)
 800a3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3cc:	f001 f9ea 	bl	800b7a4 <vPortExitCritical>

	return xAlreadyYielded;
 800a3d0:	68bb      	ldr	r3, [r7, #8]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	20004fc8 	.word	0x20004fc8
 800a3e0:	20004fa0 	.word	0x20004fa0
 800a3e4:	20004f60 	.word	0x20004f60
 800a3e8:	20004fa8 	.word	0x20004fa8
 800a3ec:	20004ad0 	.word	0x20004ad0
 800a3f0:	20004acc 	.word	0x20004acc
 800a3f4:	20004fb4 	.word	0x20004fb4
 800a3f8:	20004fb0 	.word	0x20004fb0
 800a3fc:	e000ed04 	.word	0xe000ed04

0800a400 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a406:	4b05      	ldr	r3, [pc, #20]	; (800a41c <xTaskGetTickCount+0x1c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a40c:	687b      	ldr	r3, [r7, #4]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	370c      	adds	r7, #12
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	20004fa4 	.word	0x20004fa4

0800a420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a426:	2300      	movs	r3, #0
 800a428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a42a:	4b4f      	ldr	r3, [pc, #316]	; (800a568 <xTaskIncrementTick+0x148>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f040 808f 	bne.w	800a552 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a434:	4b4d      	ldr	r3, [pc, #308]	; (800a56c <xTaskIncrementTick+0x14c>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	3301      	adds	r3, #1
 800a43a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a43c:	4a4b      	ldr	r2, [pc, #300]	; (800a56c <xTaskIncrementTick+0x14c>)
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d120      	bne.n	800a48a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a448:	4b49      	ldr	r3, [pc, #292]	; (800a570 <xTaskIncrementTick+0x150>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00a      	beq.n	800a468 <xTaskIncrementTick+0x48>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	603b      	str	r3, [r7, #0]
}
 800a464:	bf00      	nop
 800a466:	e7fe      	b.n	800a466 <xTaskIncrementTick+0x46>
 800a468:	4b41      	ldr	r3, [pc, #260]	; (800a570 <xTaskIncrementTick+0x150>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	60fb      	str	r3, [r7, #12]
 800a46e:	4b41      	ldr	r3, [pc, #260]	; (800a574 <xTaskIncrementTick+0x154>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a3f      	ldr	r2, [pc, #252]	; (800a570 <xTaskIncrementTick+0x150>)
 800a474:	6013      	str	r3, [r2, #0]
 800a476:	4a3f      	ldr	r2, [pc, #252]	; (800a574 <xTaskIncrementTick+0x154>)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	4b3e      	ldr	r3, [pc, #248]	; (800a578 <xTaskIncrementTick+0x158>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	3301      	adds	r3, #1
 800a482:	4a3d      	ldr	r2, [pc, #244]	; (800a578 <xTaskIncrementTick+0x158>)
 800a484:	6013      	str	r3, [r2, #0]
 800a486:	f000 fad1 	bl	800aa2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a48a:	4b3c      	ldr	r3, [pc, #240]	; (800a57c <xTaskIncrementTick+0x15c>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	429a      	cmp	r2, r3
 800a492:	d349      	bcc.n	800a528 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a494:	4b36      	ldr	r3, [pc, #216]	; (800a570 <xTaskIncrementTick+0x150>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d104      	bne.n	800a4a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a49e:	4b37      	ldr	r3, [pc, #220]	; (800a57c <xTaskIncrementTick+0x15c>)
 800a4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a4:	601a      	str	r2, [r3, #0]
					break;
 800a4a6:	e03f      	b.n	800a528 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4a8:	4b31      	ldr	r3, [pc, #196]	; (800a570 <xTaskIncrementTick+0x150>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d203      	bcs.n	800a4c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4c0:	4a2e      	ldr	r2, [pc, #184]	; (800a57c <xTaskIncrementTick+0x15c>)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4c6:	e02f      	b.n	800a528 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7fe fd84 	bl	8008fda <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d004      	beq.n	800a4e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	3318      	adds	r3, #24
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fe fd7b 	bl	8008fda <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e8:	4b25      	ldr	r3, [pc, #148]	; (800a580 <xTaskIncrementTick+0x160>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d903      	bls.n	800a4f8 <xTaskIncrementTick+0xd8>
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f4:	4a22      	ldr	r2, [pc, #136]	; (800a580 <xTaskIncrementTick+0x160>)
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4413      	add	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4a1f      	ldr	r2, [pc, #124]	; (800a584 <xTaskIncrementTick+0x164>)
 800a506:	441a      	add	r2, r3
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	3304      	adds	r3, #4
 800a50c:	4619      	mov	r1, r3
 800a50e:	4610      	mov	r0, r2
 800a510:	f7fe fd06 	bl	8008f20 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a518:	4b1b      	ldr	r3, [pc, #108]	; (800a588 <xTaskIncrementTick+0x168>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51e:	429a      	cmp	r2, r3
 800a520:	d3b8      	bcc.n	800a494 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a522:	2301      	movs	r3, #1
 800a524:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a526:	e7b5      	b.n	800a494 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a528:	4b17      	ldr	r3, [pc, #92]	; (800a588 <xTaskIncrementTick+0x168>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52e:	4915      	ldr	r1, [pc, #84]	; (800a584 <xTaskIncrementTick+0x164>)
 800a530:	4613      	mov	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4413      	add	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	440b      	add	r3, r1
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d901      	bls.n	800a544 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a540:	2301      	movs	r3, #1
 800a542:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a544:	4b11      	ldr	r3, [pc, #68]	; (800a58c <xTaskIncrementTick+0x16c>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d007      	beq.n	800a55c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a54c:	2301      	movs	r3, #1
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	e004      	b.n	800a55c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a552:	4b0f      	ldr	r3, [pc, #60]	; (800a590 <xTaskIncrementTick+0x170>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3301      	adds	r3, #1
 800a558:	4a0d      	ldr	r2, [pc, #52]	; (800a590 <xTaskIncrementTick+0x170>)
 800a55a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a55c:	697b      	ldr	r3, [r7, #20]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3718      	adds	r7, #24
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	20004fc8 	.word	0x20004fc8
 800a56c:	20004fa4 	.word	0x20004fa4
 800a570:	20004f58 	.word	0x20004f58
 800a574:	20004f5c 	.word	0x20004f5c
 800a578:	20004fb8 	.word	0x20004fb8
 800a57c:	20004fc0 	.word	0x20004fc0
 800a580:	20004fa8 	.word	0x20004fa8
 800a584:	20004ad0 	.word	0x20004ad0
 800a588:	20004acc 	.word	0x20004acc
 800a58c:	20004fb4 	.word	0x20004fb4
 800a590:	20004fb0 	.word	0x20004fb0

0800a594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a59a:	4b28      	ldr	r3, [pc, #160]	; (800a63c <vTaskSwitchContext+0xa8>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d003      	beq.n	800a5aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5a2:	4b27      	ldr	r3, [pc, #156]	; (800a640 <vTaskSwitchContext+0xac>)
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5a8:	e041      	b.n	800a62e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a5aa:	4b25      	ldr	r3, [pc, #148]	; (800a640 <vTaskSwitchContext+0xac>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b0:	4b24      	ldr	r3, [pc, #144]	; (800a644 <vTaskSwitchContext+0xb0>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	60fb      	str	r3, [r7, #12]
 800a5b6:	e010      	b.n	800a5da <vTaskSwitchContext+0x46>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10a      	bne.n	800a5d4 <vTaskSwitchContext+0x40>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	607b      	str	r3, [r7, #4]
}
 800a5d0:	bf00      	nop
 800a5d2:	e7fe      	b.n	800a5d2 <vTaskSwitchContext+0x3e>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	60fb      	str	r3, [r7, #12]
 800a5da:	491b      	ldr	r1, [pc, #108]	; (800a648 <vTaskSwitchContext+0xb4>)
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	4413      	add	r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	440b      	add	r3, r1
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d0e4      	beq.n	800a5b8 <vTaskSwitchContext+0x24>
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4a13      	ldr	r2, [pc, #76]	; (800a648 <vTaskSwitchContext+0xb4>)
 800a5fa:	4413      	add	r3, r2
 800a5fc:	60bb      	str	r3, [r7, #8]
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	685a      	ldr	r2, [r3, #4]
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	605a      	str	r2, [r3, #4]
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	3308      	adds	r3, #8
 800a610:	429a      	cmp	r2, r3
 800a612:	d104      	bne.n	800a61e <vTaskSwitchContext+0x8a>
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	605a      	str	r2, [r3, #4]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	4a09      	ldr	r2, [pc, #36]	; (800a64c <vTaskSwitchContext+0xb8>)
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	4a06      	ldr	r2, [pc, #24]	; (800a644 <vTaskSwitchContext+0xb0>)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6013      	str	r3, [r2, #0]
}
 800a62e:	bf00      	nop
 800a630:	3714      	adds	r7, #20
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	20004fc8 	.word	0x20004fc8
 800a640:	20004fb4 	.word	0x20004fb4
 800a644:	20004fa8 	.word	0x20004fa8
 800a648:	20004ad0 	.word	0x20004ad0
 800a64c:	20004acc 	.word	0x20004acc

0800a650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10a      	bne.n	800a676 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	60fb      	str	r3, [r7, #12]
}
 800a672:	bf00      	nop
 800a674:	e7fe      	b.n	800a674 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a676:	4b07      	ldr	r3, [pc, #28]	; (800a694 <vTaskPlaceOnEventList+0x44>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	3318      	adds	r3, #24
 800a67c:	4619      	mov	r1, r3
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f7fe fc72 	bl	8008f68 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a684:	2101      	movs	r1, #1
 800a686:	6838      	ldr	r0, [r7, #0]
 800a688:	f000 fb8a 	bl	800ada0 <prvAddCurrentTaskToDelayedList>
}
 800a68c:	bf00      	nop
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	20004acc 	.word	0x20004acc

0800a698 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10a      	bne.n	800a6c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	617b      	str	r3, [r7, #20]
}
 800a6bc:	bf00      	nop
 800a6be:	e7fe      	b.n	800a6be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6c0:	4b0a      	ldr	r3, [pc, #40]	; (800a6ec <vTaskPlaceOnEventListRestricted+0x54>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	3318      	adds	r3, #24
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f7fe fc29 	bl	8008f20 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a6da:	6879      	ldr	r1, [r7, #4]
 800a6dc:	68b8      	ldr	r0, [r7, #8]
 800a6de:	f000 fb5f 	bl	800ada0 <prvAddCurrentTaskToDelayedList>
	}
 800a6e2:	bf00      	nop
 800a6e4:	3718      	adds	r7, #24
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	20004acc 	.word	0x20004acc

0800a6f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10a      	bne.n	800a71c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	60fb      	str	r3, [r7, #12]
}
 800a718:	bf00      	nop
 800a71a:	e7fe      	b.n	800a71a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	3318      	adds	r3, #24
 800a720:	4618      	mov	r0, r3
 800a722:	f7fe fc5a 	bl	8008fda <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a726:	4b1e      	ldr	r3, [pc, #120]	; (800a7a0 <xTaskRemoveFromEventList+0xb0>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d11d      	bne.n	800a76a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	3304      	adds	r3, #4
 800a732:	4618      	mov	r0, r3
 800a734:	f7fe fc51 	bl	8008fda <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73c:	4b19      	ldr	r3, [pc, #100]	; (800a7a4 <xTaskRemoveFromEventList+0xb4>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	429a      	cmp	r2, r3
 800a742:	d903      	bls.n	800a74c <xTaskRemoveFromEventList+0x5c>
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a748:	4a16      	ldr	r2, [pc, #88]	; (800a7a4 <xTaskRemoveFromEventList+0xb4>)
 800a74a:	6013      	str	r3, [r2, #0]
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a750:	4613      	mov	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4a13      	ldr	r2, [pc, #76]	; (800a7a8 <xTaskRemoveFromEventList+0xb8>)
 800a75a:	441a      	add	r2, r3
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	3304      	adds	r3, #4
 800a760:	4619      	mov	r1, r3
 800a762:	4610      	mov	r0, r2
 800a764:	f7fe fbdc 	bl	8008f20 <vListInsertEnd>
 800a768:	e005      	b.n	800a776 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	3318      	adds	r3, #24
 800a76e:	4619      	mov	r1, r3
 800a770:	480e      	ldr	r0, [pc, #56]	; (800a7ac <xTaskRemoveFromEventList+0xbc>)
 800a772:	f7fe fbd5 	bl	8008f20 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a77a:	4b0d      	ldr	r3, [pc, #52]	; (800a7b0 <xTaskRemoveFromEventList+0xc0>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a780:	429a      	cmp	r2, r3
 800a782:	d905      	bls.n	800a790 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a784:	2301      	movs	r3, #1
 800a786:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a788:	4b0a      	ldr	r3, [pc, #40]	; (800a7b4 <xTaskRemoveFromEventList+0xc4>)
 800a78a:	2201      	movs	r2, #1
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	e001      	b.n	800a794 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a790:	2300      	movs	r3, #0
 800a792:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a794:	697b      	ldr	r3, [r7, #20]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3718      	adds	r7, #24
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	20004fc8 	.word	0x20004fc8
 800a7a4:	20004fa8 	.word	0x20004fa8
 800a7a8:	20004ad0 	.word	0x20004ad0
 800a7ac:	20004f60 	.word	0x20004f60
 800a7b0:	20004acc 	.word	0x20004acc
 800a7b4:	20004fb4 	.word	0x20004fb4

0800a7b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7c0:	4b06      	ldr	r3, [pc, #24]	; (800a7dc <vTaskInternalSetTimeOutState+0x24>)
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7c8:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <vTaskInternalSetTimeOutState+0x28>)
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	605a      	str	r2, [r3, #4]
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	20004fb8 	.word	0x20004fb8
 800a7e0:	20004fa4 	.word	0x20004fa4

0800a7e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b088      	sub	sp, #32
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d10a      	bne.n	800a80a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f8:	f383 8811 	msr	BASEPRI, r3
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	613b      	str	r3, [r7, #16]
}
 800a806:	bf00      	nop
 800a808:	e7fe      	b.n	800a808 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d10a      	bne.n	800a826 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	60fb      	str	r3, [r7, #12]
}
 800a822:	bf00      	nop
 800a824:	e7fe      	b.n	800a824 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a826:	f000 ff8d 	bl	800b744 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a82a:	4b1d      	ldr	r3, [pc, #116]	; (800a8a0 <xTaskCheckForTimeOut+0xbc>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	69ba      	ldr	r2, [r7, #24]
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a842:	d102      	bne.n	800a84a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a844:	2300      	movs	r3, #0
 800a846:	61fb      	str	r3, [r7, #28]
 800a848:	e023      	b.n	800a892 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	4b15      	ldr	r3, [pc, #84]	; (800a8a4 <xTaskCheckForTimeOut+0xc0>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	429a      	cmp	r2, r3
 800a854:	d007      	beq.n	800a866 <xTaskCheckForTimeOut+0x82>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	69ba      	ldr	r2, [r7, #24]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d302      	bcc.n	800a866 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a860:	2301      	movs	r3, #1
 800a862:	61fb      	str	r3, [r7, #28]
 800a864:	e015      	b.n	800a892 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d20b      	bcs.n	800a888 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	1ad2      	subs	r2, r2, r3
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f7ff ff9b 	bl	800a7b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a882:	2300      	movs	r3, #0
 800a884:	61fb      	str	r3, [r7, #28]
 800a886:	e004      	b.n	800a892 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2200      	movs	r2, #0
 800a88c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a88e:	2301      	movs	r3, #1
 800a890:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a892:	f000 ff87 	bl	800b7a4 <vPortExitCritical>

	return xReturn;
 800a896:	69fb      	ldr	r3, [r7, #28]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3720      	adds	r7, #32
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	20004fa4 	.word	0x20004fa4
 800a8a4:	20004fb8 	.word	0x20004fb8

0800a8a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8ac:	4b03      	ldr	r3, [pc, #12]	; (800a8bc <vTaskMissedYield+0x14>)
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	601a      	str	r2, [r3, #0]
}
 800a8b2:	bf00      	nop
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	20004fb4 	.word	0x20004fb4

0800a8c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8c8:	f000 f852 	bl	800a970 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8cc:	4b06      	ldr	r3, [pc, #24]	; (800a8e8 <prvIdleTask+0x28>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d9f9      	bls.n	800a8c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8d4:	4b05      	ldr	r3, [pc, #20]	; (800a8ec <prvIdleTask+0x2c>)
 800a8d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8da:	601a      	str	r2, [r3, #0]
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a8e4:	e7f0      	b.n	800a8c8 <prvIdleTask+0x8>
 800a8e6:	bf00      	nop
 800a8e8:	20004ad0 	.word	0x20004ad0
 800a8ec:	e000ed04 	.word	0xe000ed04

0800a8f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	607b      	str	r3, [r7, #4]
 800a8fa:	e00c      	b.n	800a916 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	4613      	mov	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	4413      	add	r3, r2
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	4a12      	ldr	r2, [pc, #72]	; (800a950 <prvInitialiseTaskLists+0x60>)
 800a908:	4413      	add	r3, r2
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fe fadb 	bl	8008ec6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	3301      	adds	r3, #1
 800a914:	607b      	str	r3, [r7, #4]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b37      	cmp	r3, #55	; 0x37
 800a91a:	d9ef      	bls.n	800a8fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a91c:	480d      	ldr	r0, [pc, #52]	; (800a954 <prvInitialiseTaskLists+0x64>)
 800a91e:	f7fe fad2 	bl	8008ec6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a922:	480d      	ldr	r0, [pc, #52]	; (800a958 <prvInitialiseTaskLists+0x68>)
 800a924:	f7fe facf 	bl	8008ec6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a928:	480c      	ldr	r0, [pc, #48]	; (800a95c <prvInitialiseTaskLists+0x6c>)
 800a92a:	f7fe facc 	bl	8008ec6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a92e:	480c      	ldr	r0, [pc, #48]	; (800a960 <prvInitialiseTaskLists+0x70>)
 800a930:	f7fe fac9 	bl	8008ec6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a934:	480b      	ldr	r0, [pc, #44]	; (800a964 <prvInitialiseTaskLists+0x74>)
 800a936:	f7fe fac6 	bl	8008ec6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a93a:	4b0b      	ldr	r3, [pc, #44]	; (800a968 <prvInitialiseTaskLists+0x78>)
 800a93c:	4a05      	ldr	r2, [pc, #20]	; (800a954 <prvInitialiseTaskLists+0x64>)
 800a93e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a940:	4b0a      	ldr	r3, [pc, #40]	; (800a96c <prvInitialiseTaskLists+0x7c>)
 800a942:	4a05      	ldr	r2, [pc, #20]	; (800a958 <prvInitialiseTaskLists+0x68>)
 800a944:	601a      	str	r2, [r3, #0]
}
 800a946:	bf00      	nop
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	20004ad0 	.word	0x20004ad0
 800a954:	20004f30 	.word	0x20004f30
 800a958:	20004f44 	.word	0x20004f44
 800a95c:	20004f60 	.word	0x20004f60
 800a960:	20004f74 	.word	0x20004f74
 800a964:	20004f8c 	.word	0x20004f8c
 800a968:	20004f58 	.word	0x20004f58
 800a96c:	20004f5c 	.word	0x20004f5c

0800a970 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a976:	e019      	b.n	800a9ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a978:	f000 fee4 	bl	800b744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a97c:	4b10      	ldr	r3, [pc, #64]	; (800a9c0 <prvCheckTasksWaitingTermination+0x50>)
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	3304      	adds	r3, #4
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fe fb26 	bl	8008fda <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a98e:	4b0d      	ldr	r3, [pc, #52]	; (800a9c4 <prvCheckTasksWaitingTermination+0x54>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	3b01      	subs	r3, #1
 800a994:	4a0b      	ldr	r2, [pc, #44]	; (800a9c4 <prvCheckTasksWaitingTermination+0x54>)
 800a996:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a998:	4b0b      	ldr	r3, [pc, #44]	; (800a9c8 <prvCheckTasksWaitingTermination+0x58>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3b01      	subs	r3, #1
 800a99e:	4a0a      	ldr	r2, [pc, #40]	; (800a9c8 <prvCheckTasksWaitingTermination+0x58>)
 800a9a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9a2:	f000 feff 	bl	800b7a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f810 	bl	800a9cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9ac:	4b06      	ldr	r3, [pc, #24]	; (800a9c8 <prvCheckTasksWaitingTermination+0x58>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d1e1      	bne.n	800a978 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9b4:	bf00      	nop
 800a9b6:	bf00      	nop
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	20004f74 	.word	0x20004f74
 800a9c4:	20004fa0 	.word	0x20004fa0
 800a9c8:	20004f88 	.word	0x20004f88

0800a9cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d108      	bne.n	800a9f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f001 f89c 	bl	800bb20 <vPortFree>
				vPortFree( pxTCB );
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f001 f899 	bl	800bb20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9ee:	e018      	b.n	800aa22 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d103      	bne.n	800aa02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f001 f890 	bl	800bb20 <vPortFree>
	}
 800aa00:	e00f      	b.n	800aa22 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d00a      	beq.n	800aa22 <prvDeleteTCB+0x56>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	60fb      	str	r3, [r7, #12]
}
 800aa1e:	bf00      	nop
 800aa20:	e7fe      	b.n	800aa20 <prvDeleteTCB+0x54>
	}
 800aa22:	bf00      	nop
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
	...

0800aa2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa32:	4b0c      	ldr	r3, [pc, #48]	; (800aa64 <prvResetNextTaskUnblockTime+0x38>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d104      	bne.n	800aa46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa3c:	4b0a      	ldr	r3, [pc, #40]	; (800aa68 <prvResetNextTaskUnblockTime+0x3c>)
 800aa3e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa44:	e008      	b.n	800aa58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa46:	4b07      	ldr	r3, [pc, #28]	; (800aa64 <prvResetNextTaskUnblockTime+0x38>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	4a04      	ldr	r2, [pc, #16]	; (800aa68 <prvResetNextTaskUnblockTime+0x3c>)
 800aa56:	6013      	str	r3, [r2, #0]
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr
 800aa64:	20004f58 	.word	0x20004f58
 800aa68:	20004fc0 	.word	0x20004fc0

0800aa6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800aa72:	4b05      	ldr	r3, [pc, #20]	; (800aa88 <xTaskGetCurrentTaskHandle+0x1c>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	607b      	str	r3, [r7, #4]

		return xReturn;
 800aa78:	687b      	ldr	r3, [r7, #4]
	}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	20004acc 	.word	0x20004acc

0800aa8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa92:	4b0b      	ldr	r3, [pc, #44]	; (800aac0 <xTaskGetSchedulerState+0x34>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d102      	bne.n	800aaa0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	607b      	str	r3, [r7, #4]
 800aa9e:	e008      	b.n	800aab2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaa0:	4b08      	ldr	r3, [pc, #32]	; (800aac4 <xTaskGetSchedulerState+0x38>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d102      	bne.n	800aaae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	607b      	str	r3, [r7, #4]
 800aaac:	e001      	b.n	800aab2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aaae:	2300      	movs	r3, #0
 800aab0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aab2:	687b      	ldr	r3, [r7, #4]
	}
 800aab4:	4618      	mov	r0, r3
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	20004fac 	.word	0x20004fac
 800aac4:	20004fc8 	.word	0x20004fc8

0800aac8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aad4:	2300      	movs	r3, #0
 800aad6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d051      	beq.n	800ab82 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae2:	4b2a      	ldr	r3, [pc, #168]	; (800ab8c <xTaskPriorityInherit+0xc4>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d241      	bcs.n	800ab70 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	699b      	ldr	r3, [r3, #24]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	db06      	blt.n	800ab02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaf4:	4b25      	ldr	r3, [pc, #148]	; (800ab8c <xTaskPriorityInherit+0xc4>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	6959      	ldr	r1, [r3, #20]
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	4413      	add	r3, r2
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	4a1f      	ldr	r2, [pc, #124]	; (800ab90 <xTaskPriorityInherit+0xc8>)
 800ab14:	4413      	add	r3, r2
 800ab16:	4299      	cmp	r1, r3
 800ab18:	d122      	bne.n	800ab60 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe fa5b 	bl	8008fda <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab24:	4b19      	ldr	r3, [pc, #100]	; (800ab8c <xTaskPriorityInherit+0xc4>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab32:	4b18      	ldr	r3, [pc, #96]	; (800ab94 <xTaskPriorityInherit+0xcc>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d903      	bls.n	800ab42 <xTaskPriorityInherit+0x7a>
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3e:	4a15      	ldr	r2, [pc, #84]	; (800ab94 <xTaskPriorityInherit+0xcc>)
 800ab40:	6013      	str	r3, [r2, #0]
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab46:	4613      	mov	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4a10      	ldr	r2, [pc, #64]	; (800ab90 <xTaskPriorityInherit+0xc8>)
 800ab50:	441a      	add	r2, r3
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	3304      	adds	r3, #4
 800ab56:	4619      	mov	r1, r3
 800ab58:	4610      	mov	r0, r2
 800ab5a:	f7fe f9e1 	bl	8008f20 <vListInsertEnd>
 800ab5e:	e004      	b.n	800ab6a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab60:	4b0a      	ldr	r3, [pc, #40]	; (800ab8c <xTaskPriorityInherit+0xc4>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	60fb      	str	r3, [r7, #12]
 800ab6e:	e008      	b.n	800ab82 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab74:	4b05      	ldr	r3, [pc, #20]	; (800ab8c <xTaskPriorityInherit+0xc4>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d201      	bcs.n	800ab82 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab82:	68fb      	ldr	r3, [r7, #12]
	}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	20004acc 	.word	0x20004acc
 800ab90:	20004ad0 	.word	0x20004ad0
 800ab94:	20004fa8 	.word	0x20004fa8

0800ab98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aba4:	2300      	movs	r3, #0
 800aba6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d056      	beq.n	800ac5c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800abae:	4b2e      	ldr	r3, [pc, #184]	; (800ac68 <xTaskPriorityDisinherit+0xd0>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d00a      	beq.n	800abce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	60fb      	str	r3, [r7, #12]
}
 800abca:	bf00      	nop
 800abcc:	e7fe      	b.n	800abcc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d10a      	bne.n	800abec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800abd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abda:	f383 8811 	msr	BASEPRI, r3
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	60bb      	str	r3, [r7, #8]
}
 800abe8:	bf00      	nop
 800abea:	e7fe      	b.n	800abea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abf0:	1e5a      	subs	r2, r3, #1
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d02c      	beq.n	800ac5c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d128      	bne.n	800ac5c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fe f9e3 	bl	8008fda <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac2c:	4b0f      	ldr	r3, [pc, #60]	; (800ac6c <xTaskPriorityDisinherit+0xd4>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d903      	bls.n	800ac3c <xTaskPriorityDisinherit+0xa4>
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac38:	4a0c      	ldr	r2, [pc, #48]	; (800ac6c <xTaskPriorityDisinherit+0xd4>)
 800ac3a:	6013      	str	r3, [r2, #0]
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac40:	4613      	mov	r3, r2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4413      	add	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4a09      	ldr	r2, [pc, #36]	; (800ac70 <xTaskPriorityDisinherit+0xd8>)
 800ac4a:	441a      	add	r2, r3
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	3304      	adds	r3, #4
 800ac50:	4619      	mov	r1, r3
 800ac52:	4610      	mov	r0, r2
 800ac54:	f7fe f964 	bl	8008f20 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac5c:	697b      	ldr	r3, [r7, #20]
	}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3718      	adds	r7, #24
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	20004acc 	.word	0x20004acc
 800ac6c:	20004fa8 	.word	0x20004fa8
 800ac70:	20004ad0 	.word	0x20004ad0

0800ac74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b088      	sub	sp, #32
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ac82:	2301      	movs	r3, #1
 800ac84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d06a      	beq.n	800ad62 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10a      	bne.n	800acaa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ac94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac98:	f383 8811 	msr	BASEPRI, r3
 800ac9c:	f3bf 8f6f 	isb	sy
 800aca0:	f3bf 8f4f 	dsb	sy
 800aca4:	60fb      	str	r3, [r7, #12]
}
 800aca6:	bf00      	nop
 800aca8:	e7fe      	b.n	800aca8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d902      	bls.n	800acba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	61fb      	str	r3, [r7, #28]
 800acb8:	e002      	b.n	800acc0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acbe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc4:	69fa      	ldr	r2, [r7, #28]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d04b      	beq.n	800ad62 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d146      	bne.n	800ad62 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800acd4:	4b25      	ldr	r3, [pc, #148]	; (800ad6c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	69ba      	ldr	r2, [r7, #24]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d10a      	bne.n	800acf4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800acde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	60bb      	str	r3, [r7, #8]
}
 800acf0:	bf00      	nop
 800acf2:	e7fe      	b.n	800acf2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	69fa      	ldr	r2, [r7, #28]
 800acfe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	db04      	blt.n	800ad12 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	6959      	ldr	r1, [r3, #20]
 800ad16:	693a      	ldr	r2, [r7, #16]
 800ad18:	4613      	mov	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4a13      	ldr	r2, [pc, #76]	; (800ad70 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ad22:	4413      	add	r3, r2
 800ad24:	4299      	cmp	r1, r3
 800ad26:	d11c      	bne.n	800ad62 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7fe f954 	bl	8008fda <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad36:	4b0f      	ldr	r3, [pc, #60]	; (800ad74 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d903      	bls.n	800ad46 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad42:	4a0c      	ldr	r2, [pc, #48]	; (800ad74 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ad44:	6013      	str	r3, [r2, #0]
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	4413      	add	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4a07      	ldr	r2, [pc, #28]	; (800ad70 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ad54:	441a      	add	r2, r3
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	3304      	adds	r3, #4
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	4610      	mov	r0, r2
 800ad5e:	f7fe f8df 	bl	8008f20 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad62:	bf00      	nop
 800ad64:	3720      	adds	r7, #32
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20004acc 	.word	0x20004acc
 800ad70:	20004ad0 	.word	0x20004ad0
 800ad74:	20004fa8 	.word	0x20004fa8

0800ad78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ad78:	b480      	push	{r7}
 800ad7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ad7c:	4b07      	ldr	r3, [pc, #28]	; (800ad9c <pvTaskIncrementMutexHeldCount+0x24>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d004      	beq.n	800ad8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ad84:	4b05      	ldr	r3, [pc, #20]	; (800ad9c <pvTaskIncrementMutexHeldCount+0x24>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad8a:	3201      	adds	r2, #1
 800ad8c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ad8e:	4b03      	ldr	r3, [pc, #12]	; (800ad9c <pvTaskIncrementMutexHeldCount+0x24>)
 800ad90:	681b      	ldr	r3, [r3, #0]
	}
 800ad92:	4618      	mov	r0, r3
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr
 800ad9c:	20004acc 	.word	0x20004acc

0800ada0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800adaa:	4b21      	ldr	r3, [pc, #132]	; (800ae30 <prvAddCurrentTaskToDelayedList+0x90>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adb0:	4b20      	ldr	r3, [pc, #128]	; (800ae34 <prvAddCurrentTaskToDelayedList+0x94>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	3304      	adds	r3, #4
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fe f90f 	bl	8008fda <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc2:	d10a      	bne.n	800adda <prvAddCurrentTaskToDelayedList+0x3a>
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d007      	beq.n	800adda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adca:	4b1a      	ldr	r3, [pc, #104]	; (800ae34 <prvAddCurrentTaskToDelayedList+0x94>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	3304      	adds	r3, #4
 800add0:	4619      	mov	r1, r3
 800add2:	4819      	ldr	r0, [pc, #100]	; (800ae38 <prvAddCurrentTaskToDelayedList+0x98>)
 800add4:	f7fe f8a4 	bl	8008f20 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800add8:	e026      	b.n	800ae28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4413      	add	r3, r2
 800ade0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ade2:	4b14      	ldr	r3, [pc, #80]	; (800ae34 <prvAddCurrentTaskToDelayedList+0x94>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d209      	bcs.n	800ae06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adf2:	4b12      	ldr	r3, [pc, #72]	; (800ae3c <prvAddCurrentTaskToDelayedList+0x9c>)
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	4b0f      	ldr	r3, [pc, #60]	; (800ae34 <prvAddCurrentTaskToDelayedList+0x94>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3304      	adds	r3, #4
 800adfc:	4619      	mov	r1, r3
 800adfe:	4610      	mov	r0, r2
 800ae00:	f7fe f8b2 	bl	8008f68 <vListInsert>
}
 800ae04:	e010      	b.n	800ae28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae06:	4b0e      	ldr	r3, [pc, #56]	; (800ae40 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	4b0a      	ldr	r3, [pc, #40]	; (800ae34 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3304      	adds	r3, #4
 800ae10:	4619      	mov	r1, r3
 800ae12:	4610      	mov	r0, r2
 800ae14:	f7fe f8a8 	bl	8008f68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ae18:	4b0a      	ldr	r3, [pc, #40]	; (800ae44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d202      	bcs.n	800ae28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ae22:	4a08      	ldr	r2, [pc, #32]	; (800ae44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	6013      	str	r3, [r2, #0]
}
 800ae28:	bf00      	nop
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	20004fa4 	.word	0x20004fa4
 800ae34:	20004acc 	.word	0x20004acc
 800ae38:	20004f8c 	.word	0x20004f8c
 800ae3c:	20004f5c 	.word	0x20004f5c
 800ae40:	20004f58 	.word	0x20004f58
 800ae44:	20004fc0 	.word	0x20004fc0

0800ae48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b08a      	sub	sp, #40	; 0x28
 800ae4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ae52:	f000 fb07 	bl	800b464 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae56:	4b1c      	ldr	r3, [pc, #112]	; (800aec8 <xTimerCreateTimerTask+0x80>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d021      	beq.n	800aea2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae66:	1d3a      	adds	r2, r7, #4
 800ae68:	f107 0108 	add.w	r1, r7, #8
 800ae6c:	f107 030c 	add.w	r3, r7, #12
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7fd ffbd 	bl	8008df0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae76:	6879      	ldr	r1, [r7, #4]
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	9202      	str	r2, [sp, #8]
 800ae7e:	9301      	str	r3, [sp, #4]
 800ae80:	2302      	movs	r3, #2
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	2300      	movs	r3, #0
 800ae86:	460a      	mov	r2, r1
 800ae88:	4910      	ldr	r1, [pc, #64]	; (800aecc <xTimerCreateTimerTask+0x84>)
 800ae8a:	4811      	ldr	r0, [pc, #68]	; (800aed0 <xTimerCreateTimerTask+0x88>)
 800ae8c:	f7fe ffd0 	bl	8009e30 <xTaskCreateStatic>
 800ae90:	4603      	mov	r3, r0
 800ae92:	4a10      	ldr	r2, [pc, #64]	; (800aed4 <xTimerCreateTimerTask+0x8c>)
 800ae94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae96:	4b0f      	ldr	r3, [pc, #60]	; (800aed4 <xTimerCreateTimerTask+0x8c>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10a      	bne.n	800aebe <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeac:	f383 8811 	msr	BASEPRI, r3
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	613b      	str	r3, [r7, #16]
}
 800aeba:	bf00      	nop
 800aebc:	e7fe      	b.n	800aebc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aebe:	697b      	ldr	r3, [r7, #20]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3718      	adds	r7, #24
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	20004ffc 	.word	0x20004ffc
 800aecc:	0800c734 	.word	0x0800c734
 800aed0:	0800b00d 	.word	0x0800b00d
 800aed4:	20005000 	.word	0x20005000

0800aed8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b08a      	sub	sp, #40	; 0x28
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
 800aee4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aee6:	2300      	movs	r3, #0
 800aee8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d10a      	bne.n	800af06 <xTimerGenericCommand+0x2e>
	__asm volatile
 800aef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef4:	f383 8811 	msr	BASEPRI, r3
 800aef8:	f3bf 8f6f 	isb	sy
 800aefc:	f3bf 8f4f 	dsb	sy
 800af00:	623b      	str	r3, [r7, #32]
}
 800af02:	bf00      	nop
 800af04:	e7fe      	b.n	800af04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800af06:	4b1a      	ldr	r3, [pc, #104]	; (800af70 <xTimerGenericCommand+0x98>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d02a      	beq.n	800af64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	2b05      	cmp	r3, #5
 800af1e:	dc18      	bgt.n	800af52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800af20:	f7ff fdb4 	bl	800aa8c <xTaskGetSchedulerState>
 800af24:	4603      	mov	r3, r0
 800af26:	2b02      	cmp	r3, #2
 800af28:	d109      	bne.n	800af3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800af2a:	4b11      	ldr	r3, [pc, #68]	; (800af70 <xTimerGenericCommand+0x98>)
 800af2c:	6818      	ldr	r0, [r3, #0]
 800af2e:	f107 0110 	add.w	r1, r7, #16
 800af32:	2300      	movs	r3, #0
 800af34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af36:	f7fe fa6f 	bl	8009418 <xQueueGenericSend>
 800af3a:	6278      	str	r0, [r7, #36]	; 0x24
 800af3c:	e012      	b.n	800af64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800af3e:	4b0c      	ldr	r3, [pc, #48]	; (800af70 <xTimerGenericCommand+0x98>)
 800af40:	6818      	ldr	r0, [r3, #0]
 800af42:	f107 0110 	add.w	r1, r7, #16
 800af46:	2300      	movs	r3, #0
 800af48:	2200      	movs	r2, #0
 800af4a:	f7fe fa65 	bl	8009418 <xQueueGenericSend>
 800af4e:	6278      	str	r0, [r7, #36]	; 0x24
 800af50:	e008      	b.n	800af64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af52:	4b07      	ldr	r3, [pc, #28]	; (800af70 <xTimerGenericCommand+0x98>)
 800af54:	6818      	ldr	r0, [r3, #0]
 800af56:	f107 0110 	add.w	r1, r7, #16
 800af5a:	2300      	movs	r3, #0
 800af5c:	683a      	ldr	r2, [r7, #0]
 800af5e:	f7fe fb59 	bl	8009614 <xQueueGenericSendFromISR>
 800af62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af66:	4618      	mov	r0, r3
 800af68:	3728      	adds	r7, #40	; 0x28
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	20004ffc 	.word	0x20004ffc

0800af74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af02      	add	r7, sp, #8
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af7e:	4b22      	ldr	r3, [pc, #136]	; (800b008 <prvProcessExpiredTimer+0x94>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	3304      	adds	r3, #4
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7fe f824 	bl	8008fda <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af98:	f003 0304 	and.w	r3, r3, #4
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d022      	beq.n	800afe6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	699a      	ldr	r2, [r3, #24]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	18d1      	adds	r1, r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	683a      	ldr	r2, [r7, #0]
 800afac:	6978      	ldr	r0, [r7, #20]
 800afae:	f000 f8d1 	bl	800b154 <prvInsertTimerInActiveList>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d01f      	beq.n	800aff8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afb8:	2300      	movs	r3, #0
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	2300      	movs	r3, #0
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	2100      	movs	r1, #0
 800afc2:	6978      	ldr	r0, [r7, #20]
 800afc4:	f7ff ff88 	bl	800aed8 <xTimerGenericCommand>
 800afc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d113      	bne.n	800aff8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	60fb      	str	r3, [r7, #12]
}
 800afe2:	bf00      	nop
 800afe4:	e7fe      	b.n	800afe4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afec:	f023 0301 	bic.w	r3, r3, #1
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	6a1b      	ldr	r3, [r3, #32]
 800affc:	6978      	ldr	r0, [r7, #20]
 800affe:	4798      	blx	r3
}
 800b000:	bf00      	nop
 800b002:	3718      	adds	r7, #24
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	20004ff4 	.word	0x20004ff4

0800b00c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b014:	f107 0308 	add.w	r3, r7, #8
 800b018:	4618      	mov	r0, r3
 800b01a:	f000 f857 	bl	800b0cc <prvGetNextExpireTime>
 800b01e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	4619      	mov	r1, r3
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f000 f803 	bl	800b030 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b02a:	f000 f8d5 	bl	800b1d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b02e:	e7f1      	b.n	800b014 <prvTimerTask+0x8>

0800b030 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b03a:	f7ff f935 	bl	800a2a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b03e:	f107 0308 	add.w	r3, r7, #8
 800b042:	4618      	mov	r0, r3
 800b044:	f000 f866 	bl	800b114 <prvSampleTimeNow>
 800b048:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d130      	bne.n	800b0b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10a      	bne.n	800b06c <prvProcessTimerOrBlockTask+0x3c>
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d806      	bhi.n	800b06c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b05e:	f7ff f931 	bl	800a2c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b062:	68f9      	ldr	r1, [r7, #12]
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f7ff ff85 	bl	800af74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b06a:	e024      	b.n	800b0b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d008      	beq.n	800b084 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b072:	4b13      	ldr	r3, [pc, #76]	; (800b0c0 <prvProcessTimerOrBlockTask+0x90>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d101      	bne.n	800b080 <prvProcessTimerOrBlockTask+0x50>
 800b07c:	2301      	movs	r3, #1
 800b07e:	e000      	b.n	800b082 <prvProcessTimerOrBlockTask+0x52>
 800b080:	2300      	movs	r3, #0
 800b082:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b084:	4b0f      	ldr	r3, [pc, #60]	; (800b0c4 <prvProcessTimerOrBlockTask+0x94>)
 800b086:	6818      	ldr	r0, [r3, #0]
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	4619      	mov	r1, r3
 800b092:	f7fe fe99 	bl	8009dc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b096:	f7ff f915 	bl	800a2c4 <xTaskResumeAll>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d10a      	bne.n	800b0b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b0a0:	4b09      	ldr	r3, [pc, #36]	; (800b0c8 <prvProcessTimerOrBlockTask+0x98>)
 800b0a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0a6:	601a      	str	r2, [r3, #0]
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	f3bf 8f6f 	isb	sy
}
 800b0b0:	e001      	b.n	800b0b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b0b2:	f7ff f907 	bl	800a2c4 <xTaskResumeAll>
}
 800b0b6:	bf00      	nop
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20004ff8 	.word	0x20004ff8
 800b0c4:	20004ffc 	.word	0x20004ffc
 800b0c8:	e000ed04 	.word	0xe000ed04

0800b0cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b0d4:	4b0e      	ldr	r3, [pc, #56]	; (800b110 <prvGetNextExpireTime+0x44>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d101      	bne.n	800b0e2 <prvGetNextExpireTime+0x16>
 800b0de:	2201      	movs	r2, #1
 800b0e0:	e000      	b.n	800b0e4 <prvGetNextExpireTime+0x18>
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d105      	bne.n	800b0fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0f0:	4b07      	ldr	r3, [pc, #28]	; (800b110 <prvGetNextExpireTime+0x44>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	60fb      	str	r3, [r7, #12]
 800b0fa:	e001      	b.n	800b100 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b100:	68fb      	ldr	r3, [r7, #12]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3714      	adds	r7, #20
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	20004ff4 	.word	0x20004ff4

0800b114 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b11c:	f7ff f970 	bl	800a400 <xTaskGetTickCount>
 800b120:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b122:	4b0b      	ldr	r3, [pc, #44]	; (800b150 <prvSampleTimeNow+0x3c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d205      	bcs.n	800b138 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b12c:	f000 f936 	bl	800b39c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	601a      	str	r2, [r3, #0]
 800b136:	e002      	b.n	800b13e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b13e:	4a04      	ldr	r2, [pc, #16]	; (800b150 <prvSampleTimeNow+0x3c>)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b144:	68fb      	ldr	r3, [r7, #12]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	20005004 	.word	0x20005004

0800b154 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
 800b160:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b162:	2300      	movs	r3, #0
 800b164:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	68ba      	ldr	r2, [r7, #8]
 800b16a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	68fa      	ldr	r2, [r7, #12]
 800b170:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	429a      	cmp	r2, r3
 800b178:	d812      	bhi.n	800b1a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	1ad2      	subs	r2, r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	699b      	ldr	r3, [r3, #24]
 800b184:	429a      	cmp	r2, r3
 800b186:	d302      	bcc.n	800b18e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b188:	2301      	movs	r3, #1
 800b18a:	617b      	str	r3, [r7, #20]
 800b18c:	e01b      	b.n	800b1c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b18e:	4b10      	ldr	r3, [pc, #64]	; (800b1d0 <prvInsertTimerInActiveList+0x7c>)
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3304      	adds	r3, #4
 800b196:	4619      	mov	r1, r3
 800b198:	4610      	mov	r0, r2
 800b19a:	f7fd fee5 	bl	8008f68 <vListInsert>
 800b19e:	e012      	b.n	800b1c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d206      	bcs.n	800b1b6 <prvInsertTimerInActiveList+0x62>
 800b1a8:	68ba      	ldr	r2, [r7, #8]
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d302      	bcc.n	800b1b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	617b      	str	r3, [r7, #20]
 800b1b4:	e007      	b.n	800b1c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1b6:	4b07      	ldr	r3, [pc, #28]	; (800b1d4 <prvInsertTimerInActiveList+0x80>)
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	3304      	adds	r3, #4
 800b1be:	4619      	mov	r1, r3
 800b1c0:	4610      	mov	r0, r2
 800b1c2:	f7fd fed1 	bl	8008f68 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b1c6:	697b      	ldr	r3, [r7, #20]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3718      	adds	r7, #24
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	20004ff8 	.word	0x20004ff8
 800b1d4:	20004ff4 	.word	0x20004ff4

0800b1d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b08e      	sub	sp, #56	; 0x38
 800b1dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1de:	e0ca      	b.n	800b376 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	da18      	bge.n	800b218 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b1e6:	1d3b      	adds	r3, r7, #4
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10a      	bne.n	800b208 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	61fb      	str	r3, [r7, #28]
}
 800b204:	bf00      	nop
 800b206:	e7fe      	b.n	800b206 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b20e:	6850      	ldr	r0, [r2, #4]
 800b210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b212:	6892      	ldr	r2, [r2, #8]
 800b214:	4611      	mov	r1, r2
 800b216:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f2c0 80aa 	blt.w	800b374 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b226:	695b      	ldr	r3, [r3, #20]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d004      	beq.n	800b236 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22e:	3304      	adds	r3, #4
 800b230:	4618      	mov	r0, r3
 800b232:	f7fd fed2 	bl	8008fda <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b236:	463b      	mov	r3, r7
 800b238:	4618      	mov	r0, r3
 800b23a:	f7ff ff6b 	bl	800b114 <prvSampleTimeNow>
 800b23e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2b09      	cmp	r3, #9
 800b244:	f200 8097 	bhi.w	800b376 <prvProcessReceivedCommands+0x19e>
 800b248:	a201      	add	r2, pc, #4	; (adr r2, 800b250 <prvProcessReceivedCommands+0x78>)
 800b24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24e:	bf00      	nop
 800b250:	0800b279 	.word	0x0800b279
 800b254:	0800b279 	.word	0x0800b279
 800b258:	0800b279 	.word	0x0800b279
 800b25c:	0800b2ed 	.word	0x0800b2ed
 800b260:	0800b301 	.word	0x0800b301
 800b264:	0800b34b 	.word	0x0800b34b
 800b268:	0800b279 	.word	0x0800b279
 800b26c:	0800b279 	.word	0x0800b279
 800b270:	0800b2ed 	.word	0x0800b2ed
 800b274:	0800b301 	.word	0x0800b301
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b27e:	f043 0301 	orr.w	r3, r3, #1
 800b282:	b2da      	uxtb	r2, r3
 800b284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28e:	699b      	ldr	r3, [r3, #24]
 800b290:	18d1      	adds	r1, r2, r3
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b298:	f7ff ff5c 	bl	800b154 <prvInsertTimerInActiveList>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d069      	beq.n	800b376 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a4:	6a1b      	ldr	r3, [r3, #32]
 800b2a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d05e      	beq.n	800b376 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2bc:	699b      	ldr	r3, [r3, #24]
 800b2be:	441a      	add	r2, r3
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2ca:	f7ff fe05 	bl	800aed8 <xTimerGenericCommand>
 800b2ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b2d0:	6a3b      	ldr	r3, [r7, #32]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d14f      	bne.n	800b376 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2da:	f383 8811 	msr	BASEPRI, r3
 800b2de:	f3bf 8f6f 	isb	sy
 800b2e2:	f3bf 8f4f 	dsb	sy
 800b2e6:	61bb      	str	r3, [r7, #24]
}
 800b2e8:	bf00      	nop
 800b2ea:	e7fe      	b.n	800b2ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2f2:	f023 0301 	bic.w	r3, r3, #1
 800b2f6:	b2da      	uxtb	r2, r3
 800b2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b2fe:	e03a      	b.n	800b376 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b306:	f043 0301 	orr.w	r3, r3, #1
 800b30a:	b2da      	uxtb	r2, r3
 800b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b312:	68ba      	ldr	r2, [r7, #8]
 800b314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b316:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31a:	699b      	ldr	r3, [r3, #24]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10a      	bne.n	800b336 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	617b      	str	r3, [r7, #20]
}
 800b332:	bf00      	nop
 800b334:	e7fe      	b.n	800b334 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b338:	699a      	ldr	r2, [r3, #24]
 800b33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33c:	18d1      	adds	r1, r2, r3
 800b33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b344:	f7ff ff06 	bl	800b154 <prvInsertTimerInActiveList>
					break;
 800b348:	e015      	b.n	800b376 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b350:	f003 0302 	and.w	r3, r3, #2
 800b354:	2b00      	cmp	r3, #0
 800b356:	d103      	bne.n	800b360 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b35a:	f000 fbe1 	bl	800bb20 <vPortFree>
 800b35e:	e00a      	b.n	800b376 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b366:	f023 0301 	bic.w	r3, r3, #1
 800b36a:	b2da      	uxtb	r2, r3
 800b36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b372:	e000      	b.n	800b376 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b374:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b376:	4b08      	ldr	r3, [pc, #32]	; (800b398 <prvProcessReceivedCommands+0x1c0>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	1d39      	adds	r1, r7, #4
 800b37c:	2200      	movs	r2, #0
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fe f9e4 	bl	800974c <xQueueReceive>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	f47f af2a 	bne.w	800b1e0 <prvProcessReceivedCommands+0x8>
	}
}
 800b38c:	bf00      	nop
 800b38e:	bf00      	nop
 800b390:	3730      	adds	r7, #48	; 0x30
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20004ffc 	.word	0x20004ffc

0800b39c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b088      	sub	sp, #32
 800b3a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3a2:	e048      	b.n	800b436 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b3a4:	4b2d      	ldr	r3, [pc, #180]	; (800b45c <prvSwitchTimerLists+0xc0>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3ae:	4b2b      	ldr	r3, [pc, #172]	; (800b45c <prvSwitchTimerLists+0xc0>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fd fe0c 	bl	8008fda <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6a1b      	ldr	r3, [r3, #32]
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3d0:	f003 0304 	and.w	r3, r3, #4
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d02e      	beq.n	800b436 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	693a      	ldr	r2, [r7, #16]
 800b3de:	4413      	add	r3, r2
 800b3e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d90e      	bls.n	800b408 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3f6:	4b19      	ldr	r3, [pc, #100]	; (800b45c <prvSwitchTimerLists+0xc0>)
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	4619      	mov	r1, r3
 800b400:	4610      	mov	r0, r2
 800b402:	f7fd fdb1 	bl	8008f68 <vListInsert>
 800b406:	e016      	b.n	800b436 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b408:	2300      	movs	r3, #0
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	2300      	movs	r3, #0
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	2100      	movs	r1, #0
 800b412:	68f8      	ldr	r0, [r7, #12]
 800b414:	f7ff fd60 	bl	800aed8 <xTimerGenericCommand>
 800b418:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d10a      	bne.n	800b436 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b424:	f383 8811 	msr	BASEPRI, r3
 800b428:	f3bf 8f6f 	isb	sy
 800b42c:	f3bf 8f4f 	dsb	sy
 800b430:	603b      	str	r3, [r7, #0]
}
 800b432:	bf00      	nop
 800b434:	e7fe      	b.n	800b434 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b436:	4b09      	ldr	r3, [pc, #36]	; (800b45c <prvSwitchTimerLists+0xc0>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1b1      	bne.n	800b3a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b440:	4b06      	ldr	r3, [pc, #24]	; (800b45c <prvSwitchTimerLists+0xc0>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b446:	4b06      	ldr	r3, [pc, #24]	; (800b460 <prvSwitchTimerLists+0xc4>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a04      	ldr	r2, [pc, #16]	; (800b45c <prvSwitchTimerLists+0xc0>)
 800b44c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b44e:	4a04      	ldr	r2, [pc, #16]	; (800b460 <prvSwitchTimerLists+0xc4>)
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	6013      	str	r3, [r2, #0]
}
 800b454:	bf00      	nop
 800b456:	3718      	adds	r7, #24
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	20004ff4 	.word	0x20004ff4
 800b460:	20004ff8 	.word	0x20004ff8

0800b464 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b46a:	f000 f96b 	bl	800b744 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b46e:	4b15      	ldr	r3, [pc, #84]	; (800b4c4 <prvCheckForValidListAndQueue+0x60>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d120      	bne.n	800b4b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b476:	4814      	ldr	r0, [pc, #80]	; (800b4c8 <prvCheckForValidListAndQueue+0x64>)
 800b478:	f7fd fd25 	bl	8008ec6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b47c:	4813      	ldr	r0, [pc, #76]	; (800b4cc <prvCheckForValidListAndQueue+0x68>)
 800b47e:	f7fd fd22 	bl	8008ec6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b482:	4b13      	ldr	r3, [pc, #76]	; (800b4d0 <prvCheckForValidListAndQueue+0x6c>)
 800b484:	4a10      	ldr	r2, [pc, #64]	; (800b4c8 <prvCheckForValidListAndQueue+0x64>)
 800b486:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b488:	4b12      	ldr	r3, [pc, #72]	; (800b4d4 <prvCheckForValidListAndQueue+0x70>)
 800b48a:	4a10      	ldr	r2, [pc, #64]	; (800b4cc <prvCheckForValidListAndQueue+0x68>)
 800b48c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b48e:	2300      	movs	r3, #0
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	4b11      	ldr	r3, [pc, #68]	; (800b4d8 <prvCheckForValidListAndQueue+0x74>)
 800b494:	4a11      	ldr	r2, [pc, #68]	; (800b4dc <prvCheckForValidListAndQueue+0x78>)
 800b496:	2110      	movs	r1, #16
 800b498:	200a      	movs	r0, #10
 800b49a:	f7fd fe31 	bl	8009100 <xQueueGenericCreateStatic>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	4a08      	ldr	r2, [pc, #32]	; (800b4c4 <prvCheckForValidListAndQueue+0x60>)
 800b4a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b4a4:	4b07      	ldr	r3, [pc, #28]	; (800b4c4 <prvCheckForValidListAndQueue+0x60>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d005      	beq.n	800b4b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b4ac:	4b05      	ldr	r3, [pc, #20]	; (800b4c4 <prvCheckForValidListAndQueue+0x60>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	490b      	ldr	r1, [pc, #44]	; (800b4e0 <prvCheckForValidListAndQueue+0x7c>)
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fe fc5e 	bl	8009d74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4b8:	f000 f974 	bl	800b7a4 <vPortExitCritical>
}
 800b4bc:	bf00      	nop
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	20004ffc 	.word	0x20004ffc
 800b4c8:	20004fcc 	.word	0x20004fcc
 800b4cc:	20004fe0 	.word	0x20004fe0
 800b4d0:	20004ff4 	.word	0x20004ff4
 800b4d4:	20004ff8 	.word	0x20004ff8
 800b4d8:	200050a8 	.word	0x200050a8
 800b4dc:	20005008 	.word	0x20005008
 800b4e0:	0800c73c 	.word	0x0800c73c

0800b4e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	3b04      	subs	r3, #4
 800b4f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b4fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	3b04      	subs	r3, #4
 800b502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	f023 0201 	bic.w	r2, r3, #1
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	3b04      	subs	r3, #4
 800b512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b514:	4a0c      	ldr	r2, [pc, #48]	; (800b548 <pxPortInitialiseStack+0x64>)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	3b14      	subs	r3, #20
 800b51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	3b04      	subs	r3, #4
 800b52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f06f 0202 	mvn.w	r2, #2
 800b532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	3b20      	subs	r3, #32
 800b538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b53a:	68fb      	ldr	r3, [r7, #12]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3714      	adds	r7, #20
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr
 800b548:	0800b54d 	.word	0x0800b54d

0800b54c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b556:	4b12      	ldr	r3, [pc, #72]	; (800b5a0 <prvTaskExitError+0x54>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b55e:	d00a      	beq.n	800b576 <prvTaskExitError+0x2a>
	__asm volatile
 800b560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b564:	f383 8811 	msr	BASEPRI, r3
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	60fb      	str	r3, [r7, #12]
}
 800b572:	bf00      	nop
 800b574:	e7fe      	b.n	800b574 <prvTaskExitError+0x28>
	__asm volatile
 800b576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	60bb      	str	r3, [r7, #8]
}
 800b588:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b58a:	bf00      	nop
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d0fc      	beq.n	800b58c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b592:	bf00      	nop
 800b594:	bf00      	nop
 800b596:	3714      	adds	r7, #20
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	20000080 	.word	0x20000080
	...

0800b5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b5b0:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <pxCurrentTCBConst2>)
 800b5b2:	6819      	ldr	r1, [r3, #0]
 800b5b4:	6808      	ldr	r0, [r1, #0]
 800b5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ba:	f380 8809 	msr	PSP, r0
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f04f 0000 	mov.w	r0, #0
 800b5c6:	f380 8811 	msr	BASEPRI, r0
 800b5ca:	4770      	bx	lr
 800b5cc:	f3af 8000 	nop.w

0800b5d0 <pxCurrentTCBConst2>:
 800b5d0:	20004acc 	.word	0x20004acc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop

0800b5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b5d8:	4808      	ldr	r0, [pc, #32]	; (800b5fc <prvPortStartFirstTask+0x24>)
 800b5da:	6800      	ldr	r0, [r0, #0]
 800b5dc:	6800      	ldr	r0, [r0, #0]
 800b5de:	f380 8808 	msr	MSP, r0
 800b5e2:	f04f 0000 	mov.w	r0, #0
 800b5e6:	f380 8814 	msr	CONTROL, r0
 800b5ea:	b662      	cpsie	i
 800b5ec:	b661      	cpsie	f
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	df00      	svc	0
 800b5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5fa:	bf00      	nop
 800b5fc:	e000ed08 	.word	0xe000ed08

0800b600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b606:	4b46      	ldr	r3, [pc, #280]	; (800b720 <xPortStartScheduler+0x120>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a46      	ldr	r2, [pc, #280]	; (800b724 <xPortStartScheduler+0x124>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d10a      	bne.n	800b626 <xPortStartScheduler+0x26>
	__asm volatile
 800b610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b614:	f383 8811 	msr	BASEPRI, r3
 800b618:	f3bf 8f6f 	isb	sy
 800b61c:	f3bf 8f4f 	dsb	sy
 800b620:	613b      	str	r3, [r7, #16]
}
 800b622:	bf00      	nop
 800b624:	e7fe      	b.n	800b624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b626:	4b3e      	ldr	r3, [pc, #248]	; (800b720 <xPortStartScheduler+0x120>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a3f      	ldr	r2, [pc, #252]	; (800b728 <xPortStartScheduler+0x128>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d10a      	bne.n	800b646 <xPortStartScheduler+0x46>
	__asm volatile
 800b630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b634:	f383 8811 	msr	BASEPRI, r3
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	60fb      	str	r3, [r7, #12]
}
 800b642:	bf00      	nop
 800b644:	e7fe      	b.n	800b644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b646:	4b39      	ldr	r3, [pc, #228]	; (800b72c <xPortStartScheduler+0x12c>)
 800b648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	22ff      	movs	r2, #255	; 0xff
 800b656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b660:	78fb      	ldrb	r3, [r7, #3]
 800b662:	b2db      	uxtb	r3, r3
 800b664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b668:	b2da      	uxtb	r2, r3
 800b66a:	4b31      	ldr	r3, [pc, #196]	; (800b730 <xPortStartScheduler+0x130>)
 800b66c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b66e:	4b31      	ldr	r3, [pc, #196]	; (800b734 <xPortStartScheduler+0x134>)
 800b670:	2207      	movs	r2, #7
 800b672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b674:	e009      	b.n	800b68a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b676:	4b2f      	ldr	r3, [pc, #188]	; (800b734 <xPortStartScheduler+0x134>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	3b01      	subs	r3, #1
 800b67c:	4a2d      	ldr	r2, [pc, #180]	; (800b734 <xPortStartScheduler+0x134>)
 800b67e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b680:	78fb      	ldrb	r3, [r7, #3]
 800b682:	b2db      	uxtb	r3, r3
 800b684:	005b      	lsls	r3, r3, #1
 800b686:	b2db      	uxtb	r3, r3
 800b688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b68a:	78fb      	ldrb	r3, [r7, #3]
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b692:	2b80      	cmp	r3, #128	; 0x80
 800b694:	d0ef      	beq.n	800b676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b696:	4b27      	ldr	r3, [pc, #156]	; (800b734 <xPortStartScheduler+0x134>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f1c3 0307 	rsb	r3, r3, #7
 800b69e:	2b04      	cmp	r3, #4
 800b6a0:	d00a      	beq.n	800b6b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a6:	f383 8811 	msr	BASEPRI, r3
 800b6aa:	f3bf 8f6f 	isb	sy
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	60bb      	str	r3, [r7, #8]
}
 800b6b4:	bf00      	nop
 800b6b6:	e7fe      	b.n	800b6b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b6b8:	4b1e      	ldr	r3, [pc, #120]	; (800b734 <xPortStartScheduler+0x134>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	021b      	lsls	r3, r3, #8
 800b6be:	4a1d      	ldr	r2, [pc, #116]	; (800b734 <xPortStartScheduler+0x134>)
 800b6c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b6c2:	4b1c      	ldr	r3, [pc, #112]	; (800b734 <xPortStartScheduler+0x134>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b6ca:	4a1a      	ldr	r2, [pc, #104]	; (800b734 <xPortStartScheduler+0x134>)
 800b6cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b6d6:	4b18      	ldr	r3, [pc, #96]	; (800b738 <xPortStartScheduler+0x138>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a17      	ldr	r2, [pc, #92]	; (800b738 <xPortStartScheduler+0x138>)
 800b6dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b6e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b6e2:	4b15      	ldr	r3, [pc, #84]	; (800b738 <xPortStartScheduler+0x138>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a14      	ldr	r2, [pc, #80]	; (800b738 <xPortStartScheduler+0x138>)
 800b6e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b6ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b6ee:	f000 f8dd 	bl	800b8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b6f2:	4b12      	ldr	r3, [pc, #72]	; (800b73c <xPortStartScheduler+0x13c>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b6f8:	f000 f8fc 	bl	800b8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6fc:	4b10      	ldr	r3, [pc, #64]	; (800b740 <xPortStartScheduler+0x140>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a0f      	ldr	r2, [pc, #60]	; (800b740 <xPortStartScheduler+0x140>)
 800b702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b708:	f7ff ff66 	bl	800b5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b70c:	f7fe ff42 	bl	800a594 <vTaskSwitchContext>
	prvTaskExitError();
 800b710:	f7ff ff1c 	bl	800b54c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	e000ed00 	.word	0xe000ed00
 800b724:	410fc271 	.word	0x410fc271
 800b728:	410fc270 	.word	0x410fc270
 800b72c:	e000e400 	.word	0xe000e400
 800b730:	200050f8 	.word	0x200050f8
 800b734:	200050fc 	.word	0x200050fc
 800b738:	e000ed20 	.word	0xe000ed20
 800b73c:	20000080 	.word	0x20000080
 800b740:	e000ef34 	.word	0xe000ef34

0800b744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
	__asm volatile
 800b74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	607b      	str	r3, [r7, #4]
}
 800b75c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b75e:	4b0f      	ldr	r3, [pc, #60]	; (800b79c <vPortEnterCritical+0x58>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	3301      	adds	r3, #1
 800b764:	4a0d      	ldr	r2, [pc, #52]	; (800b79c <vPortEnterCritical+0x58>)
 800b766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b768:	4b0c      	ldr	r3, [pc, #48]	; (800b79c <vPortEnterCritical+0x58>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d10f      	bne.n	800b790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b770:	4b0b      	ldr	r3, [pc, #44]	; (800b7a0 <vPortEnterCritical+0x5c>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00a      	beq.n	800b790 <vPortEnterCritical+0x4c>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	603b      	str	r3, [r7, #0]
}
 800b78c:	bf00      	nop
 800b78e:	e7fe      	b.n	800b78e <vPortEnterCritical+0x4a>
	}
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	20000080 	.word	0x20000080
 800b7a0:	e000ed04 	.word	0xe000ed04

0800b7a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b7aa:	4b12      	ldr	r3, [pc, #72]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10a      	bne.n	800b7c8 <vPortExitCritical+0x24>
	__asm volatile
 800b7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b6:	f383 8811 	msr	BASEPRI, r3
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	607b      	str	r3, [r7, #4]
}
 800b7c4:	bf00      	nop
 800b7c6:	e7fe      	b.n	800b7c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b7c8:	4b0a      	ldr	r3, [pc, #40]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	4a09      	ldr	r2, [pc, #36]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b7d2:	4b08      	ldr	r3, [pc, #32]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d105      	bne.n	800b7e6 <vPortExitCritical+0x42>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	f383 8811 	msr	BASEPRI, r3
}
 800b7e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b7e6:	bf00      	nop
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	20000080 	.word	0x20000080
	...

0800b800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b800:	f3ef 8009 	mrs	r0, PSP
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	4b15      	ldr	r3, [pc, #84]	; (800b860 <pxCurrentTCBConst>)
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	f01e 0f10 	tst.w	lr, #16
 800b810:	bf08      	it	eq
 800b812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81a:	6010      	str	r0, [r2, #0]
 800b81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b820:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b824:	f380 8811 	msr	BASEPRI, r0
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	f7fe feb0 	bl	800a594 <vTaskSwitchContext>
 800b834:	f04f 0000 	mov.w	r0, #0
 800b838:	f380 8811 	msr	BASEPRI, r0
 800b83c:	bc09      	pop	{r0, r3}
 800b83e:	6819      	ldr	r1, [r3, #0]
 800b840:	6808      	ldr	r0, [r1, #0]
 800b842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b846:	f01e 0f10 	tst.w	lr, #16
 800b84a:	bf08      	it	eq
 800b84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b850:	f380 8809 	msr	PSP, r0
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	f3af 8000 	nop.w

0800b860 <pxCurrentTCBConst>:
 800b860:	20004acc 	.word	0x20004acc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b864:	bf00      	nop
 800b866:	bf00      	nop

0800b868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
	__asm volatile
 800b86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	607b      	str	r3, [r7, #4]
}
 800b880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b882:	f7fe fdcd 	bl	800a420 <xTaskIncrementTick>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d003      	beq.n	800b894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b88c:	4b06      	ldr	r3, [pc, #24]	; (800b8a8 <xPortSysTickHandler+0x40>)
 800b88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b892:	601a      	str	r2, [r3, #0]
 800b894:	2300      	movs	r3, #0
 800b896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	f383 8811 	msr	BASEPRI, r3
}
 800b89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	e000ed04 	.word	0xe000ed04

0800b8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b8b0:	4b0b      	ldr	r3, [pc, #44]	; (800b8e0 <vPortSetupTimerInterrupt+0x34>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b8b6:	4b0b      	ldr	r3, [pc, #44]	; (800b8e4 <vPortSetupTimerInterrupt+0x38>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b8bc:	4b0a      	ldr	r3, [pc, #40]	; (800b8e8 <vPortSetupTimerInterrupt+0x3c>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a0a      	ldr	r2, [pc, #40]	; (800b8ec <vPortSetupTimerInterrupt+0x40>)
 800b8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c6:	099b      	lsrs	r3, r3, #6
 800b8c8:	4a09      	ldr	r2, [pc, #36]	; (800b8f0 <vPortSetupTimerInterrupt+0x44>)
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b8ce:	4b04      	ldr	r3, [pc, #16]	; (800b8e0 <vPortSetupTimerInterrupt+0x34>)
 800b8d0:	2207      	movs	r2, #7
 800b8d2:	601a      	str	r2, [r3, #0]
}
 800b8d4:	bf00      	nop
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	e000e010 	.word	0xe000e010
 800b8e4:	e000e018 	.word	0xe000e018
 800b8e8:	20000074 	.word	0x20000074
 800b8ec:	10624dd3 	.word	0x10624dd3
 800b8f0:	e000e014 	.word	0xe000e014

0800b8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b904 <vPortEnableVFP+0x10>
 800b8f8:	6801      	ldr	r1, [r0, #0]
 800b8fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b8fe:	6001      	str	r1, [r0, #0]
 800b900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b902:	bf00      	nop
 800b904:	e000ed88 	.word	0xe000ed88

0800b908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b90e:	f3ef 8305 	mrs	r3, IPSR
 800b912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b0f      	cmp	r3, #15
 800b918:	d914      	bls.n	800b944 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b91a:	4a17      	ldr	r2, [pc, #92]	; (800b978 <vPortValidateInterruptPriority+0x70>)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	4413      	add	r3, r2
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b924:	4b15      	ldr	r3, [pc, #84]	; (800b97c <vPortValidateInterruptPriority+0x74>)
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	7afa      	ldrb	r2, [r7, #11]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d20a      	bcs.n	800b944 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	607b      	str	r3, [r7, #4]
}
 800b940:	bf00      	nop
 800b942:	e7fe      	b.n	800b942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b944:	4b0e      	ldr	r3, [pc, #56]	; (800b980 <vPortValidateInterruptPriority+0x78>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b94c:	4b0d      	ldr	r3, [pc, #52]	; (800b984 <vPortValidateInterruptPriority+0x7c>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	429a      	cmp	r2, r3
 800b952:	d90a      	bls.n	800b96a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	603b      	str	r3, [r7, #0]
}
 800b966:	bf00      	nop
 800b968:	e7fe      	b.n	800b968 <vPortValidateInterruptPriority+0x60>
	}
 800b96a:	bf00      	nop
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	e000e3f0 	.word	0xe000e3f0
 800b97c:	200050f8 	.word	0x200050f8
 800b980:	e000ed0c 	.word	0xe000ed0c
 800b984:	200050fc 	.word	0x200050fc

0800b988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b08a      	sub	sp, #40	; 0x28
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b990:	2300      	movs	r3, #0
 800b992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b994:	f7fe fc88 	bl	800a2a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b998:	4b5b      	ldr	r3, [pc, #364]	; (800bb08 <pvPortMalloc+0x180>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d101      	bne.n	800b9a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b9a0:	f000 f920 	bl	800bbe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b9a4:	4b59      	ldr	r3, [pc, #356]	; (800bb0c <pvPortMalloc+0x184>)
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f040 8093 	bne.w	800bad8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d01d      	beq.n	800b9f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b9b8:	2208      	movs	r2, #8
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4413      	add	r3, r2
 800b9be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f003 0307 	and.w	r3, r3, #7
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d014      	beq.n	800b9f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f023 0307 	bic.w	r3, r3, #7
 800b9d0:	3308      	adds	r3, #8
 800b9d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f003 0307 	and.w	r3, r3, #7
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00a      	beq.n	800b9f4 <pvPortMalloc+0x6c>
	__asm volatile
 800b9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	617b      	str	r3, [r7, #20]
}
 800b9f0:	bf00      	nop
 800b9f2:	e7fe      	b.n	800b9f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d06e      	beq.n	800bad8 <pvPortMalloc+0x150>
 800b9fa:	4b45      	ldr	r3, [pc, #276]	; (800bb10 <pvPortMalloc+0x188>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d869      	bhi.n	800bad8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ba04:	4b43      	ldr	r3, [pc, #268]	; (800bb14 <pvPortMalloc+0x18c>)
 800ba06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ba08:	4b42      	ldr	r3, [pc, #264]	; (800bb14 <pvPortMalloc+0x18c>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba0e:	e004      	b.n	800ba1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d903      	bls.n	800ba2c <pvPortMalloc+0xa4>
 800ba24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1f1      	bne.n	800ba10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba2c:	4b36      	ldr	r3, [pc, #216]	; (800bb08 <pvPortMalloc+0x180>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d050      	beq.n	800bad8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba36:	6a3b      	ldr	r3, [r7, #32]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2208      	movs	r2, #8
 800ba3c:	4413      	add	r3, r2
 800ba3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	6a3b      	ldr	r3, [r7, #32]
 800ba46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4a:	685a      	ldr	r2, [r3, #4]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	1ad2      	subs	r2, r2, r3
 800ba50:	2308      	movs	r3, #8
 800ba52:	005b      	lsls	r3, r3, #1
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d91f      	bls.n	800ba98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	f003 0307 	and.w	r3, r3, #7
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00a      	beq.n	800ba80 <pvPortMalloc+0xf8>
	__asm volatile
 800ba6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6e:	f383 8811 	msr	BASEPRI, r3
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	f3bf 8f4f 	dsb	sy
 800ba7a:	613b      	str	r3, [r7, #16]
}
 800ba7c:	bf00      	nop
 800ba7e:	e7fe      	b.n	800ba7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba82:	685a      	ldr	r2, [r3, #4]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	1ad2      	subs	r2, r2, r3
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba92:	69b8      	ldr	r0, [r7, #24]
 800ba94:	f000 f908 	bl	800bca8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba98:	4b1d      	ldr	r3, [pc, #116]	; (800bb10 <pvPortMalloc+0x188>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	4a1b      	ldr	r2, [pc, #108]	; (800bb10 <pvPortMalloc+0x188>)
 800baa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800baa6:	4b1a      	ldr	r3, [pc, #104]	; (800bb10 <pvPortMalloc+0x188>)
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	4b1b      	ldr	r3, [pc, #108]	; (800bb18 <pvPortMalloc+0x190>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d203      	bcs.n	800baba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bab2:	4b17      	ldr	r3, [pc, #92]	; (800bb10 <pvPortMalloc+0x188>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a18      	ldr	r2, [pc, #96]	; (800bb18 <pvPortMalloc+0x190>)
 800bab8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	685a      	ldr	r2, [r3, #4]
 800babe:	4b13      	ldr	r3, [pc, #76]	; (800bb0c <pvPortMalloc+0x184>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	431a      	orrs	r2, r3
 800bac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baca:	2200      	movs	r2, #0
 800bacc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bace:	4b13      	ldr	r3, [pc, #76]	; (800bb1c <pvPortMalloc+0x194>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	3301      	adds	r3, #1
 800bad4:	4a11      	ldr	r2, [pc, #68]	; (800bb1c <pvPortMalloc+0x194>)
 800bad6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bad8:	f7fe fbf4 	bl	800a2c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	f003 0307 	and.w	r3, r3, #7
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00a      	beq.n	800bafc <pvPortMalloc+0x174>
	__asm volatile
 800bae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baea:	f383 8811 	msr	BASEPRI, r3
 800baee:	f3bf 8f6f 	isb	sy
 800baf2:	f3bf 8f4f 	dsb	sy
 800baf6:	60fb      	str	r3, [r7, #12]
}
 800baf8:	bf00      	nop
 800bafa:	e7fe      	b.n	800bafa <pvPortMalloc+0x172>
	return pvReturn;
 800bafc:	69fb      	ldr	r3, [r7, #28]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3728      	adds	r7, #40	; 0x28
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	2000c638 	.word	0x2000c638
 800bb0c:	2000c64c 	.word	0x2000c64c
 800bb10:	2000c63c 	.word	0x2000c63c
 800bb14:	2000c630 	.word	0x2000c630
 800bb18:	2000c640 	.word	0x2000c640
 800bb1c:	2000c644 	.word	0x2000c644

0800bb20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d04d      	beq.n	800bbce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bb32:	2308      	movs	r3, #8
 800bb34:	425b      	negs	r3, r3
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	4413      	add	r3, r2
 800bb3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	685a      	ldr	r2, [r3, #4]
 800bb44:	4b24      	ldr	r3, [pc, #144]	; (800bbd8 <vPortFree+0xb8>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4013      	ands	r3, r2
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d10a      	bne.n	800bb64 <vPortFree+0x44>
	__asm volatile
 800bb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	60fb      	str	r3, [r7, #12]
}
 800bb60:	bf00      	nop
 800bb62:	e7fe      	b.n	800bb62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00a      	beq.n	800bb82 <vPortFree+0x62>
	__asm volatile
 800bb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb70:	f383 8811 	msr	BASEPRI, r3
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	60bb      	str	r3, [r7, #8]
}
 800bb7e:	bf00      	nop
 800bb80:	e7fe      	b.n	800bb80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	4b14      	ldr	r3, [pc, #80]	; (800bbd8 <vPortFree+0xb8>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4013      	ands	r3, r2
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d01e      	beq.n	800bbce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d11a      	bne.n	800bbce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	685a      	ldr	r2, [r3, #4]
 800bb9c:	4b0e      	ldr	r3, [pc, #56]	; (800bbd8 <vPortFree+0xb8>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	43db      	mvns	r3, r3
 800bba2:	401a      	ands	r2, r3
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bba8:	f7fe fb7e 	bl	800a2a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	685a      	ldr	r2, [r3, #4]
 800bbb0:	4b0a      	ldr	r3, [pc, #40]	; (800bbdc <vPortFree+0xbc>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	4a09      	ldr	r2, [pc, #36]	; (800bbdc <vPortFree+0xbc>)
 800bbb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bbba:	6938      	ldr	r0, [r7, #16]
 800bbbc:	f000 f874 	bl	800bca8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bbc0:	4b07      	ldr	r3, [pc, #28]	; (800bbe0 <vPortFree+0xc0>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	4a06      	ldr	r2, [pc, #24]	; (800bbe0 <vPortFree+0xc0>)
 800bbc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bbca:	f7fe fb7b 	bl	800a2c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bbce:	bf00      	nop
 800bbd0:	3718      	adds	r7, #24
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	2000c64c 	.word	0x2000c64c
 800bbdc:	2000c63c 	.word	0x2000c63c
 800bbe0:	2000c648 	.word	0x2000c648

0800bbe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bbea:	f247 5330 	movw	r3, #30000	; 0x7530
 800bbee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bbf0:	4b27      	ldr	r3, [pc, #156]	; (800bc90 <prvHeapInit+0xac>)
 800bbf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f003 0307 	and.w	r3, r3, #7
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00c      	beq.n	800bc18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	3307      	adds	r3, #7
 800bc02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f023 0307 	bic.w	r3, r3, #7
 800bc0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc0c:	68ba      	ldr	r2, [r7, #8]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	4a1f      	ldr	r2, [pc, #124]	; (800bc90 <prvHeapInit+0xac>)
 800bc14:	4413      	add	r3, r2
 800bc16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc1c:	4a1d      	ldr	r2, [pc, #116]	; (800bc94 <prvHeapInit+0xb0>)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc22:	4b1c      	ldr	r3, [pc, #112]	; (800bc94 <prvHeapInit+0xb0>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bc30:	2208      	movs	r2, #8
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	1a9b      	subs	r3, r3, r2
 800bc36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f023 0307 	bic.w	r3, r3, #7
 800bc3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	4a15      	ldr	r2, [pc, #84]	; (800bc98 <prvHeapInit+0xb4>)
 800bc44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc46:	4b14      	ldr	r3, [pc, #80]	; (800bc98 <prvHeapInit+0xb4>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc4e:	4b12      	ldr	r3, [pc, #72]	; (800bc98 <prvHeapInit+0xb4>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2200      	movs	r2, #0
 800bc54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	1ad2      	subs	r2, r2, r3
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc64:	4b0c      	ldr	r3, [pc, #48]	; (800bc98 <prvHeapInit+0xb4>)
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	4a0a      	ldr	r2, [pc, #40]	; (800bc9c <prvHeapInit+0xb8>)
 800bc72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	4a09      	ldr	r2, [pc, #36]	; (800bca0 <prvHeapInit+0xbc>)
 800bc7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc7c:	4b09      	ldr	r3, [pc, #36]	; (800bca4 <prvHeapInit+0xc0>)
 800bc7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc82:	601a      	str	r2, [r3, #0]
}
 800bc84:	bf00      	nop
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr
 800bc90:	20005100 	.word	0x20005100
 800bc94:	2000c630 	.word	0x2000c630
 800bc98:	2000c638 	.word	0x2000c638
 800bc9c:	2000c640 	.word	0x2000c640
 800bca0:	2000c63c 	.word	0x2000c63c
 800bca4:	2000c64c 	.word	0x2000c64c

0800bca8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bcb0:	4b28      	ldr	r3, [pc, #160]	; (800bd54 <prvInsertBlockIntoFreeList+0xac>)
 800bcb2:	60fb      	str	r3, [r7, #12]
 800bcb4:	e002      	b.n	800bcbc <prvInsertBlockIntoFreeList+0x14>
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	60fb      	str	r3, [r7, #12]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d8f7      	bhi.n	800bcb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d108      	bne.n	800bcea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	441a      	add	r2, r3
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	441a      	add	r2, r3
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d118      	bne.n	800bd30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	4b15      	ldr	r3, [pc, #84]	; (800bd58 <prvInsertBlockIntoFreeList+0xb0>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d00d      	beq.n	800bd26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	685a      	ldr	r2, [r3, #4]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	441a      	add	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	601a      	str	r2, [r3, #0]
 800bd24:	e008      	b.n	800bd38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd26:	4b0c      	ldr	r3, [pc, #48]	; (800bd58 <prvInsertBlockIntoFreeList+0xb0>)
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	601a      	str	r2, [r3, #0]
 800bd2e:	e003      	b.n	800bd38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d002      	beq.n	800bd46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd46:	bf00      	nop
 800bd48:	3714      	adds	r7, #20
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	2000c630 	.word	0x2000c630
 800bd58:	2000c638 	.word	0x2000c638

0800bd5c <__errno>:
 800bd5c:	4b01      	ldr	r3, [pc, #4]	; (800bd64 <__errno+0x8>)
 800bd5e:	6818      	ldr	r0, [r3, #0]
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	20000084 	.word	0x20000084

0800bd68 <__libc_init_array>:
 800bd68:	b570      	push	{r4, r5, r6, lr}
 800bd6a:	4d0d      	ldr	r5, [pc, #52]	; (800bda0 <__libc_init_array+0x38>)
 800bd6c:	4c0d      	ldr	r4, [pc, #52]	; (800bda4 <__libc_init_array+0x3c>)
 800bd6e:	1b64      	subs	r4, r4, r5
 800bd70:	10a4      	asrs	r4, r4, #2
 800bd72:	2600      	movs	r6, #0
 800bd74:	42a6      	cmp	r6, r4
 800bd76:	d109      	bne.n	800bd8c <__libc_init_array+0x24>
 800bd78:	4d0b      	ldr	r5, [pc, #44]	; (800bda8 <__libc_init_array+0x40>)
 800bd7a:	4c0c      	ldr	r4, [pc, #48]	; (800bdac <__libc_init_array+0x44>)
 800bd7c:	f000 fc8e 	bl	800c69c <_init>
 800bd80:	1b64      	subs	r4, r4, r5
 800bd82:	10a4      	asrs	r4, r4, #2
 800bd84:	2600      	movs	r6, #0
 800bd86:	42a6      	cmp	r6, r4
 800bd88:	d105      	bne.n	800bd96 <__libc_init_array+0x2e>
 800bd8a:	bd70      	pop	{r4, r5, r6, pc}
 800bd8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd90:	4798      	blx	r3
 800bd92:	3601      	adds	r6, #1
 800bd94:	e7ee      	b.n	800bd74 <__libc_init_array+0xc>
 800bd96:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd9a:	4798      	blx	r3
 800bd9c:	3601      	adds	r6, #1
 800bd9e:	e7f2      	b.n	800bd86 <__libc_init_array+0x1e>
 800bda0:	0800cb48 	.word	0x0800cb48
 800bda4:	0800cb48 	.word	0x0800cb48
 800bda8:	0800cb48 	.word	0x0800cb48
 800bdac:	0800cb4c 	.word	0x0800cb4c

0800bdb0 <memcpy>:
 800bdb0:	440a      	add	r2, r1
 800bdb2:	4291      	cmp	r1, r2
 800bdb4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdb8:	d100      	bne.n	800bdbc <memcpy+0xc>
 800bdba:	4770      	bx	lr
 800bdbc:	b510      	push	{r4, lr}
 800bdbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdc6:	4291      	cmp	r1, r2
 800bdc8:	d1f9      	bne.n	800bdbe <memcpy+0xe>
 800bdca:	bd10      	pop	{r4, pc}

0800bdcc <memset>:
 800bdcc:	4402      	add	r2, r0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d100      	bne.n	800bdd6 <memset+0xa>
 800bdd4:	4770      	bx	lr
 800bdd6:	f803 1b01 	strb.w	r1, [r3], #1
 800bdda:	e7f9      	b.n	800bdd0 <memset+0x4>

0800bddc <siprintf>:
 800bddc:	b40e      	push	{r1, r2, r3}
 800bdde:	b500      	push	{lr}
 800bde0:	b09c      	sub	sp, #112	; 0x70
 800bde2:	ab1d      	add	r3, sp, #116	; 0x74
 800bde4:	9002      	str	r0, [sp, #8]
 800bde6:	9006      	str	r0, [sp, #24]
 800bde8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bdec:	4809      	ldr	r0, [pc, #36]	; (800be14 <siprintf+0x38>)
 800bdee:	9107      	str	r1, [sp, #28]
 800bdf0:	9104      	str	r1, [sp, #16]
 800bdf2:	4909      	ldr	r1, [pc, #36]	; (800be18 <siprintf+0x3c>)
 800bdf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdf8:	9105      	str	r1, [sp, #20]
 800bdfa:	6800      	ldr	r0, [r0, #0]
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	a902      	add	r1, sp, #8
 800be00:	f000 f868 	bl	800bed4 <_svfiprintf_r>
 800be04:	9b02      	ldr	r3, [sp, #8]
 800be06:	2200      	movs	r2, #0
 800be08:	701a      	strb	r2, [r3, #0]
 800be0a:	b01c      	add	sp, #112	; 0x70
 800be0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be10:	b003      	add	sp, #12
 800be12:	4770      	bx	lr
 800be14:	20000084 	.word	0x20000084
 800be18:	ffff0208 	.word	0xffff0208

0800be1c <__ssputs_r>:
 800be1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be20:	688e      	ldr	r6, [r1, #8]
 800be22:	429e      	cmp	r6, r3
 800be24:	4682      	mov	sl, r0
 800be26:	460c      	mov	r4, r1
 800be28:	4690      	mov	r8, r2
 800be2a:	461f      	mov	r7, r3
 800be2c:	d838      	bhi.n	800bea0 <__ssputs_r+0x84>
 800be2e:	898a      	ldrh	r2, [r1, #12]
 800be30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be34:	d032      	beq.n	800be9c <__ssputs_r+0x80>
 800be36:	6825      	ldr	r5, [r4, #0]
 800be38:	6909      	ldr	r1, [r1, #16]
 800be3a:	eba5 0901 	sub.w	r9, r5, r1
 800be3e:	6965      	ldr	r5, [r4, #20]
 800be40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be48:	3301      	adds	r3, #1
 800be4a:	444b      	add	r3, r9
 800be4c:	106d      	asrs	r5, r5, #1
 800be4e:	429d      	cmp	r5, r3
 800be50:	bf38      	it	cc
 800be52:	461d      	movcc	r5, r3
 800be54:	0553      	lsls	r3, r2, #21
 800be56:	d531      	bpl.n	800bebc <__ssputs_r+0xa0>
 800be58:	4629      	mov	r1, r5
 800be5a:	f000 fb55 	bl	800c508 <_malloc_r>
 800be5e:	4606      	mov	r6, r0
 800be60:	b950      	cbnz	r0, 800be78 <__ssputs_r+0x5c>
 800be62:	230c      	movs	r3, #12
 800be64:	f8ca 3000 	str.w	r3, [sl]
 800be68:	89a3      	ldrh	r3, [r4, #12]
 800be6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be6e:	81a3      	strh	r3, [r4, #12]
 800be70:	f04f 30ff 	mov.w	r0, #4294967295
 800be74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be78:	6921      	ldr	r1, [r4, #16]
 800be7a:	464a      	mov	r2, r9
 800be7c:	f7ff ff98 	bl	800bdb0 <memcpy>
 800be80:	89a3      	ldrh	r3, [r4, #12]
 800be82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be8a:	81a3      	strh	r3, [r4, #12]
 800be8c:	6126      	str	r6, [r4, #16]
 800be8e:	6165      	str	r5, [r4, #20]
 800be90:	444e      	add	r6, r9
 800be92:	eba5 0509 	sub.w	r5, r5, r9
 800be96:	6026      	str	r6, [r4, #0]
 800be98:	60a5      	str	r5, [r4, #8]
 800be9a:	463e      	mov	r6, r7
 800be9c:	42be      	cmp	r6, r7
 800be9e:	d900      	bls.n	800bea2 <__ssputs_r+0x86>
 800bea0:	463e      	mov	r6, r7
 800bea2:	6820      	ldr	r0, [r4, #0]
 800bea4:	4632      	mov	r2, r6
 800bea6:	4641      	mov	r1, r8
 800bea8:	f000 faa8 	bl	800c3fc <memmove>
 800beac:	68a3      	ldr	r3, [r4, #8]
 800beae:	1b9b      	subs	r3, r3, r6
 800beb0:	60a3      	str	r3, [r4, #8]
 800beb2:	6823      	ldr	r3, [r4, #0]
 800beb4:	4433      	add	r3, r6
 800beb6:	6023      	str	r3, [r4, #0]
 800beb8:	2000      	movs	r0, #0
 800beba:	e7db      	b.n	800be74 <__ssputs_r+0x58>
 800bebc:	462a      	mov	r2, r5
 800bebe:	f000 fb97 	bl	800c5f0 <_realloc_r>
 800bec2:	4606      	mov	r6, r0
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d1e1      	bne.n	800be8c <__ssputs_r+0x70>
 800bec8:	6921      	ldr	r1, [r4, #16]
 800beca:	4650      	mov	r0, sl
 800becc:	f000 fab0 	bl	800c430 <_free_r>
 800bed0:	e7c7      	b.n	800be62 <__ssputs_r+0x46>
	...

0800bed4 <_svfiprintf_r>:
 800bed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed8:	4698      	mov	r8, r3
 800beda:	898b      	ldrh	r3, [r1, #12]
 800bedc:	061b      	lsls	r3, r3, #24
 800bede:	b09d      	sub	sp, #116	; 0x74
 800bee0:	4607      	mov	r7, r0
 800bee2:	460d      	mov	r5, r1
 800bee4:	4614      	mov	r4, r2
 800bee6:	d50e      	bpl.n	800bf06 <_svfiprintf_r+0x32>
 800bee8:	690b      	ldr	r3, [r1, #16]
 800beea:	b963      	cbnz	r3, 800bf06 <_svfiprintf_r+0x32>
 800beec:	2140      	movs	r1, #64	; 0x40
 800beee:	f000 fb0b 	bl	800c508 <_malloc_r>
 800bef2:	6028      	str	r0, [r5, #0]
 800bef4:	6128      	str	r0, [r5, #16]
 800bef6:	b920      	cbnz	r0, 800bf02 <_svfiprintf_r+0x2e>
 800bef8:	230c      	movs	r3, #12
 800befa:	603b      	str	r3, [r7, #0]
 800befc:	f04f 30ff 	mov.w	r0, #4294967295
 800bf00:	e0d1      	b.n	800c0a6 <_svfiprintf_r+0x1d2>
 800bf02:	2340      	movs	r3, #64	; 0x40
 800bf04:	616b      	str	r3, [r5, #20]
 800bf06:	2300      	movs	r3, #0
 800bf08:	9309      	str	r3, [sp, #36]	; 0x24
 800bf0a:	2320      	movs	r3, #32
 800bf0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf10:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf14:	2330      	movs	r3, #48	; 0x30
 800bf16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c0c0 <_svfiprintf_r+0x1ec>
 800bf1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf1e:	f04f 0901 	mov.w	r9, #1
 800bf22:	4623      	mov	r3, r4
 800bf24:	469a      	mov	sl, r3
 800bf26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf2a:	b10a      	cbz	r2, 800bf30 <_svfiprintf_r+0x5c>
 800bf2c:	2a25      	cmp	r2, #37	; 0x25
 800bf2e:	d1f9      	bne.n	800bf24 <_svfiprintf_r+0x50>
 800bf30:	ebba 0b04 	subs.w	fp, sl, r4
 800bf34:	d00b      	beq.n	800bf4e <_svfiprintf_r+0x7a>
 800bf36:	465b      	mov	r3, fp
 800bf38:	4622      	mov	r2, r4
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	4638      	mov	r0, r7
 800bf3e:	f7ff ff6d 	bl	800be1c <__ssputs_r>
 800bf42:	3001      	adds	r0, #1
 800bf44:	f000 80aa 	beq.w	800c09c <_svfiprintf_r+0x1c8>
 800bf48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf4a:	445a      	add	r2, fp
 800bf4c:	9209      	str	r2, [sp, #36]	; 0x24
 800bf4e:	f89a 3000 	ldrb.w	r3, [sl]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f000 80a2 	beq.w	800c09c <_svfiprintf_r+0x1c8>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf62:	f10a 0a01 	add.w	sl, sl, #1
 800bf66:	9304      	str	r3, [sp, #16]
 800bf68:	9307      	str	r3, [sp, #28]
 800bf6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf6e:	931a      	str	r3, [sp, #104]	; 0x68
 800bf70:	4654      	mov	r4, sl
 800bf72:	2205      	movs	r2, #5
 800bf74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf78:	4851      	ldr	r0, [pc, #324]	; (800c0c0 <_svfiprintf_r+0x1ec>)
 800bf7a:	f7f4 f941 	bl	8000200 <memchr>
 800bf7e:	9a04      	ldr	r2, [sp, #16]
 800bf80:	b9d8      	cbnz	r0, 800bfba <_svfiprintf_r+0xe6>
 800bf82:	06d0      	lsls	r0, r2, #27
 800bf84:	bf44      	itt	mi
 800bf86:	2320      	movmi	r3, #32
 800bf88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf8c:	0711      	lsls	r1, r2, #28
 800bf8e:	bf44      	itt	mi
 800bf90:	232b      	movmi	r3, #43	; 0x2b
 800bf92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf96:	f89a 3000 	ldrb.w	r3, [sl]
 800bf9a:	2b2a      	cmp	r3, #42	; 0x2a
 800bf9c:	d015      	beq.n	800bfca <_svfiprintf_r+0xf6>
 800bf9e:	9a07      	ldr	r2, [sp, #28]
 800bfa0:	4654      	mov	r4, sl
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	f04f 0c0a 	mov.w	ip, #10
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfae:	3b30      	subs	r3, #48	; 0x30
 800bfb0:	2b09      	cmp	r3, #9
 800bfb2:	d94e      	bls.n	800c052 <_svfiprintf_r+0x17e>
 800bfb4:	b1b0      	cbz	r0, 800bfe4 <_svfiprintf_r+0x110>
 800bfb6:	9207      	str	r2, [sp, #28]
 800bfb8:	e014      	b.n	800bfe4 <_svfiprintf_r+0x110>
 800bfba:	eba0 0308 	sub.w	r3, r0, r8
 800bfbe:	fa09 f303 	lsl.w	r3, r9, r3
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	9304      	str	r3, [sp, #16]
 800bfc6:	46a2      	mov	sl, r4
 800bfc8:	e7d2      	b.n	800bf70 <_svfiprintf_r+0x9c>
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	1d19      	adds	r1, r3, #4
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	9103      	str	r1, [sp, #12]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	bfbb      	ittet	lt
 800bfd6:	425b      	neglt	r3, r3
 800bfd8:	f042 0202 	orrlt.w	r2, r2, #2
 800bfdc:	9307      	strge	r3, [sp, #28]
 800bfde:	9307      	strlt	r3, [sp, #28]
 800bfe0:	bfb8      	it	lt
 800bfe2:	9204      	strlt	r2, [sp, #16]
 800bfe4:	7823      	ldrb	r3, [r4, #0]
 800bfe6:	2b2e      	cmp	r3, #46	; 0x2e
 800bfe8:	d10c      	bne.n	800c004 <_svfiprintf_r+0x130>
 800bfea:	7863      	ldrb	r3, [r4, #1]
 800bfec:	2b2a      	cmp	r3, #42	; 0x2a
 800bfee:	d135      	bne.n	800c05c <_svfiprintf_r+0x188>
 800bff0:	9b03      	ldr	r3, [sp, #12]
 800bff2:	1d1a      	adds	r2, r3, #4
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	9203      	str	r2, [sp, #12]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	bfb8      	it	lt
 800bffc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c000:	3402      	adds	r4, #2
 800c002:	9305      	str	r3, [sp, #20]
 800c004:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c0d0 <_svfiprintf_r+0x1fc>
 800c008:	7821      	ldrb	r1, [r4, #0]
 800c00a:	2203      	movs	r2, #3
 800c00c:	4650      	mov	r0, sl
 800c00e:	f7f4 f8f7 	bl	8000200 <memchr>
 800c012:	b140      	cbz	r0, 800c026 <_svfiprintf_r+0x152>
 800c014:	2340      	movs	r3, #64	; 0x40
 800c016:	eba0 000a 	sub.w	r0, r0, sl
 800c01a:	fa03 f000 	lsl.w	r0, r3, r0
 800c01e:	9b04      	ldr	r3, [sp, #16]
 800c020:	4303      	orrs	r3, r0
 800c022:	3401      	adds	r4, #1
 800c024:	9304      	str	r3, [sp, #16]
 800c026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c02a:	4826      	ldr	r0, [pc, #152]	; (800c0c4 <_svfiprintf_r+0x1f0>)
 800c02c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c030:	2206      	movs	r2, #6
 800c032:	f7f4 f8e5 	bl	8000200 <memchr>
 800c036:	2800      	cmp	r0, #0
 800c038:	d038      	beq.n	800c0ac <_svfiprintf_r+0x1d8>
 800c03a:	4b23      	ldr	r3, [pc, #140]	; (800c0c8 <_svfiprintf_r+0x1f4>)
 800c03c:	bb1b      	cbnz	r3, 800c086 <_svfiprintf_r+0x1b2>
 800c03e:	9b03      	ldr	r3, [sp, #12]
 800c040:	3307      	adds	r3, #7
 800c042:	f023 0307 	bic.w	r3, r3, #7
 800c046:	3308      	adds	r3, #8
 800c048:	9303      	str	r3, [sp, #12]
 800c04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c04c:	4433      	add	r3, r6
 800c04e:	9309      	str	r3, [sp, #36]	; 0x24
 800c050:	e767      	b.n	800bf22 <_svfiprintf_r+0x4e>
 800c052:	fb0c 3202 	mla	r2, ip, r2, r3
 800c056:	460c      	mov	r4, r1
 800c058:	2001      	movs	r0, #1
 800c05a:	e7a5      	b.n	800bfa8 <_svfiprintf_r+0xd4>
 800c05c:	2300      	movs	r3, #0
 800c05e:	3401      	adds	r4, #1
 800c060:	9305      	str	r3, [sp, #20]
 800c062:	4619      	mov	r1, r3
 800c064:	f04f 0c0a 	mov.w	ip, #10
 800c068:	4620      	mov	r0, r4
 800c06a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c06e:	3a30      	subs	r2, #48	; 0x30
 800c070:	2a09      	cmp	r2, #9
 800c072:	d903      	bls.n	800c07c <_svfiprintf_r+0x1a8>
 800c074:	2b00      	cmp	r3, #0
 800c076:	d0c5      	beq.n	800c004 <_svfiprintf_r+0x130>
 800c078:	9105      	str	r1, [sp, #20]
 800c07a:	e7c3      	b.n	800c004 <_svfiprintf_r+0x130>
 800c07c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c080:	4604      	mov	r4, r0
 800c082:	2301      	movs	r3, #1
 800c084:	e7f0      	b.n	800c068 <_svfiprintf_r+0x194>
 800c086:	ab03      	add	r3, sp, #12
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	462a      	mov	r2, r5
 800c08c:	4b0f      	ldr	r3, [pc, #60]	; (800c0cc <_svfiprintf_r+0x1f8>)
 800c08e:	a904      	add	r1, sp, #16
 800c090:	4638      	mov	r0, r7
 800c092:	f3af 8000 	nop.w
 800c096:	1c42      	adds	r2, r0, #1
 800c098:	4606      	mov	r6, r0
 800c09a:	d1d6      	bne.n	800c04a <_svfiprintf_r+0x176>
 800c09c:	89ab      	ldrh	r3, [r5, #12]
 800c09e:	065b      	lsls	r3, r3, #25
 800c0a0:	f53f af2c 	bmi.w	800befc <_svfiprintf_r+0x28>
 800c0a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0a6:	b01d      	add	sp, #116	; 0x74
 800c0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ac:	ab03      	add	r3, sp, #12
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	462a      	mov	r2, r5
 800c0b2:	4b06      	ldr	r3, [pc, #24]	; (800c0cc <_svfiprintf_r+0x1f8>)
 800c0b4:	a904      	add	r1, sp, #16
 800c0b6:	4638      	mov	r0, r7
 800c0b8:	f000 f87a 	bl	800c1b0 <_printf_i>
 800c0bc:	e7eb      	b.n	800c096 <_svfiprintf_r+0x1c2>
 800c0be:	bf00      	nop
 800c0c0:	0800cb0c 	.word	0x0800cb0c
 800c0c4:	0800cb16 	.word	0x0800cb16
 800c0c8:	00000000 	.word	0x00000000
 800c0cc:	0800be1d 	.word	0x0800be1d
 800c0d0:	0800cb12 	.word	0x0800cb12

0800c0d4 <_printf_common>:
 800c0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d8:	4616      	mov	r6, r2
 800c0da:	4699      	mov	r9, r3
 800c0dc:	688a      	ldr	r2, [r1, #8]
 800c0de:	690b      	ldr	r3, [r1, #16]
 800c0e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	bfb8      	it	lt
 800c0e8:	4613      	movlt	r3, r2
 800c0ea:	6033      	str	r3, [r6, #0]
 800c0ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0f0:	4607      	mov	r7, r0
 800c0f2:	460c      	mov	r4, r1
 800c0f4:	b10a      	cbz	r2, 800c0fa <_printf_common+0x26>
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	6033      	str	r3, [r6, #0]
 800c0fa:	6823      	ldr	r3, [r4, #0]
 800c0fc:	0699      	lsls	r1, r3, #26
 800c0fe:	bf42      	ittt	mi
 800c100:	6833      	ldrmi	r3, [r6, #0]
 800c102:	3302      	addmi	r3, #2
 800c104:	6033      	strmi	r3, [r6, #0]
 800c106:	6825      	ldr	r5, [r4, #0]
 800c108:	f015 0506 	ands.w	r5, r5, #6
 800c10c:	d106      	bne.n	800c11c <_printf_common+0x48>
 800c10e:	f104 0a19 	add.w	sl, r4, #25
 800c112:	68e3      	ldr	r3, [r4, #12]
 800c114:	6832      	ldr	r2, [r6, #0]
 800c116:	1a9b      	subs	r3, r3, r2
 800c118:	42ab      	cmp	r3, r5
 800c11a:	dc26      	bgt.n	800c16a <_printf_common+0x96>
 800c11c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c120:	1e13      	subs	r3, r2, #0
 800c122:	6822      	ldr	r2, [r4, #0]
 800c124:	bf18      	it	ne
 800c126:	2301      	movne	r3, #1
 800c128:	0692      	lsls	r2, r2, #26
 800c12a:	d42b      	bmi.n	800c184 <_printf_common+0xb0>
 800c12c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c130:	4649      	mov	r1, r9
 800c132:	4638      	mov	r0, r7
 800c134:	47c0      	blx	r8
 800c136:	3001      	adds	r0, #1
 800c138:	d01e      	beq.n	800c178 <_printf_common+0xa4>
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	68e5      	ldr	r5, [r4, #12]
 800c13e:	6832      	ldr	r2, [r6, #0]
 800c140:	f003 0306 	and.w	r3, r3, #6
 800c144:	2b04      	cmp	r3, #4
 800c146:	bf08      	it	eq
 800c148:	1aad      	subeq	r5, r5, r2
 800c14a:	68a3      	ldr	r3, [r4, #8]
 800c14c:	6922      	ldr	r2, [r4, #16]
 800c14e:	bf0c      	ite	eq
 800c150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c154:	2500      	movne	r5, #0
 800c156:	4293      	cmp	r3, r2
 800c158:	bfc4      	itt	gt
 800c15a:	1a9b      	subgt	r3, r3, r2
 800c15c:	18ed      	addgt	r5, r5, r3
 800c15e:	2600      	movs	r6, #0
 800c160:	341a      	adds	r4, #26
 800c162:	42b5      	cmp	r5, r6
 800c164:	d11a      	bne.n	800c19c <_printf_common+0xc8>
 800c166:	2000      	movs	r0, #0
 800c168:	e008      	b.n	800c17c <_printf_common+0xa8>
 800c16a:	2301      	movs	r3, #1
 800c16c:	4652      	mov	r2, sl
 800c16e:	4649      	mov	r1, r9
 800c170:	4638      	mov	r0, r7
 800c172:	47c0      	blx	r8
 800c174:	3001      	adds	r0, #1
 800c176:	d103      	bne.n	800c180 <_printf_common+0xac>
 800c178:	f04f 30ff 	mov.w	r0, #4294967295
 800c17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c180:	3501      	adds	r5, #1
 800c182:	e7c6      	b.n	800c112 <_printf_common+0x3e>
 800c184:	18e1      	adds	r1, r4, r3
 800c186:	1c5a      	adds	r2, r3, #1
 800c188:	2030      	movs	r0, #48	; 0x30
 800c18a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c18e:	4422      	add	r2, r4
 800c190:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c198:	3302      	adds	r3, #2
 800c19a:	e7c7      	b.n	800c12c <_printf_common+0x58>
 800c19c:	2301      	movs	r3, #1
 800c19e:	4622      	mov	r2, r4
 800c1a0:	4649      	mov	r1, r9
 800c1a2:	4638      	mov	r0, r7
 800c1a4:	47c0      	blx	r8
 800c1a6:	3001      	adds	r0, #1
 800c1a8:	d0e6      	beq.n	800c178 <_printf_common+0xa4>
 800c1aa:	3601      	adds	r6, #1
 800c1ac:	e7d9      	b.n	800c162 <_printf_common+0x8e>
	...

0800c1b0 <_printf_i>:
 800c1b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b4:	7e0f      	ldrb	r7, [r1, #24]
 800c1b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c1b8:	2f78      	cmp	r7, #120	; 0x78
 800c1ba:	4691      	mov	r9, r2
 800c1bc:	4680      	mov	r8, r0
 800c1be:	460c      	mov	r4, r1
 800c1c0:	469a      	mov	sl, r3
 800c1c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c1c6:	d807      	bhi.n	800c1d8 <_printf_i+0x28>
 800c1c8:	2f62      	cmp	r7, #98	; 0x62
 800c1ca:	d80a      	bhi.n	800c1e2 <_printf_i+0x32>
 800c1cc:	2f00      	cmp	r7, #0
 800c1ce:	f000 80d8 	beq.w	800c382 <_printf_i+0x1d2>
 800c1d2:	2f58      	cmp	r7, #88	; 0x58
 800c1d4:	f000 80a3 	beq.w	800c31e <_printf_i+0x16e>
 800c1d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c1e0:	e03a      	b.n	800c258 <_printf_i+0xa8>
 800c1e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1e6:	2b15      	cmp	r3, #21
 800c1e8:	d8f6      	bhi.n	800c1d8 <_printf_i+0x28>
 800c1ea:	a101      	add	r1, pc, #4	; (adr r1, 800c1f0 <_printf_i+0x40>)
 800c1ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1f0:	0800c249 	.word	0x0800c249
 800c1f4:	0800c25d 	.word	0x0800c25d
 800c1f8:	0800c1d9 	.word	0x0800c1d9
 800c1fc:	0800c1d9 	.word	0x0800c1d9
 800c200:	0800c1d9 	.word	0x0800c1d9
 800c204:	0800c1d9 	.word	0x0800c1d9
 800c208:	0800c25d 	.word	0x0800c25d
 800c20c:	0800c1d9 	.word	0x0800c1d9
 800c210:	0800c1d9 	.word	0x0800c1d9
 800c214:	0800c1d9 	.word	0x0800c1d9
 800c218:	0800c1d9 	.word	0x0800c1d9
 800c21c:	0800c369 	.word	0x0800c369
 800c220:	0800c28d 	.word	0x0800c28d
 800c224:	0800c34b 	.word	0x0800c34b
 800c228:	0800c1d9 	.word	0x0800c1d9
 800c22c:	0800c1d9 	.word	0x0800c1d9
 800c230:	0800c38b 	.word	0x0800c38b
 800c234:	0800c1d9 	.word	0x0800c1d9
 800c238:	0800c28d 	.word	0x0800c28d
 800c23c:	0800c1d9 	.word	0x0800c1d9
 800c240:	0800c1d9 	.word	0x0800c1d9
 800c244:	0800c353 	.word	0x0800c353
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	1d1a      	adds	r2, r3, #4
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	602a      	str	r2, [r5, #0]
 800c250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c258:	2301      	movs	r3, #1
 800c25a:	e0a3      	b.n	800c3a4 <_printf_i+0x1f4>
 800c25c:	6820      	ldr	r0, [r4, #0]
 800c25e:	6829      	ldr	r1, [r5, #0]
 800c260:	0606      	lsls	r6, r0, #24
 800c262:	f101 0304 	add.w	r3, r1, #4
 800c266:	d50a      	bpl.n	800c27e <_printf_i+0xce>
 800c268:	680e      	ldr	r6, [r1, #0]
 800c26a:	602b      	str	r3, [r5, #0]
 800c26c:	2e00      	cmp	r6, #0
 800c26e:	da03      	bge.n	800c278 <_printf_i+0xc8>
 800c270:	232d      	movs	r3, #45	; 0x2d
 800c272:	4276      	negs	r6, r6
 800c274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c278:	485e      	ldr	r0, [pc, #376]	; (800c3f4 <_printf_i+0x244>)
 800c27a:	230a      	movs	r3, #10
 800c27c:	e019      	b.n	800c2b2 <_printf_i+0x102>
 800c27e:	680e      	ldr	r6, [r1, #0]
 800c280:	602b      	str	r3, [r5, #0]
 800c282:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c286:	bf18      	it	ne
 800c288:	b236      	sxthne	r6, r6
 800c28a:	e7ef      	b.n	800c26c <_printf_i+0xbc>
 800c28c:	682b      	ldr	r3, [r5, #0]
 800c28e:	6820      	ldr	r0, [r4, #0]
 800c290:	1d19      	adds	r1, r3, #4
 800c292:	6029      	str	r1, [r5, #0]
 800c294:	0601      	lsls	r1, r0, #24
 800c296:	d501      	bpl.n	800c29c <_printf_i+0xec>
 800c298:	681e      	ldr	r6, [r3, #0]
 800c29a:	e002      	b.n	800c2a2 <_printf_i+0xf2>
 800c29c:	0646      	lsls	r6, r0, #25
 800c29e:	d5fb      	bpl.n	800c298 <_printf_i+0xe8>
 800c2a0:	881e      	ldrh	r6, [r3, #0]
 800c2a2:	4854      	ldr	r0, [pc, #336]	; (800c3f4 <_printf_i+0x244>)
 800c2a4:	2f6f      	cmp	r7, #111	; 0x6f
 800c2a6:	bf0c      	ite	eq
 800c2a8:	2308      	moveq	r3, #8
 800c2aa:	230a      	movne	r3, #10
 800c2ac:	2100      	movs	r1, #0
 800c2ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2b2:	6865      	ldr	r5, [r4, #4]
 800c2b4:	60a5      	str	r5, [r4, #8]
 800c2b6:	2d00      	cmp	r5, #0
 800c2b8:	bfa2      	ittt	ge
 800c2ba:	6821      	ldrge	r1, [r4, #0]
 800c2bc:	f021 0104 	bicge.w	r1, r1, #4
 800c2c0:	6021      	strge	r1, [r4, #0]
 800c2c2:	b90e      	cbnz	r6, 800c2c8 <_printf_i+0x118>
 800c2c4:	2d00      	cmp	r5, #0
 800c2c6:	d04d      	beq.n	800c364 <_printf_i+0x1b4>
 800c2c8:	4615      	mov	r5, r2
 800c2ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800c2ce:	fb03 6711 	mls	r7, r3, r1, r6
 800c2d2:	5dc7      	ldrb	r7, [r0, r7]
 800c2d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c2d8:	4637      	mov	r7, r6
 800c2da:	42bb      	cmp	r3, r7
 800c2dc:	460e      	mov	r6, r1
 800c2de:	d9f4      	bls.n	800c2ca <_printf_i+0x11a>
 800c2e0:	2b08      	cmp	r3, #8
 800c2e2:	d10b      	bne.n	800c2fc <_printf_i+0x14c>
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	07de      	lsls	r6, r3, #31
 800c2e8:	d508      	bpl.n	800c2fc <_printf_i+0x14c>
 800c2ea:	6923      	ldr	r3, [r4, #16]
 800c2ec:	6861      	ldr	r1, [r4, #4]
 800c2ee:	4299      	cmp	r1, r3
 800c2f0:	bfde      	ittt	le
 800c2f2:	2330      	movle	r3, #48	; 0x30
 800c2f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c2fc:	1b52      	subs	r2, r2, r5
 800c2fe:	6122      	str	r2, [r4, #16]
 800c300:	f8cd a000 	str.w	sl, [sp]
 800c304:	464b      	mov	r3, r9
 800c306:	aa03      	add	r2, sp, #12
 800c308:	4621      	mov	r1, r4
 800c30a:	4640      	mov	r0, r8
 800c30c:	f7ff fee2 	bl	800c0d4 <_printf_common>
 800c310:	3001      	adds	r0, #1
 800c312:	d14c      	bne.n	800c3ae <_printf_i+0x1fe>
 800c314:	f04f 30ff 	mov.w	r0, #4294967295
 800c318:	b004      	add	sp, #16
 800c31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c31e:	4835      	ldr	r0, [pc, #212]	; (800c3f4 <_printf_i+0x244>)
 800c320:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c324:	6829      	ldr	r1, [r5, #0]
 800c326:	6823      	ldr	r3, [r4, #0]
 800c328:	f851 6b04 	ldr.w	r6, [r1], #4
 800c32c:	6029      	str	r1, [r5, #0]
 800c32e:	061d      	lsls	r5, r3, #24
 800c330:	d514      	bpl.n	800c35c <_printf_i+0x1ac>
 800c332:	07df      	lsls	r7, r3, #31
 800c334:	bf44      	itt	mi
 800c336:	f043 0320 	orrmi.w	r3, r3, #32
 800c33a:	6023      	strmi	r3, [r4, #0]
 800c33c:	b91e      	cbnz	r6, 800c346 <_printf_i+0x196>
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	f023 0320 	bic.w	r3, r3, #32
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	2310      	movs	r3, #16
 800c348:	e7b0      	b.n	800c2ac <_printf_i+0xfc>
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	f043 0320 	orr.w	r3, r3, #32
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	2378      	movs	r3, #120	; 0x78
 800c354:	4828      	ldr	r0, [pc, #160]	; (800c3f8 <_printf_i+0x248>)
 800c356:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c35a:	e7e3      	b.n	800c324 <_printf_i+0x174>
 800c35c:	0659      	lsls	r1, r3, #25
 800c35e:	bf48      	it	mi
 800c360:	b2b6      	uxthmi	r6, r6
 800c362:	e7e6      	b.n	800c332 <_printf_i+0x182>
 800c364:	4615      	mov	r5, r2
 800c366:	e7bb      	b.n	800c2e0 <_printf_i+0x130>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	6826      	ldr	r6, [r4, #0]
 800c36c:	6961      	ldr	r1, [r4, #20]
 800c36e:	1d18      	adds	r0, r3, #4
 800c370:	6028      	str	r0, [r5, #0]
 800c372:	0635      	lsls	r5, r6, #24
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	d501      	bpl.n	800c37c <_printf_i+0x1cc>
 800c378:	6019      	str	r1, [r3, #0]
 800c37a:	e002      	b.n	800c382 <_printf_i+0x1d2>
 800c37c:	0670      	lsls	r0, r6, #25
 800c37e:	d5fb      	bpl.n	800c378 <_printf_i+0x1c8>
 800c380:	8019      	strh	r1, [r3, #0]
 800c382:	2300      	movs	r3, #0
 800c384:	6123      	str	r3, [r4, #16]
 800c386:	4615      	mov	r5, r2
 800c388:	e7ba      	b.n	800c300 <_printf_i+0x150>
 800c38a:	682b      	ldr	r3, [r5, #0]
 800c38c:	1d1a      	adds	r2, r3, #4
 800c38e:	602a      	str	r2, [r5, #0]
 800c390:	681d      	ldr	r5, [r3, #0]
 800c392:	6862      	ldr	r2, [r4, #4]
 800c394:	2100      	movs	r1, #0
 800c396:	4628      	mov	r0, r5
 800c398:	f7f3 ff32 	bl	8000200 <memchr>
 800c39c:	b108      	cbz	r0, 800c3a2 <_printf_i+0x1f2>
 800c39e:	1b40      	subs	r0, r0, r5
 800c3a0:	6060      	str	r0, [r4, #4]
 800c3a2:	6863      	ldr	r3, [r4, #4]
 800c3a4:	6123      	str	r3, [r4, #16]
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3ac:	e7a8      	b.n	800c300 <_printf_i+0x150>
 800c3ae:	6923      	ldr	r3, [r4, #16]
 800c3b0:	462a      	mov	r2, r5
 800c3b2:	4649      	mov	r1, r9
 800c3b4:	4640      	mov	r0, r8
 800c3b6:	47d0      	blx	sl
 800c3b8:	3001      	adds	r0, #1
 800c3ba:	d0ab      	beq.n	800c314 <_printf_i+0x164>
 800c3bc:	6823      	ldr	r3, [r4, #0]
 800c3be:	079b      	lsls	r3, r3, #30
 800c3c0:	d413      	bmi.n	800c3ea <_printf_i+0x23a>
 800c3c2:	68e0      	ldr	r0, [r4, #12]
 800c3c4:	9b03      	ldr	r3, [sp, #12]
 800c3c6:	4298      	cmp	r0, r3
 800c3c8:	bfb8      	it	lt
 800c3ca:	4618      	movlt	r0, r3
 800c3cc:	e7a4      	b.n	800c318 <_printf_i+0x168>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	4632      	mov	r2, r6
 800c3d2:	4649      	mov	r1, r9
 800c3d4:	4640      	mov	r0, r8
 800c3d6:	47d0      	blx	sl
 800c3d8:	3001      	adds	r0, #1
 800c3da:	d09b      	beq.n	800c314 <_printf_i+0x164>
 800c3dc:	3501      	adds	r5, #1
 800c3de:	68e3      	ldr	r3, [r4, #12]
 800c3e0:	9903      	ldr	r1, [sp, #12]
 800c3e2:	1a5b      	subs	r3, r3, r1
 800c3e4:	42ab      	cmp	r3, r5
 800c3e6:	dcf2      	bgt.n	800c3ce <_printf_i+0x21e>
 800c3e8:	e7eb      	b.n	800c3c2 <_printf_i+0x212>
 800c3ea:	2500      	movs	r5, #0
 800c3ec:	f104 0619 	add.w	r6, r4, #25
 800c3f0:	e7f5      	b.n	800c3de <_printf_i+0x22e>
 800c3f2:	bf00      	nop
 800c3f4:	0800cb1d 	.word	0x0800cb1d
 800c3f8:	0800cb2e 	.word	0x0800cb2e

0800c3fc <memmove>:
 800c3fc:	4288      	cmp	r0, r1
 800c3fe:	b510      	push	{r4, lr}
 800c400:	eb01 0402 	add.w	r4, r1, r2
 800c404:	d902      	bls.n	800c40c <memmove+0x10>
 800c406:	4284      	cmp	r4, r0
 800c408:	4623      	mov	r3, r4
 800c40a:	d807      	bhi.n	800c41c <memmove+0x20>
 800c40c:	1e43      	subs	r3, r0, #1
 800c40e:	42a1      	cmp	r1, r4
 800c410:	d008      	beq.n	800c424 <memmove+0x28>
 800c412:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c416:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c41a:	e7f8      	b.n	800c40e <memmove+0x12>
 800c41c:	4402      	add	r2, r0
 800c41e:	4601      	mov	r1, r0
 800c420:	428a      	cmp	r2, r1
 800c422:	d100      	bne.n	800c426 <memmove+0x2a>
 800c424:	bd10      	pop	{r4, pc}
 800c426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c42a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c42e:	e7f7      	b.n	800c420 <memmove+0x24>

0800c430 <_free_r>:
 800c430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c432:	2900      	cmp	r1, #0
 800c434:	d044      	beq.n	800c4c0 <_free_r+0x90>
 800c436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c43a:	9001      	str	r0, [sp, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f1a1 0404 	sub.w	r4, r1, #4
 800c442:	bfb8      	it	lt
 800c444:	18e4      	addlt	r4, r4, r3
 800c446:	f000 f913 	bl	800c670 <__malloc_lock>
 800c44a:	4a1e      	ldr	r2, [pc, #120]	; (800c4c4 <_free_r+0x94>)
 800c44c:	9801      	ldr	r0, [sp, #4]
 800c44e:	6813      	ldr	r3, [r2, #0]
 800c450:	b933      	cbnz	r3, 800c460 <_free_r+0x30>
 800c452:	6063      	str	r3, [r4, #4]
 800c454:	6014      	str	r4, [r2, #0]
 800c456:	b003      	add	sp, #12
 800c458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c45c:	f000 b90e 	b.w	800c67c <__malloc_unlock>
 800c460:	42a3      	cmp	r3, r4
 800c462:	d908      	bls.n	800c476 <_free_r+0x46>
 800c464:	6825      	ldr	r5, [r4, #0]
 800c466:	1961      	adds	r1, r4, r5
 800c468:	428b      	cmp	r3, r1
 800c46a:	bf01      	itttt	eq
 800c46c:	6819      	ldreq	r1, [r3, #0]
 800c46e:	685b      	ldreq	r3, [r3, #4]
 800c470:	1949      	addeq	r1, r1, r5
 800c472:	6021      	streq	r1, [r4, #0]
 800c474:	e7ed      	b.n	800c452 <_free_r+0x22>
 800c476:	461a      	mov	r2, r3
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	b10b      	cbz	r3, 800c480 <_free_r+0x50>
 800c47c:	42a3      	cmp	r3, r4
 800c47e:	d9fa      	bls.n	800c476 <_free_r+0x46>
 800c480:	6811      	ldr	r1, [r2, #0]
 800c482:	1855      	adds	r5, r2, r1
 800c484:	42a5      	cmp	r5, r4
 800c486:	d10b      	bne.n	800c4a0 <_free_r+0x70>
 800c488:	6824      	ldr	r4, [r4, #0]
 800c48a:	4421      	add	r1, r4
 800c48c:	1854      	adds	r4, r2, r1
 800c48e:	42a3      	cmp	r3, r4
 800c490:	6011      	str	r1, [r2, #0]
 800c492:	d1e0      	bne.n	800c456 <_free_r+0x26>
 800c494:	681c      	ldr	r4, [r3, #0]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	6053      	str	r3, [r2, #4]
 800c49a:	4421      	add	r1, r4
 800c49c:	6011      	str	r1, [r2, #0]
 800c49e:	e7da      	b.n	800c456 <_free_r+0x26>
 800c4a0:	d902      	bls.n	800c4a8 <_free_r+0x78>
 800c4a2:	230c      	movs	r3, #12
 800c4a4:	6003      	str	r3, [r0, #0]
 800c4a6:	e7d6      	b.n	800c456 <_free_r+0x26>
 800c4a8:	6825      	ldr	r5, [r4, #0]
 800c4aa:	1961      	adds	r1, r4, r5
 800c4ac:	428b      	cmp	r3, r1
 800c4ae:	bf04      	itt	eq
 800c4b0:	6819      	ldreq	r1, [r3, #0]
 800c4b2:	685b      	ldreq	r3, [r3, #4]
 800c4b4:	6063      	str	r3, [r4, #4]
 800c4b6:	bf04      	itt	eq
 800c4b8:	1949      	addeq	r1, r1, r5
 800c4ba:	6021      	streq	r1, [r4, #0]
 800c4bc:	6054      	str	r4, [r2, #4]
 800c4be:	e7ca      	b.n	800c456 <_free_r+0x26>
 800c4c0:	b003      	add	sp, #12
 800c4c2:	bd30      	pop	{r4, r5, pc}
 800c4c4:	2000c650 	.word	0x2000c650

0800c4c8 <sbrk_aligned>:
 800c4c8:	b570      	push	{r4, r5, r6, lr}
 800c4ca:	4e0e      	ldr	r6, [pc, #56]	; (800c504 <sbrk_aligned+0x3c>)
 800c4cc:	460c      	mov	r4, r1
 800c4ce:	6831      	ldr	r1, [r6, #0]
 800c4d0:	4605      	mov	r5, r0
 800c4d2:	b911      	cbnz	r1, 800c4da <sbrk_aligned+0x12>
 800c4d4:	f000 f8bc 	bl	800c650 <_sbrk_r>
 800c4d8:	6030      	str	r0, [r6, #0]
 800c4da:	4621      	mov	r1, r4
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f000 f8b7 	bl	800c650 <_sbrk_r>
 800c4e2:	1c43      	adds	r3, r0, #1
 800c4e4:	d00a      	beq.n	800c4fc <sbrk_aligned+0x34>
 800c4e6:	1cc4      	adds	r4, r0, #3
 800c4e8:	f024 0403 	bic.w	r4, r4, #3
 800c4ec:	42a0      	cmp	r0, r4
 800c4ee:	d007      	beq.n	800c500 <sbrk_aligned+0x38>
 800c4f0:	1a21      	subs	r1, r4, r0
 800c4f2:	4628      	mov	r0, r5
 800c4f4:	f000 f8ac 	bl	800c650 <_sbrk_r>
 800c4f8:	3001      	adds	r0, #1
 800c4fa:	d101      	bne.n	800c500 <sbrk_aligned+0x38>
 800c4fc:	f04f 34ff 	mov.w	r4, #4294967295
 800c500:	4620      	mov	r0, r4
 800c502:	bd70      	pop	{r4, r5, r6, pc}
 800c504:	2000c654 	.word	0x2000c654

0800c508 <_malloc_r>:
 800c508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c50c:	1ccd      	adds	r5, r1, #3
 800c50e:	f025 0503 	bic.w	r5, r5, #3
 800c512:	3508      	adds	r5, #8
 800c514:	2d0c      	cmp	r5, #12
 800c516:	bf38      	it	cc
 800c518:	250c      	movcc	r5, #12
 800c51a:	2d00      	cmp	r5, #0
 800c51c:	4607      	mov	r7, r0
 800c51e:	db01      	blt.n	800c524 <_malloc_r+0x1c>
 800c520:	42a9      	cmp	r1, r5
 800c522:	d905      	bls.n	800c530 <_malloc_r+0x28>
 800c524:	230c      	movs	r3, #12
 800c526:	603b      	str	r3, [r7, #0]
 800c528:	2600      	movs	r6, #0
 800c52a:	4630      	mov	r0, r6
 800c52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c530:	4e2e      	ldr	r6, [pc, #184]	; (800c5ec <_malloc_r+0xe4>)
 800c532:	f000 f89d 	bl	800c670 <__malloc_lock>
 800c536:	6833      	ldr	r3, [r6, #0]
 800c538:	461c      	mov	r4, r3
 800c53a:	bb34      	cbnz	r4, 800c58a <_malloc_r+0x82>
 800c53c:	4629      	mov	r1, r5
 800c53e:	4638      	mov	r0, r7
 800c540:	f7ff ffc2 	bl	800c4c8 <sbrk_aligned>
 800c544:	1c43      	adds	r3, r0, #1
 800c546:	4604      	mov	r4, r0
 800c548:	d14d      	bne.n	800c5e6 <_malloc_r+0xde>
 800c54a:	6834      	ldr	r4, [r6, #0]
 800c54c:	4626      	mov	r6, r4
 800c54e:	2e00      	cmp	r6, #0
 800c550:	d140      	bne.n	800c5d4 <_malloc_r+0xcc>
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	4631      	mov	r1, r6
 800c556:	4638      	mov	r0, r7
 800c558:	eb04 0803 	add.w	r8, r4, r3
 800c55c:	f000 f878 	bl	800c650 <_sbrk_r>
 800c560:	4580      	cmp	r8, r0
 800c562:	d13a      	bne.n	800c5da <_malloc_r+0xd2>
 800c564:	6821      	ldr	r1, [r4, #0]
 800c566:	3503      	adds	r5, #3
 800c568:	1a6d      	subs	r5, r5, r1
 800c56a:	f025 0503 	bic.w	r5, r5, #3
 800c56e:	3508      	adds	r5, #8
 800c570:	2d0c      	cmp	r5, #12
 800c572:	bf38      	it	cc
 800c574:	250c      	movcc	r5, #12
 800c576:	4629      	mov	r1, r5
 800c578:	4638      	mov	r0, r7
 800c57a:	f7ff ffa5 	bl	800c4c8 <sbrk_aligned>
 800c57e:	3001      	adds	r0, #1
 800c580:	d02b      	beq.n	800c5da <_malloc_r+0xd2>
 800c582:	6823      	ldr	r3, [r4, #0]
 800c584:	442b      	add	r3, r5
 800c586:	6023      	str	r3, [r4, #0]
 800c588:	e00e      	b.n	800c5a8 <_malloc_r+0xa0>
 800c58a:	6822      	ldr	r2, [r4, #0]
 800c58c:	1b52      	subs	r2, r2, r5
 800c58e:	d41e      	bmi.n	800c5ce <_malloc_r+0xc6>
 800c590:	2a0b      	cmp	r2, #11
 800c592:	d916      	bls.n	800c5c2 <_malloc_r+0xba>
 800c594:	1961      	adds	r1, r4, r5
 800c596:	42a3      	cmp	r3, r4
 800c598:	6025      	str	r5, [r4, #0]
 800c59a:	bf18      	it	ne
 800c59c:	6059      	strne	r1, [r3, #4]
 800c59e:	6863      	ldr	r3, [r4, #4]
 800c5a0:	bf08      	it	eq
 800c5a2:	6031      	streq	r1, [r6, #0]
 800c5a4:	5162      	str	r2, [r4, r5]
 800c5a6:	604b      	str	r3, [r1, #4]
 800c5a8:	4638      	mov	r0, r7
 800c5aa:	f104 060b 	add.w	r6, r4, #11
 800c5ae:	f000 f865 	bl	800c67c <__malloc_unlock>
 800c5b2:	f026 0607 	bic.w	r6, r6, #7
 800c5b6:	1d23      	adds	r3, r4, #4
 800c5b8:	1af2      	subs	r2, r6, r3
 800c5ba:	d0b6      	beq.n	800c52a <_malloc_r+0x22>
 800c5bc:	1b9b      	subs	r3, r3, r6
 800c5be:	50a3      	str	r3, [r4, r2]
 800c5c0:	e7b3      	b.n	800c52a <_malloc_r+0x22>
 800c5c2:	6862      	ldr	r2, [r4, #4]
 800c5c4:	42a3      	cmp	r3, r4
 800c5c6:	bf0c      	ite	eq
 800c5c8:	6032      	streq	r2, [r6, #0]
 800c5ca:	605a      	strne	r2, [r3, #4]
 800c5cc:	e7ec      	b.n	800c5a8 <_malloc_r+0xa0>
 800c5ce:	4623      	mov	r3, r4
 800c5d0:	6864      	ldr	r4, [r4, #4]
 800c5d2:	e7b2      	b.n	800c53a <_malloc_r+0x32>
 800c5d4:	4634      	mov	r4, r6
 800c5d6:	6876      	ldr	r6, [r6, #4]
 800c5d8:	e7b9      	b.n	800c54e <_malloc_r+0x46>
 800c5da:	230c      	movs	r3, #12
 800c5dc:	603b      	str	r3, [r7, #0]
 800c5de:	4638      	mov	r0, r7
 800c5e0:	f000 f84c 	bl	800c67c <__malloc_unlock>
 800c5e4:	e7a1      	b.n	800c52a <_malloc_r+0x22>
 800c5e6:	6025      	str	r5, [r4, #0]
 800c5e8:	e7de      	b.n	800c5a8 <_malloc_r+0xa0>
 800c5ea:	bf00      	nop
 800c5ec:	2000c650 	.word	0x2000c650

0800c5f0 <_realloc_r>:
 800c5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f4:	4680      	mov	r8, r0
 800c5f6:	4614      	mov	r4, r2
 800c5f8:	460e      	mov	r6, r1
 800c5fa:	b921      	cbnz	r1, 800c606 <_realloc_r+0x16>
 800c5fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c600:	4611      	mov	r1, r2
 800c602:	f7ff bf81 	b.w	800c508 <_malloc_r>
 800c606:	b92a      	cbnz	r2, 800c614 <_realloc_r+0x24>
 800c608:	f7ff ff12 	bl	800c430 <_free_r>
 800c60c:	4625      	mov	r5, r4
 800c60e:	4628      	mov	r0, r5
 800c610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c614:	f000 f838 	bl	800c688 <_malloc_usable_size_r>
 800c618:	4284      	cmp	r4, r0
 800c61a:	4607      	mov	r7, r0
 800c61c:	d802      	bhi.n	800c624 <_realloc_r+0x34>
 800c61e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c622:	d812      	bhi.n	800c64a <_realloc_r+0x5a>
 800c624:	4621      	mov	r1, r4
 800c626:	4640      	mov	r0, r8
 800c628:	f7ff ff6e 	bl	800c508 <_malloc_r>
 800c62c:	4605      	mov	r5, r0
 800c62e:	2800      	cmp	r0, #0
 800c630:	d0ed      	beq.n	800c60e <_realloc_r+0x1e>
 800c632:	42bc      	cmp	r4, r7
 800c634:	4622      	mov	r2, r4
 800c636:	4631      	mov	r1, r6
 800c638:	bf28      	it	cs
 800c63a:	463a      	movcs	r2, r7
 800c63c:	f7ff fbb8 	bl	800bdb0 <memcpy>
 800c640:	4631      	mov	r1, r6
 800c642:	4640      	mov	r0, r8
 800c644:	f7ff fef4 	bl	800c430 <_free_r>
 800c648:	e7e1      	b.n	800c60e <_realloc_r+0x1e>
 800c64a:	4635      	mov	r5, r6
 800c64c:	e7df      	b.n	800c60e <_realloc_r+0x1e>
	...

0800c650 <_sbrk_r>:
 800c650:	b538      	push	{r3, r4, r5, lr}
 800c652:	4d06      	ldr	r5, [pc, #24]	; (800c66c <_sbrk_r+0x1c>)
 800c654:	2300      	movs	r3, #0
 800c656:	4604      	mov	r4, r0
 800c658:	4608      	mov	r0, r1
 800c65a:	602b      	str	r3, [r5, #0]
 800c65c:	f7f5 fdca 	bl	80021f4 <_sbrk>
 800c660:	1c43      	adds	r3, r0, #1
 800c662:	d102      	bne.n	800c66a <_sbrk_r+0x1a>
 800c664:	682b      	ldr	r3, [r5, #0]
 800c666:	b103      	cbz	r3, 800c66a <_sbrk_r+0x1a>
 800c668:	6023      	str	r3, [r4, #0]
 800c66a:	bd38      	pop	{r3, r4, r5, pc}
 800c66c:	2000c658 	.word	0x2000c658

0800c670 <__malloc_lock>:
 800c670:	4801      	ldr	r0, [pc, #4]	; (800c678 <__malloc_lock+0x8>)
 800c672:	f000 b811 	b.w	800c698 <__retarget_lock_acquire_recursive>
 800c676:	bf00      	nop
 800c678:	2000c65c 	.word	0x2000c65c

0800c67c <__malloc_unlock>:
 800c67c:	4801      	ldr	r0, [pc, #4]	; (800c684 <__malloc_unlock+0x8>)
 800c67e:	f000 b80c 	b.w	800c69a <__retarget_lock_release_recursive>
 800c682:	bf00      	nop
 800c684:	2000c65c 	.word	0x2000c65c

0800c688 <_malloc_usable_size_r>:
 800c688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c68c:	1f18      	subs	r0, r3, #4
 800c68e:	2b00      	cmp	r3, #0
 800c690:	bfbc      	itt	lt
 800c692:	580b      	ldrlt	r3, [r1, r0]
 800c694:	18c0      	addlt	r0, r0, r3
 800c696:	4770      	bx	lr

0800c698 <__retarget_lock_acquire_recursive>:
 800c698:	4770      	bx	lr

0800c69a <__retarget_lock_release_recursive>:
 800c69a:	4770      	bx	lr

0800c69c <_init>:
 800c69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c69e:	bf00      	nop
 800c6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6a2:	bc08      	pop	{r3}
 800c6a4:	469e      	mov	lr, r3
 800c6a6:	4770      	bx	lr

0800c6a8 <_fini>:
 800c6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6aa:	bf00      	nop
 800c6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ae:	bc08      	pop	{r3}
 800c6b0:	469e      	mov	lr, r3
 800c6b2:	4770      	bx	lr
