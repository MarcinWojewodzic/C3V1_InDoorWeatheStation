
C3V1-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001be14  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001080  0801bfd8  0801bfd8  0002bfd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d058  0801d058  00030278  2**0
                  CONTENTS
  4 .ARM          00000008  0801d058  0801d058  0002d058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d060  0801d060  00030278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d060  0801d060  0002d060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d064  0801d064  0002d064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0801d068  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e6c8  20000278  0801d2e0  00030278  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  2001e940  0801d2e0  0003e940  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031bff  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006cde  00000000  00000000  00061ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024b8  00000000  00000000  00068b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021b0  00000000  00000000  0006b040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000358fc  00000000  00000000  0006d1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030b5f  00000000  00000000  000a2aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012dd6e  00000000  00000000  000d364b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002013b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae18  00000000  00000000  0020140c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000278 	.word	0x20000278
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801bfbc 	.word	0x0801bfbc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000027c 	.word	0x2000027c
 80001fc:	0801bfbc 	.word	0x0801bfbc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <GFX_DrawPixelScreen>:

#if USING_STRINGS == 1
const uint8_t *font;
uint8_t size = 1;
static void GFX_DrawPixelScreen(uint16_t x, uint16_t y, uint8_t color, Screen_TypeDef Screen)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4623      	mov	r3, r4
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	4603      	mov	r3, r0
 80010dc:	80bb      	strh	r3, [r7, #4]
 80010de:	460b      	mov	r3, r1
 80010e0:	70fb      	strb	r3, [r7, #3]
 80010e2:	4613      	mov	r3, r2
 80010e4:	70bb      	strb	r3, [r7, #2]
   if(Screen == OLED)
 80010e6:	78bb      	ldrb	r3, [r7, #2]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d108      	bne.n	80010fe <GFX_DrawPixelScreen+0x36>
   {
      GFX_DrawPixelOled(x, y, color);
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	88ba      	ldrh	r2, [r7, #4]
 80010f2:	b2d1      	uxtb	r1, r2
 80010f4:	78fa      	ldrb	r2, [r7, #3]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f009 fdcc 	bl	800ac94 <ssd1306_set_pixel>
   }
   else if(Screen == E_PAPIER)
   {
      GFX_DrawPixelEpapier(x, y, color);
   }
}
 80010fc:	e008      	b.n	8001110 <GFX_DrawPixelScreen+0x48>
   else if(Screen == E_PAPIER)
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <GFX_DrawPixelScreen+0x48>
      GFX_DrawPixelEpapier(x, y, color);
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	88b9      	ldrh	r1, [r7, #4]
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fdbe 	bl	8003c8c <e_papier_set_pixel>
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bd90      	pop	{r4, r7, pc}

08001118 <GFX_SetFont>:
void GFX_SetFont(const uint8_t *font_t)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
   font = font_t;
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <GFX_SetFont+0x1c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000294 	.word	0x20000294

08001138 <GFX_DrawChar>:
{
   return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af02      	add	r7, sp, #8
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	460b      	mov	r3, r1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	4613      	mov	r3, r2
 800114c:	71bb      	strb	r3, [r7, #6]
   if(chr > 0x7E)
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b7e      	cmp	r3, #126	; 0x7e
 8001152:	f200 80a7 	bhi.w	80012a4 <GFX_DrawChar+0x16c>
      return; // chr > '~'

   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 8001156:	2300      	movs	r3, #0
 8001158:	75fb      	strb	r3, [r7, #23]
 800115a:	e09a      	b.n	8001292 <GFX_DrawChar+0x15a>
   {
      uint8_t line = (uint8_t)font[(chr - 0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <GFX_DrawChar+0x174>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3b20      	subs	r3, #32
 8001164:	4951      	ldr	r1, [pc, #324]	; (80012ac <GFX_DrawChar+0x174>)
 8001166:	6809      	ldr	r1, [r1, #0]
 8001168:	3101      	adds	r1, #1
 800116a:	7809      	ldrb	r1, [r1, #0]
 800116c:	fb03 f101 	mul.w	r1, r3, r1
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	440b      	add	r3, r1
 8001174:	3302      	adds	r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	75bb      	strb	r3, [r7, #22]

      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 800117c:	2300      	movs	r3, #0
 800117e:	757b      	strb	r3, [r7, #21]
 8001180:	e07c      	b.n	800127c <GFX_DrawChar+0x144>
      {
         if(line & 1) // Check last pixel in line
 8001182:	7dbb      	ldrb	r3, [r7, #22]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d034      	beq.n	80011f6 <GFX_DrawChar+0xbe>
         {
            if(size == 1)
 800118c:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <GFX_DrawChar+0x178>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d112      	bne.n	80011ba <GFX_DrawChar+0x82>
               GFX_DrawPixelScreen(x + i, y + j, color, Screen); // Draw this pixel
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	b29a      	uxth	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b298      	uxth	r0, r3
 80011a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4413      	add	r3, r2
 80011ac:	b299      	uxth	r1, r3
 80011ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011b2:	79ba      	ldrb	r2, [r7, #6]
 80011b4:	f7ff ff88 	bl	80010c8 <GFX_DrawPixelScreen>
 80011b8:	e057      	b.n	800126a <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, color, Screen); // Or bigger pixel
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <GFX_DrawChar+0x178>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	fb03 f202 	mul.w	r2, r3, r2
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	18d0      	adds	r0, r2, r3
 80011c8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011cc:	4a38      	ldr	r2, [pc, #224]	; (80012b0 <GFX_DrawChar+0x178>)
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	fb03 f202 	mul.w	r2, r3, r2
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	18d1      	adds	r1, r2, r3
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <GFX_DrawChar+0x178>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <GFX_DrawChar+0x178>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b29c      	uxth	r4, r3
 80011e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	4623      	mov	r3, r4
 80011f0:	f000 f9d1 	bl	8001596 <GFX_DrawFillRectangle>
 80011f4:	e039      	b.n	800126a <GFX_DrawChar+0x132>
         }
         else if(background == 0)
 80011f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d135      	bne.n	800126a <GFX_DrawChar+0x132>
         {
            if(size == 1)
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <GFX_DrawChar+0x178>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d113      	bne.n	800122e <GFX_DrawChar+0xf6>
               GFX_DrawPixelScreen(x + i, y + j, background, Screen); // Draw black BG
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	b29a      	uxth	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	b298      	uxth	r0, r3
 8001212:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001216:	b29a      	uxth	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	b299      	uxth	r1, r3
 8001220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001224:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001228:	f7ff ff4e 	bl	80010c8 <GFX_DrawPixelScreen>
 800122c:	e01d      	b.n	800126a <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, background, Screen); // Or bigger
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <GFX_DrawChar+0x178>)
 8001232:	7812      	ldrb	r2, [r2, #0]
 8001234:	fb03 f202 	mul.w	r2, r3, r2
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	18d0      	adds	r0, r2, r3
 800123c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <GFX_DrawChar+0x178>)
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	fb03 f202 	mul.w	r2, r3, r2
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	18d1      	adds	r1, r2, r3
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <GFX_DrawChar+0x178>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <GFX_DrawChar+0x178>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b29c      	uxth	r4, r3
 8001258:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4623      	mov	r3, r4
 8001266:	f000 f996 	bl	8001596 <GFX_DrawFillRectangle>
      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 800126a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	757b      	strb	r3, [r7, #21]
 8001276:	7dbb      	ldrb	r3, [r7, #22]
 8001278:	085b      	lsrs	r3, r3, #1
 800127a:	75bb      	strb	r3, [r7, #22]
 800127c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <GFX_DrawChar+0x174>)
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	4293      	cmp	r3, r2
 8001288:	f6ff af7b 	blt.w	8001182 <GFX_DrawChar+0x4a>
   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	3301      	adds	r3, #1
 8001290:	75fb      	strb	r3, [r7, #23]
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <GFX_DrawChar+0x174>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	7dfa      	ldrb	r2, [r7, #23]
 800129c:	429a      	cmp	r2, r3
 800129e:	f4ff af5d 	bcc.w	800115c <GFX_DrawChar+0x24>
 80012a2:	e000      	b.n	80012a6 <GFX_DrawChar+0x16e>
      return; // chr > '~'
 80012a4:	bf00      	nop
         }
      }
   }
}
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	20000294 	.word	0x20000294
 80012b0:	20000000 	.word	0x20000000

080012b4 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char *str, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	70fb      	strb	r3, [r7, #3]
   int x_tmp = x;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	617b      	str	r3, [r7, #20]

   char znak;
   znak = *str;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	74fb      	strb	r3, [r7, #19]

   while(*str++)
 80012cc:	e040      	b.n	8001350 <GFX_DrawString+0x9c>
   {
      GFX_DrawChar(x_tmp, y, znak, color, background, Screen); // Draw current char
 80012ce:	78f9      	ldrb	r1, [r7, #3]
 80012d0:	7cfa      	ldrb	r2, [r7, #19]
 80012d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	460b      	mov	r3, r1
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff28 	bl	8001138 <GFX_DrawChar>

      x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <GFX_DrawString+0xb4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <GFX_DrawString+0xb8>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	4413      	add	r3, r2
 8001300:	617b      	str	r3, [r7, #20]

      if(background == 0) // Draw black space if needed
 8001302:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d11f      	bne.n	800134a <GFX_DrawString+0x96>
      {
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800130a:	2300      	movs	r3, #0
 800130c:	74bb      	strb	r3, [r7, #18]
 800130e:	e011      	b.n	8001334 <GFX_DrawString+0x80>
         {
            GFX_DrawPixelScreen(x_tmp - 1, y + i, PIXEL_BLACK, Screen);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	b29b      	uxth	r3, r3
 8001314:	3b01      	subs	r3, #1
 8001316:	b298      	uxth	r0, r3
 8001318:	7cbb      	ldrb	r3, [r7, #18]
 800131a:	b29a      	uxth	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4413      	add	r3, r2
 8001322:	b299      	uxth	r1, r3
 8001324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001328:	2200      	movs	r2, #0
 800132a:	f7ff fecd 	bl	80010c8 <GFX_DrawPixelScreen>
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800132e:	7cbb      	ldrb	r3, [r7, #18]
 8001330:	3301      	adds	r3, #1
 8001332:	74bb      	strb	r3, [r7, #18]
 8001334:	7cba      	ldrb	r2, [r7, #18]
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <GFX_DrawString+0xb4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <GFX_DrawString+0xb8>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	fb01 f303 	mul.w	r3, r1, r3
 8001346:	429a      	cmp	r2, r3
 8001348:	dbe2      	blt.n	8001310 <GFX_DrawString+0x5c>
         }
      }

      znak = *str; // Next char
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	74fb      	strb	r3, [r7, #19]
   while(*str++)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1b8      	bne.n	80012ce <GFX_DrawString+0x1a>
   }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000294 	.word	0x20000294
 800136c:	20000000 	.word	0x20000000

08001370 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color, Screen_TypeDef Screen)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	; 0x30
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
   int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001388:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1acb      	subs	r3, r1, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	bfb8      	it	lt
 8001396:	425b      	neglt	r3, r3
 8001398:	429a      	cmp	r2, r3
 800139a:	bfcc      	ite	gt
 800139c:	2301      	movgt	r3, #1
 800139e:	2300      	movle	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	857b      	strh	r3, [r7, #42]	; 0x2a

   if(steep)
 80013a4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <GFX_WriteLine+0x54>
   {
      _swap_int(x_start, y_start);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	60bb      	str	r3, [r7, #8]
      _swap_int(x_end, y_end);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	623b      	str	r3, [r7, #32]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	603b      	str	r3, [r7, #0]
   }

   if(x_start > x_end)
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dd0b      	ble.n	80013e4 <GFX_WriteLine+0x74>
   {
      _swap_int(x_start, x_end);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	607b      	str	r3, [r7, #4]
      _swap_int(y_start, y_end);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	603b      	str	r3, [r7, #0]
   }

   int16_t dx, dy;
   dx = x_end - x_start;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	82fb      	strh	r3, [r7, #22]
   dy = abs(y_end - y_start);
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bfb8      	it	lt
 80013fc:	425b      	neglt	r3, r3
 80013fe:	82bb      	strh	r3, [r7, #20]

   int16_t err = dx / 2;
 8001400:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001404:	0fda      	lsrs	r2, r3, #31
 8001406:	4413      	add	r3, r2
 8001408:	105b      	asrs	r3, r3, #1
 800140a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   int16_t ystep;

   if(y_start < y_end)
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	da02      	bge.n	800141a <GFX_WriteLine+0xaa>
   {
      ystep = 1;
 8001414:	2301      	movs	r3, #1
 8001416:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001418:	e032      	b.n	8001480 <GFX_WriteLine+0x110>
   }
   else
   {
      ystep = -1;
 800141a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   }

   for(; x_start <= x_end; x_start++)
 8001420:	e02e      	b.n	8001480 <GFX_WriteLine+0x110>
   {
      if(steep)
 8001422:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00a      	beq.n	8001440 <GFX_WriteLine+0xd0>
      {
         GFX_DrawPixelScreen(y_start, x_start, color, Screen);
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	b298      	uxth	r0, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	b299      	uxth	r1, r3
 8001432:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001436:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800143a:	f7ff fe45 	bl	80010c8 <GFX_DrawPixelScreen>
 800143e:	e009      	b.n	8001454 <GFX_WriteLine+0xe4>
      }
      else
      {
         GFX_DrawPixelScreen(x_start, y_start, color, Screen);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	b298      	uxth	r0, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	b299      	uxth	r1, r3
 8001448:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800144c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001450:	f7ff fe3a 	bl	80010c8 <GFX_DrawPixelScreen>
      }
      err -= dy;
 8001454:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001456:	8abb      	ldrh	r3, [r7, #20]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      if(err < 0)
 800145e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001462:	2b00      	cmp	r3, #0
 8001464:	da09      	bge.n	800147a <GFX_WriteLine+0x10a>
      {
         y_start += ystep;
 8001466:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	4413      	add	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
         err += dx;
 8001470:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001472:	8afb      	ldrh	r3, [r7, #22]
 8001474:	4413      	add	r3, r2
 8001476:	b29b      	uxth	r3, r3
 8001478:	85fb      	strh	r3, [r7, #46]	; 0x2e
   for(; x_start <= x_end; x_start++)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	ddcc      	ble.n	8001422 <GFX_WriteLine+0xb2>
      }
   }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3730      	adds	r7, #48	; 0x30
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color, Screen_TypeDef Screen)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af02      	add	r7, sp, #8
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	70fb      	strb	r3, [r7, #3]
   GFX_WriteLine(x_start, y_start, x_start, y_start + h - 1, color, Screen);
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	1e5a      	subs	r2, r3, #1
 80014a8:	7e3b      	ldrb	r3, [r7, #24]
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4613      	mov	r3, r2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff ff5a 	bl	8001370 <GFX_WriteLine>
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color, Screen_TypeDef Screen)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	70fb      	strb	r3, [r7, #3]
   GFX_WriteLine(x_start, y_start, x_start + w - 1, y_start, color, Screen);
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	7e3b      	ldrb	r3, [r7, #24]
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	78fb      	ldrb	r3, [r7, #3]
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff ff42 	bl	8001370 <GFX_WriteLine>
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint8_t color, Screen_TypeDef Screen)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
   if(x_start == x_end)
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	d118      	bne.n	800153c <GFX_DrawLine+0x48>
   {
      if(y_start > y_end)
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	dd05      	ble.n	800151e <GFX_DrawLine+0x2a>
         _swap_int(y_start, y_end);
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	603b      	str	r3, [r7, #0]
      GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color, Screen);
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	f897 1020 	ldrb.w	r1, [r7, #32]
 800152a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	460b      	mov	r3, r1
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff ffac 	bl	8001492 <GFX_DrawFastVLine>
   else
   {

      GFX_WriteLine(x_start, y_start, x_end, y_end, color, Screen);
   }
}
 800153a:	e028      	b.n	800158e <GFX_DrawLine+0x9a>
   else if(y_start == y_end)
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d118      	bne.n	8001576 <GFX_DrawLine+0x82>
      if(x_start > x_end)
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dd05      	ble.n	8001558 <GFX_DrawLine+0x64>
         _swap_int(x_start, x_end);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	607b      	str	r3, [r7, #4]
      GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color, Screen);
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001564:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	460b      	mov	r3, r1
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff ffa8 	bl	80014c4 <GFX_DrawFastHLine>
}
 8001574:	e00b      	b.n	800158e <GFX_DrawLine+0x9a>
      GFX_WriteLine(x_start, y_start, x_end, y_end, color, Screen);
 8001576:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fef1 	bl	8001370 <GFX_WriteLine>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <GFX_DrawFillRectangle>:
   GFX_DrawFastVLine(x + w - 1, y, h, color, Screen);
}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color, Screen_TypeDef Screen)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b088      	sub	sp, #32
 800159a:	af02      	add	r7, sp, #8
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	4611      	mov	r1, r2
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	80fb      	strh	r3, [r7, #6]
 80015a8:	4613      	mov	r3, r2
 80015aa:	80bb      	strh	r3, [r7, #4]
   for(int i = x; i < x + w; i++)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e00d      	b.n	80015ce <GFX_DrawFillRectangle+0x38>
   {
      GFX_DrawFastVLine(i, y, h, color, Screen);
 80015b2:	88ba      	ldrh	r2, [r7, #4]
 80015b4:	f897 1020 	ldrb.w	r1, [r7, #32]
 80015b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	460b      	mov	r3, r1
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff65 	bl	8001492 <GFX_DrawFastVLine>
   for(int i = x; i < x + w; i++)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbeb      	blt.n	80015b2 <GFX_DrawFillRectangle+0x1c>
   }
}
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HC12_ExitCommandMode>:
void HC12_EnterCommandMode(void)
{
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 0);
}
void HC12_ExitCommandMode(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f2:	f00a fe9b 	bl	800c32c <HAL_GPIO_WritePin>
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HC12_TransmitData>:
void HC12_TransmitData(uint8_t *Data, uint32_t Length)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
   taskENTER_CRITICAL();
 8001606:	f014 fc8d 	bl	8015f24 <vPortEnterCritical>
   HAL_UART_Transmit(&huart1, Data, Length, 1000);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b29a      	uxth	r2, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <HC12_TransmitData+0x2c>)
 8001616:	f00f fa9d 	bl	8010b54 <HAL_UART_Transmit>
   taskEXIT_CRITICAL();
 800161a:	f014 fcb3 	bl	8015f84 <vPortExitCritical>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200044cc 	.word	0x200044cc

0800162c <HC12_ReciveToIdleDMA>:
void HC12_ReciveToIdleDMA(uint8_t *Data, uint32_t Length)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b29b      	uxth	r3, r3
 800163a:	461a      	mov	r2, r3
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4803      	ldr	r0, [pc, #12]	; (800164c <HC12_ReciveToIdleDMA+0x20>)
 8001640:	f010 fe62 	bl	8012308 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200044cc 	.word	0x200044cc

08001650 <HC12_Init>:
void HC12_Init(RFP_TypeDef *TempRfp, uint8_t *Buffer)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
   rfp      = TempRfp;
 800165a:	4a06      	ldr	r2, [pc, #24]	; (8001674 <HC12_Init+0x24>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6013      	str	r3, [r2, #0]
   HC12Data = Buffer;
 8001660:	4a05      	ldr	r2, [pc, #20]	; (8001678 <HC12_Init+0x28>)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	6013      	str	r3, [r2, #0]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000298 	.word	0x20000298
 8001678:	2000029c 	.word	0x2000029c

0800167c <MENU_ChangeState>:
                                                  { MENU_STATE_RUNNING, MENU_STATE_END, MENU_EVENT_END },
                                                  { MENU_EVENT_END, MENU_STATE_IDLE, MENU_EVENT_NOTHING } };
MenuFunctions_TypeDef StateFunction[]         = { { MENU_IdleFunction }, { MENU_ChoiseFunction }, { MENU_RunningFunction }, { MENU_EndFunction } };
Menu_TypeDef Menu                             = { 0 };
static void MENU_ChangeState(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	e027      	b.n	80016d8 <MENU_ChangeState+0x5c>
   {
      if(Menu.State == TransitionTable[i].Source && Menu.NewEvent == TransitionTable[i].Event)
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MENU_ChangeState+0x74>)
 800168a:	7a19      	ldrb	r1, [r3, #8]
 800168c:	4819      	ldr	r0, [pc, #100]	; (80016f4 <MENU_ChangeState+0x78>)
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	4403      	add	r3, r0
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	4299      	cmp	r1, r3
 800169c:	d119      	bne.n	80016d2 <MENU_ChangeState+0x56>
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MENU_ChangeState+0x74>)
 80016a0:	7a59      	ldrb	r1, [r3, #9]
 80016a2:	4814      	ldr	r0, [pc, #80]	; (80016f4 <MENU_ChangeState+0x78>)
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	4403      	add	r3, r0
 80016ae:	3302      	adds	r3, #2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	4299      	cmp	r1, r3
 80016b4:	d10d      	bne.n	80016d2 <MENU_ChangeState+0x56>
      {
         Menu.State    = TransitionTable[i].Destination;
 80016b6:	490f      	ldr	r1, [pc, #60]	; (80016f4 <MENU_ChangeState+0x78>)
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	3301      	adds	r3, #1
 80016c4:	781a      	ldrb	r2, [r3, #0]
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <MENU_ChangeState+0x74>)
 80016c8:	721a      	strb	r2, [r3, #8]
         Menu.NewEvent = MENU_EVENT_NOTHING;
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MENU_ChangeState+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	725a      	strb	r2, [r3, #9]
         return;
 80016d0:	e008      	b.n	80016e4 <MENU_ChangeState+0x68>
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3301      	adds	r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d9d4      	bls.n	8001688 <MENU_ChangeState+0xc>
      }
   }
   Menu.NewEvent = MENU_EVENT_NOTHING;
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <MENU_ChangeState+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	725a      	strb	r2, [r3, #9]
}
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	200002a0 	.word	0x200002a0
 80016f4:	20000004 	.word	0x20000004

080016f8 <MENU_Init>:
void MENU_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80016fc:	213c      	movs	r1, #60	; 0x3c
 80016fe:	4802      	ldr	r0, [pc, #8]	; (8001708 <MENU_Init+0x10>)
 8001700:	f00e f94f 	bl	800f9a2 <HAL_TIM_Encoder_Start>
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20004480 	.word	0x20004480

0800170c <MENU_Handler>:
void MENU_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
   MENU_ChangeState();
 8001710:	f7ff ffb4 	bl	800167c <MENU_ChangeState>
   if(StateFunction[Menu.State].MenuFunction != NULL)
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MENU_Handler+0x2c>)
 8001716:	7a1b      	ldrb	r3, [r3, #8]
 8001718:	461a      	mov	r2, r3
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <MENU_Handler+0x30>)
 800171c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <MENU_Handler+0x26>
   {
      StateFunction[Menu.State].MenuFunction();
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <MENU_Handler+0x2c>)
 8001726:	7a1b      	ldrb	r3, [r3, #8]
 8001728:	461a      	mov	r2, r3
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <MENU_Handler+0x30>)
 800172c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001730:	4798      	blx	r3
   }
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200002a0 	.word	0x200002a0
 800173c:	20000014 	.word	0x20000014

08001740 <MENU_IdleFunction>:
static void MENU_IdleFunction(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
   if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001744:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001748:	480e      	ldr	r0, [pc, #56]	; (8001784 <MENU_IdleFunction+0x44>)
 800174a:	f00a fdd7 	bl	800c2fc <HAL_GPIO_ReadPin>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d115      	bne.n	8001780 <MENU_IdleFunction+0x40>
   {
      osMutexAcquire(MenuMutexHandle, osWaitForever);
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <MENU_IdleFunction+0x48>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	4618      	mov	r0, r3
 800175e:	f011 f9b9 	bl	8012ad4 <osMutexAcquire>
      Menu.NewEvent = MENU_EVENT_NEW;
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <MENU_IdleFunction+0x4c>)
 8001764:	2201      	movs	r2, #1
 8001766:	725a      	strb	r2, [r3, #9]
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001768:	e002      	b.n	8001770 <MENU_IdleFunction+0x30>
      {
         osDelay(100);
 800176a:	2064      	movs	r0, #100	; 0x64
 800176c:	f010 ff96 	bl	801269c <osDelay>
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001774:	4803      	ldr	r0, [pc, #12]	; (8001784 <MENU_IdleFunction+0x44>)
 8001776:	f00a fdc1 	bl	800c2fc <HAL_GPIO_ReadPin>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f4      	beq.n	800176a <MENU_IdleFunction+0x2a>
      }
   }
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	48000400 	.word	0x48000400
 8001788:	20003e18 	.word	0x20003e18
 800178c:	200002a0 	.word	0x200002a0

08001790 <MENU_ChoiseFunction>:
static void MENU_ChoiseFunction(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b09c      	sub	sp, #112	; 0x70
 8001794:	af02      	add	r7, sp, #8
   char Temp[100];
   switch((TIM5->CNT / 4) % MENU_CHOISE_CNT)
 8001796:	4b95      	ldr	r3, [pc, #596]	; (80019ec <MENU_ChoiseFunction+0x25c>)
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	f200 80fa 	bhi.w	800199a <MENU_ChoiseFunction+0x20a>
 80017a6:	a201      	add	r2, pc, #4	; (adr r2, 80017ac <MENU_ChoiseFunction+0x1c>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	080017bd 	.word	0x080017bd
 80017b0:	0800182d 	.word	0x0800182d
 80017b4:	0800189d 	.word	0x0800189d
 80017b8:	0800190d 	.word	0x0800190d
   {
      case MENU_CHOISE_TIME:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80017bc:	4b8c      	ldr	r3, [pc, #560]	; (80019f0 <MENU_ChoiseFunction+0x260>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	4618      	mov	r0, r3
 80017c6:	f011 f985 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80017ca:	4b8a      	ldr	r3, [pc, #552]	; (80019f4 <MENU_ChoiseFunction+0x264>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f04f 31ff 	mov.w	r1, #4294967295
 80017d2:	4618      	mov	r0, r3
 80017d4:	f011 f97e 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80017d8:	4b87      	ldr	r3, [pc, #540]	; (80019f8 <MENU_ChoiseFunction+0x268>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	4618      	mov	r0, r3
 80017e2:	f011 f977 	bl	8012ad4 <osMutexAcquire>
         ssd1306_clear();
 80017e6:	f009 fadd 	bl	800ada4 <ssd1306_clear>
         sprintf(Temp, "Ustaw godzine");
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	4983      	ldr	r1, [pc, #524]	; (80019fc <MENU_ChoiseFunction+0x26c>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f008 fd5e 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80017f4:	1d3a      	adds	r2, r7, #4
 80017f6:	2300      	movs	r3, #0
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	2300      	movs	r3, #0
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2301      	movs	r3, #1
 8001800:	2100      	movs	r1, #0
 8001802:	2000      	movs	r0, #0
 8001804:	f7ff fd56 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001808:	f009 faa0 	bl	800ad4c <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 800180c:	4b7a      	ldr	r3, [pc, #488]	; (80019f8 <MENU_ChoiseFunction+0x268>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f011 f9aa 	bl	8012b6a <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001816:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <MENU_ChoiseFunction+0x264>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f011 f9a5 	bl	8012b6a <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001820:	4b73      	ldr	r3, [pc, #460]	; (80019f0 <MENU_ChoiseFunction+0x260>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f011 f9a0 	bl	8012b6a <osMutexRelease>
         break;
 800182a:	e0b7      	b.n	800199c <MENU_ChoiseFunction+0x20c>
      }
      case MENU_CHOISE_DATE:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800182c:	4b70      	ldr	r3, [pc, #448]	; (80019f0 <MENU_ChoiseFunction+0x260>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	4618      	mov	r0, r3
 8001836:	f011 f94d 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800183a:	4b6e      	ldr	r3, [pc, #440]	; (80019f4 <MENU_ChoiseFunction+0x264>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f04f 31ff 	mov.w	r1, #4294967295
 8001842:	4618      	mov	r0, r3
 8001844:	f011 f946 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001848:	4b6b      	ldr	r3, [pc, #428]	; (80019f8 <MENU_ChoiseFunction+0x268>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	4618      	mov	r0, r3
 8001852:	f011 f93f 	bl	8012ad4 <osMutexAcquire>
         ssd1306_clear();
 8001856:	f009 faa5 	bl	800ada4 <ssd1306_clear>
         sprintf(Temp, "Ustaw date");
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	4968      	ldr	r1, [pc, #416]	; (8001a00 <MENU_ChoiseFunction+0x270>)
 800185e:	4618      	mov	r0, r3
 8001860:	f008 fd26 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001864:	1d3a      	adds	r2, r7, #4
 8001866:	2300      	movs	r3, #0
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	2300      	movs	r3, #0
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2301      	movs	r3, #1
 8001870:	2100      	movs	r1, #0
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff fd1e 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001878:	f009 fa68 	bl	800ad4c <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 800187c:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <MENU_ChoiseFunction+0x268>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f011 f972 	bl	8012b6a <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001886:	4b5b      	ldr	r3, [pc, #364]	; (80019f4 <MENU_ChoiseFunction+0x264>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f011 f96d 	bl	8012b6a <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001890:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <MENU_ChoiseFunction+0x260>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f011 f968 	bl	8012b6a <osMutexRelease>
         break;
 800189a:	e07f      	b.n	800199c <MENU_ChoiseFunction+0x20c>
      }
      case MENU_CHOISE_CHART:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800189c:	4b54      	ldr	r3, [pc, #336]	; (80019f0 <MENU_ChoiseFunction+0x260>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	4618      	mov	r0, r3
 80018a6:	f011 f915 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80018aa:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <MENU_ChoiseFunction+0x264>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f04f 31ff 	mov.w	r1, #4294967295
 80018b2:	4618      	mov	r0, r3
 80018b4:	f011 f90e 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80018b8:	4b4f      	ldr	r3, [pc, #316]	; (80019f8 <MENU_ChoiseFunction+0x268>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	4618      	mov	r0, r3
 80018c2:	f011 f907 	bl	8012ad4 <osMutexAcquire>
         ssd1306_clear();
 80018c6:	f009 fa6d 	bl	800ada4 <ssd1306_clear>
         sprintf(Temp, "Wykresy");
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	494d      	ldr	r1, [pc, #308]	; (8001a04 <MENU_ChoiseFunction+0x274>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f008 fcee 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80018d4:	1d3a      	adds	r2, r7, #4
 80018d6:	2300      	movs	r3, #0
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	2300      	movs	r3, #0
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	2100      	movs	r1, #0
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff fce6 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 80018e8:	f009 fa30 	bl	800ad4c <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 80018ec:	4b42      	ldr	r3, [pc, #264]	; (80019f8 <MENU_ChoiseFunction+0x268>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f011 f93a 	bl	8012b6a <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 80018f6:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <MENU_ChoiseFunction+0x264>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f011 f935 	bl	8012b6a <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001900:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <MENU_ChoiseFunction+0x260>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f011 f930 	bl	8012b6a <osMutexRelease>
         break;
 800190a:	e047      	b.n	800199c <MENU_ChoiseFunction+0x20c>
      }
      case MENU_CHOISE_CLEAR_EXTERNAL_MEMORY:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <MENU_ChoiseFunction+0x260>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	4618      	mov	r0, r3
 8001916:	f011 f8dd 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800191a:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <MENU_ChoiseFunction+0x264>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f04f 31ff 	mov.w	r1, #4294967295
 8001922:	4618      	mov	r0, r3
 8001924:	f011 f8d6 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001928:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <MENU_ChoiseFunction+0x268>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	4618      	mov	r0, r3
 8001932:	f011 f8cf 	bl	8012ad4 <osMutexAcquire>
         ssd1306_clear();
 8001936:	f009 fa35 	bl	800ada4 <ssd1306_clear>
         sprintf(Temp, "Czyszczenie Pamieci");
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4932      	ldr	r1, [pc, #200]	; (8001a08 <MENU_ChoiseFunction+0x278>)
 800193e:	4618      	mov	r0, r3
 8001940:	f008 fcb6 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001944:	1d3a      	adds	r2, r7, #4
 8001946:	2300      	movs	r3, #0
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	2300      	movs	r3, #0
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2301      	movs	r3, #1
 8001950:	2100      	movs	r1, #0
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fcae 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "WYMAGA POTWIERDZENIA");
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	492c      	ldr	r1, [pc, #176]	; (8001a0c <MENU_ChoiseFunction+0x27c>)
 800195c:	4618      	mov	r0, r3
 800195e:	f008 fca7 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 10, Temp, WHITE, 0, OLED);
 8001962:	1d3a      	adds	r2, r7, #4
 8001964:	2300      	movs	r3, #0
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	2300      	movs	r3, #0
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2301      	movs	r3, #1
 800196e:	210a      	movs	r1, #10
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff fc9f 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001976:	f009 f9e9 	bl	800ad4c <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <MENU_ChoiseFunction+0x268>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f011 f8f3 	bl	8012b6a <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <MENU_ChoiseFunction+0x264>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f011 f8ee 	bl	8012b6a <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <MENU_ChoiseFunction+0x260>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f011 f8e9 	bl	8012b6a <osMutexRelease>
         break;
 8001998:	e000      	b.n	800199c <MENU_ChoiseFunction+0x20c>
      }
      default:
      {
         break;
 800199a:	bf00      	nop
      }
   }
   if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800199c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a0:	481b      	ldr	r0, [pc, #108]	; (8001a10 <MENU_ChoiseFunction+0x280>)
 80019a2:	f00a fcab 	bl	800c2fc <HAL_GPIO_ReadPin>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d11b      	bne.n	80019e4 <MENU_ChoiseFunction+0x254>
   {
      Menu.NewEvent  = MENU_EVENT_CHOISE;
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <MENU_ChoiseFunction+0x284>)
 80019ae:	2202      	movs	r2, #2
 80019b0:	725a      	strb	r2, [r3, #9]
      Menu.ChoiseCnt = (TIM5->CNT / 4) % MENU_CHOISE_CNT;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MENU_ChoiseFunction+0x25c>)
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	4a15      	ldr	r2, [pc, #84]	; (8001a14 <MENU_ChoiseFunction+0x284>)
 80019be:	6013      	str	r3, [r2, #0]
      TIM5->CNT      = 0;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <MENU_ChoiseFunction+0x25c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24
      Menu.f         = 0;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <MENU_ChoiseFunction+0x284>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	729a      	strb	r2, [r3, #10]
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80019cc:	e002      	b.n	80019d4 <MENU_ChoiseFunction+0x244>
      {
         osDelay(100);
 80019ce:	2064      	movs	r0, #100	; 0x64
 80019d0:	f010 fe64 	bl	801269c <osDelay>
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80019d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <MENU_ChoiseFunction+0x280>)
 80019da:	f00a fc8f 	bl	800c2fc <HAL_GPIO_ReadPin>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f4      	beq.n	80019ce <MENU_ChoiseFunction+0x23e>
      }
   }
}
 80019e4:	bf00      	nop
 80019e6:	3768      	adds	r7, #104	; 0x68
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40000c00 	.word	0x40000c00
 80019f0:	20003e04 	.word	0x20003e04
 80019f4:	20003e08 	.word	0x20003e08
 80019f8:	20003e0c 	.word	0x20003e0c
 80019fc:	0801bfd8 	.word	0x0801bfd8
 8001a00:	0801bfe8 	.word	0x0801bfe8
 8001a04:	0801bff4 	.word	0x0801bff4
 8001a08:	0801bffc 	.word	0x0801bffc
 8001a0c:	0801c010 	.word	0x0801c010
 8001a10:	48000400 	.word	0x48000400
 8001a14:	200002a0 	.word	0x200002a0

08001a18 <MENU_RunningFunction>:
static void MENU_RunningFunction(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b0b0      	sub	sp, #192	; 0xc0
 8001a1c:	af02      	add	r7, sp, #8
   char Temp[100];
   ChartDateAndType_TypeDef QueueChartData = { 0 };
 8001a1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	809a      	strh	r2, [r3, #4]
   switch(Menu.ChoiseCnt)
 8001a28:	4ba9      	ldr	r3, [pc, #676]	; (8001cd0 <MENU_RunningFunction+0x2b8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	f201 8233 	bhi.w	8002e98 <MENU_RunningFunction+0x1480>
 8001a32:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <MENU_RunningFunction+0x20>)
 8001a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a38:	08001a49 	.word	0x08001a49
 8001a3c:	08001e2b 	.word	0x08001e2b
 8001a40:	08002203 	.word	0x08002203
 8001a44:	08002b85 	.word	0x08002b85
   {
      case MENU_CHOISE_TIME:
      {
         RTC_TimeTypeDef RtcTime;
         RTC_DateTypeDef RtcDate;
         osMutexAcquire(RTCMutexHandle, osWaitForever);
 8001a48:	4ba2      	ldr	r3, [pc, #648]	; (8001cd4 <MENU_RunningFunction+0x2bc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	4618      	mov	r0, r3
 8001a52:	f011 f83f 	bl	8012ad4 <osMutexAcquire>
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8001a56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	489e      	ldr	r0, [pc, #632]	; (8001cd8 <MENU_RunningFunction+0x2c0>)
 8001a60:	f00c fcb4 	bl	800e3cc <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8001a64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	489a      	ldr	r0, [pc, #616]	; (8001cd8 <MENU_RunningFunction+0x2c0>)
 8001a6e:	f00c fd97 	bl	800e5a0 <HAL_RTC_GetDate>
         osMutexRelease(RTCMutexHandle);
 8001a72:	4b98      	ldr	r3, [pc, #608]	; (8001cd4 <MENU_RunningFunction+0x2bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f011 f877 	bl	8012b6a <osMutexRelease>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001a7c:	4b97      	ldr	r3, [pc, #604]	; (8001cdc <MENU_RunningFunction+0x2c4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	4618      	mov	r0, r3
 8001a86:	f011 f825 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001a8a:	4b95      	ldr	r3, [pc, #596]	; (8001ce0 <MENU_RunningFunction+0x2c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f04f 31ff 	mov.w	r1, #4294967295
 8001a92:	4618      	mov	r0, r3
 8001a94:	f011 f81e 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001a98:	4b92      	ldr	r3, [pc, #584]	; (8001ce4 <MENU_RunningFunction+0x2cc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f011 f817 	bl	8012ad4 <osMutexAcquire>
         ssd1306_clear();
 8001aa6:	f009 f97d 	bl	800ada4 <ssd1306_clear>
         sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8001aaa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001aba:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4989      	ldr	r1, [pc, #548]	; (8001ce8 <MENU_RunningFunction+0x2d0>)
 8001ac4:	f008 fbf4 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001ac8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001acc:	2300      	movs	r3, #0
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff fbeb 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001ade:	f009 f935 	bl	800ad4c <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001ae2:	4b80      	ldr	r3, [pc, #512]	; (8001ce4 <MENU_RunningFunction+0x2cc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f011 f83f 	bl	8012b6a <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001aec:	4b7c      	ldr	r3, [pc, #496]	; (8001ce0 <MENU_RunningFunction+0x2c8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f011 f83a 	bl	8012b6a <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001af6:	4b79      	ldr	r3, [pc, #484]	; (8001cdc <MENU_RunningFunction+0x2c4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f011 f835 	bl	8012b6a <osMutexRelease>
         while(Menu.f == 0)
 8001b00:	e18c      	b.n	8001e1c <MENU_RunningFunction+0x404>
         {
            if(Menu.ButtonCnt == 0)
 8001b02:	4b73      	ldr	r3, [pc, #460]	; (8001cd0 <MENU_RunningFunction+0x2b8>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d16e      	bne.n	8001be8 <MENU_RunningFunction+0x1d0>
            {
               RtcTime.Hours = (TIM5->CNT / 4) % 24;
 8001b0a:	4b78      	ldr	r3, [pc, #480]	; (8001cec <MENU_RunningFunction+0x2d4>)
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	0899      	lsrs	r1, r3, #2
 8001b10:	4b77      	ldr	r3, [pc, #476]	; (8001cf0 <MENU_RunningFunction+0x2d8>)
 8001b12:	fba3 2301 	umull	r2, r3, r3, r1
 8001b16:	091a      	lsrs	r2, r3, #4
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	1aca      	subs	r2, r1, r3
 8001b22:	b2d3      	uxtb	r3, r2
 8001b24:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001b28:	4b6c      	ldr	r3, [pc, #432]	; (8001cdc <MENU_RunningFunction+0x2c4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	4618      	mov	r0, r3
 8001b32:	f010 ffcf 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001b36:	4b6a      	ldr	r3, [pc, #424]	; (8001ce0 <MENU_RunningFunction+0x2c8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f010 ffc8 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001b44:	4b67      	ldr	r3, [pc, #412]	; (8001ce4 <MENU_RunningFunction+0x2cc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f010 ffc1 	bl	8012ad4 <osMutexAcquire>
               ssd1306_clear();
 8001b52:	f009 f927 	bl	800ada4 <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8001b56:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001b60:	4619      	mov	r1, r3
 8001b62:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001b66:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	495e      	ldr	r1, [pc, #376]	; (8001ce8 <MENU_RunningFunction+0x2d0>)
 8001b70:	f008 fb9e 	bl	800a2b0 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001b74:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	2100      	movs	r1, #0
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff fb95 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8001b8a:	f009 f8df 	bl	800ad4c <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8001b8e:	4b55      	ldr	r3, [pc, #340]	; (8001ce4 <MENU_RunningFunction+0x2cc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f010 ffe9 	bl	8012b6a <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8001b98:	4b51      	ldr	r3, [pc, #324]	; (8001ce0 <MENU_RunningFunction+0x2c8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f010 ffe4 	bl	8012b6a <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8001ba2:	4b4e      	ldr	r3, [pc, #312]	; (8001cdc <MENU_RunningFunction+0x2c4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f010 ffdf 	bl	8012b6a <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001bac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bb0:	4850      	ldr	r0, [pc, #320]	; (8001cf4 <MENU_RunningFunction+0x2dc>)
 8001bb2:	f00a fba3 	bl	800c2fc <HAL_GPIO_ReadPin>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f040 812c 	bne.w	8001e16 <MENU_RunningFunction+0x3fe>
               {
                  Menu.ButtonCnt++;
 8001bbe:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <MENU_RunningFunction+0x2b8>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4a42      	ldr	r2, [pc, #264]	; (8001cd0 <MENU_RunningFunction+0x2b8>)
 8001bc6:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8001bc8:	4b48      	ldr	r3, [pc, #288]	; (8001cec <MENU_RunningFunction+0x2d4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001bce:	e002      	b.n	8001bd6 <MENU_RunningFunction+0x1be>
                  {
                     osDelay(100);
 8001bd0:	2064      	movs	r0, #100	; 0x64
 8001bd2:	f010 fd63 	bl	801269c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001bd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bda:	4846      	ldr	r0, [pc, #280]	; (8001cf4 <MENU_RunningFunction+0x2dc>)
 8001bdc:	f00a fb8e 	bl	800c2fc <HAL_GPIO_ReadPin>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f4      	beq.n	8001bd0 <MENU_RunningFunction+0x1b8>
 8001be6:	e116      	b.n	8001e16 <MENU_RunningFunction+0x3fe>
                  }
               }
            }
            else if(Menu.ButtonCnt == 1)
 8001be8:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <MENU_RunningFunction+0x2b8>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	f040 8085 	bne.w	8001cfc <MENU_RunningFunction+0x2e4>
            {
               RtcTime.Minutes = (TIM5->CNT / 4) % 60;
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <MENU_RunningFunction+0x2d4>)
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	0899      	lsrs	r1, r3, #2
 8001bf8:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <MENU_RunningFunction+0x2e0>)
 8001bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8001bfe:	095a      	lsrs	r2, r3, #5
 8001c00:	4613      	mov	r3, r2
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	1aca      	subs	r2, r1, r3
 8001c0a:	b2d3      	uxtb	r3, r2
 8001c0c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001c10:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <MENU_RunningFunction+0x2c4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f010 ff5b 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001c1e:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <MENU_RunningFunction+0x2c8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f04f 31ff 	mov.w	r1, #4294967295
 8001c26:	4618      	mov	r0, r3
 8001c28:	f010 ff54 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <MENU_RunningFunction+0x2cc>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	4618      	mov	r0, r3
 8001c36:	f010 ff4d 	bl	8012ad4 <osMutexAcquire>
               ssd1306_clear();
 8001c3a:	f009 f8b3 	bl	800ada4 <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8001c3e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c42:	461a      	mov	r2, r3
 8001c44:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001c4e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	460b      	mov	r3, r1
 8001c56:	4924      	ldr	r1, [pc, #144]	; (8001ce8 <MENU_RunningFunction+0x2d0>)
 8001c58:	f008 fb2a 	bl	800a2b0 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001c5c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001c60:	2300      	movs	r3, #0
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	2300      	movs	r3, #0
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2301      	movs	r3, #1
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f7ff fb21 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8001c72:	f009 f86b 	bl	800ad4c <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <MENU_RunningFunction+0x2cc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f010 ff75 	bl	8012b6a <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <MENU_RunningFunction+0x2c8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f010 ff70 	bl	8012b6a <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <MENU_RunningFunction+0x2c4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f010 ff6b 	bl	8012b6a <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001c94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c98:	4816      	ldr	r0, [pc, #88]	; (8001cf4 <MENU_RunningFunction+0x2dc>)
 8001c9a:	f00a fb2f 	bl	800c2fc <HAL_GPIO_ReadPin>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f040 80b8 	bne.w	8001e16 <MENU_RunningFunction+0x3fe>
               {
                  Menu.ButtonCnt++;
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <MENU_RunningFunction+0x2b8>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	3301      	adds	r3, #1
 8001cac:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <MENU_RunningFunction+0x2b8>)
 8001cae:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <MENU_RunningFunction+0x2d4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001cb6:	e002      	b.n	8001cbe <MENU_RunningFunction+0x2a6>
                  {
                     osDelay(100);
 8001cb8:	2064      	movs	r0, #100	; 0x64
 8001cba:	f010 fcef 	bl	801269c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001cbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc2:	480c      	ldr	r0, [pc, #48]	; (8001cf4 <MENU_RunningFunction+0x2dc>)
 8001cc4:	f00a fb1a 	bl	800c2fc <HAL_GPIO_ReadPin>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f4      	beq.n	8001cb8 <MENU_RunningFunction+0x2a0>
 8001cce:	e0a2      	b.n	8001e16 <MENU_RunningFunction+0x3fe>
 8001cd0:	200002a0 	.word	0x200002a0
 8001cd4:	20003e1c 	.word	0x20003e1c
 8001cd8:	20003f48 	.word	0x20003f48
 8001cdc:	20003e04 	.word	0x20003e04
 8001ce0:	20003e08 	.word	0x20003e08
 8001ce4:	20003e0c 	.word	0x20003e0c
 8001ce8:	0801c028 	.word	0x0801c028
 8001cec:	40000c00 	.word	0x40000c00
 8001cf0:	aaaaaaab 	.word	0xaaaaaaab
 8001cf4:	48000400 	.word	0x48000400
 8001cf8:	88888889 	.word	0x88888889
                  }
               }
            }
            else
            {
               RtcTime.Seconds = (TIM5->CNT / 4) % 60;
 8001cfc:	4bb2      	ldr	r3, [pc, #712]	; (8001fc8 <MENU_RunningFunction+0x5b0>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	0899      	lsrs	r1, r3, #2
 8001d02:	4bb2      	ldr	r3, [pc, #712]	; (8001fcc <MENU_RunningFunction+0x5b4>)
 8001d04:	fba3 2301 	umull	r2, r3, r3, r1
 8001d08:	095a      	lsrs	r2, r3, #5
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	1aca      	subs	r2, r1, r3
 8001d14:	b2d3      	uxtb	r3, r2
 8001d16:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001d1a:	4bad      	ldr	r3, [pc, #692]	; (8001fd0 <MENU_RunningFunction+0x5b8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d22:	4618      	mov	r0, r3
 8001d24:	f010 fed6 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001d28:	4baa      	ldr	r3, [pc, #680]	; (8001fd4 <MENU_RunningFunction+0x5bc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	4618      	mov	r0, r3
 8001d32:	f010 fecf 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001d36:	4ba8      	ldr	r3, [pc, #672]	; (8001fd8 <MENU_RunningFunction+0x5c0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f010 fec8 	bl	8012ad4 <osMutexAcquire>
               ssd1306_clear();
 8001d44:	f009 f82e 	bl	800ada4 <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8001d48:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001d52:	4619      	mov	r1, r3
 8001d54:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001d58:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	499e      	ldr	r1, [pc, #632]	; (8001fdc <MENU_RunningFunction+0x5c4>)
 8001d62:	f008 faa5 	bl	800a2b0 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001d66:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2301      	movs	r3, #1
 8001d74:	2100      	movs	r1, #0
 8001d76:	2000      	movs	r0, #0
 8001d78:	f7ff fa9c 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8001d7c:	f008 ffe6 	bl	800ad4c <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8001d80:	4b95      	ldr	r3, [pc, #596]	; (8001fd8 <MENU_RunningFunction+0x5c0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f010 fef0 	bl	8012b6a <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8001d8a:	4b92      	ldr	r3, [pc, #584]	; (8001fd4 <MENU_RunningFunction+0x5bc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f010 feeb 	bl	8012b6a <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8001d94:	4b8e      	ldr	r3, [pc, #568]	; (8001fd0 <MENU_RunningFunction+0x5b8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f010 fee6 	bl	8012b6a <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001d9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001da2:	488f      	ldr	r0, [pc, #572]	; (8001fe0 <MENU_RunningFunction+0x5c8>)
 8001da4:	f00a faaa 	bl	800c2fc <HAL_GPIO_ReadPin>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d133      	bne.n	8001e16 <MENU_RunningFunction+0x3fe>
               {
                  Menu.ButtonCnt++;
 8001dae:	4b8d      	ldr	r3, [pc, #564]	; (8001fe4 <MENU_RunningFunction+0x5cc>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	3301      	adds	r3, #1
 8001db4:	4a8b      	ldr	r2, [pc, #556]	; (8001fe4 <MENU_RunningFunction+0x5cc>)
 8001db6:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8001db8:	4b83      	ldr	r3, [pc, #524]	; (8001fc8 <MENU_RunningFunction+0x5b0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001dbe:	e002      	b.n	8001dc6 <MENU_RunningFunction+0x3ae>
                  {
                     osDelay(100);
 8001dc0:	2064      	movs	r0, #100	; 0x64
 8001dc2:	f010 fc6b 	bl	801269c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001dc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dca:	4885      	ldr	r0, [pc, #532]	; (8001fe0 <MENU_RunningFunction+0x5c8>)
 8001dcc:	f00a fa96 	bl	800c2fc <HAL_GPIO_ReadPin>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f4      	beq.n	8001dc0 <MENU_RunningFunction+0x3a8>
                  }
                  Menu.ButtonCnt = 0;
 8001dd6:	4b83      	ldr	r3, [pc, #524]	; (8001fe4 <MENU_RunningFunction+0x5cc>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	605a      	str	r2, [r3, #4]
                  Menu.f         = 1;
 8001ddc:	4b81      	ldr	r3, [pc, #516]	; (8001fe4 <MENU_RunningFunction+0x5cc>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	729a      	strb	r2, [r3, #10]
                  osMutexAcquire(RTCMutexHandle, osWaitForever);
 8001de2:	4b81      	ldr	r3, [pc, #516]	; (8001fe8 <MENU_RunningFunction+0x5d0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f04f 31ff 	mov.w	r1, #4294967295
 8001dea:	4618      	mov	r0, r3
 8001dec:	f010 fe72 	bl	8012ad4 <osMutexAcquire>
                  while(HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8001df0:	e002      	b.n	8001df8 <MENU_RunningFunction+0x3e0>
                  {
                     osDelay(100);
 8001df2:	2064      	movs	r0, #100	; 0x64
 8001df4:	f010 fc52 	bl	801269c <osDelay>
                  while(HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8001df8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	4619      	mov	r1, r3
 8001e00:	487a      	ldr	r0, [pc, #488]	; (8001fec <MENU_RunningFunction+0x5d4>)
 8001e02:	f00c fa43 	bl	800e28c <HAL_RTC_SetTime>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f2      	bne.n	8001df2 <MENU_RunningFunction+0x3da>
                  }
                  osMutexRelease(RTCMutexHandle);
 8001e0c:	4b76      	ldr	r3, [pc, #472]	; (8001fe8 <MENU_RunningFunction+0x5d0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f010 feaa 	bl	8012b6a <osMutexRelease>
               }
            }
            osDelay(50);
 8001e16:	2032      	movs	r0, #50	; 0x32
 8001e18:	f010 fc40 	bl	801269c <osDelay>
         while(Menu.f == 0)
 8001e1c:	4b71      	ldr	r3, [pc, #452]	; (8001fe4 <MENU_RunningFunction+0x5cc>)
 8001e1e:	7a9b      	ldrb	r3, [r3, #10]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f43f ae6e 	beq.w	8001b02 <MENU_RunningFunction+0xea>
         }
         break;
 8001e26:	f001 b838 	b.w	8002e9a <MENU_RunningFunction+0x1482>
      }
      case MENU_CHOISE_DATE:
      {
         RTC_TimeTypeDef RtcTime;
         RTC_DateTypeDef RtcDate;
         osMutexAcquire(RTCMutexHandle, osWaitForever);
 8001e2a:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <MENU_RunningFunction+0x5d0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e32:	4618      	mov	r0, r3
 8001e34:	f010 fe4e 	bl	8012ad4 <osMutexAcquire>
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8001e38:	f107 0320 	add.w	r3, r7, #32
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4619      	mov	r1, r3
 8001e40:	486a      	ldr	r0, [pc, #424]	; (8001fec <MENU_RunningFunction+0x5d4>)
 8001e42:	f00c fac3 	bl	800e3cc <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4867      	ldr	r0, [pc, #412]	; (8001fec <MENU_RunningFunction+0x5d4>)
 8001e50:	f00c fba6 	bl	800e5a0 <HAL_RTC_GetDate>
         osMutexRelease(RTCMutexHandle);
 8001e54:	4b64      	ldr	r3, [pc, #400]	; (8001fe8 <MENU_RunningFunction+0x5d0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f010 fe86 	bl	8012b6a <osMutexRelease>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001e5e:	4b5c      	ldr	r3, [pc, #368]	; (8001fd0 <MENU_RunningFunction+0x5b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f04f 31ff 	mov.w	r1, #4294967295
 8001e66:	4618      	mov	r0, r3
 8001e68:	f010 fe34 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001e6c:	4b59      	ldr	r3, [pc, #356]	; (8001fd4 <MENU_RunningFunction+0x5bc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295
 8001e74:	4618      	mov	r0, r3
 8001e76:	f010 fe2d 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001e7a:	4b57      	ldr	r3, [pc, #348]	; (8001fd8 <MENU_RunningFunction+0x5c0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e82:	4618      	mov	r0, r3
 8001e84:	f010 fe26 	bl	8012ad4 <osMutexAcquire>
         ssd1306_clear();
 8001e88:	f008 ff8c 	bl	800ada4 <ssd1306_clear>
         sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8001e8c:	7fbb      	ldrb	r3, [r7, #30]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	7f7b      	ldrb	r3, [r7, #29]
 8001e92:	4619      	mov	r1, r3
 8001e94:	7ffb      	ldrb	r3, [r7, #31]
 8001e96:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4954      	ldr	r1, [pc, #336]	; (8001ff0 <MENU_RunningFunction+0x5d8>)
 8001ea0:	f008 fa06 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001ea4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	2300      	movs	r3, #0
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff f9fd 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001eba:	f008 ff47 	bl	800ad4c <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001ebe:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <MENU_RunningFunction+0x5c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f010 fe51 	bl	8012b6a <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001ec8:	4b42      	ldr	r3, [pc, #264]	; (8001fd4 <MENU_RunningFunction+0x5bc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f010 fe4c 	bl	8012b6a <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001ed2:	4b3f      	ldr	r3, [pc, #252]	; (8001fd0 <MENU_RunningFunction+0x5b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f010 fe47 	bl	8012b6a <osMutexRelease>
         while(Menu.f == 0)
 8001edc:	e18a      	b.n	80021f4 <MENU_RunningFunction+0x7dc>
         {
            if(Menu.ButtonCnt == 0)
 8001ede:	4b41      	ldr	r3, [pc, #260]	; (8001fe4 <MENU_RunningFunction+0x5cc>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 8088 	bne.w	8001ff8 <MENU_RunningFunction+0x5e0>
            {
               RtcDate.Date = (TIM5->CNT / 4) % 31 + 1;
 8001ee8:	4b37      	ldr	r3, [pc, #220]	; (8001fc8 <MENU_RunningFunction+0x5b0>)
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	089a      	lsrs	r2, r3, #2
 8001eee:	4b41      	ldr	r3, [pc, #260]	; (8001ff4 <MENU_RunningFunction+0x5dc>)
 8001ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ef4:	1ad1      	subs	r1, r2, r3
 8001ef6:	0849      	lsrs	r1, r1, #1
 8001ef8:	440b      	add	r3, r1
 8001efa:	0919      	lsrs	r1, r3, #4
 8001efc:	460b      	mov	r3, r1
 8001efe:	015b      	lsls	r3, r3, #5
 8001f00:	1a5b      	subs	r3, r3, r1
 8001f02:	1ad1      	subs	r1, r2, r3
 8001f04:	b2cb      	uxtb	r3, r1
 8001f06:	3301      	adds	r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	77bb      	strb	r3, [r7, #30]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001f0c:	4b30      	ldr	r3, [pc, #192]	; (8001fd0 <MENU_RunningFunction+0x5b8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	4618      	mov	r0, r3
 8001f16:	f010 fddd 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <MENU_RunningFunction+0x5bc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f22:	4618      	mov	r0, r3
 8001f24:	f010 fdd6 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001f28:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <MENU_RunningFunction+0x5c0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	4618      	mov	r0, r3
 8001f32:	f010 fdcf 	bl	8012ad4 <osMutexAcquire>
               ssd1306_clear();
 8001f36:	f008 ff35 	bl	800ada4 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8001f3a:	7fbb      	ldrb	r3, [r7, #30]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	7f7b      	ldrb	r3, [r7, #29]
 8001f40:	4619      	mov	r1, r3
 8001f42:	7ffb      	ldrb	r3, [r7, #31]
 8001f44:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4928      	ldr	r1, [pc, #160]	; (8001ff0 <MENU_RunningFunction+0x5d8>)
 8001f4e:	f008 f9af 	bl	800a2b0 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001f52:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001f56:	2300      	movs	r3, #0
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2301      	movs	r3, #1
 8001f60:	2100      	movs	r1, #0
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7ff f9a6 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8001f68:	f008 fef0 	bl	800ad4c <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <MENU_RunningFunction+0x5c0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f010 fdfa 	bl	8012b6a <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <MENU_RunningFunction+0x5bc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f010 fdf5 	bl	8012b6a <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <MENU_RunningFunction+0x5b8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f010 fdf0 	bl	8012b6a <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001f8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f8e:	4814      	ldr	r0, [pc, #80]	; (8001fe0 <MENU_RunningFunction+0x5c8>)
 8001f90:	f00a f9b4 	bl	800c2fc <HAL_GPIO_ReadPin>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 8129 	bne.w	80021ee <MENU_RunningFunction+0x7d6>
               {
                  Menu.ButtonCnt++;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <MENU_RunningFunction+0x5cc>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <MENU_RunningFunction+0x5cc>)
 8001fa4:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <MENU_RunningFunction+0x5b0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001fac:	e002      	b.n	8001fb4 <MENU_RunningFunction+0x59c>
                  {
                     osDelay(100);
 8001fae:	2064      	movs	r0, #100	; 0x64
 8001fb0:	f010 fb74 	bl	801269c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001fb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fb8:	4809      	ldr	r0, [pc, #36]	; (8001fe0 <MENU_RunningFunction+0x5c8>)
 8001fba:	f00a f99f 	bl	800c2fc <HAL_GPIO_ReadPin>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f4      	beq.n	8001fae <MENU_RunningFunction+0x596>
 8001fc4:	e113      	b.n	80021ee <MENU_RunningFunction+0x7d6>
 8001fc6:	bf00      	nop
 8001fc8:	40000c00 	.word	0x40000c00
 8001fcc:	88888889 	.word	0x88888889
 8001fd0:	20003e04 	.word	0x20003e04
 8001fd4:	20003e08 	.word	0x20003e08
 8001fd8:	20003e0c 	.word	0x20003e0c
 8001fdc:	0801c028 	.word	0x0801c028
 8001fe0:	48000400 	.word	0x48000400
 8001fe4:	200002a0 	.word	0x200002a0
 8001fe8:	20003e1c 	.word	0x20003e1c
 8001fec:	20003f48 	.word	0x20003f48
 8001ff0:	0801c038 	.word	0x0801c038
 8001ff4:	08421085 	.word	0x08421085
                  }
               }
            }
            else if(Menu.ButtonCnt == 1)
 8001ff8:	4bb0      	ldr	r3, [pc, #704]	; (80022bc <MENU_RunningFunction+0x8a4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d16c      	bne.n	80020da <MENU_RunningFunction+0x6c2>
            {
               RtcDate.Month = (TIM5->CNT / 4) % 12 + 1;
 8002000:	4baf      	ldr	r3, [pc, #700]	; (80022c0 <MENU_RunningFunction+0x8a8>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	0899      	lsrs	r1, r3, #2
 8002006:	4baf      	ldr	r3, [pc, #700]	; (80022c4 <MENU_RunningFunction+0x8ac>)
 8002008:	fba3 2301 	umull	r2, r3, r3, r1
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	1aca      	subs	r2, r1, r3
 8002018:	b2d3      	uxtb	r3, r2
 800201a:	3301      	adds	r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	777b      	strb	r3, [r7, #29]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002020:	4ba9      	ldr	r3, [pc, #676]	; (80022c8 <MENU_RunningFunction+0x8b0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	4618      	mov	r0, r3
 800202a:	f010 fd53 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800202e:	4ba7      	ldr	r3, [pc, #668]	; (80022cc <MENU_RunningFunction+0x8b4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f04f 31ff 	mov.w	r1, #4294967295
 8002036:	4618      	mov	r0, r3
 8002038:	f010 fd4c 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800203c:	4ba4      	ldr	r3, [pc, #656]	; (80022d0 <MENU_RunningFunction+0x8b8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	4618      	mov	r0, r3
 8002046:	f010 fd45 	bl	8012ad4 <osMutexAcquire>
               ssd1306_clear();
 800204a:	f008 feab 	bl	800ada4 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 800204e:	7fbb      	ldrb	r3, [r7, #30]
 8002050:	461a      	mov	r2, r3
 8002052:	7f7b      	ldrb	r3, [r7, #29]
 8002054:	4619      	mov	r1, r3
 8002056:	7ffb      	ldrb	r3, [r7, #31]
 8002058:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	460b      	mov	r3, r1
 8002060:	499c      	ldr	r1, [pc, #624]	; (80022d4 <MENU_RunningFunction+0x8bc>)
 8002062:	f008 f925 	bl	800a2b0 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002066:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800206a:	2300      	movs	r3, #0
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	2300      	movs	r3, #0
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2301      	movs	r3, #1
 8002074:	2100      	movs	r1, #0
 8002076:	2000      	movs	r0, #0
 8002078:	f7ff f91c 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 800207c:	f008 fe66 	bl	800ad4c <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002080:	4b93      	ldr	r3, [pc, #588]	; (80022d0 <MENU_RunningFunction+0x8b8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f010 fd70 	bl	8012b6a <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 800208a:	4b90      	ldr	r3, [pc, #576]	; (80022cc <MENU_RunningFunction+0x8b4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f010 fd6b 	bl	8012b6a <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002094:	4b8c      	ldr	r3, [pc, #560]	; (80022c8 <MENU_RunningFunction+0x8b0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f010 fd66 	bl	8012b6a <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800209e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020a2:	488d      	ldr	r0, [pc, #564]	; (80022d8 <MENU_RunningFunction+0x8c0>)
 80020a4:	f00a f92a 	bl	800c2fc <HAL_GPIO_ReadPin>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 809f 	bne.w	80021ee <MENU_RunningFunction+0x7d6>
               {
                  Menu.ButtonCnt++;
 80020b0:	4b82      	ldr	r3, [pc, #520]	; (80022bc <MENU_RunningFunction+0x8a4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	3301      	adds	r3, #1
 80020b6:	4a81      	ldr	r2, [pc, #516]	; (80022bc <MENU_RunningFunction+0x8a4>)
 80020b8:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 80020ba:	4b81      	ldr	r3, [pc, #516]	; (80022c0 <MENU_RunningFunction+0x8a8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80020c0:	e002      	b.n	80020c8 <MENU_RunningFunction+0x6b0>
                  {
                     osDelay(100);
 80020c2:	2064      	movs	r0, #100	; 0x64
 80020c4:	f010 faea 	bl	801269c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80020c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020cc:	4882      	ldr	r0, [pc, #520]	; (80022d8 <MENU_RunningFunction+0x8c0>)
 80020ce:	f00a f915 	bl	800c2fc <HAL_GPIO_ReadPin>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f4      	beq.n	80020c2 <MENU_RunningFunction+0x6aa>
 80020d8:	e089      	b.n	80021ee <MENU_RunningFunction+0x7d6>
                  }
               }
            }
            else
            {
               RtcDate.Year = (TIM5->CNT / 4) % 99;
 80020da:	4b79      	ldr	r3, [pc, #484]	; (80022c0 <MENU_RunningFunction+0x8a8>)
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	0899      	lsrs	r1, r3, #2
 80020e0:	4b7e      	ldr	r3, [pc, #504]	; (80022dc <MENU_RunningFunction+0x8c4>)
 80020e2:	fba3 2301 	umull	r2, r3, r3, r1
 80020e6:	099a      	lsrs	r2, r3, #6
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	4413      	add	r3, r2
 80020f2:	1aca      	subs	r2, r1, r3
 80020f4:	b2d3      	uxtb	r3, r2
 80020f6:	77fb      	strb	r3, [r7, #31]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80020f8:	4b73      	ldr	r3, [pc, #460]	; (80022c8 <MENU_RunningFunction+0x8b0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	4618      	mov	r0, r3
 8002102:	f010 fce7 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002106:	4b71      	ldr	r3, [pc, #452]	; (80022cc <MENU_RunningFunction+0x8b4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f04f 31ff 	mov.w	r1, #4294967295
 800210e:	4618      	mov	r0, r3
 8002110:	f010 fce0 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002114:	4b6e      	ldr	r3, [pc, #440]	; (80022d0 <MENU_RunningFunction+0x8b8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	4618      	mov	r0, r3
 800211e:	f010 fcd9 	bl	8012ad4 <osMutexAcquire>
               ssd1306_clear();
 8002122:	f008 fe3f 	bl	800ada4 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002126:	7fbb      	ldrb	r3, [r7, #30]
 8002128:	461a      	mov	r2, r3
 800212a:	7f7b      	ldrb	r3, [r7, #29]
 800212c:	4619      	mov	r1, r3
 800212e:	7ffb      	ldrb	r3, [r7, #31]
 8002130:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	460b      	mov	r3, r1
 8002138:	4966      	ldr	r1, [pc, #408]	; (80022d4 <MENU_RunningFunction+0x8bc>)
 800213a:	f008 f8b9 	bl	800a2b0 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 800213e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002142:	2300      	movs	r3, #0
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	2300      	movs	r3, #0
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2301      	movs	r3, #1
 800214c:	2100      	movs	r1, #0
 800214e:	2000      	movs	r0, #0
 8002150:	f7ff f8b0 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002154:	f008 fdfa 	bl	800ad4c <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002158:	4b5d      	ldr	r3, [pc, #372]	; (80022d0 <MENU_RunningFunction+0x8b8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f010 fd04 	bl	8012b6a <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002162:	4b5a      	ldr	r3, [pc, #360]	; (80022cc <MENU_RunningFunction+0x8b4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f010 fcff 	bl	8012b6a <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 800216c:	4b56      	ldr	r3, [pc, #344]	; (80022c8 <MENU_RunningFunction+0x8b0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f010 fcfa 	bl	8012b6a <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002176:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800217a:	4857      	ldr	r0, [pc, #348]	; (80022d8 <MENU_RunningFunction+0x8c0>)
 800217c:	f00a f8be 	bl	800c2fc <HAL_GPIO_ReadPin>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d133      	bne.n	80021ee <MENU_RunningFunction+0x7d6>
               {
                  Menu.ButtonCnt++;
 8002186:	4b4d      	ldr	r3, [pc, #308]	; (80022bc <MENU_RunningFunction+0x8a4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	3301      	adds	r3, #1
 800218c:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <MENU_RunningFunction+0x8a4>)
 800218e:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002190:	4b4b      	ldr	r3, [pc, #300]	; (80022c0 <MENU_RunningFunction+0x8a8>)
 8002192:	2200      	movs	r2, #0
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002196:	e002      	b.n	800219e <MENU_RunningFunction+0x786>
                  {
                     osDelay(100);
 8002198:	2064      	movs	r0, #100	; 0x64
 800219a:	f010 fa7f 	bl	801269c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800219e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021a2:	484d      	ldr	r0, [pc, #308]	; (80022d8 <MENU_RunningFunction+0x8c0>)
 80021a4:	f00a f8aa 	bl	800c2fc <HAL_GPIO_ReadPin>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f4      	beq.n	8002198 <MENU_RunningFunction+0x780>
                  }
                  Menu.ButtonCnt = 0;
 80021ae:	4b43      	ldr	r3, [pc, #268]	; (80022bc <MENU_RunningFunction+0x8a4>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
                  Menu.f         = 1;
 80021b4:	4b41      	ldr	r3, [pc, #260]	; (80022bc <MENU_RunningFunction+0x8a4>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	729a      	strb	r2, [r3, #10]
                  osMutexAcquire(RTCMutexHandle, osWaitForever);
 80021ba:	4b49      	ldr	r3, [pc, #292]	; (80022e0 <MENU_RunningFunction+0x8c8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f04f 31ff 	mov.w	r1, #4294967295
 80021c2:	4618      	mov	r0, r3
 80021c4:	f010 fc86 	bl	8012ad4 <osMutexAcquire>
                  while(HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 80021c8:	e002      	b.n	80021d0 <MENU_RunningFunction+0x7b8>
                  {
                     osDelay(100);
 80021ca:	2064      	movs	r0, #100	; 0x64
 80021cc:	f010 fa66 	bl	801269c <osDelay>
                  while(HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	2200      	movs	r2, #0
 80021d6:	4619      	mov	r1, r3
 80021d8:	4842      	ldr	r0, [pc, #264]	; (80022e4 <MENU_RunningFunction+0x8cc>)
 80021da:	f00c f959 	bl	800e490 <HAL_RTC_SetDate>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f2      	bne.n	80021ca <MENU_RunningFunction+0x7b2>
                  }
                  osMutexRelease(RTCMutexHandle);
 80021e4:	4b3e      	ldr	r3, [pc, #248]	; (80022e0 <MENU_RunningFunction+0x8c8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f010 fcbe 	bl	8012b6a <osMutexRelease>
               }
            }
            osDelay(50);
 80021ee:	2032      	movs	r0, #50	; 0x32
 80021f0:	f010 fa54 	bl	801269c <osDelay>
         while(Menu.f == 0)
 80021f4:	4b31      	ldr	r3, [pc, #196]	; (80022bc <MENU_RunningFunction+0x8a4>)
 80021f6:	7a9b      	ldrb	r3, [r3, #10]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f43f ae70 	beq.w	8001ede <MENU_RunningFunction+0x4c6>
         }
         break;
 80021fe:	f000 be4c 	b.w	8002e9a <MENU_RunningFunction+0x1482>
      }
      case MENU_CHOISE_CHART:
      {
         RTC_TimeTypeDef RtcTime;
         RTC_DateTypeDef RtcDate;
         osMutexAcquire(RTCMutexHandle, osWaitForever);
 8002202:	4b37      	ldr	r3, [pc, #220]	; (80022e0 <MENU_RunningFunction+0x8c8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f04f 31ff 	mov.w	r1, #4294967295
 800220a:	4618      	mov	r0, r3
 800220c:	f010 fc62 	bl	8012ad4 <osMutexAcquire>
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8002210:	f107 0308 	add.w	r3, r7, #8
 8002214:	2200      	movs	r2, #0
 8002216:	4619      	mov	r1, r3
 8002218:	4832      	ldr	r0, [pc, #200]	; (80022e4 <MENU_RunningFunction+0x8cc>)
 800221a:	f00c f8d7 	bl	800e3cc <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	2200      	movs	r2, #0
 8002222:	4619      	mov	r1, r3
 8002224:	482f      	ldr	r0, [pc, #188]	; (80022e4 <MENU_RunningFunction+0x8cc>)
 8002226:	f00c f9bb 	bl	800e5a0 <HAL_RTC_GetDate>
         osMutexRelease(RTCMutexHandle);
 800222a:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <MENU_RunningFunction+0x8c8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f010 fc9b 	bl	8012b6a <osMutexRelease>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002234:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <MENU_RunningFunction+0x8b0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f04f 31ff 	mov.w	r1, #4294967295
 800223c:	4618      	mov	r0, r3
 800223e:	f010 fc49 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <MENU_RunningFunction+0x8b4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f04f 31ff 	mov.w	r1, #4294967295
 800224a:	4618      	mov	r0, r3
 800224c:	f010 fc42 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002250:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <MENU_RunningFunction+0x8b8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	4618      	mov	r0, r3
 800225a:	f010 fc3b 	bl	8012ad4 <osMutexAcquire>
         ssd1306_clear();
 800225e:	f008 fda1 	bl	800ada4 <ssd1306_clear>
         sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002262:	79bb      	ldrb	r3, [r7, #6]
 8002264:	461a      	mov	r2, r3
 8002266:	797b      	ldrb	r3, [r7, #5]
 8002268:	4619      	mov	r1, r3
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	460b      	mov	r3, r1
 8002274:	4917      	ldr	r1, [pc, #92]	; (80022d4 <MENU_RunningFunction+0x8bc>)
 8002276:	f008 f81b 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 800227a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800227e:	2300      	movs	r3, #0
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	2300      	movs	r3, #0
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2301      	movs	r3, #1
 8002288:	2100      	movs	r1, #0
 800228a:	2000      	movs	r0, #0
 800228c:	f7ff f812 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8002290:	f008 fd5c 	bl	800ad4c <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <MENU_RunningFunction+0x8b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f010 fc66 	bl	8012b6a <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <MENU_RunningFunction+0x8b4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f010 fc61 	bl	8012b6a <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <MENU_RunningFunction+0x8b0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f010 fc5c 	bl	8012b6a <osMutexRelease>
         Menu.f = 0;
 80022b2:	4b02      	ldr	r3, [pc, #8]	; (80022bc <MENU_RunningFunction+0x8a4>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	729a      	strb	r2, [r3, #10]
         while(Menu.f == 0)
 80022b8:	e189      	b.n	80025ce <MENU_RunningFunction+0xbb6>
 80022ba:	bf00      	nop
 80022bc:	200002a0 	.word	0x200002a0
 80022c0:	40000c00 	.word	0x40000c00
 80022c4:	aaaaaaab 	.word	0xaaaaaaab
 80022c8:	20003e04 	.word	0x20003e04
 80022cc:	20003e08 	.word	0x20003e08
 80022d0:	20003e0c 	.word	0x20003e0c
 80022d4:	0801c038 	.word	0x0801c038
 80022d8:	48000400 	.word	0x48000400
 80022dc:	a57eb503 	.word	0xa57eb503
 80022e0:	20003e1c 	.word	0x20003e1c
 80022e4:	20003f48 	.word	0x20003f48
         {
            if(Menu.ButtonCnt == 0)
 80022e8:	4ba1      	ldr	r3, [pc, #644]	; (8002570 <MENU_RunningFunction+0xb58>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d16e      	bne.n	80023ce <MENU_RunningFunction+0x9b6>
            {
               RtcDate.Date = (TIM5->CNT / 4) % 31 + 1;
 80022f0:	4ba0      	ldr	r3, [pc, #640]	; (8002574 <MENU_RunningFunction+0xb5c>)
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	089a      	lsrs	r2, r3, #2
 80022f6:	4ba0      	ldr	r3, [pc, #640]	; (8002578 <MENU_RunningFunction+0xb60>)
 80022f8:	fba3 1302 	umull	r1, r3, r3, r2
 80022fc:	1ad1      	subs	r1, r2, r3
 80022fe:	0849      	lsrs	r1, r1, #1
 8002300:	440b      	add	r3, r1
 8002302:	0919      	lsrs	r1, r3, #4
 8002304:	460b      	mov	r3, r1
 8002306:	015b      	lsls	r3, r3, #5
 8002308:	1a5b      	subs	r3, r3, r1
 800230a:	1ad1      	subs	r1, r2, r3
 800230c:	b2cb      	uxtb	r3, r1
 800230e:	3301      	adds	r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	71bb      	strb	r3, [r7, #6]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002314:	4b99      	ldr	r3, [pc, #612]	; (800257c <MENU_RunningFunction+0xb64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f04f 31ff 	mov.w	r1, #4294967295
 800231c:	4618      	mov	r0, r3
 800231e:	f010 fbd9 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002322:	4b97      	ldr	r3, [pc, #604]	; (8002580 <MENU_RunningFunction+0xb68>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f04f 31ff 	mov.w	r1, #4294967295
 800232a:	4618      	mov	r0, r3
 800232c:	f010 fbd2 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002330:	4b94      	ldr	r3, [pc, #592]	; (8002584 <MENU_RunningFunction+0xb6c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	4618      	mov	r0, r3
 800233a:	f010 fbcb 	bl	8012ad4 <osMutexAcquire>
               ssd1306_clear();
 800233e:	f008 fd31 	bl	800ada4 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002342:	79bb      	ldrb	r3, [r7, #6]
 8002344:	461a      	mov	r2, r3
 8002346:	797b      	ldrb	r3, [r7, #5]
 8002348:	4619      	mov	r1, r3
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	460b      	mov	r3, r1
 8002354:	498c      	ldr	r1, [pc, #560]	; (8002588 <MENU_RunningFunction+0xb70>)
 8002356:	f007 ffab 	bl	800a2b0 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 800235a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800235e:	2300      	movs	r3, #0
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	2300      	movs	r3, #0
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2301      	movs	r3, #1
 8002368:	2100      	movs	r1, #0
 800236a:	2000      	movs	r0, #0
 800236c:	f7fe ffa2 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002370:	f008 fcec 	bl	800ad4c <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002374:	4b83      	ldr	r3, [pc, #524]	; (8002584 <MENU_RunningFunction+0xb6c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f010 fbf6 	bl	8012b6a <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 800237e:	4b80      	ldr	r3, [pc, #512]	; (8002580 <MENU_RunningFunction+0xb68>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f010 fbf1 	bl	8012b6a <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002388:	4b7c      	ldr	r3, [pc, #496]	; (800257c <MENU_RunningFunction+0xb64>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f010 fbec 	bl	8012b6a <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002392:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002396:	487d      	ldr	r0, [pc, #500]	; (800258c <MENU_RunningFunction+0xb74>)
 8002398:	f009 ffb0 	bl	800c2fc <HAL_GPIO_ReadPin>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 8115 	bne.w	80025ce <MENU_RunningFunction+0xbb6>
               {
                  Menu.ButtonCnt++;
 80023a4:	4b72      	ldr	r3, [pc, #456]	; (8002570 <MENU_RunningFunction+0xb58>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	3301      	adds	r3, #1
 80023aa:	4a71      	ldr	r2, [pc, #452]	; (8002570 <MENU_RunningFunction+0xb58>)
 80023ac:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 80023ae:	4b71      	ldr	r3, [pc, #452]	; (8002574 <MENU_RunningFunction+0xb5c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80023b4:	e002      	b.n	80023bc <MENU_RunningFunction+0x9a4>
                  {
                     osDelay(100);
 80023b6:	2064      	movs	r0, #100	; 0x64
 80023b8:	f010 f970 	bl	801269c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80023bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023c0:	4872      	ldr	r0, [pc, #456]	; (800258c <MENU_RunningFunction+0xb74>)
 80023c2:	f009 ff9b 	bl	800c2fc <HAL_GPIO_ReadPin>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f4      	beq.n	80023b6 <MENU_RunningFunction+0x99e>
 80023cc:	e0ff      	b.n	80025ce <MENU_RunningFunction+0xbb6>
                  }
               }
            }
            else if(Menu.ButtonCnt == 1)
 80023ce:	4b68      	ldr	r3, [pc, #416]	; (8002570 <MENU_RunningFunction+0xb58>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d16c      	bne.n	80024b0 <MENU_RunningFunction+0xa98>
            {
               RtcDate.Month = (TIM5->CNT / 4) % 12 + 1;
 80023d6:	4b67      	ldr	r3, [pc, #412]	; (8002574 <MENU_RunningFunction+0xb5c>)
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	0899      	lsrs	r1, r3, #2
 80023dc:	4b6c      	ldr	r3, [pc, #432]	; (8002590 <MENU_RunningFunction+0xb78>)
 80023de:	fba3 2301 	umull	r2, r3, r3, r1
 80023e2:	08da      	lsrs	r2, r3, #3
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	1aca      	subs	r2, r1, r3
 80023ee:	b2d3      	uxtb	r3, r2
 80023f0:	3301      	adds	r3, #1
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	717b      	strb	r3, [r7, #5]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80023f6:	4b61      	ldr	r3, [pc, #388]	; (800257c <MENU_RunningFunction+0xb64>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f04f 31ff 	mov.w	r1, #4294967295
 80023fe:	4618      	mov	r0, r3
 8002400:	f010 fb68 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002404:	4b5e      	ldr	r3, [pc, #376]	; (8002580 <MENU_RunningFunction+0xb68>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f04f 31ff 	mov.w	r1, #4294967295
 800240c:	4618      	mov	r0, r3
 800240e:	f010 fb61 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002412:	4b5c      	ldr	r3, [pc, #368]	; (8002584 <MENU_RunningFunction+0xb6c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f04f 31ff 	mov.w	r1, #4294967295
 800241a:	4618      	mov	r0, r3
 800241c:	f010 fb5a 	bl	8012ad4 <osMutexAcquire>
               ssd1306_clear();
 8002420:	f008 fcc0 	bl	800ada4 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002424:	79bb      	ldrb	r3, [r7, #6]
 8002426:	461a      	mov	r2, r3
 8002428:	797b      	ldrb	r3, [r7, #5]
 800242a:	4619      	mov	r1, r3
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	460b      	mov	r3, r1
 8002436:	4954      	ldr	r1, [pc, #336]	; (8002588 <MENU_RunningFunction+0xb70>)
 8002438:	f007 ff3a 	bl	800a2b0 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 800243c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002440:	2300      	movs	r3, #0
 8002442:	9301      	str	r3, [sp, #4]
 8002444:	2300      	movs	r3, #0
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2301      	movs	r3, #1
 800244a:	2100      	movs	r1, #0
 800244c:	2000      	movs	r0, #0
 800244e:	f7fe ff31 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002452:	f008 fc7b 	bl	800ad4c <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002456:	4b4b      	ldr	r3, [pc, #300]	; (8002584 <MENU_RunningFunction+0xb6c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f010 fb85 	bl	8012b6a <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002460:	4b47      	ldr	r3, [pc, #284]	; (8002580 <MENU_RunningFunction+0xb68>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f010 fb80 	bl	8012b6a <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 800246a:	4b44      	ldr	r3, [pc, #272]	; (800257c <MENU_RunningFunction+0xb64>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f010 fb7b 	bl	8012b6a <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002474:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002478:	4844      	ldr	r0, [pc, #272]	; (800258c <MENU_RunningFunction+0xb74>)
 800247a:	f009 ff3f 	bl	800c2fc <HAL_GPIO_ReadPin>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	f040 80a4 	bne.w	80025ce <MENU_RunningFunction+0xbb6>
               {
                  Menu.ButtonCnt++;
 8002486:	4b3a      	ldr	r3, [pc, #232]	; (8002570 <MENU_RunningFunction+0xb58>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	3301      	adds	r3, #1
 800248c:	4a38      	ldr	r2, [pc, #224]	; (8002570 <MENU_RunningFunction+0xb58>)
 800248e:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002490:	4b38      	ldr	r3, [pc, #224]	; (8002574 <MENU_RunningFunction+0xb5c>)
 8002492:	2200      	movs	r2, #0
 8002494:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002496:	e002      	b.n	800249e <MENU_RunningFunction+0xa86>
                  {
                     osDelay(100);
 8002498:	2064      	movs	r0, #100	; 0x64
 800249a:	f010 f8ff 	bl	801269c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800249e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024a2:	483a      	ldr	r0, [pc, #232]	; (800258c <MENU_RunningFunction+0xb74>)
 80024a4:	f009 ff2a 	bl	800c2fc <HAL_GPIO_ReadPin>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f4      	beq.n	8002498 <MENU_RunningFunction+0xa80>
 80024ae:	e08e      	b.n	80025ce <MENU_RunningFunction+0xbb6>
                  }
               }
            }
            else
            {
               RtcDate.Year = (TIM5->CNT / 4) % 99;
 80024b0:	4b30      	ldr	r3, [pc, #192]	; (8002574 <MENU_RunningFunction+0xb5c>)
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	0899      	lsrs	r1, r3, #2
 80024b6:	4b37      	ldr	r3, [pc, #220]	; (8002594 <MENU_RunningFunction+0xb7c>)
 80024b8:	fba3 2301 	umull	r2, r3, r3, r1
 80024bc:	099a      	lsrs	r2, r3, #6
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	4413      	add	r3, r2
 80024c8:	1aca      	subs	r2, r1, r3
 80024ca:	b2d3      	uxtb	r3, r2
 80024cc:	71fb      	strb	r3, [r7, #7]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80024ce:	4b2b      	ldr	r3, [pc, #172]	; (800257c <MENU_RunningFunction+0xb64>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f04f 31ff 	mov.w	r1, #4294967295
 80024d6:	4618      	mov	r0, r3
 80024d8:	f010 fafc 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <MENU_RunningFunction+0xb68>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f04f 31ff 	mov.w	r1, #4294967295
 80024e4:	4618      	mov	r0, r3
 80024e6:	f010 faf5 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80024ea:	4b26      	ldr	r3, [pc, #152]	; (8002584 <MENU_RunningFunction+0xb6c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f04f 31ff 	mov.w	r1, #4294967295
 80024f2:	4618      	mov	r0, r3
 80024f4:	f010 faee 	bl	8012ad4 <osMutexAcquire>
               ssd1306_clear();
 80024f8:	f008 fc54 	bl	800ada4 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 80024fc:	79bb      	ldrb	r3, [r7, #6]
 80024fe:	461a      	mov	r2, r3
 8002500:	797b      	ldrb	r3, [r7, #5]
 8002502:	4619      	mov	r1, r3
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	460b      	mov	r3, r1
 800250e:	491e      	ldr	r1, [pc, #120]	; (8002588 <MENU_RunningFunction+0xb70>)
 8002510:	f007 fece 	bl	800a2b0 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002514:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002518:	2300      	movs	r3, #0
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	2300      	movs	r3, #0
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2301      	movs	r3, #1
 8002522:	2100      	movs	r1, #0
 8002524:	2000      	movs	r0, #0
 8002526:	f7fe fec5 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 800252a:	f008 fc0f 	bl	800ad4c <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <MENU_RunningFunction+0xb6c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f010 fb19 	bl	8012b6a <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <MENU_RunningFunction+0xb68>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f010 fb14 	bl	8012b6a <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MENU_RunningFunction+0xb64>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f010 fb0f 	bl	8012b6a <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800254c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002550:	480e      	ldr	r0, [pc, #56]	; (800258c <MENU_RunningFunction+0xb74>)
 8002552:	f009 fed3 	bl	800c2fc <HAL_GPIO_ReadPin>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d138      	bne.n	80025ce <MENU_RunningFunction+0xbb6>
               {
                  Menu.ButtonCnt++;
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <MENU_RunningFunction+0xb58>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	3301      	adds	r3, #1
 8002562:	4a03      	ldr	r2, [pc, #12]	; (8002570 <MENU_RunningFunction+0xb58>)
 8002564:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002566:	4b03      	ldr	r3, [pc, #12]	; (8002574 <MENU_RunningFunction+0xb5c>)
 8002568:	2200      	movs	r2, #0
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800256c:	e017      	b.n	800259e <MENU_RunningFunction+0xb86>
 800256e:	bf00      	nop
 8002570:	200002a0 	.word	0x200002a0
 8002574:	40000c00 	.word	0x40000c00
 8002578:	08421085 	.word	0x08421085
 800257c:	20003e04 	.word	0x20003e04
 8002580:	20003e08 	.word	0x20003e08
 8002584:	20003e0c 	.word	0x20003e0c
 8002588:	0801c038 	.word	0x0801c038
 800258c:	48000400 	.word	0x48000400
 8002590:	aaaaaaab 	.word	0xaaaaaaab
 8002594:	a57eb503 	.word	0xa57eb503
                  {
                     osDelay(100);
 8002598:	2064      	movs	r0, #100	; 0x64
 800259a:	f010 f87f 	bl	801269c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800259e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025a2:	48c3      	ldr	r0, [pc, #780]	; (80028b0 <MENU_RunningFunction+0xe98>)
 80025a4:	f009 feaa 	bl	800c2fc <HAL_GPIO_ReadPin>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f4      	beq.n	8002598 <MENU_RunningFunction+0xb80>
                  }
                  Menu.ButtonCnt       = 0;
 80025ae:	4bc1      	ldr	r3, [pc, #772]	; (80028b4 <MENU_RunningFunction+0xe9c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	605a      	str	r2, [r3, #4]
                  Menu.f               = 1;
 80025b4:	4bbf      	ldr	r3, [pc, #764]	; (80028b4 <MENU_RunningFunction+0xe9c>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	729a      	strb	r2, [r3, #10]
                  QueueChartData.Date  = RtcDate.Date;
 80025ba:	79bb      	ldrb	r3, [r7, #6]
 80025bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                  QueueChartData.Month = RtcDate.Month;
 80025c0:	797b      	ldrb	r3, [r7, #5]
 80025c2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                  QueueChartData.Year  = RtcDate.Year;
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
         while(Menu.f == 0)
 80025ce:	4bb9      	ldr	r3, [pc, #740]	; (80028b4 <MENU_RunningFunction+0xe9c>)
 80025d0:	7a9b      	ldrb	r3, [r3, #10]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f43f ae88 	beq.w	80022e8 <MENU_RunningFunction+0x8d0>
               }
            }
         }

         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80025d8:	4bb7      	ldr	r3, [pc, #732]	; (80028b8 <MENU_RunningFunction+0xea0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f04f 31ff 	mov.w	r1, #4294967295
 80025e0:	4618      	mov	r0, r3
 80025e2:	f010 fa77 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80025e6:	4bb5      	ldr	r3, [pc, #724]	; (80028bc <MENU_RunningFunction+0xea4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f04f 31ff 	mov.w	r1, #4294967295
 80025ee:	4618      	mov	r0, r3
 80025f0:	f010 fa70 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80025f4:	4bb2      	ldr	r3, [pc, #712]	; (80028c0 <MENU_RunningFunction+0xea8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295
 80025fc:	4618      	mov	r0, r3
 80025fe:	f010 fa69 	bl	8012ad4 <osMutexAcquire>
         ssd1306_clear();
 8002602:	f008 fbcf 	bl	800ada4 <ssd1306_clear>
         sprintf(Temp, "Dokonaj Wyboru");
 8002606:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800260a:	49ae      	ldr	r1, [pc, #696]	; (80028c4 <MENU_RunningFunction+0xeac>)
 800260c:	4618      	mov	r0, r3
 800260e:	f007 fe4f 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002612:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002616:	2300      	movs	r3, #0
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	2300      	movs	r3, #0
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2301      	movs	r3, #1
 8002620:	2100      	movs	r1, #0
 8002622:	2000      	movs	r0, #0
 8002624:	f7fe fe46 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8002628:	f008 fb90 	bl	800ad4c <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 800262c:	4ba4      	ldr	r3, [pc, #656]	; (80028c0 <MENU_RunningFunction+0xea8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f010 fa9a 	bl	8012b6a <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8002636:	4ba1      	ldr	r3, [pc, #644]	; (80028bc <MENU_RunningFunction+0xea4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f010 fa95 	bl	8012b6a <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8002640:	4b9d      	ldr	r3, [pc, #628]	; (80028b8 <MENU_RunningFunction+0xea0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f010 fa90 	bl	8012b6a <osMutexRelease>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800264a:	e002      	b.n	8002652 <MENU_RunningFunction+0xc3a>
         {
            osDelay(100);
 800264c:	2064      	movs	r0, #100	; 0x64
 800264e:	f010 f825 	bl	801269c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8002652:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002656:	4896      	ldr	r0, [pc, #600]	; (80028b0 <MENU_RunningFunction+0xe98>)
 8002658:	f009 fe50 	bl	800c2fc <HAL_GPIO_ReadPin>
 800265c:	4603      	mov	r3, r0
 800265e:	2b01      	cmp	r3, #1
 8002660:	d0f4      	beq.n	800264c <MENU_RunningFunction+0xc34>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002662:	e002      	b.n	800266a <MENU_RunningFunction+0xc52>
         {
            osDelay(100);
 8002664:	2064      	movs	r0, #100	; 0x64
 8002666:	f010 f819 	bl	801269c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800266a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800266e:	4890      	ldr	r0, [pc, #576]	; (80028b0 <MENU_RunningFunction+0xe98>)
 8002670:	f009 fe44 	bl	800c2fc <HAL_GPIO_ReadPin>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f4      	beq.n	8002664 <MENU_RunningFunction+0xc4c>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800267a:	e261      	b.n	8002b40 <MENU_RunningFunction+0x1128>
         {
            osDelay(100);
 800267c:	2064      	movs	r0, #100	; 0x64
 800267e:	f010 f80d 	bl	801269c <osDelay>
            switch((TIM5->CNT / 4) % 9)
 8002682:	4b91      	ldr	r3, [pc, #580]	; (80028c8 <MENU_RunningFunction+0xeb0>)
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	0899      	lsrs	r1, r3, #2
 8002688:	4b90      	ldr	r3, [pc, #576]	; (80028cc <MENU_RunningFunction+0xeb4>)
 800268a:	fba3 2301 	umull	r2, r3, r3, r1
 800268e:	085a      	lsrs	r2, r3, #1
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	1aca      	subs	r2, r1, r3
 8002698:	2a08      	cmp	r2, #8
 800269a:	f200 8251 	bhi.w	8002b40 <MENU_RunningFunction+0x1128>
 800269e:	a301      	add	r3, pc, #4	; (adr r3, 80026a4 <MENU_RunningFunction+0xc8c>)
 80026a0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80026a4:	080026c9 	.word	0x080026c9
 80026a8:	08002743 	.word	0x08002743
 80026ac:	080027bd 	.word	0x080027bd
 80026b0:	08002837 	.word	0x08002837
 80026b4:	080028e1 	.word	0x080028e1
 80026b8:	0800295b 	.word	0x0800295b
 80026bc:	080029d5 	.word	0x080029d5
 80026c0:	08002a4f 	.word	0x08002a4f
 80026c4:	08002ac9 	.word	0x08002ac9
            {
               case INTERNAL_PM1:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80026c8:	4b7b      	ldr	r3, [pc, #492]	; (80028b8 <MENU_RunningFunction+0xea0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	4618      	mov	r0, r3
 80026d2:	f010 f9ff 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80026d6:	4b79      	ldr	r3, [pc, #484]	; (80028bc <MENU_RunningFunction+0xea4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f04f 31ff 	mov.w	r1, #4294967295
 80026de:	4618      	mov	r0, r3
 80026e0:	f010 f9f8 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80026e4:	4b76      	ldr	r3, [pc, #472]	; (80028c0 <MENU_RunningFunction+0xea8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ec:	4618      	mov	r0, r3
 80026ee:	f010 f9f1 	bl	8012ad4 <osMutexAcquire>
                  ssd1306_clear();
 80026f2:	f008 fb57 	bl	800ada4 <ssd1306_clear>
                  sprintf(Temp, "INTERNAL_PM1");
 80026f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026fa:	4975      	ldr	r1, [pc, #468]	; (80028d0 <MENU_RunningFunction+0xeb8>)
 80026fc:	4618      	mov	r0, r3
 80026fe:	f007 fdd7 	bl	800a2b0 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002702:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002706:	2300      	movs	r3, #0
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	2300      	movs	r3, #0
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	2301      	movs	r3, #1
 8002710:	2100      	movs	r1, #0
 8002712:	2000      	movs	r0, #0
 8002714:	f7fe fdce 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002718:	f008 fb18 	bl	800ad4c <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 800271c:	4b68      	ldr	r3, [pc, #416]	; (80028c0 <MENU_RunningFunction+0xea8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f010 fa22 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002726:	4b65      	ldr	r3, [pc, #404]	; (80028bc <MENU_RunningFunction+0xea4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f010 fa1d 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002730:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <MENU_RunningFunction+0xea0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f010 fa18 	bl	8012b6a <osMutexRelease>
                  QueueChartData.ChartType = INTERNAL_PM1;
 800273a:	2300      	movs	r3, #0
 800273c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 8002740:	e1fe      	b.n	8002b40 <MENU_RunningFunction+0x1128>
               }
               case INTERNAL_PM25:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002742:	4b5d      	ldr	r3, [pc, #372]	; (80028b8 <MENU_RunningFunction+0xea0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f04f 31ff 	mov.w	r1, #4294967295
 800274a:	4618      	mov	r0, r3
 800274c:	f010 f9c2 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002750:	4b5a      	ldr	r3, [pc, #360]	; (80028bc <MENU_RunningFunction+0xea4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f04f 31ff 	mov.w	r1, #4294967295
 8002758:	4618      	mov	r0, r3
 800275a:	f010 f9bb 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800275e:	4b58      	ldr	r3, [pc, #352]	; (80028c0 <MENU_RunningFunction+0xea8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f04f 31ff 	mov.w	r1, #4294967295
 8002766:	4618      	mov	r0, r3
 8002768:	f010 f9b4 	bl	8012ad4 <osMutexAcquire>
                  ssd1306_clear();
 800276c:	f008 fb1a 	bl	800ada4 <ssd1306_clear>
                  sprintf(Temp, "INTERNAL_PM25");
 8002770:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002774:	4957      	ldr	r1, [pc, #348]	; (80028d4 <MENU_RunningFunction+0xebc>)
 8002776:	4618      	mov	r0, r3
 8002778:	f007 fd9a 	bl	800a2b0 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 800277c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002780:	2300      	movs	r3, #0
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	2300      	movs	r3, #0
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2301      	movs	r3, #1
 800278a:	2100      	movs	r1, #0
 800278c:	2000      	movs	r0, #0
 800278e:	f7fe fd91 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002792:	f008 fadb 	bl	800ad4c <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002796:	4b4a      	ldr	r3, [pc, #296]	; (80028c0 <MENU_RunningFunction+0xea8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f010 f9e5 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 80027a0:	4b46      	ldr	r3, [pc, #280]	; (80028bc <MENU_RunningFunction+0xea4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f010 f9e0 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 80027aa:	4b43      	ldr	r3, [pc, #268]	; (80028b8 <MENU_RunningFunction+0xea0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f010 f9db 	bl	8012b6a <osMutexRelease>
                  QueueChartData.ChartType = INTERNAL_PM25;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 80027ba:	e1c1      	b.n	8002b40 <MENU_RunningFunction+0x1128>
               }
               case INTERNAL_PM10:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80027bc:	4b3e      	ldr	r3, [pc, #248]	; (80028b8 <MENU_RunningFunction+0xea0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f04f 31ff 	mov.w	r1, #4294967295
 80027c4:	4618      	mov	r0, r3
 80027c6:	f010 f985 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80027ca:	4b3c      	ldr	r3, [pc, #240]	; (80028bc <MENU_RunningFunction+0xea4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f04f 31ff 	mov.w	r1, #4294967295
 80027d2:	4618      	mov	r0, r3
 80027d4:	f010 f97e 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80027d8:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <MENU_RunningFunction+0xea8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f04f 31ff 	mov.w	r1, #4294967295
 80027e0:	4618      	mov	r0, r3
 80027e2:	f010 f977 	bl	8012ad4 <osMutexAcquire>
                  ssd1306_clear();
 80027e6:	f008 fadd 	bl	800ada4 <ssd1306_clear>
                  sprintf(Temp, "INTERNAL_PM10");
 80027ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027ee:	493a      	ldr	r1, [pc, #232]	; (80028d8 <MENU_RunningFunction+0xec0>)
 80027f0:	4618      	mov	r0, r3
 80027f2:	f007 fd5d 	bl	800a2b0 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80027f6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80027fa:	2300      	movs	r3, #0
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	2300      	movs	r3, #0
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2301      	movs	r3, #1
 8002804:	2100      	movs	r1, #0
 8002806:	2000      	movs	r0, #0
 8002808:	f7fe fd54 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 800280c:	f008 fa9e 	bl	800ad4c <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <MENU_RunningFunction+0xea8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f010 f9a8 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 800281a:	4b28      	ldr	r3, [pc, #160]	; (80028bc <MENU_RunningFunction+0xea4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f010 f9a3 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002824:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <MENU_RunningFunction+0xea0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f010 f99e 	bl	8012b6a <osMutexRelease>
                  QueueChartData.ChartType = INTERNAL_PM10;
 800282e:	2302      	movs	r3, #2
 8002830:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 8002834:	e184      	b.n	8002b40 <MENU_RunningFunction+0x1128>
               }
               case EXTERNAL_PM1:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002836:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <MENU_RunningFunction+0xea0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f04f 31ff 	mov.w	r1, #4294967295
 800283e:	4618      	mov	r0, r3
 8002840:	f010 f948 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <MENU_RunningFunction+0xea4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f04f 31ff 	mov.w	r1, #4294967295
 800284c:	4618      	mov	r0, r3
 800284e:	f010 f941 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <MENU_RunningFunction+0xea8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f04f 31ff 	mov.w	r1, #4294967295
 800285a:	4618      	mov	r0, r3
 800285c:	f010 f93a 	bl	8012ad4 <osMutexAcquire>
                  ssd1306_clear();
 8002860:	f008 faa0 	bl	800ada4 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_PM1");
 8002864:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002868:	491c      	ldr	r1, [pc, #112]	; (80028dc <MENU_RunningFunction+0xec4>)
 800286a:	4618      	mov	r0, r3
 800286c:	f007 fd20 	bl	800a2b0 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002870:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002874:	2300      	movs	r3, #0
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	2300      	movs	r3, #0
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2301      	movs	r3, #1
 800287e:	2100      	movs	r1, #0
 8002880:	2000      	movs	r0, #0
 8002882:	f7fe fd17 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002886:	f008 fa61 	bl	800ad4c <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 800288a:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <MENU_RunningFunction+0xea8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f010 f96b 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <MENU_RunningFunction+0xea4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f010 f966 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <MENU_RunningFunction+0xea0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f010 f961 	bl	8012b6a <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_PM1;
 80028a8:	2303      	movs	r3, #3
 80028aa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 80028ae:	e147      	b.n	8002b40 <MENU_RunningFunction+0x1128>
 80028b0:	48000400 	.word	0x48000400
 80028b4:	200002a0 	.word	0x200002a0
 80028b8:	20003e04 	.word	0x20003e04
 80028bc:	20003e08 	.word	0x20003e08
 80028c0:	20003e0c 	.word	0x20003e0c
 80028c4:	0801c04c 	.word	0x0801c04c
 80028c8:	40000c00 	.word	0x40000c00
 80028cc:	38e38e39 	.word	0x38e38e39
 80028d0:	0801c05c 	.word	0x0801c05c
 80028d4:	0801c06c 	.word	0x0801c06c
 80028d8:	0801c07c 	.word	0x0801c07c
 80028dc:	0801c08c 	.word	0x0801c08c
               }
               case EXTERNAL_PM25:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80028e0:	4bc5      	ldr	r3, [pc, #788]	; (8002bf8 <MENU_RunningFunction+0x11e0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f04f 31ff 	mov.w	r1, #4294967295
 80028e8:	4618      	mov	r0, r3
 80028ea:	f010 f8f3 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80028ee:	4bc3      	ldr	r3, [pc, #780]	; (8002bfc <MENU_RunningFunction+0x11e4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f04f 31ff 	mov.w	r1, #4294967295
 80028f6:	4618      	mov	r0, r3
 80028f8:	f010 f8ec 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80028fc:	4bc0      	ldr	r3, [pc, #768]	; (8002c00 <MENU_RunningFunction+0x11e8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	4618      	mov	r0, r3
 8002906:	f010 f8e5 	bl	8012ad4 <osMutexAcquire>
                  ssd1306_clear();
 800290a:	f008 fa4b 	bl	800ada4 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_PM25");
 800290e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002912:	49bc      	ldr	r1, [pc, #752]	; (8002c04 <MENU_RunningFunction+0x11ec>)
 8002914:	4618      	mov	r0, r3
 8002916:	f007 fccb 	bl	800a2b0 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 800291a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800291e:	2300      	movs	r3, #0
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	2300      	movs	r3, #0
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	2301      	movs	r3, #1
 8002928:	2100      	movs	r1, #0
 800292a:	2000      	movs	r0, #0
 800292c:	f7fe fcc2 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002930:	f008 fa0c 	bl	800ad4c <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002934:	4bb2      	ldr	r3, [pc, #712]	; (8002c00 <MENU_RunningFunction+0x11e8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f010 f916 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 800293e:	4baf      	ldr	r3, [pc, #700]	; (8002bfc <MENU_RunningFunction+0x11e4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f010 f911 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002948:	4bab      	ldr	r3, [pc, #684]	; (8002bf8 <MENU_RunningFunction+0x11e0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f010 f90c 	bl	8012b6a <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_PM25;
 8002952:	2304      	movs	r3, #4
 8002954:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 8002958:	e0f2      	b.n	8002b40 <MENU_RunningFunction+0x1128>
               }
               case EXTERNAL_PM10:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800295a:	4ba7      	ldr	r3, [pc, #668]	; (8002bf8 <MENU_RunningFunction+0x11e0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f04f 31ff 	mov.w	r1, #4294967295
 8002962:	4618      	mov	r0, r3
 8002964:	f010 f8b6 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002968:	4ba4      	ldr	r3, [pc, #656]	; (8002bfc <MENU_RunningFunction+0x11e4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f04f 31ff 	mov.w	r1, #4294967295
 8002970:	4618      	mov	r0, r3
 8002972:	f010 f8af 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002976:	4ba2      	ldr	r3, [pc, #648]	; (8002c00 <MENU_RunningFunction+0x11e8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f04f 31ff 	mov.w	r1, #4294967295
 800297e:	4618      	mov	r0, r3
 8002980:	f010 f8a8 	bl	8012ad4 <osMutexAcquire>
                  ssd1306_clear();
 8002984:	f008 fa0e 	bl	800ada4 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_PM10");
 8002988:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800298c:	499e      	ldr	r1, [pc, #632]	; (8002c08 <MENU_RunningFunction+0x11f0>)
 800298e:	4618      	mov	r0, r3
 8002990:	f007 fc8e 	bl	800a2b0 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002994:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002998:	2300      	movs	r3, #0
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	2300      	movs	r3, #0
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2301      	movs	r3, #1
 80029a2:	2100      	movs	r1, #0
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7fe fc85 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 80029aa:	f008 f9cf 	bl	800ad4c <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 80029ae:	4b94      	ldr	r3, [pc, #592]	; (8002c00 <MENU_RunningFunction+0x11e8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f010 f8d9 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 80029b8:	4b90      	ldr	r3, [pc, #576]	; (8002bfc <MENU_RunningFunction+0x11e4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f010 f8d4 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 80029c2:	4b8d      	ldr	r3, [pc, #564]	; (8002bf8 <MENU_RunningFunction+0x11e0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f010 f8cf 	bl	8012b6a <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_PM10;
 80029cc:	2305      	movs	r3, #5
 80029ce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 80029d2:	e0b5      	b.n	8002b40 <MENU_RunningFunction+0x1128>
               }
               case PRESSURE:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80029d4:	4b88      	ldr	r3, [pc, #544]	; (8002bf8 <MENU_RunningFunction+0x11e0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f04f 31ff 	mov.w	r1, #4294967295
 80029dc:	4618      	mov	r0, r3
 80029de:	f010 f879 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80029e2:	4b86      	ldr	r3, [pc, #536]	; (8002bfc <MENU_RunningFunction+0x11e4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f04f 31ff 	mov.w	r1, #4294967295
 80029ea:	4618      	mov	r0, r3
 80029ec:	f010 f872 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80029f0:	4b83      	ldr	r3, [pc, #524]	; (8002c00 <MENU_RunningFunction+0x11e8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	4618      	mov	r0, r3
 80029fa:	f010 f86b 	bl	8012ad4 <osMutexAcquire>
                  ssd1306_clear();
 80029fe:	f008 f9d1 	bl	800ada4 <ssd1306_clear>
                  sprintf(Temp, "PRESSURE");
 8002a02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a06:	4981      	ldr	r1, [pc, #516]	; (8002c0c <MENU_RunningFunction+0x11f4>)
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f007 fc51 	bl	800a2b0 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002a0e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002a12:	2300      	movs	r3, #0
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	2300      	movs	r3, #0
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f7fe fc48 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002a24:	f008 f992 	bl	800ad4c <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002a28:	4b75      	ldr	r3, [pc, #468]	; (8002c00 <MENU_RunningFunction+0x11e8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f010 f89c 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002a32:	4b72      	ldr	r3, [pc, #456]	; (8002bfc <MENU_RunningFunction+0x11e4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f010 f897 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002a3c:	4b6e      	ldr	r3, [pc, #440]	; (8002bf8 <MENU_RunningFunction+0x11e0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f010 f892 	bl	8012b6a <osMutexRelease>
                  QueueChartData.ChartType = PRESSURE;
 8002a46:	2306      	movs	r3, #6
 8002a48:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 8002a4c:	e078      	b.n	8002b40 <MENU_RunningFunction+0x1128>
               }
               case EXTERNAL_TEMPERATURE:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002a4e:	4b6a      	ldr	r3, [pc, #424]	; (8002bf8 <MENU_RunningFunction+0x11e0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f04f 31ff 	mov.w	r1, #4294967295
 8002a56:	4618      	mov	r0, r3
 8002a58:	f010 f83c 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002a5c:	4b67      	ldr	r3, [pc, #412]	; (8002bfc <MENU_RunningFunction+0x11e4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f04f 31ff 	mov.w	r1, #4294967295
 8002a64:	4618      	mov	r0, r3
 8002a66:	f010 f835 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002a6a:	4b65      	ldr	r3, [pc, #404]	; (8002c00 <MENU_RunningFunction+0x11e8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a72:	4618      	mov	r0, r3
 8002a74:	f010 f82e 	bl	8012ad4 <osMutexAcquire>
                  ssd1306_clear();
 8002a78:	f008 f994 	bl	800ada4 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_TEMPERATURE");
 8002a7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a80:	4963      	ldr	r1, [pc, #396]	; (8002c10 <MENU_RunningFunction+0x11f8>)
 8002a82:	4618      	mov	r0, r3
 8002a84:	f007 fc14 	bl	800a2b0 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002a88:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	2300      	movs	r3, #0
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2301      	movs	r3, #1
 8002a96:	2100      	movs	r1, #0
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f7fe fc0b 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002a9e:	f008 f955 	bl	800ad4c <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002aa2:	4b57      	ldr	r3, [pc, #348]	; (8002c00 <MENU_RunningFunction+0x11e8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f010 f85f 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002aac:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <MENU_RunningFunction+0x11e4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f010 f85a 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002ab6:	4b50      	ldr	r3, [pc, #320]	; (8002bf8 <MENU_RunningFunction+0x11e0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f010 f855 	bl	8012b6a <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_TEMPERATURE;
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 8002ac6:	e03b      	b.n	8002b40 <MENU_RunningFunction+0x1128>
               }
               case EXTERNAL_HUMIDITY:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002ac8:	4b4b      	ldr	r3, [pc, #300]	; (8002bf8 <MENU_RunningFunction+0x11e0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f00f ffff 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002ad6:	4b49      	ldr	r3, [pc, #292]	; (8002bfc <MENU_RunningFunction+0x11e4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f04f 31ff 	mov.w	r1, #4294967295
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f00f fff8 	bl	8012ad4 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002ae4:	4b46      	ldr	r3, [pc, #280]	; (8002c00 <MENU_RunningFunction+0x11e8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aec:	4618      	mov	r0, r3
 8002aee:	f00f fff1 	bl	8012ad4 <osMutexAcquire>
                  ssd1306_clear();
 8002af2:	f008 f957 	bl	800ada4 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_HUMIDITY");
 8002af6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002afa:	4946      	ldr	r1, [pc, #280]	; (8002c14 <MENU_RunningFunction+0x11fc>)
 8002afc:	4618      	mov	r0, r3
 8002afe:	f007 fbd7 	bl	800a2b0 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002b02:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002b06:	2300      	movs	r3, #0
 8002b08:	9301      	str	r3, [sp, #4]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	2301      	movs	r3, #1
 8002b10:	2100      	movs	r1, #0
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fe fbce 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002b18:	f008 f918 	bl	800ad4c <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002b1c:	4b38      	ldr	r3, [pc, #224]	; (8002c00 <MENU_RunningFunction+0x11e8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f010 f822 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002b26:	4b35      	ldr	r3, [pc, #212]	; (8002bfc <MENU_RunningFunction+0x11e4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f010 f81d 	bl	8012b6a <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002b30:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <MENU_RunningFunction+0x11e0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f010 f818 	bl	8012b6a <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_HUMIDITY;
 8002b3a:	2308      	movs	r3, #8
 8002b3c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8002b40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b44:	4834      	ldr	r0, [pc, #208]	; (8002c18 <MENU_RunningFunction+0x1200>)
 8002b46:	f009 fbd9 	bl	800c2fc <HAL_GPIO_ReadPin>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	f43f ad95 	beq.w	800267c <MENU_RunningFunction+0xc64>
                  break;
               }
            }
         }
         osDelay(50);
 8002b52:	2032      	movs	r0, #50	; 0x32
 8002b54:	f00f fda2 	bl	801269c <osDelay>
         osMessageQueuePut(ChartQueueHandle, &QueueChartData, 0, osWaitForever);
 8002b58:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <MENU_RunningFunction+0x1204>)
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002b60:	f04f 33ff 	mov.w	r3, #4294967295
 8002b64:	2200      	movs	r2, #0
 8002b66:	f010 f8b1 	bl	8012ccc <osMessageQueuePut>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002b6a:	e002      	b.n	8002b72 <MENU_RunningFunction+0x115a>
         {
            osDelay(100);
 8002b6c:	2064      	movs	r0, #100	; 0x64
 8002b6e:	f00f fd95 	bl	801269c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002b72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b76:	4828      	ldr	r0, [pc, #160]	; (8002c18 <MENU_RunningFunction+0x1200>)
 8002b78:	f009 fbc0 	bl	800c2fc <HAL_GPIO_ReadPin>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f4      	beq.n	8002b6c <MENU_RunningFunction+0x1154>
         }
         break;
 8002b82:	e18a      	b.n	8002e9a <MENU_RunningFunction+0x1482>
      }
      case MENU_CHOISE_CLEAR_EXTERNAL_MEMORY:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002b84:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <MENU_RunningFunction+0x11e0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f00f ffa1 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002b92:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <MENU_RunningFunction+0x11e4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f04f 31ff 	mov.w	r1, #4294967295
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f00f ff9a 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002ba0:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <MENU_RunningFunction+0x11e8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f00f ff93 	bl	8012ad4 <osMutexAcquire>
         ssd1306_clear();
 8002bae:	f008 f8f9 	bl	800ada4 <ssd1306_clear>
         sprintf(Temp, "WYMAGA POTWIERDZENIA");
 8002bb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bb6:	491a      	ldr	r1, [pc, #104]	; (8002c20 <MENU_RunningFunction+0x1208>)
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f007 fb79 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002bbe:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	2301      	movs	r3, #1
 8002bcc:	2100      	movs	r1, #0
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7fe fb70 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8002bd4:	f008 f8ba 	bl	800ad4c <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <MENU_RunningFunction+0x11e8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f00f ffc4 	bl	8012b6a <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <MENU_RunningFunction+0x11e4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f00f ffbf 	bl	8012b6a <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8002bec:	4b02      	ldr	r3, [pc, #8]	; (8002bf8 <MENU_RunningFunction+0x11e0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f00f ffba 	bl	8012b6a <osMutexRelease>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8002bf6:	e0f0      	b.n	8002dda <MENU_RunningFunction+0x13c2>
 8002bf8:	20003e04 	.word	0x20003e04
 8002bfc:	20003e08 	.word	0x20003e08
 8002c00:	20003e0c 	.word	0x20003e0c
 8002c04:	0801c09c 	.word	0x0801c09c
 8002c08:	0801c0ac 	.word	0x0801c0ac
 8002c0c:	0801c0bc 	.word	0x0801c0bc
 8002c10:	0801c0c8 	.word	0x0801c0c8
 8002c14:	0801c0e0 	.word	0x0801c0e0
 8002c18:	48000400 	.word	0x48000400
 8002c1c:	20003df8 	.word	0x20003df8
 8002c20:	0801c010 	.word	0x0801c010
         {
            if((TIM5->CNT / 4) % 9 == 0)
 8002c24:	4ba0      	ldr	r3, [pc, #640]	; (8002ea8 <MENU_RunningFunction+0x1490>)
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	0899      	lsrs	r1, r3, #2
 8002c2a:	4ba0      	ldr	r3, [pc, #640]	; (8002eac <MENU_RunningFunction+0x1494>)
 8002c2c:	fba3 2301 	umull	r2, r3, r3, r1
 8002c30:	085a      	lsrs	r2, r3, #1
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	1aca      	subs	r2, r1, r3
 8002c3a:	2a00      	cmp	r2, #0
 8002c3c:	d165      	bne.n	8002d0a <MENU_RunningFunction+0x12f2>
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002c3e:	4b9c      	ldr	r3, [pc, #624]	; (8002eb0 <MENU_RunningFunction+0x1498>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f04f 31ff 	mov.w	r1, #4294967295
 8002c46:	4618      	mov	r0, r3
 8002c48:	f00f ff44 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002c4c:	4b99      	ldr	r3, [pc, #612]	; (8002eb4 <MENU_RunningFunction+0x149c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f04f 31ff 	mov.w	r1, #4294967295
 8002c54:	4618      	mov	r0, r3
 8002c56:	f00f ff3d 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002c5a:	4b97      	ldr	r3, [pc, #604]	; (8002eb8 <MENU_RunningFunction+0x14a0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f04f 31ff 	mov.w	r1, #4294967295
 8002c62:	4618      	mov	r0, r3
 8002c64:	f00f ff36 	bl	8012ad4 <osMutexAcquire>
               ssd1306_clear();
 8002c68:	f008 f89c 	bl	800ada4 <ssd1306_clear>
               sprintf(Temp, "WYMAGA POTWIERDZENIA");
 8002c6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c70:	4992      	ldr	r1, [pc, #584]	; (8002ebc <MENU_RunningFunction+0x14a4>)
 8002c72:	4618      	mov	r0, r3
 8002c74:	f007 fb1c 	bl	800a2b0 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002c78:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	2300      	movs	r3, #0
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2301      	movs	r3, #1
 8002c86:	2100      	movs	r1, #0
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7fe fb13 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 8002c8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c92:	498b      	ldr	r1, [pc, #556]	; (8002ec0 <MENU_RunningFunction+0x14a8>)
 8002c94:	4618      	mov	r0, r3
 8002c96:	f007 fb0b 	bl	800a2b0 <sprintf_>
               GFX_DrawFillRectangle(5, 25, 25, 18, WHITE, OLED);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	2312      	movs	r3, #18
 8002ca4:	2219      	movs	r2, #25
 8002ca6:	2119      	movs	r1, #25
 8002ca8:	2005      	movs	r0, #5
 8002caa:	f7fe fc74 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(10, 30, Temp, BLACK, 1, OLED);
 8002cae:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	211e      	movs	r1, #30
 8002cbe:	200a      	movs	r0, #10
 8002cc0:	f7fe faf8 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "NIE");
 8002cc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cc8:	497e      	ldr	r1, [pc, #504]	; (8002ec4 <MENU_RunningFunction+0x14ac>)
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f007 faf0 	bl	800a2b0 <sprintf_>
               GFX_DrawString(100, 30, Temp, WHITE, 0, OLED);
 8002cd0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2301      	movs	r3, #1
 8002cde:	211e      	movs	r1, #30
 8002ce0:	2064      	movs	r0, #100	; 0x64
 8002ce2:	f7fe fae7 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002ce6:	f008 f831 	bl	800ad4c <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002cea:	4b73      	ldr	r3, [pc, #460]	; (8002eb8 <MENU_RunningFunction+0x14a0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f00f ff3b 	bl	8012b6a <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <MENU_RunningFunction+0x149c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f00f ff36 	bl	8012b6a <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002cfe:	4b6c      	ldr	r3, [pc, #432]	; (8002eb0 <MENU_RunningFunction+0x1498>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f00f ff31 	bl	8012b6a <osMutexRelease>
 8002d08:	e064      	b.n	8002dd4 <MENU_RunningFunction+0x13bc>
            }
            else
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002d0a:	4b69      	ldr	r3, [pc, #420]	; (8002eb0 <MENU_RunningFunction+0x1498>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f04f 31ff 	mov.w	r1, #4294967295
 8002d12:	4618      	mov	r0, r3
 8002d14:	f00f fede 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002d18:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <MENU_RunningFunction+0x149c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d20:	4618      	mov	r0, r3
 8002d22:	f00f fed7 	bl	8012ad4 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002d26:	4b64      	ldr	r3, [pc, #400]	; (8002eb8 <MENU_RunningFunction+0x14a0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f04f 31ff 	mov.w	r1, #4294967295
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f00f fed0 	bl	8012ad4 <osMutexAcquire>
               ssd1306_clear();
 8002d34:	f008 f836 	bl	800ada4 <ssd1306_clear>
               sprintf(Temp, "WYMAGA POTWIERDZENIA");
 8002d38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d3c:	495f      	ldr	r1, [pc, #380]	; (8002ebc <MENU_RunningFunction+0x14a4>)
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f007 fab6 	bl	800a2b0 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002d44:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002d48:	2300      	movs	r3, #0
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	2301      	movs	r3, #1
 8002d52:	2100      	movs	r1, #0
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7fe faad 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 8002d5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d5e:	4958      	ldr	r1, [pc, #352]	; (8002ec0 <MENU_RunningFunction+0x14a8>)
 8002d60:	4618      	mov	r0, r3
 8002d62:	f007 faa5 	bl	800a2b0 <sprintf_>
               GFX_DrawString(10, 30, Temp, WHITE, 0, OLED);
 8002d66:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	2301      	movs	r3, #1
 8002d74:	211e      	movs	r1, #30
 8002d76:	200a      	movs	r0, #10
 8002d78:	f7fe fa9c 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "NIE");
 8002d7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d80:	4950      	ldr	r1, [pc, #320]	; (8002ec4 <MENU_RunningFunction+0x14ac>)
 8002d82:	4618      	mov	r0, r3
 8002d84:	f007 fa94 	bl	800a2b0 <sprintf_>
               GFX_DrawFillRectangle(95, 25, 25, 18, WHITE, OLED);
 8002d88:	2300      	movs	r3, #0
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	2312      	movs	r3, #18
 8002d92:	2219      	movs	r2, #25
 8002d94:	2119      	movs	r1, #25
 8002d96:	205f      	movs	r0, #95	; 0x5f
 8002d98:	f7fe fbfd 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(100, 30, Temp, BLACK, 1, OLED);
 8002d9c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002da0:	2300      	movs	r3, #0
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	2301      	movs	r3, #1
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2300      	movs	r3, #0
 8002daa:	211e      	movs	r1, #30
 8002dac:	2064      	movs	r0, #100	; 0x64
 8002dae:	f7fe fa81 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002db2:	f007 ffcb 	bl	800ad4c <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002db6:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <MENU_RunningFunction+0x14a0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f00f fed5 	bl	8012b6a <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002dc0:	4b3c      	ldr	r3, [pc, #240]	; (8002eb4 <MENU_RunningFunction+0x149c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f00f fed0 	bl	8012b6a <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002dca:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <MENU_RunningFunction+0x1498>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f00f fecb 	bl	8012b6a <osMutexRelease>
            }
            osDelay(100);
 8002dd4:	2064      	movs	r0, #100	; 0x64
 8002dd6:	f00f fc61 	bl	801269c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8002dda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dde:	483a      	ldr	r0, [pc, #232]	; (8002ec8 <MENU_RunningFunction+0x14b0>)
 8002de0:	f009 fa8c 	bl	800c2fc <HAL_GPIO_ReadPin>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	f43f af1c 	beq.w	8002c24 <MENU_RunningFunction+0x120c>
         }
      }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002dec:	e002      	b.n	8002df4 <MENU_RunningFunction+0x13dc>
         {
            osDelay(100);
 8002dee:	2064      	movs	r0, #100	; 0x64
 8002df0:	f00f fc54 	bl	801269c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002df4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002df8:	4833      	ldr	r0, [pc, #204]	; (8002ec8 <MENU_RunningFunction+0x14b0>)
 8002dfa:	f009 fa7f 	bl	800c2fc <HAL_GPIO_ReadPin>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f4      	beq.n	8002dee <MENU_RunningFunction+0x13d6>
         }
         if((TIM5->CNT / 4) % 9 == 0)
 8002e04:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <MENU_RunningFunction+0x1490>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	0899      	lsrs	r1, r3, #2
 8002e0a:	4b28      	ldr	r3, [pc, #160]	; (8002eac <MENU_RunningFunction+0x1494>)
 8002e0c:	fba3 2301 	umull	r2, r3, r3, r1
 8002e10:	085a      	lsrs	r2, r3, #1
 8002e12:	4613      	mov	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4413      	add	r3, r2
 8002e18:	1aca      	subs	r2, r1, r3
 8002e1a:	2a00      	cmp	r2, #0
 8002e1c:	d13c      	bne.n	8002e98 <MENU_RunningFunction+0x1480>
         {
            osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002e1e:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <MENU_RunningFunction+0x1498>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f04f 31ff 	mov.w	r1, #4294967295
 8002e26:	4618      	mov	r0, r3
 8002e28:	f00f fe54 	bl	8012ad4 <osMutexAcquire>
            osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002e2c:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <MENU_RunningFunction+0x149c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f04f 31ff 	mov.w	r1, #4294967295
 8002e34:	4618      	mov	r0, r3
 8002e36:	f00f fe4d 	bl	8012ad4 <osMutexAcquire>
            osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002e3a:	4b1f      	ldr	r3, [pc, #124]	; (8002eb8 <MENU_RunningFunction+0x14a0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f04f 31ff 	mov.w	r1, #4294967295
 8002e42:	4618      	mov	r0, r3
 8002e44:	f00f fe46 	bl	8012ad4 <osMutexAcquire>
            ssd1306_clear();
 8002e48:	f007 ffac 	bl	800ada4 <ssd1306_clear>
            sprintf(Temp, "CZYSZCZENIE!!!");
 8002e4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e50:	491e      	ldr	r1, [pc, #120]	; (8002ecc <MENU_RunningFunction+0x14b4>)
 8002e52:	4618      	mov	r0, r3
 8002e54:	f007 fa2c 	bl	800a2b0 <sprintf_>
            GFX_DrawString(0, 0, Temp, BLACK, 1, OLED);
 8002e58:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	2301      	movs	r3, #1
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	2300      	movs	r3, #0
 8002e66:	2100      	movs	r1, #0
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fe fa23 	bl	80012b4 <GFX_DrawString>
            ssd1306_display();
 8002e6e:	f007 ff6d 	bl	800ad4c <ssd1306_display>
            osDelay(10000);
 8002e72:	f242 7010 	movw	r0, #10000	; 0x2710
 8002e76:	f00f fc11 	bl	801269c <osDelay>
            osMutexRelease(SPI1MutexHandle);
 8002e7a:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <MENU_RunningFunction+0x14a0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f00f fe73 	bl	8012b6a <osMutexRelease>
            osMutexRelease(SSD1306MutexHandle);
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <MENU_RunningFunction+0x149c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f00f fe6e 	bl	8012b6a <osMutexRelease>
            osMutexRelease(ScreensDcMutexHandle);
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <MENU_RunningFunction+0x1498>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f00f fe69 	bl	8012b6a <osMutexRelease>
         }
      default:
      {
         break;
 8002e98:	bf00      	nop
      }
   }
   Menu.NewEvent = MENU_EVENT_END;
 8002e9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <MENU_RunningFunction+0x14b8>)
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	725a      	strb	r2, [r3, #9]
}
 8002ea0:	bf00      	nop
 8002ea2:	37b8      	adds	r7, #184	; 0xb8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40000c00 	.word	0x40000c00
 8002eac:	38e38e39 	.word	0x38e38e39
 8002eb0:	20003e04 	.word	0x20003e04
 8002eb4:	20003e08 	.word	0x20003e08
 8002eb8:	20003e0c 	.word	0x20003e0c
 8002ebc:	0801c010 	.word	0x0801c010
 8002ec0:	0801c0f4 	.word	0x0801c0f4
 8002ec4:	0801c0f8 	.word	0x0801c0f8
 8002ec8:	48000400 	.word	0x48000400
 8002ecc:	0801c0fc 	.word	0x0801c0fc
 8002ed0:	200002a0 	.word	0x200002a0

08002ed4 <MENU_EndFunction>:

static void MENU_EndFunction(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
   Menu.ButtonCnt = 0;
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <MENU_EndFunction+0x30>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	605a      	str	r2, [r3, #4]
   Menu.ChoiseCnt = 0;
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <MENU_EndFunction+0x30>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
   Menu.NewEvent  = MENU_EVENT_NOTHING;
 8002ee4:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <MENU_EndFunction+0x30>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	725a      	strb	r2, [r3, #9]
   Menu.f         = 0;
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <MENU_EndFunction+0x30>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	729a      	strb	r2, [r3, #10]
   TIM5->CNT      = 0;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <MENU_EndFunction+0x34>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
   osMutexRelease(MenuMutexHandle);
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <MENU_EndFunction+0x38>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f00f fe35 	bl	8012b6a <osMutexRelease>
}
 8002f00:	bf00      	nop
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	200002a0 	.word	0x200002a0
 8002f08:	40000c00 	.word	0x40000c00
 8002f0c:	20003e18 	.word	0x20003e18

08002f10 <BME280_CsLow>:
#include "main.h"

#include "bme280_spi.h"

void BME280_CsLow(BME280_t *bme)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(bme->bme280_CsPort, bme->bme280_CsPin, 0);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6858      	ldr	r0, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	2200      	movs	r2, #0
 8002f22:	4619      	mov	r1, r3
 8002f24:	f009 fa02 	bl	800c32c <HAL_GPIO_WritePin>
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <BME280_CsHigh>:
void BME280_CsHigh(BME280_t *bme)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(bme->bme280_CsPort, bme->bme280_CsPin, 1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6858      	ldr	r0, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	2201      	movs	r2, #1
 8002f42:	4619      	mov	r1, r3
 8002f44:	f009 f9f2 	bl	800c32c <HAL_GPIO_WritePin>
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <BME280_Read8>:
uint8_t BME280_Read8(BME280_t *bme, uint8_t addr)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	70fb      	strb	r3, [r7, #3]
   addr |= 128;
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	70fb      	strb	r3, [r7, #3]
   uint8_t data;
   BME280_CsLow(bme);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ffd2 	bl	8002f10 <BME280_CsLow>
   HAL_SPI_Transmit(bme->bme_spi, &addr, 1, BME_MAX_TIMEOUT);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	1cf9      	adds	r1, r7, #3
 8002f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f76:	2201      	movs	r2, #1
 8002f78:	f00b fcd7 	bl	800e92a <HAL_SPI_Transmit>
   HAL_SPI_Receive(bme->bme_spi, &data, 1, BME_MAX_TIMEOUT);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	f107 010f 	add.w	r1, r7, #15
 8002f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f00b fe3c 	bl	800ec06 <HAL_SPI_Receive>
   BME280_CsHigh(bme);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ffce 	bl	8002f30 <BME280_CsHigh>
   return data;
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <BME280_Write8>:
void BME280_Write8(BME280_t *bme, uint8_t addr, uint8_t data)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	70fb      	strb	r3, [r7, #3]
 8002faa:	4613      	mov	r3, r2
 8002fac:	70bb      	strb	r3, [r7, #2]
   BME280_CsLow(bme);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ffae 	bl	8002f10 <BME280_CsLow>
   addr &= 127;
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fba:	70fb      	strb	r3, [r7, #3]
   uint8_t Data_ToSend[2];
   Data_ToSend[0] = addr;
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	733b      	strb	r3, [r7, #12]
   Data_ToSend[1] = data;
 8002fc0:	78bb      	ldrb	r3, [r7, #2]
 8002fc2:	737b      	strb	r3, [r7, #13]
   HAL_SPI_Transmit(bme->bme_spi, Data_ToSend, 2, BME_MAX_TIMEOUT);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	f107 010c 	add.w	r1, r7, #12
 8002fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	f00b fcaa 	bl	800e92a <HAL_SPI_Transmit>
   BME280_CsHigh(bme);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff ffaa 	bl	8002f30 <BME280_CsHigh>
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <BME280_Read16LE>:
static uint16_t BME280_Read16LE(BME280_t *bme, uint8_t address)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	70fb      	strb	r3, [r7, #3]
   uint8_t data[2];
   data[0] = BME280_Read8(bme, address);
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff ffab 	bl	8002f50 <BME280_Read8>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	733b      	strb	r3, [r7, #12]
   data[1] = BME280_Read8(bme, address + 1);
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	3301      	adds	r3, #1
 8003002:	b2db      	uxtb	r3, r3
 8003004:	4619      	mov	r1, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ffa2 	bl	8002f50 <BME280_Read8>
 800300c:	4603      	mov	r3, r0
 800300e:	737b      	strb	r3, [r7, #13]
   return ((data[1] << 8) | data[0]);
 8003010:	7b7b      	ldrb	r3, [r7, #13]
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	b21a      	sxth	r2, r3
 8003016:	7b3b      	ldrb	r3, [r7, #12]
 8003018:	b21b      	sxth	r3, r3
 800301a:	4313      	orrs	r3, r2
 800301c:	b21b      	sxth	r3, r3
 800301e:	b29b      	uxth	r3, r3
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <BME280_Read16>:
static uint16_t BME280_Read16(BME280_t *bme, uint8_t address)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
   uint8_t data[2];
   data[0] = BME280_Read8(bme, address);
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	4619      	mov	r1, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ff89 	bl	8002f50 <BME280_Read8>
 800303e:	4603      	mov	r3, r0
 8003040:	733b      	strb	r3, [r7, #12]
   data[1] = BME280_Read8(bme, address + 1);
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	3301      	adds	r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	4619      	mov	r1, r3
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ff80 	bl	8002f50 <BME280_Read8>
 8003050:	4603      	mov	r3, r0
 8003052:	737b      	strb	r3, [r7, #13]
   return ((data[0] << 8) | data[1]);
 8003054:	7b3b      	ldrb	r3, [r7, #12]
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	b21a      	sxth	r2, r3
 800305a:	7b7b      	ldrb	r3, [r7, #13]
 800305c:	b21b      	sxth	r3, r3
 800305e:	4313      	orrs	r3, r2
 8003060:	b21b      	sxth	r3, r3
 8003062:	b29b      	uxth	r3, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <BME280_Read24>:
uint32_t BME280_Read24(BME280_t *bme, uint8_t addr)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
   addr |= 128;
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800307e:	b2db      	uxtb	r3, r3
 8003080:	70fb      	strb	r3, [r7, #3]
   uint8_t data[3];
   BME280_CsLow(bme);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ff44 	bl	8002f10 <BME280_CsLow>
   HAL_SPI_Transmit(bme->bme_spi, &addr, 1, BME_MAX_TIMEOUT);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	1cf9      	adds	r1, r7, #3
 800308e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003092:	2201      	movs	r2, #1
 8003094:	f00b fc49 	bl	800e92a <HAL_SPI_Transmit>
   HAL_SPI_Receive(bme->bme_spi, data, 3, BME_MAX_TIMEOUT);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	f107 010c 	add.w	r1, r7, #12
 80030a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030a4:	2203      	movs	r2, #3
 80030a6:	f00b fdae 	bl	800ec06 <HAL_SPI_Receive>
   BME280_CsHigh(bme);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff ff40 	bl	8002f30 <BME280_CsHigh>
   return ((data[0] << 16) | (data[1] << 8) | data[2]);
 80030b0:	7b3b      	ldrb	r3, [r7, #12]
 80030b2:	041a      	lsls	r2, r3, #16
 80030b4:	7b7b      	ldrb	r3, [r7, #13]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	4313      	orrs	r3, r2
 80030ba:	7bba      	ldrb	r2, [r7, #14]
 80030bc:	4313      	orrs	r3, r2
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <BME280_Read_temp>:
static float BME280_Read_temp(BME280_t *bme)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
   int32_t var1, var2;
   int32_t adc_T = BME280_Read24(bme, BME280_TEMPDATA);
 80030d0:	21fa      	movs	r1, #250	; 0xfa
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ffca 	bl	800306c <BME280_Read24>
 80030d8:	4603      	mov	r3, r0
 80030da:	617b      	str	r3, [r7, #20]
   if(adc_T == 0x800000)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030e2:	d102      	bne.n	80030ea <BME280_Read_temp+0x22>
      return -99;
 80030e4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003170 <BME280_Read_temp+0xa8>
 80030e8:	e03b      	b.n	8003162 <BME280_Read_temp+0x9a>

   adc_T >>= 4;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	111b      	asrs	r3, r3, #4
 80030ee:	617b      	str	r3, [r7, #20]

   var1 = ((((adc_T >> 3) - ((int32_t)bme->t1 << 1))) * ((int32_t)bme->t2)) >> 11;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	10da      	asrs	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8003102:	fb02 f303 	mul.w	r3, r2, r3
 8003106:	12db      	asrs	r3, r3, #11
 8003108:	613b      	str	r3, [r7, #16]

   var2 = (((((adc_T >> 4) - ((int32_t)bme->t1)) * ((adc_T >> 4) - ((int32_t)bme->t1))) >> 12) * ((int32_t)bme->t3)) >> 14;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	111b      	asrs	r3, r3, #4
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	1112      	asrs	r2, r2, #4
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800311c:	1a52      	subs	r2, r2, r1
 800311e:	fb02 f303 	mul.w	r3, r2, r3
 8003122:	131b      	asrs	r3, r3, #12
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	139b      	asrs	r3, r3, #14
 8003130:	60fb      	str	r3, [r7, #12]

   bme->t_fine = var1 + var2;
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	441a      	add	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c

   float T = (bme->t_fine * 5 + 128) >> 8;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	3380      	adds	r3, #128	; 0x80
 8003148:	121b      	asrs	r3, r3, #8
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003152:	edc7 7a02 	vstr	s15, [r7, #8]
   return T / 100;
 8003156:	edd7 7a02 	vldr	s15, [r7, #8]
 800315a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003174 <BME280_Read_temp+0xac>
 800315e:	ee87 7aa6 	vdiv.f32	s14, s15, s13

   return -99;
}
 8003162:	eef0 7a47 	vmov.f32	s15, s14
 8003166:	eeb0 0a67 	vmov.f32	s0, s15
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	c2c60000 	.word	0xc2c60000
 8003174:	42c80000 	.word	0x42c80000

08003178 <BME280_Read_hum>:
static float BME280_Read_hum(BME280_t *bme)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

   int32_t adc_H = BME280_Read16(bme, BME280_HUMIDDATA);
 8003180:	21fd      	movs	r1, #253	; 0xfd
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff ff50 	bl	8003028 <BME280_Read16>
 8003188:	4603      	mov	r3, r0
 800318a:	617b      	str	r3, [r7, #20]
   if(adc_H == 0x8000) // value in case humidity measurement was disabled
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003192:	d102      	bne.n	800319a <BME280_Read_hum+0x22>
      return -99;      // error
 8003194:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003268 <BME280_Read_hum+0xf0>
 8003198:	e05f      	b.n	800325a <BME280_Read_hum+0xe2>
   int32_t v_x1_u32r;

   v_x1_u32r = (bme->t_fine - ((int32_t)76800));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80031a2:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (((((adc_H << 14) - (((int32_t)bme->h4) << 20) - (((int32_t)bme->h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15)
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	039a      	lsls	r2, r3, #14
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80031ae:	051b      	lsls	r3, r3, #20
 80031b0:	1ad2      	subs	r2, r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80031b8:	4619      	mov	r1, r3
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80031c6:	13db      	asrs	r3, r3, #15
                * (((((((v_x1_u32r * ((int32_t)bme->h6)) >> 10) * (((v_x1_u32r * ((int32_t)bme->h3)) >> 11) + ((int32_t)32768))) >> 10)
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	f992 200a 	ldrsb.w	r2, [r2, #10]
 80031ce:	4611      	mov	r1, r2
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	fb01 f202 	mul.w	r2, r1, r2
 80031d6:	1292      	asrs	r2, r2, #10
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	7a49      	ldrb	r1, [r1, #9]
 80031dc:	4608      	mov	r0, r1
 80031de:	6939      	ldr	r1, [r7, #16]
 80031e0:	fb00 f101 	mul.w	r1, r0, r1
 80031e4:	12c9      	asrs	r1, r1, #11
 80031e6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80031ea:	fb01 f202 	mul.w	r2, r1, r2
 80031ee:	1292      	asrs	r2, r2, #10
                     + ((int32_t)2097152))
 80031f0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                        * ((int32_t)bme->h2)
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	f9b1 1020 	ldrsh.w	r1, [r1, #32]
 80031fa:	fb01 f202 	mul.w	r2, r1, r2
                    + 8192)
 80031fe:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
                   >> 14));
 8003202:	1392      	asrs	r2, r2, #14
   v_x1_u32r = (((((adc_H << 14) - (((int32_t)bme->h4) << 20) - (((int32_t)bme->h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15)
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((int32_t)bme->h1)) >> 4));
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	13db      	asrs	r3, r3, #15
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	13d2      	asrs	r2, r2, #15
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	11db      	asrs	r3, r3, #7
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	7a12      	ldrb	r2, [r2, #8]
 800321c:	fb02 f303 	mul.w	r3, r2, r3
 8003220:	111b      	asrs	r3, r3, #4
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800322e:	613b      	str	r3, [r7, #16]
   v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8003236:	bfa8      	it	ge
 8003238:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800323c:	613b      	str	r3, [r7, #16]
   float h   = (v_x1_u32r >> 12);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	131b      	asrs	r3, r3, #12
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800324a:	edc7 7a03 	vstr	s15, [r7, #12]
   return h / 1024.0;
 800324e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003252:	eddf 6a06 	vldr	s13, [pc, #24]	; 800326c <BME280_Read_hum+0xf4>
 8003256:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 800325a:	eef0 7a47 	vmov.f32	s15, s14
 800325e:	eeb0 0a67 	vmov.f32	s0, s15
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	c2c60000 	.word	0xc2c60000
 800326c:	44800000 	.word	0x44800000

08003270 <BME280_Read_press>:
static float BME280_Read_press(BME280_t *bme)
{
 8003270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003274:	b0cc      	sub	sp, #304	; 0x130
 8003276:	af00      	add	r7, sp, #0
 8003278:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
   int64_t var1, var2, p;

   // Must be done first to get the t_fine variable set up

   int32_t adc_P = BME280_Read24(bme, BME280_PRESSUREDATA);
 800327c:	21f7      	movs	r1, #247	; 0xf7
 800327e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8003282:	f7ff fef3 	bl	800306c <BME280_Read24>
 8003286:	4603      	mov	r3, r0
 8003288:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   adc_P >>= 4;
 800328c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003290:	111b      	asrs	r3, r3, #4
 8003292:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

   var1 = ((int64_t)bme->t_fine) - 128000;
 8003296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	17da      	asrs	r2, r3, #31
 800329e:	4698      	mov	r8, r3
 80032a0:	4691      	mov	r9, r2
 80032a2:	f5b8 33fa 	subs.w	r3, r8, #128000	; 0x1f400
 80032a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80032a8:	f149 33ff 	adc.w	r3, r9, #4294967295
 80032ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032b2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
   var2 = var1 * var1 * (int64_t)bme->p6;
 80032b6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80032ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80032be:	fb03 f102 	mul.w	r1, r3, r2
 80032c2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80032c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	18ca      	adds	r2, r1, r3
 80032d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80032d4:	fba3 4503 	umull	r4, r5, r3, r3
 80032d8:	1953      	adds	r3, r2, r5
 80032da:	461d      	mov	r5, r3
 80032dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032e0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80032e4:	b21b      	sxth	r3, r3
 80032e6:	17da      	asrs	r2, r3, #31
 80032e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032f0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80032f4:	4603      	mov	r3, r0
 80032f6:	fb03 f205 	mul.w	r2, r3, r5
 80032fa:	460b      	mov	r3, r1
 80032fc:	fb04 f303 	mul.w	r3, r4, r3
 8003300:	4413      	add	r3, r2
 8003302:	4602      	mov	r2, r0
 8003304:	fba4 ab02 	umull	sl, fp, r4, r2
 8003308:	445b      	add	r3, fp
 800330a:	469b      	mov	fp, r3
 800330c:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
 8003310:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
   var2 = var2 + ((var1 * (int64_t)bme->p5) << 17);
 8003314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003318:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800331c:	b21b      	sxth	r3, r3
 800331e:	17da      	asrs	r2, r3, #31
 8003320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003324:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003328:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800332c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8003330:	462a      	mov	r2, r5
 8003332:	fb02 f203 	mul.w	r2, r2, r3
 8003336:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800333a:	4621      	mov	r1, r4
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	441a      	add	r2, r3
 8003342:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003346:	4621      	mov	r1, r4
 8003348:	fba3 1301 	umull	r1, r3, r3, r1
 800334c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003350:	460b      	mov	r3, r1
 8003352:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800335a:	18d3      	adds	r3, r2, r3
 800335c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003360:	f04f 0000 	mov.w	r0, #0
 8003364:	f04f 0100 	mov.w	r1, #0
 8003368:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800336c:	462b      	mov	r3, r5
 800336e:	0459      	lsls	r1, r3, #17
 8003370:	4623      	mov	r3, r4
 8003372:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8003376:	4623      	mov	r3, r4
 8003378:	0458      	lsls	r0, r3, #17
 800337a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800337e:	1814      	adds	r4, r2, r0
 8003380:	643c      	str	r4, [r7, #64]	; 0x40
 8003382:	414b      	adcs	r3, r1
 8003384:	647b      	str	r3, [r7, #68]	; 0x44
 8003386:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800338a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
   var2 = var2 + (((int64_t)bme->p4) << 35);
 800338e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003392:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003396:	b21b      	sxth	r3, r3
 8003398:	17da      	asrs	r2, r3, #31
 800339a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800339e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80033a2:	f04f 0000 	mov.w	r0, #0
 80033a6:	f04f 0100 	mov.w	r1, #0
 80033aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033ae:	00d9      	lsls	r1, r3, #3
 80033b0:	2000      	movs	r0, #0
 80033b2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80033b6:	1814      	adds	r4, r2, r0
 80033b8:	63bc      	str	r4, [r7, #56]	; 0x38
 80033ba:	414b      	adcs	r3, r1
 80033bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033be:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80033c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
   var1 = ((var1 * var1 * (int64_t)bme->p3) >> 8) + ((var1 * (int64_t)bme->p2) << 12);
 80033c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80033ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80033ce:	fb03 f102 	mul.w	r1, r3, r2
 80033d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80033d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80033da:	fb02 f303 	mul.w	r3, r2, r3
 80033de:	18ca      	adds	r2, r1, r3
 80033e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80033e4:	fba3 1303 	umull	r1, r3, r3, r3
 80033e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80033ec:	460b      	mov	r3, r1
 80033ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80033f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033f6:	18d3      	adds	r3, r2, r3
 80033f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80033fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003400:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003404:	b21b      	sxth	r3, r3
 8003406:	17da      	asrs	r2, r3, #31
 8003408:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800340c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003410:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8003414:	462b      	mov	r3, r5
 8003416:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800341a:	4642      	mov	r2, r8
 800341c:	fb02 f203 	mul.w	r2, r2, r3
 8003420:	464b      	mov	r3, r9
 8003422:	4621      	mov	r1, r4
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	4413      	add	r3, r2
 800342a:	4622      	mov	r2, r4
 800342c:	4641      	mov	r1, r8
 800342e:	fba2 1201 	umull	r1, r2, r2, r1
 8003432:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003436:	460a      	mov	r2, r1
 8003438:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800343c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003440:	4413      	add	r3, r2
 8003442:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003446:	f04f 0000 	mov.w	r0, #0
 800344a:	f04f 0100 	mov.w	r1, #0
 800344e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8003452:	4623      	mov	r3, r4
 8003454:	0a18      	lsrs	r0, r3, #8
 8003456:	462b      	mov	r3, r5
 8003458:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800345c:	462b      	mov	r3, r5
 800345e:	1219      	asrs	r1, r3, #8
 8003460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003464:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003468:	b21b      	sxth	r3, r3
 800346a:	17da      	asrs	r2, r3, #31
 800346c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003470:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003474:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003478:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800347c:	464a      	mov	r2, r9
 800347e:	fb02 f203 	mul.w	r2, r2, r3
 8003482:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003486:	4644      	mov	r4, r8
 8003488:	fb04 f303 	mul.w	r3, r4, r3
 800348c:	441a      	add	r2, r3
 800348e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003492:	4644      	mov	r4, r8
 8003494:	fba3 4304 	umull	r4, r3, r3, r4
 8003498:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800349c:	4623      	mov	r3, r4
 800349e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80034a6:	18d3      	adds	r3, r2, r3
 80034a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80034b8:	464c      	mov	r4, r9
 80034ba:	0323      	lsls	r3, r4, #12
 80034bc:	4644      	mov	r4, r8
 80034be:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80034c2:	4644      	mov	r4, r8
 80034c4:	0322      	lsls	r2, r4, #12
 80034c6:	1884      	adds	r4, r0, r2
 80034c8:	633c      	str	r4, [r7, #48]	; 0x30
 80034ca:	eb41 0303 	adc.w	r3, r1, r3
 80034ce:	637b      	str	r3, [r7, #52]	; 0x34
 80034d0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80034d4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
   var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bme->p1) >> 33;
 80034d8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80034dc:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80034e0:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 80034e4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80034e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2200      	movs	r2, #0
 80034f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034fa:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80034fe:	462b      	mov	r3, r5
 8003500:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003504:	4642      	mov	r2, r8
 8003506:	fb02 f203 	mul.w	r2, r2, r3
 800350a:	464b      	mov	r3, r9
 800350c:	4621      	mov	r1, r4
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	4622      	mov	r2, r4
 8003516:	4641      	mov	r1, r8
 8003518:	fba2 1201 	umull	r1, r2, r2, r1
 800351c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8003520:	460a      	mov	r2, r1
 8003522:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8003526:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800352a:	4413      	add	r3, r2
 800352c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800353c:	4629      	mov	r1, r5
 800353e:	104a      	asrs	r2, r1, #1
 8003540:	4629      	mov	r1, r5
 8003542:	17cb      	asrs	r3, r1, #31
 8003544:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

   if(var1 == 0)
 8003548:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800354c:	4313      	orrs	r3, r2
 800354e:	d102      	bne.n	8003556 <BME280_Read_press+0x2e6>
   {
      return 0; // avoid exception caused by division by zero
 8003550:	eddf 7aae 	vldr	s15, [pc, #696]	; 800380c <BME280_Read_press+0x59c>
 8003554:	e152      	b.n	80037fc <BME280_Read_press+0x58c>
   }
   p    = 1048576 - adc_P;
 8003556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800355a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800355e:	17da      	asrs	r2, r3, #31
 8003560:	62bb      	str	r3, [r7, #40]	; 0x28
 8003562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003564:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003568:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
   p    = (((p << 31) - var2) * 3125) / var1;
 800356c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003570:	105b      	asrs	r3, r3, #1
 8003572:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003576:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800357a:	07db      	lsls	r3, r3, #31
 800357c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003580:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8003584:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8003588:	4621      	mov	r1, r4
 800358a:	1a89      	subs	r1, r1, r2
 800358c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003590:	4629      	mov	r1, r5
 8003592:	eb61 0303 	sbc.w	r3, r1, r3
 8003596:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800359a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800359e:	4622      	mov	r2, r4
 80035a0:	462b      	mov	r3, r5
 80035a2:	1891      	adds	r1, r2, r2
 80035a4:	6239      	str	r1, [r7, #32]
 80035a6:	415b      	adcs	r3, r3
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
 80035aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035ae:	4621      	mov	r1, r4
 80035b0:	1851      	adds	r1, r2, r1
 80035b2:	61b9      	str	r1, [r7, #24]
 80035b4:	4629      	mov	r1, r5
 80035b6:	414b      	adcs	r3, r1
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80035c6:	4649      	mov	r1, r9
 80035c8:	018b      	lsls	r3, r1, #6
 80035ca:	4641      	mov	r1, r8
 80035cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035d0:	4641      	mov	r1, r8
 80035d2:	018a      	lsls	r2, r1, #6
 80035d4:	4641      	mov	r1, r8
 80035d6:	1889      	adds	r1, r1, r2
 80035d8:	6139      	str	r1, [r7, #16]
 80035da:	4649      	mov	r1, r9
 80035dc:	eb43 0101 	adc.w	r1, r3, r1
 80035e0:	6179      	str	r1, [r7, #20]
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80035ee:	4649      	mov	r1, r9
 80035f0:	008b      	lsls	r3, r1, #2
 80035f2:	4641      	mov	r1, r8
 80035f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035f8:	4641      	mov	r1, r8
 80035fa:	008a      	lsls	r2, r1, #2
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	4603      	mov	r3, r0
 8003602:	4622      	mov	r2, r4
 8003604:	189b      	adds	r3, r3, r2
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	460b      	mov	r3, r1
 800360a:	462a      	mov	r2, r5
 800360c:	eb42 0303 	adc.w	r3, r2, r3
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800361e:	4649      	mov	r1, r9
 8003620:	008b      	lsls	r3, r1, #2
 8003622:	4641      	mov	r1, r8
 8003624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003628:	4641      	mov	r1, r8
 800362a:	008a      	lsls	r2, r1, #2
 800362c:	4610      	mov	r0, r2
 800362e:	4619      	mov	r1, r3
 8003630:	4603      	mov	r3, r0
 8003632:	4622      	mov	r2, r4
 8003634:	189b      	adds	r3, r3, r2
 8003636:	67bb      	str	r3, [r7, #120]	; 0x78
 8003638:	462b      	mov	r3, r5
 800363a:	460a      	mov	r2, r1
 800363c:	eb42 0303 	adc.w	r3, r2, r3
 8003640:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003642:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8003646:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800364a:	f7fd fb35 	bl	8000cb8 <__aeabi_ldivmod>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
   var1 = (((int64_t)bme->p9) * (p >> 13) * (p >> 13)) >> 25;
 8003656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800365a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800365e:	b21b      	sxth	r3, r3
 8003660:	17da      	asrs	r2, r3, #31
 8003662:	673b      	str	r3, [r7, #112]	; 0x70
 8003664:	677a      	str	r2, [r7, #116]	; 0x74
 8003666:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800366a:	f04f 0000 	mov.w	r0, #0
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	0b50      	lsrs	r0, r2, #13
 8003674:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003678:	1359      	asrs	r1, r3, #13
 800367a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800367e:	462b      	mov	r3, r5
 8003680:	fb00 f203 	mul.w	r2, r0, r3
 8003684:	4623      	mov	r3, r4
 8003686:	fb03 f301 	mul.w	r3, r3, r1
 800368a:	4413      	add	r3, r2
 800368c:	4622      	mov	r2, r4
 800368e:	fba2 1200 	umull	r1, r2, r2, r0
 8003692:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003696:	460a      	mov	r2, r1
 8003698:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800369c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80036a0:	4413      	add	r3, r2
 80036a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80036a6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80036aa:	f04f 0000 	mov.w	r0, #0
 80036ae:	f04f 0100 	mov.w	r1, #0
 80036b2:	0b50      	lsrs	r0, r2, #13
 80036b4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80036b8:	1359      	asrs	r1, r3, #13
 80036ba:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80036be:	462b      	mov	r3, r5
 80036c0:	fb00 f203 	mul.w	r2, r0, r3
 80036c4:	4623      	mov	r3, r4
 80036c6:	fb03 f301 	mul.w	r3, r3, r1
 80036ca:	4413      	add	r3, r2
 80036cc:	4622      	mov	r2, r4
 80036ce:	fba2 1200 	umull	r1, r2, r2, r0
 80036d2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036d6:	460a      	mov	r2, r1
 80036d8:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80036dc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80036e0:	4413      	add	r3, r2
 80036e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80036f2:	4621      	mov	r1, r4
 80036f4:	0e4a      	lsrs	r2, r1, #25
 80036f6:	4629      	mov	r1, r5
 80036f8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80036fc:	4629      	mov	r1, r5
 80036fe:	164b      	asrs	r3, r1, #25
 8003700:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
   var2 = (((int64_t)bme->p8) * p) >> 19;
 8003704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003708:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800370c:	b21b      	sxth	r3, r3
 800370e:	17da      	asrs	r2, r3, #31
 8003710:	66bb      	str	r3, [r7, #104]	; 0x68
 8003712:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003714:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003718:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800371c:	462a      	mov	r2, r5
 800371e:	fb02 f203 	mul.w	r2, r2, r3
 8003722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003726:	4621      	mov	r1, r4
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	4413      	add	r3, r2
 800372e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003732:	4621      	mov	r1, r4
 8003734:	fba2 1201 	umull	r1, r2, r2, r1
 8003738:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800373c:	460a      	mov	r2, r1
 800373e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8003742:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003746:	4413      	add	r3, r2
 8003748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8003758:	4621      	mov	r1, r4
 800375a:	0cca      	lsrs	r2, r1, #19
 800375c:	4629      	mov	r1, r5
 800375e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003762:	4629      	mov	r1, r5
 8003764:	14cb      	asrs	r3, r1, #19
 8003766:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

   p = ((p + var1 + var2) >> 8) + (((int64_t)bme->p7) << 4);
 800376a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800376e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8003772:	1884      	adds	r4, r0, r2
 8003774:	663c      	str	r4, [r7, #96]	; 0x60
 8003776:	eb41 0303 	adc.w	r3, r1, r3
 800377a:	667b      	str	r3, [r7, #100]	; 0x64
 800377c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8003780:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003784:	4621      	mov	r1, r4
 8003786:	1889      	adds	r1, r1, r2
 8003788:	65b9      	str	r1, [r7, #88]	; 0x58
 800378a:	4629      	mov	r1, r5
 800378c:	eb43 0101 	adc.w	r1, r3, r1
 8003790:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800379e:	4623      	mov	r3, r4
 80037a0:	0a18      	lsrs	r0, r3, #8
 80037a2:	462b      	mov	r3, r5
 80037a4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80037a8:	462b      	mov	r3, r5
 80037aa:	1219      	asrs	r1, r3, #8
 80037ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80037b4:	b21b      	sxth	r3, r3
 80037b6:	17da      	asrs	r2, r3, #31
 80037b8:	653b      	str	r3, [r7, #80]	; 0x50
 80037ba:	657a      	str	r2, [r7, #84]	; 0x54
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80037c8:	464c      	mov	r4, r9
 80037ca:	0123      	lsls	r3, r4, #4
 80037cc:	4644      	mov	r4, r8
 80037ce:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80037d2:	4644      	mov	r4, r8
 80037d4:	0122      	lsls	r2, r4, #4
 80037d6:	1884      	adds	r4, r0, r2
 80037d8:	603c      	str	r4, [r7, #0]
 80037da:	eb41 0303 	adc.w	r3, r1, r3
 80037de:	607b      	str	r3, [r7, #4]
 80037e0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80037e4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
   return (int32_t)p / 256;
 80037e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	da00      	bge.n	80037f2 <BME280_Read_press+0x582>
 80037f0:	33ff      	adds	r3, #255	; 0xff
 80037f2:	121b      	asrs	r3, r3, #8
 80037f4:	ee07 3a90 	vmov	s15, r3
 80037f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80037fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003800:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003804:	46bd      	mov	sp, r7
 8003806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800380a:	bf00      	nop
 800380c:	00000000 	.word	0x00000000

08003810 <BME280_ReadAll>:
void BME280_ReadAll(BME280_t *bme, float *T, float *P, float *H)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
   *T = BME280_Read_temp(bme);
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f7ff fc52 	bl	80030c8 <BME280_Read_temp>
 8003824:	eef0 7a40 	vmov.f32	s15, s0
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	edc3 7a00 	vstr	s15, [r3]
   *P = BME280_Read_press(bme) / 100;
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7ff fd1e 	bl	8003270 <BME280_Read_press>
 8003834:	eeb0 7a40 	vmov.f32	s14, s0
 8003838:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003860 <BME280_ReadAll+0x50>
 800383c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	edc3 7a00 	vstr	s15, [r3]
   *H = BME280_Read_hum(bme);
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7ff fc96 	bl	8003178 <BME280_Read_hum>
 800384c:	eef0 7a40 	vmov.f32	s15, s0
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	edc3 7a00 	vstr	s15, [r3]
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	42c80000 	.word	0x42c80000

08003864 <BME280_Init>:
void BME280_Init(BME280_t *bme, SPI_HandleTypeDef *spi, GPIO_TypeDef *CsPort, uint16_t CsPin)
{
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	807b      	strh	r3, [r7, #2]
   bme->bme_spi       = spi;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	601a      	str	r2, [r3, #0]
   bme->bme280_CsPort = CsPort;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	605a      	str	r2, [r3, #4]
   bme->bme280_CsPin  = CsPin;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	887a      	ldrh	r2, [r7, #2]
 8003882:	855a      	strh	r2, [r3, #42]	; 0x2a
   bme->t1            = BME280_Read16LE(bme, BME280_DIG_T1);
 8003884:	2188      	movs	r1, #136	; 0x88
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f7ff fbac 	bl	8002fe4 <BME280_Read16LE>
 800388c:	4603      	mov	r3, r0
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	84da      	strh	r2, [r3, #38]	; 0x26
   bme->t2            = BME280_Read16LE(bme, BME280_DIG_T2);
 8003894:	218a      	movs	r1, #138	; 0x8a
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f7ff fba4 	bl	8002fe4 <BME280_Read16LE>
 800389c:	4603      	mov	r3, r0
 800389e:	b21a      	sxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	819a      	strh	r2, [r3, #12]
   bme->t3            = BME280_Read16LE(bme, BME280_DIG_T3);
 80038a4:	218c      	movs	r1, #140	; 0x8c
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f7ff fb9c 	bl	8002fe4 <BME280_Read16LE>
 80038ac:	4603      	mov	r3, r0
 80038ae:	b21a      	sxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	81da      	strh	r2, [r3, #14]

   bme->p1 = BME280_Read16LE(bme, BME280_DIG_P1);
 80038b4:	218e      	movs	r1, #142	; 0x8e
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7ff fb94 	bl	8002fe4 <BME280_Read16LE>
 80038bc:	4603      	mov	r3, r0
 80038be:	461a      	mov	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	851a      	strh	r2, [r3, #40]	; 0x28
   bme->p2 = BME280_Read16LE(bme, BME280_DIG_P2);
 80038c4:	2190      	movs	r1, #144	; 0x90
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f7ff fb8c 	bl	8002fe4 <BME280_Read16LE>
 80038cc:	4603      	mov	r3, r0
 80038ce:	b21a      	sxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	821a      	strh	r2, [r3, #16]
   bme->p3 = BME280_Read16LE(bme, BME280_DIG_P3);
 80038d4:	2192      	movs	r1, #146	; 0x92
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f7ff fb84 	bl	8002fe4 <BME280_Read16LE>
 80038dc:	4603      	mov	r3, r0
 80038de:	b21a      	sxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	825a      	strh	r2, [r3, #18]
   bme->p4 = BME280_Read16LE(bme, BME280_DIG_P4);
 80038e4:	2194      	movs	r1, #148	; 0x94
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f7ff fb7c 	bl	8002fe4 <BME280_Read16LE>
 80038ec:	4603      	mov	r3, r0
 80038ee:	b21a      	sxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	829a      	strh	r2, [r3, #20]
   bme->p5 = BME280_Read16LE(bme, BME280_DIG_P5);
 80038f4:	2196      	movs	r1, #150	; 0x96
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7ff fb74 	bl	8002fe4 <BME280_Read16LE>
 80038fc:	4603      	mov	r3, r0
 80038fe:	b21a      	sxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	82da      	strh	r2, [r3, #22]
   bme->p6 = BME280_Read16LE(bme, BME280_DIG_P6);
 8003904:	2198      	movs	r1, #152	; 0x98
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f7ff fb6c 	bl	8002fe4 <BME280_Read16LE>
 800390c:	4603      	mov	r3, r0
 800390e:	b21a      	sxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	831a      	strh	r2, [r3, #24]
   bme->p7 = BME280_Read16LE(bme, BME280_DIG_P7);
 8003914:	219a      	movs	r1, #154	; 0x9a
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f7ff fb64 	bl	8002fe4 <BME280_Read16LE>
 800391c:	4603      	mov	r3, r0
 800391e:	b21a      	sxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	835a      	strh	r2, [r3, #26]
   bme->p8 = BME280_Read16LE(bme, BME280_DIG_P8);
 8003924:	219c      	movs	r1, #156	; 0x9c
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7ff fb5c 	bl	8002fe4 <BME280_Read16LE>
 800392c:	4603      	mov	r3, r0
 800392e:	b21a      	sxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	839a      	strh	r2, [r3, #28]
   bme->p9 = BME280_Read16LE(bme, BME280_DIG_P9);
 8003934:	219e      	movs	r1, #158	; 0x9e
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7ff fb54 	bl	8002fe4 <BME280_Read16LE>
 800393c:	4603      	mov	r3, r0
 800393e:	b21a      	sxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	83da      	strh	r2, [r3, #30]

   bme->h1 = BME280_Read8(bme, BME280_DIG_H1);
 8003944:	21a1      	movs	r1, #161	; 0xa1
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f7ff fb02 	bl	8002f50 <BME280_Read8>
 800394c:	4603      	mov	r3, r0
 800394e:	461a      	mov	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	721a      	strb	r2, [r3, #8]
   bme->h2 = BME280_Read16LE(bme, BME280_DIG_H2);
 8003954:	21e1      	movs	r1, #225	; 0xe1
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f7ff fb44 	bl	8002fe4 <BME280_Read16LE>
 800395c:	4603      	mov	r3, r0
 800395e:	b21a      	sxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	841a      	strh	r2, [r3, #32]
   bme->h3 = BME280_Read8(bme, BME280_DIG_H3);
 8003964:	21e3      	movs	r1, #227	; 0xe3
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f7ff faf2 	bl	8002f50 <BME280_Read8>
 800396c:	4603      	mov	r3, r0
 800396e:	461a      	mov	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	725a      	strb	r2, [r3, #9]
   bme->h4 = ((BME280_Read8(bme, BME280_DIG_H4) << 4) | (BME280_Read8(bme, BME280_DIG_H4 + 1) & 0xF));
 8003974:	21e4      	movs	r1, #228	; 0xe4
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f7ff faea 	bl	8002f50 <BME280_Read8>
 800397c:	4603      	mov	r3, r0
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	b21c      	sxth	r4, r3
 8003982:	21e5      	movs	r1, #229	; 0xe5
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff fae3 	bl	8002f50 <BME280_Read8>
 800398a:	4603      	mov	r3, r0
 800398c:	b21b      	sxth	r3, r3
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	b21b      	sxth	r3, r3
 8003994:	4323      	orrs	r3, r4
 8003996:	b21a      	sxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	845a      	strh	r2, [r3, #34]	; 0x22
   bme->h5 = ((BME280_Read8(bme, BME280_DIG_H5 + 1) << 4) | (BME280_Read8(bme, BME280_DIG_H5) >> 4));
 800399c:	21e6      	movs	r1, #230	; 0xe6
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff fad6 	bl	8002f50 <BME280_Read8>
 80039a4:	4603      	mov	r3, r0
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	b21c      	sxth	r4, r3
 80039aa:	21e5      	movs	r1, #229	; 0xe5
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f7ff facf 	bl	8002f50 <BME280_Read8>
 80039b2:	4603      	mov	r3, r0
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	b21b      	sxth	r3, r3
 80039ba:	4323      	orrs	r3, r4
 80039bc:	b21a      	sxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	849a      	strh	r2, [r3, #36]	; 0x24
   bme->h6 = (int8_t)BME280_Read8(bme, BME280_DIG_H6);
 80039c2:	21e7      	movs	r1, #231	; 0xe7
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f7ff fac3 	bl	8002f50 <BME280_Read8>
 80039ca:	4603      	mov	r3, r0
 80039cc:	b25a      	sxtb	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	729a      	strb	r2, [r3, #10]
   BME280_Write8(bme, BME280_HUM_CONTROL, 0b00000100);
 80039d2:	2204      	movs	r2, #4
 80039d4:	21f2      	movs	r1, #242	; 0xf2
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f7ff fae1 	bl	8002f9e <BME280_Write8>
   BME280_Write8(bme, BME280_CONTROL, 0b10110111);
 80039dc:	22b7      	movs	r2, #183	; 0xb7
 80039de:	21f4      	movs	r1, #244	; 0xf4
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f7ff fadc 	bl	8002f9e <BME280_Write8>
   BME280_Write8(bme, BME280_CONFIG, 0b00000000);
 80039e6:	2200      	movs	r2, #0
 80039e8:	21f5      	movs	r1, #245	; 0xf5
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f7ff fad7 	bl	8002f9e <BME280_Write8>
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd90      	pop	{r4, r7, pc}

080039f8 <Crc>:
#include "cmsis_os.h"
#include "main.h"
int RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
int k              = 0;
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
   taskENTER_CRITICAL();
 8003a04:	f012 fa8e 	bl	8015f24 <vPortEnterCritical>
   PreviuseCRC ^= data[0];
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4053      	eors	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8003a14:	2301      	movs	r3, #1
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	e032      	b.n	8003a80 <Crc+0x88>
   {
      uint32_t temp = data[i];
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	4413      	add	r3, r2
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	613b      	str	r3, [r7, #16]
      if(temp == 0x00000000)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d115      	bne.n	8003a56 <Crc+0x5e>
      {
         temp = RandomNumber[k % 12];
 8003a2a:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <Crc+0xa4>)
 8003a2c:	6819      	ldr	r1, [r3, #0]
 8003a2e:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <Crc+0xa8>)
 8003a30:	fb83 2301 	smull	r2, r3, r3, r1
 8003a34:	105a      	asrs	r2, r3, #1
 8003a36:	17cb      	asrs	r3, r1, #31
 8003a38:	1ad2      	subs	r2, r2, r3
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	1aca      	subs	r2, r1, r3
 8003a44:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <Crc+0xac>)
 8003a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a4a:	613b      	str	r3, [r7, #16]
         k++;
 8003a4c:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <Crc+0xa4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3301      	adds	r3, #1
 8003a52:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <Crc+0xa4>)
 8003a54:	6013      	str	r3, [r2, #0]
      }
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4053      	eors	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
      if(PreviuseCRC & 0x80000000)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	da03      	bge.n	8003a74 <Crc+0x7c>
      {
         PreviuseCRC ^= 0xABC245C2;
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <Crc+0xb0>)
 8003a70:	4053      	eors	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
      }
      PreviuseCRC <<= 1;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d3c8      	bcc.n	8003a1a <Crc+0x22>
   }
   k = 0;
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <Crc+0xa4>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
   taskEXIT_CRITICAL();
 8003a8e:	f012 fa79 	bl	8015f84 <vPortExitCritical>
   return PreviuseCRC;
 8003a92:	68fb      	ldr	r3, [r7, #12]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	200002ac 	.word	0x200002ac
 8003aa0:	2aaaaaab 	.word	0x2aaaaaab
 8003aa4:	20000024 	.word	0x20000024
 8003aa8:	abc245c2 	.word	0xabc245c2

08003aac <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
   uint8_t temp = 1;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
   for(int i = 0; i < DataLength; i++)
 8003abc:	2300      	movs	r3, #0
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	e03b      	b.n	8003b3a <RepareMessage+0x8e>
   {
      for(int j = 0; j < 8; j++)
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	e032      	b.n	8003b2e <RepareMessage+0x82>
      {
         data[i] ^= (temp << j);
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	4413      	add	r3, r2
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	b25a      	sxtb	r2, r3
 8003ad2:	7df9      	ldrb	r1, [r7, #23]
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	b25b      	sxtb	r3, r3
 8003adc:	4053      	eors	r3, r2
 8003ade:	b259      	sxtb	r1, r3
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	b2ca      	uxtb	r2, r1
 8003ae8:	701a      	strb	r2, [r3, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3b04      	subs	r3, #4
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	4619      	mov	r1, r3
 8003af2:	f04f 30ff 	mov.w	r0, #4294967295
 8003af6:	f7ff ff7f 	bl	80039f8 <Crc>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d101      	bne.n	8003b06 <RepareMessage+0x5a>
         {
            return CRC_OK;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e01e      	b.n	8003b44 <RepareMessage+0x98>
         }
         else
         {
            data[i] ^= (temp << j);
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	b25a      	sxtb	r2, r3
 8003b10:	7df9      	ldrb	r1, [r7, #23]
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	fa01 f303 	lsl.w	r3, r1, r3
 8003b18:	b25b      	sxtb	r3, r3
 8003b1a:	4053      	eors	r3, r2
 8003b1c:	b259      	sxtb	r1, r3
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	4413      	add	r3, r2
 8003b24:	b2ca      	uxtb	r2, r1
 8003b26:	701a      	strb	r2, [r3, #0]
      for(int j = 0; j < 8; j++)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b07      	cmp	r3, #7
 8003b32:	ddc9      	ble.n	8003ac8 <RepareMessage+0x1c>
   for(int i = 0; i < DataLength; i++)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	3301      	adds	r3, #1
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d8bf      	bhi.n	8003ac2 <RepareMessage+0x16>
         }
      }
   }
   return CRC_ERROR;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003b52:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <MX_DMA_Init+0x44>)
 8003b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b56:	4a0e      	ldr	r2, [pc, #56]	; (8003b90 <MX_DMA_Init+0x44>)
 8003b58:	f043 0304 	orr.w	r3, r3, #4
 8003b5c:	6493      	str	r3, [r2, #72]	; 0x48
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <MX_DMA_Init+0x44>)
 8003b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	607b      	str	r3, [r7, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <MX_DMA_Init+0x44>)
 8003b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6e:	4a08      	ldr	r2, [pc, #32]	; (8003b90 <MX_DMA_Init+0x44>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	6493      	str	r3, [r2, #72]	; 0x48
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <MX_DMA_Init+0x44>)
 8003b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]

}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000

08003b94 <e_papier_reset>:
const unsigned char lut_bb[] = {
   0x80, 0x17, 0x00, 0x00, 0x00, 0x02, 0x90, 0x17, 0x17, 0x00, 0x00, 0x02, 0x80, 0x0A, 0x01, 0x00, 0x00, 0x01, 0x50, 0x0E, 0x0E,
   0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
void e_papier_reset(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b9e:	480d      	ldr	r0, [pc, #52]	; (8003bd4 <e_papier_reset+0x40>)
 8003ba0:	f008 fbc4 	bl	800c32c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8003ba4:	20c8      	movs	r0, #200	; 0xc8
 8003ba6:	f007 fdc7 	bl	800b738 <HAL_Delay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 0);
 8003baa:	2200      	movs	r2, #0
 8003bac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bb0:	4808      	ldr	r0, [pc, #32]	; (8003bd4 <e_papier_reset+0x40>)
 8003bb2:	f008 fbbb 	bl	800c32c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8003bb6:	20c8      	movs	r0, #200	; 0xc8
 8003bb8:	f007 fdbe 	bl	800b738 <HAL_Delay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bc2:	4804      	ldr	r0, [pc, #16]	; (8003bd4 <e_papier_reset+0x40>)
 8003bc4:	f008 fbb2 	bl	800c32c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8003bc8:	20c8      	movs	r0, #200	; 0xc8
 8003bca:	f007 fdb5 	bl	800b738 <HAL_Delay>
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	48000400 	.word	0x48000400

08003bd8 <e_papier_send_command>:
void e_papier_send_command(uint8_t command)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 0);
 8003be2:	2200      	movs	r2, #0
 8003be4:	2101      	movs	r1, #1
 8003be6:	480c      	ldr	r0, [pc, #48]	; (8003c18 <e_papier_send_command+0x40>)
 8003be8:	f008 fba0 	bl	800c32c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8003bec:	2200      	movs	r2, #0
 8003bee:	2102      	movs	r1, #2
 8003bf0:	4809      	ldr	r0, [pc, #36]	; (8003c18 <e_papier_send_command+0x40>)
 8003bf2:	f008 fb9b 	bl	800c32c <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &command, 1, 1000);
 8003bf6:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <e_papier_send_command+0x44>)
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	1df9      	adds	r1, r7, #7
 8003bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c00:	2201      	movs	r2, #1
 8003c02:	f00a fe92 	bl	800e92a <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 8003c06:	2201      	movs	r2, #1
 8003c08:	2102      	movs	r1, #2
 8003c0a:	4803      	ldr	r0, [pc, #12]	; (8003c18 <e_papier_send_command+0x40>)
 8003c0c:	f008 fb8e 	bl	800c32c <HAL_GPIO_WritePin>
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	48000400 	.word	0x48000400
 8003c1c:	200002b0 	.word	0x200002b0

08003c20 <e_papier_send_data>:
void e_papier_send_data(uint8_t data)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 1);
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	480c      	ldr	r0, [pc, #48]	; (8003c60 <e_papier_send_data+0x40>)
 8003c30:	f008 fb7c 	bl	800c32c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8003c34:	2200      	movs	r2, #0
 8003c36:	2102      	movs	r1, #2
 8003c38:	4809      	ldr	r0, [pc, #36]	; (8003c60 <e_papier_send_data+0x40>)
 8003c3a:	f008 fb77 	bl	800c32c <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &data, 1, 1000);
 8003c3e:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <e_papier_send_data+0x44>)
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	1df9      	adds	r1, r7, #7
 8003c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f00a fe6e 	bl	800e92a <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 8003c4e:	2201      	movs	r2, #1
 8003c50:	2102      	movs	r1, #2
 8003c52:	4803      	ldr	r0, [pc, #12]	; (8003c60 <e_papier_send_data+0x40>)
 8003c54:	f008 fb6a 	bl	800c32c <HAL_GPIO_WritePin>
}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	48000400 	.word	0x48000400
 8003c64:	200002b0 	.word	0x200002b0

08003c68 <e_papier_wait_until_idle>:
void e_papier_wait_until_idle(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8003c6c:	e002      	b.n	8003c74 <e_papier_wait_until_idle+0xc>
   {
      osDelay(100);
 8003c6e:	2064      	movs	r0, #100	; 0x64
 8003c70:	f00e fd14 	bl	801269c <osDelay>
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8003c74:	2104      	movs	r1, #4
 8003c76:	4804      	ldr	r0, [pc, #16]	; (8003c88 <e_papier_wait_until_idle+0x20>)
 8003c78:	f008 fb40 	bl	800c2fc <HAL_GPIO_ReadPin>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f5      	beq.n	8003c6e <e_papier_wait_until_idle+0x6>
   }
}
 8003c82:	bf00      	nop
 8003c84:	bf00      	nop
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	48000400 	.word	0x48000400

08003c8c <e_papier_set_pixel>:
void e_papier_set_pixel(uint16_t x, uint16_t y, color_t color)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	80fb      	strh	r3, [r7, #6]
 8003c96:	460b      	mov	r3, r1
 8003c98:	80bb      	strh	r3, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	70fb      	strb	r3, [r7, #3]
   if(x >= EPD_WIDTH || x < 0 || y >= EPD_HEIGHT || y < 0)
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003ca4:	d247      	bcs.n	8003d36 <e_papier_set_pixel+0xaa>
 8003ca6:	88bb      	ldrh	r3, [r7, #4]
 8003ca8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003cac:	d243      	bcs.n	8003d36 <e_papier_set_pixel+0xaa>
   {
      return;
   }
   if(color == WHITE)
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d120      	bne.n	8003cf6 <e_papier_set_pixel+0x6a>
   {
      BufferEpapier[x / 8 + y * EPD_WIDTH / 8] |= (0x80 > (x % 8));
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	08db      	lsrs	r3, r3, #3
 8003cb8:	b299      	uxth	r1, r3
 8003cba:	4608      	mov	r0, r1
 8003cbc:	88bb      	ldrh	r3, [r7, #4]
 8003cbe:	2232      	movs	r2, #50	; 0x32
 8003cc0:	fb02 f303 	mul.w	r3, r2, r3
 8003cc4:	4403      	add	r3, r0
 8003cc6:	4a1f      	ldr	r2, [pc, #124]	; (8003d44 <e_papier_set_pixel+0xb8>)
 8003cc8:	5cd3      	ldrb	r3, [r2, r3]
 8003cca:	b25a      	sxtb	r2, r3
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8003cd6:	bf94      	ite	ls
 8003cd8:	2301      	movls	r3, #1
 8003cda:	2300      	movhi	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	b25b      	sxtb	r3, r3
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	b258      	sxtb	r0, r3
 8003ce4:	88bb      	ldrh	r3, [r7, #4]
 8003ce6:	2232      	movs	r2, #50	; 0x32
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	440b      	add	r3, r1
 8003cee:	b2c1      	uxtb	r1, r0
 8003cf0:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <e_papier_set_pixel+0xb8>)
 8003cf2:	54d1      	strb	r1, [r2, r3]
 8003cf4:	e020      	b.n	8003d38 <e_papier_set_pixel+0xac>
   }
   else
   {
      BufferEpapier[x / 8 + y * EPD_WIDTH / 8] &= ~(0x80 >> (x % 8));
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	08db      	lsrs	r3, r3, #3
 8003cfa:	b298      	uxth	r0, r3
 8003cfc:	4601      	mov	r1, r0
 8003cfe:	88bb      	ldrh	r3, [r7, #4]
 8003d00:	2232      	movs	r2, #50	; 0x32
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	440b      	add	r3, r1
 8003d08:	4a0e      	ldr	r2, [pc, #56]	; (8003d44 <e_papier_set_pixel+0xb8>)
 8003d0a:	5cd3      	ldrb	r3, [r2, r3]
 8003d0c:	b25a      	sxtb	r2, r3
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	2180      	movs	r1, #128	; 0x80
 8003d16:	fa41 f303 	asr.w	r3, r1, r3
 8003d1a:	b25b      	sxtb	r3, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	b25b      	sxtb	r3, r3
 8003d20:	4013      	ands	r3, r2
 8003d22:	b259      	sxtb	r1, r3
 8003d24:	88bb      	ldrh	r3, [r7, #4]
 8003d26:	2232      	movs	r2, #50	; 0x32
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	4403      	add	r3, r0
 8003d2e:	b2c9      	uxtb	r1, r1
 8003d30:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <e_papier_set_pixel+0xb8>)
 8003d32:	54d1      	strb	r1, [r2, r3]
 8003d34:	e000      	b.n	8003d38 <e_papier_set_pixel+0xac>
      return;
 8003d36:	bf00      	nop
   }
}
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	200002b4 	.word	0x200002b4

08003d48 <e_papier_set_lut>:
void e_papier_set_lut(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
   uint16_t count;
   e_papier_send_command(LUT_FOR_VCOM); // g vcom
 8003d4e:	2020      	movs	r0, #32
 8003d50:	f7ff ff42 	bl	8003bd8 <e_papier_send_command>
   for(count = 0; count < 44; count++)
 8003d54:	2300      	movs	r3, #0
 8003d56:	80fb      	strh	r3, [r7, #6]
 8003d58:	e008      	b.n	8003d6c <e_papier_set_lut+0x24>
   {
      e_papier_send_data(lut_vcom0[count]);
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	; (8003e0c <e_papier_set_lut+0xc4>)
 8003d5e:	5cd3      	ldrb	r3, [r2, r3]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff5d 	bl	8003c20 <e_papier_send_data>
   for(count = 0; count < 44; count++)
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	80fb      	strh	r3, [r7, #6]
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	2b2b      	cmp	r3, #43	; 0x2b
 8003d70:	d9f3      	bls.n	8003d5a <e_papier_set_lut+0x12>
   }

   e_papier_send_command(LUT_WHITE_TO_WHITE);
 8003d72:	2021      	movs	r0, #33	; 0x21
 8003d74:	f7ff ff30 	bl	8003bd8 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	80fb      	strh	r3, [r7, #6]
 8003d7c:	e008      	b.n	8003d90 <e_papier_set_lut+0x48>
   {
      e_papier_send_data(lut_ww[count]);
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	4a23      	ldr	r2, [pc, #140]	; (8003e10 <e_papier_set_lut+0xc8>)
 8003d82:	5cd3      	ldrb	r3, [r2, r3]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff ff4b 	bl	8003c20 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	80fb      	strh	r3, [r7, #6]
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	2b29      	cmp	r3, #41	; 0x29
 8003d94:	d9f3      	bls.n	8003d7e <e_papier_set_lut+0x36>
   }

   e_papier_send_command(LUT_BLACK_TO_WHITE);
 8003d96:	2022      	movs	r0, #34	; 0x22
 8003d98:	f7ff ff1e 	bl	8003bd8 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	80fb      	strh	r3, [r7, #6]
 8003da0:	e008      	b.n	8003db4 <e_papier_set_lut+0x6c>
   {
      e_papier_send_data(lut_bw[count]);
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	4a1b      	ldr	r2, [pc, #108]	; (8003e14 <e_papier_set_lut+0xcc>)
 8003da6:	5cd3      	ldrb	r3, [r2, r3]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff ff39 	bl	8003c20 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	3301      	adds	r3, #1
 8003db2:	80fb      	strh	r3, [r7, #6]
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	2b29      	cmp	r3, #41	; 0x29
 8003db8:	d9f3      	bls.n	8003da2 <e_papier_set_lut+0x5a>
   }

   e_papier_send_command(LUT_WHITE_TO_BLACK);
 8003dba:	2023      	movs	r0, #35	; 0x23
 8003dbc:	f7ff ff0c 	bl	8003bd8 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	80fb      	strh	r3, [r7, #6]
 8003dc4:	e008      	b.n	8003dd8 <e_papier_set_lut+0x90>
   {
      e_papier_send_data(lut_wb[count]);
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <e_papier_set_lut+0xd0>)
 8003dca:	5cd3      	ldrb	r3, [r2, r3]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff ff27 	bl	8003c20 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	80fb      	strh	r3, [r7, #6]
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	2b29      	cmp	r3, #41	; 0x29
 8003ddc:	d9f3      	bls.n	8003dc6 <e_papier_set_lut+0x7e>
   }

   e_papier_send_command(LUT_BLACK_TO_BLACK);
 8003dde:	2024      	movs	r0, #36	; 0x24
 8003de0:	f7ff fefa 	bl	8003bd8 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8003de4:	2300      	movs	r3, #0
 8003de6:	80fb      	strh	r3, [r7, #6]
 8003de8:	e008      	b.n	8003dfc <e_papier_set_lut+0xb4>
   {
      e_papier_send_data(lut_bb[count]);
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <e_papier_set_lut+0xd4>)
 8003dee:	5cd3      	ldrb	r3, [r2, r3]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff ff15 	bl	8003c20 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	80fb      	strh	r3, [r7, #6]
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	2b29      	cmp	r3, #41	; 0x29
 8003e00:	d9f3      	bls.n	8003dea <e_papier_set_lut+0xa2>
   }
}
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	0801c3d0 	.word	0x0801c3d0
 8003e10:	0801c3fc 	.word	0x0801c3fc
 8003e14:	0801c428 	.word	0x0801c428
 8003e18:	0801c454 	.word	0x0801c454
 8003e1c:	0801c480 	.word	0x0801c480

08003e20 <e_papier_turn_on_display>:
      }
   }
   // e_papier_wait_until_idle();
}
void e_papier_turn_on_display(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
   e_papier_send_command(DISPLAY_REFRESH);
 8003e24:	2012      	movs	r0, #18
 8003e26:	f7ff fed7 	bl	8003bd8 <e_papier_send_command>
   e_papier_wait_until_idle();
 8003e2a:	f7ff ff1d 	bl	8003c68 <e_papier_wait_until_idle>
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <e_papier_display>:
void e_papier_display(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
   uint16_t Width, Height;
   Width  = (EPD_WIDTH % 8 == 0) ? (EPD_WIDTH / 8) : (EPD_WIDTH / 8 + 1);
 8003e3a:	2332      	movs	r3, #50	; 0x32
 8003e3c:	80fb      	strh	r3, [r7, #6]
   Height = EPD_HEIGHT;
 8003e3e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003e42:	80bb      	strh	r3, [r7, #4]
   taskENTER_CRITICAL();
 8003e44:	f012 f86e 	bl	8015f24 <vPortEnterCritical>
   e_papier_send_command(DATA_START_TRANSMISSION_1);
 8003e48:	2010      	movs	r0, #16
 8003e4a:	f7ff fec5 	bl	8003bd8 <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 8003e4e:	2300      	movs	r3, #0
 8003e50:	81fb      	strh	r3, [r7, #14]
 8003e52:	e00f      	b.n	8003e74 <e_papier_display+0x40>
   {
      for(uint16_t i = 0; i < Width; i++)
 8003e54:	2300      	movs	r3, #0
 8003e56:	81bb      	strh	r3, [r7, #12]
 8003e58:	e005      	b.n	8003e66 <e_papier_display+0x32>
      {
         e_papier_send_data(0XFF);
 8003e5a:	20ff      	movs	r0, #255	; 0xff
 8003e5c:	f7ff fee0 	bl	8003c20 <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 8003e60:	89bb      	ldrh	r3, [r7, #12]
 8003e62:	3301      	adds	r3, #1
 8003e64:	81bb      	strh	r3, [r7, #12]
 8003e66:	89ba      	ldrh	r2, [r7, #12]
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d3f5      	bcc.n	8003e5a <e_papier_display+0x26>
   for(uint16_t j = 0; j < Height; j++)
 8003e6e:	89fb      	ldrh	r3, [r7, #14]
 8003e70:	3301      	adds	r3, #1
 8003e72:	81fb      	strh	r3, [r7, #14]
 8003e74:	89fa      	ldrh	r2, [r7, #14]
 8003e76:	88bb      	ldrh	r3, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d3eb      	bcc.n	8003e54 <e_papier_display+0x20>
      }
   }
   e_papier_send_command(DATA_START_TRANSMISSION_2);
 8003e7c:	2013      	movs	r0, #19
 8003e7e:	f7ff feab 	bl	8003bd8 <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	817b      	strh	r3, [r7, #10]
 8003e86:	e017      	b.n	8003eb8 <e_papier_display+0x84>
   {
      for(uint16_t i = 0; i < Width; i++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	813b      	strh	r3, [r7, #8]
 8003e8c:	e00d      	b.n	8003eaa <e_papier_display+0x76>
      {
         e_papier_send_data(BufferEpapier[i + j * Width]);
 8003e8e:	893a      	ldrh	r2, [r7, #8]
 8003e90:	897b      	ldrh	r3, [r7, #10]
 8003e92:	88f9      	ldrh	r1, [r7, #6]
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	4a0e      	ldr	r2, [pc, #56]	; (8003ed4 <e_papier_display+0xa0>)
 8003e9c:	5cd3      	ldrb	r3, [r2, r3]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff febe 	bl	8003c20 <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 8003ea4:	893b      	ldrh	r3, [r7, #8]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	813b      	strh	r3, [r7, #8]
 8003eaa:	893a      	ldrh	r2, [r7, #8]
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d3ed      	bcc.n	8003e8e <e_papier_display+0x5a>
   for(uint16_t j = 0; j < Height; j++)
 8003eb2:	897b      	ldrh	r3, [r7, #10]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	817b      	strh	r3, [r7, #10]
 8003eb8:	897a      	ldrh	r2, [r7, #10]
 8003eba:	88bb      	ldrh	r3, [r7, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d3e3      	bcc.n	8003e88 <e_papier_display+0x54>
      }
   }
   taskEXIT_CRITICAL();
 8003ec0:	f012 f860 	bl	8015f84 <vPortExitCritical>
   e_papier_turn_on_display();
 8003ec4:	f7ff ffac 	bl	8003e20 <e_papier_turn_on_display>
   e_papier_wait_until_idle();
 8003ec8:	f7ff fece 	bl	8003c68 <e_papier_wait_until_idle>
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	200002b4 	.word	0x200002b4

08003ed8 <e_papier_clear>:
void e_papier_clear()
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
   memset(BufferEpapier, 0xff, EPD_HEIGHT * EPD_WIDTH / 8);
 8003edc:	f643 2298 	movw	r2, #15000	; 0x3a98
 8003ee0:	21ff      	movs	r1, #255	; 0xff
 8003ee2:	4802      	ldr	r0, [pc, #8]	; (8003eec <e_papier_clear+0x14>)
 8003ee4:	f012 fb64 	bl	80165b0 <memset>
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	200002b4 	.word	0x200002b4

08003ef0 <e_papier_init>:
void e_papier_init(SPI_HandleTypeDef *spi)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
   e_papier_spi = spi;
 8003ef8:	4a2c      	ldr	r2, [pc, #176]	; (8003fac <e_papier_init+0xbc>)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6013      	str	r3, [r2, #0]
   e_papier_reset();
 8003efe:	f7ff fe49 	bl	8003b94 <e_papier_reset>

   e_papier_send_command(POWER_SETTING); // POWER SETTING
 8003f02:	2001      	movs	r0, #1
 8003f04:	f7ff fe68 	bl	8003bd8 <e_papier_send_command>
   e_papier_send_data(0x03);
 8003f08:	2003      	movs	r0, #3
 8003f0a:	f7ff fe89 	bl	8003c20 <e_papier_send_data>
   e_papier_send_data(0x00);
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f7ff fe86 	bl	8003c20 <e_papier_send_data>
   e_papier_send_data(0x2b);
 8003f14:	202b      	movs	r0, #43	; 0x2b
 8003f16:	f7ff fe83 	bl	8003c20 <e_papier_send_data>
   e_papier_send_data(0x2b);
 8003f1a:	202b      	movs	r0, #43	; 0x2b
 8003f1c:	f7ff fe80 	bl	8003c20 <e_papier_send_data>

   e_papier_send_command(BOOSTER_SOFT_START); // boost soft start
 8003f20:	2006      	movs	r0, #6
 8003f22:	f7ff fe59 	bl	8003bd8 <e_papier_send_command>
   e_papier_send_data(0x17);                  // A
 8003f26:	2017      	movs	r0, #23
 8003f28:	f7ff fe7a 	bl	8003c20 <e_papier_send_data>
   e_papier_send_data(0x17);                  // B
 8003f2c:	2017      	movs	r0, #23
 8003f2e:	f7ff fe77 	bl	8003c20 <e_papier_send_data>
   e_papier_send_data(0x17);                  // C
 8003f32:	2017      	movs	r0, #23
 8003f34:	f7ff fe74 	bl	8003c20 <e_papier_send_data>

   e_papier_send_command(POWER_ON);
 8003f38:	2004      	movs	r0, #4
 8003f3a:	f7ff fe4d 	bl	8003bd8 <e_papier_send_command>
   e_papier_wait_until_idle();
 8003f3e:	f7ff fe93 	bl	8003c68 <e_papier_wait_until_idle>

   e_papier_send_command(PANEL_SETTING); // panel setting
 8003f42:	2000      	movs	r0, #0
 8003f44:	f7ff fe48 	bl	8003bd8 <e_papier_send_command>
   e_papier_send_data(0xbf);             // KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 8003f48:	20bf      	movs	r0, #191	; 0xbf
 8003f4a:	f7ff fe69 	bl	8003c20 <e_papier_send_data>
   e_papier_send_data(0x0d);
 8003f4e:	200d      	movs	r0, #13
 8003f50:	f7ff fe66 	bl	8003c20 <e_papier_send_data>

   e_papier_send_command(PLL_CONTROL); // PLL setting
 8003f54:	2030      	movs	r0, #48	; 0x30
 8003f56:	f7ff fe3f 	bl	8003bd8 <e_papier_send_command>
   e_papier_send_data(0x3C);           // 3A 100HZ   29 150Hz 39 200HZ	31 171HZ
 8003f5a:	203c      	movs	r0, #60	; 0x3c
 8003f5c:	f7ff fe60 	bl	8003c20 <e_papier_send_data>

   e_papier_send_command(0x61); // resolution setting
 8003f60:	2061      	movs	r0, #97	; 0x61
 8003f62:	f7ff fe39 	bl	8003bd8 <e_papier_send_command>
   e_papier_send_data(0x01);
 8003f66:	2001      	movs	r0, #1
 8003f68:	f7ff fe5a 	bl	8003c20 <e_papier_send_data>
   e_papier_send_data(0x90); // 128
 8003f6c:	2090      	movs	r0, #144	; 0x90
 8003f6e:	f7ff fe57 	bl	8003c20 <e_papier_send_data>
   e_papier_send_data(0x01); //
 8003f72:	2001      	movs	r0, #1
 8003f74:	f7ff fe54 	bl	8003c20 <e_papier_send_data>
   e_papier_send_data(0x2c);
 8003f78:	202c      	movs	r0, #44	; 0x2c
 8003f7a:	f7ff fe51 	bl	8003c20 <e_papier_send_data>

   e_papier_send_command(0x82); // vcom_DC setting
 8003f7e:	2082      	movs	r0, #130	; 0x82
 8003f80:	f7ff fe2a 	bl	8003bd8 <e_papier_send_command>
   e_papier_send_data(0x28);
 8003f84:	2028      	movs	r0, #40	; 0x28
 8003f86:	f7ff fe4b 	bl	8003c20 <e_papier_send_data>

   e_papier_send_command(0X50); // VCOM AND DATA INTERVAL SETTING
 8003f8a:	2050      	movs	r0, #80	; 0x50
 8003f8c:	f7ff fe24 	bl	8003bd8 <e_papier_send_command>
   e_papier_send_data(0x97);    // 97white border 77black border		VBDF 17|D7 VBDW 97 VBDB 57		VBDF F7 VBDW 77 VBDB 37  VBDR B7
 8003f90:	2097      	movs	r0, #151	; 0x97
 8003f92:	f7ff fe45 	bl	8003c20 <e_papier_send_data>

   e_papier_set_lut();
 8003f96:	f7ff fed7 	bl	8003d48 <e_papier_set_lut>
   e_papier_clear();
 8003f9a:	f7ff ff9d 	bl	8003ed8 <e_papier_clear>
   e_papier_display();
 8003f9e:	f7ff ff49 	bl	8003e34 <e_papier_display>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200002b0 	.word	0x200002b0

08003fb0 <flash_CsLow>:

#include "flash_spi.h"

#include "cmsis_os.h"
void flash_CsLow(flash_t *flash)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 0);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68d8      	ldr	r0, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	891b      	ldrh	r3, [r3, #8]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f008 f9b2 	bl	800c32c <HAL_GPIO_WritePin>
}
 8003fc8:	bf00      	nop
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <flash_CsHigh>:
void flash_CsHigh(flash_t *flash)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 1);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68d8      	ldr	r0, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	891b      	ldrh	r3, [r3, #8]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f008 f9a2 	bl	800c32c <HAL_GPIO_WritePin>
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <flash_WriteCommand>:
void flash_WriteCommand(flash_t *flash, uint8_t *command, uint8_t size)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Transmit(flash->flash_spi, command, size, 1000);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	b29a      	uxth	r2, r3
 8004006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	f00a fc8d 	bl	800e92a <HAL_SPI_Transmit>
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <flash_ReadCommand>:
void flash_ReadCommand(flash_t *flash, uint8_t *command, uint8_t size)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	4613      	mov	r3, r2
 8004024:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Receive(flash->flash_spi, command, size, 1000);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	b29a      	uxth	r2, r3
 800402e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	f00a fde7 	bl	800ec06 <HAL_SPI_Receive>
}
 8004038:	bf00      	nop
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <flash_WriteData>:
void flash_WriteData(flash_t *flash, uint8_t *data, uint32_t size)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
   HAL_SPI_Transmit(flash->flash_spi, data, size, 1000);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	b29a      	uxth	r2, r3
 8004054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	f00a fc66 	bl	800e92a <HAL_SPI_Transmit>
}
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <flash_ReadData>:
void flash_ReadData(flash_t *flash, uint8_t *data, uint32_t size)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
   HAL_SPI_Receive(flash->flash_spi, data, size, 1000);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	b29a      	uxth	r2, r3
 800407a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	f00a fdc1 	bl	800ec06 <HAL_SPI_Receive>
}
 8004084:	bf00      	nop
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <flash_ReadSR1>:
uint8_t flash_ReadSR1(flash_t *flash)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
   flash_CsLow(flash);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff ff8b 	bl	8003fb0 <flash_CsLow>
   uint8_t command = READ_SR1;
 800409a:	2305      	movs	r3, #5
 800409c:	73fb      	strb	r3, [r7, #15]
   flash_WriteCommand(flash, &command, 1);
 800409e:	f107 030f 	add.w	r3, r7, #15
 80040a2:	2201      	movs	r2, #1
 80040a4:	4619      	mov	r1, r3
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ffa2 	bl	8003ff0 <flash_WriteCommand>
   flash_ReadCommand(flash, &command, 1);
 80040ac:	f107 030f 	add.w	r3, r7, #15
 80040b0:	2201      	movs	r2, #1
 80040b2:	4619      	mov	r1, r3
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff ffaf 	bl	8004018 <flash_ReadCommand>
   flash_CsHigh(flash);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff ff88 	bl	8003fd0 <flash_CsHigh>
   return command;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <flash_Reset>:
   flash_ReadCommand(flash, &command, 1);
   flash_CsHigh(flash);
   return command;
}
void flash_Reset(flash_t *flash)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
   uint8_t command = ENABLE_RESET;
 80040d2:	2366      	movs	r3, #102	; 0x66
 80040d4:	73fb      	strb	r3, [r7, #15]
   flash_CsLow(flash);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff ff6a 	bl	8003fb0 <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 80040dc:	f107 030f 	add.w	r3, r7, #15
 80040e0:	2201      	movs	r2, #1
 80040e2:	4619      	mov	r1, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ff83 	bl	8003ff0 <flash_WriteCommand>
   flash_CsHigh(flash);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff ff70 	bl	8003fd0 <flash_CsHigh>
   command = RESET;
 80040f0:	2399      	movs	r3, #153	; 0x99
 80040f2:	73fb      	strb	r3, [r7, #15]
   flash_CsLow(flash);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ff5b 	bl	8003fb0 <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 80040fa:	f107 030f 	add.w	r3, r7, #15
 80040fe:	2201      	movs	r2, #1
 8004100:	4619      	mov	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff ff74 	bl	8003ff0 <flash_WriteCommand>
   flash_CsHigh(flash);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ff61 	bl	8003fd0 <flash_CsHigh>
}
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <flash_SetWELBit>:
void flash_SetWELBit(flash_t *flash)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
   flash_CsLow(flash);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff ff46 	bl	8003fb0 <flash_CsLow>
   uint8_t command = WRITE_ENABLE;
 8004124:	2306      	movs	r3, #6
 8004126:	73fb      	strb	r3, [r7, #15]
   flash_WriteCommand(flash, &command, 1);
 8004128:	f107 030f 	add.w	r3, r7, #15
 800412c:	2201      	movs	r2, #1
 800412e:	4619      	mov	r1, r3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff ff5d 	bl	8003ff0 <flash_WriteCommand>
   flash_CsHigh(flash);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff ff4a 	bl	8003fd0 <flash_CsHigh>
}
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <flash_ReadID>:
void flash_ReadID(flash_t *flash)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
   uint8_t id[3], command = JEDEC_ID;
 800414c:	239f      	movs	r3, #159	; 0x9f
 800414e:	72fb      	strb	r3, [r7, #11]
   flash_CsLow(flash);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff ff2d 	bl	8003fb0 <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8004156:	f107 030b 	add.w	r3, r7, #11
 800415a:	2201      	movs	r2, #1
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ff46 	bl	8003ff0 <flash_WriteCommand>
   flash_ReadCommand(flash, id, 3);
 8004164:	f107 030c 	add.w	r3, r7, #12
 8004168:	2203      	movs	r2, #3
 800416a:	4619      	mov	r1, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff ff53 	bl	8004018 <flash_ReadCommand>
   flash_CsHigh(flash);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ff2c 	bl	8003fd0 <flash_CsHigh>
   flash->id = ((id[0] << 16) | (id[1] << 8) | id[2]);
 8004178:	7b3b      	ldrb	r3, [r7, #12]
 800417a:	041a      	lsls	r2, r3, #16
 800417c:	7b7b      	ldrb	r3, [r7, #13]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	4313      	orrs	r3, r2
 8004182:	7bba      	ldrb	r2, [r7, #14]
 8004184:	4313      	orrs	r3, r2
 8004186:	461a      	mov	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	605a      	str	r2, [r3, #4]
}
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <flash_WaitForEndProcess>:
void flash_WaitForEndProcess(flash_t *flash)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
   while((flash_ReadSR1(flash) & BUSY_FLAG))
 800419c:	e002      	b.n	80041a4 <flash_WaitForEndProcess+0x10>
   {
      osDelay(5);
 800419e:	2005      	movs	r0, #5
 80041a0:	f00e fa7c 	bl	801269c <osDelay>
   while((flash_ReadSR1(flash) & BUSY_FLAG))
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ff71 	bl	800408c <flash_ReadSR1>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f4      	bne.n	800419e <flash_WaitForEndProcess+0xa>
   }
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <flash_SetWELBit_and_WaitForEndProcess>:
void flash_SetWELBit_and_WaitForEndProcess(flash_t *flash)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b082      	sub	sp, #8
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
   while(!(flash_ReadSR1(flash) & WEL_BIT))
 80041c6:	e005      	b.n	80041d4 <flash_SetWELBit_and_WaitForEndProcess+0x16>
   {
      flash_SetWELBit(flash);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff ffa4 	bl	8004116 <flash_SetWELBit>
      osDelay(5);
 80041ce:	2005      	movs	r0, #5
 80041d0:	f00e fa64 	bl	801269c <osDelay>
   while(!(flash_ReadSR1(flash) & WEL_BIT))
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff ff59 	bl	800408c <flash_ReadSR1>
 80041da:	4603      	mov	r3, r0
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f1      	beq.n	80041c8 <flash_SetWELBit_and_WaitForEndProcess+0xa>
   }
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <flash_WritePage>:
   flash_CsHigh(flash);
   flash_WaitForEndProcess(flash);
   flash_WaitForEndProcess(flash);
}
void flash_WritePage(flash_t *flash, uint32_t page_addr, uint8_t *data)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b086      	sub	sp, #24
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
   uint8_t dataToSend[4];
   flash_WaitForEndProcess(flash);
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f7ff ffca 	bl	8004194 <flash_WaitForEndProcess>
   flash_SetWELBit_and_WaitForEndProcess(flash);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff ffdc 	bl	80041be <flash_SetWELBit_and_WaitForEndProcess>
   page_addr *= PAGE_SIZE;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	60bb      	str	r3, [r7, #8]
   dataToSend[0] = PAGE_PROGRAM;
 800420c:	2302      	movs	r3, #2
 800420e:	753b      	strb	r3, [r7, #20]
   dataToSend[1] = (page_addr >> 16) & 0xff;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	0c1b      	lsrs	r3, r3, #16
 8004214:	b2db      	uxtb	r3, r3
 8004216:	757b      	strb	r3, [r7, #21]
   dataToSend[2] = (page_addr >> 8) & 0xff;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	b2db      	uxtb	r3, r3
 800421e:	75bb      	strb	r3, [r7, #22]
   dataToSend[3] = page_addr & 0xff;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	75fb      	strb	r3, [r7, #23]
   flash_CsLow(flash);
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f7ff fec2 	bl	8003fb0 <flash_CsLow>
   flash_WriteCommand(flash, dataToSend, 4);
 800422c:	f107 0314 	add.w	r3, r7, #20
 8004230:	2204      	movs	r2, #4
 8004232:	4619      	mov	r1, r3
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f7ff fedb 	bl	8003ff0 <flash_WriteCommand>
   flash_WriteData(flash, data, PAGE_SIZE);
 800423a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f7ff fefd 	bl	8004040 <flash_WriteData>
   flash_CsHigh(flash);
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f7ff fec2 	bl	8003fd0 <flash_CsHigh>
   flash_WaitForEndProcess(flash);
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7ff ffa1 	bl	8004194 <flash_WaitForEndProcess>
}
 8004252:	bf00      	nop
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <flash_ReadPage>:
void flash_ReadPage(flash_t *flash, uint32_t page_addr, uint8_t *data)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
   uint8_t dataToSend[4];
   page_addr *= PAGE_SIZE;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	60bb      	str	r3, [r7, #8]
   flash_WaitForEndProcess(flash);
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f7ff ff91 	bl	8004194 <flash_WaitForEndProcess>
   flash_SetWELBit_and_WaitForEndProcess(flash);
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7ff ffa3 	bl	80041be <flash_SetWELBit_and_WaitForEndProcess>
   dataToSend[0] = READ_DATA;
 8004278:	2303      	movs	r3, #3
 800427a:	753b      	strb	r3, [r7, #20]
   dataToSend[1] = (page_addr >> 16) & 0xff;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	0c1b      	lsrs	r3, r3, #16
 8004280:	b2db      	uxtb	r3, r3
 8004282:	757b      	strb	r3, [r7, #21]
   dataToSend[2] = (page_addr >> 8) & 0xff;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	0a1b      	lsrs	r3, r3, #8
 8004288:	b2db      	uxtb	r3, r3
 800428a:	75bb      	strb	r3, [r7, #22]
   dataToSend[3] = page_addr & 0xff;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	75fb      	strb	r3, [r7, #23]
   flash_CsLow(flash);
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff fe8c 	bl	8003fb0 <flash_CsLow>
   flash_WriteCommand(flash, dataToSend, 4);
 8004298:	f107 0314 	add.w	r3, r7, #20
 800429c:	2204      	movs	r2, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f7ff fea5 	bl	8003ff0 <flash_WriteCommand>
   flash_ReadData(flash, data, PAGE_SIZE);
 80042a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff feda 	bl	8004066 <flash_ReadData>
   flash_CsHigh(flash);
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f7ff fe8c 	bl	8003fd0 <flash_CsHigh>
   flash_WaitForEndProcess(flash);
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f7ff ff6b 	bl	8004194 <flash_WaitForEndProcess>
   flash_WaitForEndProcess(flash);
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f7ff ff68 	bl	8004194 <flash_WaitForEndProcess>
}
 80042c4:	bf00      	nop
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <flash_Init>:
   flash_WriteCommand(flash, &Temp, 1);
   flash_CsHigh(flash);
   flash_WaitForEndProcess(flash);
}
void flash_Init(flash_t *flash, SPI_HandleTypeDef *spi, GPIO_TypeDef *cs_port, uint16_t cs_pin)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	807b      	strh	r3, [r7, #2]
   flash->flash_spi    = spi;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	601a      	str	r2, [r3, #0]
   flash->flash_CsPort = cs_port;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	60da      	str	r2, [r3, #12]
   flash->flash_CsPin  = cs_pin;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	887a      	ldrh	r2, [r7, #2]
 80042ea:	811a      	strh	r2, [r3, #8]
   flash_Reset(flash);
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f7ff feec 	bl	80040ca <flash_Reset>
   flash_ReadID(flash);
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7ff ff26 	bl	8004144 <flash_ReadID>
}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <fram_CsLow>:
#include "fram.h"
#include "gpio.h"
#include "iwdg.h"
#include "spi.h"
void fram_CsLow(fram_t *fram)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 0);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6898      	ldr	r0, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8a5b      	ldrh	r3, [r3, #18]
 8004310:	2200      	movs	r2, #0
 8004312:	4619      	mov	r1, r3
 8004314:	f008 f80a 	bl	800c32c <HAL_GPIO_WritePin>
}
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <fram_CsHigh>:
void fram_CsHigh(fram_t *fram)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6898      	ldr	r0, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8a5b      	ldrh	r3, [r3, #18]
 8004330:	2201      	movs	r2, #1
 8004332:	4619      	mov	r1, r3
 8004334:	f007 fffa 	bl	800c32c <HAL_GPIO_WritePin>
}
 8004338:	bf00      	nop
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <fram_SetWELBit>:
void fram_SetWELBit(fram_t *fram)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
   uint8_t com = WREN;
 8004348:	2306      	movs	r3, #6
 800434a:	73fb      	strb	r3, [r7, #15]
   fram_CsLow(fram);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff ffd7 	bl	8004300 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	f107 010f 	add.w	r1, r7, #15
 800435a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800435e:	2201      	movs	r2, #1
 8004360:	f00a fae3 	bl	800e92a <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff ffdb 	bl	8004320 <fram_CsHigh>
   HAL_IWDG_Refresh(&hiwdg);
 800436a:	4805      	ldr	r0, [pc, #20]	; (8004380 <fram_SetWELBit+0x40>)
 800436c:	f008 f85f 	bl	800c42e <HAL_IWDG_Refresh>
   osDelay(100);
 8004370:	2064      	movs	r0, #100	; 0x64
 8004372:	f00e f993 	bl	801269c <osDelay>
}
 8004376:	bf00      	nop
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20003e28 	.word	0x20003e28

08004384 <fram_SetProtectedBlocs>:
void fram_SetProtectedBlocs(fram_t *fram, uint8_t blocs)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	70fb      	strb	r3, [r7, #3]
   if(blocs > 3)
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d901      	bls.n	800439a <fram_SetProtectedBlocs+0x16>
   {
      blocs = 3;
 8004396:	2303      	movs	r3, #3
 8004398:	70fb      	strb	r3, [r7, #3]
   }
   uint8_t data[2];
   data[0] = WRSR;
 800439a:	2301      	movs	r3, #1
 800439c:	733b      	strb	r3, [r7, #12]
   data[1] = (blocs << 2);
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	737b      	strb	r3, [r7, #13]
   fram_SetWELBit(fram);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff ffca 	bl	8004340 <fram_SetWELBit>
   fram_CsLow(fram);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff ffa7 	bl	8004300 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 2, 1000);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	f107 010c 	add.w	r1, r7, #12
 80043ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043be:	2202      	movs	r2, #2
 80043c0:	f00a fab3 	bl	800e92a <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff ffab 	bl	8004320 <fram_CsHigh>
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <fram_Read32>:
uint32_t fram_Read32(fram_t *fram, uint32_t Address)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
   uint8_t Temp[4];
   fram_Read(fram, Address, Temp, 4);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	b299      	uxth	r1, r3
 80043e0:	f107 020c 	add.w	r2, r7, #12
 80043e4:	2304      	movs	r3, #4
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f8a7 	bl	800453a <fram_Read>
   return ((Temp[0] << 24) | (Temp[1] << 16) | (Temp[2] << 8) | Temp[3]);
 80043ec:	7b3b      	ldrb	r3, [r7, #12]
 80043ee:	061a      	lsls	r2, r3, #24
 80043f0:	7b7b      	ldrb	r3, [r7, #13]
 80043f2:	041b      	lsls	r3, r3, #16
 80043f4:	431a      	orrs	r2, r3
 80043f6:	7bbb      	ldrb	r3, [r7, #14]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	4313      	orrs	r3, r2
 80043fc:	7bfa      	ldrb	r2, [r7, #15]
 80043fe:	4313      	orrs	r3, r2
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <fram_Write32>:
void fram_Write32(fram_t *fram, uint32_t Address, uint32_t Data)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
   uint8_t Temp[4];
   Temp[0] = ((Data >> 24) & 0xff);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	0e1b      	lsrs	r3, r3, #24
 8004418:	b2db      	uxtb	r3, r3
 800441a:	753b      	strb	r3, [r7, #20]
   Temp[1] = ((Data >> 16) & 0xff);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	0c1b      	lsrs	r3, r3, #16
 8004420:	b2db      	uxtb	r3, r3
 8004422:	757b      	strb	r3, [r7, #21]
   Temp[2] = ((Data >> 8) & 0xff);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	b2db      	uxtb	r3, r3
 800442a:	75bb      	strb	r3, [r7, #22]
   Temp[3] = ((Data >> 0) & 0xff);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	75fb      	strb	r3, [r7, #23]
   fram_Write(fram, Address, Temp, 4);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	b299      	uxth	r1, r3
 8004436:	f107 0214 	add.w	r2, r7, #20
 800443a:	2304      	movs	r3, #4
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f84d 	bl	80044dc <fram_Write>
}
 8004442:	bf00      	nop
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <fram_Increment32>:
   {
      fram_Write(fram, i, &Temp, 1);
   }
}
FramStatus_TypeDef fram_Increment32(fram_t *fram, uint32_t Address)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]
   uint32_t Temp = 0, Confirm = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	2300      	movs	r3, #0
 800445a:	60bb      	str	r3, [r7, #8]
   Temp = fram_Read32(fram, Address);
 800445c:	6839      	ldr	r1, [r7, #0]
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff ffb7 	bl	80043d2 <fram_Read32>
 8004464:	60f8      	str	r0, [r7, #12]
   Temp++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3301      	adds	r3, #1
 800446a:	60fb      	str	r3, [r7, #12]
   fram_Write32(fram, Address, Temp);
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	6839      	ldr	r1, [r7, #0]
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff ffc9 	bl	8004408 <fram_Write32>
   Confirm = fram_Read32(fram, Address);
 8004476:	6839      	ldr	r1, [r7, #0]
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ffaa 	bl	80043d2 <fram_Read32>
 800447e:	60b8      	str	r0, [r7, #8]
   if(Temp == Confirm)
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	429a      	cmp	r2, r3
 8004486:	d101      	bne.n	800448c <fram_Increment32+0x42>
   {
      return FRAM_OK;
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <fram_Increment32+0x44>
   }
   else
   {
      return FRAM_ERROR;
 800448c:	2300      	movs	r3, #0
   }
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <fram_ReadSreg>:
uint8_t fram_ReadSreg(fram_t *fram)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
   fram_CsLow(fram);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff ff2e 	bl	8004300 <fram_CsLow>
   uint8_t _sreg;
   uint8_t com = RDSR;
 80044a4:	2305      	movs	r3, #5
 80044a6:	73bb      	strb	r3, [r7, #14]
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	f107 010e 	add.w	r1, r7, #14
 80044b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044b4:	2201      	movs	r2, #1
 80044b6:	f00a fa38 	bl	800e92a <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, &_sreg, 1, 1000);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	f107 010f 	add.w	r1, r7, #15
 80044c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044c6:	2201      	movs	r2, #1
 80044c8:	f00a fb9d 	bl	800ec06 <HAL_SPI_Receive>
   fram_CsHigh(fram);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff27 	bl	8004320 <fram_CsHigh>
   return _sreg;
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <fram_Write>:
void fram_Write(fram_t *fram, uint16_t addr, uint8_t *buff, uint16_t length)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	461a      	mov	r2, r3
 80044e8:	460b      	mov	r3, r1
 80044ea:	817b      	strh	r3, [r7, #10]
 80044ec:	4613      	mov	r3, r2
 80044ee:	813b      	strh	r3, [r7, #8]
   fram_SetWELBit(fram);
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f7ff ff25 	bl	8004340 <fram_SetWELBit>
   uint8_t data[3];
   data[0] = WRITE;
 80044f6:	2302      	movs	r3, #2
 80044f8:	753b      	strb	r3, [r7, #20]
   data[1] = (addr & 0xff) >> 8;
 80044fa:	2300      	movs	r3, #0
 80044fc:	757b      	strb	r3, [r7, #21]
   data[2] = addr & 0xff;
 80044fe:	897b      	ldrh	r3, [r7, #10]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	75bb      	strb	r3, [r7, #22]
   fram_CsLow(fram);
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7ff fefb 	bl	8004300 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	f107 0114 	add.w	r1, r7, #20
 8004512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004516:	2203      	movs	r2, #3
 8004518:	f00a fa07 	bl	800e92a <HAL_SPI_Transmit>
   HAL_SPI_Transmit(fram->fram_spi, buff, length, 1000);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	893a      	ldrh	r2, [r7, #8]
 8004522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	f00a f9ff 	bl	800e92a <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7ff fef7 	bl	8004320 <fram_CsHigh>
}
 8004532:	bf00      	nop
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <fram_Read>:
void fram_Read(fram_t *fram, uint16_t addr, uint8_t *buff, uint16_t length)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b086      	sub	sp, #24
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	461a      	mov	r2, r3
 8004546:	460b      	mov	r3, r1
 8004548:	817b      	strh	r3, [r7, #10]
 800454a:	4613      	mov	r3, r2
 800454c:	813b      	strh	r3, [r7, #8]
   fram_SetWELBit(fram);
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f7ff fef6 	bl	8004340 <fram_SetWELBit>
   uint8_t data[3];
   data[0] = READ;
 8004554:	2303      	movs	r3, #3
 8004556:	753b      	strb	r3, [r7, #20]
   data[1] = (addr & 0xff) >> 8;
 8004558:	2300      	movs	r3, #0
 800455a:	757b      	strb	r3, [r7, #21]
   data[2] = addr & 0xff;
 800455c:	897b      	ldrh	r3, [r7, #10]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	75bb      	strb	r3, [r7, #22]
   fram_CsLow(fram);
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7ff fecc 	bl	8004300 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	f107 0114 	add.w	r1, r7, #20
 8004570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004574:	2203      	movs	r2, #3
 8004576:	f00a f9d8 	bl	800e92a <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, buff, length, 1000);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	893a      	ldrh	r2, [r7, #8]
 8004580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	f00a fb3e 	bl	800ec06 <HAL_SPI_Receive>
   fram_CsHigh(fram);
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f7ff fec8 	bl	8004320 <fram_CsHigh>
}
 8004590:	bf00      	nop
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <fram_ReadID>:
uint32_t fram_ReadID(fram_t *fram)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
   uint8_t com, id[4];
   com = RDID;
 80045a0:	239f      	movs	r3, #159	; 0x9f
 80045a2:	73fb      	strb	r3, [r7, #15]
   fram_CsLow(fram);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff feab 	bl	8004300 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	f107 010f 	add.w	r1, r7, #15
 80045b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045b6:	2201      	movs	r2, #1
 80045b8:	f00a f9b7 	bl	800e92a <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, id, 4, 1000);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	f107 0108 	add.w	r1, r7, #8
 80045c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045c8:	2204      	movs	r2, #4
 80045ca:	f00a fb1c 	bl	800ec06 <HAL_SPI_Receive>
   fram_CsHigh(fram);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff fea6 	bl	8004320 <fram_CsHigh>
   return ((id[0] << 24) | (id[1] << 16) | (id[2] << 8) | id[3]);
 80045d4:	7a3b      	ldrb	r3, [r7, #8]
 80045d6:	061a      	lsls	r2, r3, #24
 80045d8:	7a7b      	ldrb	r3, [r7, #9]
 80045da:	041b      	lsls	r3, r3, #16
 80045dc:	431a      	orrs	r2, r3
 80045de:	7abb      	ldrb	r3, [r7, #10]
 80045e0:	021b      	lsls	r3, r3, #8
 80045e2:	4313      	orrs	r3, r2
 80045e4:	7afa      	ldrb	r2, [r7, #11]
 80045e6:	4313      	orrs	r3, r2
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <fram_Init>:
void fram_Init(fram_t *fram, SPI_HandleTypeDef *spi, GPIO_TypeDef *_hold_port, GPIO_TypeDef *_cs_port, GPIO_TypeDef *_wp_port, uint16_t _hold_pin,
               uint16_t _cs_pin, uint16_t _wp_pin)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
   fram->fram_spi  = spi;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	601a      	str	r2, [r3, #0]
   fram->hold_port = _hold_port;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	605a      	str	r2, [r3, #4]
   fram->hold_pin  = _hold_pin;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8bba      	ldrh	r2, [r7, #28]
 800460e:	821a      	strh	r2, [r3, #16]
   fram->cs_port   = _cs_port;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	609a      	str	r2, [r3, #8]
   fram->cs_pin    = _cs_pin;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8c3a      	ldrh	r2, [r7, #32]
 800461a:	825a      	strh	r2, [r3, #18]
   fram->wp_port   = _wp_port;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	60da      	str	r2, [r3, #12]
   fram->wp_pin    = _wp_pin;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004626:	829a      	strh	r2, [r3, #20]
   HAL_GPIO_WritePin(fram->hold_port, fram->hold_pin, 1);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6858      	ldr	r0, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8a1b      	ldrh	r3, [r3, #16]
 8004630:	2201      	movs	r2, #1
 8004632:	4619      	mov	r1, r3
 8004634:	f007 fe7a 	bl	800c32c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(fram->wp_port, fram->wp_pin, 1);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	68d8      	ldr	r0, [r3, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8a9b      	ldrh	r3, [r3, #20]
 8004640:	2201      	movs	r2, #1
 8004642:	4619      	mov	r1, r3
 8004644:	f007 fe72 	bl	800c32c <HAL_GPIO_WritePin>
   fram_SetProtectedBlocs(fram, 0);
 8004648:	2100      	movs	r1, #0
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7ff fe9a 	bl	8004384 <fram_SetProtectedBlocs>
   fram->sreg   = fram_ReadSreg(fram);
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f7ff ff20 	bl	8004496 <fram_ReadSreg>
 8004656:	4603      	mov	r3, r0
 8004658:	461a      	mov	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	759a      	strb	r2, [r3, #22]
   fram->framID = fram_ReadID(fram);
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f7ff ff9a 	bl	8004598 <fram_ReadID>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	619a      	str	r2, [r3, #24]
}
 800466a:	bf00      	nop
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */
   /* Create the mutex(es) */
   /* creation of ScreensDcMutex */
   ScreensDcMutexHandle = osMutexNew(&ScreensDcMutex_attributes);
 8004678:	485c      	ldr	r0, [pc, #368]	; (80047ec <MX_FREERTOS_Init+0x178>)
 800467a:	f00e f9a5 	bl	80129c8 <osMutexNew>
 800467e:	4603      	mov	r3, r0
 8004680:	4a5b      	ldr	r2, [pc, #364]	; (80047f0 <MX_FREERTOS_Init+0x17c>)
 8004682:	6013      	str	r3, [r2, #0]

   /* creation of SSD1306Mutex */
   SSD1306MutexHandle = osMutexNew(&SSD1306Mutex_attributes);
 8004684:	485b      	ldr	r0, [pc, #364]	; (80047f4 <MX_FREERTOS_Init+0x180>)
 8004686:	f00e f99f 	bl	80129c8 <osMutexNew>
 800468a:	4603      	mov	r3, r0
 800468c:	4a5a      	ldr	r2, [pc, #360]	; (80047f8 <MX_FREERTOS_Init+0x184>)
 800468e:	6013      	str	r3, [r2, #0]

   /* creation of SPI1Mutex */
   SPI1MutexHandle = osMutexNew(&SPI1Mutex_attributes);
 8004690:	485a      	ldr	r0, [pc, #360]	; (80047fc <MX_FREERTOS_Init+0x188>)
 8004692:	f00e f999 	bl	80129c8 <osMutexNew>
 8004696:	4603      	mov	r3, r0
 8004698:	4a59      	ldr	r2, [pc, #356]	; (8004800 <MX_FREERTOS_Init+0x18c>)
 800469a:	6013      	str	r3, [r2, #0]

   /* creation of E_PAPIERMutex */
   E_PAPIERMutexHandle = osMutexNew(&E_PAPIERMutex_attributes);
 800469c:	4859      	ldr	r0, [pc, #356]	; (8004804 <MX_FREERTOS_Init+0x190>)
 800469e:	f00e f993 	bl	80129c8 <osMutexNew>
 80046a2:	4603      	mov	r3, r0
 80046a4:	4a58      	ldr	r2, [pc, #352]	; (8004808 <MX_FREERTOS_Init+0x194>)
 80046a6:	6013      	str	r3, [r2, #0]

   /* creation of BME280Mutex */
   BME280MutexHandle = osMutexNew(&BME280Mutex_attributes);
 80046a8:	4858      	ldr	r0, [pc, #352]	; (800480c <MX_FREERTOS_Init+0x198>)
 80046aa:	f00e f98d 	bl	80129c8 <osMutexNew>
 80046ae:	4603      	mov	r3, r0
 80046b0:	4a57      	ldr	r2, [pc, #348]	; (8004810 <MX_FREERTOS_Init+0x19c>)
 80046b2:	6013      	str	r3, [r2, #0]

   /* creation of MenuMutex */
   MenuMutexHandle = osMutexNew(&MenuMutex_attributes);
 80046b4:	4857      	ldr	r0, [pc, #348]	; (8004814 <MX_FREERTOS_Init+0x1a0>)
 80046b6:	f00e f987 	bl	80129c8 <osMutexNew>
 80046ba:	4603      	mov	r3, r0
 80046bc:	4a56      	ldr	r2, [pc, #344]	; (8004818 <MX_FREERTOS_Init+0x1a4>)
 80046be:	6013      	str	r3, [r2, #0]

   /* creation of RTCMutex */
   RTCMutexHandle = osMutexNew(&RTCMutex_attributes);
 80046c0:	4856      	ldr	r0, [pc, #344]	; (800481c <MX_FREERTOS_Init+0x1a8>)
 80046c2:	f00e f981 	bl	80129c8 <osMutexNew>
 80046c6:	4603      	mov	r3, r0
 80046c8:	4a55      	ldr	r2, [pc, #340]	; (8004820 <MX_FREERTOS_Init+0x1ac>)
 80046ca:	6013      	str	r3, [r2, #0]

   /* creation of EncoderMutex */
   EncoderMutexHandle = osMutexNew(&EncoderMutex_attributes);
 80046cc:	4855      	ldr	r0, [pc, #340]	; (8004824 <MX_FREERTOS_Init+0x1b0>)
 80046ce:	f00e f97b 	bl	80129c8 <osMutexNew>
 80046d2:	4603      	mov	r3, r0
 80046d4:	4a54      	ldr	r2, [pc, #336]	; (8004828 <MX_FREERTOS_Init+0x1b4>)
 80046d6:	6013      	str	r3, [r2, #0]
   /* add semaphores, ... */
   /* USER CODE END RTOS_SEMAPHORES */

   /* Create the timer(s) */
   /* creation of MenuTimer */
   MenuTimerHandle = osTimerNew(MenuTimerCallback, osTimerOnce, NULL, &MenuTimer_attributes);
 80046d8:	4b54      	ldr	r3, [pc, #336]	; (800482c <MX_FREERTOS_Init+0x1b8>)
 80046da:	2200      	movs	r2, #0
 80046dc:	2100      	movs	r1, #0
 80046de:	4854      	ldr	r0, [pc, #336]	; (8004830 <MX_FREERTOS_Init+0x1bc>)
 80046e0:	f00e f80c 	bl	80126fc <osTimerNew>
 80046e4:	4603      	mov	r3, r0
 80046e6:	4a53      	ldr	r2, [pc, #332]	; (8004834 <MX_FREERTOS_Init+0x1c0>)
 80046e8:	6013      	str	r3, [r2, #0]
   /* start timers, add new ones, ... */
   /* USER CODE END RTOS_TIMERS */

   /* Create the queue(s) */
   /* creation of MeasurmentQueue */
   MeasurmentQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &MeasurmentQueue_attributes);
 80046ea:	4a53      	ldr	r2, [pc, #332]	; (8004838 <MX_FREERTOS_Init+0x1c4>)
 80046ec:	2130      	movs	r1, #48	; 0x30
 80046ee:	2010      	movs	r0, #16
 80046f0:	f00e fa78 	bl	8012be4 <osMessageQueueNew>
 80046f4:	4603      	mov	r3, r0
 80046f6:	4a51      	ldr	r2, [pc, #324]	; (800483c <MX_FREERTOS_Init+0x1c8>)
 80046f8:	6013      	str	r3, [r2, #0]

   /* creation of MoonPhaseQueue */
   MoonPhaseQueueHandle = osMessageQueueNew(16, sizeof(double), &MoonPhaseQueue_attributes);
 80046fa:	4a51      	ldr	r2, [pc, #324]	; (8004840 <MX_FREERTOS_Init+0x1cc>)
 80046fc:	2108      	movs	r1, #8
 80046fe:	2010      	movs	r0, #16
 8004700:	f00e fa70 	bl	8012be4 <osMessageQueueNew>
 8004704:	4603      	mov	r3, r0
 8004706:	4a4f      	ldr	r2, [pc, #316]	; (8004844 <MX_FREERTOS_Init+0x1d0>)
 8004708:	6013      	str	r3, [r2, #0]

   /* creation of ChartQueue */
   ChartQueueHandle = osMessageQueueNew(16, sizeof(ChartDateAndType_TypeDef), &ChartQueue_attributes);
 800470a:	4a4f      	ldr	r2, [pc, #316]	; (8004848 <MX_FREERTOS_Init+0x1d4>)
 800470c:	2106      	movs	r1, #6
 800470e:	2010      	movs	r0, #16
 8004710:	f00e fa68 	bl	8012be4 <osMessageQueueNew>
 8004714:	4603      	mov	r3, r0
 8004716:	4a4d      	ldr	r2, [pc, #308]	; (800484c <MX_FREERTOS_Init+0x1d8>)
 8004718:	6013      	str	r3, [r2, #0]

   /* creation of DataToSaveQueue */
   DataToSaveQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &DataToSaveQueue_attributes);
 800471a:	4a4d      	ldr	r2, [pc, #308]	; (8004850 <MX_FREERTOS_Init+0x1dc>)
 800471c:	2130      	movs	r1, #48	; 0x30
 800471e:	2010      	movs	r0, #16
 8004720:	f00e fa60 	bl	8012be4 <osMessageQueueNew>
 8004724:	4603      	mov	r3, r0
 8004726:	4a4b      	ldr	r2, [pc, #300]	; (8004854 <MX_FREERTOS_Init+0x1e0>)
 8004728:	6013      	str	r3, [r2, #0]
   /* add queues, ... */
   /* USER CODE END RTOS_QUEUES */

   /* Create the thread(s) */
   /* creation of defaultTask */
   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800472a:	4a4b      	ldr	r2, [pc, #300]	; (8004858 <MX_FREERTOS_Init+0x1e4>)
 800472c:	2100      	movs	r1, #0
 800472e:	484b      	ldr	r0, [pc, #300]	; (800485c <MX_FREERTOS_Init+0x1e8>)
 8004730:	f00d ff22 	bl	8012578 <osThreadNew>
 8004734:	4603      	mov	r3, r0
 8004736:	4a4a      	ldr	r2, [pc, #296]	; (8004860 <MX_FREERTOS_Init+0x1ec>)
 8004738:	6013      	str	r3, [r2, #0]

   /* creation of InitAndTimeTask */
   InitAndTimeTaskHandle = osThreadNew(StartInitAndTimeTask, NULL, &InitAndTimeTask_attributes);
 800473a:	4a4a      	ldr	r2, [pc, #296]	; (8004864 <MX_FREERTOS_Init+0x1f0>)
 800473c:	2100      	movs	r1, #0
 800473e:	484a      	ldr	r0, [pc, #296]	; (8004868 <MX_FREERTOS_Init+0x1f4>)
 8004740:	f00d ff1a 	bl	8012578 <osThreadNew>
 8004744:	4603      	mov	r3, r0
 8004746:	4a49      	ldr	r2, [pc, #292]	; (800486c <MX_FREERTOS_Init+0x1f8>)
 8004748:	6013      	str	r3, [r2, #0]

   /* creation of RfpTask */
   RfpTaskHandle = osThreadNew(StartRfpTask, NULL, &RfpTask_attributes);
 800474a:	4a49      	ldr	r2, [pc, #292]	; (8004870 <MX_FREERTOS_Init+0x1fc>)
 800474c:	2100      	movs	r1, #0
 800474e:	4849      	ldr	r0, [pc, #292]	; (8004874 <MX_FREERTOS_Init+0x200>)
 8004750:	f00d ff12 	bl	8012578 <osThreadNew>
 8004754:	4603      	mov	r3, r0
 8004756:	4a48      	ldr	r2, [pc, #288]	; (8004878 <MX_FREERTOS_Init+0x204>)
 8004758:	6013      	str	r3, [r2, #0]

   /* creation of MeasurmentTask */
   MeasurmentTaskHandle = osThreadNew(StartMeasurmentTask, NULL, &MeasurmentTask_attributes);
 800475a:	4a48      	ldr	r2, [pc, #288]	; (800487c <MX_FREERTOS_Init+0x208>)
 800475c:	2100      	movs	r1, #0
 800475e:	4848      	ldr	r0, [pc, #288]	; (8004880 <MX_FREERTOS_Init+0x20c>)
 8004760:	f00d ff0a 	bl	8012578 <osThreadNew>
 8004764:	4603      	mov	r3, r0
 8004766:	4a47      	ldr	r2, [pc, #284]	; (8004884 <MX_FREERTOS_Init+0x210>)
 8004768:	6013      	str	r3, [r2, #0]

   /* creation of InternalMeasurmentTask */
   InternalMeasurmentTaskHandle = osThreadNew(StartInternalMeasurmentTask, NULL, &InternalMeasurmentTask_attributes);
 800476a:	4a47      	ldr	r2, [pc, #284]	; (8004888 <MX_FREERTOS_Init+0x214>)
 800476c:	2100      	movs	r1, #0
 800476e:	4847      	ldr	r0, [pc, #284]	; (800488c <MX_FREERTOS_Init+0x218>)
 8004770:	f00d ff02 	bl	8012578 <osThreadNew>
 8004774:	4603      	mov	r3, r0
 8004776:	4a46      	ldr	r2, [pc, #280]	; (8004890 <MX_FREERTOS_Init+0x21c>)
 8004778:	6013      	str	r3, [r2, #0]

   /* creation of MoonPhaseTask */
   MoonPhaseTaskHandle = osThreadNew(StartMoonPhaseTask, NULL, &MoonPhaseTask_attributes);
 800477a:	4a46      	ldr	r2, [pc, #280]	; (8004894 <MX_FREERTOS_Init+0x220>)
 800477c:	2100      	movs	r1, #0
 800477e:	4846      	ldr	r0, [pc, #280]	; (8004898 <MX_FREERTOS_Init+0x224>)
 8004780:	f00d fefa 	bl	8012578 <osThreadNew>
 8004784:	4603      	mov	r3, r0
 8004786:	4a45      	ldr	r2, [pc, #276]	; (800489c <MX_FREERTOS_Init+0x228>)
 8004788:	6013      	str	r3, [r2, #0]

   /* creation of E_PapierDrawingTask */
   E_PapierDrawingTaskHandle = osThreadNew(StartE_PapierDrawingTask, NULL, &E_PapierDrawingTask_attributes);
 800478a:	4a45      	ldr	r2, [pc, #276]	; (80048a0 <MX_FREERTOS_Init+0x22c>)
 800478c:	2100      	movs	r1, #0
 800478e:	4845      	ldr	r0, [pc, #276]	; (80048a4 <MX_FREERTOS_Init+0x230>)
 8004790:	f00d fef2 	bl	8012578 <osThreadNew>
 8004794:	4603      	mov	r3, r0
 8004796:	4a44      	ldr	r2, [pc, #272]	; (80048a8 <MX_FREERTOS_Init+0x234>)
 8004798:	6013      	str	r3, [r2, #0]

   /* creation of E_PapierDisplayTask */
   E_PapierDisplayTaskHandle = osThreadNew(StartE_PapierDisplayTask, NULL, &E_PapierDisplayTask_attributes);
 800479a:	4a44      	ldr	r2, [pc, #272]	; (80048ac <MX_FREERTOS_Init+0x238>)
 800479c:	2100      	movs	r1, #0
 800479e:	4844      	ldr	r0, [pc, #272]	; (80048b0 <MX_FREERTOS_Init+0x23c>)
 80047a0:	f00d feea 	bl	8012578 <osThreadNew>
 80047a4:	4603      	mov	r3, r0
 80047a6:	4a43      	ldr	r2, [pc, #268]	; (80048b4 <MX_FREERTOS_Init+0x240>)
 80047a8:	6013      	str	r3, [r2, #0]

   /* creation of MenuTask */
   MenuTaskHandle = osThreadNew(StartMenuTask, NULL, &MenuTask_attributes);
 80047aa:	4a43      	ldr	r2, [pc, #268]	; (80048b8 <MX_FREERTOS_Init+0x244>)
 80047ac:	2100      	movs	r1, #0
 80047ae:	4843      	ldr	r0, [pc, #268]	; (80048bc <MX_FREERTOS_Init+0x248>)
 80047b0:	f00d fee2 	bl	8012578 <osThreadNew>
 80047b4:	4603      	mov	r3, r0
 80047b6:	4a42      	ldr	r2, [pc, #264]	; (80048c0 <MX_FREERTOS_Init+0x24c>)
 80047b8:	6013      	str	r3, [r2, #0]

   /* creation of SaveMemoryTask */
   SaveMemoryTaskHandle = osThreadNew(StartSaveMemoryTask, NULL, &SaveMemoryTask_attributes);
 80047ba:	4a42      	ldr	r2, [pc, #264]	; (80048c4 <MX_FREERTOS_Init+0x250>)
 80047bc:	2100      	movs	r1, #0
 80047be:	4842      	ldr	r0, [pc, #264]	; (80048c8 <MX_FREERTOS_Init+0x254>)
 80047c0:	f00d feda 	bl	8012578 <osThreadNew>
 80047c4:	4603      	mov	r3, r0
 80047c6:	4a41      	ldr	r2, [pc, #260]	; (80048cc <MX_FREERTOS_Init+0x258>)
 80047c8:	6013      	str	r3, [r2, #0]

   /* creation of ChartTask */
   ChartTaskHandle = osThreadNew(StartChartTask, NULL, &ChartTask_attributes);
 80047ca:	4a41      	ldr	r2, [pc, #260]	; (80048d0 <MX_FREERTOS_Init+0x25c>)
 80047cc:	2100      	movs	r1, #0
 80047ce:	4841      	ldr	r0, [pc, #260]	; (80048d4 <MX_FREERTOS_Init+0x260>)
 80047d0:	f00d fed2 	bl	8012578 <osThreadNew>
 80047d4:	4603      	mov	r3, r0
 80047d6:	4a40      	ldr	r2, [pc, #256]	; (80048d8 <MX_FREERTOS_Init+0x264>)
 80047d8:	6013      	str	r3, [r2, #0]
   /* USER CODE BEGIN RTOS_THREADS */
   /* add threads, ... */
   /* USER CODE END RTOS_THREADS */

   /* creation of C3V1Flags */
   C3V1FlagsHandle = osEventFlagsNew(&C3V1Flags_attributes);
 80047da:	4840      	ldr	r0, [pc, #256]	; (80048dc <MX_FREERTOS_Init+0x268>)
 80047dc:	f00e f80a 	bl	80127f4 <osEventFlagsNew>
 80047e0:	4603      	mov	r3, r0
 80047e2:	4a3f      	ldr	r2, [pc, #252]	; (80048e0 <MX_FREERTOS_Init+0x26c>)
 80047e4:	6013      	str	r3, [r2, #0]

   /* USER CODE BEGIN RTOS_EVENTS */
   /* add events, ... */
   /* USER CODE END RTOS_EVENTS */
}
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	0801c888 	.word	0x0801c888
 80047f0:	20003e04 	.word	0x20003e04
 80047f4:	0801c898 	.word	0x0801c898
 80047f8:	20003e08 	.word	0x20003e08
 80047fc:	0801c8a8 	.word	0x0801c8a8
 8004800:	20003e0c 	.word	0x20003e0c
 8004804:	0801c8b8 	.word	0x0801c8b8
 8004808:	20003e10 	.word	0x20003e10
 800480c:	0801c8c8 	.word	0x0801c8c8
 8004810:	20003e14 	.word	0x20003e14
 8004814:	0801c8d8 	.word	0x0801c8d8
 8004818:	20003e18 	.word	0x20003e18
 800481c:	0801c8e8 	.word	0x0801c8e8
 8004820:	20003e1c 	.word	0x20003e1c
 8004824:	0801c8f8 	.word	0x0801c8f8
 8004828:	20003e20 	.word	0x20003e20
 800482c:	0801c878 	.word	0x0801c878
 8004830:	080074a9 	.word	0x080074a9
 8004834:	20003e00 	.word	0x20003e00
 8004838:	0801c818 	.word	0x0801c818
 800483c:	20003df0 	.word	0x20003df0
 8004840:	0801c830 	.word	0x0801c830
 8004844:	20003df4 	.word	0x20003df4
 8004848:	0801c848 	.word	0x0801c848
 800484c:	20003df8 	.word	0x20003df8
 8004850:	0801c860 	.word	0x0801c860
 8004854:	20003dfc 	.word	0x20003dfc
 8004858:	0801c68c 	.word	0x0801c68c
 800485c:	080048e5 	.word	0x080048e5
 8004860:	20003dc4 	.word	0x20003dc4
 8004864:	0801c6b0 	.word	0x0801c6b0
 8004868:	0800490d 	.word	0x0800490d
 800486c:	20003dc8 	.word	0x20003dc8
 8004870:	0801c6d4 	.word	0x0801c6d4
 8004874:	08004b55 	.word	0x08004b55
 8004878:	20003dcc 	.word	0x20003dcc
 800487c:	0801c6f8 	.word	0x0801c6f8
 8004880:	08004b89 	.word	0x08004b89
 8004884:	20003dd0 	.word	0x20003dd0
 8004888:	0801c71c 	.word	0x0801c71c
 800488c:	08004bd5 	.word	0x08004bd5
 8004890:	20003dd4 	.word	0x20003dd4
 8004894:	0801c740 	.word	0x0801c740
 8004898:	08004cb9 	.word	0x08004cb9
 800489c:	20003dd8 	.word	0x20003dd8
 80048a0:	0801c764 	.word	0x0801c764
 80048a4:	08004e35 	.word	0x08004e35
 80048a8:	20003ddc 	.word	0x20003ddc
 80048ac:	0801c788 	.word	0x0801c788
 80048b0:	080051d5 	.word	0x080051d5
 80048b4:	20003de0 	.word	0x20003de0
 80048b8:	0801c7ac 	.word	0x0801c7ac
 80048bc:	08005265 	.word	0x08005265
 80048c0:	20003de4 	.word	0x20003de4
 80048c4:	0801c7d0 	.word	0x0801c7d0
 80048c8:	080052a9 	.word	0x080052a9
 80048cc:	20003de8 	.word	0x20003de8
 80048d0:	0801c7f4 	.word	0x0801c7f4
 80048d4:	08005a51 	.word	0x08005a51
 80048d8:	20003dec 	.word	0x20003dec
 80048dc:	0801c908 	.word	0x0801c908
 80048e0:	20003e24 	.word	0x20003e24

080048e4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartDefaultTask */
   /* Infinite loop */
   for(;;)
   {
      HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 80048ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048f0:	4804      	ldr	r0, [pc, #16]	; (8004904 <StartDefaultTask+0x20>)
 80048f2:	f007 fd33 	bl	800c35c <HAL_GPIO_TogglePin>
      HAL_IWDG_Refresh(&hiwdg);
 80048f6:	4804      	ldr	r0, [pc, #16]	; (8004908 <StartDefaultTask+0x24>)
 80048f8:	f007 fd99 	bl	800c42e <HAL_IWDG_Refresh>
      osDelay(100);
 80048fc:	2064      	movs	r0, #100	; 0x64
 80048fe:	f00d fecd 	bl	801269c <osDelay>
      HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 8004902:	e7f3      	b.n	80048ec <StartDefaultTask+0x8>
 8004904:	48000400 	.word	0x48000400
 8004908:	20003e28 	.word	0x20003e28

0800490c <StartInitAndTimeTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInitAndTimeTask */
void StartInitAndTimeTask(void *argument)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b0a8      	sub	sp, #160	; 0xa0
 8004910:	af04      	add	r7, sp, #16
 8004912:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartInitAndTimeTask */
   taskENTER_CRITICAL();
 8004914:	f011 fb06 	bl	8015f24 <vPortEnterCritical>
   RFP_Init(&Rfp, RFP_IDWS);
 8004918:	2103      	movs	r1, #3
 800491a:	487b      	ldr	r0, [pc, #492]	; (8004b08 <StartInitAndTimeTask+0x1fc>)
 800491c:	f005 fd00 	bl	800a320 <RFP_Init>
   e_papier_init(&hspi1);
 8004920:	487a      	ldr	r0, [pc, #488]	; (8004b0c <StartInitAndTimeTask+0x200>)
 8004922:	f7ff fae5 	bl	8003ef0 <e_papier_init>
   ssd1306_init(&hspi1);
 8004926:	4879      	ldr	r0, [pc, #484]	; (8004b0c <StartInitAndTimeTask+0x200>)
 8004928:	f006 fa48 	bl	800adbc <ssd1306_init>
   BME280_Init(&Bme, &hspi1, BME280_CS_GPIO_Port, BME280_CS_Pin);
 800492c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004930:	4a77      	ldr	r2, [pc, #476]	; (8004b10 <StartInitAndTimeTask+0x204>)
 8004932:	4976      	ldr	r1, [pc, #472]	; (8004b0c <StartInitAndTimeTask+0x200>)
 8004934:	4877      	ldr	r0, [pc, #476]	; (8004b14 <StartInitAndTimeTask+0x208>)
 8004936:	f7fe ff95 	bl	8003864 <BME280_Init>
   GFX_SetFont(font_8x5);
 800493a:	4877      	ldr	r0, [pc, #476]	; (8004b18 <StartInitAndTimeTask+0x20c>)
 800493c:	f7fc fbec 	bl	8001118 <GFX_SetFont>
   RFP_RegisterDataFunction(RFP_DataFunction);
 8004940:	4876      	ldr	r0, [pc, #472]	; (8004b1c <StartInitAndTimeTask+0x210>)
 8004942:	f005 fd6d 	bl	800a420 <RFP_RegisterDataFunction>
   MENU_Init();
 8004946:	f7fc fed7 	bl	80016f8 <MENU_Init>
   fram_Init(&Fram, &hspi1, FRAM_HOLD_GPIO_Port, FRAM_CS_GPIO_Port, FRAM_WP_GPIO_Port, FRAM_HOLD_Pin, FRAM_CS_Pin, FRAM_WP_Pin);
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	9303      	str	r3, [sp, #12]
 800494e:	2340      	movs	r3, #64	; 0x40
 8004950:	9302      	str	r3, [sp, #8]
 8004952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	4b6d      	ldr	r3, [pc, #436]	; (8004b10 <StartInitAndTimeTask+0x204>)
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	4b6c      	ldr	r3, [pc, #432]	; (8004b10 <StartInitAndTimeTask+0x204>)
 800495e:	4a6c      	ldr	r2, [pc, #432]	; (8004b10 <StartInitAndTimeTask+0x204>)
 8004960:	496a      	ldr	r1, [pc, #424]	; (8004b0c <StartInitAndTimeTask+0x200>)
 8004962:	486f      	ldr	r0, [pc, #444]	; (8004b20 <StartInitAndTimeTask+0x214>)
 8004964:	f7ff fe44 	bl	80045f0 <fram_Init>
   flash_Init(&Flash, &hspi1, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 8004968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800496c:	4a68      	ldr	r2, [pc, #416]	; (8004b10 <StartInitAndTimeTask+0x204>)
 800496e:	4967      	ldr	r1, [pc, #412]	; (8004b0c <StartInitAndTimeTask+0x200>)
 8004970:	486c      	ldr	r0, [pc, #432]	; (8004b24 <StartInitAndTimeTask+0x218>)
 8004972:	f7ff fcab 	bl	80042cc <flash_Init>
   //   fram_ChipErase(&Fram);
   //   HAL_IWDG_Refresh(&hiwdg);
   //   flash_ChipErase(&Flash);
   taskEXIT_CRITICAL();
 8004976:	f011 fb05 	bl	8015f84 <vPortExitCritical>
   osEventFlagsSet(C3V1FlagsHandle, INITIALIZE_ALL_FLAG);
 800497a:	4b6b      	ldr	r3, [pc, #428]	; (8004b28 <StartInitAndTimeTask+0x21c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2102      	movs	r1, #2
 8004980:	4618      	mov	r0, r3
 8004982:	f00d ff77 	bl	8012874 <osEventFlagsSet>
   uint32_t Random;
   RTC_TimeTypeDef RtcTime;
   RTC_DateTypeDef RtcDate;
   RTC_DateTypeDef ActualRtcDate = { 0 };
 8004986:	2300      	movs	r3, #0
 8004988:	673b      	str	r3, [r7, #112]	; 0x70
   char data[100];
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 800498a:	4b67      	ldr	r3, [pc, #412]	; (8004b28 <StartInitAndTimeTask+0x21c>)
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	f04f 33ff 	mov.w	r3, #4294967295
 8004992:	2202      	movs	r2, #2
 8004994:	2102      	movs	r1, #2
 8004996:	f00d ffb1 	bl	80128fc <osEventFlagsWait>
      osMutexAcquire(MenuMutexHandle, osWaitForever);
 800499a:	4b64      	ldr	r3, [pc, #400]	; (8004b2c <StartInitAndTimeTask+0x220>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f04f 31ff 	mov.w	r1, #4294967295
 80049a2:	4618      	mov	r0, r3
 80049a4:	f00e f896 	bl	8012ad4 <osMutexAcquire>
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80049a8:	4b61      	ldr	r3, [pc, #388]	; (8004b30 <StartInitAndTimeTask+0x224>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f04f 31ff 	mov.w	r1, #4294967295
 80049b0:	4618      	mov	r0, r3
 80049b2:	f00e f88f 	bl	8012ad4 <osMutexAcquire>
      osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80049b6:	4b5f      	ldr	r3, [pc, #380]	; (8004b34 <StartInitAndTimeTask+0x228>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f04f 31ff 	mov.w	r1, #4294967295
 80049be:	4618      	mov	r0, r3
 80049c0:	f00e f888 	bl	8012ad4 <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80049c4:	4b5c      	ldr	r3, [pc, #368]	; (8004b38 <StartInitAndTimeTask+0x22c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f04f 31ff 	mov.w	r1, #4294967295
 80049cc:	4618      	mov	r0, r3
 80049ce:	f00e f881 	bl	8012ad4 <osMutexAcquire>
      HAL_RNG_GenerateRandomNumber(&hrng, &Random);
 80049d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80049d6:	4619      	mov	r1, r3
 80049d8:	4858      	ldr	r0, [pc, #352]	; (8004b3c <StartInitAndTimeTask+0x230>)
 80049da:	f009 fb77 	bl	800e0cc <HAL_RNG_GenerateRandomNumber>
      ssd1306_clear();
 80049de:	f006 f9e1 	bl	800ada4 <ssd1306_clear>
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 80049e2:	4b57      	ldr	r3, [pc, #348]	; (8004b40 <StartInitAndTimeTask+0x234>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f04f 31ff 	mov.w	r1, #4294967295
 80049ea:	4618      	mov	r0, r3
 80049ec:	f00e f872 	bl	8012ad4 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80049f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80049f4:	2200      	movs	r2, #0
 80049f6:	4619      	mov	r1, r3
 80049f8:	4852      	ldr	r0, [pc, #328]	; (8004b44 <StartInitAndTimeTask+0x238>)
 80049fa:	f009 fce7 	bl	800e3cc <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80049fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004a02:	2200      	movs	r2, #0
 8004a04:	4619      	mov	r1, r3
 8004a06:	484f      	ldr	r0, [pc, #316]	; (8004b44 <StartInitAndTimeTask+0x238>)
 8004a08:	f009 fdca 	bl	800e5a0 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 8004a0c:	4b4c      	ldr	r3, [pc, #304]	; (8004b40 <StartInitAndTimeTask+0x234>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f00e f8aa 	bl	8012b6a <osMutexRelease>
      sprintf(data, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8004a16:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8004a20:	4619      	mov	r1, r3
 8004a22:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8004a26:	f107 000c 	add.w	r0, r7, #12
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4946      	ldr	r1, [pc, #280]	; (8004b48 <StartInitAndTimeTask+0x23c>)
 8004a30:	f005 fc3e 	bl	800a2b0 <sprintf_>
      GFX_DrawString(0, 0, data, WHITE, 0, OLED);
 8004a34:	f107 020c 	add.w	r2, r7, #12
 8004a38:	2300      	movs	r3, #0
 8004a3a:	9301      	str	r3, [sp, #4]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	2301      	movs	r3, #1
 8004a42:	2100      	movs	r1, #0
 8004a44:	2000      	movs	r0, #0
 8004a46:	f7fc fc35 	bl	80012b4 <GFX_DrawString>
      sprintf(data, "%d : %d ; 20%d", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8004a4a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8004a54:	4619      	mov	r1, r3
 8004a56:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004a5a:	f107 000c 	add.w	r0, r7, #12
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	460b      	mov	r3, r1
 8004a62:	493a      	ldr	r1, [pc, #232]	; (8004b4c <StartInitAndTimeTask+0x240>)
 8004a64:	f005 fc24 	bl	800a2b0 <sprintf_>
      GFX_DrawString(0, 10, data, WHITE, 0, OLED);
 8004a68:	f107 020c 	add.w	r2, r7, #12
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	2300      	movs	r3, #0
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	2301      	movs	r3, #1
 8004a76:	210a      	movs	r1, #10
 8004a78:	2000      	movs	r0, #0
 8004a7a:	f7fc fc1b 	bl	80012b4 <GFX_DrawString>
      sprintf(data, "RNG %d ", Random);
 8004a7e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004a82:	f107 030c 	add.w	r3, r7, #12
 8004a86:	4932      	ldr	r1, [pc, #200]	; (8004b50 <StartInitAndTimeTask+0x244>)
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f005 fc11 	bl	800a2b0 <sprintf_>
      GFX_DrawString(0, 20, data, WHITE, 0, OLED);
 8004a8e:	f107 020c 	add.w	r2, r7, #12
 8004a92:	2300      	movs	r3, #0
 8004a94:	9301      	str	r3, [sp, #4]
 8004a96:	2300      	movs	r3, #0
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	2114      	movs	r1, #20
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	f7fc fc08 	bl	80012b4 <GFX_DrawString>
      ssd1306_display();
 8004aa4:	f006 f952 	bl	800ad4c <ssd1306_display>
      osMutexRelease(SPI1MutexHandle);
 8004aa8:	4b23      	ldr	r3, [pc, #140]	; (8004b38 <StartInitAndTimeTask+0x22c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f00e f85c 	bl	8012b6a <osMutexRelease>
      osMutexRelease(SSD1306MutexHandle);
 8004ab2:	4b20      	ldr	r3, [pc, #128]	; (8004b34 <StartInitAndTimeTask+0x228>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f00e f857 	bl	8012b6a <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 8004abc:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <StartInitAndTimeTask+0x224>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f00e f852 	bl	8012b6a <osMutexRelease>
      osMutexRelease(MenuMutexHandle);
 8004ac6:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <StartInitAndTimeTask+0x220>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f00e f84d 	bl	8012b6a <osMutexRelease>
      if(ActualRtcDate.Date != RtcDate.Date)
 8004ad0:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8004ad4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d00f      	beq.n	8004afc <StartInitAndTimeTask+0x1f0>
      {
         ActualRtcDate.Date = RtcDate.Date;
 8004adc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004ae0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
         osEventFlagsSet(C3V1FlagsHandle, MOON_PHASE_FLAG);
 8004ae4:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <StartInitAndTimeTask+0x21c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2110      	movs	r1, #16
 8004aea:	4618      	mov	r0, r3
 8004aec:	f00d fec2 	bl	8012874 <osEventFlagsSet>
         osEventFlagsSet(C3V1FlagsHandle, NEW_DAY_TO_SAVE);
 8004af0:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <StartInitAndTimeTask+0x21c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2120      	movs	r1, #32
 8004af6:	4618      	mov	r0, r3
 8004af8:	f00d febc 	bl	8012874 <osEventFlagsSet>
      }
      osDelay(1000);
 8004afc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b00:	f00d fdcc 	bl	801269c <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8004b04:	e741      	b.n	800498a <StartInitAndTimeTask+0x7e>
 8004b06:	bf00      	nop
 8004b08:	20003d4c 	.word	0x20003d4c
 8004b0c:	20003f7c 	.word	0x20003f7c
 8004b10:	48000400 	.word	0x48000400
 8004b14:	20003d68 	.word	0x20003d68
 8004b18:	0801c4ac 	.word	0x0801c4ac
 8004b1c:	08007609 	.word	0x08007609
 8004b20:	20003da8 	.word	0x20003da8
 8004b24:	20003d98 	.word	0x20003d98
 8004b28:	20003e24 	.word	0x20003e24
 8004b2c:	20003e18 	.word	0x20003e18
 8004b30:	20003e04 	.word	0x20003e04
 8004b34:	20003e08 	.word	0x20003e08
 8004b38:	20003e0c 	.word	0x20003e0c
 8004b3c:	20003f34 	.word	0x20003f34
 8004b40:	20003e1c 	.word	0x20003e1c
 8004b44:	20003f48 	.word	0x20003f48
 8004b48:	0801c27c 	.word	0x0801c27c
 8004b4c:	0801c28c 	.word	0x0801c28c
 8004b50:	0801c29c 	.word	0x0801c29c

08004b54 <StartRfpTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfpTask */
void StartRfpTask(void *argument)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartRfpTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8004b5c:	4b08      	ldr	r3, [pc, #32]	; (8004b80 <StartRfpTask+0x2c>)
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	f04f 33ff 	mov.w	r3, #4294967295
 8004b64:	2202      	movs	r2, #2
 8004b66:	2102      	movs	r1, #2
 8004b68:	f00d fec8 	bl	80128fc <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      if(Rfp.Initialize == RFP_INITIALIZE)
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <StartRfpTask+0x30>)
 8004b6e:	78db      	ldrb	r3, [r3, #3]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <StartRfpTask+0x24>
      {
         RFP_Handle();
 8004b74:	f005 fbb8 	bl	800a2e8 <RFP_Handle>
      }
      osDelay(10);
 8004b78:	200a      	movs	r0, #10
 8004b7a:	f00d fd8f 	bl	801269c <osDelay>
      if(Rfp.Initialize == RFP_INITIALIZE)
 8004b7e:	e7f5      	b.n	8004b6c <StartRfpTask+0x18>
 8004b80:	20003e24 	.word	0x20003e24
 8004b84:	20003d4c 	.word	0x20003d4c

08004b88 <StartMeasurmentTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasurmentTask */
void StartMeasurmentTask(void *argument)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMeasurmentTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8004b90:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <StartMeasurmentTask+0x48>)
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	f04f 33ff 	mov.w	r3, #4294967295
 8004b98:	2202      	movs	r2, #2
 8004b9a:	2102      	movs	r1, #2
 8004b9c:	f00d feae 	bl	80128fc <osEventFlagsWait>
   uint32_t Time   = 10000;
 8004ba0:	f242 7310 	movw	r3, #10000	; 0x2710
 8004ba4:	60fb      	str	r3, [r7, #12]
   uint8_t Command = RFP_START_MEASURMENT;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	72fb      	strb	r3, [r7, #11]
   /* Infinite loop */
   for(;;)
   {
      RFP_SendData(RFP_ODWS, RFP_COMMAND, &Command, 1);
 8004baa:	f107 020b 	add.w	r2, r7, #11
 8004bae:	2301      	movs	r3, #1
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	2002      	movs	r0, #2
 8004bb4:	f005 fc52 	bl	800a45c <RFP_SendData>
      osEventFlagsWait(C3V1FlagsHandle, SEND_MEASURMENT_COMMAND_FLAG, osFlagsWaitAny, osWaitForever);
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <StartMeasurmentTask+0x48>)
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	f00d fe9a 	bl	80128fc <osEventFlagsWait>
      osDelay(Time);
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f00d fd67 	bl	801269c <osDelay>
      RFP_SendData(RFP_ODWS, RFP_COMMAND, &Command, 1);
 8004bce:	e7ec      	b.n	8004baa <StartMeasurmentTask+0x22>
 8004bd0:	20003e24 	.word	0x20003e24

08004bd4 <StartInternalMeasurmentTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInternalMeasurmentTask */
void StartInternalMeasurmentTask(void *argument)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08e      	sub	sp, #56	; 0x38
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartInternalMeasurmentTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8004bdc:	4b30      	ldr	r3, [pc, #192]	; (8004ca0 <StartInternalMeasurmentTask+0xcc>)
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	f04f 33ff 	mov.w	r3, #4294967295
 8004be4:	2202      	movs	r2, #2
 8004be6:	2102      	movs	r1, #2
 8004be8:	f00d fe88 	bl	80128fc <osEventFlagsWait>
   MV_TypeDef _Mv = { 0 };
 8004bec:	f107 0308 	add.w	r3, r7, #8
 8004bf0:	2230      	movs	r2, #48	; 0x30
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f011 fcdb 	bl	80165b0 <memset>
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8004bfa:	4b2a      	ldr	r3, [pc, #168]	; (8004ca4 <StartInternalMeasurmentTask+0xd0>)
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	f107 0108 	add.w	r1, r7, #8
 8004c02:	f04f 33ff 	mov.w	r3, #4294967295
 8004c06:	2200      	movs	r2, #0
 8004c08:	f00e f8c0 	bl	8012d8c <osMessageQueueGet>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8004c0c:	4b26      	ldr	r3, [pc, #152]	; (8004ca8 <StartInternalMeasurmentTask+0xd4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f04f 31ff 	mov.w	r1, #4294967295
 8004c14:	4618      	mov	r0, r3
 8004c16:	f00d ff5d 	bl	8012ad4 <osMutexAcquire>
      osMutexAcquire(BME280MutexHandle, osWaitForever);
 8004c1a:	4b24      	ldr	r3, [pc, #144]	; (8004cac <StartInternalMeasurmentTask+0xd8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8004c22:	4618      	mov	r0, r3
 8004c24:	f00d ff56 	bl	8012ad4 <osMutexAcquire>
      BME280_ReadAll(&Bme, &_Mv.InternalTemperature, &_Mv.Pressure, &_Mv.InternalHumidity);
 8004c28:	f107 0308 	add.w	r3, r7, #8
 8004c2c:	f103 000c 	add.w	r0, r3, #12
 8004c30:	f107 0308 	add.w	r3, r7, #8
 8004c34:	f103 0210 	add.w	r2, r3, #16
 8004c38:	f107 0308 	add.w	r3, r7, #8
 8004c3c:	f103 0108 	add.w	r1, r3, #8
 8004c40:	4603      	mov	r3, r0
 8004c42:	481b      	ldr	r0, [pc, #108]	; (8004cb0 <StartInternalMeasurmentTask+0xdc>)
 8004c44:	f7fe fde4 	bl	8003810 <BME280_ReadAll>
      osMutexRelease(BME280MutexHandle);
 8004c48:	4b18      	ldr	r3, [pc, #96]	; (8004cac <StartInternalMeasurmentTask+0xd8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f00d ff8c 	bl	8012b6a <osMutexRelease>
      osMutexRelease(SPI1MutexHandle);
 8004c52:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <StartInternalMeasurmentTask+0xd4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f00d ff87 	bl	8012b6a <osMutexRelease>
      osEventFlagsSet(C3V1FlagsHandle, SEND_MEASURMENT_COMMAND_FLAG);
 8004c5c:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <StartInternalMeasurmentTask+0xcc>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2101      	movs	r1, #1
 8004c62:	4618      	mov	r0, r3
 8004c64:	f00d fe06 	bl	8012874 <osEventFlagsSet>
      osMessageQueuePut(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8004c68:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <StartInternalMeasurmentTask+0xd0>)
 8004c6a:	6818      	ldr	r0, [r3, #0]
 8004c6c:	f107 0108 	add.w	r1, r7, #8
 8004c70:	f04f 33ff 	mov.w	r3, #4294967295
 8004c74:	2200      	movs	r2, #0
 8004c76:	f00e f829 	bl	8012ccc <osMessageQueuePut>
      osMessageQueuePut(DataToSaveQueueHandle, &_Mv, 0, osWaitForever);
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <StartInternalMeasurmentTask+0xe0>)
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	f107 0108 	add.w	r1, r7, #8
 8004c82:	f04f 33ff 	mov.w	r3, #4294967295
 8004c86:	2200      	movs	r2, #0
 8004c88:	f00e f820 	bl	8012ccc <osMessageQueuePut>
      osEventFlagsSet(C3V1FlagsHandle, E_PAPIER_DRAWING_FLAG);
 8004c8c:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <StartInternalMeasurmentTask+0xcc>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2104      	movs	r1, #4
 8004c92:	4618      	mov	r0, r3
 8004c94:	f00d fdee 	bl	8012874 <osEventFlagsSet>
      osDelay(1);
 8004c98:	2001      	movs	r0, #1
 8004c9a:	f00d fcff 	bl	801269c <osDelay>
      osMessageQueueGet(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8004c9e:	e7ac      	b.n	8004bfa <StartInternalMeasurmentTask+0x26>
 8004ca0:	20003e24 	.word	0x20003e24
 8004ca4:	20003df0 	.word	0x20003df0
 8004ca8:	20003e0c 	.word	0x20003e0c
 8004cac:	20003e14 	.word	0x20003e14
 8004cb0:	20003d68 	.word	0x20003d68
 8004cb4:	20003dfc 	.word	0x20003dfc

08004cb8 <StartMoonPhaseTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMoonPhaseTask */
void StartMoonPhaseTask(void *argument)
{
 8004cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cbc:	ed2d 8b04 	vpush	{d8-d9}
 8004cc0:	b08e      	sub	sp, #56	; 0x38
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMoonPhaseTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8004cc6:	4b57      	ldr	r3, [pc, #348]	; (8004e24 <StartMoonPhaseTask+0x16c>)
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295
 8004cce:	2202      	movs	r2, #2
 8004cd0:	2102      	movs	r1, #2
 8004cd2:	f00d fe13 	bl	80128fc <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, MOON_PHASE_FLAG, osFlagsWaitAny, osWaitForever);
 8004cd6:	4b53      	ldr	r3, [pc, #332]	; (8004e24 <StartMoonPhaseTask+0x16c>)
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	f04f 33ff 	mov.w	r3, #4294967295
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2110      	movs	r1, #16
 8004ce2:	f00d fe0b 	bl	80128fc <osEventFlagsWait>
      RTC_TimeTypeDef RtcTime;
      RTC_DateTypeDef RtcDate;
      double PhaseMoon = 0.0;
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	e9c7 2302 	strd	r2, r3, [r7, #8]
      uint32_t Cnt     = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	637b      	str	r3, [r7, #52]	; 0x34
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 8004cf6:	4b4c      	ldr	r3, [pc, #304]	; (8004e28 <StartMoonPhaseTask+0x170>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f04f 31ff 	mov.w	r1, #4294967295
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f00d fee8 	bl	8012ad4 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8004d04:	f107 0314 	add.w	r3, r7, #20
 8004d08:	2200      	movs	r2, #0
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4847      	ldr	r0, [pc, #284]	; (8004e2c <StartMoonPhaseTask+0x174>)
 8004d0e:	f009 fb5d 	bl	800e3cc <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8004d12:	f107 0310 	add.w	r3, r7, #16
 8004d16:	2200      	movs	r2, #0
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4844      	ldr	r0, [pc, #272]	; (8004e2c <StartMoonPhaseTask+0x174>)
 8004d1c:	f009 fc40 	bl	800e5a0 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 8004d20:	4b41      	ldr	r3, [pc, #260]	; (8004e28 <StartMoonPhaseTask+0x170>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f00d ff20 	bl	8012b6a <osMutexRelease>
      for(int Hours = 0; Hours < 24; Hours++)
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d2e:	e059      	b.n	8004de4 <StartMoonPhaseTask+0x12c>
      {
         for(int Minutes = 0; Minutes < 60; Minutes++)
 8004d30:	2300      	movs	r3, #0
 8004d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d34:	e050      	b.n	8004dd8 <StartMoonPhaseTask+0x120>
         {
            for(int Seconds = 0; Seconds < 60; Seconds++)
 8004d36:	2300      	movs	r3, #0
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d3a:	e047      	b.n	8004dcc <StartMoonPhaseTask+0x114>
            {
               PhaseMoon += faza((RtcDate.Year + 2000), RtcDate.Month, RtcDate.Date, Hours, Minutes, Seconds);
 8004d3c:	7cfb      	ldrb	r3, [r7, #19]
 8004d3e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fb fc06 	bl	8000554 <__aeabi_i2d>
 8004d48:	4604      	mov	r4, r0
 8004d4a:	460d      	mov	r5, r1
 8004d4c:	7c7b      	ldrb	r3, [r7, #17]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fb fbf0 	bl	8000534 <__aeabi_ui2d>
 8004d54:	4680      	mov	r8, r0
 8004d56:	4689      	mov	r9, r1
 8004d58:	7cbb      	ldrb	r3, [r7, #18]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fb fbea 	bl	8000534 <__aeabi_ui2d>
 8004d60:	4682      	mov	sl, r0
 8004d62:	468b      	mov	fp, r1
 8004d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d66:	f7fb fbf5 	bl	8000554 <__aeabi_i2d>
 8004d6a:	ec41 0b18 	vmov	d8, r0, r1
 8004d6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d70:	f7fb fbf0 	bl	8000554 <__aeabi_i2d>
 8004d74:	ec41 0b19 	vmov	d9, r0, r1
 8004d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d7a:	f7fb fbeb 	bl	8000554 <__aeabi_i2d>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	ec43 2b15 	vmov	d5, r2, r3
 8004d86:	eeb0 4a49 	vmov.f32	s8, s18
 8004d8a:	eef0 4a69 	vmov.f32	s9, s19
 8004d8e:	eeb0 3a48 	vmov.f32	s6, s16
 8004d92:	eef0 3a68 	vmov.f32	s7, s17
 8004d96:	ec4b ab12 	vmov	d2, sl, fp
 8004d9a:	ec49 8b11 	vmov	d1, r8, r9
 8004d9e:	ec45 4b10 	vmov	d0, r4, r5
 8004da2:	f002 fd49 	bl	8007838 <faza>
 8004da6:	ec51 0b10 	vmov	r0, r1, d0
 8004daa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dae:	f7fb fa85 	bl	80002bc <__adddf3>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	e9c7 2302 	strd	r2, r3, [r7, #8]
               Cnt++;
 8004dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	637b      	str	r3, [r7, #52]	; 0x34
               osDelay(5);
 8004dc0:	2005      	movs	r0, #5
 8004dc2:	f00d fc6b 	bl	801269c <osDelay>
            for(int Seconds = 0; Seconds < 60; Seconds++)
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	3301      	adds	r3, #1
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	2b3b      	cmp	r3, #59	; 0x3b
 8004dd0:	ddb4      	ble.n	8004d3c <StartMoonPhaseTask+0x84>
         for(int Minutes = 0; Minutes < 60; Minutes++)
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	2b3b      	cmp	r3, #59	; 0x3b
 8004ddc:	ddab      	ble.n	8004d36 <StartMoonPhaseTask+0x7e>
      for(int Hours = 0; Hours < 24; Hours++)
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	3301      	adds	r3, #1
 8004de2:	633b      	str	r3, [r7, #48]	; 0x30
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	2b17      	cmp	r3, #23
 8004de8:	dda2      	ble.n	8004d30 <StartMoonPhaseTask+0x78>
            }
         }
      }
      PhaseMoon /= (Cnt);
 8004dea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004df0:	f7fb fba0 	bl	8000534 <__aeabi_ui2d>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4620      	mov	r0, r4
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	f7fb fd3e 	bl	800087c <__aeabi_ddiv>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	e9c7 2302 	strd	r2, r3, [r7, #8]
      osMessageQueuePut(MoonPhaseQueueHandle, &PhaseMoon, 0, osWaitForever);
 8004e08:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <StartMoonPhaseTask+0x178>)
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	f107 0108 	add.w	r1, r7, #8
 8004e10:	f04f 33ff 	mov.w	r3, #4294967295
 8004e14:	2200      	movs	r2, #0
 8004e16:	f00d ff59 	bl	8012ccc <osMessageQueuePut>
      osDelay(1);
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	f00d fc3e 	bl	801269c <osDelay>
   {
 8004e20:	e759      	b.n	8004cd6 <StartMoonPhaseTask+0x1e>
 8004e22:	bf00      	nop
 8004e24:	20003e24 	.word	0x20003e24
 8004e28:	20003e1c 	.word	0x20003e1c
 8004e2c:	20003f48 	.word	0x20003f48
 8004e30:	20003df4 	.word	0x20003df4

08004e34 <StartE_PapierDrawingTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartE_PapierDrawingTask */
void StartE_PapierDrawingTask(void *argument)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b0b2      	sub	sp, #200	; 0xc8
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartE_PapierDrawingTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8004e3c:	4bcf      	ldr	r3, [pc, #828]	; (800517c <StartE_PapierDrawingTask+0x348>)
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	f04f 33ff 	mov.w	r3, #4294967295
 8004e44:	2202      	movs	r2, #2
 8004e46:	2102      	movs	r1, #2
 8004e48:	f00d fd58 	bl	80128fc <osEventFlagsWait>
   RTC_TimeTypeDef RtcTime;
   RTC_DateTypeDef RtcDate;
   MV_TypeDef _Mv    = { 0 };
 8004e4c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004e50:	2230      	movs	r2, #48	; 0x30
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f011 fbab 	bl	80165b0 <memset>
   double _MoonPhase = 0;
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DRAWING_FLAG, osFlagsWaitAny, osWaitForever);
 8004e66:	4bc5      	ldr	r3, [pc, #788]	; (800517c <StartE_PapierDrawingTask+0x348>)
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2104      	movs	r1, #4
 8004e72:	f00d fd43 	bl	80128fc <osEventFlagsWait>
      osMessageQueueGet(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8004e76:	4bc2      	ldr	r3, [pc, #776]	; (8005180 <StartE_PapierDrawingTask+0x34c>)
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e82:	2200      	movs	r2, #0
 8004e84:	f00d ff82 	bl	8012d8c <osMessageQueueGet>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8004e88:	4bbe      	ldr	r3, [pc, #760]	; (8005184 <StartE_PapierDrawingTask+0x350>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e90:	4618      	mov	r0, r3
 8004e92:	f00d fe1f 	bl	8012ad4 <osMutexAcquire>
      e_papier_clear();
 8004e96:	f7ff f81f 	bl	8003ed8 <e_papier_clear>
      char mes[100];
      sprintf(mes, "H %0.2f", _Mv.ExtHumidity);
 8004e9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fb fb6b 	bl	8000578 <__aeabi_f2d>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	f107 000c 	add.w	r0, r7, #12
 8004eaa:	49b7      	ldr	r1, [pc, #732]	; (8005188 <StartE_PapierDrawingTask+0x354>)
 8004eac:	f005 fa00 	bl	800a2b0 <sprintf_>
      GFX_DrawString(0, 0, mes, BLACK, 1, E_PAPIER);
 8004eb0:	f107 020c 	add.w	r2, r7, #12
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	2301      	movs	r3, #1
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	f7fc f9f7 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "T %0.2f", _Mv.ExtTemperature);
 8004ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fb fb55 	bl	8000578 <__aeabi_f2d>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	f107 000c 	add.w	r0, r7, #12
 8004ed6:	49ad      	ldr	r1, [pc, #692]	; (800518c <StartE_PapierDrawingTask+0x358>)
 8004ed8:	f005 f9ea 	bl	800a2b0 <sprintf_>
      GFX_DrawString(0, 10, mes, BLACK, 1, E_PAPIER);
 8004edc:	f107 020c 	add.w	r2, r7, #12
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	210a      	movs	r1, #10
 8004eec:	2000      	movs	r0, #0
 8004eee:	f7fc f9e1 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "PM1 %d", _Mv.ExtPM1);
 8004ef2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f107 030c 	add.w	r3, r7, #12
 8004efc:	49a4      	ldr	r1, [pc, #656]	; (8005190 <StartE_PapierDrawingTask+0x35c>)
 8004efe:	4618      	mov	r0, r3
 8004f00:	f005 f9d6 	bl	800a2b0 <sprintf_>
      GFX_DrawString(0, 20, mes, BLACK, 1, E_PAPIER);
 8004f04:	f107 020c 	add.w	r2, r7, #12
 8004f08:	2301      	movs	r3, #1
 8004f0a:	9301      	str	r3, [sp, #4]
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	2300      	movs	r3, #0
 8004f12:	2114      	movs	r1, #20
 8004f14:	2000      	movs	r0, #0
 8004f16:	f7fc f9cd 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "PM10 %d", _Mv.ExtPM10);
 8004f1a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f107 030c 	add.w	r3, r7, #12
 8004f24:	499b      	ldr	r1, [pc, #620]	; (8005194 <StartE_PapierDrawingTask+0x360>)
 8004f26:	4618      	mov	r0, r3
 8004f28:	f005 f9c2 	bl	800a2b0 <sprintf_>
      GFX_DrawString(0, 30, mes, BLACK, 1, E_PAPIER);
 8004f2c:	f107 020c 	add.w	r2, r7, #12
 8004f30:	2301      	movs	r3, #1
 8004f32:	9301      	str	r3, [sp, #4]
 8004f34:	2301      	movs	r3, #1
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	211e      	movs	r1, #30
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	f7fc f9b9 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "PM2,5 %d", _Mv.ExtPM25);
 8004f42:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004f46:	461a      	mov	r2, r3
 8004f48:	f107 030c 	add.w	r3, r7, #12
 8004f4c:	4992      	ldr	r1, [pc, #584]	; (8005198 <StartE_PapierDrawingTask+0x364>)
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f005 f9ae 	bl	800a2b0 <sprintf_>
      GFX_DrawString(0, 40, mes, BLACK, 1, E_PAPIER);
 8004f54:	f107 020c 	add.w	r2, r7, #12
 8004f58:	2301      	movs	r3, #1
 8004f5a:	9301      	str	r3, [sp, #4]
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	2300      	movs	r3, #0
 8004f62:	2128      	movs	r1, #40	; 0x28
 8004f64:	2000      	movs	r0, #0
 8004f66:	f7fc f9a5 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "Battery Level %0.2f", _Mv.BatteryVoltage);
 8004f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fb fb02 	bl	8000578 <__aeabi_f2d>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	f107 000c 	add.w	r0, r7, #12
 8004f7c:	4987      	ldr	r1, [pc, #540]	; (800519c <StartE_PapierDrawingTask+0x368>)
 8004f7e:	f005 f997 	bl	800a2b0 <sprintf_>
      GFX_DrawString(0, 50, mes, BLACK, 1, E_PAPIER);
 8004f82:	f107 020c 	add.w	r2, r7, #12
 8004f86:	2301      	movs	r3, #1
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2132      	movs	r1, #50	; 0x32
 8004f92:	2000      	movs	r0, #0
 8004f94:	f7fc f98e 	bl	80012b4 <GFX_DrawString>
      if(!(_Mv.BatteryState & 0x01))
 8004f98:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10a      	bne.n	8004fba <StartE_PapierDrawingTask+0x186>
      {
         GFX_DrawString(0, 60, "Battery Charging", BLACK, 1, E_PAPIER);
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	9301      	str	r3, [sp, #4]
 8004fa8:	2301      	movs	r3, #1
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	2300      	movs	r3, #0
 8004fae:	4a7c      	ldr	r2, [pc, #496]	; (80051a0 <StartE_PapierDrawingTask+0x36c>)
 8004fb0:	213c      	movs	r1, #60	; 0x3c
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	f7fc f97e 	bl	80012b4 <GFX_DrawString>
 8004fb8:	e009      	b.n	8004fce <StartE_PapierDrawingTask+0x19a>
      }
      else
      {
         GFX_DrawString(0, 60, "Battery No Charging", BLACK, 1, E_PAPIER);
 8004fba:	2301      	movs	r3, #1
 8004fbc:	9301      	str	r3, [sp, #4]
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	4a77      	ldr	r2, [pc, #476]	; (80051a4 <StartE_PapierDrawingTask+0x370>)
 8004fc6:	213c      	movs	r1, #60	; 0x3c
 8004fc8:	2000      	movs	r0, #0
 8004fca:	f7fc f973 	bl	80012b4 <GFX_DrawString>
      }
      if(!(_Mv.BatteryState & 0x02))
 8004fce:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10a      	bne.n	8004ff0 <StartE_PapierDrawingTask+0x1bc>
      {
         GFX_DrawString(0, 70, "Battery Standby", BLACK, 1, E_PAPIER);
 8004fda:	2301      	movs	r3, #1
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	2301      	movs	r3, #1
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	4a70      	ldr	r2, [pc, #448]	; (80051a8 <StartE_PapierDrawingTask+0x374>)
 8004fe6:	2146      	movs	r1, #70	; 0x46
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f7fc f963 	bl	80012b4 <GFX_DrawString>
 8004fee:	e009      	b.n	8005004 <StartE_PapierDrawingTask+0x1d0>
      }
      else
      {
         GFX_DrawString(0, 70, "Battery No Standby", BLACK, 1, E_PAPIER);
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	9301      	str	r3, [sp, #4]
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	4a6c      	ldr	r2, [pc, #432]	; (80051ac <StartE_PapierDrawingTask+0x378>)
 8004ffc:	2146      	movs	r1, #70	; 0x46
 8004ffe:	2000      	movs	r0, #0
 8005000:	f7fc f958 	bl	80012b4 <GFX_DrawString>
      }
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 8005004:	4b6a      	ldr	r3, [pc, #424]	; (80051b0 <StartE_PapierDrawingTask+0x37c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f04f 31ff 	mov.w	r1, #4294967295
 800500c:	4618      	mov	r0, r3
 800500e:	f00d fd61 	bl	8012ad4 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8005012:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005016:	2200      	movs	r2, #0
 8005018:	4619      	mov	r1, r3
 800501a:	4866      	ldr	r0, [pc, #408]	; (80051b4 <StartE_PapierDrawingTask+0x380>)
 800501c:	f009 f9d6 	bl	800e3cc <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8005020:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005024:	2200      	movs	r2, #0
 8005026:	4619      	mov	r1, r3
 8005028:	4862      	ldr	r0, [pc, #392]	; (80051b4 <StartE_PapierDrawingTask+0x380>)
 800502a:	f009 fab9 	bl	800e5a0 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 800502e:	4b60      	ldr	r3, [pc, #384]	; (80051b0 <StartE_PapierDrawingTask+0x37c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f00d fd99 	bl	8012b6a <osMutexRelease>
      sprintf(mes, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8005038:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800503c:	461a      	mov	r2, r3
 800503e:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8005042:	4619      	mov	r1, r3
 8005044:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8005048:	f107 000c 	add.w	r0, r7, #12
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	460b      	mov	r3, r1
 8005050:	4959      	ldr	r1, [pc, #356]	; (80051b8 <StartE_PapierDrawingTask+0x384>)
 8005052:	f005 f92d 	bl	800a2b0 <sprintf_>
      GFX_DrawString(0, 80, mes, BLACK, 1, E_PAPIER);
 8005056:	f107 020c 	add.w	r2, r7, #12
 800505a:	2301      	movs	r3, #1
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	2301      	movs	r3, #1
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	2300      	movs	r3, #0
 8005064:	2150      	movs	r1, #80	; 0x50
 8005066:	2000      	movs	r0, #0
 8005068:	f7fc f924 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%d : %d ; 20%d", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 800506c:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8005070:	461a      	mov	r2, r3
 8005072:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8005076:	4619      	mov	r1, r3
 8005078:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800507c:	f107 000c 	add.w	r0, r7, #12
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	460b      	mov	r3, r1
 8005084:	494d      	ldr	r1, [pc, #308]	; (80051bc <StartE_PapierDrawingTask+0x388>)
 8005086:	f005 f913 	bl	800a2b0 <sprintf_>
      GFX_DrawString(0, 90, mes, BLACK, 1, E_PAPIER);
 800508a:	f107 020c 	add.w	r2, r7, #12
 800508e:	2301      	movs	r3, #1
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	2301      	movs	r3, #1
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	2300      	movs	r3, #0
 8005098:	215a      	movs	r1, #90	; 0x5a
 800509a:	2000      	movs	r0, #0
 800509c:	f7fc f90a 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%Internal Temperature: %0.2f", _Mv.InternalTemperature);
 80050a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fb fa67 	bl	8000578 <__aeabi_f2d>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	f107 000c 	add.w	r0, r7, #12
 80050b2:	4943      	ldr	r1, [pc, #268]	; (80051c0 <StartE_PapierDrawingTask+0x38c>)
 80050b4:	f005 f8fc 	bl	800a2b0 <sprintf_>
      GFX_DrawString(0, 210, mes, BLACK, 1, E_PAPIER);
 80050b8:	f107 020c 	add.w	r2, r7, #12
 80050bc:	2301      	movs	r3, #1
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	2301      	movs	r3, #1
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	2300      	movs	r3, #0
 80050c6:	21d2      	movs	r1, #210	; 0xd2
 80050c8:	2000      	movs	r0, #0
 80050ca:	f7fc f8f3 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%Internal Humidity: %0.2f", _Mv.InternalHumidity);
 80050ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fb fa50 	bl	8000578 <__aeabi_f2d>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	f107 000c 	add.w	r0, r7, #12
 80050e0:	4938      	ldr	r1, [pc, #224]	; (80051c4 <StartE_PapierDrawingTask+0x390>)
 80050e2:	f005 f8e5 	bl	800a2b0 <sprintf_>
      GFX_DrawString(0, 200, mes, BLACK, 1, E_PAPIER);
 80050e6:	f107 020c 	add.w	r2, r7, #12
 80050ea:	2301      	movs	r3, #1
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	2301      	movs	r3, #1
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2300      	movs	r3, #0
 80050f4:	21c8      	movs	r1, #200	; 0xc8
 80050f6:	2000      	movs	r0, #0
 80050f8:	f7fc f8dc 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%Pressure: %0.2f", _Mv.Pressure);
 80050fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005100:	4618      	mov	r0, r3
 8005102:	f7fb fa39 	bl	8000578 <__aeabi_f2d>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
 800510a:	f107 000c 	add.w	r0, r7, #12
 800510e:	492e      	ldr	r1, [pc, #184]	; (80051c8 <StartE_PapierDrawingTask+0x394>)
 8005110:	f005 f8ce 	bl	800a2b0 <sprintf_>
      GFX_DrawString(0, 220, mes, BLACK, 1, E_PAPIER);
 8005114:	f107 020c 	add.w	r2, r7, #12
 8005118:	2301      	movs	r3, #1
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	2301      	movs	r3, #1
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	2300      	movs	r3, #0
 8005122:	21dc      	movs	r1, #220	; 0xdc
 8005124:	2000      	movs	r0, #0
 8005126:	f7fc f8c5 	bl	80012b4 <GFX_DrawString>
      osMessageQueueGet(MoonPhaseQueueHandle, &_MoonPhase, 0, 0);
 800512a:	4b28      	ldr	r3, [pc, #160]	; (80051cc <StartE_PapierDrawingTask+0x398>)
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005132:	2300      	movs	r3, #0
 8005134:	2200      	movs	r2, #0
 8005136:	f00d fe29 	bl	8012d8c <osMessageQueueGet>
      sprintf(mes, "Moon Phase: %0.2f%%", _MoonPhase);
 800513a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800513e:	f107 000c 	add.w	r0, r7, #12
 8005142:	4923      	ldr	r1, [pc, #140]	; (80051d0 <StartE_PapierDrawingTask+0x39c>)
 8005144:	f005 f8b4 	bl	800a2b0 <sprintf_>
      GFX_DrawString(0, 230, mes, BLACK, 1, E_PAPIER);
 8005148:	f107 020c 	add.w	r2, r7, #12
 800514c:	2301      	movs	r3, #1
 800514e:	9301      	str	r3, [sp, #4]
 8005150:	2301      	movs	r3, #1
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	2300      	movs	r3, #0
 8005156:	21e6      	movs	r1, #230	; 0xe6
 8005158:	2000      	movs	r0, #0
 800515a:	f7fc f8ab 	bl	80012b4 <GFX_DrawString>
      osMutexRelease(E_PAPIERMutexHandle);
 800515e:	4b09      	ldr	r3, [pc, #36]	; (8005184 <StartE_PapierDrawingTask+0x350>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f00d fd01 	bl	8012b6a <osMutexRelease>
      osEventFlagsSet(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG);
 8005168:	4b04      	ldr	r3, [pc, #16]	; (800517c <StartE_PapierDrawingTask+0x348>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2108      	movs	r1, #8
 800516e:	4618      	mov	r0, r3
 8005170:	f00d fb80 	bl	8012874 <osEventFlagsSet>
      osDelay(1);
 8005174:	2001      	movs	r0, #1
 8005176:	f00d fa91 	bl	801269c <osDelay>
   {
 800517a:	e674      	b.n	8004e66 <StartE_PapierDrawingTask+0x32>
 800517c:	20003e24 	.word	0x20003e24
 8005180:	20003df0 	.word	0x20003df0
 8005184:	20003e10 	.word	0x20003e10
 8005188:	0801c2a4 	.word	0x0801c2a4
 800518c:	0801c2ac 	.word	0x0801c2ac
 8005190:	0801c2b4 	.word	0x0801c2b4
 8005194:	0801c2bc 	.word	0x0801c2bc
 8005198:	0801c2c4 	.word	0x0801c2c4
 800519c:	0801c2d0 	.word	0x0801c2d0
 80051a0:	0801c2e4 	.word	0x0801c2e4
 80051a4:	0801c2f8 	.word	0x0801c2f8
 80051a8:	0801c30c 	.word	0x0801c30c
 80051ac:	0801c31c 	.word	0x0801c31c
 80051b0:	20003e1c 	.word	0x20003e1c
 80051b4:	20003f48 	.word	0x20003f48
 80051b8:	0801c27c 	.word	0x0801c27c
 80051bc:	0801c28c 	.word	0x0801c28c
 80051c0:	0801c330 	.word	0x0801c330
 80051c4:	0801c350 	.word	0x0801c350
 80051c8:	0801c36c 	.word	0x0801c36c
 80051cc:	20003df4 	.word	0x20003df4
 80051d0:	0801c380 	.word	0x0801c380

080051d4 <StartE_PapierDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartE_PapierDisplayTask */
void StartE_PapierDisplayTask(void *argument)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartE_PapierDisplayTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 80051dc:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <StartE_PapierDisplayTask+0x80>)
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	f04f 33ff 	mov.w	r3, #4294967295
 80051e4:	2202      	movs	r2, #2
 80051e6:	2102      	movs	r1, #2
 80051e8:	f00d fb88 	bl	80128fc <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG, osFlagsWaitAny, osWaitForever);
 80051ec:	4b19      	ldr	r3, [pc, #100]	; (8005254 <StartE_PapierDisplayTask+0x80>)
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	f04f 33ff 	mov.w	r3, #4294967295
 80051f4:	2200      	movs	r2, #0
 80051f6:	2108      	movs	r1, #8
 80051f8:	f00d fb80 	bl	80128fc <osEventFlagsWait>
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80051fc:	4b16      	ldr	r3, [pc, #88]	; (8005258 <StartE_PapierDisplayTask+0x84>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f04f 31ff 	mov.w	r1, #4294967295
 8005204:	4618      	mov	r0, r3
 8005206:	f00d fc65 	bl	8012ad4 <osMutexAcquire>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 800520a:	4b14      	ldr	r3, [pc, #80]	; (800525c <StartE_PapierDisplayTask+0x88>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f04f 31ff 	mov.w	r1, #4294967295
 8005212:	4618      	mov	r0, r3
 8005214:	f00d fc5e 	bl	8012ad4 <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8005218:	4b11      	ldr	r3, [pc, #68]	; (8005260 <StartE_PapierDisplayTask+0x8c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f04f 31ff 	mov.w	r1, #4294967295
 8005220:	4618      	mov	r0, r3
 8005222:	f00d fc57 	bl	8012ad4 <osMutexAcquire>
      e_papier_display();
 8005226:	f7fe fe05 	bl	8003e34 <e_papier_display>
      e_papier_clear();
 800522a:	f7fe fe55 	bl	8003ed8 <e_papier_clear>
      osMutexRelease(SPI1MutexHandle);
 800522e:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <StartE_PapierDisplayTask+0x8c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f00d fc99 	bl	8012b6a <osMutexRelease>
      osMutexRelease(E_PAPIERMutexHandle);
 8005238:	4b08      	ldr	r3, [pc, #32]	; (800525c <StartE_PapierDisplayTask+0x88>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f00d fc94 	bl	8012b6a <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <StartE_PapierDisplayTask+0x84>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f00d fc8f 	bl	8012b6a <osMutexRelease>
      osDelay(1);
 800524c:	2001      	movs	r0, #1
 800524e:	f00d fa25 	bl	801269c <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG, osFlagsWaitAny, osWaitForever);
 8005252:	e7cb      	b.n	80051ec <StartE_PapierDisplayTask+0x18>
 8005254:	20003e24 	.word	0x20003e24
 8005258:	20003e04 	.word	0x20003e04
 800525c:	20003e10 	.word	0x20003e10
 8005260:	20003e0c 	.word	0x20003e0c

08005264 <StartMenuTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMenuTask */
void StartMenuTask(void *argument)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMenuTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 800526c:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <StartMenuTask+0x3c>)
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	f04f 33ff 	mov.w	r3, #4294967295
 8005274:	2202      	movs	r2, #2
 8005276:	2102      	movs	r1, #2
 8005278:	f00d fb40 	bl	80128fc <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osMutexAcquire(EncoderMutexHandle, osWaitForever);
 800527c:	4b09      	ldr	r3, [pc, #36]	; (80052a4 <StartMenuTask+0x40>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f04f 31ff 	mov.w	r1, #4294967295
 8005284:	4618      	mov	r0, r3
 8005286:	f00d fc25 	bl	8012ad4 <osMutexAcquire>
      MENU_Handler();
 800528a:	f7fc fa3f 	bl	800170c <MENU_Handler>
      osMutexRelease(EncoderMutexHandle);
 800528e:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <StartMenuTask+0x40>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f00d fc69 	bl	8012b6a <osMutexRelease>
      osDelay(10);
 8005298:	200a      	movs	r0, #10
 800529a:	f00d f9ff 	bl	801269c <osDelay>
      osMutexAcquire(EncoderMutexHandle, osWaitForever);
 800529e:	e7ed      	b.n	800527c <StartMenuTask+0x18>
 80052a0:	20003e24 	.word	0x20003e24
 80052a4:	20003e20 	.word	0x20003e20

080052a8 <StartSaveMemoryTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSaveMemoryTask */
void StartSaveMemoryTask(void *argument)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80052b4:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80052b8:	6018      	str	r0, [r3, #0]
   /* USER CODE BEGIN StartSaveMemoryTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 80052ba:	4b62      	ldr	r3, [pc, #392]	; (8005444 <StartSaveMemoryTask+0x19c>)
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	f04f 33ff 	mov.w	r3, #4294967295
 80052c2:	2202      	movs	r2, #2
 80052c4:	2102      	movs	r1, #2
 80052c6:	f00d fb19 	bl	80128fc <osEventFlagsWait>
   osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_TO_SAVE, osFlagsWaitAny, osWaitForever);
 80052ca:	4b5e      	ldr	r3, [pc, #376]	; (8005444 <StartSaveMemoryTask+0x19c>)
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	f04f 33ff 	mov.w	r3, #4294967295
 80052d2:	2200      	movs	r2, #0
 80052d4:	2120      	movs	r1, #32
 80052d6:	f00d fb11 	bl	80128fc <osEventFlagsWait>
   PageVariable_TypeDef Pv             = { 0 };
 80052da:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80052de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80052e2:	4618      	mov	r0, r3
 80052e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052e8:	461a      	mov	r2, r3
 80052ea:	2100      	movs	r1, #0
 80052ec:	f011 f960 	bl	80165b0 <memset>
   MV_TypeDef _Mv                      = { 0 };
 80052f0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80052f4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80052f8:	4618      	mov	r0, r3
 80052fa:	2330      	movs	r3, #48	; 0x30
 80052fc:	461a      	mov	r2, r3
 80052fe:	2100      	movs	r1, #0
 8005300:	f011 f956 	bl	80165b0 <memset>
   uint32_t Cnt                        = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
   RTC_TimeTypeDef RtcTime             = { 0 };
 800530a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800530e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005312:	461a      	mov	r2, r3
 8005314:	2300      	movs	r3, #0
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	6053      	str	r3, [r2, #4]
 800531a:	6093      	str	r3, [r2, #8]
 800531c:	60d3      	str	r3, [r2, #12]
 800531e:	6113      	str	r3, [r2, #16]
   RTC_DateTypeDef RtcDate             = { 0 };
 8005320:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005324:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
   PageVariable_TypeDef ConfirmPv      = { 0 };
 800532c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005330:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005334:	4618      	mov	r0, r3
 8005336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800533a:	461a      	mov	r2, r3
 800533c:	2100      	movs	r1, #0
 800533e:	f011 f937 	bl	80165b0 <memset>
   FramDateChart_TypeDef FramDateChart = { 0 };
 8005342:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005346:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800534a:	461a      	mov	r2, r3
 800534c:	2300      	movs	r3, #0
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	6053      	str	r3, [r2, #4]
 8005352:	6093      	str	r3, [r2, #8]
 8005354:	60d3      	str	r3, [r2, #12]
   uint8_t FramDataChartExistFlag      = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
   osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800535c:	4b3a      	ldr	r3, [pc, #232]	; (8005448 <StartSaveMemoryTask+0x1a0>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f04f 31ff 	mov.w	r1, #4294967295
 8005364:	4618      	mov	r0, r3
 8005366:	f00d fbb5 	bl	8012ad4 <osMutexAcquire>
   uint32_t PageCnt          = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 800536a:	2100      	movs	r1, #0
 800536c:	4837      	ldr	r0, [pc, #220]	; (800544c <StartSaveMemoryTask+0x1a4>)
 800536e:	f7ff f830 	bl	80043d2 <fram_Read32>
 8005372:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
   uint32_t FramDateChartCnt = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 8005376:	2104      	movs	r1, #4
 8005378:	4834      	ldr	r0, [pc, #208]	; (800544c <StartSaveMemoryTask+0x1a4>)
 800537a:	f7ff f82a 	bl	80043d2 <fram_Read32>
 800537e:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
   osMutexRelease(SPI1MutexHandle);
 8005382:	4b31      	ldr	r3, [pc, #196]	; (8005448 <StartSaveMemoryTask+0x1a0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f00d fbef 	bl	8012b6a <osMutexRelease>
   osMutexAcquire(RTCMutexHandle, osWaitForever);
 800538c:	4b30      	ldr	r3, [pc, #192]	; (8005450 <StartSaveMemoryTask+0x1a8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f04f 31ff 	mov.w	r1, #4294967295
 8005394:	4618      	mov	r0, r3
 8005396:	f00d fb9d 	bl	8012ad4 <osMutexAcquire>
   HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 800539a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800539e:	2200      	movs	r2, #0
 80053a0:	4619      	mov	r1, r3
 80053a2:	482c      	ldr	r0, [pc, #176]	; (8005454 <StartSaveMemoryTask+0x1ac>)
 80053a4:	f009 f812 	bl	800e3cc <HAL_RTC_GetTime>
   HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80053a8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80053ac:	2200      	movs	r2, #0
 80053ae:	4619      	mov	r1, r3
 80053b0:	4828      	ldr	r0, [pc, #160]	; (8005454 <StartSaveMemoryTask+0x1ac>)
 80053b2:	f009 f8f5 	bl	800e5a0 <HAL_RTC_GetDate>
   osMutexRelease(RTCMutexHandle);
 80053b6:	4b26      	ldr	r3, [pc, #152]	; (8005450 <StartSaveMemoryTask+0x1a8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f00d fbd5 	bl	8012b6a <osMutexRelease>

   for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 80053c0:	2308      	movs	r3, #8
 80053c2:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80053c6:	e04c      	b.n	8005462 <StartSaveMemoryTask+0x1ba>
   {
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80053c8:	4b1f      	ldr	r3, [pc, #124]	; (8005448 <StartSaveMemoryTask+0x1a0>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f04f 31ff 	mov.w	r1, #4294967295
 80053d0:	4618      	mov	r0, r3
 80053d2:	f00d fb7f 	bl	8012ad4 <osMutexAcquire>
      fram_Read(&Fram, i, &FramDateChart, 12);
 80053d6:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80053da:	b299      	uxth	r1, r3
 80053dc:	f107 020c 	add.w	r2, r7, #12
 80053e0:	230c      	movs	r3, #12
 80053e2:	481a      	ldr	r0, [pc, #104]	; (800544c <StartSaveMemoryTask+0x1a4>)
 80053e4:	f7ff f8a9 	bl	800453a <fram_Read>
      osMutexRelease(SPI1MutexHandle);
 80053e8:	4b17      	ldr	r3, [pc, #92]	; (8005448 <StartSaveMemoryTask+0x1a0>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f00d fbbc 	bl	8012b6a <osMutexRelease>
      if(FramDateChart.Date == RtcDate.Date && FramDateChart.Month == RtcDate.Month && FramDateChart.Year == RtcDate.Year)
 80053f2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80053f6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80053fa:	781a      	ldrb	r2, [r3, #0]
 80053fc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005400:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005404:	789b      	ldrb	r3, [r3, #2]
 8005406:	429a      	cmp	r2, r3
 8005408:	d126      	bne.n	8005458 <StartSaveMemoryTask+0x1b0>
 800540a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800540e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8005412:	785a      	ldrb	r2, [r3, #1]
 8005414:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005418:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800541c:	785b      	ldrb	r3, [r3, #1]
 800541e:	429a      	cmp	r2, r3
 8005420:	d11a      	bne.n	8005458 <StartSaveMemoryTask+0x1b0>
 8005422:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005426:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800542a:	789a      	ldrb	r2, [r3, #2]
 800542c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005430:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005434:	78db      	ldrb	r3, [r3, #3]
 8005436:	429a      	cmp	r2, r3
 8005438:	d10e      	bne.n	8005458 <StartSaveMemoryTask+0x1b0>
      {
         FramDataChartExistFlag = 1;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
         // FramDateChart.Length   = 0;
         // fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * sizeof(FramDateChart_TypeDef), &FramDateChart,
         // sizeof(FramDateChart_TypeDef));
         break;
 8005440:	e015      	b.n	800546e <StartSaveMemoryTask+0x1c6>
 8005442:	bf00      	nop
 8005444:	20003e24 	.word	0x20003e24
 8005448:	20003e0c 	.word	0x20003e0c
 800544c:	20003da8 	.word	0x20003da8
 8005450:	20003e1c 	.word	0x20003e1c
 8005454:	20003f48 	.word	0x20003f48
   for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8005458:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800545c:	330c      	adds	r3, #12
 800545e:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8005462:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8005466:	f241 7277 	movw	r2, #6007	; 0x1777
 800546a:	4293      	cmp	r3, r2
 800546c:	ddac      	ble.n	80053c8 <StartSaveMemoryTask+0x120>
      }
   }
   if(FramDataChartExistFlag == 0)
 800546e:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 8005472:	2b00      	cmp	r3, #0
 8005474:	d157      	bne.n	8005526 <StartSaveMemoryTask+0x27e>
   {
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8005476:	4ba7      	ldr	r3, [pc, #668]	; (8005714 <StartSaveMemoryTask+0x46c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f04f 31ff 	mov.w	r1, #4294967295
 800547e:	4618      	mov	r0, r3
 8005480:	f00d fb28 	bl	8012ad4 <osMutexAcquire>
      fram_Increment32(&Fram, DATE_CHART_CNT_ADDR);
 8005484:	2104      	movs	r1, #4
 8005486:	48a4      	ldr	r0, [pc, #656]	; (8005718 <StartSaveMemoryTask+0x470>)
 8005488:	f7fe ffdf 	bl	800444a <fram_Increment32>
      FramDateChart.Date           = RtcDate.Date;
 800548c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005490:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005494:	789a      	ldrb	r2, [r3, #2]
 8005496:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800549a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800549e:	701a      	strb	r2, [r3, #0]
      FramDateChart.Month          = RtcDate.Month;
 80054a0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80054a4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80054a8:	785a      	ldrb	r2, [r3, #1]
 80054aa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80054ae:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80054b2:	705a      	strb	r2, [r3, #1]
      FramDateChart.Year           = RtcDate.Year;
 80054b4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80054b8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80054bc:	78da      	ldrb	r2, [r3, #3]
 80054be:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80054c2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80054c6:	709a      	strb	r2, [r3, #2]
      FramDateChart.StartFlashPage = PageCnt;
 80054c8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80054cc:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80054d0:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80054d4:	605a      	str	r2, [r3, #4]
      FramDateChart.Length         = 0;
 80054d6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80054da:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80054de:	2200      	movs	r2, #0
 80054e0:	721a      	strb	r2, [r3, #8]
      FramDateChart.Crc            = CRC_INITIAL_VALUE;
 80054e2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80054e6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80054ea:	f04f 32ff 	mov.w	r2, #4294967295
 80054ee:	60da      	str	r2, [r3, #12]
      FramDateChartCnt             = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 80054f0:	2104      	movs	r1, #4
 80054f2:	4889      	ldr	r0, [pc, #548]	; (8005718 <StartSaveMemoryTask+0x470>)
 80054f4:	f7fe ff6d 	bl	80043d2 <fram_Read32>
 80054f8:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
      fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 80054fc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8005500:	b29b      	uxth	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	0052      	lsls	r2, r2, #1
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	b29b      	uxth	r3, r3
 800550c:	3308      	adds	r3, #8
 800550e:	b299      	uxth	r1, r3
 8005510:	f107 020c 	add.w	r2, r7, #12
 8005514:	230c      	movs	r3, #12
 8005516:	4880      	ldr	r0, [pc, #512]	; (8005718 <StartSaveMemoryTask+0x470>)
 8005518:	f7fe ffe0 	bl	80044dc <fram_Write>
      osMutexRelease(SPI1MutexHandle);
 800551c:	4b7d      	ldr	r3, [pc, #500]	; (8005714 <StartSaveMemoryTask+0x46c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4618      	mov	r0, r3
 8005522:	f00d fb22 	bl	8012b6a <osMutexRelease>
   }

   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(DataToSaveQueueHandle, &_Mv, 0, osWaitForever);
 8005526:	4b7d      	ldr	r3, [pc, #500]	; (800571c <StartSaveMemoryTask+0x474>)
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	f507 719a 	add.w	r1, r7, #308	; 0x134
 800552e:	f04f 33ff 	mov.w	r3, #4294967295
 8005532:	2200      	movs	r2, #0
 8005534:	f00d fc2a 	bl	8012d8c <osMessageQueueGet>
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 8005538:	4b79      	ldr	r3, [pc, #484]	; (8005720 <StartSaveMemoryTask+0x478>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f04f 31ff 	mov.w	r1, #4294967295
 8005540:	4618      	mov	r0, r3
 8005542:	f00d fac7 	bl	8012ad4 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8005546:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800554a:	2200      	movs	r2, #0
 800554c:	4619      	mov	r1, r3
 800554e:	4875      	ldr	r0, [pc, #468]	; (8005724 <StartSaveMemoryTask+0x47c>)
 8005550:	f008 ff3c 	bl	800e3cc <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8005554:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005558:	2200      	movs	r2, #0
 800555a:	4619      	mov	r1, r3
 800555c:	4871      	ldr	r0, [pc, #452]	; (8005724 <StartSaveMemoryTask+0x47c>)
 800555e:	f009 f81f 	bl	800e5a0 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 8005562:	4b6f      	ldr	r3, [pc, #444]	; (8005720 <StartSaveMemoryTask+0x478>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f00d faff 	bl	8012b6a <osMutexRelease>
      if(osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_TO_SAVE, osFlagsWaitAny, 1) != osFlagsErrorTimeout)
 800556c:	4b6e      	ldr	r3, [pc, #440]	; (8005728 <StartSaveMemoryTask+0x480>)
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	2301      	movs	r3, #1
 8005572:	2200      	movs	r2, #0
 8005574:	2120      	movs	r1, #32
 8005576:	f00d f9c1 	bl	80128fc <osEventFlagsWait>
 800557a:	4603      	mov	r3, r0
 800557c:	f113 0f02 	cmn.w	r3, #2
 8005580:	f000 80d6 	beq.w	8005730 <StartSaveMemoryTask+0x488>
      {
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8005584:	4b63      	ldr	r3, [pc, #396]	; (8005714 <StartSaveMemoryTask+0x46c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f04f 31ff 	mov.w	r1, #4294967295
 800558c:	4618      	mov	r0, r3
 800558e:	f00d faa1 	bl	8012ad4 <osMutexAcquire>
         PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8005592:	2100      	movs	r1, #0
 8005594:	4860      	ldr	r0, [pc, #384]	; (8005718 <StartSaveMemoryTask+0x470>)
 8005596:	f7fe ff1c 	bl	80043d2 <fram_Read32>
 800559a:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
         flash_WritePage(&Flash, PageCnt, &Pv);
 800559e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80055a2:	461a      	mov	r2, r3
 80055a4:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 80055a8:	4860      	ldr	r0, [pc, #384]	; (800572c <StartSaveMemoryTask+0x484>)
 80055aa:	f7fe fe20 	bl	80041ee <flash_WritePage>
         flash_ReadPage(&Flash, PageCnt, &ConfirmPv);
 80055ae:	f107 031c 	add.w	r3, r7, #28
 80055b2:	461a      	mov	r2, r3
 80055b4:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 80055b8:	485c      	ldr	r0, [pc, #368]	; (800572c <StartSaveMemoryTask+0x484>)
 80055ba:	f7fe fe4e 	bl	800425a <flash_ReadPage>
         if(Pv.PageCRC == ConfirmPv.PageCRC)
 80055be:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80055c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80055c6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80055ca:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80055ce:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80055d2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d147      	bne.n	800566a <StartSaveMemoryTask+0x3c2>
         {
            fram_Increment32(&Fram, LAST_PAGE_NUMBER_ADDR);
 80055da:	2100      	movs	r1, #0
 80055dc:	484e      	ldr	r0, [pc, #312]	; (8005718 <StartSaveMemoryTask+0x470>)
 80055de:	f7fe ff34 	bl	800444a <fram_Increment32>
            PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 80055e2:	2100      	movs	r1, #0
 80055e4:	484c      	ldr	r0, [pc, #304]	; (8005718 <StartSaveMemoryTask+0x470>)
 80055e6:	f7fe fef4 	bl	80043d2 <fram_Read32>
 80055ea:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
            FramDateChart.Length++;
 80055ee:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80055f2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80055f6:	7a1b      	ldrb	r3, [r3, #8]
 80055f8:	3301      	adds	r3, #1
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005600:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8005604:	721a      	strb	r2, [r3, #8]
            FramDateChart.Crc = Crc(FramDateChart.Crc, 256, &Pv);
 8005606:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800560a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8005614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005618:	4618      	mov	r0, r3
 800561a:	f7fe f9ed 	bl	80039f8 <Crc>
 800561e:	4602      	mov	r2, r0
 8005620:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005624:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8005628:	60da      	str	r2, [r3, #12]
            FramDateChartCnt  = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 800562a:	2104      	movs	r1, #4
 800562c:	483a      	ldr	r0, [pc, #232]	; (8005718 <StartSaveMemoryTask+0x470>)
 800562e:	f7fe fed0 	bl	80043d2 <fram_Read32>
 8005632:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
            fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 8005636:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800563a:	b29b      	uxth	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	0052      	lsls	r2, r2, #1
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	b29b      	uxth	r3, r3
 8005646:	3308      	adds	r3, #8
 8005648:	b299      	uxth	r1, r3
 800564a:	f107 020c 	add.w	r2, r7, #12
 800564e:	230c      	movs	r3, #12
 8005650:	4831      	ldr	r0, [pc, #196]	; (8005718 <StartSaveMemoryTask+0x470>)
 8005652:	f7fe ff43 	bl	80044dc <fram_Write>
            Memory_ClearBuffer(&ConfirmPv);
 8005656:	f107 031c 	add.w	r3, r7, #28
 800565a:	4618      	mov	r0, r3
 800565c:	f001 ff2e 	bl	80074bc <Memory_ClearBuffer>
            Memory_ClearBuffer(&Pv);
 8005660:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8005664:	4618      	mov	r0, r3
 8005666:	f001 ff29 	bl	80074bc <Memory_ClearBuffer>
         }
         fram_Increment32(&Fram, DATE_CHART_CNT_ADDR);
 800566a:	2104      	movs	r1, #4
 800566c:	482a      	ldr	r0, [pc, #168]	; (8005718 <StartSaveMemoryTask+0x470>)
 800566e:	f7fe feec 	bl	800444a <fram_Increment32>
         FramDateChart.Date           = RtcDate.Date;
 8005672:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005676:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800567a:	789a      	ldrb	r2, [r3, #2]
 800567c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005680:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8005684:	701a      	strb	r2, [r3, #0]
         FramDateChart.Month          = RtcDate.Month;
 8005686:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800568a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800568e:	785a      	ldrb	r2, [r3, #1]
 8005690:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005694:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8005698:	705a      	strb	r2, [r3, #1]
         FramDateChart.Year           = RtcDate.Year;
 800569a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800569e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80056a2:	78da      	ldrb	r2, [r3, #3]
 80056a4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80056a8:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80056ac:	709a      	strb	r2, [r3, #2]
         FramDateChart.StartFlashPage = PageCnt;
 80056ae:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80056b2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80056b6:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80056ba:	605a      	str	r2, [r3, #4]
         FramDateChart.Length         = 0;
 80056bc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80056c0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80056c4:	2200      	movs	r2, #0
 80056c6:	721a      	strb	r2, [r3, #8]
         FramDateChart.Crc            = CRC_INITIAL_VALUE;
 80056c8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80056cc:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80056d0:	f04f 32ff 	mov.w	r2, #4294967295
 80056d4:	60da      	str	r2, [r3, #12]
         FramDateChartCnt             = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 80056d6:	2104      	movs	r1, #4
 80056d8:	480f      	ldr	r0, [pc, #60]	; (8005718 <StartSaveMemoryTask+0x470>)
 80056da:	f7fe fe7a 	bl	80043d2 <fram_Read32>
 80056de:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
         fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 80056e2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	0052      	lsls	r2, r2, #1
 80056ec:	4413      	add	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3308      	adds	r3, #8
 80056f4:	b299      	uxth	r1, r3
 80056f6:	f107 020c 	add.w	r2, r7, #12
 80056fa:	230c      	movs	r3, #12
 80056fc:	4806      	ldr	r0, [pc, #24]	; (8005718 <StartSaveMemoryTask+0x470>)
 80056fe:	f7fe feed 	bl	80044dc <fram_Write>
         Cnt = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
         osMutexRelease(SPI1MutexHandle);
 8005708:	4b02      	ldr	r3, [pc, #8]	; (8005714 <StartSaveMemoryTask+0x46c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4618      	mov	r0, r3
 800570e:	f00d fa2c 	bl	8012b6a <osMutexRelease>
 8005712:	e00d      	b.n	8005730 <StartSaveMemoryTask+0x488>
 8005714:	20003e0c 	.word	0x20003e0c
 8005718:	20003da8 	.word	0x20003da8
 800571c:	20003dfc 	.word	0x20003dfc
 8005720:	20003e1c 	.word	0x20003e1c
 8005724:	20003f48 	.word	0x20003f48
 8005728:	20003e24 	.word	0x20003e24
 800572c:	20003d98 	.word	0x20003d98
      }
      Pv.Record[Cnt].ExternalHumidity    = _Mv.ExtHumidity;
 8005730:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005734:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005738:	6859      	ldr	r1, [r3, #4]
 800573a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800573e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8005742:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8005746:	4613      	mov	r3, r2
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4403      	add	r3, r0
 8005750:	3318      	adds	r3, #24
 8005752:	6019      	str	r1, [r3, #0]
      Pv.Record[Cnt].ExternalPM1         = _Mv.ExtPM1;
 8005754:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005758:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800575c:	8a98      	ldrh	r0, [r3, #20]
 800575e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005762:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8005766:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800576a:	4613      	mov	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	330a      	adds	r3, #10
 8005776:	4602      	mov	r2, r0
 8005778:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].ExternalPM10        = _Mv.ExtPM10;
 800577a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800577e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005782:	8b18      	ldrh	r0, [r3, #24]
 8005784:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005788:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 800578c:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8005790:	4613      	mov	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	330e      	adds	r3, #14
 800579c:	4602      	mov	r2, r0
 800579e:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].ExternalPM25        = _Mv.ExtPM25;
 80057a0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80057a4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80057a8:	8ad8      	ldrh	r0, [r3, #22]
 80057aa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80057ae:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80057b2:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80057b6:	4613      	mov	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	330c      	adds	r3, #12
 80057c2:	4602      	mov	r2, r0
 80057c4:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].ExternalTemperature = _Mv.ExtTemperature;
 80057c6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80057ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80057ce:	6819      	ldr	r1, [r3, #0]
 80057d0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80057d4:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80057d8:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80057dc:	4613      	mov	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	1a9b      	subs	r3, r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4403      	add	r3, r0
 80057e6:	3314      	adds	r3, #20
 80057e8:	6019      	str	r1, [r3, #0]
      Pv.Record[Cnt].Hour                = RtcTime.Hours;
 80057ea:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80057ee:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80057f2:	7818      	ldrb	r0, [r3, #0]
 80057f4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80057f8:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80057fc:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8005800:	4613      	mov	r3, r2
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	1a9b      	subs	r3, r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	3303      	adds	r3, #3
 800580c:	4602      	mov	r2, r0
 800580e:	701a      	strb	r2, [r3, #0]
      Pv.Record[Cnt].InternalPM1         = _Mv.InternalPM1;
 8005810:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005814:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005818:	8b58      	ldrh	r0, [r3, #26]
 800581a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800581e:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8005822:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8005826:	4613      	mov	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	1a9b      	subs	r3, r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	440b      	add	r3, r1
 8005830:	3304      	adds	r3, #4
 8005832:	4602      	mov	r2, r0
 8005834:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].InternalPM10        = _Mv.InternalPM10;
 8005836:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800583a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800583e:	8bd8      	ldrh	r0, [r3, #30]
 8005840:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005844:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8005848:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800584c:	4613      	mov	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	3308      	adds	r3, #8
 8005858:	4602      	mov	r2, r0
 800585a:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].InternalPM25        = _Mv.InternalPM25;
 800585c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005860:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005864:	8b98      	ldrh	r0, [r3, #28]
 8005866:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800586a:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 800586e:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8005872:	4613      	mov	r3, r2
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	1a9b      	subs	r3, r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	440b      	add	r3, r1
 800587c:	3306      	adds	r3, #6
 800587e:	4602      	mov	r2, r0
 8005880:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].Minute              = RtcTime.Minutes;
 8005882:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005886:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800588a:	7858      	ldrb	r0, [r3, #1]
 800588c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005890:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8005894:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8005898:	4613      	mov	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	3302      	adds	r3, #2
 80058a4:	4602      	mov	r2, r0
 80058a6:	701a      	strb	r2, [r3, #0]
      Pv.Record[Cnt].Pressure            = _Mv.Pressure;
 80058a8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80058ac:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80058b0:	6919      	ldr	r1, [r3, #16]
 80058b2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80058b6:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80058ba:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80058be:	4613      	mov	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4403      	add	r3, r0
 80058c8:	3310      	adds	r3, #16
 80058ca:	6019      	str	r1, [r3, #0]
      Pv.Record[Cnt].Reserved            = Cnt;
 80058cc:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80058d0:	b2d8      	uxtb	r0, r3
 80058d2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80058d6:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80058da:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80058de:	4613      	mov	r3, r2
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	1a9b      	subs	r3, r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	440b      	add	r3, r1
 80058e8:	4602      	mov	r2, r0
 80058ea:	701a      	strb	r2, [r3, #0]
      Pv.Record[Cnt].Second              = RtcTime.Seconds;
 80058ec:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80058f0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80058f4:	7898      	ldrb	r0, [r3, #2]
 80058f6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80058fa:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80058fe:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8005902:	4613      	mov	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	1a9b      	subs	r3, r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	3301      	adds	r3, #1
 800590e:	4602      	mov	r2, r0
 8005910:	701a      	strb	r2, [r3, #0]
      Cnt++;
 8005912:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8005916:	3301      	adds	r3, #1
 8005918:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
      if(Cnt == 9)
 800591c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8005920:	2b09      	cmp	r3, #9
 8005922:	f040 808a 	bne.w	8005a3a <StartSaveMemoryTask+0x792>
      {
         Cnt        = 0;
 8005926:	2300      	movs	r3, #0
 8005928:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
         Pv.PageCRC = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 800592c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8005930:	461a      	mov	r2, r3
 8005932:	21fc      	movs	r1, #252	; 0xfc
 8005934:	f04f 30ff 	mov.w	r0, #4294967295
 8005938:	f7fe f85e 	bl	80039f8 <Crc>
 800593c:	4602      	mov	r2, r0
 800593e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005942:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005946:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800594a:	4b3e      	ldr	r3, [pc, #248]	; (8005a44 <StartSaveMemoryTask+0x79c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f04f 31ff 	mov.w	r1, #4294967295
 8005952:	4618      	mov	r0, r3
 8005954:	f00d f8be 	bl	8012ad4 <osMutexAcquire>
         PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8005958:	2100      	movs	r1, #0
 800595a:	483b      	ldr	r0, [pc, #236]	; (8005a48 <StartSaveMemoryTask+0x7a0>)
 800595c:	f7fe fd39 	bl	80043d2 <fram_Read32>
 8005960:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
         flash_WritePage(&Flash, PageCnt, &Pv);
 8005964:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8005968:	461a      	mov	r2, r3
 800596a:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 800596e:	4837      	ldr	r0, [pc, #220]	; (8005a4c <StartSaveMemoryTask+0x7a4>)
 8005970:	f7fe fc3d 	bl	80041ee <flash_WritePage>
         flash_ReadPage(&Flash, PageCnt, &ConfirmPv);
 8005974:	f107 031c 	add.w	r3, r7, #28
 8005978:	461a      	mov	r2, r3
 800597a:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 800597e:	4833      	ldr	r0, [pc, #204]	; (8005a4c <StartSaveMemoryTask+0x7a4>)
 8005980:	f7fe fc6b 	bl	800425a <flash_ReadPage>
         if(Pv.PageCRC == ConfirmPv.PageCRC)
 8005984:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005988:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800598c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8005990:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8005994:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005998:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800599c:	429a      	cmp	r2, r3
 800599e:	d147      	bne.n	8005a30 <StartSaveMemoryTask+0x788>
         {
            fram_Increment32(&Fram, LAST_PAGE_NUMBER_ADDR);
 80059a0:	2100      	movs	r1, #0
 80059a2:	4829      	ldr	r0, [pc, #164]	; (8005a48 <StartSaveMemoryTask+0x7a0>)
 80059a4:	f7fe fd51 	bl	800444a <fram_Increment32>
            PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 80059a8:	2100      	movs	r1, #0
 80059aa:	4827      	ldr	r0, [pc, #156]	; (8005a48 <StartSaveMemoryTask+0x7a0>)
 80059ac:	f7fe fd11 	bl	80043d2 <fram_Read32>
 80059b0:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
            FramDateChart.Length++;
 80059b4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80059b8:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80059bc:	7a1b      	ldrb	r3, [r3, #8]
 80059be:	3301      	adds	r3, #1
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80059c6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80059ca:	721a      	strb	r2, [r3, #8]
            FramDateChart.Crc = Crc(FramDateChart.Crc, 256, &Pv);
 80059cc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80059d0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80059da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fe f80a 	bl	80039f8 <Crc>
 80059e4:	4602      	mov	r2, r0
 80059e6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80059ea:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80059ee:	60da      	str	r2, [r3, #12]
            FramDateChartCnt  = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 80059f0:	2104      	movs	r1, #4
 80059f2:	4815      	ldr	r0, [pc, #84]	; (8005a48 <StartSaveMemoryTask+0x7a0>)
 80059f4:	f7fe fced 	bl	80043d2 <fram_Read32>
 80059f8:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
            fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 80059fc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	0052      	lsls	r2, r2, #1
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	b299      	uxth	r1, r3
 8005a10:	f107 020c 	add.w	r2, r7, #12
 8005a14:	230c      	movs	r3, #12
 8005a16:	480c      	ldr	r0, [pc, #48]	; (8005a48 <StartSaveMemoryTask+0x7a0>)
 8005a18:	f7fe fd60 	bl	80044dc <fram_Write>
            Memory_ClearBuffer(&ConfirmPv);
 8005a1c:	f107 031c 	add.w	r3, r7, #28
 8005a20:	4618      	mov	r0, r3
 8005a22:	f001 fd4b 	bl	80074bc <Memory_ClearBuffer>
            Memory_ClearBuffer(&Pv);
 8005a26:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f001 fd46 	bl	80074bc <Memory_ClearBuffer>
         }
         osMutexRelease(SPI1MutexHandle);
 8005a30:	4b04      	ldr	r3, [pc, #16]	; (8005a44 <StartSaveMemoryTask+0x79c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f00d f898 	bl	8012b6a <osMutexRelease>
      }
      osDelay(1);
 8005a3a:	2001      	movs	r0, #1
 8005a3c:	f00c fe2e 	bl	801269c <osDelay>
      osMessageQueueGet(DataToSaveQueueHandle, &_Mv, 0, osWaitForever);
 8005a40:	e571      	b.n	8005526 <StartSaveMemoryTask+0x27e>
 8005a42:	bf00      	nop
 8005a44:	20003e0c 	.word	0x20003e0c
 8005a48:	20003da8 	.word	0x20003da8
 8005a4c:	20003d98 	.word	0x20003d98

08005a50 <StartChartTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartChartTask */
void StartChartTask(void *argument)
{
 8005a50:	b5b0      	push	{r4, r5, r7, lr}
 8005a52:	f5ad 5da3 	sub.w	sp, sp, #5216	; 0x1460
 8005a56:	b084      	sub	sp, #16
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8005a5e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8005a62:	6018      	str	r0, [r3, #0]
   /* USER CODE BEGIN StartChartTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005a64:	4bb2      	ldr	r3, [pc, #712]	; (8005d30 <StartChartTask+0x2e0>)
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	2102      	movs	r1, #2
 8005a70:	f00c ff44 	bl	80128fc <osEventFlagsWait>
   float FloatingPointType[400]        = { 0 };
 8005a74:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005a78:	f103 0308 	add.w	r3, r3, #8
 8005a7c:	f2a3 63ac 	subw	r3, r3, #1708	; 0x6ac
 8005a80:	4618      	mov	r0, r3
 8005a82:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8005a86:	461a      	mov	r2, r3
 8005a88:	2100      	movs	r1, #0
 8005a8a:	f010 fd91 	bl	80165b0 <memset>
   uint16_t IntegerType[400]           = { 0 };
 8005a8e:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005a92:	f103 0308 	add.w	r3, r3, #8
 8005a96:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	f010 fd84 	bl	80165b0 <memset>
   uint8_t Hour[400]                   = { 0 };
 8005aa8:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005aac:	f103 0308 	add.w	r3, r3, #8
 8005ab0:	f6a3 335c 	subw	r3, r3, #2908	; 0xb5c
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8005abe:	2100      	movs	r1, #0
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f010 fd75 	bl	80165b0 <memset>
   uint8_t Minute[400]                 = { 0 };
 8005ac6:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005aca:	f103 0308 	add.w	r3, r3, #8
 8005ace:	f6a3 43ec 	subw	r3, r3, #3308	; 0xcec
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8005adc:	2100      	movs	r1, #0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f010 fd66 	bl	80165b0 <memset>
   ChartDateAndType_TypeDef Cda        = { 0 };
 8005ae4:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005ae8:	f103 0308 	add.w	r3, r3, #8
 8005aec:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	809a      	strh	r2, [r3, #4]
   uint8_t FramDataChartExistFlag      = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	f507 52a3 	add.w	r2, r7, #5216	; 0x1460
 8005afc:	f102 0207 	add.w	r2, r2, #7
 8005b00:	7013      	strb	r3, [r2, #0]
   FramDateChart_TypeDef FramDateChart = { 0 };
 8005b02:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005b06:	f103 0308 	add.w	r3, r3, #8
 8005b0a:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 8005b0e:	461a      	mov	r2, r3
 8005b10:	2300      	movs	r3, #0
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	6053      	str	r3, [r2, #4]
 8005b16:	6093      	str	r3, [r2, #8]
 8005b18:	60d3      	str	r3, [r2, #12]
   PageVariable_TypeDef Pv             = { 0 };
 8005b1a:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005b1e:	f103 0308 	add.w	r3, r3, #8
 8005b22:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8005b26:	4618      	mov	r0, r3
 8005b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	2100      	movs	r1, #0
 8005b30:	f010 fd3e 	bl	80165b0 <memset>
   uint16_t Y_Axis[400]                = { 0 };
 8005b34:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8005b38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005b42:	461a      	mov	r2, r3
 8005b44:	2100      	movs	r1, #0
 8005b46:	f010 fd33 	bl	80165b0 <memset>
   uint16_t X_Axis[400]                = { 0 };
 8005b4a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8005b4e:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8005b52:	4618      	mov	r0, r3
 8005b54:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005b58:	461a      	mov	r2, r3
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	f010 fd28 	bl	80165b0 <memset>
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(ChartQueueHandle, &Cda, 0, osWaitForever);
 8005b60:	4b74      	ldr	r3, [pc, #464]	; (8005d34 <StartChartTask+0x2e4>)
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	f207 7174 	addw	r1, r7, #1908	; 0x774
 8005b68:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f00d f90d 	bl	8012d8c <osMessageQueueGet>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8005b72:	4b71      	ldr	r3, [pc, #452]	; (8005d38 <StartChartTask+0x2e8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f04f 31ff 	mov.w	r1, #4294967295
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f00c ffaa 	bl	8012ad4 <osMutexAcquire>
      e_papier_clear();
 8005b80:	f7fe f9aa 	bl	8003ed8 <e_papier_clear>
      GFX_DrawLine(63, 50, 63, 281, BLACK, E_PAPIER);
 8005b84:	2301      	movs	r3, #1
 8005b86:	9301      	str	r3, [sp, #4]
 8005b88:	2300      	movs	r3, #0
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	f240 1319 	movw	r3, #281	; 0x119
 8005b90:	223f      	movs	r2, #63	; 0x3f
 8005b92:	2132      	movs	r1, #50	; 0x32
 8005b94:	203f      	movs	r0, #63	; 0x3f
 8005b96:	f7fb fcad 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 281, 399, 281, BLACK, E_PAPIER);
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	9301      	str	r3, [sp, #4]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	f240 1319 	movw	r3, #281	; 0x119
 8005ba6:	f240 128f 	movw	r2, #399	; 0x18f
 8005baa:	f240 1119 	movw	r1, #281	; 0x119
 8005bae:	2028      	movs	r0, #40	; 0x28
 8005bb0:	f7fb fca0 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 223, 399, 223, BLACK, E_PAPIER);
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	23df      	movs	r3, #223	; 0xdf
 8005bbe:	f240 128f 	movw	r2, #399	; 0x18f
 8005bc2:	21df      	movs	r1, #223	; 0xdf
 8005bc4:	2028      	movs	r0, #40	; 0x28
 8005bc6:	f7fb fc95 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 165, 399, 165, BLACK, E_PAPIER);
 8005bca:	2301      	movs	r3, #1
 8005bcc:	9301      	str	r3, [sp, #4]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	23a5      	movs	r3, #165	; 0xa5
 8005bd4:	f240 128f 	movw	r2, #399	; 0x18f
 8005bd8:	21a5      	movs	r1, #165	; 0xa5
 8005bda:	2028      	movs	r0, #40	; 0x28
 8005bdc:	f7fb fc8a 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 108, 399, 108, BLACK, E_PAPIER);
 8005be0:	2301      	movs	r3, #1
 8005be2:	9301      	str	r3, [sp, #4]
 8005be4:	2300      	movs	r3, #0
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	236c      	movs	r3, #108	; 0x6c
 8005bea:	f240 128f 	movw	r2, #399	; 0x18f
 8005bee:	216c      	movs	r1, #108	; 0x6c
 8005bf0:	2028      	movs	r0, #40	; 0x28
 8005bf2:	f7fb fc7f 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 50, 399, 50, BLACK, E_PAPIER);
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	9301      	str	r3, [sp, #4]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	2332      	movs	r3, #50	; 0x32
 8005c00:	f240 128f 	movw	r2, #399	; 0x18f
 8005c04:	2132      	movs	r1, #50	; 0x32
 8005c06:	2028      	movs	r0, #40	; 0x28
 8005c08:	f7fb fc74 	bl	80014f4 <GFX_DrawLine>
      for(int i = 1; i < 24; i++)
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f507 52a3 	add.w	r2, r7, #5216	; 0x1460
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	e022      	b.n	8005c5c <StartChartTask+0x20c>
      {
         GFX_DrawLine(64 + i * 14, 281, 64 + i * 14, 270, BLACK, E_PAPIER);
 8005c16:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	1a9b      	subs	r3, r3, r2
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005c28:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	1a9b      	subs	r3, r3, r2
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8005c46:	f240 1119 	movw	r1, #281	; 0x119
 8005c4a:	f7fb fc53 	bl	80014f4 <GFX_DrawLine>
      for(int i = 1; i < 24; i++)
 8005c4e:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3301      	adds	r3, #1
 8005c56:	f507 52a3 	add.w	r2, r7, #5216	; 0x1460
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b17      	cmp	r3, #23
 8005c64:	ddd7      	ble.n	8005c16 <StartChartTask+0x1c6>
      }
      for(int i = 1; i < 24; i++)
 8005c66:	2301      	movs	r3, #1
 8005c68:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8005c6c:	f102 021c 	add.w	r2, r2, #28
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	e02d      	b.n	8005cd0 <StartChartTask+0x280>
      {
         char Temp[3];
         sprintf(Temp, "%d", i);
 8005c74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c78:	3b08      	subs	r3, #8
 8005c7a:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8005c7e:	f102 021c 	add.w	r2, r2, #28
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	492d      	ldr	r1, [pc, #180]	; (8005d3c <StartChartTask+0x2ec>)
 8005c86:	4618      	mov	r0, r3
 8005c88:	f004 fb12 	bl	800a2b0 <sprintf_>
         GFX_DrawString(64 + i * 14 - 5, 290, Temp, BLACK, 1, E_PAPIER);
 8005c8c:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005c90:	f103 031c 	add.w	r3, r3, #28
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	4613      	mov	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 8005ca2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ca6:	3a08      	subs	r2, #8
 8005ca8:	2301      	movs	r3, #1
 8005caa:	9301      	str	r3, [sp, #4]
 8005cac:	2301      	movs	r3, #1
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f44f 7191 	mov.w	r1, #290	; 0x122
 8005cb6:	f7fb fafd 	bl	80012b4 <GFX_DrawString>
      for(int i = 1; i < 24; i++)
 8005cba:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005cbe:	f103 031c 	add.w	r3, r3, #28
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8005cca:	f102 021c 	add.w	r2, r2, #28
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005cd4:	f103 031c 	add.w	r3, r3, #28
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b17      	cmp	r3, #23
 8005cdc:	ddca      	ble.n	8005c74 <StartChartTask+0x224>
      }
      osMutexRelease(E_PAPIERMutexHandle);
 8005cde:	4b16      	ldr	r3, [pc, #88]	; (8005d38 <StartChartTask+0x2e8>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f00c ff41 	bl	8012b6a <osMutexRelease>
      if(Cda.ChartType == PRESSURE || Cda.ChartType == EXTERNAL_TEMPERATURE || Cda.ChartType == EXTERNAL_HUMIDITY)
 8005ce8:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005cec:	f103 0308 	add.w	r3, r3, #8
 8005cf0:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 8005cf4:	791b      	ldrb	r3, [r3, #4]
 8005cf6:	2b06      	cmp	r3, #6
 8005cf8:	d012      	beq.n	8005d20 <StartChartTask+0x2d0>
 8005cfa:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005cfe:	f103 0308 	add.w	r3, r3, #8
 8005d02:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 8005d06:	791b      	ldrb	r3, [r3, #4]
 8005d08:	2b07      	cmp	r3, #7
 8005d0a:	d009      	beq.n	8005d20 <StartChartTask+0x2d0>
 8005d0c:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005d10:	f103 0308 	add.w	r3, r3, #8
 8005d14:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 8005d18:	791b      	ldrb	r3, [r3, #4]
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	f040 858b 	bne.w	8006836 <StartChartTask+0xde6>
      {
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8005d20:	2308      	movs	r3, #8
 8005d22:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8005d26:	f102 0218 	add.w	r2, r2, #24
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	e063      	b.n	8005df6 <StartChartTask+0x3a6>
 8005d2e:	bf00      	nop
 8005d30:	20003e24 	.word	0x20003e24
 8005d34:	20003df8 	.word	0x20003df8
 8005d38:	20003e10 	.word	0x20003e10
 8005d3c:	0801c394 	.word	0x0801c394
         {
            osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8005d40:	4b91      	ldr	r3, [pc, #580]	; (8005f88 <StartChartTask+0x538>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f04f 31ff 	mov.w	r1, #4294967295
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f00c fec3 	bl	8012ad4 <osMutexAcquire>
            fram_Read(&Fram, i, &FramDateChart, 12);
 8005d4e:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005d52:	f103 0318 	add.w	r3, r3, #24
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	b299      	uxth	r1, r3
 8005d5a:	f207 7264 	addw	r2, r7, #1892	; 0x764
 8005d5e:	230c      	movs	r3, #12
 8005d60:	488a      	ldr	r0, [pc, #552]	; (8005f8c <StartChartTask+0x53c>)
 8005d62:	f7fe fbea 	bl	800453a <fram_Read>
            osMutexRelease(SPI1MutexHandle);
 8005d66:	4b88      	ldr	r3, [pc, #544]	; (8005f88 <StartChartTask+0x538>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f00c fefd 	bl	8012b6a <osMutexRelease>
            if(FramDateChart.Date == Cda.Date && FramDateChart.Month == Cda.Month && FramDateChart.Year == Cda.Year)
 8005d70:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005d74:	f103 0308 	add.w	r3, r3, #8
 8005d78:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 8005d7c:	781a      	ldrb	r2, [r3, #0]
 8005d7e:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005d82:	f103 0308 	add.w	r3, r3, #8
 8005d86:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 8005d8a:	78db      	ldrb	r3, [r3, #3]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d127      	bne.n	8005de0 <StartChartTask+0x390>
 8005d90:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005d94:	f103 0308 	add.w	r3, r3, #8
 8005d98:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 8005d9c:	785a      	ldrb	r2, [r3, #1]
 8005d9e:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005da2:	f103 0308 	add.w	r3, r3, #8
 8005da6:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 8005daa:	789b      	ldrb	r3, [r3, #2]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d117      	bne.n	8005de0 <StartChartTask+0x390>
 8005db0:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005db4:	f103 0308 	add.w	r3, r3, #8
 8005db8:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 8005dbc:	789b      	ldrb	r3, [r3, #2]
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005dc4:	f103 0308 	add.w	r3, r3, #8
 8005dc8:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d106      	bne.n	8005de0 <StartChartTask+0x390>
            {
               FramDataChartExistFlag = 1;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	f507 52a3 	add.w	r2, r7, #5216	; 0x1460
 8005dd8:	f102 0207 	add.w	r2, r2, #7
 8005ddc:	7013      	strb	r3, [r2, #0]
               break;
 8005dde:	e013      	b.n	8005e08 <StartChartTask+0x3b8>
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8005de0:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005de4:	f103 0318 	add.w	r3, r3, #24
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	330c      	adds	r3, #12
 8005dec:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8005df0:	f102 0218 	add.w	r2, r2, #24
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005dfa:	f103 0318 	add.w	r3, r3, #24
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f241 7277 	movw	r2, #6007	; 0x1777
 8005e04:	4293      	cmp	r3, r2
 8005e06:	dd9b      	ble.n	8005d40 <StartChartTask+0x2f0>
            }
         }
         if(FramDataChartExistFlag == 1)
 8005e08:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005e0c:	f103 0307 	add.w	r3, r3, #7
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	f040 8154 	bne.w	80060c0 <StartChartTask+0x670>
         {
            FramDataChartExistFlag = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f507 52a3 	add.w	r2, r7, #5216	; 0x1460
 8005e1e:	f102 0207 	add.w	r2, r2, #7
 8005e22:	7013      	strb	r3, [r2, #0]
            for(int i = 0; i < FramDateChart.Length; i++)
 8005e24:	2300      	movs	r3, #0
 8005e26:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8005e2a:	f102 0214 	add.w	r2, r2, #20
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	e136      	b.n	80060a0 <StartChartTask+0x650>
            {
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8005e32:	4b55      	ldr	r3, [pc, #340]	; (8005f88 <StartChartTask+0x538>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f04f 31ff 	mov.w	r1, #4294967295
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f00c fe4a 	bl	8012ad4 <osMutexAcquire>
               flash_ReadPage(&Flash, i + FramDateChart.StartFlashPage, &Pv);
 8005e40:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005e44:	f103 0308 	add.w	r3, r3, #8
 8005e48:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005e52:	f103 0314 	add.w	r3, r3, #20
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f207 6264 	addw	r2, r7, #1636	; 0x664
 8005e5e:	4619      	mov	r1, r3
 8005e60:	484b      	ldr	r0, [pc, #300]	; (8005f90 <StartChartTask+0x540>)
 8005e62:	f7fe f9fa 	bl	800425a <flash_ReadPage>
               osMutexRelease(SPI1MutexHandle);
 8005e66:	4b48      	ldr	r3, [pc, #288]	; (8005f88 <StartChartTask+0x538>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f00c fe7d 	bl	8012b6a <osMutexRelease>
               uint32_t TempCrc = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 8005e70:	f207 6364 	addw	r3, r7, #1636	; 0x664
 8005e74:	461a      	mov	r2, r3
 8005e76:	21fc      	movs	r1, #252	; 0xfc
 8005e78:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7c:	f7fd fdbc 	bl	80039f8 <Crc>
 8005e80:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8005e84:	f103 0304 	add.w	r3, r3, #4
 8005e88:	6018      	str	r0, [r3, #0]
               if(TempCrc == Pv.PageCRC)
 8005e8a:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005e8e:	f103 0308 	add.w	r3, r3, #8
 8005e92:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8005e96:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005e9a:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8005e9e:	f102 0204 	add.w	r2, r2, #4
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	f040 80f0 	bne.w	800608a <StartChartTask+0x63a>
               {
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8005eaa:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005eae:	f103 0314 	add.w	r3, r3, #20
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	4413      	add	r3, r2
 8005eba:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8005ec6:	f102 0210 	add.w	r2, r2, #16
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	e0d5      	b.n	800607a <StartChartTask+0x62a>
                  {
                     if(Cda.ChartType == PRESSURE)
 8005ece:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005ed2:	f103 0308 	add.w	r3, r3, #8
 8005ed6:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 8005eda:	791b      	ldrb	r3, [r3, #4]
 8005edc:	2b06      	cmp	r3, #6
 8005ede:	d124      	bne.n	8005f2a <StartChartTask+0x4da>
                     {
                        FloatingPointType[j + k] = Pv.Record[k].Pressure;
 8005ee0:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005eea:	f103 0310 	add.w	r3, r3, #16
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	18d0      	adds	r0, r2, r3
 8005ef2:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005ef6:	f103 0308 	add.w	r3, r3, #8
 8005efa:	f6a3 6104 	subw	r1, r3, #3588	; 0xe04
 8005efe:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005f02:	f103 0310 	add.w	r3, r3, #16
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	1a9b      	subs	r3, r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	440b      	add	r3, r1
 8005f12:	3310      	adds	r3, #16
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005f1a:	f103 0308 	add.w	r3, r3, #8
 8005f1e:	f2a3 61ac 	subw	r1, r3, #1708	; 0x6ac
 8005f22:	0083      	lsls	r3, r0, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	e058      	b.n	8005fdc <StartChartTask+0x58c>
                     }
                     else if(Cda.ChartType == EXTERNAL_TEMPERATURE)
 8005f2a:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005f2e:	f103 0308 	add.w	r3, r3, #8
 8005f32:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 8005f36:	791b      	ldrb	r3, [r3, #4]
 8005f38:	2b07      	cmp	r3, #7
 8005f3a:	d12b      	bne.n	8005f94 <StartChartTask+0x544>
                     {
                        FloatingPointType[j + k] = Pv.Record[k].ExternalTemperature;
 8005f3c:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005f46:	f103 0310 	add.w	r3, r3, #16
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	18d0      	adds	r0, r2, r3
 8005f4e:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005f52:	f103 0308 	add.w	r3, r3, #8
 8005f56:	f6a3 6104 	subw	r1, r3, #3588	; 0xe04
 8005f5a:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005f5e:	f103 0310 	add.w	r3, r3, #16
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	4613      	mov	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	3314      	adds	r3, #20
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005f76:	f103 0308 	add.w	r3, r3, #8
 8005f7a:	f2a3 61ac 	subw	r1, r3, #1708	; 0x6ac
 8005f7e:	0083      	lsls	r3, r0, #2
 8005f80:	440b      	add	r3, r1
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	e02a      	b.n	8005fdc <StartChartTask+0x58c>
 8005f86:	bf00      	nop
 8005f88:	20003e0c 	.word	0x20003e0c
 8005f8c:	20003da8 	.word	0x20003da8
 8005f90:	20003d98 	.word	0x20003d98
                     }
                     else
                     {
                        FloatingPointType[j + k] = Pv.Record[k].ExternalHumidity;
 8005f94:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005f9e:	f103 0310 	add.w	r3, r3, #16
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	18d0      	adds	r0, r2, r3
 8005fa6:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005faa:	f103 0308 	add.w	r3, r3, #8
 8005fae:	f6a3 6104 	subw	r1, r3, #3588	; 0xe04
 8005fb2:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005fb6:	f103 0310 	add.w	r3, r3, #16
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	1a9b      	subs	r3, r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	3318      	adds	r3, #24
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005fce:	f103 0308 	add.w	r3, r3, #8
 8005fd2:	f2a3 61ac 	subw	r1, r3, #1708	; 0x6ac
 8005fd6:	0083      	lsls	r3, r0, #2
 8005fd8:	440b      	add	r3, r1
 8005fda:	601a      	str	r2, [r3, #0]
                     }
                     Minute[j + k] = Pv.Record[k].Minute;
 8005fdc:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005fe6:	f103 0310 	add.w	r3, r3, #16
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	18d1      	adds	r1, r2, r3
 8005fee:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8005ff2:	f103 0308 	add.w	r3, r3, #8
 8005ff6:	f6a3 6004 	subw	r0, r3, #3588	; 0xe04
 8005ffa:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005ffe:	f103 0310 	add.w	r3, r3, #16
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	1a9b      	subs	r3, r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4403      	add	r3, r0
 800600e:	3302      	adds	r3, #2
 8006010:	781a      	ldrb	r2, [r3, #0]
 8006012:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006016:	f103 0308 	add.w	r3, r3, #8
 800601a:	f6a3 43ec 	subw	r3, r3, #3308	; 0xcec
 800601e:	545a      	strb	r2, [r3, r1]
                     Hour[j + k]   = Pv.Record[k].Hour;
 8006020:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 800602a:	f103 0310 	add.w	r3, r3, #16
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	18d1      	adds	r1, r2, r3
 8006032:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006036:	f103 0308 	add.w	r3, r3, #8
 800603a:	f6a3 6004 	subw	r0, r3, #3588	; 0xe04
 800603e:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8006042:	f103 0310 	add.w	r3, r3, #16
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	4613      	mov	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4403      	add	r3, r0
 8006052:	3303      	adds	r3, #3
 8006054:	781a      	ldrb	r2, [r3, #0]
 8006056:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 800605a:	f103 0308 	add.w	r3, r3, #8
 800605e:	f6a3 335c 	subw	r3, r3, #2908	; 0xb5c
 8006062:	545a      	strb	r2, [r3, r1]
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8006064:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8006068:	f103 0310 	add.w	r3, r3, #16
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3301      	adds	r3, #1
 8006070:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8006074:	f102 0210 	add.w	r2, r2, #16
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 800607e:	f103 0310 	add.w	r3, r3, #16
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b08      	cmp	r3, #8
 8006086:	f77f af22 	ble.w	8005ece <StartChartTask+0x47e>
            for(int i = 0; i < FramDateChart.Length; i++)
 800608a:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 800608e:	f103 0314 	add.w	r3, r3, #20
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3301      	adds	r3, #1
 8006096:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 800609a:	f102 0214 	add.w	r2, r2, #20
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 80060a4:	f103 0308 	add.w	r3, r3, #8
 80060a8:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 80060ac:	7a1b      	ldrb	r3, [r3, #8]
 80060ae:	461a      	mov	r2, r3
 80060b0:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 80060b4:	f103 0314 	add.w	r3, r3, #20
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4293      	cmp	r3, r2
 80060bc:	f6ff aeb9 	blt.w	8005e32 <StartChartTask+0x3e2>
                  }
               }
            }
         }
         float _Max = 0, _Min = 10000000.0;
 80060c0:	f04f 0300 	mov.w	r3, #0
 80060c4:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80060c8:	f102 020c 	add.w	r2, r2, #12
 80060cc:	6013      	str	r3, [r2, #0]
 80060ce:	4b8d      	ldr	r3, [pc, #564]	; (8006304 <StartChartTask+0x8b4>)
 80060d0:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80060d4:	f102 0208 	add.w	r2, r2, #8
 80060d8:	6013      	str	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 80060da:	2300      	movs	r3, #0
 80060dc:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80060e0:	f102 0204 	add.w	r2, r2, #4
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	e078      	b.n	80061da <StartChartTask+0x78a>
         {
            if(_Max < FloatingPointType[i])
 80060e8:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 80060ec:	f103 0308 	add.w	r3, r3, #8
 80060f0:	f2a3 62ac 	subw	r2, r3, #1708	; 0x6ac
 80060f4:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 80060f8:	f103 0304 	add.w	r3, r3, #4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	edd3 7a00 	vldr	s15, [r3]
 8006106:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 800610a:	f103 030c 	add.w	r3, r3, #12
 800610e:	ed93 7a00 	vldr	s14, [r3]
 8006112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800611a:	d512      	bpl.n	8006142 <StartChartTask+0x6f2>
            {
               _Max = FloatingPointType[i];
 800611c:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006120:	f103 0308 	add.w	r3, r3, #8
 8006124:	f2a3 62ac 	subw	r2, r3, #1708	; 0x6ac
 8006128:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 800612c:	f103 0304 	add.w	r3, r3, #4
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 800613c:	f102 020c 	add.w	r2, r2, #12
 8006140:	6013      	str	r3, [r2, #0]
            }
            if(_Min > FloatingPointType[i] && FloatingPointType[i] != 0.0)
 8006142:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006146:	f103 0308 	add.w	r3, r3, #8
 800614a:	f2a3 62ac 	subw	r2, r3, #1708	; 0x6ac
 800614e:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8006152:	f103 0304 	add.w	r3, r3, #4
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	edd3 7a00 	vldr	s15, [r3]
 8006160:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8006164:	f103 0308 	add.w	r3, r3, #8
 8006168:	ed93 7a00 	vldr	s14, [r3]
 800616c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006174:	dd26      	ble.n	80061c4 <StartChartTask+0x774>
 8006176:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 800617a:	f103 0308 	add.w	r3, r3, #8
 800617e:	f2a3 62ac 	subw	r2, r3, #1708	; 0x6ac
 8006182:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8006186:	f103 0304 	add.w	r3, r3, #4
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	edd3 7a00 	vldr	s15, [r3]
 8006194:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619c:	d012      	beq.n	80061c4 <StartChartTask+0x774>
            {
               _Min = FloatingPointType[i];
 800619e:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 80061a2:	f103 0308 	add.w	r3, r3, #8
 80061a6:	f2a3 62ac 	subw	r2, r3, #1708	; 0x6ac
 80061aa:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 80061ae:	f103 0304 	add.w	r3, r3, #4
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80061be:	f102 0208 	add.w	r2, r2, #8
 80061c2:	6013      	str	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 80061c4:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 80061c8:	f103 0304 	add.w	r3, r3, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3301      	adds	r3, #1
 80061d0:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80061d4:	f102 0204 	add.w	r2, r2, #4
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 80061de:	f103 0308 	add.w	r3, r3, #8
 80061e2:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 80061e6:	7a1b      	ldrb	r3, [r3, #8]
 80061e8:	461a      	mov	r2, r3
 80061ea:	4613      	mov	r3, r2
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	4413      	add	r3, r2
 80061f0:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80061f4:	f102 0204 	add.w	r2, r2, #4
 80061f8:	6812      	ldr	r2, [r2, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	f6ff af74 	blt.w	80060e8 <StartChartTask+0x698>
            }
         }
         for(int i = 0; i < 400; i++)
 8006200:	2300      	movs	r3, #0
 8006202:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	e06f      	b.n	80062ea <StartChartTask+0x89a>
         {
            if(FloatingPointType[i] == 0)
 800620a:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 800620e:	f103 0308 	add.w	r3, r3, #8
 8006212:	f2a3 62ac 	subw	r2, r3, #1708	; 0x6ac
 8006216:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	edd3 7a00 	vldr	s15, [r3]
 8006224:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622c:	d110      	bne.n	8006250 <StartChartTask+0x800>
            {
               FloatingPointType[i] = _Min;
 800622e:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006232:	f103 0308 	add.w	r3, r3, #8
 8006236:	f2a3 62ac 	subw	r2, r3, #1708	; 0x6ac
 800623a:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8006248:	f102 0208 	add.w	r2, r2, #8
 800624c:	6812      	ldr	r2, [r2, #0]
 800624e:	601a      	str	r2, [r3, #0]
            }
            Y_Axis[i] = (uint16_t)mapf(FloatingPointType[i], _Min, _Max, 20.0, 250.0);
 8006250:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006254:	f103 0308 	add.w	r3, r3, #8
 8006258:	f2a3 62ac 	subw	r2, r3, #1708	; 0x6ac
 800625c:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	edd3 7a00 	vldr	s15, [r3]
 800626a:	ed9f 2a27 	vldr	s4, [pc, #156]	; 8006308 <StartChartTask+0x8b8>
 800626e:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 8006272:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8006276:	f103 030c 	add.w	r3, r3, #12
 800627a:	ed93 1a00 	vldr	s2, [r3]
 800627e:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8006282:	f103 0308 	add.w	r3, r3, #8
 8006286:	edd3 0a00 	vldr	s1, [r3]
 800628a:	eeb0 0a67 	vmov.f32	s0, s15
 800628e:	f002 fa01 	bl	8008694 <mapf>
 8006292:	eef0 7a40 	vmov.f32	s15, s0
 8006296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800629a:	ee17 3a90 	vmov	r3, s15
 800629e:	b299      	uxth	r1, r3
 80062a0:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80062a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80062a8:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80062ac:	6812      	ldr	r2, [r2, #0]
 80062ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            Y_Axis[i] = 300 - Y_Axis[i];
 80062b2:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80062b6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80062ba:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80062be:	6812      	ldr	r2, [r2, #0]
 80062c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80062c4:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 80062c8:	b299      	uxth	r1, r3
 80062ca:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80062ce:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80062d2:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80062d6:	6812      	ldr	r2, [r2, #0]
 80062d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         for(int i = 0; i < 400; i++)
 80062dc:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3301      	adds	r3, #1
 80062e4:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80062f4:	db89      	blt.n	800620a <StartChartTask+0x7ba>
         }
         for(int i = 0; i < 400; i++)
 80062f6:	2300      	movs	r3, #0
 80062f8:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 80062fc:	f102 021c 	add.w	r2, r2, #28
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	e0ca      	b.n	800649a <StartChartTask+0xa4a>
 8006304:	4b189680 	.word	0x4b189680
 8006308:	437a0000 	.word	0x437a0000
         {
            if(Hour[i] != 0 && Minute[i] != 0)
 800630c:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006310:	f103 0308 	add.w	r3, r3, #8
 8006314:	f6a3 325c 	subw	r2, r3, #2908	; 0xb5c
 8006318:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 800631c:	f103 031c 	add.w	r3, r3, #28
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4413      	add	r3, r2
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 8092 	beq.w	8006450 <StartChartTask+0xa00>
 800632c:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006330:	f103 0308 	add.w	r3, r3, #8
 8006334:	f6a3 42ec 	subw	r2, r3, #3308	; 0xcec
 8006338:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 800633c:	f103 031c 	add.w	r3, r3, #28
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4413      	add	r3, r2
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 8082 	beq.w	8006450 <StartChartTask+0xa00>
            {
               X_Axis[i] = map(Hour[i] * 60 + Minute[i], Hour[i] * 60, (Hour[i] + 1) * 60, 64 + (Hour[i] * 14), 64 + ((Hour[i] + 1) * 14));
 800634c:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006350:	f103 0308 	add.w	r3, r3, #8
 8006354:	f6a3 325c 	subw	r2, r3, #2908	; 0xb5c
 8006358:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 800635c:	f103 031c 	add.w	r3, r3, #28
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4413      	add	r3, r2
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	4613      	mov	r3, r2
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4619      	mov	r1, r3
 8006372:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006376:	f103 0308 	add.w	r3, r3, #8
 800637a:	f6a3 42ec 	subw	r2, r3, #3308	; 0xcec
 800637e:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006382:	f103 031c 	add.w	r3, r3, #28
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4413      	add	r3, r2
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	440b      	add	r3, r1
 800638e:	4618      	mov	r0, r3
 8006390:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006394:	f103 0308 	add.w	r3, r3, #8
 8006398:	f6a3 325c 	subw	r2, r3, #2908	; 0xb5c
 800639c:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80063a0:	f103 031c 	add.w	r3, r3, #28
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4413      	add	r3, r2
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	4613      	mov	r3, r2
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	1a9b      	subs	r3, r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4619      	mov	r1, r3
 80063b6:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 80063ba:	f103 0308 	add.w	r3, r3, #8
 80063be:	f6a3 325c 	subw	r2, r3, #2908	; 0xb5c
 80063c2:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80063c6:	f103 031c 	add.w	r3, r3, #28
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4413      	add	r3, r2
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	4613      	mov	r3, r2
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	1a9b      	subs	r3, r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	461c      	mov	r4, r3
 80063dc:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 80063e0:	f103 0308 	add.w	r3, r3, #8
 80063e4:	f6a3 325c 	subw	r2, r3, #2908	; 0xb5c
 80063e8:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80063ec:	f103 031c 	add.w	r3, r3, #28
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4413      	add	r3, r2
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	4613      	mov	r3, r2
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	1a9b      	subs	r3, r3, r2
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	3340      	adds	r3, #64	; 0x40
 8006402:	461d      	mov	r5, r3
 8006404:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006408:	f103 0308 	add.w	r3, r3, #8
 800640c:	f6a3 325c 	subw	r2, r3, #2908	; 0xb5c
 8006410:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006414:	f103 031c 	add.w	r3, r3, #28
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4413      	add	r3, r2
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	4613      	mov	r3, r2
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	1a9b      	subs	r3, r3, r2
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	3340      	adds	r3, #64	; 0x40
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	462b      	mov	r3, r5
 800642e:	4622      	mov	r2, r4
 8006430:	f002 f95e 	bl	80086f0 <map>
 8006434:	4603      	mov	r3, r0
 8006436:	b299      	uxth	r1, r3
 8006438:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800643c:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8006440:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006444:	f102 021c 	add.w	r2, r2, #28
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800644e:	e019      	b.n	8006484 <StartChartTask+0xa34>
            }
            else if(X_Axis[i] == 0)
 8006450:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8006454:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8006458:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 800645c:	f102 021c 	add.w	r2, r2, #28
 8006460:	6812      	ldr	r2, [r2, #0]
 8006462:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10c      	bne.n	8006484 <StartChartTask+0xa34>
            {
               X_Axis[i] = 0xffff;
 800646a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800646e:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8006472:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006476:	f102 021c 	add.w	r2, r2, #28
 800647a:	6812      	ldr	r2, [r2, #0]
 800647c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006480:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         for(int i = 0; i < 400; i++)
 8006484:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006488:	f103 031c 	add.w	r3, r3, #28
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3301      	adds	r3, #1
 8006490:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006494:	f102 021c 	add.w	r2, r2, #28
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 800649e:	f103 031c 	add.w	r3, r3, #28
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80064a8:	f6ff af30 	blt.w	800630c <StartChartTask+0x8bc>
            }
         }
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80064ac:	4bcb      	ldr	r3, [pc, #812]	; (80067dc <StartChartTask+0xd8c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f04f 31ff 	mov.w	r1, #4294967295
 80064b4:	4618      	mov	r0, r3
 80064b6:	f00c fb0d 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 80064ba:	4bc9      	ldr	r3, [pc, #804]	; (80067e0 <StartChartTask+0xd90>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f04f 31ff 	mov.w	r1, #4294967295
 80064c2:	4618      	mov	r0, r3
 80064c4:	f00c fb06 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80064c8:	4bc6      	ldr	r3, [pc, #792]	; (80067e4 <StartChartTask+0xd94>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f04f 31ff 	mov.w	r1, #4294967295
 80064d0:	4618      	mov	r0, r3
 80064d2:	f00c faff 	bl	8012ad4 <osMutexAcquire>
         if(X_Axis[0] != 0xffff && X_Axis[1] != 0xffff)
 80064d6:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80064da:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d027      	beq.n	8006538 <StartChartTask+0xae8>
 80064e8:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80064ec:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 80064f0:	885b      	ldrh	r3, [r3, #2]
 80064f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d01e      	beq.n	8006538 <StartChartTask+0xae8>
         {
            GFX_DrawLine(X_Axis[0], Y_Axis[0], X_Axis[1], Y_Axis[1], BLACK, E_PAPIER);
 80064fa:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80064fe:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	4618      	mov	r0, r3
 8006506:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800650a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	4619      	mov	r1, r3
 8006512:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8006516:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800651a:	885b      	ldrh	r3, [r3, #2]
 800651c:	461a      	mov	r2, r3
 800651e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8006522:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006526:	885b      	ldrh	r3, [r3, #2]
 8006528:	461c      	mov	r4, r3
 800652a:	2301      	movs	r3, #1
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	2300      	movs	r3, #0
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	4623      	mov	r3, r4
 8006534:	f7fa ffde 	bl	80014f4 <GFX_DrawLine>
         }
         for(int i = 1; i < 399; i++)
 8006538:	2301      	movs	r3, #1
 800653a:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 800653e:	f102 0218 	add.w	r2, r2, #24
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	e063      	b.n	800660e <StartChartTask+0xbbe>
         {
            if(X_Axis[i + 1] != 0xffff && X_Axis[i] != 0xffff)
 8006546:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 800654a:	f103 0318 	add.w	r3, r3, #24
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8006556:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800655a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800655e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006562:	4293      	cmp	r3, r2
 8006564:	d048      	beq.n	80065f8 <StartChartTask+0xba8>
 8006566:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800656a:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800656e:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006572:	f102 0218 	add.w	r2, r2, #24
 8006576:	6812      	ldr	r2, [r2, #0]
 8006578:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800657c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006580:	4293      	cmp	r3, r2
 8006582:	d039      	beq.n	80065f8 <StartChartTask+0xba8>
            {
               GFX_DrawLine(X_Axis[i], Y_Axis[i], X_Axis[i + 1], Y_Axis[i + 1], BLACK, E_PAPIER);
 8006584:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8006588:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800658c:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006590:	f102 0218 	add.w	r2, r2, #24
 8006594:	6812      	ldr	r2, [r2, #0]
 8006596:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800659a:	4618      	mov	r0, r3
 800659c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80065a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80065a4:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 80065a8:	f102 0218 	add.w	r2, r2, #24
 80065ac:	6812      	ldr	r2, [r2, #0]
 80065ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80065b2:	4619      	mov	r1, r3
 80065b4:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80065b8:	f103 0318 	add.w	r3, r3, #24
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80065c4:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 80065c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80065cc:	461c      	mov	r4, r3
 80065ce:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80065d2:	f103 0318 	add.w	r3, r3, #24
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80065de:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80065e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80065e6:	461a      	mov	r2, r3
 80065e8:	2301      	movs	r3, #1
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	2300      	movs	r3, #0
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	4613      	mov	r3, r2
 80065f2:	4622      	mov	r2, r4
 80065f4:	f7fa ff7e 	bl	80014f4 <GFX_DrawLine>
         for(int i = 1; i < 399; i++)
 80065f8:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80065fc:	f103 0318 	add.w	r3, r3, #24
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006608:	f102 0218 	add.w	r2, r2, #24
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006612:	f103 0318 	add.w	r3, r3, #24
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 800661c:	dd93      	ble.n	8006546 <StartChartTask+0xaf6>
            }
         }
         char Temp[10];
         float TempDifferencje = _Max - _Min;
 800661e:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8006622:	f103 030c 	add.w	r3, r3, #12
 8006626:	ed93 7a00 	vldr	s14, [r3]
 800662a:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 800662e:	f103 0308 	add.w	r3, r3, #8
 8006632:	edd3 7a00 	vldr	s15, [r3]
 8006636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800663a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800663e:	f103 031c 	add.w	r3, r3, #28
 8006642:	edc3 7a00 	vstr	s15, [r3]
         sprintf(Temp, "%0.2f", (_Min + TempDifferencje / 4));
 8006646:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800664a:	f103 031c 	add.w	r3, r3, #28
 800664e:	edd3 7a00 	vldr	s15, [r3]
 8006652:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8006656:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800665a:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 800665e:	f103 0308 	add.w	r3, r3, #8
 8006662:	edd3 7a00 	vldr	s15, [r3]
 8006666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800666a:	ee17 0a90 	vmov	r0, s15
 800666e:	f7f9 ff83 	bl	8000578 <__aeabi_f2d>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800667a:	3814      	subs	r0, #20
 800667c:	495a      	ldr	r1, [pc, #360]	; (80067e8 <StartChartTask+0xd98>)
 800667e:	f003 fe17 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 218, Temp, BLACK, 1, E_PAPIER);
 8006682:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006686:	3a14      	subs	r2, #20
 8006688:	2301      	movs	r3, #1
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	2301      	movs	r3, #1
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	2300      	movs	r3, #0
 8006692:	21da      	movs	r1, #218	; 0xda
 8006694:	2000      	movs	r0, #0
 8006696:	f7fa fe0d 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", (_Min + TempDifferencje / 2));
 800669a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800669e:	f103 031c 	add.w	r3, r3, #28
 80066a2:	edd3 7a00 	vldr	s15, [r3]
 80066a6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80066aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80066ae:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 80066b2:	f103 0308 	add.w	r3, r3, #8
 80066b6:	edd3 7a00 	vldr	s15, [r3]
 80066ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066be:	ee17 0a90 	vmov	r0, s15
 80066c2:	f7f9 ff59 	bl	8000578 <__aeabi_f2d>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80066ce:	3814      	subs	r0, #20
 80066d0:	4945      	ldr	r1, [pc, #276]	; (80067e8 <StartChartTask+0xd98>)
 80066d2:	f003 fded 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 160, Temp, BLACK, 1, E_PAPIER);
 80066d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80066da:	3a14      	subs	r2, #20
 80066dc:	2301      	movs	r3, #1
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	2301      	movs	r3, #1
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	2300      	movs	r3, #0
 80066e6:	21a0      	movs	r1, #160	; 0xa0
 80066e8:	2000      	movs	r0, #0
 80066ea:	f7fa fde3 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", (_Max - TempDifferencje / 4));
 80066ee:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80066f2:	f103 031c 	add.w	r3, r3, #28
 80066f6:	ed93 7a00 	vldr	s14, [r3]
 80066fa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80066fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006702:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8006706:	f103 030c 	add.w	r3, r3, #12
 800670a:	ed93 7a00 	vldr	s14, [r3]
 800670e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006712:	ee17 0a90 	vmov	r0, s15
 8006716:	f7f9 ff2f 	bl	8000578 <__aeabi_f2d>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006722:	3814      	subs	r0, #20
 8006724:	4930      	ldr	r1, [pc, #192]	; (80067e8 <StartChartTask+0xd98>)
 8006726:	f003 fdc3 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 103, Temp, BLACK, 1, E_PAPIER);
 800672a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800672e:	3a14      	subs	r2, #20
 8006730:	2301      	movs	r3, #1
 8006732:	9301      	str	r3, [sp, #4]
 8006734:	2301      	movs	r3, #1
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	2300      	movs	r3, #0
 800673a:	2167      	movs	r1, #103	; 0x67
 800673c:	2000      	movs	r0, #0
 800673e:	f7fa fdb9 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", _Min);
 8006742:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8006746:	f103 0308 	add.w	r3, r3, #8
 800674a:	6818      	ldr	r0, [r3, #0]
 800674c:	f7f9 ff14 	bl	8000578 <__aeabi_f2d>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006758:	3814      	subs	r0, #20
 800675a:	4923      	ldr	r1, [pc, #140]	; (80067e8 <StartChartTask+0xd98>)
 800675c:	f003 fda8 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 276, Temp, BLACK, 1, E_PAPIER);
 8006760:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006764:	3a14      	subs	r2, #20
 8006766:	2301      	movs	r3, #1
 8006768:	9301      	str	r3, [sp, #4]
 800676a:	2301      	movs	r3, #1
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	2300      	movs	r3, #0
 8006770:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006774:	2000      	movs	r0, #0
 8006776:	f7fa fd9d 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", _Max);
 800677a:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 800677e:	f103 030c 	add.w	r3, r3, #12
 8006782:	6818      	ldr	r0, [r3, #0]
 8006784:	f7f9 fef8 	bl	8000578 <__aeabi_f2d>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006790:	3814      	subs	r0, #20
 8006792:	4915      	ldr	r1, [pc, #84]	; (80067e8 <StartChartTask+0xd98>)
 8006794:	f003 fd8c 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 45, Temp, BLACK, 1, E_PAPIER);
 8006798:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800679c:	3a14      	subs	r2, #20
 800679e:	2301      	movs	r3, #1
 80067a0:	9301      	str	r3, [sp, #4]
 80067a2:	2301      	movs	r3, #1
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	2300      	movs	r3, #0
 80067a8:	212d      	movs	r1, #45	; 0x2d
 80067aa:	2000      	movs	r0, #0
 80067ac:	f7fa fd82 	bl	80012b4 <GFX_DrawString>
         e_papier_display();
 80067b0:	f7fd fb40 	bl	8003e34 <e_papier_display>
         osMutexAcquire(EncoderMutexHandle, osWaitForever);
 80067b4:	4b0d      	ldr	r3, [pc, #52]	; (80067ec <StartChartTask+0xd9c>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f04f 31ff 	mov.w	r1, #4294967295
 80067bc:	4618      	mov	r0, r3
 80067be:	f00c f989 	bl	8012ad4 <osMutexAcquire>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 80067c2:	e002      	b.n	80067ca <StartChartTask+0xd7a>
         {
            osDelay(100);
 80067c4:	2064      	movs	r0, #100	; 0x64
 80067c6:	f00b ff69 	bl	801269c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 80067ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067ce:	4808      	ldr	r0, [pc, #32]	; (80067f0 <StartChartTask+0xda0>)
 80067d0:	f005 fd94 	bl	800c2fc <HAL_GPIO_ReadPin>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d0f4      	beq.n	80067c4 <StartChartTask+0xd74>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80067da:	e00e      	b.n	80067fa <StartChartTask+0xdaa>
 80067dc:	20003e04 	.word	0x20003e04
 80067e0:	20003e10 	.word	0x20003e10
 80067e4:	20003e0c 	.word	0x20003e0c
 80067e8:	0801c398 	.word	0x0801c398
 80067ec:	20003e20 	.word	0x20003e20
 80067f0:	48000400 	.word	0x48000400
         {
            osDelay(100);
 80067f4:	2064      	movs	r0, #100	; 0x64
 80067f6:	f00b ff51 	bl	801269c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80067fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067fe:	48bc      	ldr	r0, [pc, #752]	; (8006af0 <StartChartTask+0x10a0>)
 8006800:	f005 fd7c 	bl	800c2fc <HAL_GPIO_ReadPin>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0f4      	beq.n	80067f4 <StartChartTask+0xda4>
         }
         osMutexRelease(EncoderMutexHandle);
 800680a:	4bba      	ldr	r3, [pc, #744]	; (8006af4 <StartChartTask+0x10a4>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f00c f9ab 	bl	8012b6a <osMutexRelease>
         osMutexRelease(SPI1MutexHandle);
 8006814:	4bb8      	ldr	r3, [pc, #736]	; (8006af8 <StartChartTask+0x10a8>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f00c f9a6 	bl	8012b6a <osMutexRelease>
         osMutexRelease(E_PAPIERMutexHandle);
 800681e:	4bb7      	ldr	r3, [pc, #732]	; (8006afc <StartChartTask+0x10ac>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f00c f9a1 	bl	8012b6a <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8006828:	4bb5      	ldr	r3, [pc, #724]	; (8006b00 <StartChartTask+0x10b0>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4618      	mov	r0, r3
 800682e:	f00c f99c 	bl	8012b6a <osMutexRelease>
      {
 8006832:	f000 bdb6 	b.w	80073a2 <StartChartTask+0x1952>
      }
      else
      {
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8006836:	2308      	movs	r3, #8
 8006838:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 800683c:	f102 0214 	add.w	r2, r2, #20
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e05a      	b.n	80068fa <StartChartTask+0xeaa>
         {
            osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8006844:	4bac      	ldr	r3, [pc, #688]	; (8006af8 <StartChartTask+0x10a8>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f04f 31ff 	mov.w	r1, #4294967295
 800684c:	4618      	mov	r0, r3
 800684e:	f00c f941 	bl	8012ad4 <osMutexAcquire>
            fram_Read(&Fram, i, &FramDateChart, 12);
 8006852:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006856:	f103 0314 	add.w	r3, r3, #20
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	b299      	uxth	r1, r3
 800685e:	f207 7264 	addw	r2, r7, #1892	; 0x764
 8006862:	230c      	movs	r3, #12
 8006864:	48a7      	ldr	r0, [pc, #668]	; (8006b04 <StartChartTask+0x10b4>)
 8006866:	f7fd fe68 	bl	800453a <fram_Read>
            osMutexRelease(SPI1MutexHandle);
 800686a:	4ba3      	ldr	r3, [pc, #652]	; (8006af8 <StartChartTask+0x10a8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4618      	mov	r0, r3
 8006870:	f00c f97b 	bl	8012b6a <osMutexRelease>
            if(FramDateChart.Date == Cda.Date && FramDateChart.Month == Cda.Month && FramDateChart.Year == Cda.Year)
 8006874:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006878:	f103 0308 	add.w	r3, r3, #8
 800687c:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006886:	f103 0308 	add.w	r3, r3, #8
 800688a:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 800688e:	78db      	ldrb	r3, [r3, #3]
 8006890:	429a      	cmp	r2, r3
 8006892:	d127      	bne.n	80068e4 <StartChartTask+0xe94>
 8006894:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006898:	f103 0308 	add.w	r3, r3, #8
 800689c:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 80068a0:	785a      	ldrb	r2, [r3, #1]
 80068a2:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 80068a6:	f103 0308 	add.w	r3, r3, #8
 80068aa:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 80068ae:	789b      	ldrb	r3, [r3, #2]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d117      	bne.n	80068e4 <StartChartTask+0xe94>
 80068b4:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 80068b8:	f103 0308 	add.w	r3, r3, #8
 80068bc:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 80068c0:	789b      	ldrb	r3, [r3, #2]
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 80068c8:	f103 0308 	add.w	r3, r3, #8
 80068cc:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d106      	bne.n	80068e4 <StartChartTask+0xe94>
            {
               FramDataChartExistFlag = 1;
 80068d6:	2301      	movs	r3, #1
 80068d8:	f507 52a3 	add.w	r2, r7, #5216	; 0x1460
 80068dc:	f102 0207 	add.w	r2, r2, #7
 80068e0:	7013      	strb	r3, [r2, #0]
               break;
 80068e2:	e013      	b.n	800690c <StartChartTask+0xebc>
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 80068e4:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80068e8:	f103 0314 	add.w	r3, r3, #20
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	330c      	adds	r3, #12
 80068f0:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 80068f4:	f102 0214 	add.w	r2, r2, #20
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80068fe:	f103 0314 	add.w	r3, r3, #20
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f241 7277 	movw	r2, #6007	; 0x1777
 8006908:	4293      	cmp	r3, r2
 800690a:	dd9b      	ble.n	8006844 <StartChartTask+0xdf4>
            }
         }
         if(FramDataChartExistFlag == 1)
 800690c:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006910:	f103 0307 	add.w	r3, r3, #7
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b01      	cmp	r3, #1
 8006918:	f040 81f1 	bne.w	8006cfe <StartChartTask+0x12ae>
         {
            FramDataChartExistFlag = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	f507 52a3 	add.w	r2, r7, #5216	; 0x1460
 8006922:	f102 0207 	add.w	r2, r2, #7
 8006926:	7013      	strb	r3, [r2, #0]
            for(int i = 0; i < FramDateChart.Length; i++)
 8006928:	2300      	movs	r3, #0
 800692a:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 800692e:	f102 0210 	add.w	r2, r2, #16
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	e1d3      	b.n	8006cde <StartChartTask+0x128e>
            {
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8006936:	4b70      	ldr	r3, [pc, #448]	; (8006af8 <StartChartTask+0x10a8>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f04f 31ff 	mov.w	r1, #4294967295
 800693e:	4618      	mov	r0, r3
 8006940:	f00c f8c8 	bl	8012ad4 <osMutexAcquire>
               flash_ReadPage(&Flash, i + FramDateChart.StartFlashPage, &Pv);
 8006944:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006948:	f103 0308 	add.w	r3, r3, #8
 800694c:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006956:	f103 0310 	add.w	r3, r3, #16
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4413      	add	r3, r2
 800695e:	f207 6264 	addw	r2, r7, #1636	; 0x664
 8006962:	4619      	mov	r1, r3
 8006964:	4868      	ldr	r0, [pc, #416]	; (8006b08 <StartChartTask+0x10b8>)
 8006966:	f7fd fc78 	bl	800425a <flash_ReadPage>
               osMutexRelease(SPI1MutexHandle);
 800696a:	4b63      	ldr	r3, [pc, #396]	; (8006af8 <StartChartTask+0x10a8>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f00c f8fb 	bl	8012b6a <osMutexRelease>
               uint32_t TempCrc = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 8006974:	f207 6364 	addw	r3, r7, #1636	; 0x664
 8006978:	461a      	mov	r2, r3
 800697a:	21fc      	movs	r1, #252	; 0xfc
 800697c:	f04f 30ff 	mov.w	r0, #4294967295
 8006980:	f7fd f83a 	bl	80039f8 <Crc>
 8006984:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006988:	f103 0310 	add.w	r3, r3, #16
 800698c:	6018      	str	r0, [r3, #0]
               if(TempCrc == Pv.PageCRC)
 800698e:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006992:	f103 0308 	add.w	r3, r3, #8
 8006996:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 800699a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800699e:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 80069a2:	f102 0210 	add.w	r2, r2, #16
 80069a6:	6812      	ldr	r2, [r2, #0]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	f040 818d 	bne.w	8006cc8 <StartChartTask+0x1278>
               {
                  for(int j = (i * 9), k = 0; k < 9; k++)
 80069ae:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80069b2:	f103 0310 	add.w	r3, r3, #16
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	4613      	mov	r3, r2
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	4413      	add	r3, r2
 80069be:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 80069c2:	f102 020c 	add.w	r2, r2, #12
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	2300      	movs	r3, #0
 80069ca:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 80069ce:	f102 020c 	add.w	r2, r2, #12
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	e170      	b.n	8006cb8 <StartChartTask+0x1268>
                  {
                     if(Cda.ChartType == INTERNAL_PM1)
 80069d6:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 80069da:	f103 0308 	add.w	r3, r3, #8
 80069de:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 80069e2:	791b      	ldrb	r3, [r3, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d125      	bne.n	8006a34 <StartChartTask+0xfe4>
                     {
                        IntegerType[j + k] = Pv.Record[k].InternalPM1;
 80069e8:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80069ec:	f103 030c 	add.w	r3, r3, #12
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80069f6:	f103 030c 	add.w	r3, r3, #12
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	18d1      	adds	r1, r2, r3
 80069fe:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006a02:	f103 0308 	add.w	r3, r3, #8
 8006a06:	f6a3 6004 	subw	r0, r3, #3588	; 0xe04
 8006a0a:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006a0e:	f103 030c 	add.w	r3, r3, #12
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	4613      	mov	r3, r2
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	1a9b      	subs	r3, r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4403      	add	r3, r0
 8006a1e:	3304      	adds	r3, #4
 8006a20:	881a      	ldrh	r2, [r3, #0]
 8006a22:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006a26:	f103 0308 	add.w	r3, r3, #8
 8006a2a:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8006a2e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8006a32:	e0ee      	b.n	8006c12 <StartChartTask+0x11c2>
                     }
                     else if(Cda.ChartType == INTERNAL_PM25)
 8006a34:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006a38:	f103 0308 	add.w	r3, r3, #8
 8006a3c:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 8006a40:	791b      	ldrb	r3, [r3, #4]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d125      	bne.n	8006a92 <StartChartTask+0x1042>
                     {
                        IntegerType[j + k] = Pv.Record[k].InternalPM25;
 8006a46:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006a4a:	f103 030c 	add.w	r3, r3, #12
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006a54:	f103 030c 	add.w	r3, r3, #12
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	18d1      	adds	r1, r2, r3
 8006a5c:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006a60:	f103 0308 	add.w	r3, r3, #8
 8006a64:	f6a3 6004 	subw	r0, r3, #3588	; 0xe04
 8006a68:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006a6c:	f103 030c 	add.w	r3, r3, #12
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	4613      	mov	r3, r2
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	1a9b      	subs	r3, r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4403      	add	r3, r0
 8006a7c:	3306      	adds	r3, #6
 8006a7e:	881a      	ldrh	r2, [r3, #0]
 8006a80:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006a84:	f103 0308 	add.w	r3, r3, #8
 8006a88:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8006a8c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8006a90:	e0bf      	b.n	8006c12 <StartChartTask+0x11c2>
                     }
                     else if(Cda.ChartType == INTERNAL_PM10)
 8006a92:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006a96:	f103 0308 	add.w	r3, r3, #8
 8006a9a:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 8006a9e:	791b      	ldrb	r3, [r3, #4]
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d133      	bne.n	8006b0c <StartChartTask+0x10bc>
                     {
                        IntegerType[j + k] = Pv.Record[k].InternalPM10;
 8006aa4:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006aa8:	f103 030c 	add.w	r3, r3, #12
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006ab2:	f103 030c 	add.w	r3, r3, #12
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	18d1      	adds	r1, r2, r3
 8006aba:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006abe:	f103 0308 	add.w	r3, r3, #8
 8006ac2:	f6a3 6004 	subw	r0, r3, #3588	; 0xe04
 8006ac6:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006aca:	f103 030c 	add.w	r3, r3, #12
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	1a9b      	subs	r3, r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4403      	add	r3, r0
 8006ada:	3308      	adds	r3, #8
 8006adc:	881a      	ldrh	r2, [r3, #0]
 8006ade:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006ae2:	f103 0308 	add.w	r3, r3, #8
 8006ae6:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8006aea:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8006aee:	e090      	b.n	8006c12 <StartChartTask+0x11c2>
 8006af0:	48000400 	.word	0x48000400
 8006af4:	20003e20 	.word	0x20003e20
 8006af8:	20003e0c 	.word	0x20003e0c
 8006afc:	20003e10 	.word	0x20003e10
 8006b00:	20003e04 	.word	0x20003e04
 8006b04:	20003da8 	.word	0x20003da8
 8006b08:	20003d98 	.word	0x20003d98
                     }
                     else if(Cda.ChartType == EXTERNAL_PM1)
 8006b0c:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006b10:	f103 0308 	add.w	r3, r3, #8
 8006b14:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 8006b18:	791b      	ldrb	r3, [r3, #4]
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d125      	bne.n	8006b6a <StartChartTask+0x111a>
                     {
                        IntegerType[j + k] = Pv.Record[k].ExternalPM1;
 8006b1e:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006b22:	f103 030c 	add.w	r3, r3, #12
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006b2c:	f103 030c 	add.w	r3, r3, #12
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	18d1      	adds	r1, r2, r3
 8006b34:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006b38:	f103 0308 	add.w	r3, r3, #8
 8006b3c:	f6a3 6004 	subw	r0, r3, #3588	; 0xe04
 8006b40:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006b44:	f103 030c 	add.w	r3, r3, #12
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	1a9b      	subs	r3, r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4403      	add	r3, r0
 8006b54:	330a      	adds	r3, #10
 8006b56:	881a      	ldrh	r2, [r3, #0]
 8006b58:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006b5c:	f103 0308 	add.w	r3, r3, #8
 8006b60:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8006b64:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8006b68:	e053      	b.n	8006c12 <StartChartTask+0x11c2>
                     }
                     else if(Cda.ChartType == EXTERNAL_PM25)
 8006b6a:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006b6e:	f103 0308 	add.w	r3, r3, #8
 8006b72:	f6a3 43f4 	subw	r3, r3, #3316	; 0xcf4
 8006b76:	791b      	ldrb	r3, [r3, #4]
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d125      	bne.n	8006bc8 <StartChartTask+0x1178>
                     {
                        IntegerType[j + k] = Pv.Record[k].ExternalPM25;
 8006b7c:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006b80:	f103 030c 	add.w	r3, r3, #12
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006b8a:	f103 030c 	add.w	r3, r3, #12
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	18d1      	adds	r1, r2, r3
 8006b92:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006b96:	f103 0308 	add.w	r3, r3, #8
 8006b9a:	f6a3 6004 	subw	r0, r3, #3588	; 0xe04
 8006b9e:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006ba2:	f103 030c 	add.w	r3, r3, #12
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	1a9b      	subs	r3, r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4403      	add	r3, r0
 8006bb2:	330c      	adds	r3, #12
 8006bb4:	881a      	ldrh	r2, [r3, #0]
 8006bb6:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006bba:	f103 0308 	add.w	r3, r3, #8
 8006bbe:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8006bc2:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8006bc6:	e024      	b.n	8006c12 <StartChartTask+0x11c2>
                     }
                     else
                     {
                        IntegerType[j + k] = Pv.Record[k].ExternalPM10;
 8006bc8:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006bcc:	f103 030c 	add.w	r3, r3, #12
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006bd6:	f103 030c 	add.w	r3, r3, #12
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	18d1      	adds	r1, r2, r3
 8006bde:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006be2:	f103 0308 	add.w	r3, r3, #8
 8006be6:	f6a3 6004 	subw	r0, r3, #3588	; 0xe04
 8006bea:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006bee:	f103 030c 	add.w	r3, r3, #12
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	1a9b      	subs	r3, r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4403      	add	r3, r0
 8006bfe:	330e      	adds	r3, #14
 8006c00:	881a      	ldrh	r2, [r3, #0]
 8006c02:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006c06:	f103 0308 	add.w	r3, r3, #8
 8006c0a:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8006c0e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
                     }
                     Minute[j + k] = Pv.Record[k].Minute;
 8006c12:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006c16:	f103 030c 	add.w	r3, r3, #12
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006c20:	f103 030c 	add.w	r3, r3, #12
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	18d1      	adds	r1, r2, r3
 8006c28:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006c2c:	f103 0308 	add.w	r3, r3, #8
 8006c30:	f6a3 6004 	subw	r0, r3, #3588	; 0xe04
 8006c34:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006c38:	f103 030c 	add.w	r3, r3, #12
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	1a9b      	subs	r3, r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4403      	add	r3, r0
 8006c48:	3302      	adds	r3, #2
 8006c4a:	781a      	ldrb	r2, [r3, #0]
 8006c4c:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006c50:	f103 0308 	add.w	r3, r3, #8
 8006c54:	f6a3 43ec 	subw	r3, r3, #3308	; 0xcec
 8006c58:	545a      	strb	r2, [r3, r1]
                     Hour[j + k]   = Pv.Record[k].Hour;
 8006c5a:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006c5e:	f103 030c 	add.w	r3, r3, #12
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006c68:	f103 030c 	add.w	r3, r3, #12
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	18d1      	adds	r1, r2, r3
 8006c70:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006c74:	f103 0308 	add.w	r3, r3, #8
 8006c78:	f6a3 6004 	subw	r0, r3, #3588	; 0xe04
 8006c7c:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006c80:	f103 030c 	add.w	r3, r3, #12
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	4613      	mov	r3, r2
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	1a9b      	subs	r3, r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4403      	add	r3, r0
 8006c90:	3303      	adds	r3, #3
 8006c92:	781a      	ldrb	r2, [r3, #0]
 8006c94:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006c98:	f103 0308 	add.w	r3, r3, #8
 8006c9c:	f6a3 335c 	subw	r3, r3, #2908	; 0xb5c
 8006ca0:	545a      	strb	r2, [r3, r1]
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8006ca2:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006ca6:	f103 030c 	add.w	r3, r3, #12
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3301      	adds	r3, #1
 8006cae:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006cb2:	f102 020c 	add.w	r2, r2, #12
 8006cb6:	6013      	str	r3, [r2, #0]
 8006cb8:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006cbc:	f103 030c 	add.w	r3, r3, #12
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b08      	cmp	r3, #8
 8006cc4:	f77f ae87 	ble.w	80069d6 <StartChartTask+0xf86>
            for(int i = 0; i < FramDateChart.Length; i++)
 8006cc8:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006ccc:	f103 0310 	add.w	r3, r3, #16
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006cd8:	f102 0210 	add.w	r2, r2, #16
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006ce2:	f103 0308 	add.w	r3, r3, #8
 8006ce6:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 8006cea:	7a1b      	ldrb	r3, [r3, #8]
 8006cec:	461a      	mov	r2, r3
 8006cee:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006cf2:	f103 0310 	add.w	r3, r3, #16
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	f6ff ae1c 	blt.w	8006936 <StartChartTask+0xee6>
                  }
               }
            }
         }
         uint16_t _Max = 0, _Min = 10000000;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006d04:	f102 020a 	add.w	r2, r2, #10
 8006d08:	8013      	strh	r3, [r2, #0]
 8006d0a:	f249 6380 	movw	r3, #38528	; 0x9680
 8006d0e:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006d12:	f102 0208 	add.w	r2, r2, #8
 8006d16:	8013      	strh	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006d1e:	f102 0204 	add.w	r2, r2, #4
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	e065      	b.n	8006df2 <StartChartTask+0x13a2>
         {
            if(_Max < IntegerType[i])
 8006d26:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006d2a:	f103 0308 	add.w	r3, r3, #8
 8006d2e:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8006d32:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006d36:	f102 0204 	add.w	r2, r2, #4
 8006d3a:	6812      	ldr	r2, [r2, #0]
 8006d3c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006d40:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006d44:	f102 020a 	add.w	r2, r2, #10
 8006d48:	8812      	ldrh	r2, [r2, #0]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d211      	bcs.n	8006d72 <StartChartTask+0x1322>
            {
               _Max = IntegerType[i];
 8006d4e:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006d52:	f103 0308 	add.w	r3, r3, #8
 8006d56:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8006d5a:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006d5e:	f102 0204 	add.w	r2, r2, #4
 8006d62:	6812      	ldr	r2, [r2, #0]
 8006d64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006d68:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006d6c:	f102 020a 	add.w	r2, r2, #10
 8006d70:	8013      	strh	r3, [r2, #0]
            }
            if(_Min > IntegerType[i] && IntegerType[i] != 0.0)
 8006d72:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006d76:	f103 0308 	add.w	r3, r3, #8
 8006d7a:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8006d7e:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006d82:	f102 0204 	add.w	r2, r2, #4
 8006d86:	6812      	ldr	r2, [r2, #0]
 8006d88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006d8c:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006d90:	f102 0208 	add.w	r2, r2, #8
 8006d94:	8812      	ldrh	r2, [r2, #0]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d920      	bls.n	8006ddc <StartChartTask+0x138c>
 8006d9a:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006d9e:	f103 0308 	add.w	r3, r3, #8
 8006da2:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8006da6:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006daa:	f102 0204 	add.w	r2, r2, #4
 8006dae:	6812      	ldr	r2, [r2, #0]
 8006db0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d011      	beq.n	8006ddc <StartChartTask+0x138c>
            {
               _Min = IntegerType[i];
 8006db8:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006dbc:	f103 0308 	add.w	r3, r3, #8
 8006dc0:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8006dc4:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006dc8:	f102 0204 	add.w	r2, r2, #4
 8006dcc:	6812      	ldr	r2, [r2, #0]
 8006dce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006dd2:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006dd6:	f102 0208 	add.w	r2, r2, #8
 8006dda:	8013      	strh	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8006ddc:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006de0:	f103 0304 	add.w	r3, r3, #4
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3301      	adds	r3, #1
 8006de8:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006dec:	f102 0204 	add.w	r2, r2, #4
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006df6:	f103 0308 	add.w	r3, r3, #8
 8006dfa:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 8006dfe:	7a1b      	ldrb	r3, [r3, #8]
 8006e00:	461a      	mov	r2, r3
 8006e02:	4613      	mov	r3, r2
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	4413      	add	r3, r2
 8006e08:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006e0c:	f102 0204 	add.w	r2, r2, #4
 8006e10:	6812      	ldr	r2, [r2, #0]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	db87      	blt.n	8006d26 <StartChartTask+0x12d6>
            }
         }
         for(int i = 0; i < 400; i++)
 8006e16:	2300      	movs	r3, #0
 8006e18:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	e05e      	b.n	8006ede <StartChartTask+0x148e>
         {
            if(IntegerType[i] == 0)
 8006e20:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006e24:	f103 0308 	add.w	r3, r3, #8
 8006e28:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8006e2c:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006e30:	6812      	ldr	r2, [r2, #0]
 8006e32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10f      	bne.n	8006e5a <StartChartTask+0x140a>
            {
               IntegerType[i] = _Min;
 8006e3a:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006e3e:	f103 0308 	add.w	r3, r3, #8
 8006e42:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8006e46:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006e4a:	6812      	ldr	r2, [r2, #0]
 8006e4c:	f507 51a1 	add.w	r1, r7, #5152	; 0x1420
 8006e50:	f101 0108 	add.w	r1, r1, #8
 8006e54:	8809      	ldrh	r1, [r1, #0]
 8006e56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            }
            Y_Axis[i] = (uint16_t)map(IntegerType[i], _Min, _Max, 20, 250);
 8006e5a:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006e5e:	f103 0308 	add.w	r3, r3, #8
 8006e62:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8006e66:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006e76:	f103 0308 	add.w	r3, r3, #8
 8006e7a:	8819      	ldrh	r1, [r3, #0]
 8006e7c:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006e80:	f103 030a 	add.w	r3, r3, #10
 8006e84:	881a      	ldrh	r2, [r3, #0]
 8006e86:	23fa      	movs	r3, #250	; 0xfa
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	2314      	movs	r3, #20
 8006e8c:	f001 fc30 	bl	80086f0 <map>
 8006e90:	4603      	mov	r3, r0
 8006e92:	b299      	uxth	r1, r3
 8006e94:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8006e98:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006e9c:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006ea0:	6812      	ldr	r2, [r2, #0]
 8006ea2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            Y_Axis[i] = 300 - Y_Axis[i];
 8006ea6:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8006eaa:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006eae:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006eb2:	6812      	ldr	r2, [r2, #0]
 8006eb4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006eb8:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8006ebc:	b299      	uxth	r1, r3
 8006ebe:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8006ec2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006ec6:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006eca:	6812      	ldr	r2, [r2, #0]
 8006ecc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         for(int i = 0; i < 400; i++)
 8006ed0:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8006edc:	6013      	str	r3, [r2, #0]
 8006ede:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006ee8:	db9a      	blt.n	8006e20 <StartChartTask+0x13d0>
         }
         for(int i = 0; i < 400; i++)
 8006eea:	2300      	movs	r3, #0
 8006eec:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8006ef0:	f102 021c 	add.w	r2, r2, #28
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	e0c6      	b.n	8007086 <StartChartTask+0x1636>
         {
            if(Hour[i] != 0 && Minute[i] != 0)
 8006ef8:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006efc:	f103 0308 	add.w	r3, r3, #8
 8006f00:	f6a3 325c 	subw	r2, r3, #2908	; 0xb5c
 8006f04:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006f08:	f103 031c 	add.w	r3, r3, #28
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4413      	add	r3, r2
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 8092 	beq.w	800703c <StartChartTask+0x15ec>
 8006f18:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006f1c:	f103 0308 	add.w	r3, r3, #8
 8006f20:	f6a3 42ec 	subw	r2, r3, #3308	; 0xcec
 8006f24:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006f28:	f103 031c 	add.w	r3, r3, #28
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4413      	add	r3, r2
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8082 	beq.w	800703c <StartChartTask+0x15ec>
            {
               X_Axis[i] = map(Hour[i] * 60 + Minute[i], Hour[i] * 60, (Hour[i] + 1) * 60, 64 + (Hour[i] * 14), 64 + ((Hour[i] + 1) * 14));
 8006f38:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006f3c:	f103 0308 	add.w	r3, r3, #8
 8006f40:	f6a3 325c 	subw	r2, r3, #2908	; 0xb5c
 8006f44:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006f48:	f103 031c 	add.w	r3, r3, #28
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4413      	add	r3, r2
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	4613      	mov	r3, r2
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	1a9b      	subs	r3, r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006f62:	f103 0308 	add.w	r3, r3, #8
 8006f66:	f6a3 42ec 	subw	r2, r3, #3308	; 0xcec
 8006f6a:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006f6e:	f103 031c 	add.w	r3, r3, #28
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4413      	add	r3, r2
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	440b      	add	r3, r1
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006f80:	f103 0308 	add.w	r3, r3, #8
 8006f84:	f6a3 325c 	subw	r2, r3, #2908	; 0xb5c
 8006f88:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006f8c:	f103 031c 	add.w	r3, r3, #28
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4413      	add	r3, r2
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	4613      	mov	r3, r2
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	1a9b      	subs	r3, r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006fa6:	f103 0308 	add.w	r3, r3, #8
 8006faa:	f6a3 325c 	subw	r2, r3, #2908	; 0xb5c
 8006fae:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006fb2:	f103 031c 	add.w	r3, r3, #28
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4413      	add	r3, r2
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	1a9b      	subs	r3, r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	461c      	mov	r4, r3
 8006fc8:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006fcc:	f103 0308 	add.w	r3, r3, #8
 8006fd0:	f6a3 325c 	subw	r2, r3, #2908	; 0xb5c
 8006fd4:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006fd8:	f103 031c 	add.w	r3, r3, #28
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4413      	add	r3, r2
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	3340      	adds	r3, #64	; 0x40
 8006fee:	461d      	mov	r5, r3
 8006ff0:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8006ff4:	f103 0308 	add.w	r3, r3, #8
 8006ff8:	f6a3 325c 	subw	r2, r3, #2908	; 0xb5c
 8006ffc:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007000:	f103 031c 	add.w	r3, r3, #28
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4413      	add	r3, r2
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	4613      	mov	r3, r2
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	1a9b      	subs	r3, r3, r2
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	3340      	adds	r3, #64	; 0x40
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	462b      	mov	r3, r5
 800701a:	4622      	mov	r2, r4
 800701c:	f001 fb68 	bl	80086f0 <map>
 8007020:	4603      	mov	r3, r0
 8007022:	b299      	uxth	r1, r3
 8007024:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8007028:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800702c:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8007030:	f102 021c 	add.w	r2, r2, #28
 8007034:	6812      	ldr	r2, [r2, #0]
 8007036:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800703a:	e019      	b.n	8007070 <StartChartTask+0x1620>
            }
            else if(X_Axis[i] == 0)
 800703c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8007040:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8007044:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8007048:	f102 021c 	add.w	r2, r2, #28
 800704c:	6812      	ldr	r2, [r2, #0]
 800704e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10c      	bne.n	8007070 <StartChartTask+0x1620>
            {
               X_Axis[i] = 0xffff;
 8007056:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800705a:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800705e:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8007062:	f102 021c 	add.w	r2, r2, #28
 8007066:	6812      	ldr	r2, [r2, #0]
 8007068:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800706c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         for(int i = 0; i < 400; i++)
 8007070:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007074:	f103 031c 	add.w	r3, r3, #28
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3301      	adds	r3, #1
 800707c:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8007080:	f102 021c 	add.w	r2, r2, #28
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800708a:	f103 031c 	add.w	r3, r3, #28
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007094:	f6ff af30 	blt.w	8006ef8 <StartChartTask+0x14a8>
            }
         }
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8007098:	4bc5      	ldr	r3, [pc, #788]	; (80073b0 <StartChartTask+0x1960>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f04f 31ff 	mov.w	r1, #4294967295
 80070a0:	4618      	mov	r0, r3
 80070a2:	f00b fd17 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 80070a6:	4bc3      	ldr	r3, [pc, #780]	; (80073b4 <StartChartTask+0x1964>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f04f 31ff 	mov.w	r1, #4294967295
 80070ae:	4618      	mov	r0, r3
 80070b0:	f00b fd10 	bl	8012ad4 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80070b4:	4bc0      	ldr	r3, [pc, #768]	; (80073b8 <StartChartTask+0x1968>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f04f 31ff 	mov.w	r1, #4294967295
 80070bc:	4618      	mov	r0, r3
 80070be:	f00b fd09 	bl	8012ad4 <osMutexAcquire>
         char Temp[10];
         uint16_t TempDifferencje = _Max - _Min;
 80070c2:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80070c6:	f103 030a 	add.w	r3, r3, #10
 80070ca:	881a      	ldrh	r2, [r3, #0]
 80070cc:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80070d0:	f103 0308 	add.w	r3, r3, #8
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 80070dc:	f102 020a 	add.w	r2, r2, #10
 80070e0:	8013      	strh	r3, [r2, #0]
         sprintf(Temp, "%d", (_Min + TempDifferencje / 4));
 80070e2:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80070e6:	f103 0308 	add.w	r3, r3, #8
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 80070f0:	f102 020a 	add.w	r2, r2, #10
 80070f4:	8812      	ldrh	r2, [r2, #0]
 80070f6:	0892      	lsrs	r2, r2, #2
 80070f8:	b292      	uxth	r2, r2
 80070fa:	441a      	add	r2, r3
 80070fc:	f107 0308 	add.w	r3, r7, #8
 8007100:	49ae      	ldr	r1, [pc, #696]	; (80073bc <StartChartTask+0x196c>)
 8007102:	4618      	mov	r0, r3
 8007104:	f003 f8d4 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 218, Temp, BLACK, 1, E_PAPIER);
 8007108:	f107 0208 	add.w	r2, r7, #8
 800710c:	2301      	movs	r3, #1
 800710e:	9301      	str	r3, [sp, #4]
 8007110:	2301      	movs	r3, #1
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	2300      	movs	r3, #0
 8007116:	21da      	movs	r1, #218	; 0xda
 8007118:	2000      	movs	r0, #0
 800711a:	f7fa f8cb 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", (_Min + TempDifferencje / 2));
 800711e:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8007122:	f103 0308 	add.w	r3, r3, #8
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 800712c:	f102 020a 	add.w	r2, r2, #10
 8007130:	8812      	ldrh	r2, [r2, #0]
 8007132:	0852      	lsrs	r2, r2, #1
 8007134:	b292      	uxth	r2, r2
 8007136:	441a      	add	r2, r3
 8007138:	f107 0308 	add.w	r3, r7, #8
 800713c:	499f      	ldr	r1, [pc, #636]	; (80073bc <StartChartTask+0x196c>)
 800713e:	4618      	mov	r0, r3
 8007140:	f003 f8b6 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 160, Temp, BLACK, 1, E_PAPIER);
 8007144:	f107 0208 	add.w	r2, r7, #8
 8007148:	2301      	movs	r3, #1
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	2301      	movs	r3, #1
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	2300      	movs	r3, #0
 8007152:	21a0      	movs	r1, #160	; 0xa0
 8007154:	2000      	movs	r0, #0
 8007156:	f7fa f8ad 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", (_Max - TempDifferencje / 4));
 800715a:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 800715e:	f103 030a 	add.w	r3, r3, #10
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8007168:	f102 020a 	add.w	r2, r2, #10
 800716c:	8812      	ldrh	r2, [r2, #0]
 800716e:	0892      	lsrs	r2, r2, #2
 8007170:	b292      	uxth	r2, r2
 8007172:	1a9a      	subs	r2, r3, r2
 8007174:	f107 0308 	add.w	r3, r7, #8
 8007178:	4990      	ldr	r1, [pc, #576]	; (80073bc <StartChartTask+0x196c>)
 800717a:	4618      	mov	r0, r3
 800717c:	f003 f898 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 103, Temp, BLACK, 1, E_PAPIER);
 8007180:	f107 0208 	add.w	r2, r7, #8
 8007184:	2301      	movs	r3, #1
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	2301      	movs	r3, #1
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	2300      	movs	r3, #0
 800718e:	2167      	movs	r1, #103	; 0x67
 8007190:	2000      	movs	r0, #0
 8007192:	f7fa f88f 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", _Min);
 8007196:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 800719a:	f103 0308 	add.w	r3, r3, #8
 800719e:	881a      	ldrh	r2, [r3, #0]
 80071a0:	f107 0308 	add.w	r3, r7, #8
 80071a4:	4985      	ldr	r1, [pc, #532]	; (80073bc <StartChartTask+0x196c>)
 80071a6:	4618      	mov	r0, r3
 80071a8:	f003 f882 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 276, Temp, BLACK, 1, E_PAPIER);
 80071ac:	f107 0208 	add.w	r2, r7, #8
 80071b0:	2301      	movs	r3, #1
 80071b2:	9301      	str	r3, [sp, #4]
 80071b4:	2301      	movs	r3, #1
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	2300      	movs	r3, #0
 80071ba:	f44f 718a 	mov.w	r1, #276	; 0x114
 80071be:	2000      	movs	r0, #0
 80071c0:	f7fa f878 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", _Max);
 80071c4:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80071c8:	f103 030a 	add.w	r3, r3, #10
 80071cc:	881a      	ldrh	r2, [r3, #0]
 80071ce:	f107 0308 	add.w	r3, r7, #8
 80071d2:	497a      	ldr	r1, [pc, #488]	; (80073bc <StartChartTask+0x196c>)
 80071d4:	4618      	mov	r0, r3
 80071d6:	f003 f86b 	bl	800a2b0 <sprintf_>
         GFX_DrawString(0, 45, Temp, BLACK, 1, E_PAPIER);
 80071da:	f107 0208 	add.w	r2, r7, #8
 80071de:	2301      	movs	r3, #1
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	2301      	movs	r3, #1
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	2300      	movs	r3, #0
 80071e8:	212d      	movs	r1, #45	; 0x2d
 80071ea:	2000      	movs	r0, #0
 80071ec:	f7fa f862 	bl	80012b4 <GFX_DrawString>
         if(X_Axis[0] != 0xffff && X_Axis[1] != 0xffff)
 80071f0:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80071f4:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071fe:	4293      	cmp	r3, r2
 8007200:	d027      	beq.n	8007252 <StartChartTask+0x1802>
 8007202:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8007206:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800720a:	885b      	ldrh	r3, [r3, #2]
 800720c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007210:	4293      	cmp	r3, r2
 8007212:	d01e      	beq.n	8007252 <StartChartTask+0x1802>
         {
            GFX_DrawLine(X_Axis[0], Y_Axis[0], X_Axis[1], Y_Axis[1], BLACK, E_PAPIER);
 8007214:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8007218:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	4618      	mov	r0, r3
 8007220:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8007224:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	4619      	mov	r1, r3
 800722c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8007230:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8007234:	885b      	ldrh	r3, [r3, #2]
 8007236:	461a      	mov	r2, r3
 8007238:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800723c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007240:	885b      	ldrh	r3, [r3, #2]
 8007242:	461c      	mov	r4, r3
 8007244:	2301      	movs	r3, #1
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	2300      	movs	r3, #0
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	4623      	mov	r3, r4
 800724e:	f7fa f951 	bl	80014f4 <GFX_DrawLine>
         }
         for(int i = 1; i < 399; i++)
 8007252:	2301      	movs	r3, #1
 8007254:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8007258:	f102 0218 	add.w	r2, r2, #24
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	e063      	b.n	8007328 <StartChartTask+0x18d8>
         {
            if(X_Axis[i + 1] != 0xffff && X_Axis[i] != 0xffff)
 8007260:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007264:	f103 0318 	add.w	r3, r3, #24
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8007270:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8007274:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800727c:	4293      	cmp	r3, r2
 800727e:	d048      	beq.n	8007312 <StartChartTask+0x18c2>
 8007280:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8007284:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8007288:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 800728c:	f102 0218 	add.w	r2, r2, #24
 8007290:	6812      	ldr	r2, [r2, #0]
 8007292:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800729a:	4293      	cmp	r3, r2
 800729c:	d039      	beq.n	8007312 <StartChartTask+0x18c2>
            {
               GFX_DrawLine(X_Axis[i], Y_Axis[i], X_Axis[i + 1], Y_Axis[i + 1], BLACK, E_PAPIER);
 800729e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80072a2:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 80072a6:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 80072aa:	f102 0218 	add.w	r2, r2, #24
 80072ae:	6812      	ldr	r2, [r2, #0]
 80072b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80072ba:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80072be:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 80072c2:	f102 0218 	add.w	r2, r2, #24
 80072c6:	6812      	ldr	r2, [r2, #0]
 80072c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80072cc:	4619      	mov	r1, r3
 80072ce:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80072d2:	f103 0318 	add.w	r3, r3, #24
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80072de:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 80072e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80072e6:	461c      	mov	r4, r3
 80072e8:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80072ec:	f103 0318 	add.w	r3, r3, #24
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80072f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80072fc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007300:	461a      	mov	r2, r3
 8007302:	2301      	movs	r3, #1
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	2300      	movs	r3, #0
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	4613      	mov	r3, r2
 800730c:	4622      	mov	r2, r4
 800730e:	f7fa f8f1 	bl	80014f4 <GFX_DrawLine>
         for(int i = 1; i < 399; i++)
 8007312:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007316:	f103 0318 	add.w	r3, r3, #24
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3301      	adds	r3, #1
 800731e:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8007322:	f102 0218 	add.w	r2, r2, #24
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800732c:	f103 0318 	add.w	r3, r3, #24
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 8007336:	dd93      	ble.n	8007260 <StartChartTask+0x1810>
            }
         }
         e_papier_display();
 8007338:	f7fc fd7c 	bl	8003e34 <e_papier_display>
         osMutexAcquire(EncoderMutexHandle, osWaitForever);
 800733c:	4b20      	ldr	r3, [pc, #128]	; (80073c0 <StartChartTask+0x1970>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f04f 31ff 	mov.w	r1, #4294967295
 8007344:	4618      	mov	r0, r3
 8007346:	f00b fbc5 	bl	8012ad4 <osMutexAcquire>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800734a:	e002      	b.n	8007352 <StartChartTask+0x1902>
         {
            osDelay(100);
 800734c:	2064      	movs	r0, #100	; 0x64
 800734e:	f00b f9a5 	bl	801269c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8007352:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007356:	481b      	ldr	r0, [pc, #108]	; (80073c4 <StartChartTask+0x1974>)
 8007358:	f004 ffd0 	bl	800c2fc <HAL_GPIO_ReadPin>
 800735c:	4603      	mov	r3, r0
 800735e:	2b01      	cmp	r3, #1
 8007360:	d0f4      	beq.n	800734c <StartChartTask+0x18fc>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8007362:	e002      	b.n	800736a <StartChartTask+0x191a>
         {
            osDelay(100);
 8007364:	2064      	movs	r0, #100	; 0x64
 8007366:	f00b f999 	bl	801269c <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800736a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800736e:	4815      	ldr	r0, [pc, #84]	; (80073c4 <StartChartTask+0x1974>)
 8007370:	f004 ffc4 	bl	800c2fc <HAL_GPIO_ReadPin>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0f4      	beq.n	8007364 <StartChartTask+0x1914>
         }
         osMutexRelease(EncoderMutexHandle);
 800737a:	4b11      	ldr	r3, [pc, #68]	; (80073c0 <StartChartTask+0x1970>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4618      	mov	r0, r3
 8007380:	f00b fbf3 	bl	8012b6a <osMutexRelease>
         osMutexRelease(SPI1MutexHandle);
 8007384:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <StartChartTask+0x1968>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4618      	mov	r0, r3
 800738a:	f00b fbee 	bl	8012b6a <osMutexRelease>
         osMutexRelease(E_PAPIERMutexHandle);
 800738e:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <StartChartTask+0x1964>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f00b fbe9 	bl	8012b6a <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8007398:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <StartChartTask+0x1960>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4618      	mov	r0, r3
 800739e:	f00b fbe4 	bl	8012b6a <osMutexRelease>
      }
      for(int i = 0; i < 400; i++)
 80073a2:	2300      	movs	r3, #0
 80073a4:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 80073a8:	f102 0214 	add.w	r2, r2, #20
 80073ac:	6013      	str	r3, [r2, #0]
 80073ae:	e068      	b.n	8007482 <StartChartTask+0x1a32>
 80073b0:	20003e04 	.word	0x20003e04
 80073b4:	20003e10 	.word	0x20003e10
 80073b8:	20003e0c 	.word	0x20003e0c
 80073bc:	0801c394 	.word	0x0801c394
 80073c0:	20003e20 	.word	0x20003e20
 80073c4:	48000400 	.word	0x48000400
      {
         IntegerType[i]       = 0;
 80073c8:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 80073cc:	f103 0308 	add.w	r3, r3, #8
 80073d0:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 80073d4:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 80073d8:	f102 0214 	add.w	r2, r2, #20
 80073dc:	6812      	ldr	r2, [r2, #0]
 80073de:	2100      	movs	r1, #0
 80073e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         FloatingPointType[i] = 0;
 80073e4:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 80073e8:	f103 0308 	add.w	r3, r3, #8
 80073ec:	f2a3 62ac 	subw	r2, r3, #1708	; 0x6ac
 80073f0:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80073f4:	f103 0314 	add.w	r3, r3, #20
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	f04f 0200 	mov.w	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
         Y_Axis[i]            = 0;
 8007404:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8007408:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800740c:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8007410:	f102 0214 	add.w	r2, r2, #20
 8007414:	6812      	ldr	r2, [r2, #0]
 8007416:	2100      	movs	r1, #0
 8007418:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         X_Axis[i]            = 0;
 800741c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8007420:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8007424:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8007428:	f102 0214 	add.w	r2, r2, #20
 800742c:	6812      	ldr	r2, [r2, #0]
 800742e:	2100      	movs	r1, #0
 8007430:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         Hour[i]              = 0;
 8007434:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8007438:	f103 0308 	add.w	r3, r3, #8
 800743c:	f6a3 325c 	subw	r2, r3, #2908	; 0xb5c
 8007440:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007444:	f103 0314 	add.w	r3, r3, #20
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4413      	add	r3, r2
 800744c:	2200      	movs	r2, #0
 800744e:	701a      	strb	r2, [r3, #0]
         Minute[i]            = 0;
 8007450:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8007454:	f103 0308 	add.w	r3, r3, #8
 8007458:	f6a3 42ec 	subw	r2, r3, #3308	; 0xcec
 800745c:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007460:	f103 0314 	add.w	r3, r3, #20
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4413      	add	r3, r2
 8007468:	2200      	movs	r2, #0
 800746a:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i < 400; i++)
 800746c:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007470:	f103 0314 	add.w	r3, r3, #20
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3301      	adds	r3, #1
 8007478:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 800747c:	f102 0214 	add.w	r2, r2, #20
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007486:	f103 0314 	add.w	r3, r3, #20
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007490:	db9a      	blt.n	80073c8 <StartChartTask+0x1978>
      }
      FramDataChartExistFlag = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	f507 52a3 	add.w	r2, r7, #5216	; 0x1460
 8007498:	f102 0207 	add.w	r2, r2, #7
 800749c:	7013      	strb	r3, [r2, #0]
      osDelay(1);
 800749e:	2001      	movs	r0, #1
 80074a0:	f00b f8fc 	bl	801269c <osDelay>
      osMessageQueueGet(ChartQueueHandle, &Cda, 0, osWaitForever);
 80074a4:	f7fe bb5c 	b.w	8005b60 <StartChartTask+0x110>

080074a8 <MenuTimerCallback>:
   /* USER CODE END StartChartTask */
}

/* MenuTimerCallback function */
void MenuTimerCallback(void *argument)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN MenuTimerCallback */

   /* USER CODE END MenuTimerCallback */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <Memory_ClearBuffer>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void Memory_ClearBuffer(PageVariable_TypeDef *Pv)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
   for(int i = 0; i < 9; i++)
 80074c4:	2300      	movs	r3, #0
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	e08f      	b.n	80075ea <Memory_ClearBuffer+0x12e>
   {
      Pv->Record[i].ExternalHumidity    = 0;
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	4613      	mov	r3, r2
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	440b      	add	r3, r1
 80074d8:	3318      	adds	r3, #24
 80074da:	f04f 0200 	mov.w	r2, #0
 80074de:	601a      	str	r2, [r3, #0]
      Pv->Record[i].ExternalPM1         = 0;
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4613      	mov	r3, r2
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	1a9b      	subs	r3, r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	440b      	add	r3, r1
 80074ee:	330a      	adds	r3, #10
 80074f0:	2200      	movs	r2, #0
 80074f2:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].ExternalPM10        = 0;
 80074f4:	6879      	ldr	r1, [r7, #4]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4613      	mov	r3, r2
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	1a9b      	subs	r3, r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	440b      	add	r3, r1
 8007502:	330e      	adds	r3, #14
 8007504:	2200      	movs	r2, #0
 8007506:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].ExternalPM25        = 0;
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	4613      	mov	r3, r2
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	1a9b      	subs	r3, r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	440b      	add	r3, r1
 8007516:	330c      	adds	r3, #12
 8007518:	2200      	movs	r2, #0
 800751a:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].ExternalTemperature = 0;
 800751c:	6879      	ldr	r1, [r7, #4]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	4613      	mov	r3, r2
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	1a9b      	subs	r3, r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	440b      	add	r3, r1
 800752a:	3314      	adds	r3, #20
 800752c:	f04f 0200 	mov.w	r2, #0
 8007530:	601a      	str	r2, [r3, #0]
      Pv->Record[i].Hour                = 0;
 8007532:	6879      	ldr	r1, [r7, #4]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	4613      	mov	r3, r2
 8007538:	00db      	lsls	r3, r3, #3
 800753a:	1a9b      	subs	r3, r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	440b      	add	r3, r1
 8007540:	3303      	adds	r3, #3
 8007542:	2200      	movs	r2, #0
 8007544:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].InternalPM1         = 0;
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4613      	mov	r3, r2
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	1a9b      	subs	r3, r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	440b      	add	r3, r1
 8007554:	3304      	adds	r3, #4
 8007556:	2200      	movs	r2, #0
 8007558:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].InternalPM10        = 0;
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4613      	mov	r3, r2
 8007560:	00db      	lsls	r3, r3, #3
 8007562:	1a9b      	subs	r3, r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	440b      	add	r3, r1
 8007568:	3308      	adds	r3, #8
 800756a:	2200      	movs	r2, #0
 800756c:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].InternalPM25        = 0;
 800756e:	6879      	ldr	r1, [r7, #4]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4613      	mov	r3, r2
 8007574:	00db      	lsls	r3, r3, #3
 8007576:	1a9b      	subs	r3, r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	440b      	add	r3, r1
 800757c:	3306      	adds	r3, #6
 800757e:	2200      	movs	r2, #0
 8007580:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].Minute              = 0;
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4613      	mov	r3, r2
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	1a9b      	subs	r3, r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	440b      	add	r3, r1
 8007590:	3302      	adds	r3, #2
 8007592:	2200      	movs	r2, #0
 8007594:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].Pressure            = 0;
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4613      	mov	r3, r2
 800759c:	00db      	lsls	r3, r3, #3
 800759e:	1a9b      	subs	r3, r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	440b      	add	r3, r1
 80075a4:	3310      	adds	r3, #16
 80075a6:	f04f 0200 	mov.w	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]
      Pv->Record[i].Reserved            = 0;
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	4613      	mov	r3, r2
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	1a9b      	subs	r3, r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	440b      	add	r3, r1
 80075ba:	2200      	movs	r2, #0
 80075bc:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].Second              = 0;
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	4613      	mov	r3, r2
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	1a9b      	subs	r3, r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	440b      	add	r3, r1
 80075cc:	3301      	adds	r3, #1
 80075ce:	2200      	movs	r2, #0
 80075d0:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].Reserved            = 0;
 80075d2:	6879      	ldr	r1, [r7, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4613      	mov	r3, r2
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	1a9b      	subs	r3, r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	440b      	add	r3, r1
 80075e0:	2200      	movs	r2, #0
 80075e2:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < 9; i++)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3301      	adds	r3, #1
 80075e8:	60fb      	str	r3, [r7, #12]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	f77f af6c 	ble.w	80074ca <Memory_ClearBuffer+0xe>
   }
   Pv->PageCRC = CRC_INITIAL_VALUE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f04f 32ff 	mov.w	r2, #4294967295
 80075f8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
}
 80075fc:	bf00      	nop
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <RFP_DataFunction>:
static void RFP_DataFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b092      	sub	sp, #72	; 0x48
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
   uint8_t *TempPtr;
   MV_TypeDef Mv = { 0 };
 8007614:	f107 0314 	add.w	r3, r7, #20
 8007618:	2230      	movs	r2, #48	; 0x30
 800761a:	2100      	movs	r1, #0
 800761c:	4618      	mov	r0, r3
 800761e:	f00e ffc7 	bl	80165b0 <memset>
   TempPtr       = &Mv.ExtHumidity;
 8007622:	f107 0314 	add.w	r3, r7, #20
 8007626:	3304      	adds	r3, #4
 8007628:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr      = Data[DataStart];
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4413      	add	r3, r2
 8007630:	781a      	ldrb	r2, [r3, #0]
 8007632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007634:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8007636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007638:	3301      	adds	r3, #1
 800763a:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 1];
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3301      	adds	r3, #1
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	781a      	ldrb	r2, [r3, #0]
 8007646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007648:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 800764a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800764c:	3301      	adds	r3, #1
 800764e:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 2];
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3302      	adds	r3, #2
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	781a      	ldrb	r2, [r3, #0]
 800765a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800765c:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 800765e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007660:	3301      	adds	r3, #1
 8007662:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 3];
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	3303      	adds	r3, #3
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	781a      	ldrb	r2, [r3, #0]
 800766e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007670:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8007672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007674:	3301      	adds	r3, #1
 8007676:	647b      	str	r3, [r7, #68]	; 0x44
   TempPtr  = &Mv.ExtTemperature;
 8007678:	f107 0314 	add.w	r3, r7, #20
 800767c:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 5];
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3305      	adds	r3, #5
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	4413      	add	r3, r2
 8007686:	781a      	ldrb	r2, [r3, #0]
 8007688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800768a:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 800768c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800768e:	3301      	adds	r3, #1
 8007690:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 6];
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3306      	adds	r3, #6
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	4413      	add	r3, r2
 800769a:	781a      	ldrb	r2, [r3, #0]
 800769c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800769e:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80076a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076a2:	3301      	adds	r3, #1
 80076a4:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 7];
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	3307      	adds	r3, #7
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	4413      	add	r3, r2
 80076ae:	781a      	ldrb	r2, [r3, #0]
 80076b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b2:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80076b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b6:	3301      	adds	r3, #1
 80076b8:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 8];
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3308      	adds	r3, #8
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	4413      	add	r3, r2
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076c6:	701a      	strb	r2, [r3, #0]
   TempPtr  = &Mv.BatteryVoltage;
 80076c8:	f107 0314 	add.w	r3, r7, #20
 80076cc:	3328      	adds	r3, #40	; 0x28
 80076ce:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 13];
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	330d      	adds	r3, #13
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	4413      	add	r3, r2
 80076d8:	781a      	ldrb	r2, [r3, #0]
 80076da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076dc:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80076de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076e0:	3301      	adds	r3, #1
 80076e2:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 14];
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	330e      	adds	r3, #14
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	4413      	add	r3, r2
 80076ec:	781a      	ldrb	r2, [r3, #0]
 80076ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076f0:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80076f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076f4:	3301      	adds	r3, #1
 80076f6:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 15];
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	330f      	adds	r3, #15
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4413      	add	r3, r2
 8007700:	781a      	ldrb	r2, [r3, #0]
 8007702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007704:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8007706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007708:	3301      	adds	r3, #1
 800770a:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr        = Data[DataStart + 16];
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3310      	adds	r3, #16
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4413      	add	r3, r2
 8007714:	781a      	ldrb	r2, [r3, #0]
 8007716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007718:	701a      	strb	r2, [r3, #0]
   TempPtr         = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	647b      	str	r3, [r7, #68]	; 0x44
   Mv.ExtPM1       = (Data[22 + 3] | (Data[21 + 3] << 8));
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3319      	adds	r3, #25
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	b21a      	sxth	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3318      	adds	r3, #24
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	021b      	lsls	r3, r3, #8
 800772e:	b21b      	sxth	r3, r3
 8007730:	4313      	orrs	r3, r2
 8007732:	b21b      	sxth	r3, r3
 8007734:	b29b      	uxth	r3, r3
 8007736:	853b      	strh	r3, [r7, #40]	; 0x28
   Mv.ExtPM25      = (Data[28 + 3] | (Data[27 + 3] << 8));
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	331f      	adds	r3, #31
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	b21a      	sxth	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	331e      	adds	r3, #30
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	b21b      	sxth	r3, r3
 800774a:	4313      	orrs	r3, r2
 800774c:	b21b      	sxth	r3, r3
 800774e:	b29b      	uxth	r3, r3
 8007750:	857b      	strh	r3, [r7, #42]	; 0x2a
   Mv.ExtPM10      = (Data[25 + 3] | (Data[24 + 3] << 8));
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	331c      	adds	r3, #28
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	b21a      	sxth	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	331b      	adds	r3, #27
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	021b      	lsls	r3, r3, #8
 8007762:	b21b      	sxth	r3, r3
 8007764:	4313      	orrs	r3, r2
 8007766:	b21b      	sxth	r3, r3
 8007768:	b29b      	uxth	r3, r3
 800776a:	85bb      	strh	r3, [r7, #44]	; 0x2c
   Mv.BatteryState = Data[DataStart + 18];
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	3312      	adds	r3, #18
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	4413      	add	r3, r2
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   osMessageQueuePut(MeasurmentQueueHandle, &Mv, 0, osWaitForever);
 800777a:	4b06      	ldr	r3, [pc, #24]	; (8007794 <RFP_DataFunction+0x18c>)
 800777c:	6818      	ldr	r0, [r3, #0]
 800777e:	f107 0114 	add.w	r1, r7, #20
 8007782:	f04f 33ff 	mov.w	r3, #4294967295
 8007786:	2200      	movs	r2, #0
 8007788:	f00b faa0 	bl	8012ccc <osMessageQueuePut>
}
 800778c:	bf00      	nop
 800778e:	3748      	adds	r7, #72	; 0x48
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20003df0 	.word	0x20003df0

08007798 <rang>:
static double rang(double x)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	ed87 0b00 	vstr	d0, [r7]
   double A, b;
   b = x / 360;
 80077a2:	f04f 0200 	mov.w	r2, #0
 80077a6:	4b22      	ldr	r3, [pc, #136]	; (8007830 <rang+0x98>)
 80077a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077ac:	f7f9 f866 	bl	800087c <__aeabi_ddiv>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
   A = 360 * (b - (int)b);
 80077b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077bc:	f7f9 f9e4 	bl	8000b88 <__aeabi_d2iz>
 80077c0:	4603      	mov	r3, r0
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7f8 fec6 	bl	8000554 <__aeabi_i2d>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077d0:	f7f8 fd72 	bl	80002b8 <__aeabi_dsub>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	4610      	mov	r0, r2
 80077da:	4619      	mov	r1, r3
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	4b13      	ldr	r3, [pc, #76]	; (8007830 <rang+0x98>)
 80077e2:	f7f8 ff21 	bl	8000628 <__aeabi_dmul>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
   if(A < 0)
 80077ee:	f04f 0200 	mov.w	r2, #0
 80077f2:	f04f 0300 	mov.w	r3, #0
 80077f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80077fa:	f7f9 f987 	bl	8000b0c <__aeabi_dcmplt>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00a      	beq.n	800781a <rang+0x82>
      A = A + 360;
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	4b09      	ldr	r3, [pc, #36]	; (8007830 <rang+0x98>)
 800780a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800780e:	f7f8 fd55 	bl	80002bc <__adddf3>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	e9c7 2304 	strd	r2, r3, [r7, #16]
   return A;
 800781a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800781e:	ec43 2b17 	vmov	d7, r2, r3
}
 8007822:	eeb0 0a47 	vmov.f32	s0, s14
 8007826:	eef0 0a67 	vmov.f32	s1, s15
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	40768000 	.word	0x40768000
 8007834:	00000000 	.word	0x00000000

08007838 <faza>:
static double faza(double Rok, double Miesiac, double Dzien, double godzina, double min, double sec)
{
 8007838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783c:	b0a1      	sub	sp, #132	; 0x84
 800783e:	af00      	add	r7, sp, #0
 8007840:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8007844:	ed87 1b08 	vstr	d1, [r7, #32]
 8007848:	ed87 2b06 	vstr	d2, [r7, #24]
 800784c:	ed87 3b04 	vstr	d3, [r7, #16]
 8007850:	ed87 4b02 	vstr	d4, [r7, #8]
 8007854:	ed87 5b00 	vstr	d5, [r7]
   if(Miesiac > 2)
 8007858:	f04f 0200 	mov.w	r2, #0
 800785c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007860:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007864:	f7f9 f970 	bl	8000b48 <__aeabi_dcmpgt>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
   {
      Miesiac = Miesiac;
      Rok     = Rok;
   }
   if(Miesiac <= 2)
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007874:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007878:	f7f9 f952 	bl	8000b20 <__aeabi_dcmple>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d015      	beq.n	80078ae <faza+0x76>
   {
      Miesiac = Miesiac + 12;
 8007882:	f04f 0200 	mov.w	r2, #0
 8007886:	4bd6      	ldr	r3, [pc, #856]	; (8007be0 <faza+0x3a8>)
 8007888:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800788c:	f7f8 fd16 	bl	80002bc <__adddf3>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	e9c7 2308 	strd	r2, r3, [r7, #32]
      Rok     = Rok - 1;
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	4bd1      	ldr	r3, [pc, #836]	; (8007be4 <faza+0x3ac>)
 800789e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80078a2:	f7f8 fd09 	bl	80002b8 <__aeabi_dsub>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   }
   double A, b, phi1, phi2, jdp, tzd, elm, ams, aml, asd;
   A   = (int)(Rok / 100);
 80078ae:	f04f 0200 	mov.w	r2, #0
 80078b2:	4bcd      	ldr	r3, [pc, #820]	; (8007be8 <faza+0x3b0>)
 80078b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80078b8:	f7f8 ffe0 	bl	800087c <__aeabi_ddiv>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4610      	mov	r0, r2
 80078c2:	4619      	mov	r1, r3
 80078c4:	f7f9 f960 	bl	8000b88 <__aeabi_d2iz>
 80078c8:	4603      	mov	r3, r0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7f8 fe42 	bl	8000554 <__aeabi_i2d>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   b   = 2 - A + (int)(A / 4);
 80078d8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80078dc:	f04f 0000 	mov.w	r0, #0
 80078e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80078e4:	f7f8 fce8 	bl	80002b8 <__aeabi_dsub>
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4690      	mov	r8, r2
 80078ee:	4699      	mov	r9, r3
 80078f0:	f04f 0200 	mov.w	r2, #0
 80078f4:	4bbd      	ldr	r3, [pc, #756]	; (8007bec <faza+0x3b4>)
 80078f6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80078fa:	f7f8 ffbf 	bl	800087c <__aeabi_ddiv>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4610      	mov	r0, r2
 8007904:	4619      	mov	r1, r3
 8007906:	f7f9 f93f 	bl	8000b88 <__aeabi_d2iz>
 800790a:	4603      	mov	r3, r0
 800790c:	4618      	mov	r0, r3
 800790e:	f7f8 fe21 	bl	8000554 <__aeabi_i2d>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	4640      	mov	r0, r8
 8007918:	4649      	mov	r1, r9
 800791a:	f7f8 fccf 	bl	80002bc <__adddf3>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
   jdp = (int)(365.25 * (Rok + 4716)) + (int)(30.6001 * (Miesiac + 1)) + Dzien + b + ((godzina + min / 60 + sec / 3600) / 24) - 1524.5;
 8007926:	a392      	add	r3, pc, #584	; (adr r3, 8007b70 <faza+0x338>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007930:	f7f8 fcc4 	bl	80002bc <__adddf3>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	4610      	mov	r0, r2
 800793a:	4619      	mov	r1, r3
 800793c:	a38e      	add	r3, pc, #568	; (adr r3, 8007b78 <faza+0x340>)
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	f7f8 fe71 	bl	8000628 <__aeabi_dmul>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	4610      	mov	r0, r2
 800794c:	4619      	mov	r1, r3
 800794e:	f7f9 f91b 	bl	8000b88 <__aeabi_d2iz>
 8007952:	4606      	mov	r6, r0
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	4ba2      	ldr	r3, [pc, #648]	; (8007be4 <faza+0x3ac>)
 800795a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800795e:	f7f8 fcad 	bl	80002bc <__adddf3>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4610      	mov	r0, r2
 8007968:	4619      	mov	r1, r3
 800796a:	a385      	add	r3, pc, #532	; (adr r3, 8007b80 <faza+0x348>)
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f7f8 fe5a 	bl	8000628 <__aeabi_dmul>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4610      	mov	r0, r2
 800797a:	4619      	mov	r1, r3
 800797c:	f7f9 f904 	bl	8000b88 <__aeabi_d2iz>
 8007980:	4603      	mov	r3, r0
 8007982:	4433      	add	r3, r6
 8007984:	4618      	mov	r0, r3
 8007986:	f7f8 fde5 	bl	8000554 <__aeabi_i2d>
 800798a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800798e:	f7f8 fc95 	bl	80002bc <__adddf3>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4610      	mov	r0, r2
 8007998:	4619      	mov	r1, r3
 800799a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800799e:	f7f8 fc8d 	bl	80002bc <__adddf3>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4690      	mov	r8, r2
 80079a8:	4699      	mov	r9, r3
 80079aa:	f04f 0200 	mov.w	r2, #0
 80079ae:	4b90      	ldr	r3, [pc, #576]	; (8007bf0 <faza+0x3b8>)
 80079b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079b4:	f7f8 ff62 	bl	800087c <__aeabi_ddiv>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4610      	mov	r0, r2
 80079be:	4619      	mov	r1, r3
 80079c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079c4:	f7f8 fc7a 	bl	80002bc <__adddf3>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4692      	mov	sl, r2
 80079ce:	469b      	mov	fp, r3
 80079d0:	a36d      	add	r3, pc, #436	; (adr r3, 8007b88 <faza+0x350>)
 80079d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079da:	f7f8 ff4f 	bl	800087c <__aeabi_ddiv>
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4650      	mov	r0, sl
 80079e4:	4659      	mov	r1, fp
 80079e6:	f7f8 fc69 	bl	80002bc <__adddf3>
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	4610      	mov	r0, r2
 80079f0:	4619      	mov	r1, r3
 80079f2:	f04f 0200 	mov.w	r2, #0
 80079f6:	4b7f      	ldr	r3, [pc, #508]	; (8007bf4 <faza+0x3bc>)
 80079f8:	f7f8 ff40 	bl	800087c <__aeabi_ddiv>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4640      	mov	r0, r8
 8007a02:	4649      	mov	r1, r9
 8007a04:	f7f8 fc5a 	bl	80002bc <__adddf3>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4619      	mov	r1, r3
 8007a10:	a35f      	add	r3, pc, #380	; (adr r3, 8007b90 <faza+0x358>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f7f8 fc4f 	bl	80002b8 <__aeabi_dsub>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   jdp = jdp;
   tzd = (jdp - 2451545) / 36525;
 8007a22:	a35d      	add	r3, pc, #372	; (adr r3, 8007b98 <faza+0x360>)
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007a2c:	f7f8 fc44 	bl	80002b8 <__aeabi_dsub>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	4610      	mov	r0, r2
 8007a36:	4619      	mov	r1, r3
 8007a38:	a359      	add	r3, pc, #356	; (adr r3, 8007ba0 <faza+0x368>)
 8007a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3e:	f7f8 ff1d 	bl	800087c <__aeabi_ddiv>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
   elm = rang(297.8502042 + 445267.1115168 * tzd - (0.00163 * tzd * tzd) + tzd * tzd * tzd / 545868 - tzd * tzd * tzd * tzd / 113065000);
 8007a4a:	a357      	add	r3, pc, #348	; (adr r3, 8007ba8 <faza+0x370>)
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007a54:	f7f8 fde8 	bl	8000628 <__aeabi_dmul>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4619      	mov	r1, r3
 8007a60:	a353      	add	r3, pc, #332	; (adr r3, 8007bb0 <faza+0x378>)
 8007a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a66:	f7f8 fc29 	bl	80002bc <__adddf3>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	4690      	mov	r8, r2
 8007a70:	4699      	mov	r9, r3
 8007a72:	a351      	add	r3, pc, #324	; (adr r3, 8007bb8 <faza+0x380>)
 8007a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a78:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007a7c:	f7f8 fdd4 	bl	8000628 <__aeabi_dmul>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4610      	mov	r0, r2
 8007a86:	4619      	mov	r1, r3
 8007a88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a8c:	f7f8 fdcc 	bl	8000628 <__aeabi_dmul>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	4640      	mov	r0, r8
 8007a96:	4649      	mov	r1, r9
 8007a98:	f7f8 fc0e 	bl	80002b8 <__aeabi_dsub>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4690      	mov	r8, r2
 8007aa2:	4699      	mov	r9, r3
 8007aa4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007aa8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007aac:	f7f8 fdbc 	bl	8000628 <__aeabi_dmul>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007abc:	f7f8 fdb4 	bl	8000628 <__aeabi_dmul>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	a33d      	add	r3, pc, #244	; (adr r3, 8007bc0 <faza+0x388>)
 8007aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ace:	f7f8 fed5 	bl	800087c <__aeabi_ddiv>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	4649      	mov	r1, r9
 8007ada:	f7f8 fbef 	bl	80002bc <__adddf3>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	4690      	mov	r8, r2
 8007ae4:	4699      	mov	r9, r3
 8007ae6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007aea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007aee:	f7f8 fd9b 	bl	8000628 <__aeabi_dmul>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	4610      	mov	r0, r2
 8007af8:	4619      	mov	r1, r3
 8007afa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007afe:	f7f8 fd93 	bl	8000628 <__aeabi_dmul>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4610      	mov	r0, r2
 8007b08:	4619      	mov	r1, r3
 8007b0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b0e:	f7f8 fd8b 	bl	8000628 <__aeabi_dmul>
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	4610      	mov	r0, r2
 8007b18:	4619      	mov	r1, r3
 8007b1a:	a32b      	add	r3, pc, #172	; (adr r3, 8007bc8 <faza+0x390>)
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	f7f8 feac 	bl	800087c <__aeabi_ddiv>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4640      	mov	r0, r8
 8007b2a:	4649      	mov	r1, r9
 8007b2c:	f7f8 fbc4 	bl	80002b8 <__aeabi_dsub>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	ec43 2b17 	vmov	d7, r2, r3
 8007b38:	eeb0 0a47 	vmov.f32	s0, s14
 8007b3c:	eef0 0a67 	vmov.f32	s1, s15
 8007b40:	f7ff fe2a 	bl	8007798 <rang>
 8007b44:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   ams = rang(357.5291092 + 35999.0502909 * tzd - 0.0001536 * tzd * tzd + tzd * tzd * tzd / 24490000);
 8007b48:	a321      	add	r3, pc, #132	; (adr r3, 8007bd0 <faza+0x398>)
 8007b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007b52:	f7f8 fd69 	bl	8000628 <__aeabi_dmul>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	a31e      	add	r3, pc, #120	; (adr r3, 8007bd8 <faza+0x3a0>)
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f7f8 fbaa 	bl	80002bc <__adddf3>
 8007b68:	e046      	b.n	8007bf8 <faza+0x3c0>
 8007b6a:	bf00      	nop
 8007b6c:	f3af 8000 	nop.w
 8007b70:	00000000 	.word	0x00000000
 8007b74:	40b26c00 	.word	0x40b26c00
 8007b78:	00000000 	.word	0x00000000
 8007b7c:	4076d400 	.word	0x4076d400
 8007b80:	27525461 	.word	0x27525461
 8007b84:	403e99a0 	.word	0x403e99a0
 8007b88:	00000000 	.word	0x00000000
 8007b8c:	40ac2000 	.word	0x40ac2000
 8007b90:	00000000 	.word	0x00000000
 8007b94:	4097d200 	.word	0x4097d200
 8007b98:	80000000 	.word	0x80000000
 8007b9c:	4142b42c 	.word	0x4142b42c
 8007ba0:	00000000 	.word	0x00000000
 8007ba4:	40e1d5a0 	.word	0x40e1d5a0
 8007ba8:	723175c4 	.word	0x723175c4
 8007bac:	411b2d4c 	.word	0x411b2d4c
 8007bb0:	6fb81ec0 	.word	0x6fb81ec0
 8007bb4:	40729d9a 	.word	0x40729d9a
 8007bb8:	2c5197a2 	.word	0x2c5197a2
 8007bbc:	3f5ab4b7 	.word	0x3f5ab4b7
 8007bc0:	00000000 	.word	0x00000000
 8007bc4:	4120a898 	.word	0x4120a898
 8007bc8:	a0000000 	.word	0xa0000000
 8007bcc:	419af4f0 	.word	0x419af4f0
 8007bd0:	9bfba959 	.word	0x9bfba959
 8007bd4:	40e193e1 	.word	0x40e193e1
 8007bd8:	3b356034 	.word	0x3b356034
 8007bdc:	40765877 	.word	0x40765877
 8007be0:	40280000 	.word	0x40280000
 8007be4:	3ff00000 	.word	0x3ff00000
 8007be8:	40590000 	.word	0x40590000
 8007bec:	40100000 	.word	0x40100000
 8007bf0:	404e0000 	.word	0x404e0000
 8007bf4:	40380000 	.word	0x40380000
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4690      	mov	r8, r2
 8007bfe:	4699      	mov	r9, r3
 8007c00:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 8007c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c08:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c0c:	f7f8 fd0c 	bl	8000628 <__aeabi_dmul>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4610      	mov	r0, r2
 8007c16:	4619      	mov	r1, r3
 8007c18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c1c:	f7f8 fd04 	bl	8000628 <__aeabi_dmul>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4640      	mov	r0, r8
 8007c26:	4649      	mov	r1, r9
 8007c28:	f7f8 fb46 	bl	80002b8 <__aeabi_dsub>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4690      	mov	r8, r2
 8007c32:	4699      	mov	r9, r3
 8007c34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c38:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c3c:	f7f8 fcf4 	bl	8000628 <__aeabi_dmul>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	4610      	mov	r0, r2
 8007c46:	4619      	mov	r1, r3
 8007c48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c4c:	f7f8 fcec 	bl	8000628 <__aeabi_dmul>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	4610      	mov	r0, r2
 8007c56:	4619      	mov	r1, r3
 8007c58:	f20f 43cc 	addw	r3, pc, #1228	; 0x4cc
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	f7f8 fe0c 	bl	800087c <__aeabi_ddiv>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4640      	mov	r0, r8
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	f7f8 fb26 	bl	80002bc <__adddf3>
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	ec43 2b17 	vmov	d7, r2, r3
 8007c78:	eeb0 0a47 	vmov.f32	s0, s14
 8007c7c:	eef0 0a67 	vmov.f32	s1, s15
 8007c80:	f7ff fd8a 	bl	8007798 <rang>
 8007c84:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
   aml = rang(134.9634114 + 477198.8676313 * tzd - 0.008997 * tzd * tzd + tzd * tzd * tzd / 69699 - tzd * tzd * tzd * tzd / 14712000);
 8007c88:	f20f 43a4 	addw	r3, pc, #1188	; 0x4a4
 8007c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c90:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c94:	f7f8 fcc8 	bl	8000628 <__aeabi_dmul>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	f20f 4394 	addw	r3, pc, #1172	; 0x494
 8007ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca8:	f7f8 fb08 	bl	80002bc <__adddf3>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4690      	mov	r8, r2
 8007cb2:	4699      	mov	r9, r3
 8007cb4:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007cc0:	f7f8 fcb2 	bl	8000628 <__aeabi_dmul>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4619      	mov	r1, r3
 8007ccc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007cd0:	f7f8 fcaa 	bl	8000628 <__aeabi_dmul>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4640      	mov	r0, r8
 8007cda:	4649      	mov	r1, r9
 8007cdc:	f7f8 faec 	bl	80002b8 <__aeabi_dsub>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4690      	mov	r8, r2
 8007ce6:	4699      	mov	r9, r3
 8007ce8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007cec:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007cf0:	f7f8 fc9a 	bl	8000628 <__aeabi_dmul>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d00:	f7f8 fc92 	bl	8000628 <__aeabi_dmul>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	f20f 4338 	addw	r3, pc, #1080	; 0x438
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f7f8 fdb2 	bl	800087c <__aeabi_ddiv>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	4649      	mov	r1, r9
 8007d20:	f7f8 facc 	bl	80002bc <__adddf3>
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	4690      	mov	r8, r2
 8007d2a:	4699      	mov	r9, r3
 8007d2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d30:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007d34:	f7f8 fc78 	bl	8000628 <__aeabi_dmul>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4619      	mov	r1, r3
 8007d40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d44:	f7f8 fc70 	bl	8000628 <__aeabi_dmul>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4619      	mov	r1, r3
 8007d50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d54:	f7f8 fc68 	bl	8000628 <__aeabi_dmul>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4619      	mov	r1, r3
 8007d60:	a3fb      	add	r3, pc, #1004	; (adr r3, 8008150 <faza+0x918>)
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	f7f8 fd89 	bl	800087c <__aeabi_ddiv>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4640      	mov	r0, r8
 8007d70:	4649      	mov	r1, r9
 8007d72:	f7f8 faa1 	bl	80002b8 <__aeabi_dsub>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	ec43 2b17 	vmov	d7, r2, r3
 8007d7e:	eeb0 0a47 	vmov.f32	s0, s14
 8007d82:	eef0 0a67 	vmov.f32	s1, s15
 8007d86:	f7ff fd07 	bl	8007798 <rang>
 8007d8a:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 8007d8e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d92:	f04f 0000 	mov.w	r0, #0
 8007d96:	49e0      	ldr	r1, [pc, #896]	; (8008118 <faza+0x8e0>)
 8007d98:	f7f8 fa8e 	bl	80002b8 <__aeabi_dsub>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4690      	mov	r8, r2
 8007da2:	4699      	mov	r9, r3
 8007da4:	a3c0      	add	r3, pc, #768	; (adr r3, 80080a8 <faza+0x870>)
 8007da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007daa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007dae:	f7f8 fc3b 	bl	8000628 <__aeabi_dmul>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	ec43 2b17 	vmov	d7, r2, r3
 8007dba:	eeb0 0a47 	vmov.f32	s0, s14
 8007dbe:	eef0 0a67 	vmov.f32	s1, s15
 8007dc2:	f013 f8b1 	bl	801af28 <sin>
 8007dc6:	ec51 0b10 	vmov	r0, r1, d0
 8007dca:	a3b9      	add	r3, pc, #740	; (adr r3, 80080b0 <faza+0x878>)
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	f7f8 fc2a 	bl	8000628 <__aeabi_dmul>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4640      	mov	r0, r8
 8007dda:	4649      	mov	r1, r9
 8007ddc:	f7f8 fa6c 	bl	80002b8 <__aeabi_dsub>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	4690      	mov	r8, r2
 8007de6:	4699      	mov	r9, r3
 8007de8:	a3af      	add	r3, pc, #700	; (adr r3, 80080a8 <faza+0x870>)
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007df2:	f7f8 fc19 	bl	8000628 <__aeabi_dmul>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	ec43 2b17 	vmov	d7, r2, r3
 8007dfe:	eeb0 0a47 	vmov.f32	s0, s14
 8007e02:	eef0 0a67 	vmov.f32	s1, s15
 8007e06:	f013 f88f 	bl	801af28 <sin>
 8007e0a:	ec51 0b10 	vmov	r0, r1, d0
 8007e0e:	a3aa      	add	r3, pc, #680	; (adr r3, 80080b8 <faza+0x880>)
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	f7f8 fc08 	bl	8000628 <__aeabi_dmul>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	4649      	mov	r1, r9
 8007e20:	f7f8 fa4c 	bl	80002bc <__adddf3>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	4690      	mov	r8, r2
 8007e2a:	4699      	mov	r9, r3
 8007e2c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	f7f8 fa42 	bl	80002bc <__adddf3>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	4619      	mov	r1, r3
 8007e40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e44:	f7f8 fa38 	bl	80002b8 <__aeabi_dsub>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4619      	mov	r1, r3
 8007e50:	a395      	add	r3, pc, #596	; (adr r3, 80080a8 <faza+0x870>)
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	f7f8 fbe7 	bl	8000628 <__aeabi_dmul>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	ec43 2b17 	vmov	d7, r2, r3
 8007e62:	eeb0 0a47 	vmov.f32	s0, s14
 8007e66:	eef0 0a67 	vmov.f32	s1, s15
 8007e6a:	f013 f85d 	bl	801af28 <sin>
 8007e6e:	ec51 0b10 	vmov	r0, r1, d0
 8007e72:	a393      	add	r3, pc, #588	; (adr r3, 80080c0 <faza+0x888>)
 8007e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e78:	f7f8 fbd6 	bl	8000628 <__aeabi_dmul>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4640      	mov	r0, r8
 8007e82:	4649      	mov	r1, r9
 8007e84:	f7f8 fa18 	bl	80002b8 <__aeabi_dsub>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4690      	mov	r8, r2
 8007e8e:	4699      	mov	r9, r3
         - (0.658 * sin((M_PI / 180) * ((2 * elm)))) - (0.214 * sin((M_PI / 180) * ((2 * aml)))) - (0.11 * sin((M_PI / 180) * ((elm))));
 8007e90:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	f7f8 fa10 	bl	80002bc <__adddf3>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	a380      	add	r3, pc, #512	; (adr r3, 80080a8 <faza+0x870>)
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	f7f8 fbbd 	bl	8000628 <__aeabi_dmul>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	ec43 2b17 	vmov	d7, r2, r3
 8007eb6:	eeb0 0a47 	vmov.f32	s0, s14
 8007eba:	eef0 0a67 	vmov.f32	s1, s15
 8007ebe:	f013 f833 	bl	801af28 <sin>
 8007ec2:	ec51 0b10 	vmov	r0, r1, d0
 8007ec6:	a380      	add	r3, pc, #512	; (adr r3, 80080c8 <faza+0x890>)
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	f7f8 fbac 	bl	8000628 <__aeabi_dmul>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4640      	mov	r0, r8
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	f7f8 f9ee 	bl	80002b8 <__aeabi_dsub>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4690      	mov	r8, r2
 8007ee2:	4699      	mov	r9, r3
 8007ee4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	f7f8 f9e6 	bl	80002bc <__adddf3>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	a36b      	add	r3, pc, #428	; (adr r3, 80080a8 <faza+0x870>)
 8007efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efe:	f7f8 fb93 	bl	8000628 <__aeabi_dmul>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	ec43 2b17 	vmov	d7, r2, r3
 8007f0a:	eeb0 0a47 	vmov.f32	s0, s14
 8007f0e:	eef0 0a67 	vmov.f32	s1, s15
 8007f12:	f013 f809 	bl	801af28 <sin>
 8007f16:	ec51 0b10 	vmov	r0, r1, d0
 8007f1a:	a36d      	add	r3, pc, #436	; (adr r3, 80080d0 <faza+0x898>)
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	f7f8 fb82 	bl	8000628 <__aeabi_dmul>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4640      	mov	r0, r8
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	f7f8 f9c4 	bl	80002b8 <__aeabi_dsub>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4690      	mov	r8, r2
 8007f36:	4699      	mov	r9, r3
 8007f38:	a35b      	add	r3, pc, #364	; (adr r3, 80080a8 <faza+0x870>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f42:	f7f8 fb71 	bl	8000628 <__aeabi_dmul>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	ec43 2b17 	vmov	d7, r2, r3
 8007f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8007f52:	eef0 0a67 	vmov.f32	s1, s15
 8007f56:	f012 ffe7 	bl	801af28 <sin>
 8007f5a:	ec51 0b10 	vmov	r0, r1, d0
 8007f5e:	a35e      	add	r3, pc, #376	; (adr r3, 80080d8 <faza+0x8a0>)
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f7f8 fb60 	bl	8000628 <__aeabi_dmul>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	4649      	mov	r1, r9
 8007f70:	f7f8 f9a2 	bl	80002b8 <__aeabi_dsub>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   phi1 = (1 + cos((M_PI / 180) * (asd))) / 2;
 8007f7c:	a34a      	add	r3, pc, #296	; (adr r3, 80080a8 <faza+0x870>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007f86:	f7f8 fb4f 	bl	8000628 <__aeabi_dmul>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	ec43 2b17 	vmov	d7, r2, r3
 8007f92:	eeb0 0a47 	vmov.f32	s0, s14
 8007f96:	eef0 0a67 	vmov.f32	s1, s15
 8007f9a:	f012 ff71 	bl	801ae80 <cos>
 8007f9e:	ec51 0b10 	vmov	r0, r1, d0
 8007fa2:	f04f 0200 	mov.w	r2, #0
 8007fa6:	4b5d      	ldr	r3, [pc, #372]	; (800811c <faza+0x8e4>)
 8007fa8:	f7f8 f988 	bl	80002bc <__adddf3>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	f04f 0200 	mov.w	r2, #0
 8007fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fbc:	f7f8 fc5e 	bl	800087c <__aeabi_ddiv>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

   tzd = (jdp + (0.5 / 24) - 2451545) / 36525;
 8007fc8:	a345      	add	r3, pc, #276	; (adr r3, 80080e0 <faza+0x8a8>)
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007fd2:	f7f8 f973 	bl	80002bc <__adddf3>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4610      	mov	r0, r2
 8007fdc:	4619      	mov	r1, r3
 8007fde:	a342      	add	r3, pc, #264	; (adr r3, 80080e8 <faza+0x8b0>)
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	f7f8 f968 	bl	80002b8 <__aeabi_dsub>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4610      	mov	r0, r2
 8007fee:	4619      	mov	r1, r3
 8007ff0:	a33f      	add	r3, pc, #252	; (adr r3, 80080f0 <faza+0x8b8>)
 8007ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff6:	f7f8 fc41 	bl	800087c <__aeabi_ddiv>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
   elm = rang(297.8502042 + 445267.1115168 * tzd - (0.00163 * tzd * tzd) + tzd * tzd * tzd / 545868 - tzd * tzd * tzd * tzd / 113065000);
 8008002:	a33d      	add	r3, pc, #244	; (adr r3, 80080f8 <faza+0x8c0>)
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800800c:	f7f8 fb0c 	bl	8000628 <__aeabi_dmul>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	4610      	mov	r0, r2
 8008016:	4619      	mov	r1, r3
 8008018:	a339      	add	r3, pc, #228	; (adr r3, 8008100 <faza+0x8c8>)
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	f7f8 f94d 	bl	80002bc <__adddf3>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4690      	mov	r8, r2
 8008028:	4699      	mov	r9, r3
 800802a:	a337      	add	r3, pc, #220	; (adr r3, 8008108 <faza+0x8d0>)
 800802c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008030:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008034:	f7f8 faf8 	bl	8000628 <__aeabi_dmul>
 8008038:	4602      	mov	r2, r0
 800803a:	460b      	mov	r3, r1
 800803c:	4610      	mov	r0, r2
 800803e:	4619      	mov	r1, r3
 8008040:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008044:	f7f8 faf0 	bl	8000628 <__aeabi_dmul>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4640      	mov	r0, r8
 800804e:	4649      	mov	r1, r9
 8008050:	f7f8 f932 	bl	80002b8 <__aeabi_dsub>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4690      	mov	r8, r2
 800805a:	4699      	mov	r9, r3
 800805c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008060:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008064:	f7f8 fae0 	bl	8000628 <__aeabi_dmul>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4610      	mov	r0, r2
 800806e:	4619      	mov	r1, r3
 8008070:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008074:	f7f8 fad8 	bl	8000628 <__aeabi_dmul>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	4610      	mov	r0, r2
 800807e:	4619      	mov	r1, r3
 8008080:	a323      	add	r3, pc, #140	; (adr r3, 8008110 <faza+0x8d8>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	f7f8 fbf9 	bl	800087c <__aeabi_ddiv>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	4640      	mov	r0, r8
 8008090:	4649      	mov	r1, r9
 8008092:	f7f8 f913 	bl	80002bc <__adddf3>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4690      	mov	r8, r2
 800809c:	4699      	mov	r9, r3
 800809e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80080a2:	e059      	b.n	8008158 <faza+0x920>
 80080a4:	f3af 8000 	nop.w
 80080a8:	a2529d39 	.word	0xa2529d39
 80080ac:	3f91df46 	.word	0x3f91df46
 80080b0:	9db22d0e 	.word	0x9db22d0e
 80080b4:	401927ef 	.word	0x401927ef
 80080b8:	cccccccd 	.word	0xcccccccd
 80080bc:	4000cccc 	.word	0x4000cccc
 80080c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80080c4:	3ff4624d 	.word	0x3ff4624d
 80080c8:	04189375 	.word	0x04189375
 80080cc:	3fe50e56 	.word	0x3fe50e56
 80080d0:	1cac0831 	.word	0x1cac0831
 80080d4:	3fcb645a 	.word	0x3fcb645a
 80080d8:	c28f5c29 	.word	0xc28f5c29
 80080dc:	3fbc28f5 	.word	0x3fbc28f5
 80080e0:	55555555 	.word	0x55555555
 80080e4:	3f955555 	.word	0x3f955555
 80080e8:	80000000 	.word	0x80000000
 80080ec:	4142b42c 	.word	0x4142b42c
 80080f0:	00000000 	.word	0x00000000
 80080f4:	40e1d5a0 	.word	0x40e1d5a0
 80080f8:	723175c4 	.word	0x723175c4
 80080fc:	411b2d4c 	.word	0x411b2d4c
 8008100:	6fb81ec0 	.word	0x6fb81ec0
 8008104:	40729d9a 	.word	0x40729d9a
 8008108:	2c5197a2 	.word	0x2c5197a2
 800810c:	3f5ab4b7 	.word	0x3f5ab4b7
 8008110:	00000000 	.word	0x00000000
 8008114:	4120a898 	.word	0x4120a898
 8008118:	40668000 	.word	0x40668000
 800811c:	3ff00000 	.word	0x3ff00000
 8008120:	f40d8376 	.word	0xf40d8376
 8008124:	3f2421f5 	.word	0x3f2421f5
 8008128:	00000000 	.word	0x00000000
 800812c:	41775b01 	.word	0x41775b01
 8008130:	787456ea 	.word	0x787456ea
 8008134:	411d203b 	.word	0x411d203b
 8008138:	4424f2ff 	.word	0x4424f2ff
 800813c:	4060ded4 	.word	0x4060ded4
 8008140:	e618ce2d 	.word	0xe618ce2d
 8008144:	3f826d04 	.word	0x3f826d04
 8008148:	00000000 	.word	0x00000000
 800814c:	40f10430 	.word	0x40f10430
 8008150:	00000000 	.word	0x00000000
 8008154:	416c0f98 	.word	0x416c0f98
 8008158:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800815c:	f7f8 fa64 	bl	8000628 <__aeabi_dmul>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4610      	mov	r0, r2
 8008166:	4619      	mov	r1, r3
 8008168:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800816c:	f7f8 fa5c 	bl	8000628 <__aeabi_dmul>
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	4610      	mov	r0, r2
 8008176:	4619      	mov	r1, r3
 8008178:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800817c:	f7f8 fa54 	bl	8000628 <__aeabi_dmul>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4610      	mov	r0, r2
 8008186:	4619      	mov	r1, r3
 8008188:	f20f 43b8 	addw	r3, pc, #1208	; 0x4b8
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	f7f8 fb74 	bl	800087c <__aeabi_ddiv>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4640      	mov	r0, r8
 800819a:	4649      	mov	r1, r9
 800819c:	f7f8 f88c 	bl	80002b8 <__aeabi_dsub>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	ec43 2b17 	vmov	d7, r2, r3
 80081a8:	eeb0 0a47 	vmov.f32	s0, s14
 80081ac:	eef0 0a67 	vmov.f32	s1, s15
 80081b0:	f7ff faf2 	bl	8007798 <rang>
 80081b4:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   ams = rang(357.5291092 + 35999.0502909 * tzd - 0.0001536 * tzd * tzd + tzd * tzd * tzd / 24490000);
 80081b8:	f20f 4390 	addw	r3, pc, #1168	; 0x490
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80081c4:	f7f8 fa30 	bl	8000628 <__aeabi_dmul>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	4610      	mov	r0, r2
 80081ce:	4619      	mov	r1, r3
 80081d0:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 80081d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d8:	f7f8 f870 	bl	80002bc <__adddf3>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4690      	mov	r8, r2
 80081e2:	4699      	mov	r9, r3
 80081e4:	f20f 4374 	addw	r3, pc, #1140	; 0x474
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80081f0:	f7f8 fa1a 	bl	8000628 <__aeabi_dmul>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4610      	mov	r0, r2
 80081fa:	4619      	mov	r1, r3
 80081fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008200:	f7f8 fa12 	bl	8000628 <__aeabi_dmul>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4640      	mov	r0, r8
 800820a:	4649      	mov	r1, r9
 800820c:	f7f8 f854 	bl	80002b8 <__aeabi_dsub>
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	4690      	mov	r8, r2
 8008216:	4699      	mov	r9, r3
 8008218:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800821c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008220:	f7f8 fa02 	bl	8000628 <__aeabi_dmul>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4610      	mov	r0, r2
 800822a:	4619      	mov	r1, r3
 800822c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008230:	f7f8 f9fa 	bl	8000628 <__aeabi_dmul>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	4610      	mov	r0, r2
 800823a:	4619      	mov	r1, r3
 800823c:	f20f 4324 	addw	r3, pc, #1060	; 0x424
 8008240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008244:	f7f8 fb1a 	bl	800087c <__aeabi_ddiv>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4640      	mov	r0, r8
 800824e:	4649      	mov	r1, r9
 8008250:	f7f8 f834 	bl	80002bc <__adddf3>
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	ec43 2b17 	vmov	d7, r2, r3
 800825c:	eeb0 0a47 	vmov.f32	s0, s14
 8008260:	eef0 0a67 	vmov.f32	s1, s15
 8008264:	f7ff fa98 	bl	8007798 <rang>
 8008268:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
   aml = rang(134.9634114 + 477198.8676313 * tzd - 0.008997 * tzd * tzd + tzd * tzd * tzd / 69699 - tzd * tzd * tzd * tzd / 14712000);
 800826c:	a3ff      	add	r3, pc, #1020	; (adr r3, 800866c <faza+0xe34>)
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008276:	f7f8 f9d7 	bl	8000628 <__aeabi_dmul>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4610      	mov	r0, r2
 8008280:	4619      	mov	r1, r3
 8008282:	a3fc      	add	r3, pc, #1008	; (adr r3, 8008674 <faza+0xe3c>)
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f7f8 f818 	bl	80002bc <__adddf3>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4690      	mov	r8, r2
 8008292:	4699      	mov	r9, r3
 8008294:	a3f9      	add	r3, pc, #996	; (adr r3, 800867c <faza+0xe44>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800829e:	f7f8 f9c3 	bl	8000628 <__aeabi_dmul>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	4610      	mov	r0, r2
 80082a8:	4619      	mov	r1, r3
 80082aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082ae:	f7f8 f9bb 	bl	8000628 <__aeabi_dmul>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4640      	mov	r0, r8
 80082b8:	4649      	mov	r1, r9
 80082ba:	f7f7 fffd 	bl	80002b8 <__aeabi_dsub>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4690      	mov	r8, r2
 80082c4:	4699      	mov	r9, r3
 80082c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80082ce:	f7f8 f9ab 	bl	8000628 <__aeabi_dmul>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	4610      	mov	r0, r2
 80082d8:	4619      	mov	r1, r3
 80082da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082de:	f7f8 f9a3 	bl	8000628 <__aeabi_dmul>
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	4610      	mov	r0, r2
 80082e8:	4619      	mov	r1, r3
 80082ea:	a3e6      	add	r3, pc, #920	; (adr r3, 8008684 <faza+0xe4c>)
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	f7f8 fac4 	bl	800087c <__aeabi_ddiv>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4640      	mov	r0, r8
 80082fa:	4649      	mov	r1, r9
 80082fc:	f7f7 ffde 	bl	80002bc <__adddf3>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4690      	mov	r8, r2
 8008306:	4699      	mov	r9, r3
 8008308:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800830c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008310:	f7f8 f98a 	bl	8000628 <__aeabi_dmul>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	4610      	mov	r0, r2
 800831a:	4619      	mov	r1, r3
 800831c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008320:	f7f8 f982 	bl	8000628 <__aeabi_dmul>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4610      	mov	r0, r2
 800832a:	4619      	mov	r1, r3
 800832c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008330:	f7f8 f97a 	bl	8000628 <__aeabi_dmul>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	4610      	mov	r0, r2
 800833a:	4619      	mov	r1, r3
 800833c:	a3d3      	add	r3, pc, #844	; (adr r3, 800868c <faza+0xe54>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	f7f8 fa9b 	bl	800087c <__aeabi_ddiv>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4640      	mov	r0, r8
 800834c:	4649      	mov	r1, r9
 800834e:	f7f7 ffb3 	bl	80002b8 <__aeabi_dsub>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	ec43 2b17 	vmov	d7, r2, r3
 800835a:	eeb0 0a47 	vmov.f32	s0, s14
 800835e:	eef0 0a67 	vmov.f32	s1, s15
 8008362:	f7ff fa19 	bl	8007798 <rang>
 8008366:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 800836a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800836e:	f04f 0000 	mov.w	r0, #0
 8008372:	49b1      	ldr	r1, [pc, #708]	; (8008638 <faza+0xe00>)
 8008374:	f7f7 ffa0 	bl	80002b8 <__aeabi_dsub>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4690      	mov	r8, r2
 800837e:	4699      	mov	r9, r3
 8008380:	a39f      	add	r3, pc, #636	; (adr r3, 8008600 <faza+0xdc8>)
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800838a:	f7f8 f94d 	bl	8000628 <__aeabi_dmul>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	ec43 2b17 	vmov	d7, r2, r3
 8008396:	eeb0 0a47 	vmov.f32	s0, s14
 800839a:	eef0 0a67 	vmov.f32	s1, s15
 800839e:	f012 fdc3 	bl	801af28 <sin>
 80083a2:	ec51 0b10 	vmov	r0, r1, d0
 80083a6:	a398      	add	r3, pc, #608	; (adr r3, 8008608 <faza+0xdd0>)
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	f7f8 f93c 	bl	8000628 <__aeabi_dmul>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	4640      	mov	r0, r8
 80083b6:	4649      	mov	r1, r9
 80083b8:	f7f7 ff7e 	bl	80002b8 <__aeabi_dsub>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	4690      	mov	r8, r2
 80083c2:	4699      	mov	r9, r3
 80083c4:	a38e      	add	r3, pc, #568	; (adr r3, 8008600 <faza+0xdc8>)
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80083ce:	f7f8 f92b 	bl	8000628 <__aeabi_dmul>
 80083d2:	4602      	mov	r2, r0
 80083d4:	460b      	mov	r3, r1
 80083d6:	ec43 2b17 	vmov	d7, r2, r3
 80083da:	eeb0 0a47 	vmov.f32	s0, s14
 80083de:	eef0 0a67 	vmov.f32	s1, s15
 80083e2:	f012 fda1 	bl	801af28 <sin>
 80083e6:	ec51 0b10 	vmov	r0, r1, d0
 80083ea:	a389      	add	r3, pc, #548	; (adr r3, 8008610 <faza+0xdd8>)
 80083ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f0:	f7f8 f91a 	bl	8000628 <__aeabi_dmul>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4640      	mov	r0, r8
 80083fa:	4649      	mov	r1, r9
 80083fc:	f7f7 ff5e 	bl	80002bc <__adddf3>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4690      	mov	r8, r2
 8008406:	4699      	mov	r9, r3
 8008408:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	f7f7 ff54 	bl	80002bc <__adddf3>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4610      	mov	r0, r2
 800841a:	4619      	mov	r1, r3
 800841c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008420:	f7f7 ff4a 	bl	80002b8 <__aeabi_dsub>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4610      	mov	r0, r2
 800842a:	4619      	mov	r1, r3
 800842c:	a374      	add	r3, pc, #464	; (adr r3, 8008600 <faza+0xdc8>)
 800842e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008432:	f7f8 f8f9 	bl	8000628 <__aeabi_dmul>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	ec43 2b17 	vmov	d7, r2, r3
 800843e:	eeb0 0a47 	vmov.f32	s0, s14
 8008442:	eef0 0a67 	vmov.f32	s1, s15
 8008446:	f012 fd6f 	bl	801af28 <sin>
 800844a:	ec51 0b10 	vmov	r0, r1, d0
 800844e:	a372      	add	r3, pc, #456	; (adr r3, 8008618 <faza+0xde0>)
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	f7f8 f8e8 	bl	8000628 <__aeabi_dmul>
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	4640      	mov	r0, r8
 800845e:	4649      	mov	r1, r9
 8008460:	f7f7 ff2a 	bl	80002b8 <__aeabi_dsub>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4690      	mov	r8, r2
 800846a:	4699      	mov	r9, r3
         - (0.658 * sin((M_PI / 180) * ((2 * elm)))) - (0.214 * sin((M_PI / 180) * ((2 * aml)))) - (0.11 * sin((M_PI / 180) * ((elm))));
 800846c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	f7f7 ff22 	bl	80002bc <__adddf3>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4610      	mov	r0, r2
 800847e:	4619      	mov	r1, r3
 8008480:	a35f      	add	r3, pc, #380	; (adr r3, 8008600 <faza+0xdc8>)
 8008482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008486:	f7f8 f8cf 	bl	8000628 <__aeabi_dmul>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	ec43 2b17 	vmov	d7, r2, r3
 8008492:	eeb0 0a47 	vmov.f32	s0, s14
 8008496:	eef0 0a67 	vmov.f32	s1, s15
 800849a:	f012 fd45 	bl	801af28 <sin>
 800849e:	ec51 0b10 	vmov	r0, r1, d0
 80084a2:	a35f      	add	r3, pc, #380	; (adr r3, 8008620 <faza+0xde8>)
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	f7f8 f8be 	bl	8000628 <__aeabi_dmul>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4640      	mov	r0, r8
 80084b2:	4649      	mov	r1, r9
 80084b4:	f7f7 ff00 	bl	80002b8 <__aeabi_dsub>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4690      	mov	r8, r2
 80084be:	4699      	mov	r9, r3
 80084c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	f7f7 fef8 	bl	80002bc <__adddf3>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4610      	mov	r0, r2
 80084d2:	4619      	mov	r1, r3
 80084d4:	a34a      	add	r3, pc, #296	; (adr r3, 8008600 <faza+0xdc8>)
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	f7f8 f8a5 	bl	8000628 <__aeabi_dmul>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	ec43 2b17 	vmov	d7, r2, r3
 80084e6:	eeb0 0a47 	vmov.f32	s0, s14
 80084ea:	eef0 0a67 	vmov.f32	s1, s15
 80084ee:	f012 fd1b 	bl	801af28 <sin>
 80084f2:	ec51 0b10 	vmov	r0, r1, d0
 80084f6:	a34c      	add	r3, pc, #304	; (adr r3, 8008628 <faza+0xdf0>)
 80084f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fc:	f7f8 f894 	bl	8000628 <__aeabi_dmul>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4640      	mov	r0, r8
 8008506:	4649      	mov	r1, r9
 8008508:	f7f7 fed6 	bl	80002b8 <__aeabi_dsub>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4690      	mov	r8, r2
 8008512:	4699      	mov	r9, r3
 8008514:	a33a      	add	r3, pc, #232	; (adr r3, 8008600 <faza+0xdc8>)
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800851e:	f7f8 f883 	bl	8000628 <__aeabi_dmul>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	ec43 2b17 	vmov	d7, r2, r3
 800852a:	eeb0 0a47 	vmov.f32	s0, s14
 800852e:	eef0 0a67 	vmov.f32	s1, s15
 8008532:	f012 fcf9 	bl	801af28 <sin>
 8008536:	ec51 0b10 	vmov	r0, r1, d0
 800853a:	a33d      	add	r3, pc, #244	; (adr r3, 8008630 <faza+0xdf8>)
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	f7f8 f872 	bl	8000628 <__aeabi_dmul>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 8008548:	4640      	mov	r0, r8
 800854a:	4649      	mov	r1, r9
 800854c:	f7f7 feb4 	bl	80002b8 <__aeabi_dsub>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   phi2 = (1 + cos((M_PI / 180) * (asd))) / 2;
 8008558:	a329      	add	r3, pc, #164	; (adr r3, 8008600 <faza+0xdc8>)
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008562:	f7f8 f861 	bl	8000628 <__aeabi_dmul>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	ec43 2b17 	vmov	d7, r2, r3
 800856e:	eeb0 0a47 	vmov.f32	s0, s14
 8008572:	eef0 0a67 	vmov.f32	s1, s15
 8008576:	f012 fc83 	bl	801ae80 <cos>
 800857a:	ec51 0b10 	vmov	r0, r1, d0
 800857e:	f04f 0200 	mov.w	r2, #0
 8008582:	4b2e      	ldr	r3, [pc, #184]	; (800863c <faza+0xe04>)
 8008584:	f7f7 fe9a 	bl	80002bc <__adddf3>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	4610      	mov	r0, r2
 800858e:	4619      	mov	r1, r3
 8008590:	f04f 0200 	mov.w	r2, #0
 8008594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008598:	f7f8 f970 	bl	800087c <__aeabi_ddiv>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

   if((phi2 - phi1) < 0)
 80085a4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80085a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80085ac:	f7f7 fe84 	bl	80002b8 <__aeabi_dsub>
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	4610      	mov	r0, r2
 80085b6:	4619      	mov	r1, r3
 80085b8:	f04f 0200 	mov.w	r2, #0
 80085bc:	f04f 0300 	mov.w	r3, #0
 80085c0:	f7f8 faa4 	bl	8000b0c <__aeabi_dcmplt>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <faza+0xd9e>
   {
      phi1 = -1 * phi1;
 80085ca:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80085cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085ce:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80085d2:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
   }
   return (100 * phi1);
 80085d6:	f04f 0200 	mov.w	r2, #0
 80085da:	4b19      	ldr	r3, [pc, #100]	; (8008640 <faza+0xe08>)
 80085dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80085e0:	f7f8 f822 	bl	8000628 <__aeabi_dmul>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	ec43 2b17 	vmov	d7, r2, r3
}
 80085ec:	eeb0 0a47 	vmov.f32	s0, s14
 80085f0:	eef0 0a67 	vmov.f32	s1, s15
 80085f4:	3784      	adds	r7, #132	; 0x84
 80085f6:	46bd      	mov	sp, r7
 80085f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fc:	f3af 8000 	nop.w
 8008600:	a2529d39 	.word	0xa2529d39
 8008604:	3f91df46 	.word	0x3f91df46
 8008608:	9db22d0e 	.word	0x9db22d0e
 800860c:	401927ef 	.word	0x401927ef
 8008610:	cccccccd 	.word	0xcccccccd
 8008614:	4000cccc 	.word	0x4000cccc
 8008618:	d2f1a9fc 	.word	0xd2f1a9fc
 800861c:	3ff4624d 	.word	0x3ff4624d
 8008620:	04189375 	.word	0x04189375
 8008624:	3fe50e56 	.word	0x3fe50e56
 8008628:	1cac0831 	.word	0x1cac0831
 800862c:	3fcb645a 	.word	0x3fcb645a
 8008630:	c28f5c29 	.word	0xc28f5c29
 8008634:	3fbc28f5 	.word	0x3fbc28f5
 8008638:	40668000 	.word	0x40668000
 800863c:	3ff00000 	.word	0x3ff00000
 8008640:	40590000 	.word	0x40590000
 8008644:	a0000000 	.word	0xa0000000
 8008648:	419af4f0 	.word	0x419af4f0
 800864c:	9bfba959 	.word	0x9bfba959
 8008650:	40e193e1 	.word	0x40e193e1
 8008654:	3b356034 	.word	0x3b356034
 8008658:	40765877 	.word	0x40765877
 800865c:	f40d8376 	.word	0xf40d8376
 8008660:	3f2421f5 	.word	0x3f2421f5
 8008664:	00000000 	.word	0x00000000
 8008668:	41775b01 	.word	0x41775b01
 800866c:	787456ea 	.word	0x787456ea
 8008670:	411d203b 	.word	0x411d203b
 8008674:	4424f2ff 	.word	0x4424f2ff
 8008678:	4060ded4 	.word	0x4060ded4
 800867c:	e618ce2d 	.word	0xe618ce2d
 8008680:	3f826d04 	.word	0x3f826d04
 8008684:	00000000 	.word	0x00000000
 8008688:	40f10430 	.word	0x40f10430
 800868c:	00000000 	.word	0x00000000
 8008690:	416c0f98 	.word	0x416c0f98

08008694 <mapf>:
static float mapf(float val, float in_min, float in_max, float out_min, float out_max)
{
 8008694:	b480      	push	{r7}
 8008696:	b087      	sub	sp, #28
 8008698:	af00      	add	r7, sp, #0
 800869a:	ed87 0a05 	vstr	s0, [r7, #20]
 800869e:	edc7 0a04 	vstr	s1, [r7, #16]
 80086a2:	ed87 1a03 	vstr	s2, [r7, #12]
 80086a6:	edc7 1a02 	vstr	s3, [r7, #8]
 80086aa:	ed87 2a01 	vstr	s4, [r7, #4]
   return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80086ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80086b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80086b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80086ba:	edd7 6a01 	vldr	s13, [r7, #4]
 80086be:	edd7 7a02 	vldr	s15, [r7, #8]
 80086c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80086c6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80086ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80086ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80086d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086da:	edd7 7a02 	vldr	s15, [r7, #8]
 80086de:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80086e2:	eeb0 0a67 	vmov.f32	s0, s15
 80086e6:	371c      	adds	r7, #28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <map>:
static uint32_t map(uint32_t val, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	603b      	str	r3, [r7, #0]
   return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	69b9      	ldr	r1, [r7, #24]
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	1a8a      	subs	r2, r1, r2
 800870a:	fb03 f202 	mul.w	r2, r3, r2
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	1acb      	subs	r3, r1, r3
 8008714:	fbb2 f2f3 	udiv	r2, r2, r3
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	4413      	add	r3, r2
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	807b      	strh	r3, [r7, #2]
   if(huart->Instance == USART1)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a05      	ldr	r2, [pc, #20]	; (8008750 <HAL_UARTEx_RxEventCallback+0x28>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d104      	bne.n	8008748 <HAL_UARTEx_RxEventCallback+0x20>
   {
      Rfp.DataSize = Size;
 800873e:	887b      	ldrh	r3, [r7, #2]
 8008740:	4a04      	ldr	r2, [pc, #16]	; (8008754 <HAL_UARTEx_RxEventCallback+0x2c>)
 8008742:	6093      	str	r3, [r2, #8]
      RFP_InterruptTask();
 8008744:	f001 fe7c 	bl	800a440 <RFP_InterruptTask>
   }
}
 8008748:	bf00      	nop
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	40013800 	.word	0x40013800
 8008754:	20003d4c 	.word	0x20003d4c

08008758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b088      	sub	sp, #32
 800875c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800875e:	f107 030c 	add.w	r3, r7, #12
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	605a      	str	r2, [r3, #4]
 8008768:	609a      	str	r2, [r3, #8]
 800876a:	60da      	str	r2, [r3, #12]
 800876c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800876e:	4b45      	ldr	r3, [pc, #276]	; (8008884 <MX_GPIO_Init+0x12c>)
 8008770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008772:	4a44      	ldr	r2, [pc, #272]	; (8008884 <MX_GPIO_Init+0x12c>)
 8008774:	f043 0304 	orr.w	r3, r3, #4
 8008778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800877a:	4b42      	ldr	r3, [pc, #264]	; (8008884 <MX_GPIO_Init+0x12c>)
 800877c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800877e:	f003 0304 	and.w	r3, r3, #4
 8008782:	60bb      	str	r3, [r7, #8]
 8008784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008786:	4b3f      	ldr	r3, [pc, #252]	; (8008884 <MX_GPIO_Init+0x12c>)
 8008788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800878a:	4a3e      	ldr	r2, [pc, #248]	; (8008884 <MX_GPIO_Init+0x12c>)
 800878c:	f043 0301 	orr.w	r3, r3, #1
 8008790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008792:	4b3c      	ldr	r3, [pc, #240]	; (8008884 <MX_GPIO_Init+0x12c>)
 8008794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	607b      	str	r3, [r7, #4]
 800879c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800879e:	4b39      	ldr	r3, [pc, #228]	; (8008884 <MX_GPIO_Init+0x12c>)
 80087a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a2:	4a38      	ldr	r2, [pc, #224]	; (8008884 <MX_GPIO_Init+0x12c>)
 80087a4:	f043 0302 	orr.w	r3, r3, #2
 80087a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087aa:	4b36      	ldr	r3, [pc, #216]	; (8008884 <MX_GPIO_Init+0x12c>)
 80087ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD1306_CS_GPIO_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 80087b6:	2201      	movs	r2, #1
 80087b8:	2110      	movs	r1, #16
 80087ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087be:	f003 fdb5 	bl	800c32c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 80087c2:	2201      	movs	r2, #1
 80087c4:	f640 61c3 	movw	r1, #3779	; 0xec3
 80087c8:	482f      	ldr	r0, [pc, #188]	; (8008888 <MX_GPIO_Init+0x130>)
 80087ca:	f003 fdaf 	bl	800c32c <HAL_GPIO_WritePin>
                          |FRAM_CS_Pin|FRAM_WP_Pin|FLASH_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEARTBEAT_Pin|BME280_CS_Pin|FRAM_HOLD_Pin, GPIO_PIN_RESET);
 80087ce:	2200      	movs	r2, #0
 80087d0:	f44f 5144 	mov.w	r1, #12544	; 0x3100
 80087d4:	482c      	ldr	r0, [pc, #176]	; (8008888 <MX_GPIO_Init+0x130>)
 80087d6:	f003 fda9 	bl	800c32c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, GPIO_PIN_RESET);
 80087da:	2200      	movs	r2, #0
 80087dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80087e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087e4:	f003 fda2 	bl	800c32c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1306_CS_Pin;
 80087e8:	2310      	movs	r3, #16
 80087ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087ec:	2301      	movs	r3, #1
 80087ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f0:	2300      	movs	r3, #0
 80087f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087f4:	2303      	movs	r3, #3
 80087f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1306_CS_GPIO_Port, &GPIO_InitStruct);
 80087f8:	f107 030c 	add.w	r3, r7, #12
 80087fc:	4619      	mov	r1, r3
 80087fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008802:	f003 fbe9 	bl	800bfd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 8008806:	f641 63c3 	movw	r3, #7875	; 0x1ec3
 800880a:	60fb      	str	r3, [r7, #12]
                          |HEARTBEAT_Pin|FRAM_CS_Pin|FRAM_WP_Pin|FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800880c:	2301      	movs	r3, #1
 800880e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008810:	2300      	movs	r3, #0
 8008812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008814:	2303      	movs	r3, #3
 8008816:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008818:	f107 030c 	add.w	r3, r7, #12
 800881c:	4619      	mov	r1, r3
 800881e:	481a      	ldr	r0, [pc, #104]	; (8008888 <MX_GPIO_Init+0x130>)
 8008820:	f003 fbda 	bl	800bfd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EPAPIER_BUSY_Pin|ENCODER_SWITCH_Pin;
 8008824:	f244 0304 	movw	r3, #16388	; 0x4004
 8008828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800882a:	2300      	movs	r3, #0
 800882c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800882e:	2300      	movs	r3, #0
 8008830:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008832:	f107 030c 	add.w	r3, r7, #12
 8008836:	4619      	mov	r1, r3
 8008838:	4813      	ldr	r0, [pc, #76]	; (8008888 <MX_GPIO_Init+0x130>)
 800883a:	f003 fbcd 	bl	800bfd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BME280_CS_Pin|FRAM_HOLD_Pin;
 800883e:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8008842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008844:	2301      	movs	r3, #1
 8008846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008848:	2300      	movs	r3, #0
 800884a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800884c:	2300      	movs	r3, #0
 800884e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008850:	f107 030c 	add.w	r3, r7, #12
 8008854:	4619      	mov	r1, r3
 8008856:	480c      	ldr	r0, [pc, #48]	; (8008888 <MX_GPIO_Init+0x130>)
 8008858:	f003 fbbe 	bl	800bfd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HC12_SET_Pin;
 800885c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008860:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008862:	2301      	movs	r3, #1
 8008864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008866:	2300      	movs	r3, #0
 8008868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800886a:	2300      	movs	r3, #0
 800886c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HC12_SET_GPIO_Port, &GPIO_InitStruct);
 800886e:	f107 030c 	add.w	r3, r7, #12
 8008872:	4619      	mov	r1, r3
 8008874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008878:	f003 fbae 	bl	800bfd8 <HAL_GPIO_Init>

}
 800887c:	bf00      	nop
 800887e:	3720      	adds	r7, #32
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	40021000 	.word	0x40021000
 8008888:	48000400 	.word	0x48000400

0800888c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8008890:	4b0b      	ldr	r3, [pc, #44]	; (80088c0 <MX_IWDG_Init+0x34>)
 8008892:	4a0c      	ldr	r2, [pc, #48]	; (80088c4 <MX_IWDG_Init+0x38>)
 8008894:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8008896:	4b0a      	ldr	r3, [pc, #40]	; (80088c0 <MX_IWDG_Init+0x34>)
 8008898:	2206      	movs	r2, #6
 800889a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800889c:	4b08      	ldr	r3, [pc, #32]	; (80088c0 <MX_IWDG_Init+0x34>)
 800889e:	f640 72ff 	movw	r2, #4095	; 0xfff
 80088a2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80088a4:	4b06      	ldr	r3, [pc, #24]	; (80088c0 <MX_IWDG_Init+0x34>)
 80088a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80088aa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80088ac:	4804      	ldr	r0, [pc, #16]	; (80088c0 <MX_IWDG_Init+0x34>)
 80088ae:	f003 fd6f 	bl	800c390 <HAL_IWDG_Init>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80088b8:	f000 f8b4 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80088bc:	bf00      	nop
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	20003e28 	.word	0x20003e28
 80088c4:	40003000 	.word	0x40003000

080088c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80088cc:	f002 fefb 	bl	800b6c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80088d0:	f000 f81e 	bl	8008910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80088d4:	f7ff ff40 	bl	8008758 <MX_GPIO_Init>
  MX_DMA_Init();
 80088d8:	f7fb f938 	bl	8003b4c <MX_DMA_Init>
  MX_RTC_Init();
 80088dc:	f002 f8be 	bl	800aa5c <MX_RTC_Init>
  MX_RNG_Init();
 80088e0:	f002 f872 	bl	800a9c8 <MX_RNG_Init>
  MX_SPI1_Init();
 80088e4:	f002 f930 	bl	800ab48 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80088e8:	f002 fdea 	bl	800b4c0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80088ec:	f002 fc86 	bl	800b1fc <MX_TIM2_Init>
  MX_TIM5_Init();
 80088f0:	f002 fcfa 	bl	800b2e8 <MX_TIM5_Init>
  MX_IWDG_Init();
 80088f4:	f7ff ffca 	bl	800888c <MX_IWDG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80088f8:	f000 f86e 	bl	80089d8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80088fc:	f009 fdf2 	bl	80124e4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8008900:	f7fb feb8 	bl	8004674 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8008904:	f009 fe12 	bl	801252c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   HAL_NVIC_SystemReset();
 8008908:	f003 f833 	bl	800b972 <HAL_NVIC_SystemReset>
   while(1)
 800890c:	e7fe      	b.n	800890c <main+0x44>
	...

08008910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b098      	sub	sp, #96	; 0x60
 8008914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008916:	f107 0318 	add.w	r3, r7, #24
 800891a:	2248      	movs	r2, #72	; 0x48
 800891c:	2100      	movs	r1, #0
 800891e:	4618      	mov	r0, r3
 8008920:	f00d fe46 	bl	80165b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008924:	1d3b      	adds	r3, r7, #4
 8008926:	2200      	movs	r2, #0
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	605a      	str	r2, [r3, #4]
 800892c:	609a      	str	r2, [r3, #8]
 800892e:	60da      	str	r2, [r3, #12]
 8008930:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8008932:	2000      	movs	r0, #0
 8008934:	f003 fdbc 	bl	800c4b0 <HAL_PWREx_ControlVoltageScaling>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800893e:	f000 f871 	bl	8008a24 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8008942:	f003 fd85 	bl	800c450 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8008946:	4b23      	ldr	r3, [pc, #140]	; (80089d4 <SystemClock_Config+0xc4>)
 8008948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800894c:	4a21      	ldr	r2, [pc, #132]	; (80089d4 <SystemClock_Config+0xc4>)
 800894e:	f023 0318 	bic.w	r3, r3, #24
 8008952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8008956:	233c      	movs	r3, #60	; 0x3c
 8008958:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800895a:	2301      	movs	r3, #1
 800895c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800895e:	2301      	movs	r3, #1
 8008960:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008962:	2301      	movs	r3, #1
 8008964:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8008966:	2301      	movs	r3, #1
 8008968:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800896a:	2300      	movs	r3, #0
 800896c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800896e:	2360      	movs	r3, #96	; 0x60
 8008970:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008972:	2302      	movs	r3, #2
 8008974:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8008976:	2301      	movs	r3, #1
 8008978:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800897a:	2301      	movs	r3, #1
 800897c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 800897e:	233c      	movs	r3, #60	; 0x3c
 8008980:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008982:	2302      	movs	r3, #2
 8008984:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008986:	2302      	movs	r3, #2
 8008988:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800898a:	2302      	movs	r3, #2
 800898c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800898e:	f107 0318 	add.w	r3, r7, #24
 8008992:	4618      	mov	r0, r3
 8008994:	f003 fe30 	bl	800c5f8 <HAL_RCC_OscConfig>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800899e:	f000 f841 	bl	8008a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80089a2:	230f      	movs	r3, #15
 80089a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80089a6:	2303      	movs	r3, #3
 80089a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80089aa:	2300      	movs	r3, #0
 80089ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80089ae:	2300      	movs	r3, #0
 80089b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80089b2:	2300      	movs	r3, #0
 80089b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80089b6:	1d3b      	adds	r3, r7, #4
 80089b8:	2105      	movs	r1, #5
 80089ba:	4618      	mov	r0, r3
 80089bc:	f004 fa98 	bl	800cef0 <HAL_RCC_ClockConfig>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <SystemClock_Config+0xba>
  {
    Error_Handler();
 80089c6:	f000 f82d 	bl	8008a24 <Error_Handler>
  }
}
 80089ca:	bf00      	nop
 80089cc:	3760      	adds	r7, #96	; 0x60
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	40021000 	.word	0x40021000

080089d8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80089dc:	2200      	movs	r2, #0
 80089de:	2105      	movs	r1, #5
 80089e0:	200b      	movs	r0, #11
 80089e2:	f002 ff9c 	bl	800b91e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80089e6:	200b      	movs	r0, #11
 80089e8:	f002 ffb5 	bl	800b956 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80089ec:	2200      	movs	r2, #0
 80089ee:	2105      	movs	r1, #5
 80089f0:	2025      	movs	r0, #37	; 0x25
 80089f2:	f002 ff94 	bl	800b91e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80089f6:	2025      	movs	r0, #37	; 0x25
 80089f8:	f002 ffad 	bl	800b956 <HAL_NVIC_EnableIRQ>
}
 80089fc:	bf00      	nop
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a04      	ldr	r2, [pc, #16]	; (8008a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d101      	bne.n	8008a16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008a12:	f002 fe71 	bl	800b6f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	40014800 	.word	0x40014800

08008a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008a24:	b480      	push	{r7}
 8008a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008a28:	b672      	cpsid	i
}
 8008a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 8008a2c:	e7fe      	b.n	8008a2c <Error_Handler+0x8>

08008a2e <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b085      	sub	sp, #20
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	603b      	str	r3, [r7, #0]
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d204      	bcs.n	8008a50 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	7bfa      	ldrb	r2, [r7, #15]
 8008a4e:	701a      	strb	r2, [r3, #0]
  }
}
 8008a50:	bf00      	nop
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60b9      	str	r1, [r7, #8]
 8008a64:	607a      	str	r2, [r7, #4]
 8008a66:	603b      	str	r3, [r7, #0]
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8008a6c:	bf00      	nop
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	e002      	b.n	8008a8e <_strnlen_s+0x16>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	60fb      	str	r3, [r7, #12]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d004      	beq.n	8008aa0 <_strnlen_s+0x28>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	1e5a      	subs	r2, r3, #1
 8008a9a:	603a      	str	r2, [r7, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1f3      	bne.n	8008a88 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	1ad3      	subs	r3, r2, r3
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b083      	sub	sp, #12
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	4603      	mov	r3, r0
 8008aba:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	2b2f      	cmp	r3, #47	; 0x2f
 8008ac0:	d904      	bls.n	8008acc <_is_digit+0x1a>
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	2b39      	cmp	r3, #57	; 0x39
 8008ac6:	d801      	bhi.n	8008acc <_is_digit+0x1a>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e000      	b.n	8008ace <_is_digit+0x1c>
 8008acc:	2300      	movs	r3, #0
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	b2db      	uxtb	r3, r3
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8008aec:	e00e      	b.n	8008b0c <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	4613      	mov	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	005b      	lsls	r3, r3, #1
 8008af8:	4618      	mov	r0, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	1c59      	adds	r1, r3, #1
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	6011      	str	r1, [r2, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	4403      	add	r3, r0
 8008b08:	3b30      	subs	r3, #48	; 0x30
 8008b0a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7ff ffcd 	bl	8008ab2 <_is_digit>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e7      	bne.n	8008aee <_atoi+0xe>
  }
  return i;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8008b28:	b590      	push	{r4, r7, lr}
 8008b2a:	b087      	sub	sp, #28
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
 8008b34:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d125      	bne.n	8008b90 <_out_rev+0x68>
 8008b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d120      	bne.n	8008b90 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	e00a      	b.n	8008b6a <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	1c53      	adds	r3, r2, #1
 8008b58:	607b      	str	r3, [r7, #4]
 8008b5a:	68fc      	ldr	r4, [r7, #12]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	68b9      	ldr	r1, [r7, #8]
 8008b60:	2020      	movs	r0, #32
 8008b62:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	3301      	adds	r3, #1
 8008b68:	617b      	str	r3, [r7, #20]
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d3f0      	bcc.n	8008b54 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8008b72:	e00d      	b.n	8008b90 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b76:	3b01      	subs	r3, #1
 8008b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7e:	4413      	add	r3, r2
 8008b80:	7818      	ldrb	r0, [r3, #0]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	1c53      	adds	r3, r2, #1
 8008b86:	607b      	str	r3, [r7, #4]
 8008b88:	68fc      	ldr	r4, [r7, #12]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	68b9      	ldr	r1, [r7, #8]
 8008b8e:	47a0      	blx	r4
  while (len) {
 8008b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1ee      	bne.n	8008b74 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8008b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b98:	f003 0302 	and.w	r3, r3, #2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00e      	beq.n	8008bbe <_out_rev+0x96>
    while (idx - start_idx < width) {
 8008ba0:	e007      	b.n	8008bb2 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	1c53      	adds	r3, r2, #1
 8008ba6:	607b      	str	r3, [r7, #4]
 8008ba8:	68fc      	ldr	r4, [r7, #12]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	68b9      	ldr	r1, [r7, #8]
 8008bae:	2020      	movs	r0, #32
 8008bb0:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d8f1      	bhi.n	8008ba2 <_out_rev+0x7a>
    }
  }

  return idx;
 8008bbe:	687b      	ldr	r3, [r7, #4]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	371c      	adds	r7, #28
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd90      	pop	{r4, r7, pc}

08008bc8 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b088      	sub	sp, #32
 8008bcc:	af04      	add	r7, sp, #16
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd8:	f003 0302 	and.w	r3, r3, #2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d136      	bne.n	8008c4e <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8008be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d018      	beq.n	8008c18 <_ntoa_format+0x50>
 8008be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be8:	f003 0301 	and.w	r3, r3, #1
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d013      	beq.n	8008c18 <_ntoa_format+0x50>
 8008bf0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d104      	bne.n	8008c02 <_ntoa_format+0x3a>
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfa:	f003 030c 	and.w	r3, r3, #12
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00a      	beq.n	8008c18 <_ntoa_format+0x50>
      width--;
 8008c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c04:	3b01      	subs	r3, #1
 8008c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008c08:	e006      	b.n	8008c18 <_ntoa_format+0x50>
      buf[len++] = '0';
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	1c5a      	adds	r2, r3, #1
 8008c0e:	61fa      	str	r2, [r7, #28]
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	4413      	add	r3, r2
 8008c14:	2230      	movs	r2, #48	; 0x30
 8008c16:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008c18:	69fa      	ldr	r2, [r7, #28]
 8008c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d20a      	bcs.n	8008c36 <_ntoa_format+0x6e>
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	2b1f      	cmp	r3, #31
 8008c24:	d9f1      	bls.n	8008c0a <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008c26:	e006      	b.n	8008c36 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	61fa      	str	r2, [r7, #28]
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	4413      	add	r3, r2
 8008c32:	2230      	movs	r2, #48	; 0x30
 8008c34:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d006      	beq.n	8008c4e <_ntoa_format+0x86>
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d202      	bcs.n	8008c4e <_ntoa_format+0x86>
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	2b1f      	cmp	r3, #31
 8008c4c:	d9ec      	bls.n	8008c28 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c50:	f003 0310 	and.w	r3, r3, #16
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d058      	beq.n	8008d0a <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8008c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d116      	bne.n	8008c90 <_ntoa_format+0xc8>
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d013      	beq.n	8008c90 <_ntoa_format+0xc8>
 8008c68:	69fa      	ldr	r2, [r7, #28]
 8008c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d003      	beq.n	8008c78 <_ntoa_format+0xb0>
 8008c70:	69fa      	ldr	r2, [r7, #28]
 8008c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d10b      	bne.n	8008c90 <_ntoa_format+0xc8>
      len--;
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d005      	beq.n	8008c90 <_ntoa_format+0xc8>
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	2b10      	cmp	r3, #16
 8008c88:	d102      	bne.n	8008c90 <_ntoa_format+0xc8>
        len--;
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	2b10      	cmp	r3, #16
 8008c94:	d10f      	bne.n	8008cb6 <_ntoa_format+0xee>
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	f003 0320 	and.w	r3, r3, #32
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <_ntoa_format+0xee>
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	2b1f      	cmp	r3, #31
 8008ca4:	d807      	bhi.n	8008cb6 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	61fa      	str	r2, [r7, #28]
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	4413      	add	r3, r2
 8008cb0:	2278      	movs	r2, #120	; 0x78
 8008cb2:	701a      	strb	r2, [r3, #0]
 8008cb4:	e01f      	b.n	8008cf6 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb8:	2b10      	cmp	r3, #16
 8008cba:	d10f      	bne.n	8008cdc <_ntoa_format+0x114>
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbe:	f003 0320 	and.w	r3, r3, #32
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00a      	beq.n	8008cdc <_ntoa_format+0x114>
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	2b1f      	cmp	r3, #31
 8008cca:	d807      	bhi.n	8008cdc <_ntoa_format+0x114>
      buf[len++] = 'X';
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	61fa      	str	r2, [r7, #28]
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	2258      	movs	r2, #88	; 0x58
 8008cd8:	701a      	strb	r2, [r3, #0]
 8008cda:	e00c      	b.n	8008cf6 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d109      	bne.n	8008cf6 <_ntoa_format+0x12e>
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	2b1f      	cmp	r3, #31
 8008ce6:	d806      	bhi.n	8008cf6 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	61fa      	str	r2, [r7, #28]
 8008cee:	69ba      	ldr	r2, [r7, #24]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	2262      	movs	r2, #98	; 0x62
 8008cf4:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	2b1f      	cmp	r3, #31
 8008cfa:	d806      	bhi.n	8008d0a <_ntoa_format+0x142>
      buf[len++] = '0';
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	1c5a      	adds	r2, r3, #1
 8008d00:	61fa      	str	r2, [r7, #28]
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	4413      	add	r3, r2
 8008d06:	2230      	movs	r2, #48	; 0x30
 8008d08:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	2b1f      	cmp	r3, #31
 8008d0e:	d824      	bhi.n	8008d5a <_ntoa_format+0x192>
    if (negative) {
 8008d10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d007      	beq.n	8008d28 <_ntoa_format+0x160>
      buf[len++] = '-';
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	61fa      	str	r2, [r7, #28]
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	4413      	add	r3, r2
 8008d22:	222d      	movs	r2, #45	; 0x2d
 8008d24:	701a      	strb	r2, [r3, #0]
 8008d26:	e018      	b.n	8008d5a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	f003 0304 	and.w	r3, r3, #4
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d007      	beq.n	8008d42 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	1c5a      	adds	r2, r3, #1
 8008d36:	61fa      	str	r2, [r7, #28]
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	222b      	movs	r2, #43	; 0x2b
 8008d3e:	701a      	strb	r2, [r3, #0]
 8008d40:	e00b      	b.n	8008d5a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8008d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d44:	f003 0308 	and.w	r3, r3, #8
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d006      	beq.n	8008d5a <_ntoa_format+0x192>
      buf[len++] = ' ';
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	61fa      	str	r2, [r7, #28]
 8008d52:	69ba      	ldr	r2, [r7, #24]
 8008d54:	4413      	add	r3, r2
 8008d56:	2220      	movs	r2, #32
 8008d58:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5c:	9303      	str	r3, [sp, #12]
 8008d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d60:	9302      	str	r3, [sp, #8]
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	9301      	str	r3, [sp, #4]
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f7ff fed9 	bl	8008b28 <_out_rev>
 8008d76:	4603      	mov	r3, r0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b096      	sub	sp, #88	; 0x58
 8008d84:	af08      	add	r7, sp, #32
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8008d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d103      	bne.n	8008da0 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8008d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d9a:	f023 0310 	bic.w	r3, r3, #16
 8008d9e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8008da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <_ntoa_long+0x30>
 8008daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d032      	beq.n	8008e16 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8008db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008db4:	fbb3 f2f2 	udiv	r2, r3, r2
 8008db8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008dba:	fb01 f202 	mul.w	r2, r1, r2
 8008dbe:	1a9b      	subs	r3, r3, r2
 8008dc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8008dc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008dc8:	2b09      	cmp	r3, #9
 8008dca:	d804      	bhi.n	8008dd6 <_ntoa_long+0x56>
 8008dcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008dd0:	3330      	adds	r3, #48	; 0x30
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	e00d      	b.n	8008df2 <_ntoa_long+0x72>
 8008dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dd8:	f003 0320 	and.w	r3, r3, #32
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <_ntoa_long+0x64>
 8008de0:	2241      	movs	r2, #65	; 0x41
 8008de2:	e000      	b.n	8008de6 <_ntoa_long+0x66>
 8008de4:	2261      	movs	r2, #97	; 0x61
 8008de6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008dea:	4413      	add	r3, r2
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	3b0a      	subs	r3, #10
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df4:	1c59      	adds	r1, r3, #1
 8008df6:	6379      	str	r1, [r7, #52]	; 0x34
 8008df8:	3338      	adds	r3, #56	; 0x38
 8008dfa:	443b      	add	r3, r7
 8008dfc:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8008e00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e08:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8008e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <_ntoa_long+0x96>
 8008e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e12:	2b1f      	cmp	r3, #31
 8008e14:	d9cc      	bls.n	8008db0 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8008e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e18:	9306      	str	r3, [sp, #24]
 8008e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e1c:	9305      	str	r3, [sp, #20]
 8008e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e24:	9303      	str	r3, [sp, #12]
 8008e26:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008e2a:	9302      	str	r3, [sp, #8]
 8008e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	f107 0310 	add.w	r3, r7, #16
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	68b9      	ldr	r1, [r7, #8]
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f7ff fec3 	bl	8008bc8 <_ntoa_format>
 8008e42:	4603      	mov	r3, r0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3738      	adds	r7, #56	; 0x38
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b096      	sub	sp, #88	; 0x58
 8008e50:	af08      	add	r7, sp, #32
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
 8008e58:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8008e5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e62:	4313      	orrs	r3, r2
 8008e64:	d103      	bne.n	8008e6e <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8008e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e68:	f023 0310 	bic.w	r3, r3, #16
 8008e6c:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8008e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d003      	beq.n	8008e80 <_ntoa_long_long+0x34>
 8008e78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	d037      	beq.n	8008ef0 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8008e80:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e88:	f7f7 ff66 	bl	8000d58 <__aeabi_uldivmod>
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8008e92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e96:	2b09      	cmp	r3, #9
 8008e98:	d804      	bhi.n	8008ea4 <_ntoa_long_long+0x58>
 8008e9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e9e:	3330      	adds	r3, #48	; 0x30
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	e00d      	b.n	8008ec0 <_ntoa_long_long+0x74>
 8008ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ea6:	f003 0320 	and.w	r3, r3, #32
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <_ntoa_long_long+0x66>
 8008eae:	2241      	movs	r2, #65	; 0x41
 8008eb0:	e000      	b.n	8008eb4 <_ntoa_long_long+0x68>
 8008eb2:	2261      	movs	r2, #97	; 0x61
 8008eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008eb8:	4413      	add	r3, r2
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	3b0a      	subs	r3, #10
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec2:	1c59      	adds	r1, r3, #1
 8008ec4:	6379      	str	r1, [r7, #52]	; 0x34
 8008ec6:	3338      	adds	r3, #56	; 0x38
 8008ec8:	443b      	add	r3, r7
 8008eca:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8008ece:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ed2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008ed6:	f7f7 ff3f 	bl	8000d58 <__aeabi_uldivmod>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8008ee2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	d002      	beq.n	8008ef0 <_ntoa_long_long+0xa4>
 8008eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eec:	2b1f      	cmp	r3, #31
 8008eee:	d9c7      	bls.n	8008e80 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8008ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ef2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ef4:	9206      	str	r2, [sp, #24]
 8008ef6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ef8:	9205      	str	r2, [sp, #20]
 8008efa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008efc:	9204      	str	r2, [sp, #16]
 8008efe:	9303      	str	r3, [sp, #12]
 8008f00:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8008f04:	9302      	str	r3, [sp, #8]
 8008f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	f107 0310 	add.w	r3, r7, #16
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f7ff fe56 	bl	8008bc8 <_ntoa_format>
 8008f1c:	4603      	mov	r3, r0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3738      	adds	r7, #56	; 0x38
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
	...

08008f28 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8008f28:	b590      	push	{r4, r7, lr}
 8008f2a:	b09d      	sub	sp, #116	; 0x74
 8008f2c:	af04      	add	r7, sp, #16
 8008f2e:	6178      	str	r0, [r7, #20]
 8008f30:	6139      	str	r1, [r7, #16]
 8008f32:	60fa      	str	r2, [r7, #12]
 8008f34:	60bb      	str	r3, [r7, #8]
 8008f36:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8008f3e:	f04f 0200 	mov.w	r2, #0
 8008f42:	f04f 0300 	mov.w	r3, #0
 8008f46:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8008f4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f52:	f7f7 fdd1 	bl	8000af8 <__aeabi_dcmpeq>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10f      	bne.n	8008f7c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8008f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f5e:	9303      	str	r3, [sp, #12]
 8008f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f62:	9302      	str	r3, [sp, #8]
 8008f64:	2303      	movs	r3, #3
 8008f66:	9301      	str	r3, [sp, #4]
 8008f68:	4ba7      	ldr	r3, [pc, #668]	; (8009208 <_ftoa+0x2e0>)
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	6939      	ldr	r1, [r7, #16]
 8008f72:	6978      	ldr	r0, [r7, #20]
 8008f74:	f7ff fdd8 	bl	8008b28 <_out_rev>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	e222      	b.n	80093c2 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8008f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f80:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8008f84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f88:	f7f7 fdc0 	bl	8000b0c <__aeabi_dcmplt>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00f      	beq.n	8008fb2 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8008f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f94:	9303      	str	r3, [sp, #12]
 8008f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f98:	9302      	str	r3, [sp, #8]
 8008f9a:	2304      	movs	r3, #4
 8008f9c:	9301      	str	r3, [sp, #4]
 8008f9e:	4b9b      	ldr	r3, [pc, #620]	; (800920c <_ftoa+0x2e4>)
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	6939      	ldr	r1, [r7, #16]
 8008fa8:	6978      	ldr	r0, [r7, #20]
 8008faa:	f7ff fdbd 	bl	8008b28 <_out_rev>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	e207      	b.n	80093c2 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8008fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb6:	4b96      	ldr	r3, [pc, #600]	; (8009210 <_ftoa+0x2e8>)
 8008fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fbc:	f7f7 fdc4 	bl	8000b48 <__aeabi_dcmpgt>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d01d      	beq.n	8009002 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8008fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fc8:	f003 0304 	and.w	r3, r3, #4
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <_ftoa+0xac>
 8008fd0:	4b90      	ldr	r3, [pc, #576]	; (8009214 <_ftoa+0x2ec>)
 8008fd2:	e000      	b.n	8008fd6 <_ftoa+0xae>
 8008fd4:	4b90      	ldr	r3, [pc, #576]	; (8009218 <_ftoa+0x2f0>)
 8008fd6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fd8:	f002 0204 	and.w	r2, r2, #4
 8008fdc:	2a00      	cmp	r2, #0
 8008fde:	d001      	beq.n	8008fe4 <_ftoa+0xbc>
 8008fe0:	2204      	movs	r2, #4
 8008fe2:	e000      	b.n	8008fe6 <_ftoa+0xbe>
 8008fe4:	2203      	movs	r2, #3
 8008fe6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008fe8:	9103      	str	r1, [sp, #12]
 8008fea:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008fec:	9102      	str	r1, [sp, #8]
 8008fee:	9201      	str	r2, [sp, #4]
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	6939      	ldr	r1, [r7, #16]
 8008ff8:	6978      	ldr	r0, [r7, #20]
 8008ffa:	f7ff fd95 	bl	8008b28 <_out_rev>
 8008ffe:	4603      	mov	r3, r0
 8009000:	e1df      	b.n	80093c2 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8009002:	a37d      	add	r3, pc, #500	; (adr r3, 80091f8 <_ftoa+0x2d0>)
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800900c:	f7f7 fd9c 	bl	8000b48 <__aeabi_dcmpgt>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d109      	bne.n	800902a <_ftoa+0x102>
 8009016:	a37a      	add	r3, pc, #488	; (adr r3, 8009200 <_ftoa+0x2d8>)
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009020:	f7f7 fd74 	bl	8000b0c <__aeabi_dcmplt>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00f      	beq.n	800904a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800902a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800902c:	9302      	str	r3, [sp, #8]
 800902e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009030:	9301      	str	r3, [sp, #4]
 8009032:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	ed97 0b00 	vldr	d0, [r7]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	6939      	ldr	r1, [r7, #16]
 8009040:	6978      	ldr	r0, [r7, #20]
 8009042:	f000 f9c9 	bl	80093d8 <_etoa>
 8009046:	4603      	mov	r3, r0
 8009048:	e1bb      	b.n	80093c2 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800904a:	2300      	movs	r3, #0
 800904c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8009050:	f04f 0200 	mov.w	r2, #0
 8009054:	f04f 0300 	mov.w	r3, #0
 8009058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800905c:	f7f7 fd56 	bl	8000b0c <__aeabi_dcmplt>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00e      	beq.n	8009084 <_ftoa+0x15c>
    negative = true;
 8009066:	2301      	movs	r3, #1
 8009068:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800906c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009070:	f04f 0000 	mov.w	r0, #0
 8009074:	f04f 0100 	mov.w	r1, #0
 8009078:	f7f7 f91e 	bl	80002b8 <__aeabi_dsub>
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8009084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10d      	bne.n	80090aa <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800908e:	2306      	movs	r3, #6
 8009090:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8009092:	e00a      	b.n	80090aa <_ftoa+0x182>
    buf[len++] = '0';
 8009094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	65fa      	str	r2, [r7, #92]	; 0x5c
 800909a:	3360      	adds	r3, #96	; 0x60
 800909c:	443b      	add	r3, r7
 800909e:	2230      	movs	r2, #48	; 0x30
 80090a0:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80090a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090a6:	3b01      	subs	r3, #1
 80090a8:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80090aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ac:	2b1f      	cmp	r3, #31
 80090ae:	d802      	bhi.n	80090b6 <_ftoa+0x18e>
 80090b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090b2:	2b09      	cmp	r3, #9
 80090b4:	d8ee      	bhi.n	8009094 <_ftoa+0x16c>
  }

  int whole = (int)value;
 80090b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090ba:	f7f7 fd65 	bl	8000b88 <__aeabi_d2iz>
 80090be:	4603      	mov	r3, r0
 80090c0:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80090c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80090c4:	f7f7 fa46 	bl	8000554 <__aeabi_i2d>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090d0:	f7f7 f8f2 	bl	80002b8 <__aeabi_dsub>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4610      	mov	r0, r2
 80090da:	4619      	mov	r1, r3
 80090dc:	4a4f      	ldr	r2, [pc, #316]	; (800921c <_ftoa+0x2f4>)
 80090de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090e0:	00db      	lsls	r3, r3, #3
 80090e2:	4413      	add	r3, r2
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	f7f7 fa9e 	bl	8000628 <__aeabi_dmul>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80090f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80090f8:	f7f7 fd6e 	bl	8000bd8 <__aeabi_d2uiz>
 80090fc:	4603      	mov	r3, r0
 80090fe:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8009100:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009102:	f7f7 fa17 	bl	8000534 <__aeabi_ui2d>
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800910e:	f7f7 f8d3 	bl	80002b8 <__aeabi_dsub>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800911a:	f04f 0200 	mov.w	r2, #0
 800911e:	4b40      	ldr	r3, [pc, #256]	; (8009220 <_ftoa+0x2f8>)
 8009120:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009124:	f7f7 fd10 	bl	8000b48 <__aeabi_dcmpgt>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d016      	beq.n	800915c <_ftoa+0x234>
    ++frac;
 800912e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009130:	3301      	adds	r3, #1
 8009132:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8009134:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009136:	f7f7 f9fd 	bl	8000534 <__aeabi_ui2d>
 800913a:	4a38      	ldr	r2, [pc, #224]	; (800921c <_ftoa+0x2f4>)
 800913c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	4413      	add	r3, r2
 8009142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009146:	f7f7 fcf5 	bl	8000b34 <__aeabi_dcmpge>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d01a      	beq.n	8009186 <_ftoa+0x25e>
      frac = 0;
 8009150:	2300      	movs	r3, #0
 8009152:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8009154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009156:	3301      	adds	r3, #1
 8009158:	657b      	str	r3, [r7, #84]	; 0x54
 800915a:	e014      	b.n	8009186 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 800915c:	f04f 0200 	mov.w	r2, #0
 8009160:	4b2f      	ldr	r3, [pc, #188]	; (8009220 <_ftoa+0x2f8>)
 8009162:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009166:	f7f7 fcd1 	bl	8000b0c <__aeabi_dcmplt>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8009170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009172:	2b00      	cmp	r3, #0
 8009174:	d004      	beq.n	8009180 <_ftoa+0x258>
 8009176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8009180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009182:	3301      	adds	r3, #1
 8009184:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8009186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009188:	2b00      	cmp	r3, #0
 800918a:	d14b      	bne.n	8009224 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800918c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800918e:	f7f7 f9e1 	bl	8000554 <__aeabi_i2d>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	e9d7 0100 	ldrd	r0, r1, [r7]
 800919a:	f7f7 f88d 	bl	80002b8 <__aeabi_dsub>
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80091a6:	2301      	movs	r3, #1
 80091a8:	461c      	mov	r4, r3
 80091aa:	f04f 0200 	mov.w	r2, #0
 80091ae:	4b1c      	ldr	r3, [pc, #112]	; (8009220 <_ftoa+0x2f8>)
 80091b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80091b4:	f7f7 fcaa 	bl	8000b0c <__aeabi_dcmplt>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d101      	bne.n	80091c2 <_ftoa+0x29a>
 80091be:	2300      	movs	r3, #0
 80091c0:	461c      	mov	r4, r3
 80091c2:	b2e3      	uxtb	r3, r4
 80091c4:	f083 0301 	eor.w	r3, r3, #1
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d109      	bne.n	80091e2 <_ftoa+0x2ba>
 80091ce:	f04f 0200 	mov.w	r2, #0
 80091d2:	4b13      	ldr	r3, [pc, #76]	; (8009220 <_ftoa+0x2f8>)
 80091d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80091d8:	f7f7 fcb6 	bl	8000b48 <__aeabi_dcmpgt>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d064      	beq.n	80092ac <_ftoa+0x384>
 80091e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091e4:	f003 0301 	and.w	r3, r3, #1
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 8081 	beq.w	80092f0 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80091ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091f0:	3301      	adds	r3, #1
 80091f2:	657b      	str	r3, [r7, #84]	; 0x54
 80091f4:	e07c      	b.n	80092f0 <_ftoa+0x3c8>
 80091f6:	bf00      	nop
 80091f8:	00000000 	.word	0x00000000
 80091fc:	41cdcd65 	.word	0x41cdcd65
 8009200:	00000000 	.word	0x00000000
 8009204:	c1cdcd65 	.word	0xc1cdcd65
 8009208:	0801c3a0 	.word	0x0801c3a0
 800920c:	0801c3a4 	.word	0x0801c3a4
 8009210:	7fefffff 	.word	0x7fefffff
 8009214:	0801c3ac 	.word	0x0801c3ac
 8009218:	0801c3b4 	.word	0x0801c3b4
 800921c:	0801c918 	.word	0x0801c918
 8009220:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8009224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009226:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8009228:	e01f      	b.n	800926a <_ftoa+0x342>
      --count;
 800922a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800922c:	3b01      	subs	r3, #1
 800922e:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8009230:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009232:	4b66      	ldr	r3, [pc, #408]	; (80093cc <_ftoa+0x4a4>)
 8009234:	fba3 2301 	umull	r2, r3, r3, r1
 8009238:	08da      	lsrs	r2, r3, #3
 800923a:	4613      	mov	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	005b      	lsls	r3, r3, #1
 8009242:	1aca      	subs	r2, r1, r3
 8009244:	b2d2      	uxtb	r2, r2
 8009246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009248:	1c59      	adds	r1, r3, #1
 800924a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800924c:	3230      	adds	r2, #48	; 0x30
 800924e:	b2d2      	uxtb	r2, r2
 8009250:	3360      	adds	r3, #96	; 0x60
 8009252:	443b      	add	r3, r7
 8009254:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8009258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800925a:	4a5c      	ldr	r2, [pc, #368]	; (80093cc <_ftoa+0x4a4>)
 800925c:	fba2 2303 	umull	r2, r3, r2, r3
 8009260:	08db      	lsrs	r3, r3, #3
 8009262:	653b      	str	r3, [r7, #80]	; 0x50
 8009264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800926a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800926c:	2b1f      	cmp	r3, #31
 800926e:	d9dc      	bls.n	800922a <_ftoa+0x302>
 8009270:	e009      	b.n	8009286 <_ftoa+0x35e>
        break;
 8009272:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8009274:	e007      	b.n	8009286 <_ftoa+0x35e>
      buf[len++] = '0';
 8009276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800927c:	3360      	adds	r3, #96	; 0x60
 800927e:	443b      	add	r3, r7
 8009280:	2230      	movs	r2, #48	; 0x30
 8009282:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8009286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009288:	2b1f      	cmp	r3, #31
 800928a:	d804      	bhi.n	8009296 <_ftoa+0x36e>
 800928c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800928e:	1e5a      	subs	r2, r3, #1
 8009290:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1ef      	bne.n	8009276 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8009296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009298:	2b1f      	cmp	r3, #31
 800929a:	d829      	bhi.n	80092f0 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800929c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800929e:	1c5a      	adds	r2, r3, #1
 80092a0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80092a2:	3360      	adds	r3, #96	; 0x60
 80092a4:	443b      	add	r3, r7
 80092a6:	222e      	movs	r2, #46	; 0x2e
 80092a8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80092ac:	e020      	b.n	80092f0 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 80092ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092b0:	4b47      	ldr	r3, [pc, #284]	; (80093d0 <_ftoa+0x4a8>)
 80092b2:	fb83 1302 	smull	r1, r3, r3, r2
 80092b6:	1099      	asrs	r1, r3, #2
 80092b8:	17d3      	asrs	r3, r2, #31
 80092ba:	1ac9      	subs	r1, r1, r3
 80092bc:	460b      	mov	r3, r1
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	440b      	add	r3, r1
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	1ad1      	subs	r1, r2, r3
 80092c6:	b2ca      	uxtb	r2, r1
 80092c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092ca:	1c59      	adds	r1, r3, #1
 80092cc:	65f9      	str	r1, [r7, #92]	; 0x5c
 80092ce:	3230      	adds	r2, #48	; 0x30
 80092d0:	b2d2      	uxtb	r2, r2
 80092d2:	3360      	adds	r3, #96	; 0x60
 80092d4:	443b      	add	r3, r7
 80092d6:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80092da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092dc:	4a3c      	ldr	r2, [pc, #240]	; (80093d0 <_ftoa+0x4a8>)
 80092de:	fb82 1203 	smull	r1, r2, r2, r3
 80092e2:	1092      	asrs	r2, r2, #2
 80092e4:	17db      	asrs	r3, r3, #31
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	657b      	str	r3, [r7, #84]	; 0x54
 80092ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d003      	beq.n	80092f8 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80092f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092f2:	2b1f      	cmp	r3, #31
 80092f4:	d9db      	bls.n	80092ae <_ftoa+0x386>
 80092f6:	e000      	b.n	80092fa <_ftoa+0x3d2>
      break;
 80092f8:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80092fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092fc:	f003 0302 	and.w	r3, r3, #2
 8009300:	2b00      	cmp	r3, #0
 8009302:	d123      	bne.n	800934c <_ftoa+0x424>
 8009304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009306:	f003 0301 	and.w	r3, r3, #1
 800930a:	2b00      	cmp	r3, #0
 800930c:	d01e      	beq.n	800934c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800930e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009310:	2b00      	cmp	r3, #0
 8009312:	d014      	beq.n	800933e <_ftoa+0x416>
 8009314:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009318:	2b00      	cmp	r3, #0
 800931a:	d104      	bne.n	8009326 <_ftoa+0x3fe>
 800931c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800931e:	f003 030c 	and.w	r3, r3, #12
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00b      	beq.n	800933e <_ftoa+0x416>
      width--;
 8009326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009328:	3b01      	subs	r3, #1
 800932a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800932c:	e007      	b.n	800933e <_ftoa+0x416>
      buf[len++] = '0';
 800932e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009334:	3360      	adds	r3, #96	; 0x60
 8009336:	443b      	add	r3, r7
 8009338:	2230      	movs	r2, #48	; 0x30
 800933a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800933e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009342:	429a      	cmp	r2, r3
 8009344:	d202      	bcs.n	800934c <_ftoa+0x424>
 8009346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009348:	2b1f      	cmp	r3, #31
 800934a:	d9f0      	bls.n	800932e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800934c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800934e:	2b1f      	cmp	r3, #31
 8009350:	d827      	bhi.n	80093a2 <_ftoa+0x47a>
    if (negative) {
 8009352:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009356:	2b00      	cmp	r3, #0
 8009358:	d008      	beq.n	800936c <_ftoa+0x444>
      buf[len++] = '-';
 800935a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009360:	3360      	adds	r3, #96	; 0x60
 8009362:	443b      	add	r3, r7
 8009364:	222d      	movs	r2, #45	; 0x2d
 8009366:	f803 2c48 	strb.w	r2, [r3, #-72]
 800936a:	e01a      	b.n	80093a2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 800936c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800936e:	f003 0304 	and.w	r3, r3, #4
 8009372:	2b00      	cmp	r3, #0
 8009374:	d008      	beq.n	8009388 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8009376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800937c:	3360      	adds	r3, #96	; 0x60
 800937e:	443b      	add	r3, r7
 8009380:	222b      	movs	r2, #43	; 0x2b
 8009382:	f803 2c48 	strb.w	r2, [r3, #-72]
 8009386:	e00c      	b.n	80093a2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8009388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800938a:	f003 0308 	and.w	r3, r3, #8
 800938e:	2b00      	cmp	r3, #0
 8009390:	d007      	beq.n	80093a2 <_ftoa+0x47a>
      buf[len++] = ' ';
 8009392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009394:	1c5a      	adds	r2, r3, #1
 8009396:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009398:	3360      	adds	r3, #96	; 0x60
 800939a:	443b      	add	r3, r7
 800939c:	2220      	movs	r2, #32
 800939e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80093a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093a4:	9303      	str	r3, [sp, #12]
 80093a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093a8:	9302      	str	r3, [sp, #8]
 80093aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	f107 0318 	add.w	r3, r7, #24
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	6939      	ldr	r1, [r7, #16]
 80093ba:	6978      	ldr	r0, [r7, #20]
 80093bc:	f7ff fbb4 	bl	8008b28 <_out_rev>
 80093c0:	4603      	mov	r3, r0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3764      	adds	r7, #100	; 0x64
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd90      	pop	{r4, r7, pc}
 80093ca:	bf00      	nop
 80093cc:	cccccccd 	.word	0xcccccccd
 80093d0:	66666667 	.word	0x66666667
 80093d4:	00000000 	.word	0x00000000

080093d8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80093d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093dc:	b09f      	sub	sp, #124	; 0x7c
 80093de:	af06      	add	r7, sp, #24
 80093e0:	6278      	str	r0, [r7, #36]	; 0x24
 80093e2:	6239      	str	r1, [r7, #32]
 80093e4:	61fa      	str	r2, [r7, #28]
 80093e6:	61bb      	str	r3, [r7, #24]
 80093e8:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80093ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80093f4:	f7f7 fb80 	bl	8000af8 <__aeabi_dcmpeq>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d014      	beq.n	8009428 <_etoa+0x50>
 80093fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009402:	4bc1      	ldr	r3, [pc, #772]	; (8009708 <_etoa+0x330>)
 8009404:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009408:	f7f7 fb9e 	bl	8000b48 <__aeabi_dcmpgt>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10a      	bne.n	8009428 <_etoa+0x50>
 8009412:	f04f 32ff 	mov.w	r2, #4294967295
 8009416:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800941a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800941e:	f7f7 fb75 	bl	8000b0c <__aeabi_dcmplt>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d012      	beq.n	800944e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8009428:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800942c:	9302      	str	r3, [sp, #8]
 800942e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009432:	9301      	str	r3, [sp, #4]
 8009434:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	ed97 0b04 	vldr	d0, [r7, #16]
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	69fa      	ldr	r2, [r7, #28]
 8009442:	6a39      	ldr	r1, [r7, #32]
 8009444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009446:	f7ff fd6f 	bl	8008f28 <_ftoa>
 800944a:	4603      	mov	r3, r0
 800944c:	e23f      	b.n	80098ce <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800944e:	2301      	movs	r3, #1
 8009450:	461e      	mov	r6, r3
 8009452:	f04f 0200 	mov.w	r2, #0
 8009456:	f04f 0300 	mov.w	r3, #0
 800945a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800945e:	f7f7 fb55 	bl	8000b0c <__aeabi_dcmplt>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <_etoa+0x94>
 8009468:	2300      	movs	r3, #0
 800946a:	461e      	mov	r6, r3
 800946c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8009470:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009474:	2b00      	cmp	r3, #0
 8009476:	d009      	beq.n	800948c <_etoa+0xb4>
    value = -value;
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	603b      	str	r3, [r7, #0]
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009482:	607b      	str	r3, [r7, #4]
 8009484:	ed97 7b00 	vldr	d7, [r7]
 8009488:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800948c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009494:	2b00      	cmp	r3, #0
 8009496:	d102      	bne.n	800949e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8009498:	2306      	movs	r3, #6
 800949a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800949e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80094a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80094a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80094aa:	f04f 0200 	mov.w	r2, #0
 80094ae:	f04f 0300 	mov.w	r3, #0
 80094b2:	0d0a      	lsrs	r2, r1, #20
 80094b4:	2300      	movs	r3, #0
 80094b6:	4613      	mov	r3, r2
 80094b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094bc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80094c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80094c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094c6:	4690      	mov	r8, r2
 80094c8:	f3c3 0913 	ubfx	r9, r3, #0, #20
 80094cc:	4644      	mov	r4, r8
 80094ce:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 80094d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80094d6:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80094da:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80094dc:	f7f7 f83a 	bl	8000554 <__aeabi_i2d>
 80094e0:	a37d      	add	r3, pc, #500	; (adr r3, 80096d8 <_etoa+0x300>)
 80094e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e6:	f7f7 f89f 	bl	8000628 <__aeabi_dmul>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4610      	mov	r0, r2
 80094f0:	4619      	mov	r1, r3
 80094f2:	a37b      	add	r3, pc, #492	; (adr r3, 80096e0 <_etoa+0x308>)
 80094f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f8:	f7f6 fee0 	bl	80002bc <__adddf3>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4614      	mov	r4, r2
 8009502:	461d      	mov	r5, r3
 8009504:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009508:	f04f 0200 	mov.w	r2, #0
 800950c:	4b7f      	ldr	r3, [pc, #508]	; (800970c <_etoa+0x334>)
 800950e:	f7f6 fed3 	bl	80002b8 <__aeabi_dsub>
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	4610      	mov	r0, r2
 8009518:	4619      	mov	r1, r3
 800951a:	a373      	add	r3, pc, #460	; (adr r3, 80096e8 <_etoa+0x310>)
 800951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009520:	f7f7 f882 	bl	8000628 <__aeabi_dmul>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	4620      	mov	r0, r4
 800952a:	4629      	mov	r1, r5
 800952c:	f7f6 fec6 	bl	80002bc <__adddf3>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	4610      	mov	r0, r2
 8009536:	4619      	mov	r1, r3
 8009538:	f7f7 fb26 	bl	8000b88 <__aeabi_d2iz>
 800953c:	4603      	mov	r3, r0
 800953e:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8009540:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009542:	f7f7 f807 	bl	8000554 <__aeabi_i2d>
 8009546:	a36a      	add	r3, pc, #424	; (adr r3, 80096f0 <_etoa+0x318>)
 8009548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954c:	f7f7 f86c 	bl	8000628 <__aeabi_dmul>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4610      	mov	r0, r2
 8009556:	4619      	mov	r1, r3
 8009558:	f04f 0200 	mov.w	r2, #0
 800955c:	4b6c      	ldr	r3, [pc, #432]	; (8009710 <_etoa+0x338>)
 800955e:	f7f6 fead 	bl	80002bc <__adddf3>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4610      	mov	r0, r2
 8009568:	4619      	mov	r1, r3
 800956a:	f7f7 fb0d 	bl	8000b88 <__aeabi_d2iz>
 800956e:	4603      	mov	r3, r0
 8009570:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8009572:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009574:	f7f6 ffee 	bl	8000554 <__aeabi_i2d>
 8009578:	a35f      	add	r3, pc, #380	; (adr r3, 80096f8 <_etoa+0x320>)
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	f7f7 f853 	bl	8000628 <__aeabi_dmul>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4614      	mov	r4, r2
 8009588:	461d      	mov	r5, r3
 800958a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800958c:	f7f6 ffe2 	bl	8000554 <__aeabi_i2d>
 8009590:	a35b      	add	r3, pc, #364	; (adr r3, 8009700 <_etoa+0x328>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	f7f7 f847 	bl	8000628 <__aeabi_dmul>
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	4620      	mov	r0, r4
 80095a0:	4629      	mov	r1, r5
 80095a2:	f7f6 fe89 	bl	80002b8 <__aeabi_dsub>
 80095a6:	4602      	mov	r2, r0
 80095a8:	460b      	mov	r3, r1
 80095aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 80095ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80095b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80095b6:	f7f7 f837 	bl	8000628 <__aeabi_dmul>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80095c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095c4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80095c8:	17da      	asrs	r2, r3, #31
 80095ca:	469a      	mov	sl, r3
 80095cc:	4693      	mov	fp, r2
 80095ce:	f04f 0200 	mov.w	r2, #0
 80095d2:	f04f 0300 	mov.w	r3, #0
 80095d6:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80095da:	2200      	movs	r2, #0
 80095dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80095e0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80095e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80095e8:	4602      	mov	r2, r0
 80095ea:	460b      	mov	r3, r1
 80095ec:	f7f6 fe66 	bl	80002bc <__adddf3>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4690      	mov	r8, r2
 80095f6:	4699      	mov	r9, r3
 80095f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80095fc:	f04f 0000 	mov.w	r0, #0
 8009600:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009604:	f7f6 fe58 	bl	80002b8 <__aeabi_dsub>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	4692      	mov	sl, r2
 800960e:	469b      	mov	fp, r3
 8009610:	f04f 0200 	mov.w	r2, #0
 8009614:	4b3f      	ldr	r3, [pc, #252]	; (8009714 <_etoa+0x33c>)
 8009616:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800961a:	f7f7 f92f 	bl	800087c <__aeabi_ddiv>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	4610      	mov	r0, r2
 8009624:	4619      	mov	r1, r3
 8009626:	f04f 0200 	mov.w	r2, #0
 800962a:	4b3b      	ldr	r3, [pc, #236]	; (8009718 <_etoa+0x340>)
 800962c:	f7f6 fe46 	bl	80002bc <__adddf3>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009638:	f7f7 f920 	bl	800087c <__aeabi_ddiv>
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	4610      	mov	r0, r2
 8009642:	4619      	mov	r1, r3
 8009644:	f04f 0200 	mov.w	r2, #0
 8009648:	4b34      	ldr	r3, [pc, #208]	; (800971c <_etoa+0x344>)
 800964a:	f7f6 fe37 	bl	80002bc <__adddf3>
 800964e:	4602      	mov	r2, r0
 8009650:	460b      	mov	r3, r1
 8009652:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009656:	f7f7 f911 	bl	800087c <__aeabi_ddiv>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	4650      	mov	r0, sl
 8009660:	4659      	mov	r1, fp
 8009662:	f7f6 fe2b 	bl	80002bc <__adddf3>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4640      	mov	r0, r8
 800966c:	4649      	mov	r1, r9
 800966e:	f7f7 f905 	bl	800087c <__aeabi_ddiv>
 8009672:	4602      	mov	r2, r0
 8009674:	460b      	mov	r3, r1
 8009676:	4610      	mov	r0, r2
 8009678:	4619      	mov	r1, r3
 800967a:	f04f 0200 	mov.w	r2, #0
 800967e:	4b28      	ldr	r3, [pc, #160]	; (8009720 <_etoa+0x348>)
 8009680:	f7f6 fe1c 	bl	80002bc <__adddf3>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	4620      	mov	r0, r4
 800968a:	4629      	mov	r1, r5
 800968c:	f7f6 ffcc 	bl	8000628 <__aeabi_dmul>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8009698:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800969c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80096a0:	f7f7 fa34 	bl	8000b0c <__aeabi_dcmplt>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00d      	beq.n	80096c6 <_etoa+0x2ee>
    expval--;
 80096aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096ac:	3b01      	subs	r3, #1
 80096ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 80096b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80096b4:	f04f 0200 	mov.w	r2, #0
 80096b8:	4b17      	ldr	r3, [pc, #92]	; (8009718 <_etoa+0x340>)
 80096ba:	f7f7 f8df 	bl	800087c <__aeabi_ddiv>
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80096c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096c8:	2b63      	cmp	r3, #99	; 0x63
 80096ca:	dc2b      	bgt.n	8009724 <_etoa+0x34c>
 80096cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096ce:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80096d2:	db27      	blt.n	8009724 <_etoa+0x34c>
 80096d4:	2304      	movs	r3, #4
 80096d6:	e026      	b.n	8009726 <_etoa+0x34e>
 80096d8:	509f79fb 	.word	0x509f79fb
 80096dc:	3fd34413 	.word	0x3fd34413
 80096e0:	8b60c8b3 	.word	0x8b60c8b3
 80096e4:	3fc68a28 	.word	0x3fc68a28
 80096e8:	636f4361 	.word	0x636f4361
 80096ec:	3fd287a7 	.word	0x3fd287a7
 80096f0:	0979a371 	.word	0x0979a371
 80096f4:	400a934f 	.word	0x400a934f
 80096f8:	bbb55516 	.word	0xbbb55516
 80096fc:	40026bb1 	.word	0x40026bb1
 8009700:	fefa39ef 	.word	0xfefa39ef
 8009704:	3fe62e42 	.word	0x3fe62e42
 8009708:	7fefffff 	.word	0x7fefffff
 800970c:	3ff80000 	.word	0x3ff80000
 8009710:	3fe00000 	.word	0x3fe00000
 8009714:	402c0000 	.word	0x402c0000
 8009718:	40240000 	.word	0x40240000
 800971c:	40180000 	.word	0x40180000
 8009720:	3ff00000 	.word	0x3ff00000
 8009724:	2305      	movs	r3, #5
 8009726:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8009728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800972c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009730:	2b00      	cmp	r3, #0
 8009732:	d03d      	beq.n	80097b0 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8009734:	a368      	add	r3, pc, #416	; (adr r3, 80098d8 <_etoa+0x500>)
 8009736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800973e:	f7f7 f9f9 	bl	8000b34 <__aeabi_dcmpge>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d024      	beq.n	8009792 <_etoa+0x3ba>
 8009748:	a365      	add	r3, pc, #404	; (adr r3, 80098e0 <_etoa+0x508>)
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009752:	f7f7 f9db 	bl	8000b0c <__aeabi_dcmplt>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d01a      	beq.n	8009792 <_etoa+0x3ba>
      if ((int)prec > expval) {
 800975c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009760:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009762:	429a      	cmp	r2, r3
 8009764:	da07      	bge.n	8009776 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8009766:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800976a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	3b01      	subs	r3, #1
 8009770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009774:	e002      	b.n	800977c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800977c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009780:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009784:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 800978c:	2300      	movs	r3, #0
 800978e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009790:	e00e      	b.n	80097b0 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8009792:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00a      	beq.n	80097b0 <_etoa+0x3d8>
 800979a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800979e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d004      	beq.n	80097b0 <_etoa+0x3d8>
        --prec;
 80097a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097aa:	3b01      	subs	r3, #1
 80097ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80097b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 80097b6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80097ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097bc:	429a      	cmp	r2, r3
 80097be:	d904      	bls.n	80097ca <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80097c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	657b      	str	r3, [r7, #84]	; 0x54
 80097c8:	e001      	b.n	80097ce <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80097ca:	2300      	movs	r3, #0
 80097cc:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80097ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097d2:	f003 0302 	and.w	r3, r3, #2
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d004      	beq.n	80097e4 <_etoa+0x40c>
 80097da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 80097e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d009      	beq.n	80097fe <_etoa+0x426>
    value /= conv.F;
 80097ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80097f2:	f7f7 f843 	bl	800087c <__aeabi_ddiv>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8009802:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009806:	2b00      	cmp	r3, #0
 8009808:	d006      	beq.n	8009818 <_etoa+0x440>
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	60bb      	str	r3, [r7, #8]
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009814:	60fb      	str	r3, [r7, #12]
 8009816:	e003      	b.n	8009820 <_etoa+0x448>
 8009818:	ed97 7b04 	vldr	d7, [r7, #16]
 800981c:	ed87 7b02 	vstr	d7, [r7, #8]
 8009820:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009828:	9302      	str	r3, [sp, #8]
 800982a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800982c:	9301      	str	r3, [sp, #4]
 800982e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	ed97 0b02 	vldr	d0, [r7, #8]
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	69fa      	ldr	r2, [r7, #28]
 800983c:	6a39      	ldr	r1, [r7, #32]
 800983e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009840:	f7ff fb72 	bl	8008f28 <_ftoa>
 8009844:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8009846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009848:	2b00      	cmp	r3, #0
 800984a:	d03f      	beq.n	80098cc <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800984c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009850:	f003 0320 	and.w	r3, r3, #32
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <_etoa+0x484>
 8009858:	2045      	movs	r0, #69	; 0x45
 800985a:	e000      	b.n	800985e <_etoa+0x486>
 800985c:	2065      	movs	r0, #101	; 0x65
 800985e:	69fa      	ldr	r2, [r7, #28]
 8009860:	1c53      	adds	r3, r2, #1
 8009862:	61fb      	str	r3, [r7, #28]
 8009864:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	6a39      	ldr	r1, [r7, #32]
 800986a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800986c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800986e:	2b00      	cmp	r3, #0
 8009870:	bfb8      	it	lt
 8009872:	425b      	neglt	r3, r3
 8009874:	4618      	mov	r0, r3
 8009876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009878:	0fdb      	lsrs	r3, r3, #31
 800987a:	b2db      	uxtb	r3, r3
 800987c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800987e:	3a01      	subs	r2, #1
 8009880:	2105      	movs	r1, #5
 8009882:	9105      	str	r1, [sp, #20]
 8009884:	9204      	str	r2, [sp, #16]
 8009886:	2200      	movs	r2, #0
 8009888:	9203      	str	r2, [sp, #12]
 800988a:	220a      	movs	r2, #10
 800988c:	9202      	str	r2, [sp, #8]
 800988e:	9301      	str	r3, [sp, #4]
 8009890:	9000      	str	r0, [sp, #0]
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	69fa      	ldr	r2, [r7, #28]
 8009896:	6a39      	ldr	r1, [r7, #32]
 8009898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800989a:	f7ff fa71 	bl	8008d80 <_ntoa_long>
 800989e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80098a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00f      	beq.n	80098cc <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80098ac:	e007      	b.n	80098be <_etoa+0x4e6>
 80098ae:	69fa      	ldr	r2, [r7, #28]
 80098b0:	1c53      	adds	r3, r2, #1
 80098b2:	61fb      	str	r3, [r7, #28]
 80098b4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	6a39      	ldr	r1, [r7, #32]
 80098ba:	2020      	movs	r0, #32
 80098bc:	47a0      	blx	r4
 80098be:	69fa      	ldr	r2, [r7, #28]
 80098c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d8f0      	bhi.n	80098ae <_etoa+0x4d6>
    }
  }
  return idx;
 80098cc:	69fb      	ldr	r3, [r7, #28]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3764      	adds	r7, #100	; 0x64
 80098d2:	46bd      	mov	sp, r7
 80098d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d8:	eb1c432d 	.word	0xeb1c432d
 80098dc:	3f1a36e2 	.word	0x3f1a36e2
 80098e0:	00000000 	.word	0x00000000
 80098e4:	412e8480 	.word	0x412e8480

080098e8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80098e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ec:	b0a3      	sub	sp, #140	; 0x8c
 80098ee:	af0a      	add	r7, sp, #40	; 0x28
 80098f0:	6178      	str	r0, [r7, #20]
 80098f2:	6139      	str	r1, [r7, #16]
 80098f4:	60fa      	str	r2, [r7, #12]
 80098f6:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f040 84be 	bne.w	800a280 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 8009904:	4ba3      	ldr	r3, [pc, #652]	; (8009b94 <_vsnprintf+0x2ac>)
 8009906:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8009908:	f000 bcba 	b.w	800a280 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b25      	cmp	r3, #37	; 0x25
 8009912:	d00d      	beq.n	8009930 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	7818      	ldrb	r0, [r3, #0]
 8009918:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800991a:	1c53      	adds	r3, r2, #1
 800991c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800991e:	697c      	ldr	r4, [r7, #20]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6939      	ldr	r1, [r7, #16]
 8009924:	47a0      	blx	r4
      format++;
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	3301      	adds	r3, #1
 800992a:	60bb      	str	r3, [r7, #8]
      continue;
 800992c:	f000 bca8 	b.w	800a280 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	3301      	adds	r3, #1
 8009934:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	3b20      	subs	r3, #32
 8009940:	2b10      	cmp	r3, #16
 8009942:	d857      	bhi.n	80099f4 <_vsnprintf+0x10c>
 8009944:	a201      	add	r2, pc, #4	; (adr r2, 800994c <_vsnprintf+0x64>)
 8009946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994a:	bf00      	nop
 800994c:	080099cd 	.word	0x080099cd
 8009950:	080099f5 	.word	0x080099f5
 8009954:	080099f5 	.word	0x080099f5
 8009958:	080099e1 	.word	0x080099e1
 800995c:	080099f5 	.word	0x080099f5
 8009960:	080099f5 	.word	0x080099f5
 8009964:	080099f5 	.word	0x080099f5
 8009968:	080099f5 	.word	0x080099f5
 800996c:	080099f5 	.word	0x080099f5
 8009970:	080099f5 	.word	0x080099f5
 8009974:	080099f5 	.word	0x080099f5
 8009978:	080099b9 	.word	0x080099b9
 800997c:	080099f5 	.word	0x080099f5
 8009980:	080099a5 	.word	0x080099a5
 8009984:	080099f5 	.word	0x080099f5
 8009988:	080099f5 	.word	0x080099f5
 800998c:	08009991 	.word	0x08009991
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8009990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009992:	f043 0301 	orr.w	r3, r3, #1
 8009996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	3301      	adds	r3, #1
 800999c:	60bb      	str	r3, [r7, #8]
 800999e:	2301      	movs	r3, #1
 80099a0:	653b      	str	r3, [r7, #80]	; 0x50
 80099a2:	e02a      	b.n	80099fa <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80099a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099a6:	f043 0302 	orr.w	r3, r3, #2
 80099aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	3301      	adds	r3, #1
 80099b0:	60bb      	str	r3, [r7, #8]
 80099b2:	2301      	movs	r3, #1
 80099b4:	653b      	str	r3, [r7, #80]	; 0x50
 80099b6:	e020      	b.n	80099fa <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80099b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099ba:	f043 0304 	orr.w	r3, r3, #4
 80099be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	3301      	adds	r3, #1
 80099c4:	60bb      	str	r3, [r7, #8]
 80099c6:	2301      	movs	r3, #1
 80099c8:	653b      	str	r3, [r7, #80]	; 0x50
 80099ca:	e016      	b.n	80099fa <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80099cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099ce:	f043 0308 	orr.w	r3, r3, #8
 80099d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	3301      	adds	r3, #1
 80099d8:	60bb      	str	r3, [r7, #8]
 80099da:	2301      	movs	r3, #1
 80099dc:	653b      	str	r3, [r7, #80]	; 0x50
 80099de:	e00c      	b.n	80099fa <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80099e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099e2:	f043 0310 	orr.w	r3, r3, #16
 80099e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	3301      	adds	r3, #1
 80099ec:	60bb      	str	r3, [r7, #8]
 80099ee:	2301      	movs	r3, #1
 80099f0:	653b      	str	r3, [r7, #80]	; 0x50
 80099f2:	e002      	b.n	80099fa <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80099f4:	2300      	movs	r3, #0
 80099f6:	653b      	str	r3, [r7, #80]	; 0x50
 80099f8:	bf00      	nop
      }
    } while (n);
 80099fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d19c      	bne.n	800993a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7ff f852 	bl	8008ab2 <_is_digit>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d006      	beq.n	8009a22 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8009a14:	f107 0308 	add.w	r3, r7, #8
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7ff f861 	bl	8008ae0 <_atoi>
 8009a1e:	65b8      	str	r0, [r7, #88]	; 0x58
 8009a20:	e01a      	b.n	8009a58 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	2b2a      	cmp	r3, #42	; 0x2a
 8009a28:	d116      	bne.n	8009a58 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8009a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a2e:	1d1a      	adds	r2, r3, #4
 8009a30:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8009a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	da07      	bge.n	8009a4e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8009a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a40:	f043 0302 	orr.w	r3, r3, #2
 8009a44:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8009a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a48:	425b      	negs	r3, r3
 8009a4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a4c:	e001      	b.n	8009a52 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a50:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	3301      	adds	r3, #1
 8009a56:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	2b2e      	cmp	r3, #46	; 0x2e
 8009a62:	d127      	bne.n	8009ab4 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8009a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7ff f81b 	bl	8008ab2 <_is_digit>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d006      	beq.n	8009a90 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8009a82:	f107 0308 	add.w	r3, r7, #8
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff f82a 	bl	8008ae0 <_atoi>
 8009a8c:	6578      	str	r0, [r7, #84]	; 0x54
 8009a8e:	e011      	b.n	8009ab4 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	2b2a      	cmp	r3, #42	; 0x2a
 8009a96:	d10d      	bne.n	8009ab4 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8009a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a9c:	1d1a      	adds	r2, r3, #4
 8009a9e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8009aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009aac:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	3b68      	subs	r3, #104	; 0x68
 8009aba:	2b12      	cmp	r3, #18
 8009abc:	d866      	bhi.n	8009b8c <_vsnprintf+0x2a4>
 8009abe:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <_vsnprintf+0x1dc>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009b37 	.word	0x08009b37
 8009ac8:	08009b8d 	.word	0x08009b8d
 8009acc:	08009b6d 	.word	0x08009b6d
 8009ad0:	08009b8d 	.word	0x08009b8d
 8009ad4:	08009b11 	.word	0x08009b11
 8009ad8:	08009b8d 	.word	0x08009b8d
 8009adc:	08009b8d 	.word	0x08009b8d
 8009ae0:	08009b8d 	.word	0x08009b8d
 8009ae4:	08009b8d 	.word	0x08009b8d
 8009ae8:	08009b8d 	.word	0x08009b8d
 8009aec:	08009b8d 	.word	0x08009b8d
 8009af0:	08009b8d 	.word	0x08009b8d
 8009af4:	08009b5d 	.word	0x08009b5d
 8009af8:	08009b8d 	.word	0x08009b8d
 8009afc:	08009b8d 	.word	0x08009b8d
 8009b00:	08009b8d 	.word	0x08009b8d
 8009b04:	08009b8d 	.word	0x08009b8d
 8009b08:	08009b8d 	.word	0x08009b8d
 8009b0c:	08009b7d 	.word	0x08009b7d
      case 'l' :
        flags |= FLAGS_LONG;
 8009b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b16:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	2b6c      	cmp	r3, #108	; 0x6c
 8009b24:	d134      	bne.n	8009b90 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8009b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	3301      	adds	r3, #1
 8009b32:	60bb      	str	r3, [r7, #8]
        }
        break;
 8009b34:	e02c      	b.n	8009b90 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8009b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	3301      	adds	r3, #1
 8009b42:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	2b68      	cmp	r3, #104	; 0x68
 8009b4a:	d125      	bne.n	8009b98 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8009b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b52:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	3301      	adds	r3, #1
 8009b58:	60bb      	str	r3, [r7, #8]
        }
        break;
 8009b5a:	e01d      	b.n	8009b98 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8009b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b62:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	3301      	adds	r3, #1
 8009b68:	60bb      	str	r3, [r7, #8]
        break;
 8009b6a:	e016      	b.n	8009b9a <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8009b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b72:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	3301      	adds	r3, #1
 8009b78:	60bb      	str	r3, [r7, #8]
        break;
 8009b7a:	e00e      	b.n	8009b9a <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8009b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b82:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	3301      	adds	r3, #1
 8009b88:	60bb      	str	r3, [r7, #8]
        break;
 8009b8a:	e006      	b.n	8009b9a <_vsnprintf+0x2b2>
      default :
        break;
 8009b8c:	bf00      	nop
 8009b8e:	e004      	b.n	8009b9a <_vsnprintf+0x2b2>
        break;
 8009b90:	bf00      	nop
 8009b92:	e002      	b.n	8009b9a <_vsnprintf+0x2b2>
 8009b94:	08008a5d 	.word	0x08008a5d
        break;
 8009b98:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	3b25      	subs	r3, #37	; 0x25
 8009ba0:	2b53      	cmp	r3, #83	; 0x53
 8009ba2:	f200 8360 	bhi.w	800a266 <_vsnprintf+0x97e>
 8009ba6:	a201      	add	r2, pc, #4	; (adr r2, 8009bac <_vsnprintf+0x2c4>)
 8009ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bac:	0800a24f 	.word	0x0800a24f
 8009bb0:	0800a267 	.word	0x0800a267
 8009bb4:	0800a267 	.word	0x0800a267
 8009bb8:	0800a267 	.word	0x0800a267
 8009bbc:	0800a267 	.word	0x0800a267
 8009bc0:	0800a267 	.word	0x0800a267
 8009bc4:	0800a267 	.word	0x0800a267
 8009bc8:	0800a267 	.word	0x0800a267
 8009bcc:	0800a267 	.word	0x0800a267
 8009bd0:	0800a267 	.word	0x0800a267
 8009bd4:	0800a267 	.word	0x0800a267
 8009bd8:	0800a267 	.word	0x0800a267
 8009bdc:	0800a267 	.word	0x0800a267
 8009be0:	0800a267 	.word	0x0800a267
 8009be4:	0800a267 	.word	0x0800a267
 8009be8:	0800a267 	.word	0x0800a267
 8009bec:	0800a267 	.word	0x0800a267
 8009bf0:	0800a267 	.word	0x0800a267
 8009bf4:	0800a267 	.word	0x0800a267
 8009bf8:	0800a267 	.word	0x0800a267
 8009bfc:	0800a267 	.word	0x0800a267
 8009c00:	0800a267 	.word	0x0800a267
 8009c04:	0800a267 	.word	0x0800a267
 8009c08:	0800a267 	.word	0x0800a267
 8009c0c:	0800a267 	.word	0x0800a267
 8009c10:	0800a267 	.word	0x0800a267
 8009c14:	0800a267 	.word	0x0800a267
 8009c18:	0800a267 	.word	0x0800a267
 8009c1c:	0800a267 	.word	0x0800a267
 8009c20:	0800a267 	.word	0x0800a267
 8009c24:	0800a267 	.word	0x0800a267
 8009c28:	0800a267 	.word	0x0800a267
 8009c2c:	0800a003 	.word	0x0800a003
 8009c30:	08009fb3 	.word	0x08009fb3
 8009c34:	0800a003 	.word	0x0800a003
 8009c38:	0800a267 	.word	0x0800a267
 8009c3c:	0800a267 	.word	0x0800a267
 8009c40:	0800a267 	.word	0x0800a267
 8009c44:	0800a267 	.word	0x0800a267
 8009c48:	0800a267 	.word	0x0800a267
 8009c4c:	0800a267 	.word	0x0800a267
 8009c50:	0800a267 	.word	0x0800a267
 8009c54:	0800a267 	.word	0x0800a267
 8009c58:	0800a267 	.word	0x0800a267
 8009c5c:	0800a267 	.word	0x0800a267
 8009c60:	0800a267 	.word	0x0800a267
 8009c64:	0800a267 	.word	0x0800a267
 8009c68:	0800a267 	.word	0x0800a267
 8009c6c:	0800a267 	.word	0x0800a267
 8009c70:	0800a267 	.word	0x0800a267
 8009c74:	0800a267 	.word	0x0800a267
 8009c78:	08009cfd 	.word	0x08009cfd
 8009c7c:	0800a267 	.word	0x0800a267
 8009c80:	0800a267 	.word	0x0800a267
 8009c84:	0800a267 	.word	0x0800a267
 8009c88:	0800a267 	.word	0x0800a267
 8009c8c:	0800a267 	.word	0x0800a267
 8009c90:	0800a267 	.word	0x0800a267
 8009c94:	0800a267 	.word	0x0800a267
 8009c98:	0800a267 	.word	0x0800a267
 8009c9c:	0800a267 	.word	0x0800a267
 8009ca0:	08009cfd 	.word	0x08009cfd
 8009ca4:	0800a073 	.word	0x0800a073
 8009ca8:	08009cfd 	.word	0x08009cfd
 8009cac:	0800a003 	.word	0x0800a003
 8009cb0:	08009fb3 	.word	0x08009fb3
 8009cb4:	0800a003 	.word	0x0800a003
 8009cb8:	0800a267 	.word	0x0800a267
 8009cbc:	08009cfd 	.word	0x08009cfd
 8009cc0:	0800a267 	.word	0x0800a267
 8009cc4:	0800a267 	.word	0x0800a267
 8009cc8:	0800a267 	.word	0x0800a267
 8009ccc:	0800a267 	.word	0x0800a267
 8009cd0:	0800a267 	.word	0x0800a267
 8009cd4:	08009cfd 	.word	0x08009cfd
 8009cd8:	0800a1b3 	.word	0x0800a1b3
 8009cdc:	0800a267 	.word	0x0800a267
 8009ce0:	0800a267 	.word	0x0800a267
 8009ce4:	0800a0eb 	.word	0x0800a0eb
 8009ce8:	0800a267 	.word	0x0800a267
 8009cec:	08009cfd 	.word	0x08009cfd
 8009cf0:	0800a267 	.word	0x0800a267
 8009cf4:	0800a267 	.word	0x0800a267
 8009cf8:	08009cfd 	.word	0x08009cfd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	2b78      	cmp	r3, #120	; 0x78
 8009d02:	d003      	beq.n	8009d0c <_vsnprintf+0x424>
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	2b58      	cmp	r3, #88	; 0x58
 8009d0a:	d102      	bne.n	8009d12 <_vsnprintf+0x42a>
          base = 16U;
 8009d0c:	2310      	movs	r3, #16
 8009d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d10:	e013      	b.n	8009d3a <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	2b6f      	cmp	r3, #111	; 0x6f
 8009d18:	d102      	bne.n	8009d20 <_vsnprintf+0x438>
          base =  8U;
 8009d1a:	2308      	movs	r3, #8
 8009d1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d1e:	e00c      	b.n	8009d3a <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	2b62      	cmp	r3, #98	; 0x62
 8009d26:	d102      	bne.n	8009d2e <_vsnprintf+0x446>
          base =  2U;
 8009d28:	2302      	movs	r3, #2
 8009d2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d2c:	e005      	b.n	8009d3a <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8009d2e:	230a      	movs	r3, #10
 8009d30:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8009d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d34:	f023 0310 	bic.w	r3, r3, #16
 8009d38:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	2b58      	cmp	r3, #88	; 0x58
 8009d40:	d103      	bne.n	8009d4a <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8009d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d44:	f043 0320 	orr.w	r3, r3, #32
 8009d48:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	2b69      	cmp	r3, #105	; 0x69
 8009d50:	d007      	beq.n	8009d62 <_vsnprintf+0x47a>
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	2b64      	cmp	r3, #100	; 0x64
 8009d58:	d003      	beq.n	8009d62 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8009d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d5c:	f023 030c 	bic.w	r3, r3, #12
 8009d60:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8009d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d003      	beq.n	8009d74 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8009d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d6e:	f023 0301 	bic.w	r3, r3, #1
 8009d72:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b69      	cmp	r3, #105	; 0x69
 8009d7a:	d004      	beq.n	8009d86 <_vsnprintf+0x49e>
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	2b64      	cmp	r3, #100	; 0x64
 8009d82:	f040 8098 	bne.w	8009eb6 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8009d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d031      	beq.n	8009df4 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8009d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d94:	3307      	adds	r3, #7
 8009d96:	f023 0307 	bic.w	r3, r3, #7
 8009d9a:	f103 0208 	add.w	r2, r3, #8
 8009d9e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da6:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8009daa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	da06      	bge.n	8009dc0 <_vsnprintf+0x4d8>
 8009db2:	2100      	movs	r1, #0
 8009db4:	f1d2 0800 	rsbs	r8, r2, #0
 8009db8:	eb61 0903 	sbc.w	r9, r1, r3
 8009dbc:	4642      	mov	r2, r8
 8009dbe:	464b      	mov	r3, r9
 8009dc0:	69f9      	ldr	r1, [r7, #28]
 8009dc2:	0fc9      	lsrs	r1, r1, #31
 8009dc4:	b2c9      	uxtb	r1, r1
 8009dc6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009dc8:	2400      	movs	r4, #0
 8009dca:	4682      	mov	sl, r0
 8009dcc:	46a3      	mov	fp, r4
 8009dce:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009dd0:	9008      	str	r0, [sp, #32]
 8009dd2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009dd4:	9007      	str	r0, [sp, #28]
 8009dd6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009dd8:	9006      	str	r0, [sp, #24]
 8009dda:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8009dde:	9102      	str	r1, [sp, #8]
 8009de0:	e9cd 2300 	strd	r2, r3, [sp]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009de8:	6939      	ldr	r1, [r7, #16]
 8009dea:	6978      	ldr	r0, [r7, #20]
 8009dec:	f7ff f82e 	bl	8008e4c <_ntoa_long_long>
 8009df0:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8009df2:	e0da      	b.n	8009faa <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8009df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d020      	beq.n	8009e40 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8009dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e02:	1d1a      	adds	r2, r3, #4
 8009e04:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	bfb8      	it	lt
 8009e12:	425b      	neglt	r3, r3
 8009e14:	4619      	mov	r1, r3
 8009e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e18:	0fdb      	lsrs	r3, r3, #31
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e1e:	9205      	str	r2, [sp, #20]
 8009e20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e22:	9204      	str	r2, [sp, #16]
 8009e24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e26:	9203      	str	r2, [sp, #12]
 8009e28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e2a:	9202      	str	r2, [sp, #8]
 8009e2c:	9301      	str	r3, [sp, #4]
 8009e2e:	9100      	str	r1, [sp, #0]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e34:	6939      	ldr	r1, [r7, #16]
 8009e36:	6978      	ldr	r0, [r7, #20]
 8009e38:	f7fe ffa2 	bl	8008d80 <_ntoa_long>
 8009e3c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8009e3e:	e0b4      	b.n	8009faa <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8009e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d007      	beq.n	8009e5a <_vsnprintf+0x572>
 8009e4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e4e:	1d1a      	adds	r2, r3, #4
 8009e50:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	e012      	b.n	8009e80 <_vsnprintf+0x598>
 8009e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d007      	beq.n	8009e74 <_vsnprintf+0x58c>
 8009e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e68:	1d1a      	adds	r2, r3, #4
 8009e6a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	b21b      	sxth	r3, r3
 8009e72:	e005      	b.n	8009e80 <_vsnprintf+0x598>
 8009e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e78:	1d1a      	adds	r2, r3, #4
 8009e7a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8009e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	bfb8      	it	lt
 8009e88:	425b      	neglt	r3, r3
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8e:	0fdb      	lsrs	r3, r3, #31
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e94:	9205      	str	r2, [sp, #20]
 8009e96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e98:	9204      	str	r2, [sp, #16]
 8009e9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e9c:	9203      	str	r2, [sp, #12]
 8009e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ea0:	9202      	str	r2, [sp, #8]
 8009ea2:	9301      	str	r3, [sp, #4]
 8009ea4:	9100      	str	r1, [sp, #0]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009eaa:	6939      	ldr	r1, [r7, #16]
 8009eac:	6978      	ldr	r0, [r7, #20]
 8009eae:	f7fe ff67 	bl	8008d80 <_ntoa_long>
 8009eb2:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8009eb4:	e079      	b.n	8009faa <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8009eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d022      	beq.n	8009f06 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8009ec0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ec4:	3307      	adds	r3, #7
 8009ec6:	f023 0307 	bic.w	r3, r3, #7
 8009eca:	f103 0208 	add.w	r2, r3, #8
 8009ece:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009ed8:	2000      	movs	r0, #0
 8009eda:	460d      	mov	r5, r1
 8009edc:	4606      	mov	r6, r0
 8009ede:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009ee0:	9108      	str	r1, [sp, #32]
 8009ee2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ee4:	9107      	str	r1, [sp, #28]
 8009ee6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ee8:	9106      	str	r1, [sp, #24]
 8009eea:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8009eee:	2100      	movs	r1, #0
 8009ef0:	9102      	str	r1, [sp, #8]
 8009ef2:	e9cd 2300 	strd	r2, r3, [sp]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009efa:	6939      	ldr	r1, [r7, #16]
 8009efc:	6978      	ldr	r0, [r7, #20]
 8009efe:	f7fe ffa5 	bl	8008e4c <_ntoa_long_long>
 8009f02:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009f04:	e051      	b.n	8009faa <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8009f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d018      	beq.n	8009f42 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8009f10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f14:	1d1a      	adds	r2, r3, #4
 8009f16:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f1e:	9205      	str	r2, [sp, #20]
 8009f20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f22:	9204      	str	r2, [sp, #16]
 8009f24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f26:	9203      	str	r2, [sp, #12]
 8009f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f2a:	9202      	str	r2, [sp, #8]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	9201      	str	r2, [sp, #4]
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f36:	6939      	ldr	r1, [r7, #16]
 8009f38:	6978      	ldr	r0, [r7, #20]
 8009f3a:	f7fe ff21 	bl	8008d80 <_ntoa_long>
 8009f3e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009f40:	e033      	b.n	8009faa <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8009f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d007      	beq.n	8009f5c <_vsnprintf+0x674>
 8009f4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f50:	1d1a      	adds	r2, r3, #4
 8009f52:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	e012      	b.n	8009f82 <_vsnprintf+0x69a>
 8009f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d007      	beq.n	8009f76 <_vsnprintf+0x68e>
 8009f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f6a:	1d1a      	adds	r2, r3, #4
 8009f6c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	e005      	b.n	8009f82 <_vsnprintf+0x69a>
 8009f76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f7a:	1d1a      	adds	r2, r3, #4
 8009f7c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8009f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f86:	9305      	str	r3, [sp, #20]
 8009f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f8a:	9304      	str	r3, [sp, #16]
 8009f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f8e:	9303      	str	r3, [sp, #12]
 8009f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f92:	9302      	str	r3, [sp, #8]
 8009f94:	2300      	movs	r3, #0
 8009f96:	9301      	str	r3, [sp, #4]
 8009f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fa0:	6939      	ldr	r1, [r7, #16]
 8009fa2:	6978      	ldr	r0, [r7, #20]
 8009fa4:	f7fe feec 	bl	8008d80 <_ntoa_long>
 8009fa8:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	3301      	adds	r3, #1
 8009fae:	60bb      	str	r3, [r7, #8]
        break;
 8009fb0:	e166      	b.n	800a280 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	2b46      	cmp	r3, #70	; 0x46
 8009fb8:	d103      	bne.n	8009fc2 <_vsnprintf+0x6da>
 8009fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fbc:	f043 0320 	orr.w	r3, r3, #32
 8009fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8009fc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009fc6:	3307      	adds	r3, #7
 8009fc8:	f023 0307 	bic.w	r3, r3, #7
 8009fcc:	f103 0208 	add.w	r2, r3, #8
 8009fd0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009fd4:	ed93 7b00 	vldr	d7, [r3]
 8009fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fda:	9302      	str	r3, [sp, #8]
 8009fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009fde:	9301      	str	r3, [sp, #4]
 8009fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	eeb0 0a47 	vmov.f32	s0, s14
 8009fe8:	eef0 0a67 	vmov.f32	s1, s15
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ff0:	6939      	ldr	r1, [r7, #16]
 8009ff2:	6978      	ldr	r0, [r7, #20]
 8009ff4:	f7fe ff98 	bl	8008f28 <_ftoa>
 8009ff8:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	60bb      	str	r3, [r7, #8]
        break;
 800a000:	e13e      	b.n	800a280 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	2b67      	cmp	r3, #103	; 0x67
 800a008:	d003      	beq.n	800a012 <_vsnprintf+0x72a>
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	2b47      	cmp	r3, #71	; 0x47
 800a010:	d103      	bne.n	800a01a <_vsnprintf+0x732>
 800a012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a014:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a018:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	2b45      	cmp	r3, #69	; 0x45
 800a020:	d003      	beq.n	800a02a <_vsnprintf+0x742>
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	2b47      	cmp	r3, #71	; 0x47
 800a028:	d103      	bne.n	800a032 <_vsnprintf+0x74a>
 800a02a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a02c:	f043 0320 	orr.w	r3, r3, #32
 800a030:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800a032:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a036:	3307      	adds	r3, #7
 800a038:	f023 0307 	bic.w	r3, r3, #7
 800a03c:	f103 0208 	add.w	r2, r3, #8
 800a040:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a044:	ed93 7b00 	vldr	d7, [r3]
 800a048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a04a:	9302      	str	r3, [sp, #8]
 800a04c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	eeb0 0a47 	vmov.f32	s0, s14
 800a058:	eef0 0a67 	vmov.f32	s1, s15
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a060:	6939      	ldr	r1, [r7, #16]
 800a062:	6978      	ldr	r0, [r7, #20]
 800a064:	f7ff f9b8 	bl	80093d8 <_etoa>
 800a068:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	3301      	adds	r3, #1
 800a06e:	60bb      	str	r3, [r7, #8]
        break;
 800a070:	e106      	b.n	800a280 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800a072:	2301      	movs	r3, #1
 800a074:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800a076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a078:	f003 0302 	and.w	r3, r3, #2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10e      	bne.n	800a09e <_vsnprintf+0x7b6>
          while (l++ < width) {
 800a080:	e007      	b.n	800a092 <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 800a082:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a084:	1c53      	adds	r3, r2, #1
 800a086:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a088:	697c      	ldr	r4, [r7, #20]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6939      	ldr	r1, [r7, #16]
 800a08e:	2020      	movs	r0, #32
 800a090:	47a0      	blx	r4
          while (l++ < width) {
 800a092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a094:	1c5a      	adds	r2, r3, #1
 800a096:	647a      	str	r2, [r7, #68]	; 0x44
 800a098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d8f1      	bhi.n	800a082 <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800a09e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a0a2:	1d1a      	adds	r2, r3, #4
 800a0a4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	b2d8      	uxtb	r0, r3
 800a0ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0ae:	1c53      	adds	r3, r2, #1
 800a0b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0b2:	697c      	ldr	r4, [r7, #20]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6939      	ldr	r1, [r7, #16]
 800a0b8:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800a0ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0bc:	f003 0302 	and.w	r3, r3, #2
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00e      	beq.n	800a0e2 <_vsnprintf+0x7fa>
          while (l++ < width) {
 800a0c4:	e007      	b.n	800a0d6 <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 800a0c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0c8:	1c53      	adds	r3, r2, #1
 800a0ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0cc:	697c      	ldr	r4, [r7, #20]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6939      	ldr	r1, [r7, #16]
 800a0d2:	2020      	movs	r0, #32
 800a0d4:	47a0      	blx	r4
          while (l++ < width) {
 800a0d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0d8:	1c5a      	adds	r2, r3, #1
 800a0da:	647a      	str	r2, [r7, #68]	; 0x44
 800a0dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d8f1      	bhi.n	800a0c6 <_vsnprintf+0x7de>
          }
        }
        format++;
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	60bb      	str	r3, [r7, #8]
        break;
 800a0e8:	e0ca      	b.n	800a280 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800a0ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a0ee:	1d1a      	adds	r2, r3, #4
 800a0f0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800a0f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d001      	beq.n	800a102 <_vsnprintf+0x81a>
 800a0fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a100:	e001      	b.n	800a106 <_vsnprintf+0x81e>
 800a102:	f04f 33ff 	mov.w	r3, #4294967295
 800a106:	4619      	mov	r1, r3
 800a108:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a10a:	f7fe fcb5 	bl	8008a78 <_strnlen_s>
 800a10e:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800a110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a116:	2b00      	cmp	r3, #0
 800a118:	d005      	beq.n	800a126 <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 800a11a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a11c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a11e:	4293      	cmp	r3, r2
 800a120:	bf28      	it	cs
 800a122:	4613      	movcs	r3, r2
 800a124:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 800a126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a128:	f003 0302 	and.w	r3, r3, #2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d11a      	bne.n	800a166 <_vsnprintf+0x87e>
          while (l++ < width) {
 800a130:	e007      	b.n	800a142 <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 800a132:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a134:	1c53      	adds	r3, r2, #1
 800a136:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a138:	697c      	ldr	r4, [r7, #20]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6939      	ldr	r1, [r7, #16]
 800a13e:	2020      	movs	r0, #32
 800a140:	47a0      	blx	r4
          while (l++ < width) {
 800a142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d8f1      	bhi.n	800a132 <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800a14e:	e00a      	b.n	800a166 <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 800a150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a152:	1c5a      	adds	r2, r3, #1
 800a154:	643a      	str	r2, [r7, #64]	; 0x40
 800a156:	7818      	ldrb	r0, [r3, #0]
 800a158:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a15a:	1c53      	adds	r3, r2, #1
 800a15c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a15e:	697c      	ldr	r4, [r7, #20]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6939      	ldr	r1, [r7, #16]
 800a164:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800a166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d009      	beq.n	800a182 <_vsnprintf+0x89a>
 800a16e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a174:	2b00      	cmp	r3, #0
 800a176:	d0eb      	beq.n	800a150 <_vsnprintf+0x868>
 800a178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a17a:	1e5a      	subs	r2, r3, #1
 800a17c:	657a      	str	r2, [r7, #84]	; 0x54
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1e6      	bne.n	800a150 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800a182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a184:	f003 0302 	and.w	r3, r3, #2
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00e      	beq.n	800a1aa <_vsnprintf+0x8c2>
          while (l++ < width) {
 800a18c:	e007      	b.n	800a19e <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 800a18e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a190:	1c53      	adds	r3, r2, #1
 800a192:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a194:	697c      	ldr	r4, [r7, #20]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6939      	ldr	r1, [r7, #16]
 800a19a:	2020      	movs	r0, #32
 800a19c:	47a0      	blx	r4
          while (l++ < width) {
 800a19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a0:	1c5a      	adds	r2, r3, #1
 800a1a2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a1a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d8f1      	bhi.n	800a18e <_vsnprintf+0x8a6>
          }
        }
        format++;
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	60bb      	str	r3, [r7, #8]
        break;
 800a1b0:	e066      	b.n	800a280 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800a1b2:	2308      	movs	r3, #8
 800a1b4:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800a1b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1b8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800a1bc:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800a1c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d023      	beq.n	800a214 <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800a1cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1d0:	1d1a      	adds	r2, r3, #4
 800a1d2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	461a      	mov	r2, r3
 800a1da:	2300      	movs	r3, #0
 800a1dc:	603a      	str	r2, [r7, #0]
 800a1de:	607b      	str	r3, [r7, #4]
 800a1e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1e2:	9308      	str	r3, [sp, #32]
 800a1e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1e6:	9307      	str	r3, [sp, #28]
 800a1e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1ea:	9306      	str	r3, [sp, #24]
 800a1ec:	f04f 0210 	mov.w	r2, #16
 800a1f0:	f04f 0300 	mov.w	r3, #0
 800a1f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9302      	str	r3, [sp, #8]
 800a1fc:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a200:	e9cd 3400 	strd	r3, r4, [sp]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a208:	6939      	ldr	r1, [r7, #16]
 800a20a:	6978      	ldr	r0, [r7, #20]
 800a20c:	f7fe fe1e 	bl	8008e4c <_ntoa_long_long>
 800a210:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a212:	e018      	b.n	800a246 <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800a214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a218:	1d1a      	adds	r2, r3, #4
 800a21a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	461a      	mov	r2, r3
 800a222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a224:	9305      	str	r3, [sp, #20]
 800a226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a228:	9304      	str	r3, [sp, #16]
 800a22a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a22c:	9303      	str	r3, [sp, #12]
 800a22e:	2310      	movs	r3, #16
 800a230:	9302      	str	r3, [sp, #8]
 800a232:	2300      	movs	r3, #0
 800a234:	9301      	str	r3, [sp, #4]
 800a236:	9200      	str	r2, [sp, #0]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a23c:	6939      	ldr	r1, [r7, #16]
 800a23e:	6978      	ldr	r0, [r7, #20]
 800a240:	f7fe fd9e 	bl	8008d80 <_ntoa_long>
 800a244:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	3301      	adds	r3, #1
 800a24a:	60bb      	str	r3, [r7, #8]
        break;
 800a24c:	e018      	b.n	800a280 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800a24e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a250:	1c53      	adds	r3, r2, #1
 800a252:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a254:	697c      	ldr	r4, [r7, #20]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6939      	ldr	r1, [r7, #16]
 800a25a:	2025      	movs	r0, #37	; 0x25
 800a25c:	47a0      	blx	r4
        format++;
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	3301      	adds	r3, #1
 800a262:	60bb      	str	r3, [r7, #8]
        break;
 800a264:	e00c      	b.n	800a280 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	7818      	ldrb	r0, [r3, #0]
 800a26a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a26c:	1c53      	adds	r3, r2, #1
 800a26e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a270:	697c      	ldr	r4, [r7, #20]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6939      	ldr	r1, [r7, #16]
 800a276:	47a0      	blx	r4
        format++;
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	3301      	adds	r3, #1
 800a27c:	60bb      	str	r3, [r7, #8]
        break;
 800a27e:	bf00      	nop
  while (*format)
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	f47f ab41 	bne.w	800990c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800a28a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d302      	bcc.n	800a298 <_vsnprintf+0x9b0>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	1e5a      	subs	r2, r3, #1
 800a296:	e000      	b.n	800a29a <_vsnprintf+0x9b2>
 800a298:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a29a:	697c      	ldr	r4, [r7, #20]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6939      	ldr	r1, [r7, #16]
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800a2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3764      	adds	r7, #100	; 0x64
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a2b0 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 800a2b0:	b40e      	push	{r1, r2, r3}
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b087      	sub	sp, #28
 800a2b6:	af02      	add	r7, sp, #8
 800a2b8:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800a2ba:	f107 0320 	add.w	r3, r7, #32
 800a2be:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ca:	6879      	ldr	r1, [r7, #4]
 800a2cc:	4805      	ldr	r0, [pc, #20]	; (800a2e4 <sprintf_+0x34>)
 800a2ce:	f7ff fb0b 	bl	80098e8 <_vsnprintf>
 800a2d2:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3714      	adds	r7, #20
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2e0:	b003      	add	sp, #12
 800a2e2:	4770      	bx	lr
 800a2e4:	08008a2f 	.word	0x08008a2f

0800a2e8 <RFP_Handle>:
        { RFP_WaitForResponseFunction }, { RFP_ParseResponseFunction } };
RFPCommandFunctions_TypeDef RfpCommandFunction[RFP_COMMAND_CNT];
RFPDataFunctions_TypeDef RfpDataFunctions;
RFPMessageFunctions_TypeDef RfpMessageFunction[RFP_MESSAGE_CNT];
void RFP_Handle(void)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	af00      	add	r7, sp, #0
   RFP_ChangeState();
 800a2ec:	f000 f856 	bl	800a39c <RFP_ChangeState>
   if(RfpFunction[Rfp->State].RfpFunction != NULL)
 800a2f0:	4b09      	ldr	r3, [pc, #36]	; (800a318 <RFP_Handle+0x30>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	4b08      	ldr	r3, [pc, #32]	; (800a31c <RFP_Handle+0x34>)
 800a2fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d007      	beq.n	800a312 <RFP_Handle+0x2a>
   {
      RfpFunction[Rfp->State].RfpFunction();
 800a302:	4b05      	ldr	r3, [pc, #20]	; (800a318 <RFP_Handle+0x30>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	461a      	mov	r2, r3
 800a30a:	4b04      	ldr	r3, [pc, #16]	; (800a31c <RFP_Handle+0x34>)
 800a30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a310:	4798      	blx	r3
   }
}
 800a312:	bf00      	nop
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20003f00 	.word	0x20003f00
 800a31c:	20000078 	.word	0x20000078

0800a320 <RFP_Init>:
void RFP_Init(RFP_TypeDef *RadioProtocol, RFPDeviceID_TypeDef Device)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	460b      	mov	r3, r1
 800a32a:	70fb      	strb	r3, [r7, #3]
   Rfp             = RadioProtocol;
 800a32c:	4a17      	ldr	r2, [pc, #92]	; (800a38c <RFP_Init+0x6c>)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6013      	str	r3, [r2, #0]
   Rfp->Initialize = RFP_INITIALIZE;
 800a332:	4b16      	ldr	r3, [pc, #88]	; (800a38c <RFP_Init+0x6c>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2201      	movs	r2, #1
 800a338:	70da      	strb	r2, [r3, #3]
   Rfp->DeviceType = Device;
 800a33a:	4b14      	ldr	r3, [pc, #80]	; (800a38c <RFP_Init+0x6c>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	78fa      	ldrb	r2, [r7, #3]
 800a340:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 800a342:	2300      	movs	r3, #0
 800a344:	60fb      	str	r3, [r7, #12]
 800a346:	e007      	b.n	800a358 <RFP_Init+0x38>
   {
      RfpCommandFunction[i].RfpCommandFunction = NULL;
 800a348:	4a11      	ldr	r2, [pc, #68]	; (800a390 <RFP_Init+0x70>)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2100      	movs	r1, #0
 800a34e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	3301      	adds	r3, #1
 800a356:	60fb      	str	r3, [r7, #12]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2b05      	cmp	r3, #5
 800a35c:	ddf4      	ble.n	800a348 <RFP_Init+0x28>
   }
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 800a35e:	2300      	movs	r3, #0
 800a360:	60bb      	str	r3, [r7, #8]
 800a362:	e007      	b.n	800a374 <RFP_Init+0x54>
   {
      RfpMessageFunction[i].RfpMessageFunction = NULL;
 800a364:	4a0b      	ldr	r2, [pc, #44]	; (800a394 <RFP_Init+0x74>)
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2100      	movs	r1, #0
 800a36a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	3301      	adds	r3, #1
 800a372:	60bb      	str	r3, [r7, #8]
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	2b04      	cmp	r3, #4
 800a378:	ddf4      	ble.n	800a364 <RFP_Init+0x44>
   }
   RfpDataFunctions.RfpDataFunction = NULL;
 800a37a:	4b07      	ldr	r3, [pc, #28]	; (800a398 <RFP_Init+0x78>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	601a      	str	r2, [r3, #0]
}
 800a380:	bf00      	nop
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr
 800a38c:	20003f00 	.word	0x20003f00
 800a390:	20003f04 	.word	0x20003f04
 800a394:	20003f20 	.word	0x20003f20
 800a398:	20003f1c 	.word	0x20003f1c

0800a39c <RFP_ChangeState>:
static void RFP_ChangeState(void)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	607b      	str	r3, [r7, #4]
 800a3a6:	e02b      	b.n	800a400 <RFP_ChangeState+0x64>
   {
      if(Rfp->State == RfpTransitionTable[i].Source && Rfp->NewEvent == RfpTransitionTable[i].Event)
 800a3a8:	4b1b      	ldr	r3, [pc, #108]	; (800a418 <RFP_ChangeState+0x7c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	7819      	ldrb	r1, [r3, #0]
 800a3ae:	481b      	ldr	r0, [pc, #108]	; (800a41c <RFP_ChangeState+0x80>)
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	005b      	lsls	r3, r3, #1
 800a3b6:	4413      	add	r3, r2
 800a3b8:	4403      	add	r3, r0
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	4299      	cmp	r1, r3
 800a3be:	d11c      	bne.n	800a3fa <RFP_ChangeState+0x5e>
 800a3c0:	4b15      	ldr	r3, [pc, #84]	; (800a418 <RFP_ChangeState+0x7c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	7859      	ldrb	r1, [r3, #1]
 800a3c6:	4815      	ldr	r0, [pc, #84]	; (800a41c <RFP_ChangeState+0x80>)
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	005b      	lsls	r3, r3, #1
 800a3ce:	4413      	add	r3, r2
 800a3d0:	4403      	add	r3, r0
 800a3d2:	3302      	adds	r3, #2
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	4299      	cmp	r1, r3
 800a3d8:	d10f      	bne.n	800a3fa <RFP_ChangeState+0x5e>
      {
         Rfp->State    = RfpTransitionTable[i].Destination;
 800a3da:	4b0f      	ldr	r3, [pc, #60]	; (800a418 <RFP_ChangeState+0x7c>)
 800a3dc:	6819      	ldr	r1, [r3, #0]
 800a3de:	480f      	ldr	r0, [pc, #60]	; (800a41c <RFP_ChangeState+0x80>)
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	4413      	add	r3, r2
 800a3e8:	4403      	add	r3, r0
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	700b      	strb	r3, [r1, #0]
         Rfp->NewEvent = RFP_EVENT_NOTHING;
 800a3f0:	4b09      	ldr	r3, [pc, #36]	; (800a418 <RFP_ChangeState+0x7c>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	705a      	strb	r2, [r3, #1]
         return;
 800a3f8:	e009      	b.n	800a40e <RFP_ChangeState+0x72>
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	607b      	str	r3, [r7, #4]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b0b      	cmp	r3, #11
 800a404:	d9d0      	bls.n	800a3a8 <RFP_ChangeState+0xc>
      }
   }
   Rfp->NewEvent = RFP_EVENT_NOTHING;
 800a406:	4b04      	ldr	r3, [pc, #16]	; (800a418 <RFP_ChangeState+0x7c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2200      	movs	r2, #0
 800a40c:	705a      	strb	r2, [r3, #1]
}
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	20003f00 	.word	0x20003f00
 800a41c:	20000054 	.word	0x20000054

0800a420 <RFP_RegisterDataFunction>:
void RFP_RegisterCommandFunction(RFPCommands_TypeDef Command, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpCommandFunction[Command - 1].RfpCommandFunction = Callback;
}
void RFP_RegisterDataFunction(void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
   RfpDataFunctions.RfpDataFunction = Callback;
 800a428:	4a04      	ldr	r2, [pc, #16]	; (800a43c <RFP_RegisterDataFunction+0x1c>)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6013      	str	r3, [r2, #0]
}
 800a42e:	bf00      	nop
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	20003f1c 	.word	0x20003f1c

0800a440 <RFP_InterruptTask>:
void RFP_RegisterMessageFunction(RFPMessage_TypeDef Message, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpMessageFunction[Message - 1].RfpMessageFunction = Callback;
}
void RFP_InterruptTask(void)
{
 800a440:	b480      	push	{r7}
 800a442:	af00      	add	r7, sp, #0
   Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_SET;
 800a444:	4b04      	ldr	r3, [pc, #16]	; (800a458 <RFP_InterruptTask+0x18>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2201      	movs	r2, #1
 800a44a:	711a      	strb	r2, [r3, #4]
}
 800a44c:	bf00      	nop
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr
 800a456:	bf00      	nop
 800a458:	20003f00 	.word	0x20003f00

0800a45c <RFP_SendData>:
void RFP_SendData(RFPDeviceID_TypeDef Destination, RFPMessageType_TypeDef Type, uint8_t *Data, uint32_t Length)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60ba      	str	r2, [r7, #8]
 800a464:	607b      	str	r3, [r7, #4]
 800a466:	4603      	mov	r3, r0
 800a468:	73fb      	strb	r3, [r7, #15]
 800a46a:	460b      	mov	r3, r1
 800a46c:	73bb      	strb	r3, [r7, #14]
   RfpDataTransmit[0] = Destination;
 800a46e:	4a27      	ldr	r2, [pc, #156]	; (800a50c <RFP_SendData+0xb0>)
 800a470:	7bfb      	ldrb	r3, [r7, #15]
 800a472:	7013      	strb	r3, [r2, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 800a474:	4b26      	ldr	r3, [pc, #152]	; (800a510 <RFP_SendData+0xb4>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	795a      	ldrb	r2, [r3, #5]
 800a47a:	4b24      	ldr	r3, [pc, #144]	; (800a50c <RFP_SendData+0xb0>)
 800a47c:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = Type;
 800a47e:	4a23      	ldr	r2, [pc, #140]	; (800a50c <RFP_SendData+0xb0>)
 800a480:	7bbb      	ldrb	r3, [r7, #14]
 800a482:	7093      	strb	r3, [r2, #2]
   for(int i = 0; i < Length; i++)
 800a484:	2300      	movs	r3, #0
 800a486:	617b      	str	r3, [r7, #20]
 800a488:	e00a      	b.n	800a4a0 <RFP_SendData+0x44>
   {
      RfpDataTransmit[i + 3] = Data[i];
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	441a      	add	r2, r3
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	3303      	adds	r3, #3
 800a494:	7811      	ldrb	r1, [r2, #0]
 800a496:	4a1d      	ldr	r2, [pc, #116]	; (800a50c <RFP_SendData+0xb0>)
 800a498:	54d1      	strb	r1, [r2, r3]
   for(int i = 0; i < Length; i++)
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	3301      	adds	r3, #1
 800a49e:	617b      	str	r3, [r7, #20]
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d8f0      	bhi.n	800a48a <RFP_SendData+0x2e>
   }
   uint32_t crc                    = Crc(CRC_INITIAL_VALUE, 3 + Length, RfpDataTransmit);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	3303      	adds	r3, #3
 800a4ac:	4a17      	ldr	r2, [pc, #92]	; (800a50c <RFP_SendData+0xb0>)
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b4:	f7f9 faa0 	bl	80039f8 <Crc>
 800a4b8:	6138      	str	r0, [r7, #16]
   RfpDataTransmit[3 + Length]     = ((crc >> 24) & 0xff);
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	0e1a      	lsrs	r2, r3, #24
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	3303      	adds	r3, #3
 800a4c2:	b2d1      	uxtb	r1, r2
 800a4c4:	4a11      	ldr	r2, [pc, #68]	; (800a50c <RFP_SendData+0xb0>)
 800a4c6:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 1] = ((crc >> 16) & 0xff);
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	0c1a      	lsrs	r2, r3, #16
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	b2d1      	uxtb	r1, r2
 800a4d2:	4a0e      	ldr	r2, [pc, #56]	; (800a50c <RFP_SendData+0xb0>)
 800a4d4:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 2] = ((crc >> 8) & 0xff);
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	0a1a      	lsrs	r2, r3, #8
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3305      	adds	r3, #5
 800a4de:	b2d1      	uxtb	r1, r2
 800a4e0:	4a0a      	ldr	r2, [pc, #40]	; (800a50c <RFP_SendData+0xb0>)
 800a4e2:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 3] = (crc & 0xff);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	3306      	adds	r3, #6
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	b2d1      	uxtb	r1, r2
 800a4ec:	4a07      	ldr	r2, [pc, #28]	; (800a50c <RFP_SendData+0xb0>)
 800a4ee:	54d1      	strb	r1, [r2, r3]
   Rfp->SendFlag                   = RFP_SEND_FLAG_SET;
 800a4f0:	4b07      	ldr	r3, [pc, #28]	; (800a510 <RFP_SendData+0xb4>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	745a      	strb	r2, [r3, #17]
   Rfp->DataSizeTransmit           = 3 + Length + 4;
 800a4f8:	4b05      	ldr	r3, [pc, #20]	; (800a510 <RFP_SendData+0xb4>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	3207      	adds	r2, #7
 800a500:	60da      	str	r2, [r3, #12]
}
 800a502:	bf00      	nop
 800a504:	3718      	adds	r7, #24
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	20003e9c 	.word	0x20003e9c
 800a510:	20003f00 	.word	0x20003f00

0800a514 <RFP_SendResponseFunction>:
static void RFP_SendResponseFunction(RFPMessageType_TypeDef Response)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	4603      	mov	r3, r0
 800a51c:	71fb      	strb	r3, [r7, #7]
   osDelay(200);
 800a51e:	20c8      	movs	r0, #200	; 0xc8
 800a520:	f008 f8bc 	bl	801269c <osDelay>
   RfpDataTransmit[0] = Rfp->SourceMessage;
 800a524:	4b18      	ldr	r3, [pc, #96]	; (800a588 <RFP_SendResponseFunction+0x74>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	7c1a      	ldrb	r2, [r3, #16]
 800a52a:	4b18      	ldr	r3, [pc, #96]	; (800a58c <RFP_SendResponseFunction+0x78>)
 800a52c:	701a      	strb	r2, [r3, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 800a52e:	4b16      	ldr	r3, [pc, #88]	; (800a588 <RFP_SendResponseFunction+0x74>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	795a      	ldrb	r2, [r3, #5]
 800a534:	4b15      	ldr	r3, [pc, #84]	; (800a58c <RFP_SendResponseFunction+0x78>)
 800a536:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = RFP_MESSAGE;
 800a538:	4b14      	ldr	r3, [pc, #80]	; (800a58c <RFP_SendResponseFunction+0x78>)
 800a53a:	2203      	movs	r2, #3
 800a53c:	709a      	strb	r2, [r3, #2]
   RfpDataTransmit[3] = Response;
 800a53e:	4a13      	ldr	r2, [pc, #76]	; (800a58c <RFP_SendResponseFunction+0x78>)
 800a540:	79fb      	ldrb	r3, [r7, #7]
 800a542:	70d3      	strb	r3, [r2, #3]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, RfpDataTransmit);
 800a544:	4a11      	ldr	r2, [pc, #68]	; (800a58c <RFP_SendResponseFunction+0x78>)
 800a546:	2104      	movs	r1, #4
 800a548:	f04f 30ff 	mov.w	r0, #4294967295
 800a54c:	f7f9 fa54 	bl	80039f8 <Crc>
 800a550:	60f8      	str	r0, [r7, #12]
   RfpDataTransmit[4] = ((crc >> 24) & 0xff);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	0e1b      	lsrs	r3, r3, #24
 800a556:	b2da      	uxtb	r2, r3
 800a558:	4b0c      	ldr	r3, [pc, #48]	; (800a58c <RFP_SendResponseFunction+0x78>)
 800a55a:	711a      	strb	r2, [r3, #4]
   RfpDataTransmit[5] = ((crc >> 16) & 0xff);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	0c1b      	lsrs	r3, r3, #16
 800a560:	b2da      	uxtb	r2, r3
 800a562:	4b0a      	ldr	r3, [pc, #40]	; (800a58c <RFP_SendResponseFunction+0x78>)
 800a564:	715a      	strb	r2, [r3, #5]
   RfpDataTransmit[6] = ((crc >> 8) & 0xff);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	0a1b      	lsrs	r3, r3, #8
 800a56a:	b2da      	uxtb	r2, r3
 800a56c:	4b07      	ldr	r3, [pc, #28]	; (800a58c <RFP_SendResponseFunction+0x78>)
 800a56e:	719a      	strb	r2, [r3, #6]
   RfpDataTransmit[7] = (crc & 0xff);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	b2da      	uxtb	r2, r3
 800a574:	4b05      	ldr	r3, [pc, #20]	; (800a58c <RFP_SendResponseFunction+0x78>)
 800a576:	71da      	strb	r2, [r3, #7]
   HC12_TransmitData(RfpDataTransmit, 8);
 800a578:	2108      	movs	r1, #8
 800a57a:	4804      	ldr	r0, [pc, #16]	; (800a58c <RFP_SendResponseFunction+0x78>)
 800a57c:	f7f7 f83e 	bl	80015fc <HC12_TransmitData>
}
 800a580:	bf00      	nop
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	20003f00 	.word	0x20003f00
 800a58c:	20003e9c 	.word	0x20003e9c

0800a590 <RFP_InitializeFunction>:
static void RFP_InitializeFunction(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
   Rfp->NewEvent = RFP_EVENT_END_INITIALIZE;
 800a594:	4b08      	ldr	r3, [pc, #32]	; (800a5b8 <RFP_InitializeFunction+0x28>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2202      	movs	r2, #2
 800a59a:	705a      	strb	r2, [r3, #1]
   HC12_ExitCommandMode();
 800a59c:	f7f7 f822 	bl	80015e4 <HC12_ExitCommandMode>
   HC12_Init(Rfp, RfpDataRecive);
 800a5a0:	4b05      	ldr	r3, [pc, #20]	; (800a5b8 <RFP_InitializeFunction+0x28>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4905      	ldr	r1, [pc, #20]	; (800a5bc <RFP_InitializeFunction+0x2c>)
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7f7 f852 	bl	8001650 <HC12_Init>
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800a5ac:	2164      	movs	r1, #100	; 0x64
 800a5ae:	4803      	ldr	r0, [pc, #12]	; (800a5bc <RFP_InitializeFunction+0x2c>)
 800a5b0:	f7f7 f83c 	bl	800162c <HC12_ReciveToIdleDMA>
}
 800a5b4:	bf00      	nop
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	20003f00 	.word	0x20003f00
 800a5bc:	20003e38 	.word	0x20003e38

0800a5c0 <RFP_IdleFunction>:
static void RFP_IdleFunction(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
   if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 800a5c4:	4b10      	ldr	r3, [pc, #64]	; (800a608 <RFP_IdleFunction+0x48>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	791b      	ldrb	r3, [r3, #4]
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d108      	bne.n	800a5e2 <RFP_IdleFunction+0x22>
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 800a5d0:	4b0d      	ldr	r3, [pc, #52]	; (800a608 <RFP_IdleFunction+0x48>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 800a5d8:	4b0b      	ldr	r3, [pc, #44]	; (800a608 <RFP_IdleFunction+0x48>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	705a      	strb	r2, [r3, #1]
   {
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
      Rfp->NewEvent = RFP_EVENT_SEND;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 800a5e0:	e010      	b.n	800a604 <RFP_IdleFunction+0x44>
   else if(Rfp->SendFlag == RFP_SEND_FLAG_SET)
 800a5e2:	4b09      	ldr	r3, [pc, #36]	; (800a608 <RFP_IdleFunction+0x48>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	7c5b      	ldrb	r3, [r3, #17]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d10b      	bne.n	800a604 <RFP_IdleFunction+0x44>
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
 800a5ec:	4b06      	ldr	r3, [pc, #24]	; (800a608 <RFP_IdleFunction+0x48>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	745a      	strb	r2, [r3, #17]
      Rfp->NewEvent = RFP_EVENT_SEND;
 800a5f4:	4b04      	ldr	r3, [pc, #16]	; (800a608 <RFP_IdleFunction+0x48>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2206      	movs	r2, #6
 800a5fa:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800a5fc:	2164      	movs	r1, #100	; 0x64
 800a5fe:	4803      	ldr	r0, [pc, #12]	; (800a60c <RFP_IdleFunction+0x4c>)
 800a600:	f7f7 f814 	bl	800162c <HC12_ReciveToIdleDMA>
}
 800a604:	bf00      	nop
 800a606:	bd80      	pop	{r7, pc}
 800a608:	20003f00 	.word	0x20003f00
 800a60c:	20003e38 	.word	0x20003e38

0800a610 <RFP_ParseFunction>:
static void RFP_ParseFunction(void)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	607b      	str	r3, [r7, #4]
   Rfp->SourceMessage  = RfpDataRecive[1];
 800a61a:	4b3a      	ldr	r3, [pc, #232]	; (800a704 <RFP_ParseFunction+0xf4>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a3a      	ldr	r2, [pc, #232]	; (800a708 <RFP_ParseFunction+0xf8>)
 800a620:	7852      	ldrb	r2, [r2, #1]
 800a622:	741a      	strb	r2, [r3, #16]
   if(RfpDataRecive[0] != Rfp->DeviceType)
 800a624:	4b38      	ldr	r3, [pc, #224]	; (800a708 <RFP_ParseFunction+0xf8>)
 800a626:	781a      	ldrb	r2, [r3, #0]
 800a628:	4b36      	ldr	r3, [pc, #216]	; (800a704 <RFP_ParseFunction+0xf4>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	795b      	ldrb	r3, [r3, #5]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d00b      	beq.n	800a64a <RFP_ParseFunction+0x3a>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800a632:	4b34      	ldr	r3, [pc, #208]	; (800a704 <RFP_ParseFunction+0xf4>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2203      	movs	r2, #3
 800a638:	705a      	strb	r2, [r3, #1]
      RFP_SendResponseFunction(RFP_ERROR);
 800a63a:	2001      	movs	r0, #1
 800a63c:	f7ff ff6a 	bl	800a514 <RFP_SendResponseFunction>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800a640:	2164      	movs	r1, #100	; 0x64
 800a642:	4831      	ldr	r0, [pc, #196]	; (800a708 <RFP_ParseFunction+0xf8>)
 800a644:	f7f6 fff2 	bl	800162c <HC12_ReciveToIdleDMA>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
            }
         }
      }
   }
}
 800a648:	e057      	b.n	800a6fa <RFP_ParseFunction+0xea>
      if(Rfp->DataSize != 0)
 800a64a:	4b2e      	ldr	r3, [pc, #184]	; (800a704 <RFP_ParseFunction+0xf4>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d052      	beq.n	800a6fa <RFP_ParseFunction+0xea>
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800a654:	4b2b      	ldr	r3, [pc, #172]	; (800a704 <RFP_ParseFunction+0xf4>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	3b04      	subs	r3, #4
 800a65c:	4a2a      	ldr	r2, [pc, #168]	; (800a708 <RFP_ParseFunction+0xf8>)
 800a65e:	5cd3      	ldrb	r3, [r2, r3]
 800a660:	061a      	lsls	r2, r3, #24
 800a662:	4b28      	ldr	r3, [pc, #160]	; (800a704 <RFP_ParseFunction+0xf4>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	3b03      	subs	r3, #3
 800a66a:	4927      	ldr	r1, [pc, #156]	; (800a708 <RFP_ParseFunction+0xf8>)
 800a66c:	5ccb      	ldrb	r3, [r1, r3]
 800a66e:	041b      	lsls	r3, r3, #16
 800a670:	431a      	orrs	r2, r3
                       | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 800a672:	4b24      	ldr	r3, [pc, #144]	; (800a704 <RFP_ParseFunction+0xf4>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	3b02      	subs	r3, #2
 800a67a:	4923      	ldr	r1, [pc, #140]	; (800a708 <RFP_ParseFunction+0xf8>)
 800a67c:	5ccb      	ldrb	r3, [r1, r3]
 800a67e:	021b      	lsls	r3, r3, #8
 800a680:	4313      	orrs	r3, r2
 800a682:	4a20      	ldr	r2, [pc, #128]	; (800a704 <RFP_ParseFunction+0xf4>)
 800a684:	6812      	ldr	r2, [r2, #0]
 800a686:	6892      	ldr	r2, [r2, #8]
 800a688:	3a01      	subs	r2, #1
 800a68a:	491f      	ldr	r1, [pc, #124]	; (800a708 <RFP_ParseFunction+0xf8>)
 800a68c:	5c8a      	ldrb	r2, [r1, r2]
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800a68e:	4313      	orrs	r3, r2
 800a690:	607b      	str	r3, [r7, #4]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 800a692:	4b1c      	ldr	r3, [pc, #112]	; (800a704 <RFP_ParseFunction+0xf4>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	3b04      	subs	r3, #4
 800a69a:	4a1b      	ldr	r2, [pc, #108]	; (800a708 <RFP_ParseFunction+0xf8>)
 800a69c:	4619      	mov	r1, r3
 800a69e:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a2:	f7f9 f9a9 	bl	80039f8 <Crc>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d107      	bne.n	800a6be <RFP_ParseFunction+0xae>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800a6ae:	4b15      	ldr	r3, [pc, #84]	; (800a704 <RFP_ParseFunction+0xf4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2204      	movs	r2, #4
 800a6b4:	705a      	strb	r2, [r3, #1]
            RFP_SendResponseFunction(RFP_OK);
 800a6b6:	2004      	movs	r0, #4
 800a6b8:	f7ff ff2c 	bl	800a514 <RFP_SendResponseFunction>
}
 800a6bc:	e01d      	b.n	800a6fa <RFP_ParseFunction+0xea>
            if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 800a6be:	4b11      	ldr	r3, [pc, #68]	; (800a704 <RFP_ParseFunction+0xf4>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	4910      	ldr	r1, [pc, #64]	; (800a708 <RFP_ParseFunction+0xf8>)
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f7f9 f9ef 	bl	8003aac <RepareMessage>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d107      	bne.n	800a6e4 <RFP_ParseFunction+0xd4>
               Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800a6d4:	4b0b      	ldr	r3, [pc, #44]	; (800a704 <RFP_ParseFunction+0xf4>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2204      	movs	r2, #4
 800a6da:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_OK);
 800a6dc:	2004      	movs	r0, #4
 800a6de:	f7ff ff19 	bl	800a514 <RFP_SendResponseFunction>
}
 800a6e2:	e00a      	b.n	800a6fa <RFP_ParseFunction+0xea>
               Rfp->NewEvent = RFP_EVENT_ERROR;
 800a6e4:	4b07      	ldr	r3, [pc, #28]	; (800a704 <RFP_ParseFunction+0xf4>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2203      	movs	r2, #3
 800a6ea:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_CRC_ERROR);
 800a6ec:	2002      	movs	r0, #2
 800a6ee:	f7ff ff11 	bl	800a514 <RFP_SendResponseFunction>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800a6f2:	2164      	movs	r1, #100	; 0x64
 800a6f4:	4804      	ldr	r0, [pc, #16]	; (800a708 <RFP_ParseFunction+0xf8>)
 800a6f6:	f7f6 ff99 	bl	800162c <HC12_ReciveToIdleDMA>
}
 800a6fa:	bf00      	nop
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	20003f00 	.word	0x20003f00
 800a708:	20003e38 	.word	0x20003e38

0800a70c <RFP_RunningFunction>:
static void RFP_RunningFunction(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	af00      	add	r7, sp, #0
   switch(RfpDataRecive[2])
 800a710:	4b27      	ldr	r3, [pc, #156]	; (800a7b0 <RFP_RunningFunction+0xa4>)
 800a712:	789b      	ldrb	r3, [r3, #2]
 800a714:	2b03      	cmp	r3, #3
 800a716:	d028      	beq.n	800a76a <RFP_RunningFunction+0x5e>
 800a718:	2b03      	cmp	r3, #3
 800a71a:	dc3b      	bgt.n	800a794 <RFP_RunningFunction+0x88>
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d002      	beq.n	800a726 <RFP_RunningFunction+0x1a>
 800a720:	2b02      	cmp	r3, #2
 800a722:	d015      	beq.n	800a750 <RFP_RunningFunction+0x44>
         }
         break;
      }
      default:
      {
         break;
 800a724:	e036      	b.n	800a794 <RFP_RunningFunction+0x88>
         if(RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction != NULL)
 800a726:	4b22      	ldr	r3, [pc, #136]	; (800a7b0 <RFP_RunningFunction+0xa4>)
 800a728:	78db      	ldrb	r3, [r3, #3]
 800a72a:	3b01      	subs	r3, #1
 800a72c:	4a21      	ldr	r2, [pc, #132]	; (800a7b4 <RFP_RunningFunction+0xa8>)
 800a72e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d030      	beq.n	800a798 <RFP_RunningFunction+0x8c>
            RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction(RfpDataRecive, Rfp->DataSize, 4);
 800a736:	4b1e      	ldr	r3, [pc, #120]	; (800a7b0 <RFP_RunningFunction+0xa4>)
 800a738:	78db      	ldrb	r3, [r3, #3]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	4a1d      	ldr	r2, [pc, #116]	; (800a7b4 <RFP_RunningFunction+0xa8>)
 800a73e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a742:	4a1d      	ldr	r2, [pc, #116]	; (800a7b8 <RFP_RunningFunction+0xac>)
 800a744:	6812      	ldr	r2, [r2, #0]
 800a746:	6891      	ldr	r1, [r2, #8]
 800a748:	2204      	movs	r2, #4
 800a74a:	4819      	ldr	r0, [pc, #100]	; (800a7b0 <RFP_RunningFunction+0xa4>)
 800a74c:	4798      	blx	r3
         break;
 800a74e:	e023      	b.n	800a798 <RFP_RunningFunction+0x8c>
         if(RfpDataFunctions.RfpDataFunction != NULL)
 800a750:	4b1a      	ldr	r3, [pc, #104]	; (800a7bc <RFP_RunningFunction+0xb0>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d021      	beq.n	800a79c <RFP_RunningFunction+0x90>
            RfpDataFunctions.RfpDataFunction(RfpDataRecive, Rfp->DataSize, 4);
 800a758:	4b18      	ldr	r3, [pc, #96]	; (800a7bc <RFP_RunningFunction+0xb0>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a16      	ldr	r2, [pc, #88]	; (800a7b8 <RFP_RunningFunction+0xac>)
 800a75e:	6812      	ldr	r2, [r2, #0]
 800a760:	6891      	ldr	r1, [r2, #8]
 800a762:	2204      	movs	r2, #4
 800a764:	4812      	ldr	r0, [pc, #72]	; (800a7b0 <RFP_RunningFunction+0xa4>)
 800a766:	4798      	blx	r3
         break;
 800a768:	e018      	b.n	800a79c <RFP_RunningFunction+0x90>
         if(RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction != NULL)
 800a76a:	4b11      	ldr	r3, [pc, #68]	; (800a7b0 <RFP_RunningFunction+0xa4>)
 800a76c:	78db      	ldrb	r3, [r3, #3]
 800a76e:	3b01      	subs	r3, #1
 800a770:	4a13      	ldr	r2, [pc, #76]	; (800a7c0 <RFP_RunningFunction+0xb4>)
 800a772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d012      	beq.n	800a7a0 <RFP_RunningFunction+0x94>
            RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction(RfpDataRecive, Rfp->DataSize, 4);
 800a77a:	4b0d      	ldr	r3, [pc, #52]	; (800a7b0 <RFP_RunningFunction+0xa4>)
 800a77c:	78db      	ldrb	r3, [r3, #3]
 800a77e:	3b01      	subs	r3, #1
 800a780:	4a0f      	ldr	r2, [pc, #60]	; (800a7c0 <RFP_RunningFunction+0xb4>)
 800a782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a786:	4a0c      	ldr	r2, [pc, #48]	; (800a7b8 <RFP_RunningFunction+0xac>)
 800a788:	6812      	ldr	r2, [r2, #0]
 800a78a:	6891      	ldr	r1, [r2, #8]
 800a78c:	2204      	movs	r2, #4
 800a78e:	4808      	ldr	r0, [pc, #32]	; (800a7b0 <RFP_RunningFunction+0xa4>)
 800a790:	4798      	blx	r3
         break;
 800a792:	e005      	b.n	800a7a0 <RFP_RunningFunction+0x94>
         break;
 800a794:	bf00      	nop
 800a796:	e004      	b.n	800a7a2 <RFP_RunningFunction+0x96>
         break;
 800a798:	bf00      	nop
 800a79a:	e002      	b.n	800a7a2 <RFP_RunningFunction+0x96>
         break;
 800a79c:	bf00      	nop
 800a79e:	e000      	b.n	800a7a2 <RFP_RunningFunction+0x96>
         break;
 800a7a0:	bf00      	nop
      }
   }
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800a7a2:	2164      	movs	r1, #100	; 0x64
 800a7a4:	4802      	ldr	r0, [pc, #8]	; (800a7b0 <RFP_RunningFunction+0xa4>)
 800a7a6:	f7f6 ff41 	bl	800162c <HC12_ReciveToIdleDMA>
}
 800a7aa:	bf00      	nop
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20003e38 	.word	0x20003e38
 800a7b4:	20003f04 	.word	0x20003f04
 800a7b8:	20003f00 	.word	0x20003f00
 800a7bc:	20003f1c 	.word	0x20003f1c
 800a7c0:	20003f20 	.word	0x20003f20

0800a7c4 <RFP_SendFunction>:
static void RFP_SendFunction(void)
{
 800a7c4:	b598      	push	{r3, r4, r7, lr}
 800a7c6:	af00      	add	r7, sp, #0
   if(Rfp->Cnt < 5)
 800a7c8:	4b16      	ldr	r3, [pc, #88]	; (800a824 <RFP_SendFunction+0x60>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	695b      	ldr	r3, [r3, #20]
 800a7ce:	2b04      	cmp	r3, #4
 800a7d0:	d819      	bhi.n	800a806 <RFP_SendFunction+0x42>
   {
      osDelay(200);
 800a7d2:	20c8      	movs	r0, #200	; 0xc8
 800a7d4:	f007 ff62 	bl	801269c <osDelay>
      HC12_TransmitData(RfpDataTransmit, Rfp->DataSizeTransmit);
 800a7d8:	4b12      	ldr	r3, [pc, #72]	; (800a824 <RFP_SendFunction+0x60>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	4619      	mov	r1, r3
 800a7e0:	4811      	ldr	r0, [pc, #68]	; (800a828 <RFP_SendFunction+0x64>)
 800a7e2:	f7f6 ff0b 	bl	80015fc <HC12_TransmitData>
      Rfp->Cnt++;
 800a7e6:	4b0f      	ldr	r3, [pc, #60]	; (800a824 <RFP_SendFunction+0x60>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	695a      	ldr	r2, [r3, #20]
 800a7ec:	3201      	adds	r2, #1
 800a7ee:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_WAIT_FOR_RESPONSE;
 800a7f0:	4b0c      	ldr	r3, [pc, #48]	; (800a824 <RFP_SendFunction+0x60>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2205      	movs	r2, #5
 800a7f6:	705a      	strb	r2, [r3, #1]
      Rfp->LastTick = HAL_GetTick();
 800a7f8:	4b0a      	ldr	r3, [pc, #40]	; (800a824 <RFP_SendFunction+0x60>)
 800a7fa:	681c      	ldr	r4, [r3, #0]
 800a7fc:	f000 ff90 	bl	800b720 <HAL_GetTick>
 800a800:	4603      	mov	r3, r0
 800a802:	61a3      	str	r3, [r4, #24]
   {
      Rfp->Cnt      = 0;
      Rfp->NewEvent = RFP_EVENT_ERROR;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 800a804:	e00b      	b.n	800a81e <RFP_SendFunction+0x5a>
      Rfp->Cnt      = 0;
 800a806:	4b07      	ldr	r3, [pc, #28]	; (800a824 <RFP_SendFunction+0x60>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2200      	movs	r2, #0
 800a80c:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800a80e:	4b05      	ldr	r3, [pc, #20]	; (800a824 <RFP_SendFunction+0x60>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2203      	movs	r2, #3
 800a814:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800a816:	2164      	movs	r1, #100	; 0x64
 800a818:	4804      	ldr	r0, [pc, #16]	; (800a82c <RFP_SendFunction+0x68>)
 800a81a:	f7f6 ff07 	bl	800162c <HC12_ReciveToIdleDMA>
}
 800a81e:	bf00      	nop
 800a820:	bd98      	pop	{r3, r4, r7, pc}
 800a822:	bf00      	nop
 800a824:	20003f00 	.word	0x20003f00
 800a828:	20003e9c 	.word	0x20003e9c
 800a82c:	20003e38 	.word	0x20003e38

0800a830 <RFP_WaitForResponseFunction>:
static void RFP_WaitForResponseFunction(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - Rfp->LastTick > 2000)
 800a834:	f000 ff74 	bl	800b720 <HAL_GetTick>
 800a838:	4602      	mov	r2, r0
 800a83a:	4b0e      	ldr	r3, [pc, #56]	; (800a874 <RFP_WaitForResponseFunction+0x44>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	699b      	ldr	r3, [r3, #24]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a846:	d904      	bls.n	800a852 <RFP_WaitForResponseFunction+0x22>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800a848:	4b0a      	ldr	r3, [pc, #40]	; (800a874 <RFP_WaitForResponseFunction+0x44>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2203      	movs	r2, #3
 800a84e:	705a      	strb	r2, [r3, #1]
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
   }
}
 800a850:	e00d      	b.n	800a86e <RFP_WaitForResponseFunction+0x3e>
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 800a852:	4b08      	ldr	r3, [pc, #32]	; (800a874 <RFP_WaitForResponseFunction+0x44>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	791b      	ldrb	r3, [r3, #4]
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d107      	bne.n	800a86e <RFP_WaitForResponseFunction+0x3e>
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 800a85e:	4b05      	ldr	r3, [pc, #20]	; (800a874 <RFP_WaitForResponseFunction+0x44>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2200      	movs	r2, #0
 800a864:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 800a866:	4b03      	ldr	r3, [pc, #12]	; (800a874 <RFP_WaitForResponseFunction+0x44>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2201      	movs	r2, #1
 800a86c:	705a      	strb	r2, [r3, #1]
}
 800a86e:	bf00      	nop
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	20003f00 	.word	0x20003f00

0800a878 <RFP_ParseResponseFunction>:
static void RFP_ParseResponseFunction(void)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800a87e:	4b50      	ldr	r3, [pc, #320]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	3b04      	subs	r3, #4
 800a886:	4a4f      	ldr	r2, [pc, #316]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a888:	5cd3      	ldrb	r3, [r2, r3]
 800a88a:	061a      	lsls	r2, r3, #24
 800a88c:	4b4c      	ldr	r3, [pc, #304]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	3b03      	subs	r3, #3
 800a894:	494b      	ldr	r1, [pc, #300]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a896:	5ccb      	ldrb	r3, [r1, r3]
 800a898:	041b      	lsls	r3, r3, #16
 800a89a:	431a      	orrs	r2, r3
                          | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 800a89c:	4b48      	ldr	r3, [pc, #288]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	3b02      	subs	r3, #2
 800a8a4:	4947      	ldr	r1, [pc, #284]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a8a6:	5ccb      	ldrb	r3, [r1, r3]
 800a8a8:	021b      	lsls	r3, r3, #8
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	4a44      	ldr	r2, [pc, #272]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a8ae:	6812      	ldr	r2, [r2, #0]
 800a8b0:	6892      	ldr	r2, [r2, #8]
 800a8b2:	3a01      	subs	r2, #1
 800a8b4:	4943      	ldr	r1, [pc, #268]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a8b6:	5c8a      	ldrb	r2, [r1, r2]
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	607b      	str	r3, [r7, #4]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 800a8bc:	4b40      	ldr	r3, [pc, #256]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	3b04      	subs	r3, #4
 800a8c4:	4a3f      	ldr	r2, [pc, #252]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8cc:	f7f9 f894 	bl	80039f8 <Crc>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d12d      	bne.n	800a934 <RFP_ParseResponseFunction+0xbc>
   {
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 800a8d8:	4b3a      	ldr	r3, [pc, #232]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a8da:	781a      	ldrb	r2, [r3, #0]
 800a8dc:	4b38      	ldr	r3, [pc, #224]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	795b      	ldrb	r3, [r3, #5]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d11d      	bne.n	800a922 <RFP_ParseResponseFunction+0xaa>
 800a8e6:	4b37      	ldr	r3, [pc, #220]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a8e8:	789b      	ldrb	r3, [r3, #2]
 800a8ea:	2b03      	cmp	r3, #3
 800a8ec:	d119      	bne.n	800a922 <RFP_ParseResponseFunction+0xaa>
      {
         if(RfpDataRecive[3] == RFP_OK)
 800a8ee:	4b35      	ldr	r3, [pc, #212]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a8f0:	78db      	ldrb	r3, [r3, #3]
 800a8f2:	2b04      	cmp	r3, #4
 800a8f4:	d10c      	bne.n	800a910 <RFP_ParseResponseFunction+0x98>
         {
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800a8f6:	4b32      	ldr	r3, [pc, #200]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2204      	movs	r2, #4
 800a8fc:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 800a8fe:	4b30      	ldr	r3, [pc, #192]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2200      	movs	r2, #0
 800a904:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800a906:	2164      	movs	r1, #100	; 0x64
 800a908:	482e      	ldr	r0, [pc, #184]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a90a:	f7f6 fe8f 	bl	800162c <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800a90e:	e053      	b.n	800a9b8 <RFP_ParseResponseFunction+0x140>
         }
         else
         {
            Rfp->NewEvent = RFP_EVENT_ERROR;
 800a910:	4b2b      	ldr	r3, [pc, #172]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2203      	movs	r2, #3
 800a916:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800a918:	2164      	movs	r1, #100	; 0x64
 800a91a:	482a      	ldr	r0, [pc, #168]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a91c:	f7f6 fe86 	bl	800162c <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800a920:	e04a      	b.n	800a9b8 <RFP_ParseResponseFunction+0x140>
         }
      }
      else
      {
         Rfp->NewEvent = RFP_EVENT_ERROR;
 800a922:	4b27      	ldr	r3, [pc, #156]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2203      	movs	r2, #3
 800a928:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800a92a:	2164      	movs	r1, #100	; 0x64
 800a92c:	4825      	ldr	r0, [pc, #148]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a92e:	f7f6 fe7d 	bl	800162c <HC12_ReciveToIdleDMA>
   else
   {
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
      Rfp->NewEvent = RFP_EVENT_ERROR;
   }
}
 800a932:	e041      	b.n	800a9b8 <RFP_ParseResponseFunction+0x140>
   else if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 800a934:	4b22      	ldr	r3, [pc, #136]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	461a      	mov	r2, r3
 800a93c:	4921      	ldr	r1, [pc, #132]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7f9 f8b4 	bl	8003aac <RepareMessage>
 800a944:	4603      	mov	r3, r0
 800a946:	2b01      	cmp	r3, #1
 800a948:	d12d      	bne.n	800a9a6 <RFP_ParseResponseFunction+0x12e>
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 800a94a:	4b1e      	ldr	r3, [pc, #120]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a94c:	781a      	ldrb	r2, [r3, #0]
 800a94e:	4b1c      	ldr	r3, [pc, #112]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	795b      	ldrb	r3, [r3, #5]
 800a954:	429a      	cmp	r2, r3
 800a956:	d11d      	bne.n	800a994 <RFP_ParseResponseFunction+0x11c>
 800a958:	4b1a      	ldr	r3, [pc, #104]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a95a:	789b      	ldrb	r3, [r3, #2]
 800a95c:	2b03      	cmp	r3, #3
 800a95e:	d119      	bne.n	800a994 <RFP_ParseResponseFunction+0x11c>
         if(RfpDataRecive[3] == RFP_OK)
 800a960:	4b18      	ldr	r3, [pc, #96]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a962:	78db      	ldrb	r3, [r3, #3]
 800a964:	2b04      	cmp	r3, #4
 800a966:	d10c      	bne.n	800a982 <RFP_ParseResponseFunction+0x10a>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800a968:	4b15      	ldr	r3, [pc, #84]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2204      	movs	r2, #4
 800a96e:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 800a970:	4b13      	ldr	r3, [pc, #76]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2200      	movs	r2, #0
 800a976:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800a978:	2164      	movs	r1, #100	; 0x64
 800a97a:	4812      	ldr	r0, [pc, #72]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a97c:	f7f6 fe56 	bl	800162c <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800a980:	e01a      	b.n	800a9b8 <RFP_ParseResponseFunction+0x140>
            Rfp->NewEvent = RFP_EVENT_ERROR;
 800a982:	4b0f      	ldr	r3, [pc, #60]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2203      	movs	r2, #3
 800a988:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800a98a:	2164      	movs	r1, #100	; 0x64
 800a98c:	480d      	ldr	r0, [pc, #52]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a98e:	f7f6 fe4d 	bl	800162c <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800a992:	e011      	b.n	800a9b8 <RFP_ParseResponseFunction+0x140>
         Rfp->NewEvent = RFP_EVENT_ERROR;
 800a994:	4b0a      	ldr	r3, [pc, #40]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2203      	movs	r2, #3
 800a99a:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800a99c:	2164      	movs	r1, #100	; 0x64
 800a99e:	4809      	ldr	r0, [pc, #36]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a9a0:	f7f6 fe44 	bl	800162c <HC12_ReciveToIdleDMA>
}
 800a9a4:	e008      	b.n	800a9b8 <RFP_ParseResponseFunction+0x140>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800a9a6:	2164      	movs	r1, #100	; 0x64
 800a9a8:	4806      	ldr	r0, [pc, #24]	; (800a9c4 <RFP_ParseResponseFunction+0x14c>)
 800a9aa:	f7f6 fe3f 	bl	800162c <HC12_ReciveToIdleDMA>
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800a9ae:	4b04      	ldr	r3, [pc, #16]	; (800a9c0 <RFP_ParseResponseFunction+0x148>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2203      	movs	r2, #3
 800a9b4:	705a      	strb	r2, [r3, #1]
}
 800a9b6:	e7ff      	b.n	800a9b8 <RFP_ParseResponseFunction+0x140>
 800a9b8:	bf00      	nop
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	20003f00 	.word	0x20003f00
 800a9c4:	20003e38 	.word	0x20003e38

0800a9c8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800a9cc:	4b07      	ldr	r3, [pc, #28]	; (800a9ec <MX_RNG_Init+0x24>)
 800a9ce:	4a08      	ldr	r2, [pc, #32]	; (800a9f0 <MX_RNG_Init+0x28>)
 800a9d0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800a9d2:	4b06      	ldr	r3, [pc, #24]	; (800a9ec <MX_RNG_Init+0x24>)
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800a9d8:	4804      	ldr	r0, [pc, #16]	; (800a9ec <MX_RNG_Init+0x24>)
 800a9da:	f003 facd 	bl	800df78 <HAL_RNG_Init>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800a9e4:	f7fe f81e 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800a9e8:	bf00      	nop
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	20003f34 	.word	0x20003f34
 800a9f0:	50060800 	.word	0x50060800

0800a9f4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b0aa      	sub	sp, #168	; 0xa8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a9fc:	f107 0310 	add.w	r3, r7, #16
 800aa00:	2298      	movs	r2, #152	; 0x98
 800aa02:	2100      	movs	r1, #0
 800aa04:	4618      	mov	r0, r3
 800aa06:	f00b fdd3 	bl	80165b0 <memset>
  if(rngHandle->Instance==RNG)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a11      	ldr	r2, [pc, #68]	; (800aa54 <HAL_RNG_MspInit+0x60>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d11b      	bne.n	800aa4c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800aa14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aa18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800aa20:	f107 0310 	add.w	r3, r7, #16
 800aa24:	4618      	mov	r0, r3
 800aa26:	f002 fd53 	bl	800d4d0 <HAL_RCCEx_PeriphCLKConfig>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d001      	beq.n	800aa34 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800aa30:	f7fd fff8 	bl	8008a24 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800aa34:	4b08      	ldr	r3, [pc, #32]	; (800aa58 <HAL_RNG_MspInit+0x64>)
 800aa36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa38:	4a07      	ldr	r2, [pc, #28]	; (800aa58 <HAL_RNG_MspInit+0x64>)
 800aa3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa40:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <HAL_RNG_MspInit+0x64>)
 800aa42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa48:	60fb      	str	r3, [r7, #12]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800aa4c:	bf00      	nop
 800aa4e:	37a8      	adds	r7, #168	; 0xa8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	50060800 	.word	0x50060800
 800aa58:	40021000 	.word	0x40021000

0800aa5c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800aa62:	1d3b      	adds	r3, r7, #4
 800aa64:	2200      	movs	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]
 800aa68:	605a      	str	r2, [r3, #4]
 800aa6a:	609a      	str	r2, [r3, #8]
 800aa6c:	60da      	str	r2, [r3, #12]
 800aa6e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800aa70:	2300      	movs	r3, #0
 800aa72:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800aa74:	4b13      	ldr	r3, [pc, #76]	; (800aac4 <MX_RTC_Init+0x68>)
 800aa76:	4a14      	ldr	r2, [pc, #80]	; (800aac8 <MX_RTC_Init+0x6c>)
 800aa78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800aa7a:	4b12      	ldr	r3, [pc, #72]	; (800aac4 <MX_RTC_Init+0x68>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800aa80:	4b10      	ldr	r3, [pc, #64]	; (800aac4 <MX_RTC_Init+0x68>)
 800aa82:	227f      	movs	r2, #127	; 0x7f
 800aa84:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800aa86:	4b0f      	ldr	r3, [pc, #60]	; (800aac4 <MX_RTC_Init+0x68>)
 800aa88:	22ff      	movs	r2, #255	; 0xff
 800aa8a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800aa8c:	4b0d      	ldr	r3, [pc, #52]	; (800aac4 <MX_RTC_Init+0x68>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800aa92:	4b0c      	ldr	r3, [pc, #48]	; (800aac4 <MX_RTC_Init+0x68>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800aa98:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <MX_RTC_Init+0x68>)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800aa9e:	4b09      	ldr	r3, [pc, #36]	; (800aac4 <MX_RTC_Init+0x68>)
 800aaa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aaa4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800aaa6:	4b07      	ldr	r3, [pc, #28]	; (800aac4 <MX_RTC_Init+0x68>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800aaac:	4805      	ldr	r0, [pc, #20]	; (800aac4 <MX_RTC_Init+0x68>)
 800aaae:	f003 fb5d 	bl	800e16c <HAL_RTC_Init>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d001      	beq.n	800aabc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800aab8:	f7fd ffb4 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800aabc:	3718      	adds	r7, #24
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	20003f48 	.word	0x20003f48
 800aac8:	40002800 	.word	0x40002800

0800aacc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b0aa      	sub	sp, #168	; 0xa8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800aad4:	f107 0310 	add.w	r3, r7, #16
 800aad8:	2298      	movs	r2, #152	; 0x98
 800aada:	2100      	movs	r1, #0
 800aadc:	4618      	mov	r0, r3
 800aade:	f00b fd67 	bl	80165b0 <memset>
  if(rtcHandle->Instance==RTC)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a16      	ldr	r2, [pc, #88]	; (800ab40 <HAL_RTC_MspInit+0x74>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d124      	bne.n	800ab36 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800aaec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aaf0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800aaf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800aafa:	f107 0310 	add.w	r3, r7, #16
 800aafe:	4618      	mov	r0, r3
 800ab00:	f002 fce6 	bl	800d4d0 <HAL_RCCEx_PeriphCLKConfig>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d001      	beq.n	800ab0e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800ab0a:	f7fd ff8b 	bl	8008a24 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ab0e:	4b0d      	ldr	r3, [pc, #52]	; (800ab44 <HAL_RTC_MspInit+0x78>)
 800ab10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab14:	4a0b      	ldr	r2, [pc, #44]	; (800ab44 <HAL_RTC_MspInit+0x78>)
 800ab16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800ab1e:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <HAL_RTC_MspInit+0x78>)
 800ab20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab22:	4a08      	ldr	r2, [pc, #32]	; (800ab44 <HAL_RTC_MspInit+0x78>)
 800ab24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ab28:	6593      	str	r3, [r2, #88]	; 0x58
 800ab2a:	4b06      	ldr	r3, [pc, #24]	; (800ab44 <HAL_RTC_MspInit+0x78>)
 800ab2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab32:	60fb      	str	r3, [r7, #12]
 800ab34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800ab36:	bf00      	nop
 800ab38:	37a8      	adds	r7, #168	; 0xa8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	40002800 	.word	0x40002800
 800ab44:	40021000 	.word	0x40021000

0800ab48 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800ab4c:	4b1b      	ldr	r3, [pc, #108]	; (800abbc <MX_SPI1_Init+0x74>)
 800ab4e:	4a1c      	ldr	r2, [pc, #112]	; (800abc0 <MX_SPI1_Init+0x78>)
 800ab50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ab52:	4b1a      	ldr	r3, [pc, #104]	; (800abbc <MX_SPI1_Init+0x74>)
 800ab54:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ab58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ab5a:	4b18      	ldr	r3, [pc, #96]	; (800abbc <MX_SPI1_Init+0x74>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ab60:	4b16      	ldr	r3, [pc, #88]	; (800abbc <MX_SPI1_Init+0x74>)
 800ab62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800ab66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ab68:	4b14      	ldr	r3, [pc, #80]	; (800abbc <MX_SPI1_Init+0x74>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ab6e:	4b13      	ldr	r3, [pc, #76]	; (800abbc <MX_SPI1_Init+0x74>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ab74:	4b11      	ldr	r3, [pc, #68]	; (800abbc <MX_SPI1_Init+0x74>)
 800ab76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800ab7c:	4b0f      	ldr	r3, [pc, #60]	; (800abbc <MX_SPI1_Init+0x74>)
 800ab7e:	2238      	movs	r2, #56	; 0x38
 800ab80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ab82:	4b0e      	ldr	r3, [pc, #56]	; (800abbc <MX_SPI1_Init+0x74>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ab88:	4b0c      	ldr	r3, [pc, #48]	; (800abbc <MX_SPI1_Init+0x74>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab8e:	4b0b      	ldr	r3, [pc, #44]	; (800abbc <MX_SPI1_Init+0x74>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800ab94:	4b09      	ldr	r3, [pc, #36]	; (800abbc <MX_SPI1_Init+0x74>)
 800ab96:	2207      	movs	r2, #7
 800ab98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800ab9a:	4b08      	ldr	r3, [pc, #32]	; (800abbc <MX_SPI1_Init+0x74>)
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800aba0:	4b06      	ldr	r3, [pc, #24]	; (800abbc <MX_SPI1_Init+0x74>)
 800aba2:	2208      	movs	r2, #8
 800aba4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800aba6:	4805      	ldr	r0, [pc, #20]	; (800abbc <MX_SPI1_Init+0x74>)
 800aba8:	f003 fe1c 	bl	800e7e4 <HAL_SPI_Init>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d001      	beq.n	800abb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800abb2:	f7fd ff37 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800abb6:	bf00      	nop
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	20003f7c 	.word	0x20003f7c
 800abc0:	40013000 	.word	0x40013000

0800abc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08a      	sub	sp, #40	; 0x28
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abcc:	f107 0314 	add.w	r3, r7, #20
 800abd0:	2200      	movs	r2, #0
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	605a      	str	r2, [r3, #4]
 800abd6:	609a      	str	r2, [r3, #8]
 800abd8:	60da      	str	r2, [r3, #12]
 800abda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a17      	ldr	r2, [pc, #92]	; (800ac40 <HAL_SPI_MspInit+0x7c>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d128      	bne.n	800ac38 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800abe6:	4b17      	ldr	r3, [pc, #92]	; (800ac44 <HAL_SPI_MspInit+0x80>)
 800abe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abea:	4a16      	ldr	r2, [pc, #88]	; (800ac44 <HAL_SPI_MspInit+0x80>)
 800abec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800abf0:	6613      	str	r3, [r2, #96]	; 0x60
 800abf2:	4b14      	ldr	r3, [pc, #80]	; (800ac44 <HAL_SPI_MspInit+0x80>)
 800abf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800abfa:	613b      	str	r3, [r7, #16]
 800abfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abfe:	4b11      	ldr	r3, [pc, #68]	; (800ac44 <HAL_SPI_MspInit+0x80>)
 800ac00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac02:	4a10      	ldr	r2, [pc, #64]	; (800ac44 <HAL_SPI_MspInit+0x80>)
 800ac04:	f043 0301 	orr.w	r3, r3, #1
 800ac08:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac0a:	4b0e      	ldr	r3, [pc, #56]	; (800ac44 <HAL_SPI_MspInit+0x80>)
 800ac0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac0e:	f003 0301 	and.w	r3, r3, #1
 800ac12:	60fb      	str	r3, [r7, #12]
 800ac14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800ac16:	23e0      	movs	r3, #224	; 0xe0
 800ac18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac22:	2303      	movs	r3, #3
 800ac24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ac26:	2305      	movs	r3, #5
 800ac28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac2a:	f107 0314 	add.w	r3, r7, #20
 800ac2e:	4619      	mov	r1, r3
 800ac30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac34:	f001 f9d0 	bl	800bfd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800ac38:	bf00      	nop
 800ac3a:	3728      	adds	r7, #40	; 0x28
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	40013000 	.word	0x40013000
 800ac44:	40021000 	.word	0x40021000

0800ac48 <ssd1306_command>:
#include "main.h"
#include "string.h"
SPI_HandleTypeDef *ssd1306_spi;
static uint8_t buffer[(SSD1306_LCDWIDTH * SSD1306_LCDHEIGHT) / 8];
static void ssd1306_command(uint8_t command)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	4603      	mov	r3, r0
 800ac50:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_RESET);
 800ac52:	2200      	movs	r2, #0
 800ac54:	2101      	movs	r1, #1
 800ac56:	480d      	ldr	r0, [pc, #52]	; (800ac8c <ssd1306_command+0x44>)
 800ac58:	f001 fb68 	bl	800c32c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	2110      	movs	r1, #16
 800ac60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac64:	f001 fb62 	bl	800c32c <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, &command, 1, 10);
 800ac68:	4b09      	ldr	r3, [pc, #36]	; (800ac90 <ssd1306_command+0x48>)
 800ac6a:	6818      	ldr	r0, [r3, #0]
 800ac6c:	1df9      	adds	r1, r7, #7
 800ac6e:	230a      	movs	r3, #10
 800ac70:	2201      	movs	r2, #1
 800ac72:	f003 fe5a 	bl	800e92a <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 800ac76:	2201      	movs	r2, #1
 800ac78:	2110      	movs	r1, #16
 800ac7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac7e:	f001 fb55 	bl	800c32c <HAL_GPIO_WritePin>
}
 800ac82:	bf00      	nop
 800ac84:	3708      	adds	r7, #8
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	48000400 	.word	0x48000400
 800ac90:	20003fe0 	.word	0x20003fe0

0800ac94 <ssd1306_set_pixel>:
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(ssd1306_spi, &data, 1, 10);
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
// }
void ssd1306_set_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	71fb      	strb	r3, [r7, #7]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	71bb      	strb	r3, [r7, #6]
 800aca2:	4613      	mov	r3, r2
 800aca4:	717b      	strb	r3, [r7, #5]
   if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 800aca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	db43      	blt.n	800ad36 <ssd1306_set_pixel+0xa2>
 800acae:	79bb      	ldrb	r3, [r7, #6]
 800acb0:	2b3f      	cmp	r3, #63	; 0x3f
 800acb2:	d840      	bhi.n	800ad36 <ssd1306_set_pixel+0xa2>
   {
      return;
   }
   if(color != 0 && color != 1)
 800acb4:	797b      	ldrb	r3, [r7, #5]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d002      	beq.n	800acc0 <ssd1306_set_pixel+0x2c>
 800acba:	797b      	ldrb	r3, [r7, #5]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d13c      	bne.n	800ad3a <ssd1306_set_pixel+0xa6>
   {
      return;
   }
   if(color == 0)
 800acc0:	797b      	ldrb	r3, [r7, #5]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d11c      	bne.n	800ad00 <ssd1306_set_pixel+0x6c>
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 800acc6:	79fa      	ldrb	r2, [r7, #7]
 800acc8:	79bb      	ldrb	r3, [r7, #6]
 800acca:	08db      	lsrs	r3, r3, #3
 800accc:	b2d8      	uxtb	r0, r3
 800acce:	4603      	mov	r3, r0
 800acd0:	01db      	lsls	r3, r3, #7
 800acd2:	4413      	add	r3, r2
 800acd4:	4a1c      	ldr	r2, [pc, #112]	; (800ad48 <ssd1306_set_pixel+0xb4>)
 800acd6:	5cd3      	ldrb	r3, [r2, r3]
 800acd8:	b25a      	sxtb	r2, r3
 800acda:	79bb      	ldrb	r3, [r7, #6]
 800acdc:	f003 0307 	and.w	r3, r3, #7
 800ace0:	2101      	movs	r1, #1
 800ace2:	fa01 f303 	lsl.w	r3, r1, r3
 800ace6:	b25b      	sxtb	r3, r3
 800ace8:	43db      	mvns	r3, r3
 800acea:	b25b      	sxtb	r3, r3
 800acec:	4013      	ands	r3, r2
 800acee:	b259      	sxtb	r1, r3
 800acf0:	79fa      	ldrb	r2, [r7, #7]
 800acf2:	4603      	mov	r3, r0
 800acf4:	01db      	lsls	r3, r3, #7
 800acf6:	4413      	add	r3, r2
 800acf8:	b2c9      	uxtb	r1, r1
 800acfa:	4a13      	ldr	r2, [pc, #76]	; (800ad48 <ssd1306_set_pixel+0xb4>)
 800acfc:	54d1      	strb	r1, [r2, r3]
 800acfe:	e01d      	b.n	800ad3c <ssd1306_set_pixel+0xa8>
   }
   else
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 800ad00:	79fa      	ldrb	r2, [r7, #7]
 800ad02:	79bb      	ldrb	r3, [r7, #6]
 800ad04:	08db      	lsrs	r3, r3, #3
 800ad06:	b2d8      	uxtb	r0, r3
 800ad08:	4603      	mov	r3, r0
 800ad0a:	01db      	lsls	r3, r3, #7
 800ad0c:	4413      	add	r3, r2
 800ad0e:	4a0e      	ldr	r2, [pc, #56]	; (800ad48 <ssd1306_set_pixel+0xb4>)
 800ad10:	5cd3      	ldrb	r3, [r2, r3]
 800ad12:	b25a      	sxtb	r2, r3
 800ad14:	79bb      	ldrb	r3, [r7, #6]
 800ad16:	f003 0307 	and.w	r3, r3, #7
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad20:	b25b      	sxtb	r3, r3
 800ad22:	4313      	orrs	r3, r2
 800ad24:	b259      	sxtb	r1, r3
 800ad26:	79fa      	ldrb	r2, [r7, #7]
 800ad28:	4603      	mov	r3, r0
 800ad2a:	01db      	lsls	r3, r3, #7
 800ad2c:	4413      	add	r3, r2
 800ad2e:	b2c9      	uxtb	r1, r1
 800ad30:	4a05      	ldr	r2, [pc, #20]	; (800ad48 <ssd1306_set_pixel+0xb4>)
 800ad32:	54d1      	strb	r1, [r2, r3]
 800ad34:	e002      	b.n	800ad3c <ssd1306_set_pixel+0xa8>
      return;
 800ad36:	bf00      	nop
 800ad38:	e000      	b.n	800ad3c <ssd1306_set_pixel+0xa8>
      return;
 800ad3a:	bf00      	nop
   }
}
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20003fe4 	.word	0x20003fe4

0800ad4c <ssd1306_display>:
void ssd1306_display()
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
   ssd1306_command(0x22);
 800ad50:	2022      	movs	r0, #34	; 0x22
 800ad52:	f7ff ff79 	bl	800ac48 <ssd1306_command>
   ssd1306_command(0x00);
 800ad56:	2000      	movs	r0, #0
 800ad58:	f7ff ff76 	bl	800ac48 <ssd1306_command>
   ssd1306_command(0x07);
 800ad5c:	2007      	movs	r0, #7
 800ad5e:	f7ff ff73 	bl	800ac48 <ssd1306_command>
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_SET);
 800ad62:	2201      	movs	r2, #1
 800ad64:	2101      	movs	r1, #1
 800ad66:	480c      	ldr	r0, [pc, #48]	; (800ad98 <ssd1306_display+0x4c>)
 800ad68:	f001 fae0 	bl	800c32c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	2110      	movs	r1, #16
 800ad70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad74:	f001 fada 	bl	800c32c <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, (uint8_t *)&buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8), 100);
 800ad78:	4b08      	ldr	r3, [pc, #32]	; (800ad9c <ssd1306_display+0x50>)
 800ad7a:	6818      	ldr	r0, [r3, #0]
 800ad7c:	2364      	movs	r3, #100	; 0x64
 800ad7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad82:	4907      	ldr	r1, [pc, #28]	; (800ada0 <ssd1306_display+0x54>)
 800ad84:	f003 fdd1 	bl	800e92a <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 800ad88:	2201      	movs	r2, #1
 800ad8a:	2110      	movs	r1, #16
 800ad8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad90:	f001 facc 	bl	800c32c <HAL_GPIO_WritePin>
}
 800ad94:	bf00      	nop
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	48000400 	.word	0x48000400
 800ad9c:	20003fe0 	.word	0x20003fe0
 800ada0:	20003fe4 	.word	0x20003fe4

0800ada4 <ssd1306_clear>:
void ssd1306_clear()
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	af00      	add	r7, sp, #0
   memset(buffer, 0x00, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 800ada8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800adac:	2100      	movs	r1, #0
 800adae:	4802      	ldr	r0, [pc, #8]	; (800adb8 <ssd1306_clear+0x14>)
 800adb0:	f00b fbfe 	bl	80165b0 <memset>
}
 800adb4:	bf00      	nop
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	20003fe4 	.word	0x20003fe4

0800adbc <ssd1306_init>:
void ssd1306_init(SPI_HandleTypeDef *spi)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_RESET);
 800adc4:	2200      	movs	r2, #0
 800adc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800adca:	4833      	ldr	r0, [pc, #204]	; (800ae98 <ssd1306_init+0xdc>)
 800adcc:	f001 faae 	bl	800c32c <HAL_GPIO_WritePin>
   HAL_Delay(150);
 800add0:	2096      	movs	r0, #150	; 0x96
 800add2:	f000 fcb1 	bl	800b738 <HAL_Delay>
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_SET);
 800add6:	2201      	movs	r2, #1
 800add8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800addc:	482e      	ldr	r0, [pc, #184]	; (800ae98 <ssd1306_init+0xdc>)
 800adde:	f001 faa5 	bl	800c32c <HAL_GPIO_WritePin>
   HAL_Delay(100);
 800ade2:	2064      	movs	r0, #100	; 0x64
 800ade4:	f000 fca8 	bl	800b738 <HAL_Delay>
   ssd1306_spi = spi;
 800ade8:	4a2c      	ldr	r2, [pc, #176]	; (800ae9c <ssd1306_init+0xe0>)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6013      	str	r3, [r2, #0]
   ssd1306_command(0xAE); // Display Off
 800adee:	20ae      	movs	r0, #174	; 0xae
 800adf0:	f7ff ff2a 	bl	800ac48 <ssd1306_command>

   ssd1306_command(0x00);
 800adf4:	2000      	movs	r0, #0
 800adf6:	f7ff ff27 	bl	800ac48 <ssd1306_command>
   ssd1306_command(0x10);
 800adfa:	2010      	movs	r0, #16
 800adfc:	f7ff ff24 	bl	800ac48 <ssd1306_command>
   ssd1306_command(0x40);
 800ae00:	2040      	movs	r0, #64	; 0x40
 800ae02:	f7ff ff21 	bl	800ac48 <ssd1306_command>
   ssd1306_command(0x20); // Set addressing mode
 800ae06:	2020      	movs	r0, #32
 800ae08:	f7ff ff1e 	bl	800ac48 <ssd1306_command>
   ssd1306_command(0x00); // Horizontal Addressing Mode
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	f7ff ff1b 	bl	800ac48 <ssd1306_command>

   ssd1306_command(0x81); // Set Contrast Control
 800ae12:	2081      	movs	r0, #129	; 0x81
 800ae14:	f7ff ff18 	bl	800ac48 <ssd1306_command>
   ssd1306_command(0xff);
 800ae18:	20ff      	movs	r0, #255	; 0xff
 800ae1a:	f7ff ff15 	bl	800ac48 <ssd1306_command>
   ssd1306_command(0xA0 | (0x01 & 1));
 800ae1e:	20a1      	movs	r0, #161	; 0xa1
 800ae20:	f7ff ff12 	bl	800ac48 <ssd1306_command>
   ssd1306_command(0xC0 | (0x08 & (1 << 3)));
 800ae24:	20c8      	movs	r0, #200	; 0xc8
 800ae26:	f7ff ff0f 	bl	800ac48 <ssd1306_command>

   ssd1306_command(0xA6); // Set Normal Display
 800ae2a:	20a6      	movs	r0, #166	; 0xa6
 800ae2c:	f7ff ff0c 	bl	800ac48 <ssd1306_command>

   ssd1306_command(0xA8); // Select Multiplex Ratio
 800ae30:	20a8      	movs	r0, #168	; 0xa8
 800ae32:	f7ff ff09 	bl	800ac48 <ssd1306_command>
   ssd1306_command(0x3F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 800ae36:	203f      	movs	r0, #63	; 0x3f
 800ae38:	f7ff ff06 	bl	800ac48 <ssd1306_command>

   ssd1306_command(0xD3); // Setting Display Offset
 800ae3c:	20d3      	movs	r0, #211	; 0xd3
 800ae3e:	f7ff ff03 	bl	800ac48 <ssd1306_command>
   ssd1306_command(0x00); // 00H Reset
 800ae42:	2000      	movs	r0, #0
 800ae44:	f7ff ff00 	bl	800ac48 <ssd1306_command>

   ssd1306_command(0xD5); // SET DISPLAY CLOCK
 800ae48:	20d5      	movs	r0, #213	; 0xd5
 800ae4a:	f7ff fefd 	bl	800ac48 <ssd1306_command>
   ssd1306_command(0x80); // 105HZ
 800ae4e:	2080      	movs	r0, #128	; 0x80
 800ae50:	f7ff fefa 	bl	800ac48 <ssd1306_command>

   ssd1306_command(0xD9); // Set Pre-Charge period
 800ae54:	20d9      	movs	r0, #217	; 0xd9
 800ae56:	f7ff fef7 	bl	800ac48 <ssd1306_command>
   ssd1306_command(0x22);
 800ae5a:	2022      	movs	r0, #34	; 0x22
 800ae5c:	f7ff fef4 	bl	800ac48 <ssd1306_command>

   ssd1306_command(0xDA); // Set COM Hardware Configuration
 800ae60:	20da      	movs	r0, #218	; 0xda
 800ae62:	f7ff fef1 	bl	800ac48 <ssd1306_command>
   ssd1306_command(0x12); // Alternative COM Pin---See IC Spec page 34
 800ae66:	2012      	movs	r0, #18
 800ae68:	f7ff feee 	bl	800ac48 <ssd1306_command>
                          // (0x02)=> A4=0;Sequential COM pin configuration;A5=0;Disable COM Left/Right remap

   ssd1306_command(0xDB); // Set Deselect Vcomh level
 800ae6c:	20db      	movs	r0, #219	; 0xdb
 800ae6e:	f7ff feeb 	bl	800ac48 <ssd1306_command>
   ssd1306_command(0x40);
 800ae72:	2040      	movs	r0, #64	; 0x40
 800ae74:	f7ff fee8 	bl	800ac48 <ssd1306_command>

   ssd1306_command(0x8D); // Set Charge Pump
 800ae78:	208d      	movs	r0, #141	; 0x8d
 800ae7a:	f7ff fee5 	bl	800ac48 <ssd1306_command>
   // ssd1306_command(0x10);  // Disable Charge Pump
   ssd1306_command(0x14); // Endable Charge Pump
 800ae7e:	2014      	movs	r0, #20
 800ae80:	f7ff fee2 	bl	800ac48 <ssd1306_command>

   ssd1306_command(0xA4); // Entire Display ON
 800ae84:	20a4      	movs	r0, #164	; 0xa4
 800ae86:	f7ff fedf 	bl	800ac48 <ssd1306_command>
   ssd1306_command(SSD1306_DISPLAYON);
 800ae8a:	20af      	movs	r0, #175	; 0xaf
 800ae8c:	f7ff fedc 	bl	800ac48 <ssd1306_command>
}
 800ae90:	bf00      	nop
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	48000400 	.word	0x48000400
 800ae9c:	20003fe0 	.word	0x20003fe0

0800aea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aea6:	4b11      	ldr	r3, [pc, #68]	; (800aeec <HAL_MspInit+0x4c>)
 800aea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeaa:	4a10      	ldr	r2, [pc, #64]	; (800aeec <HAL_MspInit+0x4c>)
 800aeac:	f043 0301 	orr.w	r3, r3, #1
 800aeb0:	6613      	str	r3, [r2, #96]	; 0x60
 800aeb2:	4b0e      	ldr	r3, [pc, #56]	; (800aeec <HAL_MspInit+0x4c>)
 800aeb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeb6:	f003 0301 	and.w	r3, r3, #1
 800aeba:	607b      	str	r3, [r7, #4]
 800aebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800aebe:	4b0b      	ldr	r3, [pc, #44]	; (800aeec <HAL_MspInit+0x4c>)
 800aec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aec2:	4a0a      	ldr	r2, [pc, #40]	; (800aeec <HAL_MspInit+0x4c>)
 800aec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aec8:	6593      	str	r3, [r2, #88]	; 0x58
 800aeca:	4b08      	ldr	r3, [pc, #32]	; (800aeec <HAL_MspInit+0x4c>)
 800aecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aed2:	603b      	str	r3, [r7, #0]
 800aed4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800aed6:	2200      	movs	r2, #0
 800aed8:	210f      	movs	r1, #15
 800aeda:	f06f 0001 	mvn.w	r0, #1
 800aede:	f000 fd1e 	bl	800b91e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aee2:	bf00      	nop
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	40021000 	.word	0x40021000

0800aef0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b08c      	sub	sp, #48	; 0x30
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800aefe:	4b2e      	ldr	r3, [pc, #184]	; (800afb8 <HAL_InitTick+0xc8>)
 800af00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af02:	4a2d      	ldr	r2, [pc, #180]	; (800afb8 <HAL_InitTick+0xc8>)
 800af04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af08:	6613      	str	r3, [r2, #96]	; 0x60
 800af0a:	4b2b      	ldr	r3, [pc, #172]	; (800afb8 <HAL_InitTick+0xc8>)
 800af0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af12:	60bb      	str	r3, [r7, #8]
 800af14:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800af16:	f107 020c 	add.w	r2, r7, #12
 800af1a:	f107 0310 	add.w	r3, r7, #16
 800af1e:	4611      	mov	r1, r2
 800af20:	4618      	mov	r0, r3
 800af22:	f002 f9e3 	bl	800d2ec <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800af26:	f002 f9cb 	bl	800d2c0 <HAL_RCC_GetPCLK2Freq>
 800af2a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800af2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2e:	4a23      	ldr	r2, [pc, #140]	; (800afbc <HAL_InitTick+0xcc>)
 800af30:	fba2 2303 	umull	r2, r3, r2, r3
 800af34:	0c9b      	lsrs	r3, r3, #18
 800af36:	3b01      	subs	r3, #1
 800af38:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800af3a:	4b21      	ldr	r3, [pc, #132]	; (800afc0 <HAL_InitTick+0xd0>)
 800af3c:	4a21      	ldr	r2, [pc, #132]	; (800afc4 <HAL_InitTick+0xd4>)
 800af3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800af40:	4b1f      	ldr	r3, [pc, #124]	; (800afc0 <HAL_InitTick+0xd0>)
 800af42:	f240 32e7 	movw	r2, #999	; 0x3e7
 800af46:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800af48:	4a1d      	ldr	r2, [pc, #116]	; (800afc0 <HAL_InitTick+0xd0>)
 800af4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800af4e:	4b1c      	ldr	r3, [pc, #112]	; (800afc0 <HAL_InitTick+0xd0>)
 800af50:	2200      	movs	r2, #0
 800af52:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af54:	4b1a      	ldr	r3, [pc, #104]	; (800afc0 <HAL_InitTick+0xd0>)
 800af56:	2200      	movs	r2, #0
 800af58:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af5a:	4b19      	ldr	r3, [pc, #100]	; (800afc0 <HAL_InitTick+0xd0>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 800af60:	4817      	ldr	r0, [pc, #92]	; (800afc0 <HAL_InitTick+0xd0>)
 800af62:	f004 fb4f 	bl	800f604 <HAL_TIM_Base_Init>
 800af66:	4603      	mov	r3, r0
 800af68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800af6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af70:	2b00      	cmp	r3, #0
 800af72:	d11b      	bne.n	800afac <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800af74:	4812      	ldr	r0, [pc, #72]	; (800afc0 <HAL_InitTick+0xd0>)
 800af76:	f004 fb9d 	bl	800f6b4 <HAL_TIM_Base_Start_IT>
 800af7a:	4603      	mov	r3, r0
 800af7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800af80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af84:	2b00      	cmp	r3, #0
 800af86:	d111      	bne.n	800afac <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800af88:	201a      	movs	r0, #26
 800af8a:	f000 fce4 	bl	800b956 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2b0f      	cmp	r3, #15
 800af92:	d808      	bhi.n	800afa6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 800af94:	2200      	movs	r2, #0
 800af96:	6879      	ldr	r1, [r7, #4]
 800af98:	201a      	movs	r0, #26
 800af9a:	f000 fcc0 	bl	800b91e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800af9e:	4a0a      	ldr	r2, [pc, #40]	; (800afc8 <HAL_InitTick+0xd8>)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6013      	str	r3, [r2, #0]
 800afa4:	e002      	b.n	800afac <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800afac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3730      	adds	r7, #48	; 0x30
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	40021000 	.word	0x40021000
 800afbc:	431bde83 	.word	0x431bde83
 800afc0:	200043e4 	.word	0x200043e4
 800afc4:	40014800 	.word	0x40014800
 800afc8:	20000098 	.word	0x20000098

0800afcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
   HAL_NVIC_SystemReset();
 800afd0:	f000 fccf 	bl	800b972 <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while(1)
   {
      HAL_NVIC_SystemReset();
 800afd4:	f000 fccd 	bl	800b972 <HAL_NVIC_SystemReset>
 800afd8:	e7fc      	b.n	800afd4 <NMI_Handler+0x8>

0800afda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800afde:	f000 fcc8 	bl	800b972 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_NVIC_SystemReset();
 800afe2:	f000 fcc6 	bl	800b972 <HAL_NVIC_SystemReset>
 800afe6:	e7fc      	b.n	800afe2 <HardFault_Handler+0x8>

0800afe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800afe8:	b480      	push	{r7}
 800afea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800afec:	e7fe      	b.n	800afec <MemManage_Handler+0x4>

0800afee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800afee:	b480      	push	{r7}
 800aff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800aff2:	e7fe      	b.n	800aff2 <BusFault_Handler+0x4>

0800aff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800aff4:	b480      	push	{r7}
 800aff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800aff8:	e7fe      	b.n	800aff8 <UsageFault_Handler+0x4>

0800affa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800affa:	b480      	push	{r7}
 800affc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800affe:	bf00      	nop
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr

0800b008 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800b00c:	4802      	ldr	r0, [pc, #8]	; (800b018 <DMA1_Channel1_IRQHandler+0x10>)
 800b00e:	f000 fe93 	bl	800bd38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800b012:	bf00      	nop
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	2000455c 	.word	0x2000455c

0800b01c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800b020:	4802      	ldr	r0, [pc, #8]	; (800b02c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800b022:	f004 fd4c 	bl	800fabe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800b026:	bf00      	nop
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	200043e4 	.word	0x200043e4

0800b030 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b034:	4802      	ldr	r0, [pc, #8]	; (800b040 <USART1_IRQHandler+0x10>)
 800b036:	f005 fe23 	bl	8010c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b03a:	bf00      	nop
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	200044cc 	.word	0x200044cc

0800b044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b044:	b480      	push	{r7}
 800b046:	af00      	add	r7, sp, #0
  return 1;
 800b048:	2301      	movs	r3, #1
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <_kill>:

int _kill(int pid, int sig)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b05e:	f00b fa6f 	bl	8016540 <__errno>
 800b062:	4603      	mov	r3, r0
 800b064:	2216      	movs	r2, #22
 800b066:	601a      	str	r2, [r3, #0]
  return -1;
 800b068:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <_exit>:

void _exit (int status)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b07c:	f04f 31ff 	mov.w	r1, #4294967295
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f7ff ffe7 	bl	800b054 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b086:	e7fe      	b.n	800b086 <_exit+0x12>

0800b088 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b094:	2300      	movs	r3, #0
 800b096:	617b      	str	r3, [r7, #20]
 800b098:	e00a      	b.n	800b0b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b09a:	f3af 8000 	nop.w
 800b09e:	4601      	mov	r1, r0
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	1c5a      	adds	r2, r3, #1
 800b0a4:	60ba      	str	r2, [r7, #8]
 800b0a6:	b2ca      	uxtb	r2, r1
 800b0a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	617b      	str	r3, [r7, #20]
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	dbf0      	blt.n	800b09a <_read+0x12>
  }

  return len;
 800b0b8:	687b      	ldr	r3, [r7, #4]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3718      	adds	r7, #24
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b086      	sub	sp, #24
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	60f8      	str	r0, [r7, #12]
 800b0ca:	60b9      	str	r1, [r7, #8]
 800b0cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	617b      	str	r3, [r7, #20]
 800b0d2:	e009      	b.n	800b0e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	1c5a      	adds	r2, r3, #1
 800b0d8:	60ba      	str	r2, [r7, #8]
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	617b      	str	r3, [r7, #20]
 800b0e8:	697a      	ldr	r2, [r7, #20]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	dbf1      	blt.n	800b0d4 <_write+0x12>
  }
  return len;
 800b0f0:	687b      	ldr	r3, [r7, #4]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <_close>:

int _close(int file)
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b083      	sub	sp, #12
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b102:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b106:	4618      	mov	r0, r3
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b112:	b480      	push	{r7}
 800b114:	b083      	sub	sp, #12
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b122:	605a      	str	r2, [r3, #4]
  return 0;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	370c      	adds	r7, #12
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <_isatty>:

int _isatty(int file)
{
 800b132:	b480      	push	{r7}
 800b134:	b083      	sub	sp, #12
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b13a:	2301      	movs	r3, #1
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr
	...

0800b164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b16c:	4a14      	ldr	r2, [pc, #80]	; (800b1c0 <_sbrk+0x5c>)
 800b16e:	4b15      	ldr	r3, [pc, #84]	; (800b1c4 <_sbrk+0x60>)
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b178:	4b13      	ldr	r3, [pc, #76]	; (800b1c8 <_sbrk+0x64>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d102      	bne.n	800b186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b180:	4b11      	ldr	r3, [pc, #68]	; (800b1c8 <_sbrk+0x64>)
 800b182:	4a12      	ldr	r2, [pc, #72]	; (800b1cc <_sbrk+0x68>)
 800b184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b186:	4b10      	ldr	r3, [pc, #64]	; (800b1c8 <_sbrk+0x64>)
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4413      	add	r3, r2
 800b18e:	693a      	ldr	r2, [r7, #16]
 800b190:	429a      	cmp	r2, r3
 800b192:	d207      	bcs.n	800b1a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b194:	f00b f9d4 	bl	8016540 <__errno>
 800b198:	4603      	mov	r3, r0
 800b19a:	220c      	movs	r2, #12
 800b19c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b19e:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a2:	e009      	b.n	800b1b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b1a4:	4b08      	ldr	r3, [pc, #32]	; (800b1c8 <_sbrk+0x64>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b1aa:	4b07      	ldr	r3, [pc, #28]	; (800b1c8 <_sbrk+0x64>)
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	4a05      	ldr	r2, [pc, #20]	; (800b1c8 <_sbrk+0x64>)
 800b1b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3718      	adds	r7, #24
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}
 800b1c0:	20050000 	.word	0x20050000
 800b1c4:	00000c00 	.word	0x00000c00
 800b1c8:	20004430 	.word	0x20004430
 800b1cc:	2001e940 	.word	0x2001e940

0800b1d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 800b1d4:	4b08      	ldr	r3, [pc, #32]	; (800b1f8 <SystemInit+0x28>)
 800b1d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b1da:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b1dc:	4b06      	ldr	r3, [pc, #24]	; (800b1f8 <SystemInit+0x28>)
 800b1de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1e2:	4a05      	ldr	r2, [pc, #20]	; (800b1f8 <SystemInit+0x28>)
 800b1e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b1e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800b1ec:	bf00      	nop
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	e000ed00 	.word	0xe000ed00

0800b1fc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b08e      	sub	sp, #56	; 0x38
 800b200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b206:	2200      	movs	r2, #0
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	605a      	str	r2, [r3, #4]
 800b20c:	609a      	str	r2, [r3, #8]
 800b20e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b210:	f107 031c 	add.w	r3, r7, #28
 800b214:	2200      	movs	r2, #0
 800b216:	601a      	str	r2, [r3, #0]
 800b218:	605a      	str	r2, [r3, #4]
 800b21a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b21c:	463b      	mov	r3, r7
 800b21e:	2200      	movs	r2, #0
 800b220:	601a      	str	r2, [r3, #0]
 800b222:	605a      	str	r2, [r3, #4]
 800b224:	609a      	str	r2, [r3, #8]
 800b226:	60da      	str	r2, [r3, #12]
 800b228:	611a      	str	r2, [r3, #16]
 800b22a:	615a      	str	r2, [r3, #20]
 800b22c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b22e:	4b2d      	ldr	r3, [pc, #180]	; (800b2e4 <MX_TIM2_Init+0xe8>)
 800b230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b234:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b236:	4b2b      	ldr	r3, [pc, #172]	; (800b2e4 <MX_TIM2_Init+0xe8>)
 800b238:	2200      	movs	r2, #0
 800b23a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b23c:	4b29      	ldr	r3, [pc, #164]	; (800b2e4 <MX_TIM2_Init+0xe8>)
 800b23e:	2200      	movs	r2, #0
 800b240:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800b242:	4b28      	ldr	r3, [pc, #160]	; (800b2e4 <MX_TIM2_Init+0xe8>)
 800b244:	f04f 32ff 	mov.w	r2, #4294967295
 800b248:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b24a:	4b26      	ldr	r3, [pc, #152]	; (800b2e4 <MX_TIM2_Init+0xe8>)
 800b24c:	2200      	movs	r2, #0
 800b24e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b250:	4b24      	ldr	r3, [pc, #144]	; (800b2e4 <MX_TIM2_Init+0xe8>)
 800b252:	2200      	movs	r2, #0
 800b254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b256:	4823      	ldr	r0, [pc, #140]	; (800b2e4 <MX_TIM2_Init+0xe8>)
 800b258:	f004 f9d4 	bl	800f604 <HAL_TIM_Base_Init>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800b262:	f7fd fbdf 	bl	8008a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b26a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b26c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b270:	4619      	mov	r1, r3
 800b272:	481c      	ldr	r0, [pc, #112]	; (800b2e4 <MX_TIM2_Init+0xe8>)
 800b274:	f004 fe56 	bl	800ff24 <HAL_TIM_ConfigClockSource>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d001      	beq.n	800b282 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800b27e:	f7fd fbd1 	bl	8008a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b282:	4818      	ldr	r0, [pc, #96]	; (800b2e4 <MX_TIM2_Init+0xe8>)
 800b284:	f004 fa86 	bl	800f794 <HAL_TIM_PWM_Init>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800b28e:	f7fd fbc9 	bl	8008a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b292:	2300      	movs	r3, #0
 800b294:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b296:	2300      	movs	r3, #0
 800b298:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b29a:	f107 031c 	add.w	r3, r7, #28
 800b29e:	4619      	mov	r1, r3
 800b2a0:	4810      	ldr	r0, [pc, #64]	; (800b2e4 <MX_TIM2_Init+0xe8>)
 800b2a2:	f005 fb61 	bl	8010968 <HAL_TIMEx_MasterConfigSynchronization>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d001      	beq.n	800b2b0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800b2ac:	f7fd fbba 	bl	8008a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b2b0:	2360      	movs	r3, #96	; 0x60
 800b2b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b2c0:	463b      	mov	r3, r7
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	4807      	ldr	r0, [pc, #28]	; (800b2e4 <MX_TIM2_Init+0xe8>)
 800b2c8:	f004 fd18 	bl	800fcfc <HAL_TIM_PWM_ConfigChannel>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d001      	beq.n	800b2d6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800b2d2:	f7fd fba7 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800b2d6:	4803      	ldr	r0, [pc, #12]	; (800b2e4 <MX_TIM2_Init+0xe8>)
 800b2d8:	f000 f8bc 	bl	800b454 <HAL_TIM_MspPostInit>

}
 800b2dc:	bf00      	nop
 800b2de:	3738      	adds	r7, #56	; 0x38
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	20004434 	.word	0x20004434

0800b2e8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b08c      	sub	sp, #48	; 0x30
 800b2ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800b2ee:	f107 030c 	add.w	r3, r7, #12
 800b2f2:	2224      	movs	r2, #36	; 0x24
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f00b f95a 	bl	80165b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b2fc:	463b      	mov	r3, r7
 800b2fe:	2200      	movs	r2, #0
 800b300:	601a      	str	r2, [r3, #0]
 800b302:	605a      	str	r2, [r3, #4]
 800b304:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800b306:	4b21      	ldr	r3, [pc, #132]	; (800b38c <MX_TIM5_Init+0xa4>)
 800b308:	4a21      	ldr	r2, [pc, #132]	; (800b390 <MX_TIM5_Init+0xa8>)
 800b30a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800b30c:	4b1f      	ldr	r3, [pc, #124]	; (800b38c <MX_TIM5_Init+0xa4>)
 800b30e:	2200      	movs	r2, #0
 800b310:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b312:	4b1e      	ldr	r3, [pc, #120]	; (800b38c <MX_TIM5_Init+0xa4>)
 800b314:	2200      	movs	r2, #0
 800b316:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800b318:	4b1c      	ldr	r3, [pc, #112]	; (800b38c <MX_TIM5_Init+0xa4>)
 800b31a:	f04f 32ff 	mov.w	r2, #4294967295
 800b31e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b320:	4b1a      	ldr	r3, [pc, #104]	; (800b38c <MX_TIM5_Init+0xa4>)
 800b322:	2200      	movs	r2, #0
 800b324:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b326:	4b19      	ldr	r3, [pc, #100]	; (800b38c <MX_TIM5_Init+0xa4>)
 800b328:	2200      	movs	r2, #0
 800b32a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800b32c:	2303      	movs	r3, #3
 800b32e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800b330:	2300      	movs	r3, #0
 800b332:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800b334:	2301      	movs	r3, #1
 800b336:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800b338:	2300      	movs	r3, #0
 800b33a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800b33c:	230f      	movs	r3, #15
 800b33e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800b340:	2300      	movs	r3, #0
 800b342:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800b344:	2301      	movs	r3, #1
 800b346:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800b348:	2300      	movs	r3, #0
 800b34a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800b34c:	230f      	movs	r3, #15
 800b34e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800b350:	f107 030c 	add.w	r3, r7, #12
 800b354:	4619      	mov	r1, r3
 800b356:	480d      	ldr	r0, [pc, #52]	; (800b38c <MX_TIM5_Init+0xa4>)
 800b358:	f004 fa7d 	bl	800f856 <HAL_TIM_Encoder_Init>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d001      	beq.n	800b366 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800b362:	f7fd fb5f 	bl	8008a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b366:	2300      	movs	r3, #0
 800b368:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b36a:	2300      	movs	r3, #0
 800b36c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800b36e:	463b      	mov	r3, r7
 800b370:	4619      	mov	r1, r3
 800b372:	4806      	ldr	r0, [pc, #24]	; (800b38c <MX_TIM5_Init+0xa4>)
 800b374:	f005 faf8 	bl	8010968 <HAL_TIMEx_MasterConfigSynchronization>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800b37e:	f7fd fb51 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800b382:	bf00      	nop
 800b384:	3730      	adds	r7, #48	; 0x30
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20004480 	.word	0x20004480
 800b390:	40000c00 	.word	0x40000c00

0800b394 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3a4:	d10b      	bne.n	800b3be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b3a6:	4b09      	ldr	r3, [pc, #36]	; (800b3cc <HAL_TIM_Base_MspInit+0x38>)
 800b3a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3aa:	4a08      	ldr	r2, [pc, #32]	; (800b3cc <HAL_TIM_Base_MspInit+0x38>)
 800b3ac:	f043 0301 	orr.w	r3, r3, #1
 800b3b0:	6593      	str	r3, [r2, #88]	; 0x58
 800b3b2:	4b06      	ldr	r3, [pc, #24]	; (800b3cc <HAL_TIM_Base_MspInit+0x38>)
 800b3b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b6:	f003 0301 	and.w	r3, r3, #1
 800b3ba:	60fb      	str	r3, [r7, #12]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800b3be:	bf00      	nop
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	40021000 	.word	0x40021000

0800b3d0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b08a      	sub	sp, #40	; 0x28
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3d8:	f107 0314 	add.w	r3, r7, #20
 800b3dc:	2200      	movs	r2, #0
 800b3de:	601a      	str	r2, [r3, #0]
 800b3e0:	605a      	str	r2, [r3, #4]
 800b3e2:	609a      	str	r2, [r3, #8]
 800b3e4:	60da      	str	r2, [r3, #12]
 800b3e6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a17      	ldr	r2, [pc, #92]	; (800b44c <HAL_TIM_Encoder_MspInit+0x7c>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d128      	bne.n	800b444 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800b3f2:	4b17      	ldr	r3, [pc, #92]	; (800b450 <HAL_TIM_Encoder_MspInit+0x80>)
 800b3f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3f6:	4a16      	ldr	r2, [pc, #88]	; (800b450 <HAL_TIM_Encoder_MspInit+0x80>)
 800b3f8:	f043 0308 	orr.w	r3, r3, #8
 800b3fc:	6593      	str	r3, [r2, #88]	; 0x58
 800b3fe:	4b14      	ldr	r3, [pc, #80]	; (800b450 <HAL_TIM_Encoder_MspInit+0x80>)
 800b400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b402:	f003 0308 	and.w	r3, r3, #8
 800b406:	613b      	str	r3, [r7, #16]
 800b408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b40a:	4b11      	ldr	r3, [pc, #68]	; (800b450 <HAL_TIM_Encoder_MspInit+0x80>)
 800b40c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b40e:	4a10      	ldr	r2, [pc, #64]	; (800b450 <HAL_TIM_Encoder_MspInit+0x80>)
 800b410:	f043 0301 	orr.w	r3, r3, #1
 800b414:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b416:	4b0e      	ldr	r3, [pc, #56]	; (800b450 <HAL_TIM_Encoder_MspInit+0x80>)
 800b418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b41a:	f003 0301 	and.w	r3, r3, #1
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b422:	2303      	movs	r3, #3
 800b424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b426:	2302      	movs	r3, #2
 800b428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b42a:	2300      	movs	r3, #0
 800b42c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b42e:	2300      	movs	r3, #0
 800b430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800b432:	2302      	movs	r3, #2
 800b434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b436:	f107 0314 	add.w	r3, r7, #20
 800b43a:	4619      	mov	r1, r3
 800b43c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b440:	f000 fdca 	bl	800bfd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800b444:	bf00      	nop
 800b446:	3728      	adds	r7, #40	; 0x28
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	40000c00 	.word	0x40000c00
 800b450:	40021000 	.word	0x40021000

0800b454 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b088      	sub	sp, #32
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b45c:	f107 030c 	add.w	r3, r7, #12
 800b460:	2200      	movs	r2, #0
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	605a      	str	r2, [r3, #4]
 800b466:	609a      	str	r2, [r3, #8]
 800b468:	60da      	str	r2, [r3, #12]
 800b46a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b474:	d11d      	bne.n	800b4b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b476:	4b11      	ldr	r3, [pc, #68]	; (800b4bc <HAL_TIM_MspPostInit+0x68>)
 800b478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b47a:	4a10      	ldr	r2, [pc, #64]	; (800b4bc <HAL_TIM_MspPostInit+0x68>)
 800b47c:	f043 0301 	orr.w	r3, r3, #1
 800b480:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b482:	4b0e      	ldr	r3, [pc, #56]	; (800b4bc <HAL_TIM_MspPostInit+0x68>)
 800b484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b486:	f003 0301 	and.w	r3, r3, #1
 800b48a:	60bb      	str	r3, [r7, #8]
 800b48c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b48e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b492:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b494:	2302      	movs	r3, #2
 800b496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b498:	2300      	movs	r3, #0
 800b49a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b49c:	2300      	movs	r3, #0
 800b49e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4a4:	f107 030c 	add.w	r3, r7, #12
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b4ae:	f000 fd93 	bl	800bfd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800b4b2:	bf00      	nop
 800b4b4:	3720      	adds	r7, #32
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	40021000 	.word	0x40021000

0800b4c0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b4c4:	4b24      	ldr	r3, [pc, #144]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b4c6:	4a25      	ldr	r2, [pc, #148]	; (800b55c <MX_USART1_UART_Init+0x9c>)
 800b4c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 800b4ca:	4b23      	ldr	r3, [pc, #140]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b4cc:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800b4d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b4d2:	4b21      	ldr	r3, [pc, #132]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b4d8:	4b1f      	ldr	r3, [pc, #124]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b4da:	2200      	movs	r2, #0
 800b4dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b4de:	4b1e      	ldr	r3, [pc, #120]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b4e4:	4b1c      	ldr	r3, [pc, #112]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b4e6:	220c      	movs	r2, #12
 800b4e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b4ea:	4b1b      	ldr	r3, [pc, #108]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b4f0:	4b19      	ldr	r3, [pc, #100]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b4f6:	4b18      	ldr	r3, [pc, #96]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b4fc:	4b16      	ldr	r3, [pc, #88]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800b502:	4b15      	ldr	r3, [pc, #84]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b504:	2210      	movs	r2, #16
 800b506:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800b508:	4b13      	ldr	r3, [pc, #76]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b50a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b50e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b510:	4811      	ldr	r0, [pc, #68]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b512:	f005 facf 	bl	8010ab4 <HAL_UART_Init>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d001      	beq.n	800b520 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 800b51c:	f7fd fa82 	bl	8008a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b520:	2100      	movs	r1, #0
 800b522:	480d      	ldr	r0, [pc, #52]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b524:	f006 fe74 	bl	8012210 <HAL_UARTEx_SetTxFifoThreshold>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d001      	beq.n	800b532 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 800b52e:	f7fd fa79 	bl	8008a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b532:	2100      	movs	r1, #0
 800b534:	4808      	ldr	r0, [pc, #32]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b536:	f006 fea9 	bl	801228c <HAL_UARTEx_SetRxFifoThreshold>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d001      	beq.n	800b544 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 800b540:	f7fd fa70 	bl	8008a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800b544:	4804      	ldr	r0, [pc, #16]	; (800b558 <MX_USART1_UART_Init+0x98>)
 800b546:	f006 fe2a 	bl	801219e <HAL_UARTEx_DisableFifoMode>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d001      	beq.n	800b554 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 800b550:	f7fd fa68 	bl	8008a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b554:	bf00      	nop
 800b556:	bd80      	pop	{r7, pc}
 800b558:	200044cc 	.word	0x200044cc
 800b55c:	40013800 	.word	0x40013800

0800b560 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b0b0      	sub	sp, #192	; 0xc0
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b568:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800b56c:	2200      	movs	r2, #0
 800b56e:	601a      	str	r2, [r3, #0]
 800b570:	605a      	str	r2, [r3, #4]
 800b572:	609a      	str	r2, [r3, #8]
 800b574:	60da      	str	r2, [r3, #12]
 800b576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b578:	f107 0314 	add.w	r3, r7, #20
 800b57c:	2298      	movs	r2, #152	; 0x98
 800b57e:	2100      	movs	r1, #0
 800b580:	4618      	mov	r0, r3
 800b582:	f00b f815 	bl	80165b0 <memset>
  if(uartHandle->Instance==USART1)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a36      	ldr	r2, [pc, #216]	; (800b664 <HAL_UART_MspInit+0x104>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d165      	bne.n	800b65c <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800b590:	2301      	movs	r3, #1
 800b592:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b594:	2300      	movs	r3, #0
 800b596:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b598:	f107 0314 	add.w	r3, r7, #20
 800b59c:	4618      	mov	r0, r3
 800b59e:	f001 ff97 	bl	800d4d0 <HAL_RCCEx_PeriphCLKConfig>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d001      	beq.n	800b5ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800b5a8:	f7fd fa3c 	bl	8008a24 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b5ac:	4b2e      	ldr	r3, [pc, #184]	; (800b668 <HAL_UART_MspInit+0x108>)
 800b5ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5b0:	4a2d      	ldr	r2, [pc, #180]	; (800b668 <HAL_UART_MspInit+0x108>)
 800b5b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b5b6:	6613      	str	r3, [r2, #96]	; 0x60
 800b5b8:	4b2b      	ldr	r3, [pc, #172]	; (800b668 <HAL_UART_MspInit+0x108>)
 800b5ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5c0:	613b      	str	r3, [r7, #16]
 800b5c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5c4:	4b28      	ldr	r3, [pc, #160]	; (800b668 <HAL_UART_MspInit+0x108>)
 800b5c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5c8:	4a27      	ldr	r2, [pc, #156]	; (800b668 <HAL_UART_MspInit+0x108>)
 800b5ca:	f043 0301 	orr.w	r3, r3, #1
 800b5ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b5d0:	4b25      	ldr	r3, [pc, #148]	; (800b668 <HAL_UART_MspInit+0x108>)
 800b5d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	60fb      	str	r3, [r7, #12]
 800b5da:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b5dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b5e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5e4:	2302      	movs	r3, #2
 800b5e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b5f6:	2307      	movs	r3, #7
 800b5f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800b600:	4619      	mov	r1, r3
 800b602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b606:	f000 fce7 	bl	800bfd8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800b60a:	4b18      	ldr	r3, [pc, #96]	; (800b66c <HAL_UART_MspInit+0x10c>)
 800b60c:	4a18      	ldr	r2, [pc, #96]	; (800b670 <HAL_UART_MspInit+0x110>)
 800b60e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800b610:	4b16      	ldr	r3, [pc, #88]	; (800b66c <HAL_UART_MspInit+0x10c>)
 800b612:	2219      	movs	r2, #25
 800b614:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b616:	4b15      	ldr	r3, [pc, #84]	; (800b66c <HAL_UART_MspInit+0x10c>)
 800b618:	2200      	movs	r2, #0
 800b61a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b61c:	4b13      	ldr	r3, [pc, #76]	; (800b66c <HAL_UART_MspInit+0x10c>)
 800b61e:	2200      	movs	r2, #0
 800b620:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b622:	4b12      	ldr	r3, [pc, #72]	; (800b66c <HAL_UART_MspInit+0x10c>)
 800b624:	2280      	movs	r2, #128	; 0x80
 800b626:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b628:	4b10      	ldr	r3, [pc, #64]	; (800b66c <HAL_UART_MspInit+0x10c>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b62e:	4b0f      	ldr	r3, [pc, #60]	; (800b66c <HAL_UART_MspInit+0x10c>)
 800b630:	2200      	movs	r2, #0
 800b632:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800b634:	4b0d      	ldr	r3, [pc, #52]	; (800b66c <HAL_UART_MspInit+0x10c>)
 800b636:	2200      	movs	r2, #0
 800b638:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b63a:	4b0c      	ldr	r3, [pc, #48]	; (800b66c <HAL_UART_MspInit+0x10c>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800b640:	480a      	ldr	r0, [pc, #40]	; (800b66c <HAL_UART_MspInit+0x10c>)
 800b642:	f000 f99b 	bl	800b97c <HAL_DMA_Init>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800b64c:	f7fd f9ea 	bl	8008a24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a06      	ldr	r2, [pc, #24]	; (800b66c <HAL_UART_MspInit+0x10c>)
 800b654:	67da      	str	r2, [r3, #124]	; 0x7c
 800b656:	4a05      	ldr	r2, [pc, #20]	; (800b66c <HAL_UART_MspInit+0x10c>)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800b65c:	bf00      	nop
 800b65e:	37c0      	adds	r7, #192	; 0xc0
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	40013800 	.word	0x40013800
 800b668:	40021000 	.word	0x40021000
 800b66c:	2000455c 	.word	0x2000455c
 800b670:	40020008 	.word	0x40020008

0800b674 <Reset_Handler>:
 800b674:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b6ac <LoopForever+0x2>
 800b678:	f7ff fdaa 	bl	800b1d0 <SystemInit>
 800b67c:	480c      	ldr	r0, [pc, #48]	; (800b6b0 <LoopForever+0x6>)
 800b67e:	490d      	ldr	r1, [pc, #52]	; (800b6b4 <LoopForever+0xa>)
 800b680:	4a0d      	ldr	r2, [pc, #52]	; (800b6b8 <LoopForever+0xe>)
 800b682:	2300      	movs	r3, #0
 800b684:	e002      	b.n	800b68c <LoopCopyDataInit>

0800b686 <CopyDataInit>:
 800b686:	58d4      	ldr	r4, [r2, r3]
 800b688:	50c4      	str	r4, [r0, r3]
 800b68a:	3304      	adds	r3, #4

0800b68c <LoopCopyDataInit>:
 800b68c:	18c4      	adds	r4, r0, r3
 800b68e:	428c      	cmp	r4, r1
 800b690:	d3f9      	bcc.n	800b686 <CopyDataInit>
 800b692:	4a0a      	ldr	r2, [pc, #40]	; (800b6bc <LoopForever+0x12>)
 800b694:	4c0a      	ldr	r4, [pc, #40]	; (800b6c0 <LoopForever+0x16>)
 800b696:	2300      	movs	r3, #0
 800b698:	e001      	b.n	800b69e <LoopFillZerobss>

0800b69a <FillZerobss>:
 800b69a:	6013      	str	r3, [r2, #0]
 800b69c:	3204      	adds	r2, #4

0800b69e <LoopFillZerobss>:
 800b69e:	42a2      	cmp	r2, r4
 800b6a0:	d3fb      	bcc.n	800b69a <FillZerobss>
 800b6a2:	f00a ff53 	bl	801654c <__libc_init_array>
 800b6a6:	f7fd f90f 	bl	80088c8 <main>

0800b6aa <LoopForever>:
 800b6aa:	e7fe      	b.n	800b6aa <LoopForever>
 800b6ac:	20050000 	.word	0x20050000
 800b6b0:	20000000 	.word	0x20000000
 800b6b4:	20000278 	.word	0x20000278
 800b6b8:	0801d068 	.word	0x0801d068
 800b6bc:	20000278 	.word	0x20000278
 800b6c0:	2001e940 	.word	0x2001e940

0800b6c4 <ADC1_2_IRQHandler>:
 800b6c4:	e7fe      	b.n	800b6c4 <ADC1_2_IRQHandler>

0800b6c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b082      	sub	sp, #8
 800b6ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b6d0:	2003      	movs	r0, #3
 800b6d2:	f000 f919 	bl	800b908 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	f7ff fc0a 	bl	800aef0 <HAL_InitTick>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d002      	beq.n	800b6e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	71fb      	strb	r3, [r7, #7]
 800b6e6:	e001      	b.n	800b6ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b6e8:	f7ff fbda 	bl	800aea0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b6ec:	79fb      	ldrb	r3, [r7, #7]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
	...

0800b6f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b6fc:	4b06      	ldr	r3, [pc, #24]	; (800b718 <HAL_IncTick+0x20>)
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	461a      	mov	r2, r3
 800b702:	4b06      	ldr	r3, [pc, #24]	; (800b71c <HAL_IncTick+0x24>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4413      	add	r3, r2
 800b708:	4a04      	ldr	r2, [pc, #16]	; (800b71c <HAL_IncTick+0x24>)
 800b70a:	6013      	str	r3, [r2, #0]
}
 800b70c:	bf00      	nop
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	2000009c 	.word	0x2000009c
 800b71c:	200045bc 	.word	0x200045bc

0800b720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b720:	b480      	push	{r7}
 800b722:	af00      	add	r7, sp, #0
  return uwTick;
 800b724:	4b03      	ldr	r3, [pc, #12]	; (800b734 <HAL_GetTick+0x14>)
 800b726:	681b      	ldr	r3, [r3, #0]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	200045bc 	.word	0x200045bc

0800b738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b740:	f7ff ffee 	bl	800b720 <HAL_GetTick>
 800b744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b750:	d005      	beq.n	800b75e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800b752:	4b0a      	ldr	r3, [pc, #40]	; (800b77c <HAL_Delay+0x44>)
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	461a      	mov	r2, r3
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	4413      	add	r3, r2
 800b75c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b75e:	bf00      	nop
 800b760:	f7ff ffde 	bl	800b720 <HAL_GetTick>
 800b764:	4602      	mov	r2, r0
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d8f7      	bhi.n	800b760 <HAL_Delay+0x28>
  {
  }
}
 800b770:	bf00      	nop
 800b772:	bf00      	nop
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	2000009c 	.word	0x2000009c

0800b780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f003 0307 	and.w	r3, r3, #7
 800b78e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b790:	4b0c      	ldr	r3, [pc, #48]	; (800b7c4 <__NVIC_SetPriorityGrouping+0x44>)
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b796:	68ba      	ldr	r2, [r7, #8]
 800b798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b79c:	4013      	ands	r3, r2
 800b79e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b7a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b7ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b7b2:	4a04      	ldr	r2, [pc, #16]	; (800b7c4 <__NVIC_SetPriorityGrouping+0x44>)
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	60d3      	str	r3, [r2, #12]
}
 800b7b8:	bf00      	nop
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	e000ed00 	.word	0xe000ed00

0800b7c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b7cc:	4b04      	ldr	r3, [pc, #16]	; (800b7e0 <__NVIC_GetPriorityGrouping+0x18>)
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	0a1b      	lsrs	r3, r3, #8
 800b7d2:	f003 0307 	and.w	r3, r3, #7
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	e000ed00 	.word	0xe000ed00

0800b7e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	db0b      	blt.n	800b80e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b7f6:	79fb      	ldrb	r3, [r7, #7]
 800b7f8:	f003 021f 	and.w	r2, r3, #31
 800b7fc:	4907      	ldr	r1, [pc, #28]	; (800b81c <__NVIC_EnableIRQ+0x38>)
 800b7fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b802:	095b      	lsrs	r3, r3, #5
 800b804:	2001      	movs	r0, #1
 800b806:	fa00 f202 	lsl.w	r2, r0, r2
 800b80a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b80e:	bf00      	nop
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	e000e100 	.word	0xe000e100

0800b820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	4603      	mov	r3, r0
 800b828:	6039      	str	r1, [r7, #0]
 800b82a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b82c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b830:	2b00      	cmp	r3, #0
 800b832:	db0a      	blt.n	800b84a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	b2da      	uxtb	r2, r3
 800b838:	490c      	ldr	r1, [pc, #48]	; (800b86c <__NVIC_SetPriority+0x4c>)
 800b83a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b83e:	0112      	lsls	r2, r2, #4
 800b840:	b2d2      	uxtb	r2, r2
 800b842:	440b      	add	r3, r1
 800b844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b848:	e00a      	b.n	800b860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	b2da      	uxtb	r2, r3
 800b84e:	4908      	ldr	r1, [pc, #32]	; (800b870 <__NVIC_SetPriority+0x50>)
 800b850:	79fb      	ldrb	r3, [r7, #7]
 800b852:	f003 030f 	and.w	r3, r3, #15
 800b856:	3b04      	subs	r3, #4
 800b858:	0112      	lsls	r2, r2, #4
 800b85a:	b2d2      	uxtb	r2, r2
 800b85c:	440b      	add	r3, r1
 800b85e:	761a      	strb	r2, [r3, #24]
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	e000e100 	.word	0xe000e100
 800b870:	e000ed00 	.word	0xe000ed00

0800b874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b874:	b480      	push	{r7}
 800b876:	b089      	sub	sp, #36	; 0x24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f003 0307 	and.w	r3, r3, #7
 800b886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	f1c3 0307 	rsb	r3, r3, #7
 800b88e:	2b04      	cmp	r3, #4
 800b890:	bf28      	it	cs
 800b892:	2304      	movcs	r3, #4
 800b894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b896:	69fb      	ldr	r3, [r7, #28]
 800b898:	3304      	adds	r3, #4
 800b89a:	2b06      	cmp	r3, #6
 800b89c:	d902      	bls.n	800b8a4 <NVIC_EncodePriority+0x30>
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	3b03      	subs	r3, #3
 800b8a2:	e000      	b.n	800b8a6 <NVIC_EncodePriority+0x32>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b8b2:	43da      	mvns	r2, r3
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	401a      	ands	r2, r3
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b8bc:	f04f 31ff 	mov.w	r1, #4294967295
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b8c6:	43d9      	mvns	r1, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8cc:	4313      	orrs	r3, r2
         );
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3724      	adds	r7, #36	; 0x24
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
	...

0800b8dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b8e0:	f3bf 8f4f 	dsb	sy
}
 800b8e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b8e6:	4b06      	ldr	r3, [pc, #24]	; (800b900 <__NVIC_SystemReset+0x24>)
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b8ee:	4904      	ldr	r1, [pc, #16]	; (800b900 <__NVIC_SystemReset+0x24>)
 800b8f0:	4b04      	ldr	r3, [pc, #16]	; (800b904 <__NVIC_SystemReset+0x28>)
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b8f6:	f3bf 8f4f 	dsb	sy
}
 800b8fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b8fc:	bf00      	nop
 800b8fe:	e7fd      	b.n	800b8fc <__NVIC_SystemReset+0x20>
 800b900:	e000ed00 	.word	0xe000ed00
 800b904:	05fa0004 	.word	0x05fa0004

0800b908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f7ff ff35 	bl	800b780 <__NVIC_SetPriorityGrouping>
}
 800b916:	bf00      	nop
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b086      	sub	sp, #24
 800b922:	af00      	add	r7, sp, #0
 800b924:	4603      	mov	r3, r0
 800b926:	60b9      	str	r1, [r7, #8]
 800b928:	607a      	str	r2, [r7, #4]
 800b92a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b92c:	2300      	movs	r3, #0
 800b92e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b930:	f7ff ff4a 	bl	800b7c8 <__NVIC_GetPriorityGrouping>
 800b934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	68b9      	ldr	r1, [r7, #8]
 800b93a:	6978      	ldr	r0, [r7, #20]
 800b93c:	f7ff ff9a 	bl	800b874 <NVIC_EncodePriority>
 800b940:	4602      	mov	r2, r0
 800b942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b946:	4611      	mov	r1, r2
 800b948:	4618      	mov	r0, r3
 800b94a:	f7ff ff69 	bl	800b820 <__NVIC_SetPriority>
}
 800b94e:	bf00      	nop
 800b950:	3718      	adds	r7, #24
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b082      	sub	sp, #8
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	4603      	mov	r3, r0
 800b95e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b964:	4618      	mov	r0, r3
 800b966:	f7ff ff3d 	bl	800b7e4 <__NVIC_EnableIRQ>
}
 800b96a:	bf00      	nop
 800b96c:	3708      	adds	r7, #8
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800b976:	f7ff ffb1 	bl	800b8dc <__NVIC_SystemReset>
	...

0800b97c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d101      	bne.n	800b98e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	e08d      	b.n	800baaa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	4b47      	ldr	r3, [pc, #284]	; (800bab4 <HAL_DMA_Init+0x138>)
 800b996:	429a      	cmp	r2, r3
 800b998:	d80f      	bhi.n	800b9ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	461a      	mov	r2, r3
 800b9a0:	4b45      	ldr	r3, [pc, #276]	; (800bab8 <HAL_DMA_Init+0x13c>)
 800b9a2:	4413      	add	r3, r2
 800b9a4:	4a45      	ldr	r2, [pc, #276]	; (800babc <HAL_DMA_Init+0x140>)
 800b9a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9aa:	091b      	lsrs	r3, r3, #4
 800b9ac:	009a      	lsls	r2, r3, #2
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a42      	ldr	r2, [pc, #264]	; (800bac0 <HAL_DMA_Init+0x144>)
 800b9b6:	641a      	str	r2, [r3, #64]	; 0x40
 800b9b8:	e00e      	b.n	800b9d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	4b40      	ldr	r3, [pc, #256]	; (800bac4 <HAL_DMA_Init+0x148>)
 800b9c2:	4413      	add	r3, r2
 800b9c4:	4a3d      	ldr	r2, [pc, #244]	; (800babc <HAL_DMA_Init+0x140>)
 800b9c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ca:	091b      	lsrs	r3, r3, #4
 800b9cc:	009a      	lsls	r2, r3, #2
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a3c      	ldr	r2, [pc, #240]	; (800bac8 <HAL_DMA_Init+0x14c>)
 800b9d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2202      	movs	r2, #2
 800b9dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b9ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b9fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fa72 	bl	800bf14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba38:	d102      	bne.n	800ba40 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	685a      	ldr	r2, [r3, #4]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba48:	b2d2      	uxtb	r2, r2
 800ba4a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ba54:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d010      	beq.n	800ba80 <HAL_DMA_Init+0x104>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	2b04      	cmp	r3, #4
 800ba64:	d80c      	bhi.n	800ba80 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 fa92 	bl	800bf90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba70:	2200      	movs	r2, #0
 800ba72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ba7c:	605a      	str	r2, [r3, #4]
 800ba7e:	e008      	b.n	800ba92 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	40020407 	.word	0x40020407
 800bab8:	bffdfff8 	.word	0xbffdfff8
 800babc:	cccccccd 	.word	0xcccccccd
 800bac0:	40020000 	.word	0x40020000
 800bac4:	bffdfbf8 	.word	0xbffdfbf8
 800bac8:	40020400 	.word	0x40020400

0800bacc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b086      	sub	sp, #24
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
 800bad8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d101      	bne.n	800baec <HAL_DMA_Start_IT+0x20>
 800bae8:	2302      	movs	r3, #2
 800baea:	e066      	b.n	800bbba <HAL_DMA_Start_IT+0xee>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d155      	bne.n	800bbac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2202      	movs	r2, #2
 800bb04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f022 0201 	bic.w	r2, r2, #1
 800bb1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	68b9      	ldr	r1, [r7, #8]
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f000 f9b6 	bl	800be96 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d008      	beq.n	800bb44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f042 020e 	orr.w	r2, r2, #14
 800bb40:	601a      	str	r2, [r3, #0]
 800bb42:	e00f      	b.n	800bb64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f022 0204 	bic.w	r2, r2, #4
 800bb52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f042 020a 	orr.w	r2, r2, #10
 800bb62:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d007      	beq.n	800bb82 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb80:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d007      	beq.n	800bb9a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb98:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f042 0201 	orr.w	r2, r2, #1
 800bba8:	601a      	str	r2, [r3, #0]
 800bbaa:	e005      	b.n	800bbb8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800bbb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3718      	adds	r7, #24
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	b085      	sub	sp, #20
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d008      	beq.n	800bbec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2204      	movs	r2, #4
 800bbde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e040      	b.n	800bc6e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f022 020e 	bic.w	r2, r2, #14
 800bbfa:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc0a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f022 0201 	bic.w	r2, r2, #1
 800bc1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc20:	f003 021c 	and.w	r2, r3, #28
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc28:	2101      	movs	r1, #1
 800bc2a:	fa01 f202 	lsl.w	r2, r1, r2
 800bc2e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bc38:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00c      	beq.n	800bc5c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bc5a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800bc6c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b084      	sub	sp, #16
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b02      	cmp	r3, #2
 800bc90:	d005      	beq.n	800bc9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2204      	movs	r2, #4
 800bc96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	73fb      	strb	r3, [r7, #15]
 800bc9c:	e047      	b.n	800bd2e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f022 020e 	bic.w	r2, r2, #14
 800bcac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f022 0201 	bic.w	r2, r2, #1
 800bcbc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bccc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcd2:	f003 021c 	and.w	r2, r3, #28
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcda:	2101      	movs	r1, #1
 800bcdc:	fa01 f202 	lsl.w	r2, r1, r2
 800bce0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bcea:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00c      	beq.n	800bd0e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bd0c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2201      	movs	r2, #1
 800bd12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d003      	beq.n	800bd2e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	4798      	blx	r3
    }
  }
  return status;
 800bd2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd54:	f003 031c 	and.w	r3, r3, #28
 800bd58:	2204      	movs	r2, #4
 800bd5a:	409a      	lsls	r2, r3
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4013      	ands	r3, r2
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d026      	beq.n	800bdb2 <HAL_DMA_IRQHandler+0x7a>
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	f003 0304 	and.w	r3, r3, #4
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d021      	beq.n	800bdb2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f003 0320 	and.w	r3, r3, #32
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d107      	bne.n	800bd8c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f022 0204 	bic.w	r2, r2, #4
 800bd8a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd90:	f003 021c 	and.w	r2, r3, #28
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd98:	2104      	movs	r1, #4
 800bd9a:	fa01 f202 	lsl.w	r2, r1, r2
 800bd9e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d071      	beq.n	800be8c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800bdb0:	e06c      	b.n	800be8c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdb6:	f003 031c 	and.w	r3, r3, #28
 800bdba:	2202      	movs	r2, #2
 800bdbc:	409a      	lsls	r2, r3
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d02e      	beq.n	800be24 <HAL_DMA_IRQHandler+0xec>
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	f003 0302 	and.w	r3, r3, #2
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d029      	beq.n	800be24 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f003 0320 	and.w	r3, r3, #32
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10b      	bne.n	800bdf6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f022 020a 	bic.w	r2, r2, #10
 800bdec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdfa:	f003 021c 	and.w	r2, r3, #28
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be02:	2102      	movs	r1, #2
 800be04:	fa01 f202 	lsl.w	r2, r1, r2
 800be08:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be16:	2b00      	cmp	r3, #0
 800be18:	d038      	beq.n	800be8c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800be22:	e033      	b.n	800be8c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be28:	f003 031c 	and.w	r3, r3, #28
 800be2c:	2208      	movs	r2, #8
 800be2e:	409a      	lsls	r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	4013      	ands	r3, r2
 800be34:	2b00      	cmp	r3, #0
 800be36:	d02a      	beq.n	800be8e <HAL_DMA_IRQHandler+0x156>
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	f003 0308 	and.w	r3, r3, #8
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d025      	beq.n	800be8e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f022 020e 	bic.w	r2, r2, #14
 800be50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be56:	f003 021c 	and.w	r2, r3, #28
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be5e:	2101      	movs	r1, #1
 800be60:	fa01 f202 	lsl.w	r2, r1, r2
 800be64:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2201      	movs	r2, #1
 800be6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2201      	movs	r2, #1
 800be70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be80:	2b00      	cmp	r3, #0
 800be82:	d004      	beq.n	800be8e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800be8c:	bf00      	nop
 800be8e:	bf00      	nop
}
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be96:	b480      	push	{r7}
 800be98:	b085      	sub	sp, #20
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	60f8      	str	r0, [r7, #12]
 800be9e:	60b9      	str	r1, [r7, #8]
 800bea0:	607a      	str	r2, [r7, #4]
 800bea2:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800beac:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d004      	beq.n	800bec0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beba:	68fa      	ldr	r2, [r7, #12]
 800bebc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bebe:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bec4:	f003 021c 	and.w	r2, r3, #28
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800becc:	2101      	movs	r1, #1
 800bece:	fa01 f202 	lsl.w	r2, r1, r2
 800bed2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	683a      	ldr	r2, [r7, #0]
 800beda:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	2b10      	cmp	r3, #16
 800bee2:	d108      	bne.n	800bef6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68ba      	ldr	r2, [r7, #8]
 800bef2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800bef4:	e007      	b.n	800bf06 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	60da      	str	r2, [r3, #12]
}
 800bf06:	bf00      	nop
 800bf08:	3714      	adds	r7, #20
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr
	...

0800bf14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	461a      	mov	r2, r3
 800bf22:	4b17      	ldr	r3, [pc, #92]	; (800bf80 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d80a      	bhi.n	800bf3e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf2c:	089b      	lsrs	r3, r3, #2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bf34:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	6493      	str	r3, [r2, #72]	; 0x48
 800bf3c:	e007      	b.n	800bf4e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf42:	089b      	lsrs	r3, r3, #2
 800bf44:	009a      	lsls	r2, r3, #2
 800bf46:	4b0f      	ldr	r3, [pc, #60]	; (800bf84 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800bf48:	4413      	add	r3, r2
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	3b08      	subs	r3, #8
 800bf56:	4a0c      	ldr	r2, [pc, #48]	; (800bf88 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800bf58:	fba2 2303 	umull	r2, r3, r2, r3
 800bf5c:	091b      	lsrs	r3, r3, #4
 800bf5e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a0a      	ldr	r2, [pc, #40]	; (800bf8c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800bf64:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f003 031f 	and.w	r3, r3, #31
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	409a      	lsls	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bf74:	bf00      	nop
 800bf76:	3714      	adds	r7, #20
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr
 800bf80:	40020407 	.word	0x40020407
 800bf84:	4002081c 	.word	0x4002081c
 800bf88:	cccccccd 	.word	0xcccccccd
 800bf8c:	40020880 	.word	0x40020880

0800bf90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	4b0b      	ldr	r3, [pc, #44]	; (800bfd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800bfa4:	4413      	add	r3, r2
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4a08      	ldr	r2, [pc, #32]	; (800bfd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800bfb2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	f003 0303 	and.w	r3, r3, #3
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	409a      	lsls	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800bfc4:	bf00      	nop
 800bfc6:	3714      	adds	r7, #20
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr
 800bfd0:	1000823f 	.word	0x1000823f
 800bfd4:	40020940 	.word	0x40020940

0800bfd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b087      	sub	sp, #28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bfe6:	e166      	b.n	800c2b6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	2101      	movs	r1, #1
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	fa01 f303 	lsl.w	r3, r1, r3
 800bff4:	4013      	ands	r3, r2
 800bff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 8158 	beq.w	800c2b0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	f003 0303 	and.w	r3, r3, #3
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d005      	beq.n	800c018 <HAL_GPIO_Init+0x40>
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	f003 0303 	and.w	r3, r3, #3
 800c014:	2b02      	cmp	r3, #2
 800c016:	d130      	bne.n	800c07a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	005b      	lsls	r3, r3, #1
 800c022:	2203      	movs	r2, #3
 800c024:	fa02 f303 	lsl.w	r3, r2, r3
 800c028:	43db      	mvns	r3, r3
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	4013      	ands	r3, r2
 800c02e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	68da      	ldr	r2, [r3, #12]
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	005b      	lsls	r3, r3, #1
 800c038:	fa02 f303 	lsl.w	r3, r2, r3
 800c03c:	693a      	ldr	r2, [r7, #16]
 800c03e:	4313      	orrs	r3, r2
 800c040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	693a      	ldr	r2, [r7, #16]
 800c046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c04e:	2201      	movs	r2, #1
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	fa02 f303 	lsl.w	r3, r2, r3
 800c056:	43db      	mvns	r3, r3
 800c058:	693a      	ldr	r2, [r7, #16]
 800c05a:	4013      	ands	r3, r2
 800c05c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	091b      	lsrs	r3, r3, #4
 800c064:	f003 0201 	and.w	r2, r3, #1
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	fa02 f303 	lsl.w	r3, r2, r3
 800c06e:	693a      	ldr	r2, [r7, #16]
 800c070:	4313      	orrs	r3, r2
 800c072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	693a      	ldr	r2, [r7, #16]
 800c078:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	f003 0303 	and.w	r3, r3, #3
 800c082:	2b03      	cmp	r3, #3
 800c084:	d017      	beq.n	800c0b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	005b      	lsls	r3, r3, #1
 800c090:	2203      	movs	r2, #3
 800c092:	fa02 f303 	lsl.w	r3, r2, r3
 800c096:	43db      	mvns	r3, r3
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	4013      	ands	r3, r2
 800c09c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	689a      	ldr	r2, [r3, #8]
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	005b      	lsls	r3, r3, #1
 800c0a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	693a      	ldr	r2, [r7, #16]
 800c0b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	f003 0303 	and.w	r3, r3, #3
 800c0be:	2b02      	cmp	r3, #2
 800c0c0:	d123      	bne.n	800c10a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	08da      	lsrs	r2, r3, #3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	3208      	adds	r2, #8
 800c0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	f003 0307 	and.w	r3, r3, #7
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	220f      	movs	r2, #15
 800c0da:	fa02 f303 	lsl.w	r3, r2, r3
 800c0de:	43db      	mvns	r3, r3
 800c0e0:	693a      	ldr	r2, [r7, #16]
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	691a      	ldr	r2, [r3, #16]
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	f003 0307 	and.w	r3, r3, #7
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0f6:	693a      	ldr	r2, [r7, #16]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	08da      	lsrs	r2, r3, #3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	3208      	adds	r2, #8
 800c104:	6939      	ldr	r1, [r7, #16]
 800c106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	005b      	lsls	r3, r3, #1
 800c114:	2203      	movs	r2, #3
 800c116:	fa02 f303 	lsl.w	r3, r2, r3
 800c11a:	43db      	mvns	r3, r3
 800c11c:	693a      	ldr	r2, [r7, #16]
 800c11e:	4013      	ands	r3, r2
 800c120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	f003 0203 	and.w	r2, r3, #3
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	005b      	lsls	r3, r3, #1
 800c12e:	fa02 f303 	lsl.w	r3, r2, r3
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	4313      	orrs	r3, r2
 800c136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	693a      	ldr	r2, [r7, #16]
 800c13c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c146:	2b00      	cmp	r3, #0
 800c148:	f000 80b2 	beq.w	800c2b0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c14c:	4b61      	ldr	r3, [pc, #388]	; (800c2d4 <HAL_GPIO_Init+0x2fc>)
 800c14e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c150:	4a60      	ldr	r2, [pc, #384]	; (800c2d4 <HAL_GPIO_Init+0x2fc>)
 800c152:	f043 0301 	orr.w	r3, r3, #1
 800c156:	6613      	str	r3, [r2, #96]	; 0x60
 800c158:	4b5e      	ldr	r3, [pc, #376]	; (800c2d4 <HAL_GPIO_Init+0x2fc>)
 800c15a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c15c:	f003 0301 	and.w	r3, r3, #1
 800c160:	60bb      	str	r3, [r7, #8]
 800c162:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800c164:	4a5c      	ldr	r2, [pc, #368]	; (800c2d8 <HAL_GPIO_Init+0x300>)
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	089b      	lsrs	r3, r3, #2
 800c16a:	3302      	adds	r3, #2
 800c16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c170:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f003 0303 	and.w	r3, r3, #3
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	220f      	movs	r2, #15
 800c17c:	fa02 f303 	lsl.w	r3, r2, r3
 800c180:	43db      	mvns	r3, r3
 800c182:	693a      	ldr	r2, [r7, #16]
 800c184:	4013      	ands	r3, r2
 800c186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c18e:	d02b      	beq.n	800c1e8 <HAL_GPIO_Init+0x210>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a52      	ldr	r2, [pc, #328]	; (800c2dc <HAL_GPIO_Init+0x304>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d025      	beq.n	800c1e4 <HAL_GPIO_Init+0x20c>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a51      	ldr	r2, [pc, #324]	; (800c2e0 <HAL_GPIO_Init+0x308>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d01f      	beq.n	800c1e0 <HAL_GPIO_Init+0x208>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a50      	ldr	r2, [pc, #320]	; (800c2e4 <HAL_GPIO_Init+0x30c>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d019      	beq.n	800c1dc <HAL_GPIO_Init+0x204>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a4f      	ldr	r2, [pc, #316]	; (800c2e8 <HAL_GPIO_Init+0x310>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d013      	beq.n	800c1d8 <HAL_GPIO_Init+0x200>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a4e      	ldr	r2, [pc, #312]	; (800c2ec <HAL_GPIO_Init+0x314>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d00d      	beq.n	800c1d4 <HAL_GPIO_Init+0x1fc>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4a4d      	ldr	r2, [pc, #308]	; (800c2f0 <HAL_GPIO_Init+0x318>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d007      	beq.n	800c1d0 <HAL_GPIO_Init+0x1f8>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4a4c      	ldr	r2, [pc, #304]	; (800c2f4 <HAL_GPIO_Init+0x31c>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d101      	bne.n	800c1cc <HAL_GPIO_Init+0x1f4>
 800c1c8:	2307      	movs	r3, #7
 800c1ca:	e00e      	b.n	800c1ea <HAL_GPIO_Init+0x212>
 800c1cc:	2308      	movs	r3, #8
 800c1ce:	e00c      	b.n	800c1ea <HAL_GPIO_Init+0x212>
 800c1d0:	2306      	movs	r3, #6
 800c1d2:	e00a      	b.n	800c1ea <HAL_GPIO_Init+0x212>
 800c1d4:	2305      	movs	r3, #5
 800c1d6:	e008      	b.n	800c1ea <HAL_GPIO_Init+0x212>
 800c1d8:	2304      	movs	r3, #4
 800c1da:	e006      	b.n	800c1ea <HAL_GPIO_Init+0x212>
 800c1dc:	2303      	movs	r3, #3
 800c1de:	e004      	b.n	800c1ea <HAL_GPIO_Init+0x212>
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	e002      	b.n	800c1ea <HAL_GPIO_Init+0x212>
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e000      	b.n	800c1ea <HAL_GPIO_Init+0x212>
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	697a      	ldr	r2, [r7, #20]
 800c1ec:	f002 0203 	and.w	r2, r2, #3
 800c1f0:	0092      	lsls	r2, r2, #2
 800c1f2:	4093      	lsls	r3, r2
 800c1f4:	693a      	ldr	r2, [r7, #16]
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800c1fa:	4937      	ldr	r1, [pc, #220]	; (800c2d8 <HAL_GPIO_Init+0x300>)
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	089b      	lsrs	r3, r3, #2
 800c200:	3302      	adds	r3, #2
 800c202:	693a      	ldr	r2, [r7, #16]
 800c204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c208:	4b3b      	ldr	r3, [pc, #236]	; (800c2f8 <HAL_GPIO_Init+0x320>)
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	43db      	mvns	r3, r3
 800c212:	693a      	ldr	r2, [r7, #16]
 800c214:	4013      	ands	r3, r2
 800c216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c220:	2b00      	cmp	r3, #0
 800c222:	d003      	beq.n	800c22c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800c224:	693a      	ldr	r2, [r7, #16]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	4313      	orrs	r3, r2
 800c22a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c22c:	4a32      	ldr	r2, [pc, #200]	; (800c2f8 <HAL_GPIO_Init+0x320>)
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c232:	4b31      	ldr	r3, [pc, #196]	; (800c2f8 <HAL_GPIO_Init+0x320>)
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	43db      	mvns	r3, r3
 800c23c:	693a      	ldr	r2, [r7, #16]
 800c23e:	4013      	ands	r3, r2
 800c240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d003      	beq.n	800c256 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800c24e:	693a      	ldr	r2, [r7, #16]
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	4313      	orrs	r3, r2
 800c254:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c256:	4a28      	ldr	r2, [pc, #160]	; (800c2f8 <HAL_GPIO_Init+0x320>)
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800c25c:	4b26      	ldr	r3, [pc, #152]	; (800c2f8 <HAL_GPIO_Init+0x320>)
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	43db      	mvns	r3, r3
 800c266:	693a      	ldr	r2, [r7, #16]
 800c268:	4013      	ands	r3, r2
 800c26a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c274:	2b00      	cmp	r3, #0
 800c276:	d003      	beq.n	800c280 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	4313      	orrs	r3, r2
 800c27e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c280:	4a1d      	ldr	r2, [pc, #116]	; (800c2f8 <HAL_GPIO_Init+0x320>)
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800c286:	4b1c      	ldr	r3, [pc, #112]	; (800c2f8 <HAL_GPIO_Init+0x320>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	43db      	mvns	r3, r3
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	4013      	ands	r3, r2
 800c294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d003      	beq.n	800c2aa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800c2a2:	693a      	ldr	r2, [r7, #16]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c2aa:	4a13      	ldr	r2, [pc, #76]	; (800c2f8 <HAL_GPIO_Init+0x320>)
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f47f ae91 	bne.w	800bfe8 <HAL_GPIO_Init+0x10>
  }
}
 800c2c6:	bf00      	nop
 800c2c8:	bf00      	nop
 800c2ca:	371c      	adds	r7, #28
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr
 800c2d4:	40021000 	.word	0x40021000
 800c2d8:	40010000 	.word	0x40010000
 800c2dc:	48000400 	.word	0x48000400
 800c2e0:	48000800 	.word	0x48000800
 800c2e4:	48000c00 	.word	0x48000c00
 800c2e8:	48001000 	.word	0x48001000
 800c2ec:	48001400 	.word	0x48001400
 800c2f0:	48001800 	.word	0x48001800
 800c2f4:	48001c00 	.word	0x48001c00
 800c2f8:	40010400 	.word	0x40010400

0800c2fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	460b      	mov	r3, r1
 800c306:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	691a      	ldr	r2, [r3, #16]
 800c30c:	887b      	ldrh	r3, [r7, #2]
 800c30e:	4013      	ands	r3, r2
 800c310:	2b00      	cmp	r3, #0
 800c312:	d002      	beq.n	800c31a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c314:	2301      	movs	r3, #1
 800c316:	73fb      	strb	r3, [r7, #15]
 800c318:	e001      	b.n	800c31e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c31a:	2300      	movs	r3, #0
 800c31c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	460b      	mov	r3, r1
 800c336:	807b      	strh	r3, [r7, #2]
 800c338:	4613      	mov	r3, r2
 800c33a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c33c:	787b      	ldrb	r3, [r7, #1]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c342:	887a      	ldrh	r2, [r7, #2]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c348:	e002      	b.n	800c350 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c34a:	887a      	ldrh	r2, [r7, #2]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	460b      	mov	r3, r1
 800c366:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	695b      	ldr	r3, [r3, #20]
 800c36c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c36e:	887a      	ldrh	r2, [r7, #2]
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	4013      	ands	r3, r2
 800c374:	041a      	lsls	r2, r3, #16
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	43d9      	mvns	r1, r3
 800c37a:	887b      	ldrh	r3, [r7, #2]
 800c37c:	400b      	ands	r3, r1
 800c37e:	431a      	orrs	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	619a      	str	r2, [r3, #24]
}
 800c384:	bf00      	nop
 800c386:	3714      	adds	r7, #20
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d101      	bne.n	800c3a2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e041      	b.n	800c426 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800c3aa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f245 5255 	movw	r2, #21845	; 0x5555
 800c3b4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	6852      	ldr	r2, [r2, #4]
 800c3be:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	6892      	ldr	r2, [r2, #8]
 800c3c8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800c3ca:	f7ff f9a9 	bl	800b720 <HAL_GetTick>
 800c3ce:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c3d0:	e00f      	b.n	800c3f2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c3d2:	f7ff f9a5 	bl	800b720 <HAL_GetTick>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	2b31      	cmp	r3, #49	; 0x31
 800c3de:	d908      	bls.n	800c3f2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	68db      	ldr	r3, [r3, #12]
 800c3e6:	f003 0307 	and.w	r3, r3, #7
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d001      	beq.n	800c3f2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800c3ee:	2303      	movs	r3, #3
 800c3f0:	e019      	b.n	800c426 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	f003 0307 	and.w	r3, r3, #7
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1e8      	bne.n	800c3d2 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	691a      	ldr	r2, [r3, #16]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d005      	beq.n	800c41a <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	68d2      	ldr	r2, [r2, #12]
 800c416:	611a      	str	r2, [r3, #16]
 800c418:	e004      	b.n	800c424 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800c422:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800c42e:	b480      	push	{r7}
 800c430:	b083      	sub	sp, #12
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800c43e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	370c      	adds	r7, #12
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
	...

0800c450 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c450:	b480      	push	{r7}
 800c452:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c454:	4b05      	ldr	r3, [pc, #20]	; (800c46c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a04      	ldr	r2, [pc, #16]	; (800c46c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c45a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c45e:	6013      	str	r3, [r2, #0]
}
 800c460:	bf00      	nop
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	40007000 	.word	0x40007000

0800c470 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c470:	b480      	push	{r7}
 800c472:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c474:	4b0d      	ldr	r3, [pc, #52]	; (800c4ac <HAL_PWREx_GetVoltageRange+0x3c>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c47c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c480:	d102      	bne.n	800c488 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800c482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c486:	e00b      	b.n	800c4a0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800c488:	4b08      	ldr	r3, [pc, #32]	; (800c4ac <HAL_PWREx_GetVoltageRange+0x3c>)
 800c48a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c48e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c496:	d102      	bne.n	800c49e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800c498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c49c:	e000      	b.n	800c4a0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800c49e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr
 800c4aa:	bf00      	nop
 800c4ac:	40007000 	.word	0x40007000

0800c4b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d141      	bne.n	800c542 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c4be:	4b4b      	ldr	r3, [pc, #300]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c4c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4ca:	d131      	bne.n	800c530 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c4cc:	4b47      	ldr	r3, [pc, #284]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4d2:	4a46      	ldr	r2, [pc, #280]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c4dc:	4b43      	ldr	r3, [pc, #268]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c4e4:	4a41      	ldr	r2, [pc, #260]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c4ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800c4ec:	4b40      	ldr	r3, [pc, #256]	; (800c5f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2232      	movs	r2, #50	; 0x32
 800c4f2:	fb02 f303 	mul.w	r3, r2, r3
 800c4f6:	4a3f      	ldr	r2, [pc, #252]	; (800c5f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c4f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c4fc:	0c9b      	lsrs	r3, r3, #18
 800c4fe:	3301      	adds	r3, #1
 800c500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c502:	e002      	b.n	800c50a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	3b01      	subs	r3, #1
 800c508:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c50a:	4b38      	ldr	r3, [pc, #224]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c50c:	695b      	ldr	r3, [r3, #20]
 800c50e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c516:	d102      	bne.n	800c51e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1f2      	bne.n	800c504 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c51e:	4b33      	ldr	r3, [pc, #204]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c520:	695b      	ldr	r3, [r3, #20]
 800c522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c52a:	d158      	bne.n	800c5de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c52c:	2303      	movs	r3, #3
 800c52e:	e057      	b.n	800c5e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c530:	4b2e      	ldr	r3, [pc, #184]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c536:	4a2d      	ldr	r2, [pc, #180]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c53c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c540:	e04d      	b.n	800c5de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c548:	d141      	bne.n	800c5ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c54a:	4b28      	ldr	r3, [pc, #160]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c556:	d131      	bne.n	800c5bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c558:	4b24      	ldr	r3, [pc, #144]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c55a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c55e:	4a23      	ldr	r2, [pc, #140]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c564:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c568:	4b20      	ldr	r3, [pc, #128]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c570:	4a1e      	ldr	r2, [pc, #120]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c576:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800c578:	4b1d      	ldr	r3, [pc, #116]	; (800c5f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2232      	movs	r2, #50	; 0x32
 800c57e:	fb02 f303 	mul.w	r3, r2, r3
 800c582:	4a1c      	ldr	r2, [pc, #112]	; (800c5f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c584:	fba2 2303 	umull	r2, r3, r2, r3
 800c588:	0c9b      	lsrs	r3, r3, #18
 800c58a:	3301      	adds	r3, #1
 800c58c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c58e:	e002      	b.n	800c596 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	3b01      	subs	r3, #1
 800c594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c596:	4b15      	ldr	r3, [pc, #84]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c598:	695b      	ldr	r3, [r3, #20]
 800c59a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c59e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5a2:	d102      	bne.n	800c5aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1f2      	bne.n	800c590 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c5aa:	4b10      	ldr	r3, [pc, #64]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5ac:	695b      	ldr	r3, [r3, #20]
 800c5ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5b6:	d112      	bne.n	800c5de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c5b8:	2303      	movs	r3, #3
 800c5ba:	e011      	b.n	800c5e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c5bc:	4b0b      	ldr	r3, [pc, #44]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5c2:	4a0a      	ldr	r2, [pc, #40]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c5cc:	e007      	b.n	800c5de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c5ce:	4b07      	ldr	r3, [pc, #28]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c5d6:	4a05      	ldr	r2, [pc, #20]	; (800c5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c5dc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3714      	adds	r7, #20
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr
 800c5ec:	40007000 	.word	0x40007000
 800c5f0:	20000094 	.word	0x20000094
 800c5f4:	431bde83 	.word	0x431bde83

0800c5f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b08a      	sub	sp, #40	; 0x28
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d102      	bne.n	800c60c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	f000 bc68 	b.w	800cedc <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c60c:	4b97      	ldr	r3, [pc, #604]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	f003 030c 	and.w	r3, r3, #12
 800c614:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c616:	4b95      	ldr	r3, [pc, #596]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	f003 0303 	and.w	r3, r3, #3
 800c61e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f003 0310 	and.w	r3, r3, #16
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f000 80e6 	beq.w	800c7fa <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c62e:	6a3b      	ldr	r3, [r7, #32]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d007      	beq.n	800c644 <HAL_RCC_OscConfig+0x4c>
 800c634:	6a3b      	ldr	r3, [r7, #32]
 800c636:	2b0c      	cmp	r3, #12
 800c638:	f040 808d 	bne.w	800c756 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	2b01      	cmp	r3, #1
 800c640:	f040 8089 	bne.w	800c756 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c644:	4b89      	ldr	r3, [pc, #548]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 0302 	and.w	r3, r3, #2
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d006      	beq.n	800c65e <HAL_RCC_OscConfig+0x66>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	69db      	ldr	r3, [r3, #28]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d102      	bne.n	800c65e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	f000 bc3f 	b.w	800cedc <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c662:	4b82      	ldr	r3, [pc, #520]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 0308 	and.w	r3, r3, #8
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d004      	beq.n	800c678 <HAL_RCC_OscConfig+0x80>
 800c66e:	4b7f      	ldr	r3, [pc, #508]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c676:	e005      	b.n	800c684 <HAL_RCC_OscConfig+0x8c>
 800c678:	4b7c      	ldr	r3, [pc, #496]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c67a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c67e:	091b      	lsrs	r3, r3, #4
 800c680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c684:	4293      	cmp	r3, r2
 800c686:	d224      	bcs.n	800c6d2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c68c:	4618      	mov	r0, r3
 800c68e:	f000 fe5f 	bl	800d350 <RCC_SetFlashLatencyFromMSIRange>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d002      	beq.n	800c69e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800c698:	2301      	movs	r3, #1
 800c69a:	f000 bc1f 	b.w	800cedc <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c69e:	4b73      	ldr	r3, [pc, #460]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a72      	ldr	r2, [pc, #456]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c6a4:	f043 0308 	orr.w	r3, r3, #8
 800c6a8:	6013      	str	r3, [r2, #0]
 800c6aa:	4b70      	ldr	r3, [pc, #448]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b6:	496d      	ldr	r1, [pc, #436]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c6bc:	4b6b      	ldr	r3, [pc, #428]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6a1b      	ldr	r3, [r3, #32]
 800c6c8:	021b      	lsls	r3, r3, #8
 800c6ca:	4968      	ldr	r1, [pc, #416]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	604b      	str	r3, [r1, #4]
 800c6d0:	e025      	b.n	800c71e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c6d2:	4b66      	ldr	r3, [pc, #408]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4a65      	ldr	r2, [pc, #404]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c6d8:	f043 0308 	orr.w	r3, r3, #8
 800c6dc:	6013      	str	r3, [r2, #0]
 800c6de:	4b63      	ldr	r3, [pc, #396]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ea:	4960      	ldr	r1, [pc, #384]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c6f0:	4b5e      	ldr	r3, [pc, #376]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6a1b      	ldr	r3, [r3, #32]
 800c6fc:	021b      	lsls	r3, r3, #8
 800c6fe:	495b      	ldr	r1, [pc, #364]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c700:	4313      	orrs	r3, r2
 800c702:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c704:	6a3b      	ldr	r3, [r7, #32]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d109      	bne.n	800c71e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c70e:	4618      	mov	r0, r3
 800c710:	f000 fe1e 	bl	800d350 <RCC_SetFlashLatencyFromMSIRange>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d001      	beq.n	800c71e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	e3de      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c71e:	f000 fd21 	bl	800d164 <HAL_RCC_GetSysClockFreq>
 800c722:	4602      	mov	r2, r0
 800c724:	4b51      	ldr	r3, [pc, #324]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	091b      	lsrs	r3, r3, #4
 800c72a:	f003 030f 	and.w	r3, r3, #15
 800c72e:	4950      	ldr	r1, [pc, #320]	; (800c870 <HAL_RCC_OscConfig+0x278>)
 800c730:	5ccb      	ldrb	r3, [r1, r3]
 800c732:	f003 031f 	and.w	r3, r3, #31
 800c736:	fa22 f303 	lsr.w	r3, r2, r3
 800c73a:	4a4e      	ldr	r2, [pc, #312]	; (800c874 <HAL_RCC_OscConfig+0x27c>)
 800c73c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c73e:	4b4e      	ldr	r3, [pc, #312]	; (800c878 <HAL_RCC_OscConfig+0x280>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4618      	mov	r0, r3
 800c744:	f7fe fbd4 	bl	800aef0 <HAL_InitTick>
 800c748:	4603      	mov	r3, r0
 800c74a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800c74c:	7dfb      	ldrb	r3, [r7, #23]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d052      	beq.n	800c7f8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800c752:	7dfb      	ldrb	r3, [r7, #23]
 800c754:	e3c2      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	69db      	ldr	r3, [r3, #28]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d032      	beq.n	800c7c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c75e:	4b43      	ldr	r3, [pc, #268]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a42      	ldr	r2, [pc, #264]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c764:	f043 0301 	orr.w	r3, r3, #1
 800c768:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c76a:	f7fe ffd9 	bl	800b720 <HAL_GetTick>
 800c76e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c770:	e008      	b.n	800c784 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c772:	f7fe ffd5 	bl	800b720 <HAL_GetTick>
 800c776:	4602      	mov	r2, r0
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	1ad3      	subs	r3, r2, r3
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d901      	bls.n	800c784 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800c780:	2303      	movs	r3, #3
 800c782:	e3ab      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c784:	4b39      	ldr	r3, [pc, #228]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 0302 	and.w	r3, r3, #2
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d0f0      	beq.n	800c772 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c790:	4b36      	ldr	r3, [pc, #216]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a35      	ldr	r2, [pc, #212]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c796:	f043 0308 	orr.w	r3, r3, #8
 800c79a:	6013      	str	r3, [r2, #0]
 800c79c:	4b33      	ldr	r3, [pc, #204]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a8:	4930      	ldr	r1, [pc, #192]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c7ae:	4b2f      	ldr	r3, [pc, #188]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6a1b      	ldr	r3, [r3, #32]
 800c7ba:	021b      	lsls	r3, r3, #8
 800c7bc:	492b      	ldr	r1, [pc, #172]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	604b      	str	r3, [r1, #4]
 800c7c2:	e01a      	b.n	800c7fa <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c7c4:	4b29      	ldr	r3, [pc, #164]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a28      	ldr	r2, [pc, #160]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c7ca:	f023 0301 	bic.w	r3, r3, #1
 800c7ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c7d0:	f7fe ffa6 	bl	800b720 <HAL_GetTick>
 800c7d4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c7d6:	e008      	b.n	800c7ea <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c7d8:	f7fe ffa2 	bl	800b720 <HAL_GetTick>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	d901      	bls.n	800c7ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c7e6:	2303      	movs	r3, #3
 800c7e8:	e378      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c7ea:	4b20      	ldr	r3, [pc, #128]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f003 0302 	and.w	r3, r3, #2
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1f0      	bne.n	800c7d8 <HAL_RCC_OscConfig+0x1e0>
 800c7f6:	e000      	b.n	800c7fa <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c7f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f003 0301 	and.w	r3, r3, #1
 800c802:	2b00      	cmp	r3, #0
 800c804:	d073      	beq.n	800c8ee <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c806:	6a3b      	ldr	r3, [r7, #32]
 800c808:	2b08      	cmp	r3, #8
 800c80a:	d005      	beq.n	800c818 <HAL_RCC_OscConfig+0x220>
 800c80c:	6a3b      	ldr	r3, [r7, #32]
 800c80e:	2b0c      	cmp	r3, #12
 800c810:	d10e      	bne.n	800c830 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	2b03      	cmp	r3, #3
 800c816:	d10b      	bne.n	800c830 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c818:	4b14      	ldr	r3, [pc, #80]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c820:	2b00      	cmp	r3, #0
 800c822:	d063      	beq.n	800c8ec <HAL_RCC_OscConfig+0x2f4>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d15f      	bne.n	800c8ec <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800c82c:	2301      	movs	r3, #1
 800c82e:	e355      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c838:	d106      	bne.n	800c848 <HAL_RCC_OscConfig+0x250>
 800c83a:	4b0c      	ldr	r3, [pc, #48]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a0b      	ldr	r2, [pc, #44]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c844:	6013      	str	r3, [r2, #0]
 800c846:	e025      	b.n	800c894 <HAL_RCC_OscConfig+0x29c>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c850:	d114      	bne.n	800c87c <HAL_RCC_OscConfig+0x284>
 800c852:	4b06      	ldr	r3, [pc, #24]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a05      	ldr	r2, [pc, #20]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c85c:	6013      	str	r3, [r2, #0]
 800c85e:	4b03      	ldr	r3, [pc, #12]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4a02      	ldr	r2, [pc, #8]	; (800c86c <HAL_RCC_OscConfig+0x274>)
 800c864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c868:	6013      	str	r3, [r2, #0]
 800c86a:	e013      	b.n	800c894 <HAL_RCC_OscConfig+0x29c>
 800c86c:	40021000 	.word	0x40021000
 800c870:	0801c968 	.word	0x0801c968
 800c874:	20000094 	.word	0x20000094
 800c878:	20000098 	.word	0x20000098
 800c87c:	4b8f      	ldr	r3, [pc, #572]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a8e      	ldr	r2, [pc, #568]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c886:	6013      	str	r3, [r2, #0]
 800c888:	4b8c      	ldr	r3, [pc, #560]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a8b      	ldr	r2, [pc, #556]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c88e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d013      	beq.n	800c8c4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c89c:	f7fe ff40 	bl	800b720 <HAL_GetTick>
 800c8a0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c8a2:	e008      	b.n	800c8b6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c8a4:	f7fe ff3c 	bl	800b720 <HAL_GetTick>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	2b64      	cmp	r3, #100	; 0x64
 800c8b0:	d901      	bls.n	800c8b6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800c8b2:	2303      	movs	r3, #3
 800c8b4:	e312      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c8b6:	4b81      	ldr	r3, [pc, #516]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d0f0      	beq.n	800c8a4 <HAL_RCC_OscConfig+0x2ac>
 800c8c2:	e014      	b.n	800c8ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8c4:	f7fe ff2c 	bl	800b720 <HAL_GetTick>
 800c8c8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c8ca:	e008      	b.n	800c8de <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c8cc:	f7fe ff28 	bl	800b720 <HAL_GetTick>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	1ad3      	subs	r3, r2, r3
 800c8d6:	2b64      	cmp	r3, #100	; 0x64
 800c8d8:	d901      	bls.n	800c8de <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800c8da:	2303      	movs	r3, #3
 800c8dc:	e2fe      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c8de:	4b77      	ldr	r3, [pc, #476]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1f0      	bne.n	800c8cc <HAL_RCC_OscConfig+0x2d4>
 800c8ea:	e000      	b.n	800c8ee <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c8ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f003 0302 	and.w	r3, r3, #2
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d060      	beq.n	800c9bc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c8fa:	6a3b      	ldr	r3, [r7, #32]
 800c8fc:	2b04      	cmp	r3, #4
 800c8fe:	d005      	beq.n	800c90c <HAL_RCC_OscConfig+0x314>
 800c900:	6a3b      	ldr	r3, [r7, #32]
 800c902:	2b0c      	cmp	r3, #12
 800c904:	d119      	bne.n	800c93a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	2b02      	cmp	r3, #2
 800c90a:	d116      	bne.n	800c93a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c90c:	4b6b      	ldr	r3, [pc, #428]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c914:	2b00      	cmp	r3, #0
 800c916:	d005      	beq.n	800c924 <HAL_RCC_OscConfig+0x32c>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	68db      	ldr	r3, [r3, #12]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800c920:	2301      	movs	r3, #1
 800c922:	e2db      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c924:	4b65      	ldr	r3, [pc, #404]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	061b      	lsls	r3, r3, #24
 800c932:	4962      	ldr	r1, [pc, #392]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c934:	4313      	orrs	r3, r2
 800c936:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c938:	e040      	b.n	800c9bc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d023      	beq.n	800c98a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c942:	4b5e      	ldr	r3, [pc, #376]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a5d      	ldr	r2, [pc, #372]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c94c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c94e:	f7fe fee7 	bl	800b720 <HAL_GetTick>
 800c952:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c954:	e008      	b.n	800c968 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c956:	f7fe fee3 	bl	800b720 <HAL_GetTick>
 800c95a:	4602      	mov	r2, r0
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	2b02      	cmp	r3, #2
 800c962:	d901      	bls.n	800c968 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800c964:	2303      	movs	r3, #3
 800c966:	e2b9      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c968:	4b54      	ldr	r3, [pc, #336]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c970:	2b00      	cmp	r3, #0
 800c972:	d0f0      	beq.n	800c956 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c974:	4b51      	ldr	r3, [pc, #324]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	061b      	lsls	r3, r3, #24
 800c982:	494e      	ldr	r1, [pc, #312]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c984:	4313      	orrs	r3, r2
 800c986:	604b      	str	r3, [r1, #4]
 800c988:	e018      	b.n	800c9bc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c98a:	4b4c      	ldr	r3, [pc, #304]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a4b      	ldr	r2, [pc, #300]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c996:	f7fe fec3 	bl	800b720 <HAL_GetTick>
 800c99a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c99c:	e008      	b.n	800c9b0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c99e:	f7fe febf 	bl	800b720 <HAL_GetTick>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	1ad3      	subs	r3, r2, r3
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	d901      	bls.n	800c9b0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800c9ac:	2303      	movs	r3, #3
 800c9ae:	e295      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c9b0:	4b42      	ldr	r3, [pc, #264]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1f0      	bne.n	800c99e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f003 0308 	and.w	r3, r3, #8
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f000 8082 	beq.w	800cace <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	695b      	ldr	r3, [r3, #20]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d05f      	beq.n	800ca92 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800c9d2:	4b3a      	ldr	r3, [pc, #232]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800c9d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9d8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	699a      	ldr	r2, [r3, #24]
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	f003 0310 	and.w	r3, r3, #16
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d037      	beq.n	800ca58 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	f003 0302 	and.w	r3, r3, #2
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d006      	beq.n	800ca00 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d101      	bne.n	800ca00 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e26d      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	f003 0301 	and.w	r3, r3, #1
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d01b      	beq.n	800ca42 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800ca0a:	4b2c      	ldr	r3, [pc, #176]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800ca0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca10:	4a2a      	ldr	r2, [pc, #168]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800ca12:	f023 0301 	bic.w	r3, r3, #1
 800ca16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ca1a:	f7fe fe81 	bl	800b720 <HAL_GetTick>
 800ca1e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ca20:	e008      	b.n	800ca34 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ca22:	f7fe fe7d 	bl	800b720 <HAL_GetTick>
 800ca26:	4602      	mov	r2, r0
 800ca28:	69bb      	ldr	r3, [r7, #24]
 800ca2a:	1ad3      	subs	r3, r2, r3
 800ca2c:	2b11      	cmp	r3, #17
 800ca2e:	d901      	bls.n	800ca34 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800ca30:	2303      	movs	r3, #3
 800ca32:	e253      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ca34:	4b21      	ldr	r3, [pc, #132]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800ca36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca3a:	f003 0302 	and.w	r3, r3, #2
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1ef      	bne.n	800ca22 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800ca42:	4b1e      	ldr	r3, [pc, #120]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800ca44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca48:	f023 0210 	bic.w	r2, r3, #16
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	699b      	ldr	r3, [r3, #24]
 800ca50:	491a      	ldr	r1, [pc, #104]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800ca52:	4313      	orrs	r3, r2
 800ca54:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ca58:	4b18      	ldr	r3, [pc, #96]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800ca5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca5e:	4a17      	ldr	r2, [pc, #92]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800ca60:	f043 0301 	orr.w	r3, r3, #1
 800ca64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca68:	f7fe fe5a 	bl	800b720 <HAL_GetTick>
 800ca6c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ca6e:	e008      	b.n	800ca82 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ca70:	f7fe fe56 	bl	800b720 <HAL_GetTick>
 800ca74:	4602      	mov	r2, r0
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	1ad3      	subs	r3, r2, r3
 800ca7a:	2b11      	cmp	r3, #17
 800ca7c:	d901      	bls.n	800ca82 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800ca7e:	2303      	movs	r3, #3
 800ca80:	e22c      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ca82:	4b0e      	ldr	r3, [pc, #56]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800ca84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca88:	f003 0302 	and.w	r3, r3, #2
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d0ef      	beq.n	800ca70 <HAL_RCC_OscConfig+0x478>
 800ca90:	e01d      	b.n	800cace <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ca92:	4b0a      	ldr	r3, [pc, #40]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800ca94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca98:	4a08      	ldr	r2, [pc, #32]	; (800cabc <HAL_RCC_OscConfig+0x4c4>)
 800ca9a:	f023 0301 	bic.w	r3, r3, #1
 800ca9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800caa2:	f7fe fe3d 	bl	800b720 <HAL_GetTick>
 800caa6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800caa8:	e00a      	b.n	800cac0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800caaa:	f7fe fe39 	bl	800b720 <HAL_GetTick>
 800caae:	4602      	mov	r2, r0
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	1ad3      	subs	r3, r2, r3
 800cab4:	2b11      	cmp	r3, #17
 800cab6:	d903      	bls.n	800cac0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800cab8:	2303      	movs	r3, #3
 800caba:	e20f      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
 800cabc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cac0:	4b83      	ldr	r3, [pc, #524]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cac6:	f003 0302 	and.w	r3, r3, #2
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d1ed      	bne.n	800caaa <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f003 0304 	and.w	r3, r3, #4
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	f000 80bd 	beq.w	800cc56 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cadc:	2300      	movs	r3, #0
 800cade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800cae2:	4b7b      	ldr	r3, [pc, #492]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800caea:	2b00      	cmp	r3, #0
 800caec:	d10e      	bne.n	800cb0c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800caee:	4b78      	ldr	r3, [pc, #480]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800caf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caf2:	4a77      	ldr	r2, [pc, #476]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800caf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800caf8:	6593      	str	r3, [r2, #88]	; 0x58
 800cafa:	4b75      	ldr	r3, [pc, #468]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cafc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cafe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb02:	60fb      	str	r3, [r7, #12]
 800cb04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cb06:	2301      	movs	r3, #1
 800cb08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cb0c:	4b71      	ldr	r3, [pc, #452]	; (800ccd4 <HAL_RCC_OscConfig+0x6dc>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d118      	bne.n	800cb4a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cb18:	4b6e      	ldr	r3, [pc, #440]	; (800ccd4 <HAL_RCC_OscConfig+0x6dc>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a6d      	ldr	r2, [pc, #436]	; (800ccd4 <HAL_RCC_OscConfig+0x6dc>)
 800cb1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cb24:	f7fe fdfc 	bl	800b720 <HAL_GetTick>
 800cb28:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cb2a:	e008      	b.n	800cb3e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cb2c:	f7fe fdf8 	bl	800b720 <HAL_GetTick>
 800cb30:	4602      	mov	r2, r0
 800cb32:	69bb      	ldr	r3, [r7, #24]
 800cb34:	1ad3      	subs	r3, r2, r3
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d901      	bls.n	800cb3e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	e1ce      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cb3e:	4b65      	ldr	r3, [pc, #404]	; (800ccd4 <HAL_RCC_OscConfig+0x6dc>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d0f0      	beq.n	800cb2c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	f003 0301 	and.w	r3, r3, #1
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d02c      	beq.n	800cbb0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800cb56:	4b5e      	ldr	r3, [pc, #376]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cb58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb5c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb68:	4959      	ldr	r1, [pc, #356]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	f003 0304 	and.w	r3, r3, #4
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d010      	beq.n	800cb9e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800cb7c:	4b54      	ldr	r3, [pc, #336]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cb7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb82:	4a53      	ldr	r2, [pc, #332]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cb84:	f043 0304 	orr.w	r3, r3, #4
 800cb88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cb8c:	4b50      	ldr	r3, [pc, #320]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cb8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb92:	4a4f      	ldr	r2, [pc, #316]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cb94:	f043 0301 	orr.w	r3, r3, #1
 800cb98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cb9c:	e018      	b.n	800cbd0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cb9e:	4b4c      	ldr	r3, [pc, #304]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cba4:	4a4a      	ldr	r2, [pc, #296]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cba6:	f043 0301 	orr.w	r3, r3, #1
 800cbaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cbae:	e00f      	b.n	800cbd0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cbb0:	4b47      	ldr	r3, [pc, #284]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cbb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbb6:	4a46      	ldr	r2, [pc, #280]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cbb8:	f023 0301 	bic.w	r3, r3, #1
 800cbbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800cbc0:	4b43      	ldr	r3, [pc, #268]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cbc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbc6:	4a42      	ldr	r2, [pc, #264]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cbc8:	f023 0304 	bic.w	r3, r3, #4
 800cbcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d016      	beq.n	800cc06 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbd8:	f7fe fda2 	bl	800b720 <HAL_GetTick>
 800cbdc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cbde:	e00a      	b.n	800cbf6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cbe0:	f7fe fd9e 	bl	800b720 <HAL_GetTick>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	1ad3      	subs	r3, r2, r3
 800cbea:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d901      	bls.n	800cbf6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800cbf2:	2303      	movs	r3, #3
 800cbf4:	e172      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cbf6:	4b36      	ldr	r3, [pc, #216]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cbf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbfc:	f003 0302 	and.w	r3, r3, #2
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d0ed      	beq.n	800cbe0 <HAL_RCC_OscConfig+0x5e8>
 800cc04:	e01d      	b.n	800cc42 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc06:	f7fe fd8b 	bl	800b720 <HAL_GetTick>
 800cc0a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cc0c:	e00a      	b.n	800cc24 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc0e:	f7fe fd87 	bl	800b720 <HAL_GetTick>
 800cc12:	4602      	mov	r2, r0
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d901      	bls.n	800cc24 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800cc20:	2303      	movs	r3, #3
 800cc22:	e15b      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cc24:	4b2a      	ldr	r3, [pc, #168]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cc26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc2a:	f003 0302 	and.w	r3, r3, #2
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d1ed      	bne.n	800cc0e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800cc32:	4b27      	ldr	r3, [pc, #156]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cc34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc38:	4a25      	ldr	r2, [pc, #148]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cc3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cc42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d105      	bne.n	800cc56 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cc4a:	4b21      	ldr	r3, [pc, #132]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cc4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc4e:	4a20      	ldr	r2, [pc, #128]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cc50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f003 0320 	and.w	r3, r3, #32
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d041      	beq.n	800cce6 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d01c      	beq.n	800cca4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cc6a:	4b19      	ldr	r3, [pc, #100]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cc6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cc70:	4a17      	ldr	r2, [pc, #92]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cc72:	f043 0301 	orr.w	r3, r3, #1
 800cc76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc7a:	f7fe fd51 	bl	800b720 <HAL_GetTick>
 800cc7e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cc80:	e008      	b.n	800cc94 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cc82:	f7fe fd4d 	bl	800b720 <HAL_GetTick>
 800cc86:	4602      	mov	r2, r0
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	1ad3      	subs	r3, r2, r3
 800cc8c:	2b02      	cmp	r3, #2
 800cc8e:	d901      	bls.n	800cc94 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800cc90:	2303      	movs	r3, #3
 800cc92:	e123      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cc94:	4b0e      	ldr	r3, [pc, #56]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cc96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cc9a:	f003 0302 	and.w	r3, r3, #2
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d0ef      	beq.n	800cc82 <HAL_RCC_OscConfig+0x68a>
 800cca2:	e020      	b.n	800cce6 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cca4:	4b0a      	ldr	r3, [pc, #40]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800cca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ccaa:	4a09      	ldr	r2, [pc, #36]	; (800ccd0 <HAL_RCC_OscConfig+0x6d8>)
 800ccac:	f023 0301 	bic.w	r3, r3, #1
 800ccb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccb4:	f7fe fd34 	bl	800b720 <HAL_GetTick>
 800ccb8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ccba:	e00d      	b.n	800ccd8 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ccbc:	f7fe fd30 	bl	800b720 <HAL_GetTick>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	1ad3      	subs	r3, r2, r3
 800ccc6:	2b02      	cmp	r3, #2
 800ccc8:	d906      	bls.n	800ccd8 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800ccca:	2303      	movs	r3, #3
 800cccc:	e106      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
 800ccce:	bf00      	nop
 800ccd0:	40021000 	.word	0x40021000
 800ccd4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ccd8:	4b82      	ldr	r3, [pc, #520]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ccda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ccde:	f003 0302 	and.w	r3, r3, #2
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d1ea      	bne.n	800ccbc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f000 80f5 	beq.w	800ceda <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf4:	2b02      	cmp	r3, #2
 800ccf6:	f040 80cb 	bne.w	800ce90 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ccfa:	4b7a      	ldr	r3, [pc, #488]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ccfc:	68db      	ldr	r3, [r3, #12]
 800ccfe:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	f003 0203 	and.w	r2, r3, #3
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d12c      	bne.n	800cd68 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d123      	bne.n	800cd68 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d11b      	bne.n	800cd68 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cd30:	69fb      	ldr	r3, [r7, #28]
 800cd32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d113      	bne.n	800cd68 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd4a:	085b      	lsrs	r3, r3, #1
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d109      	bne.n	800cd68 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd5e:	085b      	lsrs	r3, r3, #1
 800cd60:	3b01      	subs	r3, #1
 800cd62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d06d      	beq.n	800ce44 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cd68:	6a3b      	ldr	r3, [r7, #32]
 800cd6a:	2b0c      	cmp	r3, #12
 800cd6c:	d068      	beq.n	800ce40 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800cd6e:	4b5d      	ldr	r3, [pc, #372]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d105      	bne.n	800cd86 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800cd7a:	4b5a      	ldr	r3, [pc, #360]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d001      	beq.n	800cd8a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800cd86:	2301      	movs	r3, #1
 800cd88:	e0a8      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800cd8a:	4b56      	ldr	r3, [pc, #344]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a55      	ldr	r2, [pc, #340]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800cd90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cd96:	f7fe fcc3 	bl	800b720 <HAL_GetTick>
 800cd9a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cd9c:	e008      	b.n	800cdb0 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd9e:	f7fe fcbf 	bl	800b720 <HAL_GetTick>
 800cda2:	4602      	mov	r2, r0
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	d901      	bls.n	800cdb0 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e095      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cdb0:	4b4c      	ldr	r3, [pc, #304]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1f0      	bne.n	800cd9e <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cdbc:	4b49      	ldr	r3, [pc, #292]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800cdbe:	68da      	ldr	r2, [r3, #12]
 800cdc0:	4b49      	ldr	r3, [pc, #292]	; (800cee8 <HAL_RCC_OscConfig+0x8f0>)
 800cdc2:	4013      	ands	r3, r2
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cdcc:	3a01      	subs	r2, #1
 800cdce:	0112      	lsls	r2, r2, #4
 800cdd0:	4311      	orrs	r1, r2
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cdd6:	0212      	lsls	r2, r2, #8
 800cdd8:	4311      	orrs	r1, r2
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800cdde:	0852      	lsrs	r2, r2, #1
 800cde0:	3a01      	subs	r2, #1
 800cde2:	0552      	lsls	r2, r2, #21
 800cde4:	4311      	orrs	r1, r2
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800cdea:	0852      	lsrs	r2, r2, #1
 800cdec:	3a01      	subs	r2, #1
 800cdee:	0652      	lsls	r2, r2, #25
 800cdf0:	4311      	orrs	r1, r2
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cdf6:	06d2      	lsls	r2, r2, #27
 800cdf8:	430a      	orrs	r2, r1
 800cdfa:	493a      	ldr	r1, [pc, #232]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ce00:	4b38      	ldr	r3, [pc, #224]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a37      	ldr	r2, [pc, #220]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ce06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ce0c:	4b35      	ldr	r3, [pc, #212]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	4a34      	ldr	r2, [pc, #208]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ce12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ce18:	f7fe fc82 	bl	800b720 <HAL_GetTick>
 800ce1c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce1e:	e008      	b.n	800ce32 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce20:	f7fe fc7e 	bl	800b720 <HAL_GetTick>
 800ce24:	4602      	mov	r2, r0
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	1ad3      	subs	r3, r2, r3
 800ce2a:	2b02      	cmp	r3, #2
 800ce2c:	d901      	bls.n	800ce32 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800ce2e:	2303      	movs	r3, #3
 800ce30:	e054      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce32:	4b2c      	ldr	r3, [pc, #176]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d0f0      	beq.n	800ce20 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ce3e:	e04c      	b.n	800ceda <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ce40:	2301      	movs	r3, #1
 800ce42:	e04b      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce44:	4b27      	ldr	r3, [pc, #156]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d144      	bne.n	800ceda <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ce50:	4b24      	ldr	r3, [pc, #144]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a23      	ldr	r2, [pc, #140]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ce56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ce5c:	4b21      	ldr	r3, [pc, #132]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	4a20      	ldr	r2, [pc, #128]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ce62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ce68:	f7fe fc5a 	bl	800b720 <HAL_GetTick>
 800ce6c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce6e:	e008      	b.n	800ce82 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce70:	f7fe fc56 	bl	800b720 <HAL_GetTick>
 800ce74:	4602      	mov	r2, r0
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	2b02      	cmp	r3, #2
 800ce7c:	d901      	bls.n	800ce82 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	e02c      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce82:	4b18      	ldr	r3, [pc, #96]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d0f0      	beq.n	800ce70 <HAL_RCC_OscConfig+0x878>
 800ce8e:	e024      	b.n	800ceda <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ce90:	6a3b      	ldr	r3, [r7, #32]
 800ce92:	2b0c      	cmp	r3, #12
 800ce94:	d01f      	beq.n	800ced6 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce96:	4b13      	ldr	r3, [pc, #76]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	4a12      	ldr	r2, [pc, #72]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ce9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cea2:	f7fe fc3d 	bl	800b720 <HAL_GetTick>
 800cea6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cea8:	e008      	b.n	800cebc <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ceaa:	f7fe fc39 	bl	800b720 <HAL_GetTick>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	69bb      	ldr	r3, [r7, #24]
 800ceb2:	1ad3      	subs	r3, r2, r3
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d901      	bls.n	800cebc <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	e00f      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cebc:	4b09      	ldr	r3, [pc, #36]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d1f0      	bne.n	800ceaa <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800cec8:	4b06      	ldr	r3, [pc, #24]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800ceca:	68da      	ldr	r2, [r3, #12]
 800cecc:	4905      	ldr	r1, [pc, #20]	; (800cee4 <HAL_RCC_OscConfig+0x8ec>)
 800cece:	4b07      	ldr	r3, [pc, #28]	; (800ceec <HAL_RCC_OscConfig+0x8f4>)
 800ced0:	4013      	ands	r3, r2
 800ced2:	60cb      	str	r3, [r1, #12]
 800ced4:	e001      	b.n	800ceda <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ced6:	2301      	movs	r3, #1
 800ced8:	e000      	b.n	800cedc <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3728      	adds	r7, #40	; 0x28
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	40021000 	.word	0x40021000
 800cee8:	019d800c 	.word	0x019d800c
 800ceec:	feeefffc 	.word	0xfeeefffc

0800cef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b086      	sub	sp, #24
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800cefa:	2300      	movs	r3, #0
 800cefc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d101      	bne.n	800cf08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	e11d      	b.n	800d144 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cf08:	4b90      	ldr	r3, [pc, #576]	; (800d14c <HAL_RCC_ClockConfig+0x25c>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f003 030f 	and.w	r3, r3, #15
 800cf10:	683a      	ldr	r2, [r7, #0]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d910      	bls.n	800cf38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf16:	4b8d      	ldr	r3, [pc, #564]	; (800d14c <HAL_RCC_ClockConfig+0x25c>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f023 020f 	bic.w	r2, r3, #15
 800cf1e:	498b      	ldr	r1, [pc, #556]	; (800d14c <HAL_RCC_ClockConfig+0x25c>)
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf26:	4b89      	ldr	r3, [pc, #548]	; (800d14c <HAL_RCC_ClockConfig+0x25c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f003 030f 	and.w	r3, r3, #15
 800cf2e:	683a      	ldr	r2, [r7, #0]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d001      	beq.n	800cf38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cf34:	2301      	movs	r3, #1
 800cf36:	e105      	b.n	800d144 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f003 0302 	and.w	r3, r3, #2
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d010      	beq.n	800cf66 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	689a      	ldr	r2, [r3, #8]
 800cf48:	4b81      	ldr	r3, [pc, #516]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d908      	bls.n	800cf66 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cf54:	4b7e      	ldr	r3, [pc, #504]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	497b      	ldr	r1, [pc, #492]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800cf62:	4313      	orrs	r3, r2
 800cf64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d079      	beq.n	800d066 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	2b03      	cmp	r3, #3
 800cf78:	d11e      	bne.n	800cfb8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf7a:	4b75      	ldr	r3, [pc, #468]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d101      	bne.n	800cf8a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	e0dc      	b.n	800d144 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800cf8a:	f000 fa3b 	bl	800d404 <RCC_GetSysClockFreqFromPLLSource>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	4a70      	ldr	r2, [pc, #448]	; (800d154 <HAL_RCC_ClockConfig+0x264>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d946      	bls.n	800d024 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800cf96:	4b6e      	ldr	r3, [pc, #440]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800cf98:	689b      	ldr	r3, [r3, #8]
 800cf9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d140      	bne.n	800d024 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cfa2:	4b6b      	ldr	r3, [pc, #428]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cfaa:	4a69      	ldr	r2, [pc, #420]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800cfac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800cfb2:	2380      	movs	r3, #128	; 0x80
 800cfb4:	617b      	str	r3, [r7, #20]
 800cfb6:	e035      	b.n	800d024 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	d107      	bne.n	800cfd0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cfc0:	4b63      	ldr	r3, [pc, #396]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d115      	bne.n	800cff8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e0b9      	b.n	800d144 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d107      	bne.n	800cfe8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cfd8:	4b5d      	ldr	r3, [pc, #372]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f003 0302 	and.w	r3, r3, #2
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d109      	bne.n	800cff8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e0ad      	b.n	800d144 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cfe8:	4b59      	ldr	r3, [pc, #356]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d101      	bne.n	800cff8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800cff4:	2301      	movs	r3, #1
 800cff6:	e0a5      	b.n	800d144 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800cff8:	f000 f8b4 	bl	800d164 <HAL_RCC_GetSysClockFreq>
 800cffc:	4603      	mov	r3, r0
 800cffe:	4a55      	ldr	r2, [pc, #340]	; (800d154 <HAL_RCC_ClockConfig+0x264>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d90f      	bls.n	800d024 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800d004:	4b52      	ldr	r3, [pc, #328]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d109      	bne.n	800d024 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d010:	4b4f      	ldr	r3, [pc, #316]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d018:	4a4d      	ldr	r2, [pc, #308]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d01a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d01e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d020:	2380      	movs	r3, #128	; 0x80
 800d022:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d024:	4b4a      	ldr	r3, [pc, #296]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	f023 0203 	bic.w	r2, r3, #3
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	4947      	ldr	r1, [pc, #284]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d032:	4313      	orrs	r3, r2
 800d034:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d036:	f7fe fb73 	bl	800b720 <HAL_GetTick>
 800d03a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d03c:	e00a      	b.n	800d054 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d03e:	f7fe fb6f 	bl	800b720 <HAL_GetTick>
 800d042:	4602      	mov	r2, r0
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	1ad3      	subs	r3, r2, r3
 800d048:	f241 3288 	movw	r2, #5000	; 0x1388
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d901      	bls.n	800d054 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800d050:	2303      	movs	r3, #3
 800d052:	e077      	b.n	800d144 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d054:	4b3e      	ldr	r3, [pc, #248]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	f003 020c 	and.w	r2, r3, #12
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	429a      	cmp	r2, r3
 800d064:	d1eb      	bne.n	800d03e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	2b80      	cmp	r3, #128	; 0x80
 800d06a:	d105      	bne.n	800d078 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d06c:	4b38      	ldr	r3, [pc, #224]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	4a37      	ldr	r2, [pc, #220]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d076:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f003 0302 	and.w	r3, r3, #2
 800d080:	2b00      	cmp	r3, #0
 800d082:	d010      	beq.n	800d0a6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	689a      	ldr	r2, [r3, #8]
 800d088:	4b31      	ldr	r3, [pc, #196]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d090:	429a      	cmp	r2, r3
 800d092:	d208      	bcs.n	800d0a6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d094:	4b2e      	ldr	r3, [pc, #184]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d096:	689b      	ldr	r3, [r3, #8]
 800d098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	689b      	ldr	r3, [r3, #8]
 800d0a0:	492b      	ldr	r1, [pc, #172]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d0a6:	4b29      	ldr	r3, [pc, #164]	; (800d14c <HAL_RCC_ClockConfig+0x25c>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f003 030f 	and.w	r3, r3, #15
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d210      	bcs.n	800d0d6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d0b4:	4b25      	ldr	r3, [pc, #148]	; (800d14c <HAL_RCC_ClockConfig+0x25c>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f023 020f 	bic.w	r2, r3, #15
 800d0bc:	4923      	ldr	r1, [pc, #140]	; (800d14c <HAL_RCC_ClockConfig+0x25c>)
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d0c4:	4b21      	ldr	r3, [pc, #132]	; (800d14c <HAL_RCC_ClockConfig+0x25c>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f003 030f 	and.w	r3, r3, #15
 800d0cc:	683a      	ldr	r2, [r7, #0]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d001      	beq.n	800d0d6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e036      	b.n	800d144 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f003 0304 	and.w	r3, r3, #4
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d008      	beq.n	800d0f4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d0e2:	4b1b      	ldr	r3, [pc, #108]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d0e4:	689b      	ldr	r3, [r3, #8]
 800d0e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	68db      	ldr	r3, [r3, #12]
 800d0ee:	4918      	ldr	r1, [pc, #96]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f003 0308 	and.w	r3, r3, #8
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d009      	beq.n	800d114 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d100:	4b13      	ldr	r3, [pc, #76]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	00db      	lsls	r3, r3, #3
 800d10e:	4910      	ldr	r1, [pc, #64]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d110:	4313      	orrs	r3, r2
 800d112:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d114:	f000 f826 	bl	800d164 <HAL_RCC_GetSysClockFreq>
 800d118:	4602      	mov	r2, r0
 800d11a:	4b0d      	ldr	r3, [pc, #52]	; (800d150 <HAL_RCC_ClockConfig+0x260>)
 800d11c:	689b      	ldr	r3, [r3, #8]
 800d11e:	091b      	lsrs	r3, r3, #4
 800d120:	f003 030f 	and.w	r3, r3, #15
 800d124:	490c      	ldr	r1, [pc, #48]	; (800d158 <HAL_RCC_ClockConfig+0x268>)
 800d126:	5ccb      	ldrb	r3, [r1, r3]
 800d128:	f003 031f 	and.w	r3, r3, #31
 800d12c:	fa22 f303 	lsr.w	r3, r2, r3
 800d130:	4a0a      	ldr	r2, [pc, #40]	; (800d15c <HAL_RCC_ClockConfig+0x26c>)
 800d132:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d134:	4b0a      	ldr	r3, [pc, #40]	; (800d160 <HAL_RCC_ClockConfig+0x270>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4618      	mov	r0, r3
 800d13a:	f7fd fed9 	bl	800aef0 <HAL_InitTick>
 800d13e:	4603      	mov	r3, r0
 800d140:	73fb      	strb	r3, [r7, #15]

  return status;
 800d142:	7bfb      	ldrb	r3, [r7, #15]
}
 800d144:	4618      	mov	r0, r3
 800d146:	3718      	adds	r7, #24
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	40022000 	.word	0x40022000
 800d150:	40021000 	.word	0x40021000
 800d154:	04c4b400 	.word	0x04c4b400
 800d158:	0801c968 	.word	0x0801c968
 800d15c:	20000094 	.word	0x20000094
 800d160:	20000098 	.word	0x20000098

0800d164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d164:	b480      	push	{r7}
 800d166:	b089      	sub	sp, #36	; 0x24
 800d168:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800d16a:	2300      	movs	r3, #0
 800d16c:	61fb      	str	r3, [r7, #28]
 800d16e:	2300      	movs	r3, #0
 800d170:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d172:	4b3e      	ldr	r3, [pc, #248]	; (800d26c <HAL_RCC_GetSysClockFreq+0x108>)
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	f003 030c 	and.w	r3, r3, #12
 800d17a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d17c:	4b3b      	ldr	r3, [pc, #236]	; (800d26c <HAL_RCC_GetSysClockFreq+0x108>)
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	f003 0303 	and.w	r3, r3, #3
 800d184:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d005      	beq.n	800d198 <HAL_RCC_GetSysClockFreq+0x34>
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	2b0c      	cmp	r3, #12
 800d190:	d121      	bne.n	800d1d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d11e      	bne.n	800d1d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d198:	4b34      	ldr	r3, [pc, #208]	; (800d26c <HAL_RCC_GetSysClockFreq+0x108>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f003 0308 	and.w	r3, r3, #8
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d107      	bne.n	800d1b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d1a4:	4b31      	ldr	r3, [pc, #196]	; (800d26c <HAL_RCC_GetSysClockFreq+0x108>)
 800d1a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1aa:	0a1b      	lsrs	r3, r3, #8
 800d1ac:	f003 030f 	and.w	r3, r3, #15
 800d1b0:	61fb      	str	r3, [r7, #28]
 800d1b2:	e005      	b.n	800d1c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d1b4:	4b2d      	ldr	r3, [pc, #180]	; (800d26c <HAL_RCC_GetSysClockFreq+0x108>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	091b      	lsrs	r3, r3, #4
 800d1ba:	f003 030f 	and.w	r3, r3, #15
 800d1be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d1c0:	4a2b      	ldr	r2, [pc, #172]	; (800d270 <HAL_RCC_GetSysClockFreq+0x10c>)
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10d      	bne.n	800d1ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d1d4:	e00a      	b.n	800d1ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	2b04      	cmp	r3, #4
 800d1da:	d102      	bne.n	800d1e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d1dc:	4b25      	ldr	r3, [pc, #148]	; (800d274 <HAL_RCC_GetSysClockFreq+0x110>)
 800d1de:	61bb      	str	r3, [r7, #24]
 800d1e0:	e004      	b.n	800d1ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	2b08      	cmp	r3, #8
 800d1e6:	d101      	bne.n	800d1ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d1e8:	4b23      	ldr	r3, [pc, #140]	; (800d278 <HAL_RCC_GetSysClockFreq+0x114>)
 800d1ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	2b0c      	cmp	r3, #12
 800d1f0:	d134      	bne.n	800d25c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d1f2:	4b1e      	ldr	r3, [pc, #120]	; (800d26c <HAL_RCC_GetSysClockFreq+0x108>)
 800d1f4:	68db      	ldr	r3, [r3, #12]
 800d1f6:	f003 0303 	and.w	r3, r3, #3
 800d1fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	2b02      	cmp	r3, #2
 800d200:	d003      	beq.n	800d20a <HAL_RCC_GetSysClockFreq+0xa6>
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	2b03      	cmp	r3, #3
 800d206:	d003      	beq.n	800d210 <HAL_RCC_GetSysClockFreq+0xac>
 800d208:	e005      	b.n	800d216 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800d20a:	4b1a      	ldr	r3, [pc, #104]	; (800d274 <HAL_RCC_GetSysClockFreq+0x110>)
 800d20c:	617b      	str	r3, [r7, #20]
      break;
 800d20e:	e005      	b.n	800d21c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800d210:	4b19      	ldr	r3, [pc, #100]	; (800d278 <HAL_RCC_GetSysClockFreq+0x114>)
 800d212:	617b      	str	r3, [r7, #20]
      break;
 800d214:	e002      	b.n	800d21c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	617b      	str	r3, [r7, #20]
      break;
 800d21a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d21c:	4b13      	ldr	r3, [pc, #76]	; (800d26c <HAL_RCC_GetSysClockFreq+0x108>)
 800d21e:	68db      	ldr	r3, [r3, #12]
 800d220:	091b      	lsrs	r3, r3, #4
 800d222:	f003 030f 	and.w	r3, r3, #15
 800d226:	3301      	adds	r3, #1
 800d228:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d22a:	4b10      	ldr	r3, [pc, #64]	; (800d26c <HAL_RCC_GetSysClockFreq+0x108>)
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	0a1b      	lsrs	r3, r3, #8
 800d230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d234:	697a      	ldr	r2, [r7, #20]
 800d236:	fb03 f202 	mul.w	r2, r3, r2
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d240:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d242:	4b0a      	ldr	r3, [pc, #40]	; (800d26c <HAL_RCC_GetSysClockFreq+0x108>)
 800d244:	68db      	ldr	r3, [r3, #12]
 800d246:	0e5b      	lsrs	r3, r3, #25
 800d248:	f003 0303 	and.w	r3, r3, #3
 800d24c:	3301      	adds	r3, #1
 800d24e:	005b      	lsls	r3, r3, #1
 800d250:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800d252:	697a      	ldr	r2, [r7, #20]
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	fbb2 f3f3 	udiv	r3, r2, r3
 800d25a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800d25c:	69bb      	ldr	r3, [r7, #24]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3724      	adds	r7, #36	; 0x24
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	40021000 	.word	0x40021000
 800d270:	0801c980 	.word	0x0801c980
 800d274:	00f42400 	.word	0x00f42400
 800d278:	007a1200 	.word	0x007a1200

0800d27c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d27c:	b480      	push	{r7}
 800d27e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d280:	4b03      	ldr	r3, [pc, #12]	; (800d290 <HAL_RCC_GetHCLKFreq+0x14>)
 800d282:	681b      	ldr	r3, [r3, #0]
}
 800d284:	4618      	mov	r0, r3
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	20000094 	.word	0x20000094

0800d294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d298:	f7ff fff0 	bl	800d27c <HAL_RCC_GetHCLKFreq>
 800d29c:	4602      	mov	r2, r0
 800d29e:	4b06      	ldr	r3, [pc, #24]	; (800d2b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d2a0:	689b      	ldr	r3, [r3, #8]
 800d2a2:	0a1b      	lsrs	r3, r3, #8
 800d2a4:	f003 0307 	and.w	r3, r3, #7
 800d2a8:	4904      	ldr	r1, [pc, #16]	; (800d2bc <HAL_RCC_GetPCLK1Freq+0x28>)
 800d2aa:	5ccb      	ldrb	r3, [r1, r3]
 800d2ac:	f003 031f 	and.w	r3, r3, #31
 800d2b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	40021000 	.word	0x40021000
 800d2bc:	0801c978 	.word	0x0801c978

0800d2c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d2c4:	f7ff ffda 	bl	800d27c <HAL_RCC_GetHCLKFreq>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	4b06      	ldr	r3, [pc, #24]	; (800d2e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	0adb      	lsrs	r3, r3, #11
 800d2d0:	f003 0307 	and.w	r3, r3, #7
 800d2d4:	4904      	ldr	r1, [pc, #16]	; (800d2e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d2d6:	5ccb      	ldrb	r3, [r1, r3]
 800d2d8:	f003 031f 	and.w	r3, r3, #31
 800d2dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	40021000 	.word	0x40021000
 800d2e8:	0801c978 	.word	0x0801c978

0800d2ec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	220f      	movs	r2, #15
 800d2fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800d2fc:	4b12      	ldr	r3, [pc, #72]	; (800d348 <HAL_RCC_GetClockConfig+0x5c>)
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	f003 0203 	and.w	r2, r3, #3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800d308:	4b0f      	ldr	r3, [pc, #60]	; (800d348 <HAL_RCC_GetClockConfig+0x5c>)
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800d314:	4b0c      	ldr	r3, [pc, #48]	; (800d348 <HAL_RCC_GetClockConfig+0x5c>)
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800d320:	4b09      	ldr	r3, [pc, #36]	; (800d348 <HAL_RCC_GetClockConfig+0x5c>)
 800d322:	689b      	ldr	r3, [r3, #8]
 800d324:	08db      	lsrs	r3, r3, #3
 800d326:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800d32e:	4b07      	ldr	r3, [pc, #28]	; (800d34c <HAL_RCC_GetClockConfig+0x60>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f003 020f 	and.w	r2, r3, #15
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	601a      	str	r2, [r3, #0]
}
 800d33a:	bf00      	nop
 800d33c:	370c      	adds	r7, #12
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	40021000 	.word	0x40021000
 800d34c:	40022000 	.word	0x40022000

0800d350 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d358:	2300      	movs	r3, #0
 800d35a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d35c:	4b27      	ldr	r3, [pc, #156]	; (800d3fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d35e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d364:	2b00      	cmp	r3, #0
 800d366:	d003      	beq.n	800d370 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d368:	f7ff f882 	bl	800c470 <HAL_PWREx_GetVoltageRange>
 800d36c:	6178      	str	r0, [r7, #20]
 800d36e:	e014      	b.n	800d39a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d370:	4b22      	ldr	r3, [pc, #136]	; (800d3fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d374:	4a21      	ldr	r2, [pc, #132]	; (800d3fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d37a:	6593      	str	r3, [r2, #88]	; 0x58
 800d37c:	4b1f      	ldr	r3, [pc, #124]	; (800d3fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d37e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d384:	60fb      	str	r3, [r7, #12]
 800d386:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d388:	f7ff f872 	bl	800c470 <HAL_PWREx_GetVoltageRange>
 800d38c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d38e:	4b1b      	ldr	r3, [pc, #108]	; (800d3fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d392:	4a1a      	ldr	r2, [pc, #104]	; (800d3fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d398:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3a0:	d10b      	bne.n	800d3ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2b80      	cmp	r3, #128	; 0x80
 800d3a6:	d913      	bls.n	800d3d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2ba0      	cmp	r3, #160	; 0xa0
 800d3ac:	d902      	bls.n	800d3b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d3ae:	2302      	movs	r3, #2
 800d3b0:	613b      	str	r3, [r7, #16]
 800d3b2:	e00d      	b.n	800d3d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	613b      	str	r3, [r7, #16]
 800d3b8:	e00a      	b.n	800d3d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2b7f      	cmp	r3, #127	; 0x7f
 800d3be:	d902      	bls.n	800d3c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800d3c0:	2302      	movs	r3, #2
 800d3c2:	613b      	str	r3, [r7, #16]
 800d3c4:	e004      	b.n	800d3d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2b70      	cmp	r3, #112	; 0x70
 800d3ca:	d101      	bne.n	800d3d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d3d0:	4b0b      	ldr	r3, [pc, #44]	; (800d400 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f023 020f 	bic.w	r2, r3, #15
 800d3d8:	4909      	ldr	r1, [pc, #36]	; (800d400 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d3e0:	4b07      	ldr	r3, [pc, #28]	; (800d400 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f003 030f 	and.w	r3, r3, #15
 800d3e8:	693a      	ldr	r2, [r7, #16]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d001      	beq.n	800d3f2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e000      	b.n	800d3f4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3718      	adds	r7, #24
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	40021000 	.word	0x40021000
 800d400:	40022000 	.word	0x40022000

0800d404 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d404:	b480      	push	{r7}
 800d406:	b087      	sub	sp, #28
 800d408:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d40a:	4b2d      	ldr	r3, [pc, #180]	; (800d4c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	f003 0303 	and.w	r3, r3, #3
 800d412:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2b03      	cmp	r3, #3
 800d418:	d00b      	beq.n	800d432 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2b03      	cmp	r3, #3
 800d41e:	d825      	bhi.n	800d46c <RCC_GetSysClockFreqFromPLLSource+0x68>
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2b01      	cmp	r3, #1
 800d424:	d008      	beq.n	800d438 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2b02      	cmp	r3, #2
 800d42a:	d11f      	bne.n	800d46c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800d42c:	4b25      	ldr	r3, [pc, #148]	; (800d4c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d42e:	613b      	str	r3, [r7, #16]
    break;
 800d430:	e01f      	b.n	800d472 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800d432:	4b25      	ldr	r3, [pc, #148]	; (800d4c8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800d434:	613b      	str	r3, [r7, #16]
    break;
 800d436:	e01c      	b.n	800d472 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d438:	4b21      	ldr	r3, [pc, #132]	; (800d4c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f003 0308 	and.w	r3, r3, #8
 800d440:	2b00      	cmp	r3, #0
 800d442:	d107      	bne.n	800d454 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d444:	4b1e      	ldr	r3, [pc, #120]	; (800d4c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800d446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d44a:	0a1b      	lsrs	r3, r3, #8
 800d44c:	f003 030f 	and.w	r3, r3, #15
 800d450:	617b      	str	r3, [r7, #20]
 800d452:	e005      	b.n	800d460 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d454:	4b1a      	ldr	r3, [pc, #104]	; (800d4c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	091b      	lsrs	r3, r3, #4
 800d45a:	f003 030f 	and.w	r3, r3, #15
 800d45e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800d460:	4a1a      	ldr	r2, [pc, #104]	; (800d4cc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d468:	613b      	str	r3, [r7, #16]
    break;
 800d46a:	e002      	b.n	800d472 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800d46c:	2300      	movs	r3, #0
 800d46e:	613b      	str	r3, [r7, #16]
    break;
 800d470:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d472:	4b13      	ldr	r3, [pc, #76]	; (800d4c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	091b      	lsrs	r3, r3, #4
 800d478:	f003 030f 	and.w	r3, r3, #15
 800d47c:	3301      	adds	r3, #1
 800d47e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d480:	4b0f      	ldr	r3, [pc, #60]	; (800d4c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	0a1b      	lsrs	r3, r3, #8
 800d486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d48a:	693a      	ldr	r2, [r7, #16]
 800d48c:	fb03 f202 	mul.w	r2, r3, r2
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	fbb2 f3f3 	udiv	r3, r2, r3
 800d496:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d498:	4b09      	ldr	r3, [pc, #36]	; (800d4c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	0e5b      	lsrs	r3, r3, #25
 800d49e:	f003 0303 	and.w	r3, r3, #3
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800d4a8:	693a      	ldr	r2, [r7, #16]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4b0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800d4b2:	683b      	ldr	r3, [r7, #0]
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	371c      	adds	r7, #28
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr
 800d4c0:	40021000 	.word	0x40021000
 800d4c4:	00f42400 	.word	0x00f42400
 800d4c8:	007a1200 	.word	0x007a1200
 800d4cc:	0801c980 	.word	0x0801c980

0800d4d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b086      	sub	sp, #24
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d4d8:	2300      	movs	r3, #0
 800d4da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d4dc:	2300      	movs	r3, #0
 800d4de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d040      	beq.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4f0:	2b80      	cmp	r3, #128	; 0x80
 800d4f2:	d02a      	beq.n	800d54a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d4f4:	2b80      	cmp	r3, #128	; 0x80
 800d4f6:	d825      	bhi.n	800d544 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800d4f8:	2b60      	cmp	r3, #96	; 0x60
 800d4fa:	d026      	beq.n	800d54a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d4fc:	2b60      	cmp	r3, #96	; 0x60
 800d4fe:	d821      	bhi.n	800d544 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800d500:	2b40      	cmp	r3, #64	; 0x40
 800d502:	d006      	beq.n	800d512 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800d504:	2b40      	cmp	r3, #64	; 0x40
 800d506:	d81d      	bhi.n	800d544 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d009      	beq.n	800d520 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800d50c:	2b20      	cmp	r3, #32
 800d50e:	d010      	beq.n	800d532 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800d510:	e018      	b.n	800d544 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d512:	4b89      	ldr	r3, [pc, #548]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d514:	68db      	ldr	r3, [r3, #12]
 800d516:	4a88      	ldr	r2, [pc, #544]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d51c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d51e:	e015      	b.n	800d54c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	3304      	adds	r3, #4
 800d524:	2100      	movs	r1, #0
 800d526:	4618      	mov	r0, r3
 800d528:	f000 fb3e 	bl	800dba8 <RCCEx_PLLSAI1_Config>
 800d52c:	4603      	mov	r3, r0
 800d52e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d530:	e00c      	b.n	800d54c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	3320      	adds	r3, #32
 800d536:	2100      	movs	r1, #0
 800d538:	4618      	mov	r0, r3
 800d53a:	f000 fc29 	bl	800dd90 <RCCEx_PLLSAI2_Config>
 800d53e:	4603      	mov	r3, r0
 800d540:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d542:	e003      	b.n	800d54c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d544:	2301      	movs	r3, #1
 800d546:	74fb      	strb	r3, [r7, #19]
      break;
 800d548:	e000      	b.n	800d54c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800d54a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d54c:	7cfb      	ldrb	r3, [r7, #19]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d10b      	bne.n	800d56a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d552:	4b79      	ldr	r3, [pc, #484]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d554:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d558:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d560:	4975      	ldr	r1, [pc, #468]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d562:	4313      	orrs	r3, r2
 800d564:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800d568:	e001      	b.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d56a:	7cfb      	ldrb	r3, [r7, #19]
 800d56c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d576:	2b00      	cmp	r3, #0
 800d578:	d047      	beq.n	800d60a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d57e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d582:	d030      	beq.n	800d5e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800d584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d588:	d82a      	bhi.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800d58a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d58e:	d02a      	beq.n	800d5e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800d590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d594:	d824      	bhi.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800d596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d59a:	d008      	beq.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0xde>
 800d59c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5a0:	d81e      	bhi.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00a      	beq.n	800d5bc <HAL_RCCEx_PeriphCLKConfig+0xec>
 800d5a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5aa:	d010      	beq.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800d5ac:	e018      	b.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d5ae:	4b62      	ldr	r3, [pc, #392]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	4a61      	ldr	r2, [pc, #388]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d5b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d5b8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d5ba:	e015      	b.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	3304      	adds	r3, #4
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f000 faf0 	bl	800dba8 <RCCEx_PLLSAI1_Config>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d5cc:	e00c      	b.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	3320      	adds	r3, #32
 800d5d2:	2100      	movs	r1, #0
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f000 fbdb 	bl	800dd90 <RCCEx_PLLSAI2_Config>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d5de:	e003      	b.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	74fb      	strb	r3, [r7, #19]
      break;
 800d5e4:	e000      	b.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800d5e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d5e8:	7cfb      	ldrb	r3, [r7, #19]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d10b      	bne.n	800d606 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d5ee:	4b52      	ldr	r3, [pc, #328]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d5f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d5f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5fc:	494e      	ldr	r1, [pc, #312]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d5fe:	4313      	orrs	r3, r2
 800d600:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800d604:	e001      	b.n	800d60a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d606:	7cfb      	ldrb	r3, [r7, #19]
 800d608:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d612:	2b00      	cmp	r3, #0
 800d614:	f000 809f 	beq.w	800d756 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d618:	2300      	movs	r3, #0
 800d61a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d61c:	4b46      	ldr	r3, [pc, #280]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d61e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d624:	2b00      	cmp	r3, #0
 800d626:	d101      	bne.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800d628:	2301      	movs	r3, #1
 800d62a:	e000      	b.n	800d62e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800d62c:	2300      	movs	r3, #0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00d      	beq.n	800d64e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d632:	4b41      	ldr	r3, [pc, #260]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d636:	4a40      	ldr	r2, [pc, #256]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d63c:	6593      	str	r3, [r2, #88]	; 0x58
 800d63e:	4b3e      	ldr	r3, [pc, #248]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d646:	60bb      	str	r3, [r7, #8]
 800d648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d64a:	2301      	movs	r3, #1
 800d64c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d64e:	4b3b      	ldr	r3, [pc, #236]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4a3a      	ldr	r2, [pc, #232]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800d654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d658:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d65a:	f7fe f861 	bl	800b720 <HAL_GetTick>
 800d65e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d660:	e009      	b.n	800d676 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d662:	f7fe f85d 	bl	800b720 <HAL_GetTick>
 800d666:	4602      	mov	r2, r0
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	1ad3      	subs	r3, r2, r3
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	d902      	bls.n	800d676 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800d670:	2303      	movs	r3, #3
 800d672:	74fb      	strb	r3, [r7, #19]
        break;
 800d674:	e005      	b.n	800d682 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d676:	4b31      	ldr	r3, [pc, #196]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d0ef      	beq.n	800d662 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800d682:	7cfb      	ldrb	r3, [r7, #19]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d15b      	bne.n	800d740 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d688:	4b2b      	ldr	r3, [pc, #172]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d68e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d692:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d01f      	beq.n	800d6da <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d6a0:	697a      	ldr	r2, [r7, #20]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d019      	beq.n	800d6da <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d6a6:	4b24      	ldr	r3, [pc, #144]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d6b2:	4b21      	ldr	r3, [pc, #132]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d6b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6b8:	4a1f      	ldr	r2, [pc, #124]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d6ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d6c2:	4b1d      	ldr	r3, [pc, #116]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d6c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6c8:	4a1b      	ldr	r2, [pc, #108]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d6ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d6d2:	4a19      	ldr	r2, [pc, #100]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	f003 0301 	and.w	r3, r3, #1
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d016      	beq.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6e4:	f7fe f81c 	bl	800b720 <HAL_GetTick>
 800d6e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d6ea:	e00b      	b.n	800d704 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d6ec:	f7fe f818 	bl	800b720 <HAL_GetTick>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	1ad3      	subs	r3, r2, r3
 800d6f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d902      	bls.n	800d704 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800d6fe:	2303      	movs	r3, #3
 800d700:	74fb      	strb	r3, [r7, #19]
            break;
 800d702:	e006      	b.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d704:	4b0c      	ldr	r3, [pc, #48]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d70a:	f003 0302 	and.w	r3, r3, #2
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d0ec      	beq.n	800d6ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800d712:	7cfb      	ldrb	r3, [r7, #19]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10c      	bne.n	800d732 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d718:	4b07      	ldr	r3, [pc, #28]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d71a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d71e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d728:	4903      	ldr	r1, [pc, #12]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d72a:	4313      	orrs	r3, r2
 800d72c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d730:	e008      	b.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d732:	7cfb      	ldrb	r3, [r7, #19]
 800d734:	74bb      	strb	r3, [r7, #18]
 800d736:	e005      	b.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800d738:	40021000 	.word	0x40021000
 800d73c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d740:	7cfb      	ldrb	r3, [r7, #19]
 800d742:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d744:	7c7b      	ldrb	r3, [r7, #17]
 800d746:	2b01      	cmp	r3, #1
 800d748:	d105      	bne.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d74a:	4ba0      	ldr	r3, [pc, #640]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d74c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d74e:	4a9f      	ldr	r2, [pc, #636]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d754:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f003 0301 	and.w	r3, r3, #1
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d00a      	beq.n	800d778 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d762:	4b9a      	ldr	r3, [pc, #616]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d768:	f023 0203 	bic.w	r2, r3, #3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d770:	4996      	ldr	r1, [pc, #600]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d772:	4313      	orrs	r3, r2
 800d774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f003 0302 	and.w	r3, r3, #2
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00a      	beq.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d784:	4b91      	ldr	r3, [pc, #580]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d78a:	f023 020c 	bic.w	r2, r3, #12
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d792:	498e      	ldr	r1, [pc, #568]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d794:	4313      	orrs	r3, r2
 800d796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f003 0304 	and.w	r3, r3, #4
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d00a      	beq.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d7a6:	4b89      	ldr	r3, [pc, #548]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d7a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7b4:	4985      	ldr	r1, [pc, #532]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f003 0308 	and.w	r3, r3, #8
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d00a      	beq.n	800d7de <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d7c8:	4b80      	ldr	r3, [pc, #512]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d7ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7d6:	497d      	ldr	r1, [pc, #500]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f003 0310 	and.w	r3, r3, #16
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00a      	beq.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d7ea:	4b78      	ldr	r3, [pc, #480]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7f8:	4974      	ldr	r1, [pc, #464]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f003 0320 	and.w	r3, r3, #32
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00a      	beq.n	800d822 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d80c:	4b6f      	ldr	r3, [pc, #444]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d812:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d81a:	496c      	ldr	r1, [pc, #432]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d81c:	4313      	orrs	r3, r2
 800d81e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00a      	beq.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d82e:	4b67      	ldr	r3, [pc, #412]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d834:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d83c:	4963      	ldr	r1, [pc, #396]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d83e:	4313      	orrs	r3, r2
 800d840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d00a      	beq.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d850:	4b5e      	ldr	r3, [pc, #376]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d856:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d85e:	495b      	ldr	r1, [pc, #364]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d860:	4313      	orrs	r3, r2
 800d862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d00a      	beq.n	800d888 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d872:	4b56      	ldr	r3, [pc, #344]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d878:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d880:	4952      	ldr	r1, [pc, #328]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d882:	4313      	orrs	r3, r2
 800d884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00a      	beq.n	800d8aa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d894:	4b4d      	ldr	r3, [pc, #308]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d89a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8a2:	494a      	ldr	r1, [pc, #296]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d00a      	beq.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d8b6:	4b45      	ldr	r3, [pc, #276]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8c4:	4941      	ldr	r1, [pc, #260]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00a      	beq.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d8d8:	4b3c      	ldr	r3, [pc, #240]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d8de:	f023 0203 	bic.w	r2, r3, #3
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8e6:	4939      	ldr	r1, [pc, #228]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d028      	beq.n	800d94c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d8fa:	4b34      	ldr	r3, [pc, #208]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d900:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d908:	4930      	ldr	r1, [pc, #192]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d90a:	4313      	orrs	r3, r2
 800d90c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d918:	d106      	bne.n	800d928 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d91a:	4b2c      	ldr	r3, [pc, #176]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	4a2b      	ldr	r2, [pc, #172]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d924:	60d3      	str	r3, [r2, #12]
 800d926:	e011      	b.n	800d94c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d92c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d930:	d10c      	bne.n	800d94c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	3304      	adds	r3, #4
 800d936:	2101      	movs	r1, #1
 800d938:	4618      	mov	r0, r3
 800d93a:	f000 f935 	bl	800dba8 <RCCEx_PLLSAI1_Config>
 800d93e:	4603      	mov	r3, r0
 800d940:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800d942:	7cfb      	ldrb	r3, [r7, #19]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d001      	beq.n	800d94c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800d948:	7cfb      	ldrb	r3, [r7, #19]
 800d94a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d954:	2b00      	cmp	r3, #0
 800d956:	d04d      	beq.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d95c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d960:	d108      	bne.n	800d974 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800d962:	4b1a      	ldr	r3, [pc, #104]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d964:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d968:	4a18      	ldr	r2, [pc, #96]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d96a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d96e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800d972:	e012      	b.n	800d99a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800d974:	4b15      	ldr	r3, [pc, #84]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d97a:	4a14      	ldr	r2, [pc, #80]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d97c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d980:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800d984:	4b11      	ldr	r3, [pc, #68]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d98a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d992:	490e      	ldr	r1, [pc, #56]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d994:	4313      	orrs	r3, r2
 800d996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d99e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d9a2:	d106      	bne.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d9a4:	4b09      	ldr	r3, [pc, #36]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9a6:	68db      	ldr	r3, [r3, #12]
 800d9a8:	4a08      	ldr	r2, [pc, #32]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9ae:	60d3      	str	r3, [r2, #12]
 800d9b0:	e020      	b.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d9ba:	d109      	bne.n	800d9d0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d9bc:	4b03      	ldr	r3, [pc, #12]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	4a02      	ldr	r2, [pc, #8]	; (800d9cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d9c6:	60d3      	str	r3, [r2, #12]
 800d9c8:	e014      	b.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800d9ca:	bf00      	nop
 800d9cc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d9d8:	d10c      	bne.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	3304      	adds	r3, #4
 800d9de:	2101      	movs	r1, #1
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f000 f8e1 	bl	800dba8 <RCCEx_PLLSAI1_Config>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d9ea:	7cfb      	ldrb	r3, [r7, #19]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d001      	beq.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800d9f0:	7cfb      	ldrb	r3, [r7, #19]
 800d9f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d028      	beq.n	800da52 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800da00:	4b68      	ldr	r3, [pc, #416]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800da02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da0e:	4965      	ldr	r1, [pc, #404]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800da10:	4313      	orrs	r3, r2
 800da12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800da1e:	d106      	bne.n	800da2e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800da20:	4b60      	ldr	r3, [pc, #384]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	4a5f      	ldr	r2, [pc, #380]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800da26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da2a:	60d3      	str	r3, [r2, #12]
 800da2c:	e011      	b.n	800da52 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800da36:	d10c      	bne.n	800da52 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	3304      	adds	r3, #4
 800da3c:	2101      	movs	r1, #1
 800da3e:	4618      	mov	r0, r3
 800da40:	f000 f8b2 	bl	800dba8 <RCCEx_PLLSAI1_Config>
 800da44:	4603      	mov	r3, r0
 800da46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800da48:	7cfb      	ldrb	r3, [r7, #19]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d001      	beq.n	800da52 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800da4e:	7cfb      	ldrb	r3, [r7, #19]
 800da50:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d01e      	beq.n	800da9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800da5e:	4b51      	ldr	r3, [pc, #324]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800da60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da6e:	494d      	ldr	r1, [pc, #308]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800da70:	4313      	orrs	r3, r2
 800da72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800da80:	d10c      	bne.n	800da9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	3304      	adds	r3, #4
 800da86:	2102      	movs	r1, #2
 800da88:	4618      	mov	r0, r3
 800da8a:	f000 f88d 	bl	800dba8 <RCCEx_PLLSAI1_Config>
 800da8e:	4603      	mov	r3, r0
 800da90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800da92:	7cfb      	ldrb	r3, [r7, #19]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d001      	beq.n	800da9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800da98:	7cfb      	ldrb	r3, [r7, #19]
 800da9a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d00b      	beq.n	800dac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800daa8:	4b3e      	ldr	r3, [pc, #248]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800daaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800daae:	f023 0204 	bic.w	r2, r3, #4
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dab8:	493a      	ldr	r1, [pc, #232]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800daba:	4313      	orrs	r3, r2
 800dabc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00b      	beq.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800dacc:	4b35      	ldr	r3, [pc, #212]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dace:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dad2:	f023 0218 	bic.w	r2, r3, #24
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dadc:	4931      	ldr	r1, [pc, #196]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dade:	4313      	orrs	r3, r2
 800dae0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800daec:	2b00      	cmp	r3, #0
 800daee:	d035      	beq.n	800db5c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800daf0:	4b2c      	ldr	r3, [pc, #176]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4a2b      	ldr	r2, [pc, #172]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800daf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dafa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dafc:	f7fd fe10 	bl	800b720 <HAL_GetTick>
 800db00:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800db02:	e009      	b.n	800db18 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800db04:	f7fd fe0c 	bl	800b720 <HAL_GetTick>
 800db08:	4602      	mov	r2, r0
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	1ad3      	subs	r3, r2, r3
 800db0e:	2b02      	cmp	r3, #2
 800db10:	d902      	bls.n	800db18 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800db12:	2303      	movs	r3, #3
 800db14:	74fb      	strb	r3, [r7, #19]
        break;
 800db16:	e005      	b.n	800db24 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800db18:	4b22      	ldr	r3, [pc, #136]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db20:	2b00      	cmp	r3, #0
 800db22:	d1ef      	bne.n	800db04 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800db24:	7cfb      	ldrb	r3, [r7, #19]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d113      	bne.n	800db52 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800db2a:	4b1e      	ldr	r3, [pc, #120]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800db2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800db30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db3a:	491a      	ldr	r1, [pc, #104]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800db3c:	4313      	orrs	r3, r2
 800db3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	3320      	adds	r3, #32
 800db46:	2102      	movs	r1, #2
 800db48:	4618      	mov	r0, r3
 800db4a:	f000 f921 	bl	800dd90 <RCCEx_PLLSAI2_Config>
 800db4e:	4603      	mov	r3, r0
 800db50:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800db52:	7cfb      	ldrb	r3, [r7, #19]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d001      	beq.n	800db5c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800db58:	7cfb      	ldrb	r3, [r7, #19]
 800db5a:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800db64:	2b00      	cmp	r3, #0
 800db66:	d017      	beq.n	800db98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800db68:	4b0e      	ldr	r3, [pc, #56]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800db6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800db6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db78:	490a      	ldr	r1, [pc, #40]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800db7a:	4313      	orrs	r3, r2
 800db7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db8a:	d105      	bne.n	800db98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800db8c:	4b05      	ldr	r3, [pc, #20]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	4a04      	ldr	r2, [pc, #16]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800db92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800db98:	7cbb      	ldrb	r3, [r7, #18]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3718      	adds	r7, #24
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	40021000 	.word	0x40021000

0800dba8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800dbb6:	4b72      	ldr	r3, [pc, #456]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	f003 0303 	and.w	r3, r3, #3
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d00e      	beq.n	800dbe0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800dbc2:	4b6f      	ldr	r3, [pc, #444]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dbc4:	68db      	ldr	r3, [r3, #12]
 800dbc6:	f003 0203 	and.w	r2, r3, #3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d103      	bne.n	800dbda <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
       ||
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d142      	bne.n	800dc60 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800dbda:	2301      	movs	r3, #1
 800dbdc:	73fb      	strb	r3, [r7, #15]
 800dbde:	e03f      	b.n	800dc60 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	2b03      	cmp	r3, #3
 800dbe6:	d018      	beq.n	800dc1a <RCCEx_PLLSAI1_Config+0x72>
 800dbe8:	2b03      	cmp	r3, #3
 800dbea:	d825      	bhi.n	800dc38 <RCCEx_PLLSAI1_Config+0x90>
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d002      	beq.n	800dbf6 <RCCEx_PLLSAI1_Config+0x4e>
 800dbf0:	2b02      	cmp	r3, #2
 800dbf2:	d009      	beq.n	800dc08 <RCCEx_PLLSAI1_Config+0x60>
 800dbf4:	e020      	b.n	800dc38 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800dbf6:	4b62      	ldr	r3, [pc, #392]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f003 0302 	and.w	r3, r3, #2
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d11d      	bne.n	800dc3e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800dc02:	2301      	movs	r3, #1
 800dc04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dc06:	e01a      	b.n	800dc3e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800dc08:	4b5d      	ldr	r3, [pc, #372]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d116      	bne.n	800dc42 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800dc14:	2301      	movs	r3, #1
 800dc16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dc18:	e013      	b.n	800dc42 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800dc1a:	4b59      	ldr	r3, [pc, #356]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d10f      	bne.n	800dc46 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800dc26:	4b56      	ldr	r3, [pc, #344]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d109      	bne.n	800dc46 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800dc32:	2301      	movs	r3, #1
 800dc34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dc36:	e006      	b.n	800dc46 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	73fb      	strb	r3, [r7, #15]
      break;
 800dc3c:	e004      	b.n	800dc48 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800dc3e:	bf00      	nop
 800dc40:	e002      	b.n	800dc48 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800dc42:	bf00      	nop
 800dc44:	e000      	b.n	800dc48 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800dc46:	bf00      	nop
    }

    if(status == HAL_OK)
 800dc48:	7bfb      	ldrb	r3, [r7, #15]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d108      	bne.n	800dc60 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800dc4e:	4b4c      	ldr	r3, [pc, #304]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	f023 0203 	bic.w	r2, r3, #3
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4949      	ldr	r1, [pc, #292]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dc5c:	4313      	orrs	r3, r2
 800dc5e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800dc60:	7bfb      	ldrb	r3, [r7, #15]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	f040 8086 	bne.w	800dd74 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800dc68:	4b45      	ldr	r3, [pc, #276]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a44      	ldr	r2, [pc, #272]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dc6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dc72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc74:	f7fd fd54 	bl	800b720 <HAL_GetTick>
 800dc78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800dc7a:	e009      	b.n	800dc90 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dc7c:	f7fd fd50 	bl	800b720 <HAL_GetTick>
 800dc80:	4602      	mov	r2, r0
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	1ad3      	subs	r3, r2, r3
 800dc86:	2b02      	cmp	r3, #2
 800dc88:	d902      	bls.n	800dc90 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800dc8a:	2303      	movs	r3, #3
 800dc8c:	73fb      	strb	r3, [r7, #15]
        break;
 800dc8e:	e005      	b.n	800dc9c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800dc90:	4b3b      	ldr	r3, [pc, #236]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d1ef      	bne.n	800dc7c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800dc9c:	7bfb      	ldrb	r3, [r7, #15]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d168      	bne.n	800dd74 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d113      	bne.n	800dcd0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800dca8:	4b35      	ldr	r3, [pc, #212]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dcaa:	691a      	ldr	r2, [r3, #16]
 800dcac:	4b35      	ldr	r3, [pc, #212]	; (800dd84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800dcae:	4013      	ands	r3, r2
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	6892      	ldr	r2, [r2, #8]
 800dcb4:	0211      	lsls	r1, r2, #8
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	68d2      	ldr	r2, [r2, #12]
 800dcba:	06d2      	lsls	r2, r2, #27
 800dcbc:	4311      	orrs	r1, r2
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	6852      	ldr	r2, [r2, #4]
 800dcc2:	3a01      	subs	r2, #1
 800dcc4:	0112      	lsls	r2, r2, #4
 800dcc6:	430a      	orrs	r2, r1
 800dcc8:	492d      	ldr	r1, [pc, #180]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dcca:	4313      	orrs	r3, r2
 800dccc:	610b      	str	r3, [r1, #16]
 800dcce:	e02d      	b.n	800dd2c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	2b01      	cmp	r3, #1
 800dcd4:	d115      	bne.n	800dd02 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800dcd6:	4b2a      	ldr	r3, [pc, #168]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dcd8:	691a      	ldr	r2, [r3, #16]
 800dcda:	4b2b      	ldr	r3, [pc, #172]	; (800dd88 <RCCEx_PLLSAI1_Config+0x1e0>)
 800dcdc:	4013      	ands	r3, r2
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	6892      	ldr	r2, [r2, #8]
 800dce2:	0211      	lsls	r1, r2, #8
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	6912      	ldr	r2, [r2, #16]
 800dce8:	0852      	lsrs	r2, r2, #1
 800dcea:	3a01      	subs	r2, #1
 800dcec:	0552      	lsls	r2, r2, #21
 800dcee:	4311      	orrs	r1, r2
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	6852      	ldr	r2, [r2, #4]
 800dcf4:	3a01      	subs	r2, #1
 800dcf6:	0112      	lsls	r2, r2, #4
 800dcf8:	430a      	orrs	r2, r1
 800dcfa:	4921      	ldr	r1, [pc, #132]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	610b      	str	r3, [r1, #16]
 800dd00:	e014      	b.n	800dd2c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800dd02:	4b1f      	ldr	r3, [pc, #124]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd04:	691a      	ldr	r2, [r3, #16]
 800dd06:	4b21      	ldr	r3, [pc, #132]	; (800dd8c <RCCEx_PLLSAI1_Config+0x1e4>)
 800dd08:	4013      	ands	r3, r2
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	6892      	ldr	r2, [r2, #8]
 800dd0e:	0211      	lsls	r1, r2, #8
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	6952      	ldr	r2, [r2, #20]
 800dd14:	0852      	lsrs	r2, r2, #1
 800dd16:	3a01      	subs	r2, #1
 800dd18:	0652      	lsls	r2, r2, #25
 800dd1a:	4311      	orrs	r1, r2
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	6852      	ldr	r2, [r2, #4]
 800dd20:	3a01      	subs	r2, #1
 800dd22:	0112      	lsls	r2, r2, #4
 800dd24:	430a      	orrs	r2, r1
 800dd26:	4916      	ldr	r1, [pc, #88]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800dd2c:	4b14      	ldr	r3, [pc, #80]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a13      	ldr	r2, [pc, #76]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dd36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd38:	f7fd fcf2 	bl	800b720 <HAL_GetTick>
 800dd3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800dd3e:	e009      	b.n	800dd54 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dd40:	f7fd fcee 	bl	800b720 <HAL_GetTick>
 800dd44:	4602      	mov	r2, r0
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	1ad3      	subs	r3, r2, r3
 800dd4a:	2b02      	cmp	r3, #2
 800dd4c:	d902      	bls.n	800dd54 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800dd4e:	2303      	movs	r3, #3
 800dd50:	73fb      	strb	r3, [r7, #15]
          break;
 800dd52:	e005      	b.n	800dd60 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800dd54:	4b0a      	ldr	r3, [pc, #40]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d0ef      	beq.n	800dd40 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800dd60:	7bfb      	ldrb	r3, [r7, #15]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d106      	bne.n	800dd74 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800dd66:	4b06      	ldr	r3, [pc, #24]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd68:	691a      	ldr	r2, [r3, #16]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	699b      	ldr	r3, [r3, #24]
 800dd6e:	4904      	ldr	r1, [pc, #16]	; (800dd80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd70:	4313      	orrs	r3, r2
 800dd72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800dd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	40021000 	.word	0x40021000
 800dd84:	07ff800f 	.word	0x07ff800f
 800dd88:	ff9f800f 	.word	0xff9f800f
 800dd8c:	f9ff800f 	.word	0xf9ff800f

0800dd90 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800dd9e:	4b72      	ldr	r3, [pc, #456]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	f003 0303 	and.w	r3, r3, #3
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00e      	beq.n	800ddc8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800ddaa:	4b6f      	ldr	r3, [pc, #444]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	f003 0203 	and.w	r2, r3, #3
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d103      	bne.n	800ddc2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
       ||
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d142      	bne.n	800de48 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	73fb      	strb	r3, [r7, #15]
 800ddc6:	e03f      	b.n	800de48 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2b03      	cmp	r3, #3
 800ddce:	d018      	beq.n	800de02 <RCCEx_PLLSAI2_Config+0x72>
 800ddd0:	2b03      	cmp	r3, #3
 800ddd2:	d825      	bhi.n	800de20 <RCCEx_PLLSAI2_Config+0x90>
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d002      	beq.n	800ddde <RCCEx_PLLSAI2_Config+0x4e>
 800ddd8:	2b02      	cmp	r3, #2
 800ddda:	d009      	beq.n	800ddf0 <RCCEx_PLLSAI2_Config+0x60>
 800dddc:	e020      	b.n	800de20 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ddde:	4b62      	ldr	r3, [pc, #392]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f003 0302 	and.w	r3, r3, #2
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d11d      	bne.n	800de26 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800ddea:	2301      	movs	r3, #1
 800ddec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ddee:	e01a      	b.n	800de26 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ddf0:	4b5d      	ldr	r3, [pc, #372]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d116      	bne.n	800de2a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800de00:	e013      	b.n	800de2a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800de02:	4b59      	ldr	r3, [pc, #356]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d10f      	bne.n	800de2e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800de0e:	4b56      	ldr	r3, [pc, #344]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800de16:	2b00      	cmp	r3, #0
 800de18:	d109      	bne.n	800de2e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800de1a:	2301      	movs	r3, #1
 800de1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800de1e:	e006      	b.n	800de2e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800de20:	2301      	movs	r3, #1
 800de22:	73fb      	strb	r3, [r7, #15]
      break;
 800de24:	e004      	b.n	800de30 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800de26:	bf00      	nop
 800de28:	e002      	b.n	800de30 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800de2a:	bf00      	nop
 800de2c:	e000      	b.n	800de30 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800de2e:	bf00      	nop
    }

    if(status == HAL_OK)
 800de30:	7bfb      	ldrb	r3, [r7, #15]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d108      	bne.n	800de48 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800de36:	4b4c      	ldr	r3, [pc, #304]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	f023 0203 	bic.w	r2, r3, #3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4949      	ldr	r1, [pc, #292]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800de44:	4313      	orrs	r3, r2
 800de46:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800de48:	7bfb      	ldrb	r3, [r7, #15]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f040 8086 	bne.w	800df5c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800de50:	4b45      	ldr	r3, [pc, #276]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4a44      	ldr	r2, [pc, #272]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800de56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de5c:	f7fd fc60 	bl	800b720 <HAL_GetTick>
 800de60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800de62:	e009      	b.n	800de78 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800de64:	f7fd fc5c 	bl	800b720 <HAL_GetTick>
 800de68:	4602      	mov	r2, r0
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	1ad3      	subs	r3, r2, r3
 800de6e:	2b02      	cmp	r3, #2
 800de70:	d902      	bls.n	800de78 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800de72:	2303      	movs	r3, #3
 800de74:	73fb      	strb	r3, [r7, #15]
        break;
 800de76:	e005      	b.n	800de84 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800de78:	4b3b      	ldr	r3, [pc, #236]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de80:	2b00      	cmp	r3, #0
 800de82:	d1ef      	bne.n	800de64 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800de84:	7bfb      	ldrb	r3, [r7, #15]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d168      	bne.n	800df5c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d113      	bne.n	800deb8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800de90:	4b35      	ldr	r3, [pc, #212]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800de92:	695a      	ldr	r2, [r3, #20]
 800de94:	4b35      	ldr	r3, [pc, #212]	; (800df6c <RCCEx_PLLSAI2_Config+0x1dc>)
 800de96:	4013      	ands	r3, r2
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	6892      	ldr	r2, [r2, #8]
 800de9c:	0211      	lsls	r1, r2, #8
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	68d2      	ldr	r2, [r2, #12]
 800dea2:	06d2      	lsls	r2, r2, #27
 800dea4:	4311      	orrs	r1, r2
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	6852      	ldr	r2, [r2, #4]
 800deaa:	3a01      	subs	r2, #1
 800deac:	0112      	lsls	r2, r2, #4
 800deae:	430a      	orrs	r2, r1
 800deb0:	492d      	ldr	r1, [pc, #180]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800deb2:	4313      	orrs	r3, r2
 800deb4:	614b      	str	r3, [r1, #20]
 800deb6:	e02d      	b.n	800df14 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	2b01      	cmp	r3, #1
 800debc:	d115      	bne.n	800deea <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800debe:	4b2a      	ldr	r3, [pc, #168]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800dec0:	695a      	ldr	r2, [r3, #20]
 800dec2:	4b2b      	ldr	r3, [pc, #172]	; (800df70 <RCCEx_PLLSAI2_Config+0x1e0>)
 800dec4:	4013      	ands	r3, r2
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	6892      	ldr	r2, [r2, #8]
 800deca:	0211      	lsls	r1, r2, #8
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	6912      	ldr	r2, [r2, #16]
 800ded0:	0852      	lsrs	r2, r2, #1
 800ded2:	3a01      	subs	r2, #1
 800ded4:	0552      	lsls	r2, r2, #21
 800ded6:	4311      	orrs	r1, r2
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	6852      	ldr	r2, [r2, #4]
 800dedc:	3a01      	subs	r2, #1
 800dede:	0112      	lsls	r2, r2, #4
 800dee0:	430a      	orrs	r2, r1
 800dee2:	4921      	ldr	r1, [pc, #132]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800dee4:	4313      	orrs	r3, r2
 800dee6:	614b      	str	r3, [r1, #20]
 800dee8:	e014      	b.n	800df14 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800deea:	4b1f      	ldr	r3, [pc, #124]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800deec:	695a      	ldr	r2, [r3, #20]
 800deee:	4b21      	ldr	r3, [pc, #132]	; (800df74 <RCCEx_PLLSAI2_Config+0x1e4>)
 800def0:	4013      	ands	r3, r2
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	6892      	ldr	r2, [r2, #8]
 800def6:	0211      	lsls	r1, r2, #8
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	6952      	ldr	r2, [r2, #20]
 800defc:	0852      	lsrs	r2, r2, #1
 800defe:	3a01      	subs	r2, #1
 800df00:	0652      	lsls	r2, r2, #25
 800df02:	4311      	orrs	r1, r2
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	6852      	ldr	r2, [r2, #4]
 800df08:	3a01      	subs	r2, #1
 800df0a:	0112      	lsls	r2, r2, #4
 800df0c:	430a      	orrs	r2, r1
 800df0e:	4916      	ldr	r1, [pc, #88]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df10:	4313      	orrs	r3, r2
 800df12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800df14:	4b14      	ldr	r3, [pc, #80]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a13      	ldr	r2, [pc, #76]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df20:	f7fd fbfe 	bl	800b720 <HAL_GetTick>
 800df24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800df26:	e009      	b.n	800df3c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800df28:	f7fd fbfa 	bl	800b720 <HAL_GetTick>
 800df2c:	4602      	mov	r2, r0
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	1ad3      	subs	r3, r2, r3
 800df32:	2b02      	cmp	r3, #2
 800df34:	d902      	bls.n	800df3c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800df36:	2303      	movs	r3, #3
 800df38:	73fb      	strb	r3, [r7, #15]
          break;
 800df3a:	e005      	b.n	800df48 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800df3c:	4b0a      	ldr	r3, [pc, #40]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df44:	2b00      	cmp	r3, #0
 800df46:	d0ef      	beq.n	800df28 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800df48:	7bfb      	ldrb	r3, [r7, #15]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d106      	bne.n	800df5c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800df4e:	4b06      	ldr	r3, [pc, #24]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df50:	695a      	ldr	r2, [r3, #20]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	699b      	ldr	r3, [r3, #24]
 800df56:	4904      	ldr	r1, [pc, #16]	; (800df68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df58:	4313      	orrs	r3, r2
 800df5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	40021000 	.word	0x40021000
 800df6c:	07ff800f 	.word	0x07ff800f
 800df70:	ff9f800f 	.word	0xff9f800f
 800df74:	f9ff800f 	.word	0xf9ff800f

0800df78 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d101      	bne.n	800df8a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800df86:	2301      	movs	r3, #1
 800df88:	e096      	b.n	800e0b8 <HAL_RNG_Init+0x140>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	7a5b      	ldrb	r3, [r3, #9]
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	2b00      	cmp	r3, #0
 800df92:	d105      	bne.n	800dfa0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2200      	movs	r2, #0
 800df98:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7fc fd2a 	bl	800a9f4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2202      	movs	r2, #2
 800dfa4:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f022 0204 	bic.w	r2, r2, #4
 800dfb4:	601a      	str	r2, [r3, #0]

  /* RNG CR register configuration. Set value in CR register for CONFIG 1, CONFIG 2 and CONFIG 3 values */
  cr_value = (uint32_t) (RNG_CR_CONFIG_VAL);
 800dfb6:	4b42      	ldr	r3, [pc, #264]	; (800e0c0 <HAL_RNG_Init+0x148>)
 800dfb8:	60fb      	str	r3, [r7, #12]

  /* Configuration of 
     - Clock Error Detection 
     - CONFIG1, CONFIG2, CONFIG3 fields
     when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST | RNG_CR_RNG_CONFIG1
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	4b40      	ldr	r3, [pc, #256]	; (800e0c4 <HAL_RNG_Init+0x14c>)
 800dfc2:	4013      	ands	r3, r2
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	6851      	ldr	r1, [r2, #4]
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	430a      	orrs	r2, r1
 800dfcc:	431a      	orrs	r2, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800dfd6:	601a      	str	r2, [r3, #0]
                                 | RNG_CR_RNG_CONFIG2 | RNG_CR_RNG_CONFIG3,
                                 (uint32_t) (RNG_CR_CONDRST | hrng->Init.ClockErrorDetection | cr_value));

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4a3a      	ldr	r2, [pc, #232]	; (800e0c8 <HAL_RNG_Init+0x150>)
 800dfde:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f64a 2274 	movw	r2, #43636	; 0xaa74
 800dfe8:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bits CONDRST=0*/
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800dff8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dffa:	f7fd fb91 	bl	800b720 <HAL_GetTick>
 800dffe:	60b8      	str	r0, [r7, #8]

  /* Wait for conditioning reset process to be completed */
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800e000:	e016      	b.n	800e030 <HAL_RNG_Init+0xb8>
  {
    if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 800e002:	f7fd fb8d 	bl	800b720 <HAL_GetTick>
 800e006:	4602      	mov	r2, r0
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	1ad3      	subs	r3, r2, r3
 800e00c:	2b02      	cmp	r3, #2
 800e00e:	d90f      	bls.n	800e030 <HAL_RNG_Init+0xb8>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e01a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e01e:	d107      	bne.n	800e030 <HAL_RNG_Init+0xb8>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2201      	movs	r2, #1
 800e024:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2202      	movs	r2, #2
 800e02a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800e02c:	2301      	movs	r3, #1
 800e02e:	e043      	b.n	800e0b8 <HAL_RNG_Init+0x140>
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e03e:	d0e0      	beq.n	800e002 <HAL_RNG_Init+0x8a>
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f042 0204 	orr.w	r2, r2, #4
 800e04e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e05a:	2b40      	cmp	r3, #64	; 0x40
 800e05c:	d104      	bne.n	800e068 <HAL_RNG_Init+0xf0>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2204      	movs	r2, #4
 800e062:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800e064:	2301      	movs	r3, #1
 800e066:	e027      	b.n	800e0b8 <HAL_RNG_Init+0x140>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800e068:	f7fd fb5a 	bl	800b720 <HAL_GetTick>
 800e06c:	60b8      	str	r0, [r7, #8]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800e06e:	e015      	b.n	800e09c <HAL_RNG_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800e070:	f7fd fb56 	bl	800b720 <HAL_GetTick>
 800e074:	4602      	mov	r2, r0
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	2b02      	cmp	r3, #2
 800e07c:	d90e      	bls.n	800e09c <HAL_RNG_Init+0x124>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	f003 0304 	and.w	r3, r3, #4
 800e088:	2b04      	cmp	r3, #4
 800e08a:	d107      	bne.n	800e09c <HAL_RNG_Init+0x124>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2204      	movs	r2, #4
 800e090:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2202      	movs	r2, #2
 800e096:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800e098:	2301      	movs	r3, #1
 800e09a:	e00d      	b.n	800e0b8 <HAL_RNG_Init+0x140>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	f003 0304 	and.w	r3, r3, #4
 800e0a6:	2b04      	cmp	r3, #4
 800e0a8:	d0e2      	beq.n	800e070 <HAL_RNG_Init+0xf8>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800e0b6:	2300      	movs	r3, #0
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3710      	adds	r7, #16
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	00f00d00 	.word	0x00f00d00
 800e0c4:	bc0f10df 	.word	0xbc0f10df
 800e0c8:	17590abc 	.word	0x17590abc

0800e0cc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b084      	sub	sp, #16
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	7a1b      	ldrb	r3, [r3, #8]
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d101      	bne.n	800e0e6 <HAL_RNG_GenerateRandomNumber+0x1a>
 800e0e2:	2302      	movs	r3, #2
 800e0e4:	e03d      	b.n	800e162 <HAL_RNG_GenerateRandomNumber+0x96>
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	7a5b      	ldrb	r3, [r3, #9]
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d12c      	bne.n	800e150 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2202      	movs	r2, #2
 800e0fa:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e0fc:	f7fd fb10 	bl	800b720 <HAL_GetTick>
 800e100:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e102:	e011      	b.n	800e128 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800e104:	f7fd fb0c 	bl	800b720 <HAL_GetTick>
 800e108:	4602      	mov	r2, r0
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	1ad3      	subs	r3, r2, r3
 800e10e:	2b02      	cmp	r3, #2
 800e110:	d90a      	bls.n	800e128 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2201      	movs	r2, #1
 800e116:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2202      	movs	r2, #2
 800e11c:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2200      	movs	r2, #0
 800e122:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800e124:	2301      	movs	r3, #1
 800e126:	e01c      	b.n	800e162 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	f003 0301 	and.w	r3, r3, #1
 800e132:	2b01      	cmp	r3, #1
 800e134:	d1e6      	bne.n	800e104 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	689a      	ldr	r2, [r3, #8]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	691a      	ldr	r2, [r3, #16]
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2201      	movs	r2, #1
 800e14c:	725a      	strb	r2, [r3, #9]
 800e14e:	e004      	b.n	800e15a <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2204      	movs	r2, #4
 800e154:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800e156:	2301      	movs	r3, #1
 800e158:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2200      	movs	r2, #0
 800e15e:	721a      	strb	r2, [r3, #8]

  return status;
 800e160:	7bfb      	ldrb	r3, [r7, #15]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
	...

0800e16c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e174:	2301      	movs	r3, #1
 800e176:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d07f      	beq.n	800e27e <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e184:	b2db      	uxtb	r3, r3
 800e186:	2b00      	cmp	r3, #0
 800e188:	d106      	bne.n	800e198 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f7fc fc9a 	bl	800aacc <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800e19e:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2202      	movs	r2, #2
 800e1a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	22ca      	movs	r2, #202	; 0xca
 800e1ae:	625a      	str	r2, [r3, #36]	; 0x24
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	2253      	movs	r2, #83	; 0x53
 800e1b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f000 fa65 	bl	800e688 <RTC_EnterInitMode>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800e1c2:	7bfb      	ldrb	r3, [r7, #15]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d15a      	bne.n	800e27e <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	699b      	ldr	r3, [r3, #24]
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	6812      	ldr	r2, [r2, #0]
 800e1d2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800e1d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1da:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	6999      	ldr	r1, [r3, #24]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	689a      	ldr	r2, [r3, #8]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	695b      	ldr	r3, [r3, #20]
 800e1ea:	431a      	orrs	r2, r3
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	69db      	ldr	r3, [r3, #28]
 800e1f0:	431a      	orrs	r2, r3
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	430a      	orrs	r2, r1
 800e1f8:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	687a      	ldr	r2, [r7, #4]
 800e200:	6912      	ldr	r2, [r2, #16]
 800e202:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	6919      	ldr	r1, [r3, #16]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	68db      	ldr	r3, [r3, #12]
 800e20e:	041a      	lsls	r2, r3, #16
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	430a      	orrs	r2, r1
 800e216:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800e218:	4b1b      	ldr	r3, [pc, #108]	; (800e288 <HAL_RTC_Init+0x11c>)
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e228:	430b      	orrs	r3, r1
 800e22a:	4917      	ldr	r1, [pc, #92]	; (800e288 <HAL_RTC_Init+0x11c>)
 800e22c:	4313      	orrs	r3, r2
 800e22e:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 fa5f 	bl	800e6f4 <RTC_ExitInitMode>
 800e236:	4603      	mov	r3, r0
 800e238:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800e23a:	7bfb      	ldrb	r3, [r7, #15]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d11e      	bne.n	800e27e <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	699a      	ldr	r2, [r3, #24]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800e24e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	6999      	ldr	r1, [r3, #24]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6a1b      	ldr	r3, [r3, #32]
 800e25e:	431a      	orrs	r2, r3
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	699b      	ldr	r3, [r3, #24]
 800e264:	431a      	orrs	r2, r3
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	430a      	orrs	r2, r1
 800e26c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	22ff      	movs	r2, #255	; 0xff
 800e274:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2201      	movs	r2, #1
 800e27a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 800e27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e280:	4618      	mov	r0, r3
 800e282:	3710      	adds	r7, #16
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	40002800 	.word	0x40002800

0800e28c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e28c:	b590      	push	{r4, r7, lr}
 800e28e:	b087      	sub	sp, #28
 800e290:	af00      	add	r7, sp, #0
 800e292:	60f8      	str	r0, [r7, #12]
 800e294:	60b9      	str	r1, [r7, #8]
 800e296:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d101      	bne.n	800e2a6 <HAL_RTC_SetTime+0x1a>
 800e2a2:	2302      	movs	r3, #2
 800e2a4:	e08b      	b.n	800e3be <HAL_RTC_SetTime+0x132>
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2202      	movs	r2, #2
 800e2b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	22ca      	movs	r2, #202	; 0xca
 800e2bc:	625a      	str	r2, [r3, #36]	; 0x24
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2253      	movs	r2, #83	; 0x53
 800e2c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	f000 f9de 	bl	800e688 <RTC_EnterInitMode>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800e2d0:	7cfb      	ldrb	r3, [r7, #19]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d15e      	bne.n	800e394 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800e2d6:	4b3c      	ldr	r3, [pc, #240]	; (800e3c8 <HAL_RTC_SetTime+0x13c>)
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e2de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2e2:	d057      	beq.n	800e394 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d125      	bne.n	800e336 <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800e2ea:	4b37      	ldr	r3, [pc, #220]	; (800e3c8 <HAL_RTC_SetTime+0x13c>)
 800e2ec:	699b      	ldr	r3, [r3, #24]
 800e2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d102      	bne.n	800e2fc <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	4618      	mov	r0, r3
 800e302:	f000 fa35 	bl	800e770 <RTC_ByteToBcd2>
 800e306:	4603      	mov	r3, r0
 800e308:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	785b      	ldrb	r3, [r3, #1]
 800e30e:	4618      	mov	r0, r3
 800e310:	f000 fa2e 	bl	800e770 <RTC_ByteToBcd2>
 800e314:	4603      	mov	r3, r0
 800e316:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e318:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	789b      	ldrb	r3, [r3, #2]
 800e31e:	4618      	mov	r0, r3
 800e320:	f000 fa26 	bl	800e770 <RTC_ByteToBcd2>
 800e324:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e326:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	78db      	ldrb	r3, [r3, #3]
 800e32e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e330:	4313      	orrs	r3, r2
 800e332:	617b      	str	r3, [r7, #20]
 800e334:	e017      	b.n	800e366 <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800e336:	4b24      	ldr	r3, [pc, #144]	; (800e3c8 <HAL_RTC_SetTime+0x13c>)
 800e338:	699b      	ldr	r3, [r3, #24]
 800e33a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d102      	bne.n	800e348 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	2200      	movs	r2, #0
 800e346:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	785b      	ldrb	r3, [r3, #1]
 800e352:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e354:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e35a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	78db      	ldrb	r3, [r3, #3]
 800e360:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e362:	4313      	orrs	r3, r2
 800e364:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800e366:	4a18      	ldr	r2, [pc, #96]	; (800e3c8 <HAL_RTC_SetTime+0x13c>)
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800e36e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800e372:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800e374:	4b14      	ldr	r3, [pc, #80]	; (800e3c8 <HAL_RTC_SetTime+0x13c>)
 800e376:	699b      	ldr	r3, [r3, #24]
 800e378:	4a13      	ldr	r2, [pc, #76]	; (800e3c8 <HAL_RTC_SetTime+0x13c>)
 800e37a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e37e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800e380:	4b11      	ldr	r3, [pc, #68]	; (800e3c8 <HAL_RTC_SetTime+0x13c>)
 800e382:	699a      	ldr	r2, [r3, #24]
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	68d9      	ldr	r1, [r3, #12]
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	691b      	ldr	r3, [r3, #16]
 800e38c:	430b      	orrs	r3, r1
 800e38e:	490e      	ldr	r1, [pc, #56]	; (800e3c8 <HAL_RTC_SetTime+0x13c>)
 800e390:	4313      	orrs	r3, r2
 800e392:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800e394:	68f8      	ldr	r0, [r7, #12]
 800e396:	f000 f9ad 	bl	800e6f4 <RTC_ExitInitMode>
 800e39a:	4603      	mov	r3, r0
 800e39c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	22ff      	movs	r2, #255	; 0xff
 800e3a4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800e3a6:	7cfb      	ldrb	r3, [r7, #19]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d103      	bne.n	800e3b4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e3bc:	7cfb      	ldrb	r3, [r7, #19]
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	371c      	adds	r7, #28
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd90      	pop	{r4, r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	40002800 	.word	0x40002800

0800e3cc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b086      	sub	sp, #24
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800e3d8:	4b2c      	ldr	r3, [pc, #176]	; (800e48c <HAL_RTC_GetTime+0xc0>)
 800e3da:	689a      	ldr	r2, [r3, #8]
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800e3e0:	4b2a      	ldr	r3, [pc, #168]	; (800e48c <HAL_RTC_GetTime+0xc0>)
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3ec:	d049      	beq.n	800e482 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800e3ee:	4b27      	ldr	r3, [pc, #156]	; (800e48c <HAL_RTC_GetTime+0xc0>)
 800e3f0:	691b      	ldr	r3, [r3, #16]
 800e3f2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800e3fa:	4b24      	ldr	r3, [pc, #144]	; (800e48c <HAL_RTC_GetTime+0xc0>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800e402:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800e406:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	0c1b      	lsrs	r3, r3, #16
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e412:	b2da      	uxtb	r2, r3
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	0a1b      	lsrs	r3, r3, #8
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e422:	b2da      	uxtb	r2, r3
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e430:	b2da      	uxtb	r2, r3
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	0d9b      	lsrs	r3, r3, #22
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	f003 0301 	and.w	r3, r3, #1
 800e440:	b2da      	uxtb	r2, r3
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d11a      	bne.n	800e482 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	4618      	mov	r0, r3
 800e452:	f000 f9ad 	bl	800e7b0 <RTC_Bcd2ToByte>
 800e456:	4603      	mov	r3, r0
 800e458:	461a      	mov	r2, r3
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	785b      	ldrb	r3, [r3, #1]
 800e462:	4618      	mov	r0, r3
 800e464:	f000 f9a4 	bl	800e7b0 <RTC_Bcd2ToByte>
 800e468:	4603      	mov	r3, r0
 800e46a:	461a      	mov	r2, r3
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	789b      	ldrb	r3, [r3, #2]
 800e474:	4618      	mov	r0, r3
 800e476:	f000 f99b 	bl	800e7b0 <RTC_Bcd2ToByte>
 800e47a:	4603      	mov	r3, r0
 800e47c:	461a      	mov	r2, r3
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800e482:	2300      	movs	r3, #0
}
 800e484:	4618      	mov	r0, r3
 800e486:	3718      	adds	r7, #24
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	40002800 	.word	0x40002800

0800e490 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e490:	b590      	push	{r4, r7, lr}
 800e492:	b087      	sub	sp, #28
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d101      	bne.n	800e4aa <HAL_RTC_SetDate+0x1a>
 800e4a6:	2302      	movs	r3, #2
 800e4a8:	e074      	b.n	800e594 <HAL_RTC_SetDate+0x104>
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	2202      	movs	r2, #2
 800e4b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d10e      	bne.n	800e4de <HAL_RTC_SetDate+0x4e>
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	785b      	ldrb	r3, [r3, #1]
 800e4c4:	f003 0310 	and.w	r3, r3, #16
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d008      	beq.n	800e4de <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	785b      	ldrb	r3, [r3, #1]
 800e4d0:	f023 0310 	bic.w	r3, r3, #16
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	330a      	adds	r3, #10
 800e4d8:	b2da      	uxtb	r2, r3
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d11c      	bne.n	800e51e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	78db      	ldrb	r3, [r3, #3]
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f000 f941 	bl	800e770 <RTC_ByteToBcd2>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	785b      	ldrb	r3, [r3, #1]
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f000 f93a 	bl	800e770 <RTC_ByteToBcd2>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800e500:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	789b      	ldrb	r3, [r3, #2]
 800e506:	4618      	mov	r0, r3
 800e508:	f000 f932 	bl	800e770 <RTC_ByteToBcd2>
 800e50c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e50e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800e518:	4313      	orrs	r3, r2
 800e51a:	617b      	str	r3, [r7, #20]
 800e51c:	e00e      	b.n	800e53c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	78db      	ldrb	r3, [r3, #3]
 800e522:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	785b      	ldrb	r3, [r3, #1]
 800e528:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e52a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800e52c:	68ba      	ldr	r2, [r7, #8]
 800e52e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800e530:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e538:	4313      	orrs	r3, r2
 800e53a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	22ca      	movs	r2, #202	; 0xca
 800e542:	625a      	str	r2, [r3, #36]	; 0x24
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2253      	movs	r2, #83	; 0x53
 800e54a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800e54c:	68f8      	ldr	r0, [r7, #12]
 800e54e:	f000 f89b 	bl	800e688 <RTC_EnterInitMode>
 800e552:	4603      	mov	r3, r0
 800e554:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800e556:	7cfb      	ldrb	r3, [r7, #19]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d10b      	bne.n	800e574 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800e55c:	4a0f      	ldr	r2, [pc, #60]	; (800e59c <HAL_RTC_SetDate+0x10c>)
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e564:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e568:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800e56a:	68f8      	ldr	r0, [r7, #12]
 800e56c:	f000 f8c2 	bl	800e6f4 <RTC_ExitInitMode>
 800e570:	4603      	mov	r3, r0
 800e572:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	22ff      	movs	r2, #255	; 0xff
 800e57a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800e57c:	7cfb      	ldrb	r3, [r7, #19]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d103      	bne.n	800e58a <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2201      	movs	r2, #1
 800e586:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2200      	movs	r2, #0
 800e58e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e592:	7cfb      	ldrb	r3, [r7, #19]
}
 800e594:	4618      	mov	r0, r3
 800e596:	371c      	adds	r7, #28
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd90      	pop	{r4, r7, pc}
 800e59c:	40002800 	.word	0x40002800

0800e5a0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800e5ac:	4b22      	ldr	r3, [pc, #136]	; (800e638 <HAL_RTC_GetDate+0x98>)
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e5b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e5b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	0c1b      	lsrs	r3, r3, #16
 800e5be:	b2da      	uxtb	r2, r3
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	0a1b      	lsrs	r3, r3, #8
 800e5c8:	b2db      	uxtb	r3, r3
 800e5ca:	f003 031f 	and.w	r3, r3, #31
 800e5ce:	b2da      	uxtb	r2, r3
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5dc:	b2da      	uxtb	r2, r3
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	0b5b      	lsrs	r3, r3, #13
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	f003 0307 	and.w	r3, r3, #7
 800e5ec:	b2da      	uxtb	r2, r3
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d11a      	bne.n	800e62e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	78db      	ldrb	r3, [r3, #3]
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f000 f8d7 	bl	800e7b0 <RTC_Bcd2ToByte>
 800e602:	4603      	mov	r3, r0
 800e604:	461a      	mov	r2, r3
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	785b      	ldrb	r3, [r3, #1]
 800e60e:	4618      	mov	r0, r3
 800e610:	f000 f8ce 	bl	800e7b0 <RTC_Bcd2ToByte>
 800e614:	4603      	mov	r3, r0
 800e616:	461a      	mov	r2, r3
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	789b      	ldrb	r3, [r3, #2]
 800e620:	4618      	mov	r0, r3
 800e622:	f000 f8c5 	bl	800e7b0 <RTC_Bcd2ToByte>
 800e626:	4603      	mov	r3, r0
 800e628:	461a      	mov	r2, r3
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800e62e:	2300      	movs	r3, #0
}
 800e630:	4618      	mov	r0, r3
 800e632:	3718      	adds	r7, #24
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	40002800 	.word	0x40002800

0800e63c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	68da      	ldr	r2, [r3, #12]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e652:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 800e654:	f7fd f864 	bl	800b720 <HAL_GetTick>
 800e658:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800e65a:	e009      	b.n	800e670 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e65c:	f7fd f860 	bl	800b720 <HAL_GetTick>
 800e660:	4602      	mov	r2, r0
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	1ad3      	subs	r3, r2, r3
 800e666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e66a:	d901      	bls.n	800e670 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800e66c:	2303      	movs	r3, #3
 800e66e:	e007      	b.n	800e680 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	f003 0320 	and.w	r3, r3, #32
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d0ee      	beq.n	800e65c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800e67e:	2300      	movs	r3, #0
}
 800e680:	4618      	mov	r0, r3
 800e682:	3710      	adds	r7, #16
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e690:	2300      	movs	r3, #0
 800e692:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d123      	bne.n	800e6ea <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	68da      	ldr	r2, [r3, #12]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e6b0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e6b2:	f7fd f835 	bl	800b720 <HAL_GetTick>
 800e6b6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e6b8:	e00d      	b.n	800e6d6 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e6ba:	f7fd f831 	bl	800b720 <HAL_GetTick>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e6c8:	d905      	bls.n	800e6d6 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800e6ca:	2303      	movs	r3, #3
 800e6cc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2203      	movs	r2, #3
 800e6d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	68db      	ldr	r3, [r3, #12]
 800e6dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d102      	bne.n	800e6ea <RTC_EnterInitMode+0x62>
 800e6e4:	7bfb      	ldrb	r3, [r7, #15]
 800e6e6:	2b03      	cmp	r3, #3
 800e6e8:	d1e7      	bne.n	800e6ba <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800e6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3710      	adds	r7, #16
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e700:	4b1a      	ldr	r3, [pc, #104]	; (800e76c <RTC_ExitInitMode+0x78>)
 800e702:	68db      	ldr	r3, [r3, #12]
 800e704:	4a19      	ldr	r2, [pc, #100]	; (800e76c <RTC_ExitInitMode+0x78>)
 800e706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e70a:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e70c:	4b17      	ldr	r3, [pc, #92]	; (800e76c <RTC_ExitInitMode+0x78>)
 800e70e:	699b      	ldr	r3, [r3, #24]
 800e710:	f003 0320 	and.w	r3, r3, #32
 800e714:	2b00      	cmp	r3, #0
 800e716:	d10c      	bne.n	800e732 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f7ff ff8f 	bl	800e63c <HAL_RTC_WaitForSynchro>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d01e      	beq.n	800e762 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2203      	movs	r2, #3
 800e728:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800e72c:	2303      	movs	r3, #3
 800e72e:	73fb      	strb	r3, [r7, #15]
 800e730:	e017      	b.n	800e762 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e732:	4b0e      	ldr	r3, [pc, #56]	; (800e76c <RTC_ExitInitMode+0x78>)
 800e734:	699b      	ldr	r3, [r3, #24]
 800e736:	4a0d      	ldr	r2, [pc, #52]	; (800e76c <RTC_ExitInitMode+0x78>)
 800e738:	f023 0320 	bic.w	r3, r3, #32
 800e73c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f7ff ff7c 	bl	800e63c <HAL_RTC_WaitForSynchro>
 800e744:	4603      	mov	r3, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	d005      	beq.n	800e756 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2203      	movs	r2, #3
 800e74e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800e752:	2303      	movs	r3, #3
 800e754:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e756:	4b05      	ldr	r3, [pc, #20]	; (800e76c <RTC_ExitInitMode+0x78>)
 800e758:	699b      	ldr	r3, [r3, #24]
 800e75a:	4a04      	ldr	r2, [pc, #16]	; (800e76c <RTC_ExitInitMode+0x78>)
 800e75c:	f043 0320 	orr.w	r3, r3, #32
 800e760:	6193      	str	r3, [r2, #24]
  }

  return status;
 800e762:	7bfb      	ldrb	r3, [r7, #15]
}
 800e764:	4618      	mov	r0, r3
 800e766:	3710      	adds	r7, #16
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	40002800 	.word	0x40002800

0800e770 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e770:	b480      	push	{r7}
 800e772:	b085      	sub	sp, #20
 800e774:	af00      	add	r7, sp, #0
 800e776:	4603      	mov	r3, r0
 800e778:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e77a:	2300      	movs	r3, #0
 800e77c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800e77e:	79fb      	ldrb	r3, [r7, #7]
 800e780:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800e782:	e005      	b.n	800e790 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	3301      	adds	r3, #1
 800e788:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800e78a:	7afb      	ldrb	r3, [r7, #11]
 800e78c:	3b0a      	subs	r3, #10
 800e78e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800e790:	7afb      	ldrb	r3, [r7, #11]
 800e792:	2b09      	cmp	r3, #9
 800e794:	d8f6      	bhi.n	800e784 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	011b      	lsls	r3, r3, #4
 800e79c:	b2da      	uxtb	r2, r3
 800e79e:	7afb      	ldrb	r3, [r7, #11]
 800e7a0:	4313      	orrs	r3, r2
 800e7a2:	b2db      	uxtb	r3, r3
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3714      	adds	r7, #20
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr

0800e7b0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b085      	sub	sp, #20
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e7ba:	79fb      	ldrb	r3, [r7, #7]
 800e7bc:	091b      	lsrs	r3, r3, #4
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	0092      	lsls	r2, r2, #2
 800e7c4:	4413      	add	r3, r2
 800e7c6:	005b      	lsls	r3, r3, #1
 800e7c8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e7ca:	79fb      	ldrb	r3, [r7, #7]
 800e7cc:	f003 030f 	and.w	r3, r3, #15
 800e7d0:	b2da      	uxtb	r2, r3
 800e7d2:	7bfb      	ldrb	r3, [r7, #15]
 800e7d4:	4413      	add	r3, r2
 800e7d6:	b2db      	uxtb	r3, r3
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3714      	adds	r7, #20
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d101      	bne.n	800e7f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e095      	b.n	800e922 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d108      	bne.n	800e810 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e806:	d009      	beq.n	800e81c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	61da      	str	r2, [r3, #28]
 800e80e:	e005      	b.n	800e81c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2200      	movs	r2, #0
 800e814:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2200      	movs	r2, #0
 800e81a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2200      	movs	r2, #0
 800e820:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d106      	bne.n	800e83c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2200      	movs	r2, #0
 800e832:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f7fc f9c4 	bl	800abc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2202      	movs	r2, #2
 800e840:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e852:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	68db      	ldr	r3, [r3, #12]
 800e858:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e85c:	d902      	bls.n	800e864 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e85e:	2300      	movs	r3, #0
 800e860:	60fb      	str	r3, [r7, #12]
 800e862:	e002      	b.n	800e86a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e868:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e872:	d007      	beq.n	800e884 <HAL_SPI_Init+0xa0>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e87c:	d002      	beq.n	800e884 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2200      	movs	r2, #0
 800e882:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e894:	431a      	orrs	r2, r3
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	691b      	ldr	r3, [r3, #16]
 800e89a:	f003 0302 	and.w	r3, r3, #2
 800e89e:	431a      	orrs	r2, r3
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	695b      	ldr	r3, [r3, #20]
 800e8a4:	f003 0301 	and.w	r3, r3, #1
 800e8a8:	431a      	orrs	r2, r3
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	699b      	ldr	r3, [r3, #24]
 800e8ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e8b2:	431a      	orrs	r2, r3
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	69db      	ldr	r3, [r3, #28]
 800e8b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e8bc:	431a      	orrs	r2, r3
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6a1b      	ldr	r3, [r3, #32]
 800e8c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8c6:	ea42 0103 	orr.w	r1, r2, r3
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	430a      	orrs	r2, r1
 800e8d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	699b      	ldr	r3, [r3, #24]
 800e8de:	0c1b      	lsrs	r3, r3, #16
 800e8e0:	f003 0204 	and.w	r2, r3, #4
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e8:	f003 0310 	and.w	r3, r3, #16
 800e8ec:	431a      	orrs	r2, r3
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8f2:	f003 0308 	and.w	r3, r3, #8
 800e8f6:	431a      	orrs	r2, r3
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e900:	ea42 0103 	orr.w	r1, r2, r3
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	430a      	orrs	r2, r1
 800e910:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2200      	movs	r2, #0
 800e916:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2201      	movs	r2, #1
 800e91c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e920:	2300      	movs	r3, #0
}
 800e922:	4618      	mov	r0, r3
 800e924:	3710      	adds	r7, #16
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b088      	sub	sp, #32
 800e92e:	af00      	add	r7, sp, #0
 800e930:	60f8      	str	r0, [r7, #12]
 800e932:	60b9      	str	r1, [r7, #8]
 800e934:	603b      	str	r3, [r7, #0]
 800e936:	4613      	mov	r3, r2
 800e938:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e93a:	2300      	movs	r3, #0
 800e93c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e944:	2b01      	cmp	r3, #1
 800e946:	d101      	bne.n	800e94c <HAL_SPI_Transmit+0x22>
 800e948:	2302      	movs	r3, #2
 800e94a:	e158      	b.n	800ebfe <HAL_SPI_Transmit+0x2d4>
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2201      	movs	r2, #1
 800e950:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e954:	f7fc fee4 	bl	800b720 <HAL_GetTick>
 800e958:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e95a:	88fb      	ldrh	r3, [r7, #6]
 800e95c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e964:	b2db      	uxtb	r3, r3
 800e966:	2b01      	cmp	r3, #1
 800e968:	d002      	beq.n	800e970 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e96a:	2302      	movs	r3, #2
 800e96c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e96e:	e13d      	b.n	800ebec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d002      	beq.n	800e97c <HAL_SPI_Transmit+0x52>
 800e976:	88fb      	ldrh	r3, [r7, #6]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d102      	bne.n	800e982 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e97c:	2301      	movs	r3, #1
 800e97e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e980:	e134      	b.n	800ebec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2203      	movs	r2, #3
 800e986:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2200      	movs	r2, #0
 800e98e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	68ba      	ldr	r2, [r7, #8]
 800e994:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	88fa      	ldrh	r2, [r7, #6]
 800e99a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	88fa      	ldrh	r2, [r7, #6]
 800e9a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	689b      	ldr	r3, [r3, #8]
 800e9c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9cc:	d10f      	bne.n	800e9ee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e9ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9f8:	2b40      	cmp	r3, #64	; 0x40
 800e9fa:	d007      	beq.n	800ea0c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ea14:	d94b      	bls.n	800eaae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d002      	beq.n	800ea24 <HAL_SPI_Transmit+0xfa>
 800ea1e:	8afb      	ldrh	r3, [r7, #22]
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d13e      	bne.n	800eaa2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea28:	881a      	ldrh	r2, [r3, #0]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea34:	1c9a      	adds	r2, r3, #2
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	3b01      	subs	r3, #1
 800ea42:	b29a      	uxth	r2, r3
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ea48:	e02b      	b.n	800eaa2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	689b      	ldr	r3, [r3, #8]
 800ea50:	f003 0302 	and.w	r3, r3, #2
 800ea54:	2b02      	cmp	r3, #2
 800ea56:	d112      	bne.n	800ea7e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea5c:	881a      	ldrh	r2, [r3, #0]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea68:	1c9a      	adds	r2, r3, #2
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	3b01      	subs	r3, #1
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ea7c:	e011      	b.n	800eaa2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea7e:	f7fc fe4f 	bl	800b720 <HAL_GetTick>
 800ea82:	4602      	mov	r2, r0
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	1ad3      	subs	r3, r2, r3
 800ea88:	683a      	ldr	r2, [r7, #0]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d803      	bhi.n	800ea96 <HAL_SPI_Transmit+0x16c>
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea94:	d102      	bne.n	800ea9c <HAL_SPI_Transmit+0x172>
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d102      	bne.n	800eaa2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800ea9c:	2303      	movs	r3, #3
 800ea9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800eaa0:	e0a4      	b.n	800ebec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d1ce      	bne.n	800ea4a <HAL_SPI_Transmit+0x120>
 800eaac:	e07c      	b.n	800eba8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d002      	beq.n	800eabc <HAL_SPI_Transmit+0x192>
 800eab6:	8afb      	ldrh	r3, [r7, #22]
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d170      	bne.n	800eb9e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	2b01      	cmp	r3, #1
 800eac4:	d912      	bls.n	800eaec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaca:	881a      	ldrh	r2, [r3, #0]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead6:	1c9a      	adds	r2, r3, #2
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eae0:	b29b      	uxth	r3, r3
 800eae2:	3b02      	subs	r3, #2
 800eae4:	b29a      	uxth	r2, r3
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eaea:	e058      	b.n	800eb9e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	330c      	adds	r3, #12
 800eaf6:	7812      	ldrb	r2, [r2, #0]
 800eaf8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eafe:	1c5a      	adds	r2, r3, #1
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	3b01      	subs	r3, #1
 800eb0c:	b29a      	uxth	r2, r3
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800eb12:	e044      	b.n	800eb9e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	689b      	ldr	r3, [r3, #8]
 800eb1a:	f003 0302 	and.w	r3, r3, #2
 800eb1e:	2b02      	cmp	r3, #2
 800eb20:	d12b      	bne.n	800eb7a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	d912      	bls.n	800eb52 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb30:	881a      	ldrh	r2, [r3, #0]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb3c:	1c9a      	adds	r2, r3, #2
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	3b02      	subs	r3, #2
 800eb4a:	b29a      	uxth	r2, r3
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eb50:	e025      	b.n	800eb9e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	330c      	adds	r3, #12
 800eb5c:	7812      	ldrb	r2, [r2, #0]
 800eb5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb64:	1c5a      	adds	r2, r3, #1
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb6e:	b29b      	uxth	r3, r3
 800eb70:	3b01      	subs	r3, #1
 800eb72:	b29a      	uxth	r2, r3
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eb78:	e011      	b.n	800eb9e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb7a:	f7fc fdd1 	bl	800b720 <HAL_GetTick>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	69bb      	ldr	r3, [r7, #24]
 800eb82:	1ad3      	subs	r3, r2, r3
 800eb84:	683a      	ldr	r2, [r7, #0]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d803      	bhi.n	800eb92 <HAL_SPI_Transmit+0x268>
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb90:	d102      	bne.n	800eb98 <HAL_SPI_Transmit+0x26e>
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d102      	bne.n	800eb9e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800eb98:	2303      	movs	r3, #3
 800eb9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800eb9c:	e026      	b.n	800ebec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eba2:	b29b      	uxth	r3, r3
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d1b5      	bne.n	800eb14 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eba8:	69ba      	ldr	r2, [r7, #24]
 800ebaa:	6839      	ldr	r1, [r7, #0]
 800ebac:	68f8      	ldr	r0, [r7, #12]
 800ebae:	f000 fce3 	bl	800f578 <SPI_EndRxTxTransaction>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d002      	beq.n	800ebbe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2220      	movs	r2, #32
 800ebbc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d10a      	bne.n	800ebdc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	613b      	str	r3, [r7, #16]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	68db      	ldr	r3, [r3, #12]
 800ebd0:	613b      	str	r3, [r7, #16]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	613b      	str	r3, [r7, #16]
 800ebda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d002      	beq.n	800ebea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	77fb      	strb	r3, [r7, #31]
 800ebe8:	e000      	b.n	800ebec <HAL_SPI_Transmit+0x2c2>
  }

error:
 800ebea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ebfc:	7ffb      	ldrb	r3, [r7, #31]
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3720      	adds	r7, #32
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b088      	sub	sp, #32
 800ec0a:	af02      	add	r7, sp, #8
 800ec0c:	60f8      	str	r0, [r7, #12]
 800ec0e:	60b9      	str	r1, [r7, #8]
 800ec10:	603b      	str	r3, [r7, #0]
 800ec12:	4613      	mov	r3, r2
 800ec14:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ec16:	2300      	movs	r3, #0
 800ec18:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec22:	d112      	bne.n	800ec4a <HAL_SPI_Receive+0x44>
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	689b      	ldr	r3, [r3, #8]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d10e      	bne.n	800ec4a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2204      	movs	r2, #4
 800ec30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ec34:	88fa      	ldrh	r2, [r7, #6]
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	9300      	str	r3, [sp, #0]
 800ec3a:	4613      	mov	r3, r2
 800ec3c:	68ba      	ldr	r2, [r7, #8]
 800ec3e:	68b9      	ldr	r1, [r7, #8]
 800ec40:	68f8      	ldr	r0, [r7, #12]
 800ec42:	f000 f910 	bl	800ee66 <HAL_SPI_TransmitReceive>
 800ec46:	4603      	mov	r3, r0
 800ec48:	e109      	b.n	800ee5e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d101      	bne.n	800ec58 <HAL_SPI_Receive+0x52>
 800ec54:	2302      	movs	r3, #2
 800ec56:	e102      	b.n	800ee5e <HAL_SPI_Receive+0x258>
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec60:	f7fc fd5e 	bl	800b720 <HAL_GetTick>
 800ec64:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	d002      	beq.n	800ec78 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ec72:	2302      	movs	r3, #2
 800ec74:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ec76:	e0e9      	b.n	800ee4c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d002      	beq.n	800ec84 <HAL_SPI_Receive+0x7e>
 800ec7e:	88fb      	ldrh	r3, [r7, #6]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d102      	bne.n	800ec8a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ec84:	2301      	movs	r3, #1
 800ec86:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ec88:	e0e0      	b.n	800ee4c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2204      	movs	r2, #4
 800ec8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2200      	movs	r2, #0
 800ec96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	88fa      	ldrh	r2, [r7, #6]
 800eca2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	88fa      	ldrh	r2, [r7, #6]
 800ecaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ecd4:	d908      	bls.n	800ece8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	685a      	ldr	r2, [r3, #4]
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ece4:	605a      	str	r2, [r3, #4]
 800ece6:	e007      	b.n	800ecf8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	685a      	ldr	r2, [r3, #4]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ecf6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	689b      	ldr	r3, [r3, #8]
 800ecfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed00:	d10f      	bne.n	800ed22 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ed20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed2c:	2b40      	cmp	r3, #64	; 0x40
 800ed2e:	d007      	beq.n	800ed40 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	68db      	ldr	r3, [r3, #12]
 800ed44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ed48:	d867      	bhi.n	800ee1a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ed4a:	e030      	b.n	800edae <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	689b      	ldr	r3, [r3, #8]
 800ed52:	f003 0301 	and.w	r3, r3, #1
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d117      	bne.n	800ed8a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	f103 020c 	add.w	r2, r3, #12
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed66:	7812      	ldrb	r2, [r2, #0]
 800ed68:	b2d2      	uxtb	r2, r2
 800ed6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed70:	1c5a      	adds	r2, r3, #1
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	3b01      	subs	r3, #1
 800ed80:	b29a      	uxth	r2, r3
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ed88:	e011      	b.n	800edae <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed8a:	f7fc fcc9 	bl	800b720 <HAL_GetTick>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	1ad3      	subs	r3, r2, r3
 800ed94:	683a      	ldr	r2, [r7, #0]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d803      	bhi.n	800eda2 <HAL_SPI_Receive+0x19c>
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda0:	d102      	bne.n	800eda8 <HAL_SPI_Receive+0x1a2>
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d102      	bne.n	800edae <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800eda8:	2303      	movs	r3, #3
 800edaa:	75fb      	strb	r3, [r7, #23]
          goto error;
 800edac:	e04e      	b.n	800ee4c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800edb4:	b29b      	uxth	r3, r3
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1c8      	bne.n	800ed4c <HAL_SPI_Receive+0x146>
 800edba:	e034      	b.n	800ee26 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	f003 0301 	and.w	r3, r3, #1
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d115      	bne.n	800edf6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	68da      	ldr	r2, [r3, #12]
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edd4:	b292      	uxth	r2, r2
 800edd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eddc:	1c9a      	adds	r2, r3, #2
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ede8:	b29b      	uxth	r3, r3
 800edea:	3b01      	subs	r3, #1
 800edec:	b29a      	uxth	r2, r3
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800edf4:	e011      	b.n	800ee1a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800edf6:	f7fc fc93 	bl	800b720 <HAL_GetTick>
 800edfa:	4602      	mov	r2, r0
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	1ad3      	subs	r3, r2, r3
 800ee00:	683a      	ldr	r2, [r7, #0]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d803      	bhi.n	800ee0e <HAL_SPI_Receive+0x208>
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee0c:	d102      	bne.n	800ee14 <HAL_SPI_Receive+0x20e>
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d102      	bne.n	800ee1a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800ee14:	2303      	movs	r3, #3
 800ee16:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ee18:	e018      	b.n	800ee4c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ee20:	b29b      	uxth	r3, r3
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d1ca      	bne.n	800edbc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ee26:	693a      	ldr	r2, [r7, #16]
 800ee28:	6839      	ldr	r1, [r7, #0]
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	f000 fb4c 	bl	800f4c8 <SPI_EndRxTransaction>
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d002      	beq.n	800ee3c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2220      	movs	r2, #32
 800ee3a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d002      	beq.n	800ee4a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800ee44:	2301      	movs	r3, #1
 800ee46:	75fb      	strb	r3, [r7, #23]
 800ee48:	e000      	b.n	800ee4c <HAL_SPI_Receive+0x246>
  }

error :
 800ee4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2200      	movs	r2, #0
 800ee58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ee5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3718      	adds	r7, #24
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}

0800ee66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ee66:	b580      	push	{r7, lr}
 800ee68:	b08a      	sub	sp, #40	; 0x28
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	60f8      	str	r0, [r7, #12]
 800ee6e:	60b9      	str	r1, [r7, #8]
 800ee70:	607a      	str	r2, [r7, #4]
 800ee72:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ee74:	2301      	movs	r3, #1
 800ee76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d101      	bne.n	800ee8c <HAL_SPI_TransmitReceive+0x26>
 800ee88:	2302      	movs	r3, #2
 800ee8a:	e1fb      	b.n	800f284 <HAL_SPI_TransmitReceive+0x41e>
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2201      	movs	r2, #1
 800ee90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ee94:	f7fc fc44 	bl	800b720 <HAL_GetTick>
 800ee98:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800eea0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	685b      	ldr	r3, [r3, #4]
 800eea6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800eea8:	887b      	ldrh	r3, [r7, #2]
 800eeaa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800eeac:	887b      	ldrh	r3, [r7, #2]
 800eeae:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800eeb0:	7efb      	ldrb	r3, [r7, #27]
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	d00e      	beq.n	800eed4 <HAL_SPI_TransmitReceive+0x6e>
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eebc:	d106      	bne.n	800eecc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	689b      	ldr	r3, [r3, #8]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d102      	bne.n	800eecc <HAL_SPI_TransmitReceive+0x66>
 800eec6:	7efb      	ldrb	r3, [r7, #27]
 800eec8:	2b04      	cmp	r3, #4
 800eeca:	d003      	beq.n	800eed4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800eecc:	2302      	movs	r3, #2
 800eece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800eed2:	e1cd      	b.n	800f270 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d005      	beq.n	800eee6 <HAL_SPI_TransmitReceive+0x80>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d002      	beq.n	800eee6 <HAL_SPI_TransmitReceive+0x80>
 800eee0:	887b      	ldrh	r3, [r7, #2]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d103      	bne.n	800eeee <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800eee6:	2301      	movs	r3, #1
 800eee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800eeec:	e1c0      	b.n	800f270 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	2b04      	cmp	r3, #4
 800eef8:	d003      	beq.n	800ef02 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2205      	movs	r2, #5
 800eefe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2200      	movs	r2, #0
 800ef06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	887a      	ldrh	r2, [r7, #2]
 800ef12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	887a      	ldrh	r2, [r7, #2]
 800ef1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	68ba      	ldr	r2, [r7, #8]
 800ef22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	887a      	ldrh	r2, [r7, #2]
 800ef28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	887a      	ldrh	r2, [r7, #2]
 800ef2e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2200      	movs	r2, #0
 800ef34:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ef44:	d802      	bhi.n	800ef4c <HAL_SPI_TransmitReceive+0xe6>
 800ef46:	8a3b      	ldrh	r3, [r7, #16]
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d908      	bls.n	800ef5e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	685a      	ldr	r2, [r3, #4]
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ef5a:	605a      	str	r2, [r3, #4]
 800ef5c:	e007      	b.n	800ef6e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	685a      	ldr	r2, [r3, #4]
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ef6c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef78:	2b40      	cmp	r3, #64	; 0x40
 800ef7a:	d007      	beq.n	800ef8c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	681a      	ldr	r2, [r3, #0]
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	68db      	ldr	r3, [r3, #12]
 800ef90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ef94:	d97c      	bls.n	800f090 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d002      	beq.n	800efa4 <HAL_SPI_TransmitReceive+0x13e>
 800ef9e:	8a7b      	ldrh	r3, [r7, #18]
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	d169      	bne.n	800f078 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efa8:	881a      	ldrh	r2, [r3, #0]
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efb4:	1c9a      	adds	r2, r3, #2
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	3b01      	subs	r3, #1
 800efc2:	b29a      	uxth	r2, r3
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800efc8:	e056      	b.n	800f078 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	f003 0302 	and.w	r3, r3, #2
 800efd4:	2b02      	cmp	r3, #2
 800efd6:	d11b      	bne.n	800f010 <HAL_SPI_TransmitReceive+0x1aa>
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800efdc:	b29b      	uxth	r3, r3
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d016      	beq.n	800f010 <HAL_SPI_TransmitReceive+0x1aa>
 800efe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d113      	bne.n	800f010 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efec:	881a      	ldrh	r2, [r3, #0]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eff8:	1c9a      	adds	r2, r3, #2
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f002:	b29b      	uxth	r3, r3
 800f004:	3b01      	subs	r3, #1
 800f006:	b29a      	uxth	r2, r3
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f00c:	2300      	movs	r3, #0
 800f00e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	689b      	ldr	r3, [r3, #8]
 800f016:	f003 0301 	and.w	r3, r3, #1
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	d11c      	bne.n	800f058 <HAL_SPI_TransmitReceive+0x1f2>
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f024:	b29b      	uxth	r3, r3
 800f026:	2b00      	cmp	r3, #0
 800f028:	d016      	beq.n	800f058 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	68da      	ldr	r2, [r3, #12]
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f034:	b292      	uxth	r2, r2
 800f036:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f03c:	1c9a      	adds	r2, r3, #2
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f048:	b29b      	uxth	r3, r3
 800f04a:	3b01      	subs	r3, #1
 800f04c:	b29a      	uxth	r2, r3
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f054:	2301      	movs	r3, #1
 800f056:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f058:	f7fc fb62 	bl	800b720 <HAL_GetTick>
 800f05c:	4602      	mov	r2, r0
 800f05e:	69fb      	ldr	r3, [r7, #28]
 800f060:	1ad3      	subs	r3, r2, r3
 800f062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f064:	429a      	cmp	r2, r3
 800f066:	d807      	bhi.n	800f078 <HAL_SPI_TransmitReceive+0x212>
 800f068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f06e:	d003      	beq.n	800f078 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800f070:	2303      	movs	r3, #3
 800f072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800f076:	e0fb      	b.n	800f270 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d1a3      	bne.n	800efca <HAL_SPI_TransmitReceive+0x164>
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f088:	b29b      	uxth	r3, r3
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d19d      	bne.n	800efca <HAL_SPI_TransmitReceive+0x164>
 800f08e:	e0df      	b.n	800f250 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d003      	beq.n	800f0a0 <HAL_SPI_TransmitReceive+0x23a>
 800f098:	8a7b      	ldrh	r3, [r7, #18]
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	f040 80cb 	bne.w	800f236 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	d912      	bls.n	800f0d0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0ae:	881a      	ldrh	r2, [r3, #0]
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0ba:	1c9a      	adds	r2, r3, #2
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f0c4:	b29b      	uxth	r3, r3
 800f0c6:	3b02      	subs	r3, #2
 800f0c8:	b29a      	uxth	r2, r3
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f0ce:	e0b2      	b.n	800f236 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	330c      	adds	r3, #12
 800f0da:	7812      	ldrb	r2, [r2, #0]
 800f0dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0e2:	1c5a      	adds	r2, r3, #1
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	3b01      	subs	r3, #1
 800f0f0:	b29a      	uxth	r2, r3
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f0f6:	e09e      	b.n	800f236 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	689b      	ldr	r3, [r3, #8]
 800f0fe:	f003 0302 	and.w	r3, r3, #2
 800f102:	2b02      	cmp	r3, #2
 800f104:	d134      	bne.n	800f170 <HAL_SPI_TransmitReceive+0x30a>
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f10a:	b29b      	uxth	r3, r3
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d02f      	beq.n	800f170 <HAL_SPI_TransmitReceive+0x30a>
 800f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f112:	2b01      	cmp	r3, #1
 800f114:	d12c      	bne.n	800f170 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d912      	bls.n	800f146 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f124:	881a      	ldrh	r2, [r3, #0]
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f130:	1c9a      	adds	r2, r3, #2
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	3b02      	subs	r3, #2
 800f13e:	b29a      	uxth	r2, r3
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f144:	e012      	b.n	800f16c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	330c      	adds	r3, #12
 800f150:	7812      	ldrb	r2, [r2, #0]
 800f152:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f158:	1c5a      	adds	r2, r3, #1
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f162:	b29b      	uxth	r3, r3
 800f164:	3b01      	subs	r3, #1
 800f166:	b29a      	uxth	r2, r3
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f16c:	2300      	movs	r3, #0
 800f16e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	689b      	ldr	r3, [r3, #8]
 800f176:	f003 0301 	and.w	r3, r3, #1
 800f17a:	2b01      	cmp	r3, #1
 800f17c:	d148      	bne.n	800f210 <HAL_SPI_TransmitReceive+0x3aa>
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f184:	b29b      	uxth	r3, r3
 800f186:	2b00      	cmp	r3, #0
 800f188:	d042      	beq.n	800f210 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f190:	b29b      	uxth	r3, r3
 800f192:	2b01      	cmp	r3, #1
 800f194:	d923      	bls.n	800f1de <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	68da      	ldr	r2, [r3, #12]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1a0:	b292      	uxth	r2, r2
 800f1a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1a8:	1c9a      	adds	r2, r3, #2
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	3b02      	subs	r3, #2
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d81f      	bhi.n	800f20c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	685a      	ldr	r2, [r3, #4]
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f1da:	605a      	str	r2, [r3, #4]
 800f1dc:	e016      	b.n	800f20c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f103 020c 	add.w	r2, r3, #12
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1ea:	7812      	ldrb	r2, [r2, #0]
 800f1ec:	b2d2      	uxtb	r2, r2
 800f1ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1f4:	1c5a      	adds	r2, r3, #1
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f200:	b29b      	uxth	r3, r3
 800f202:	3b01      	subs	r3, #1
 800f204:	b29a      	uxth	r2, r3
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f20c:	2301      	movs	r3, #1
 800f20e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f210:	f7fc fa86 	bl	800b720 <HAL_GetTick>
 800f214:	4602      	mov	r2, r0
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	1ad3      	subs	r3, r2, r3
 800f21a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d803      	bhi.n	800f228 <HAL_SPI_TransmitReceive+0x3c2>
 800f220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f226:	d102      	bne.n	800f22e <HAL_SPI_TransmitReceive+0x3c8>
 800f228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d103      	bne.n	800f236 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800f22e:	2303      	movs	r3, #3
 800f230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800f234:	e01c      	b.n	800f270 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f47f af5b 	bne.w	800f0f8 <HAL_SPI_TransmitReceive+0x292>
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f248:	b29b      	uxth	r3, r3
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	f47f af54 	bne.w	800f0f8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f250:	69fa      	ldr	r2, [r7, #28]
 800f252:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f254:	68f8      	ldr	r0, [r7, #12]
 800f256:	f000 f98f 	bl	800f578 <SPI_EndRxTxTransaction>
 800f25a:	4603      	mov	r3, r0
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d006      	beq.n	800f26e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800f260:	2301      	movs	r3, #1
 800f262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	2220      	movs	r2, #32
 800f26a:	661a      	str	r2, [r3, #96]	; 0x60
 800f26c:	e000      	b.n	800f270 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800f26e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2201      	movs	r2, #1
 800f274:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2200      	movs	r2, #0
 800f27c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800f284:	4618      	mov	r0, r3
 800f286:	3728      	adds	r7, #40	; 0x28
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b088      	sub	sp, #32
 800f290:	af00      	add	r7, sp, #0
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	60b9      	str	r1, [r7, #8]
 800f296:	603b      	str	r3, [r7, #0]
 800f298:	4613      	mov	r3, r2
 800f29a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f29c:	f7fc fa40 	bl	800b720 <HAL_GetTick>
 800f2a0:	4602      	mov	r2, r0
 800f2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a4:	1a9b      	subs	r3, r3, r2
 800f2a6:	683a      	ldr	r2, [r7, #0]
 800f2a8:	4413      	add	r3, r2
 800f2aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f2ac:	f7fc fa38 	bl	800b720 <HAL_GetTick>
 800f2b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f2b2:	4b39      	ldr	r3, [pc, #228]	; (800f398 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	015b      	lsls	r3, r3, #5
 800f2b8:	0d1b      	lsrs	r3, r3, #20
 800f2ba:	69fa      	ldr	r2, [r7, #28]
 800f2bc:	fb02 f303 	mul.w	r3, r2, r3
 800f2c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f2c2:	e054      	b.n	800f36e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ca:	d050      	beq.n	800f36e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f2cc:	f7fc fa28 	bl	800b720 <HAL_GetTick>
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	69bb      	ldr	r3, [r7, #24]
 800f2d4:	1ad3      	subs	r3, r2, r3
 800f2d6:	69fa      	ldr	r2, [r7, #28]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d902      	bls.n	800f2e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d13d      	bne.n	800f35e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	685a      	ldr	r2, [r3, #4]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f2f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f2fa:	d111      	bne.n	800f320 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	689b      	ldr	r3, [r3, #8]
 800f300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f304:	d004      	beq.n	800f310 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	689b      	ldr	r3, [r3, #8]
 800f30a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f30e:	d107      	bne.n	800f320 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f31e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f328:	d10f      	bne.n	800f34a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	681a      	ldr	r2, [r3, #0]
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f338:	601a      	str	r2, [r3, #0]
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	681a      	ldr	r2, [r3, #0]
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f348:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2201      	movs	r2, #1
 800f34e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2200      	movs	r2, #0
 800f356:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f35a:	2303      	movs	r3, #3
 800f35c:	e017      	b.n	800f38e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d101      	bne.n	800f368 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f364:	2300      	movs	r3, #0
 800f366:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	3b01      	subs	r3, #1
 800f36c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	689a      	ldr	r2, [r3, #8]
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	4013      	ands	r3, r2
 800f378:	68ba      	ldr	r2, [r7, #8]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	bf0c      	ite	eq
 800f37e:	2301      	moveq	r3, #1
 800f380:	2300      	movne	r3, #0
 800f382:	b2db      	uxtb	r3, r3
 800f384:	461a      	mov	r2, r3
 800f386:	79fb      	ldrb	r3, [r7, #7]
 800f388:	429a      	cmp	r2, r3
 800f38a:	d19b      	bne.n	800f2c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f38c:	2300      	movs	r3, #0
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3720      	adds	r7, #32
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	20000094 	.word	0x20000094

0800f39c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b08a      	sub	sp, #40	; 0x28
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	60b9      	str	r1, [r7, #8]
 800f3a6:	607a      	str	r2, [r7, #4]
 800f3a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f3ae:	f7fc f9b7 	bl	800b720 <HAL_GetTick>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b6:	1a9b      	subs	r3, r3, r2
 800f3b8:	683a      	ldr	r2, [r7, #0]
 800f3ba:	4413      	add	r3, r2
 800f3bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800f3be:	f7fc f9af 	bl	800b720 <HAL_GetTick>
 800f3c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	330c      	adds	r3, #12
 800f3ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f3cc:	4b3d      	ldr	r3, [pc, #244]	; (800f4c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	4613      	mov	r3, r2
 800f3d2:	009b      	lsls	r3, r3, #2
 800f3d4:	4413      	add	r3, r2
 800f3d6:	00da      	lsls	r2, r3, #3
 800f3d8:	1ad3      	subs	r3, r2, r3
 800f3da:	0d1b      	lsrs	r3, r3, #20
 800f3dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3de:	fb02 f303 	mul.w	r3, r2, r3
 800f3e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f3e4:	e060      	b.n	800f4a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f3ec:	d107      	bne.n	800f3fe <SPI_WaitFifoStateUntilTimeout+0x62>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d104      	bne.n	800f3fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f3fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f404:	d050      	beq.n	800f4a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f406:	f7fc f98b 	bl	800b720 <HAL_GetTick>
 800f40a:	4602      	mov	r2, r0
 800f40c:	6a3b      	ldr	r3, [r7, #32]
 800f40e:	1ad3      	subs	r3, r2, r3
 800f410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f412:	429a      	cmp	r2, r3
 800f414:	d902      	bls.n	800f41c <SPI_WaitFifoStateUntilTimeout+0x80>
 800f416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d13d      	bne.n	800f498 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	685a      	ldr	r2, [r3, #4]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f42a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f434:	d111      	bne.n	800f45a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f43e:	d004      	beq.n	800f44a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f448:	d107      	bne.n	800f45a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f458:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f45e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f462:	d10f      	bne.n	800f484 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f472:	601a      	str	r2, [r3, #0]
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	681a      	ldr	r2, [r3, #0]
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f482:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2201      	movs	r2, #1
 800f488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2200      	movs	r2, #0
 800f490:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f494:	2303      	movs	r3, #3
 800f496:	e010      	b.n	800f4ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d101      	bne.n	800f4a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800f4a2:	69bb      	ldr	r3, [r7, #24]
 800f4a4:	3b01      	subs	r3, #1
 800f4a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	689a      	ldr	r2, [r3, #8]
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	4013      	ands	r3, r2
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d196      	bne.n	800f3e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800f4b8:	2300      	movs	r3, #0
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3728      	adds	r7, #40	; 0x28
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	20000094 	.word	0x20000094

0800f4c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b086      	sub	sp, #24
 800f4cc:	af02      	add	r7, sp, #8
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	685b      	ldr	r3, [r3, #4]
 800f4d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f4dc:	d111      	bne.n	800f502 <SPI_EndRxTransaction+0x3a>
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	689b      	ldr	r3, [r3, #8]
 800f4e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4e6:	d004      	beq.n	800f4f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	689b      	ldr	r3, [r3, #8]
 800f4ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4f0:	d107      	bne.n	800f502 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f500:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	9300      	str	r3, [sp, #0]
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	2200      	movs	r2, #0
 800f50a:	2180      	movs	r1, #128	; 0x80
 800f50c:	68f8      	ldr	r0, [r7, #12]
 800f50e:	f7ff febd 	bl	800f28c <SPI_WaitFlagStateUntilTimeout>
 800f512:	4603      	mov	r3, r0
 800f514:	2b00      	cmp	r3, #0
 800f516:	d007      	beq.n	800f528 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f51c:	f043 0220 	orr.w	r2, r3, #32
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f524:	2303      	movs	r3, #3
 800f526:	e023      	b.n	800f570 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f530:	d11d      	bne.n	800f56e <SPI_EndRxTransaction+0xa6>
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	689b      	ldr	r3, [r3, #8]
 800f536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f53a:	d004      	beq.n	800f546 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	689b      	ldr	r3, [r3, #8]
 800f540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f544:	d113      	bne.n	800f56e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	9300      	str	r3, [sp, #0]
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	2200      	movs	r2, #0
 800f54e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	f7ff ff22 	bl	800f39c <SPI_WaitFifoStateUntilTimeout>
 800f558:	4603      	mov	r3, r0
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d007      	beq.n	800f56e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f562:	f043 0220 	orr.w	r2, r3, #32
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800f56a:	2303      	movs	r3, #3
 800f56c:	e000      	b.n	800f570 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800f56e:	2300      	movs	r3, #0
}
 800f570:	4618      	mov	r0, r3
 800f572:	3710      	adds	r7, #16
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}

0800f578 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b086      	sub	sp, #24
 800f57c:	af02      	add	r7, sp, #8
 800f57e:	60f8      	str	r0, [r7, #12]
 800f580:	60b9      	str	r1, [r7, #8]
 800f582:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800f590:	68f8      	ldr	r0, [r7, #12]
 800f592:	f7ff ff03 	bl	800f39c <SPI_WaitFifoStateUntilTimeout>
 800f596:	4603      	mov	r3, r0
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d007      	beq.n	800f5ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5a0:	f043 0220 	orr.w	r2, r3, #32
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f5a8:	2303      	movs	r3, #3
 800f5aa:	e027      	b.n	800f5fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	9300      	str	r3, [sp, #0]
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	2180      	movs	r1, #128	; 0x80
 800f5b6:	68f8      	ldr	r0, [r7, #12]
 800f5b8:	f7ff fe68 	bl	800f28c <SPI_WaitFlagStateUntilTimeout>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d007      	beq.n	800f5d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5c6:	f043 0220 	orr.w	r2, r3, #32
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f5ce:	2303      	movs	r3, #3
 800f5d0:	e014      	b.n	800f5fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	9300      	str	r3, [sp, #0]
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f5de:	68f8      	ldr	r0, [r7, #12]
 800f5e0:	f7ff fedc 	bl	800f39c <SPI_WaitFifoStateUntilTimeout>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d007      	beq.n	800f5fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5ee:	f043 0220 	orr.w	r2, r3, #32
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f5f6:	2303      	movs	r3, #3
 800f5f8:	e000      	b.n	800f5fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f5fa:	2300      	movs	r3, #0
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3710      	adds	r7, #16
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d101      	bne.n	800f616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f612:	2301      	movs	r3, #1
 800f614:	e049      	b.n	800f6aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d106      	bne.n	800f630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2200      	movs	r2, #0
 800f626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f7fb feb2 	bl	800b394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2202      	movs	r2, #2
 800f634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	3304      	adds	r3, #4
 800f640:	4619      	mov	r1, r3
 800f642:	4610      	mov	r0, r2
 800f644:	f000 fd60 	bl	8010108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2201      	movs	r2, #1
 800f64c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2201      	movs	r2, #1
 800f654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2201      	movs	r2, #1
 800f65c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2201      	movs	r2, #1
 800f664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2201      	movs	r2, #1
 800f66c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2201      	movs	r2, #1
 800f674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2201      	movs	r2, #1
 800f67c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2201      	movs	r2, #1
 800f684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2201      	movs	r2, #1
 800f68c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2201      	movs	r2, #1
 800f694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2201      	movs	r2, #1
 800f69c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2201      	movs	r2, #1
 800f6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f6a8:	2300      	movs	r3, #0
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3708      	adds	r7, #8
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
	...

0800f6b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b085      	sub	sp, #20
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d001      	beq.n	800f6cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	e04f      	b.n	800f76c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2202      	movs	r2, #2
 800f6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	68da      	ldr	r2, [r3, #12]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f042 0201 	orr.w	r2, r2, #1
 800f6e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a23      	ldr	r2, [pc, #140]	; (800f778 <HAL_TIM_Base_Start_IT+0xc4>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d01d      	beq.n	800f72a <HAL_TIM_Base_Start_IT+0x76>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6f6:	d018      	beq.n	800f72a <HAL_TIM_Base_Start_IT+0x76>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4a1f      	ldr	r2, [pc, #124]	; (800f77c <HAL_TIM_Base_Start_IT+0xc8>)
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d013      	beq.n	800f72a <HAL_TIM_Base_Start_IT+0x76>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	4a1e      	ldr	r2, [pc, #120]	; (800f780 <HAL_TIM_Base_Start_IT+0xcc>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d00e      	beq.n	800f72a <HAL_TIM_Base_Start_IT+0x76>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4a1c      	ldr	r2, [pc, #112]	; (800f784 <HAL_TIM_Base_Start_IT+0xd0>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d009      	beq.n	800f72a <HAL_TIM_Base_Start_IT+0x76>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	4a1b      	ldr	r2, [pc, #108]	; (800f788 <HAL_TIM_Base_Start_IT+0xd4>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d004      	beq.n	800f72a <HAL_TIM_Base_Start_IT+0x76>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	4a19      	ldr	r2, [pc, #100]	; (800f78c <HAL_TIM_Base_Start_IT+0xd8>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d115      	bne.n	800f756 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	689a      	ldr	r2, [r3, #8]
 800f730:	4b17      	ldr	r3, [pc, #92]	; (800f790 <HAL_TIM_Base_Start_IT+0xdc>)
 800f732:	4013      	ands	r3, r2
 800f734:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2b06      	cmp	r3, #6
 800f73a:	d015      	beq.n	800f768 <HAL_TIM_Base_Start_IT+0xb4>
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f742:	d011      	beq.n	800f768 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f042 0201 	orr.w	r2, r2, #1
 800f752:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f754:	e008      	b.n	800f768 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	681a      	ldr	r2, [r3, #0]
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f042 0201 	orr.w	r2, r2, #1
 800f764:	601a      	str	r2, [r3, #0]
 800f766:	e000      	b.n	800f76a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f768:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f76a:	2300      	movs	r3, #0
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3714      	adds	r7, #20
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr
 800f778:	40012c00 	.word	0x40012c00
 800f77c:	40000400 	.word	0x40000400
 800f780:	40000800 	.word	0x40000800
 800f784:	40000c00 	.word	0x40000c00
 800f788:	40013400 	.word	0x40013400
 800f78c:	40014000 	.word	0x40014000
 800f790:	00010007 	.word	0x00010007

0800f794 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d101      	bne.n	800f7a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	e049      	b.n	800f83a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d106      	bne.n	800f7c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f000 f841 	bl	800f842 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2202      	movs	r2, #2
 800f7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	3304      	adds	r3, #4
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	4610      	mov	r0, r2
 800f7d4:	f000 fc98 	bl	8010108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2201      	movs	r2, #1
 800f7dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2201      	movs	r2, #1
 800f7e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2201      	movs	r2, #1
 800f7ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2201      	movs	r2, #1
 800f7f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2201      	movs	r2, #1
 800f804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2201      	movs	r2, #1
 800f80c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2201      	movs	r2, #1
 800f814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2201      	movs	r2, #1
 800f81c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2201      	movs	r2, #1
 800f824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2201      	movs	r2, #1
 800f82c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2201      	movs	r2, #1
 800f834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f838:	2300      	movs	r3, #0
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3708      	adds	r7, #8
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}

0800f842 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f842:	b480      	push	{r7}
 800f844:	b083      	sub	sp, #12
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f84a:	bf00      	nop
 800f84c:	370c      	adds	r7, #12
 800f84e:	46bd      	mov	sp, r7
 800f850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f854:	4770      	bx	lr

0800f856 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f856:	b580      	push	{r7, lr}
 800f858:	b086      	sub	sp, #24
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
 800f85e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d101      	bne.n	800f86a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f866:	2301      	movs	r3, #1
 800f868:	e097      	b.n	800f99a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f870:	b2db      	uxtb	r3, r3
 800f872:	2b00      	cmp	r3, #0
 800f874:	d106      	bne.n	800f884 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2200      	movs	r2, #0
 800f87a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f7fb fda6 	bl	800b3d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2202      	movs	r2, #2
 800f888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	689b      	ldr	r3, [r3, #8]
 800f892:	687a      	ldr	r2, [r7, #4]
 800f894:	6812      	ldr	r2, [r2, #0]
 800f896:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800f89a:	f023 0307 	bic.w	r3, r3, #7
 800f89e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681a      	ldr	r2, [r3, #0]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	3304      	adds	r3, #4
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	4610      	mov	r0, r2
 800f8ac:	f000 fc2c 	bl	8010108 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	689b      	ldr	r3, [r3, #8]
 800f8b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	699b      	ldr	r3, [r3, #24]
 800f8be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	6a1b      	ldr	r3, [r3, #32]
 800f8c6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	697a      	ldr	r2, [r7, #20]
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f8d2:	693b      	ldr	r3, [r7, #16]
 800f8d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8d8:	f023 0303 	bic.w	r3, r3, #3
 800f8dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	689a      	ldr	r2, [r3, #8]
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	699b      	ldr	r3, [r3, #24]
 800f8e6:	021b      	lsls	r3, r3, #8
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	693a      	ldr	r2, [r7, #16]
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f8f6:	f023 030c 	bic.w	r3, r3, #12
 800f8fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	68da      	ldr	r2, [r3, #12]
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	69db      	ldr	r3, [r3, #28]
 800f910:	021b      	lsls	r3, r3, #8
 800f912:	4313      	orrs	r3, r2
 800f914:	693a      	ldr	r2, [r7, #16]
 800f916:	4313      	orrs	r3, r2
 800f918:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	691b      	ldr	r3, [r3, #16]
 800f91e:	011a      	lsls	r2, r3, #4
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	6a1b      	ldr	r3, [r3, #32]
 800f924:	031b      	lsls	r3, r3, #12
 800f926:	4313      	orrs	r3, r2
 800f928:	693a      	ldr	r2, [r7, #16]
 800f92a:	4313      	orrs	r3, r2
 800f92c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f934:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f93c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	685a      	ldr	r2, [r3, #4]
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	695b      	ldr	r3, [r3, #20]
 800f946:	011b      	lsls	r3, r3, #4
 800f948:	4313      	orrs	r3, r2
 800f94a:	68fa      	ldr	r2, [r7, #12]
 800f94c:	4313      	orrs	r3, r2
 800f94e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	697a      	ldr	r2, [r7, #20]
 800f956:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	693a      	ldr	r2, [r7, #16]
 800f95e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	68fa      	ldr	r2, [r7, #12]
 800f966:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2201      	movs	r2, #1
 800f96c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2201      	movs	r2, #1
 800f974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2201      	movs	r2, #1
 800f97c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2201      	movs	r2, #1
 800f984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2201      	movs	r2, #1
 800f98c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2201      	movs	r2, #1
 800f994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f998:	2300      	movs	r3, #0
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3718      	adds	r7, #24
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}

0800f9a2 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f9a2:	b580      	push	{r7, lr}
 800f9a4:	b084      	sub	sp, #16
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	6078      	str	r0, [r7, #4]
 800f9aa:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f9b2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f9ba:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9c2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9ca:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d110      	bne.n	800f9f4 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f9d2:	7bfb      	ldrb	r3, [r7, #15]
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d102      	bne.n	800f9de <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800f9d8:	7b7b      	ldrb	r3, [r7, #13]
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	d001      	beq.n	800f9e2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800f9de:	2301      	movs	r3, #1
 800f9e0:	e069      	b.n	800fab6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2202      	movs	r2, #2
 800f9e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2202      	movs	r2, #2
 800f9ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9f2:	e031      	b.n	800fa58 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	2b04      	cmp	r3, #4
 800f9f8:	d110      	bne.n	800fa1c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800f9fa:	7bbb      	ldrb	r3, [r7, #14]
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	d102      	bne.n	800fa06 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800fa00:	7b3b      	ldrb	r3, [r7, #12]
 800fa02:	2b01      	cmp	r3, #1
 800fa04:	d001      	beq.n	800fa0a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800fa06:	2301      	movs	r3, #1
 800fa08:	e055      	b.n	800fab6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2202      	movs	r2, #2
 800fa0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2202      	movs	r2, #2
 800fa16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa1a:	e01d      	b.n	800fa58 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800fa1c:	7bfb      	ldrb	r3, [r7, #15]
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	d108      	bne.n	800fa34 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800fa22:	7bbb      	ldrb	r3, [r7, #14]
 800fa24:	2b01      	cmp	r3, #1
 800fa26:	d105      	bne.n	800fa34 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800fa28:	7b7b      	ldrb	r3, [r7, #13]
 800fa2a:	2b01      	cmp	r3, #1
 800fa2c:	d102      	bne.n	800fa34 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800fa2e:	7b3b      	ldrb	r3, [r7, #12]
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	d001      	beq.n	800fa38 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800fa34:	2301      	movs	r3, #1
 800fa36:	e03e      	b.n	800fab6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2202      	movs	r2, #2
 800fa3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2202      	movs	r2, #2
 800fa44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2202      	movs	r2, #2
 800fa4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2202      	movs	r2, #2
 800fa54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d003      	beq.n	800fa66 <HAL_TIM_Encoder_Start+0xc4>
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	2b04      	cmp	r3, #4
 800fa62:	d008      	beq.n	800fa76 <HAL_TIM_Encoder_Start+0xd4>
 800fa64:	e00f      	b.n	800fa86 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	2100      	movs	r1, #0
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f000 ff54 	bl	801091c <TIM_CCxChannelCmd>
      break;
 800fa74:	e016      	b.n	800faa4 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	2104      	movs	r1, #4
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f000 ff4c 	bl	801091c <TIM_CCxChannelCmd>
      break;
 800fa84:	e00e      	b.n	800faa4 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	2100      	movs	r1, #0
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f000 ff44 	bl	801091c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	2104      	movs	r1, #4
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f000 ff3d 	bl	801091c <TIM_CCxChannelCmd>
      break;
 800faa2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	f042 0201 	orr.w	r2, r2, #1
 800fab2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}

0800fabe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fabe:	b580      	push	{r7, lr}
 800fac0:	b082      	sub	sp, #8
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	691b      	ldr	r3, [r3, #16]
 800facc:	f003 0302 	and.w	r3, r3, #2
 800fad0:	2b02      	cmp	r3, #2
 800fad2:	d122      	bne.n	800fb1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	68db      	ldr	r3, [r3, #12]
 800fada:	f003 0302 	and.w	r3, r3, #2
 800fade:	2b02      	cmp	r3, #2
 800fae0:	d11b      	bne.n	800fb1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	f06f 0202 	mvn.w	r2, #2
 800faea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2201      	movs	r2, #1
 800faf0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	699b      	ldr	r3, [r3, #24]
 800faf8:	f003 0303 	and.w	r3, r3, #3
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d003      	beq.n	800fb08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f000 fae2 	bl	80100ca <HAL_TIM_IC_CaptureCallback>
 800fb06:	e005      	b.n	800fb14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f000 fad4 	bl	80100b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 fae5 	bl	80100de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2200      	movs	r2, #0
 800fb18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	691b      	ldr	r3, [r3, #16]
 800fb20:	f003 0304 	and.w	r3, r3, #4
 800fb24:	2b04      	cmp	r3, #4
 800fb26:	d122      	bne.n	800fb6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	68db      	ldr	r3, [r3, #12]
 800fb2e:	f003 0304 	and.w	r3, r3, #4
 800fb32:	2b04      	cmp	r3, #4
 800fb34:	d11b      	bne.n	800fb6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f06f 0204 	mvn.w	r2, #4
 800fb3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2202      	movs	r2, #2
 800fb44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	699b      	ldr	r3, [r3, #24]
 800fb4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d003      	beq.n	800fb5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 fab8 	bl	80100ca <HAL_TIM_IC_CaptureCallback>
 800fb5a:	e005      	b.n	800fb68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f000 faaa 	bl	80100b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 fabb 	bl	80100de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	691b      	ldr	r3, [r3, #16]
 800fb74:	f003 0308 	and.w	r3, r3, #8
 800fb78:	2b08      	cmp	r3, #8
 800fb7a:	d122      	bne.n	800fbc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	68db      	ldr	r3, [r3, #12]
 800fb82:	f003 0308 	and.w	r3, r3, #8
 800fb86:	2b08      	cmp	r3, #8
 800fb88:	d11b      	bne.n	800fbc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	f06f 0208 	mvn.w	r2, #8
 800fb92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2204      	movs	r2, #4
 800fb98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	69db      	ldr	r3, [r3, #28]
 800fba0:	f003 0303 	and.w	r3, r3, #3
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d003      	beq.n	800fbb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f000 fa8e 	bl	80100ca <HAL_TIM_IC_CaptureCallback>
 800fbae:	e005      	b.n	800fbbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f000 fa80 	bl	80100b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f000 fa91 	bl	80100de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	691b      	ldr	r3, [r3, #16]
 800fbc8:	f003 0310 	and.w	r3, r3, #16
 800fbcc:	2b10      	cmp	r3, #16
 800fbce:	d122      	bne.n	800fc16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	68db      	ldr	r3, [r3, #12]
 800fbd6:	f003 0310 	and.w	r3, r3, #16
 800fbda:	2b10      	cmp	r3, #16
 800fbdc:	d11b      	bne.n	800fc16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	f06f 0210 	mvn.w	r2, #16
 800fbe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2208      	movs	r2, #8
 800fbec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	69db      	ldr	r3, [r3, #28]
 800fbf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d003      	beq.n	800fc04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f000 fa64 	bl	80100ca <HAL_TIM_IC_CaptureCallback>
 800fc02:	e005      	b.n	800fc10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f000 fa56 	bl	80100b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f000 fa67 	bl	80100de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2200      	movs	r2, #0
 800fc14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	691b      	ldr	r3, [r3, #16]
 800fc1c:	f003 0301 	and.w	r3, r3, #1
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d10e      	bne.n	800fc42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	68db      	ldr	r3, [r3, #12]
 800fc2a:	f003 0301 	and.w	r3, r3, #1
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d107      	bne.n	800fc42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f06f 0201 	mvn.w	r2, #1
 800fc3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f7f8 fedf 	bl	8008a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	691b      	ldr	r3, [r3, #16]
 800fc48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc4c:	2b80      	cmp	r3, #128	; 0x80
 800fc4e:	d10e      	bne.n	800fc6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	68db      	ldr	r3, [r3, #12]
 800fc56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc5a:	2b80      	cmp	r3, #128	; 0x80
 800fc5c:	d107      	bne.n	800fc6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fc66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f000 ff0f 	bl	8010a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	691b      	ldr	r3, [r3, #16]
 800fc74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc7c:	d10e      	bne.n	800fc9c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc88:	2b80      	cmp	r3, #128	; 0x80
 800fc8a:	d107      	bne.n	800fc9c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fc94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f000 ff02 	bl	8010aa0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	691b      	ldr	r3, [r3, #16]
 800fca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fca6:	2b40      	cmp	r3, #64	; 0x40
 800fca8:	d10e      	bne.n	800fcc8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	68db      	ldr	r3, [r3, #12]
 800fcb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcb4:	2b40      	cmp	r3, #64	; 0x40
 800fcb6:	d107      	bne.n	800fcc8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fcc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 fa15 	bl	80100f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	691b      	ldr	r3, [r3, #16]
 800fcce:	f003 0320 	and.w	r3, r3, #32
 800fcd2:	2b20      	cmp	r3, #32
 800fcd4:	d10e      	bne.n	800fcf4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	68db      	ldr	r3, [r3, #12]
 800fcdc:	f003 0320 	and.w	r3, r3, #32
 800fce0:	2b20      	cmp	r3, #32
 800fce2:	d107      	bne.n	800fcf4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	f06f 0220 	mvn.w	r2, #32
 800fcec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f000 fec2 	bl	8010a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fcf4:	bf00      	nop
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b086      	sub	sp, #24
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	60b9      	str	r1, [r7, #8]
 800fd06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd12:	2b01      	cmp	r3, #1
 800fd14:	d101      	bne.n	800fd1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fd16:	2302      	movs	r3, #2
 800fd18:	e0ff      	b.n	800ff1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2b14      	cmp	r3, #20
 800fd26:	f200 80f0 	bhi.w	800ff0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fd2a:	a201      	add	r2, pc, #4	; (adr r2, 800fd30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd30:	0800fd85 	.word	0x0800fd85
 800fd34:	0800ff0b 	.word	0x0800ff0b
 800fd38:	0800ff0b 	.word	0x0800ff0b
 800fd3c:	0800ff0b 	.word	0x0800ff0b
 800fd40:	0800fdc5 	.word	0x0800fdc5
 800fd44:	0800ff0b 	.word	0x0800ff0b
 800fd48:	0800ff0b 	.word	0x0800ff0b
 800fd4c:	0800ff0b 	.word	0x0800ff0b
 800fd50:	0800fe07 	.word	0x0800fe07
 800fd54:	0800ff0b 	.word	0x0800ff0b
 800fd58:	0800ff0b 	.word	0x0800ff0b
 800fd5c:	0800ff0b 	.word	0x0800ff0b
 800fd60:	0800fe47 	.word	0x0800fe47
 800fd64:	0800ff0b 	.word	0x0800ff0b
 800fd68:	0800ff0b 	.word	0x0800ff0b
 800fd6c:	0800ff0b 	.word	0x0800ff0b
 800fd70:	0800fe89 	.word	0x0800fe89
 800fd74:	0800ff0b 	.word	0x0800ff0b
 800fd78:	0800ff0b 	.word	0x0800ff0b
 800fd7c:	0800ff0b 	.word	0x0800ff0b
 800fd80:	0800fec9 	.word	0x0800fec9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	68b9      	ldr	r1, [r7, #8]
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f000 fa56 	bl	801023c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	699a      	ldr	r2, [r3, #24]
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f042 0208 	orr.w	r2, r2, #8
 800fd9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	699a      	ldr	r2, [r3, #24]
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	f022 0204 	bic.w	r2, r2, #4
 800fdae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	6999      	ldr	r1, [r3, #24]
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	691a      	ldr	r2, [r3, #16]
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	430a      	orrs	r2, r1
 800fdc0:	619a      	str	r2, [r3, #24]
      break;
 800fdc2:	e0a5      	b.n	800ff10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	68b9      	ldr	r1, [r7, #8]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f000 fac6 	bl	801035c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	699a      	ldr	r2, [r3, #24]
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fdde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	699a      	ldr	r2, [r3, #24]
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fdee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	6999      	ldr	r1, [r3, #24]
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	691b      	ldr	r3, [r3, #16]
 800fdfa:	021a      	lsls	r2, r3, #8
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	430a      	orrs	r2, r1
 800fe02:	619a      	str	r2, [r3, #24]
      break;
 800fe04:	e084      	b.n	800ff10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	68b9      	ldr	r1, [r7, #8]
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f000 fb2f 	bl	8010470 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	69da      	ldr	r2, [r3, #28]
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f042 0208 	orr.w	r2, r2, #8
 800fe20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	69da      	ldr	r2, [r3, #28]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f022 0204 	bic.w	r2, r2, #4
 800fe30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	69d9      	ldr	r1, [r3, #28]
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	691a      	ldr	r2, [r3, #16]
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	430a      	orrs	r2, r1
 800fe42:	61da      	str	r2, [r3, #28]
      break;
 800fe44:	e064      	b.n	800ff10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	68b9      	ldr	r1, [r7, #8]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f000 fb97 	bl	8010580 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	69da      	ldr	r2, [r3, #28]
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	69da      	ldr	r2, [r3, #28]
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	69d9      	ldr	r1, [r3, #28]
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	691b      	ldr	r3, [r3, #16]
 800fe7c:	021a      	lsls	r2, r3, #8
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	430a      	orrs	r2, r1
 800fe84:	61da      	str	r2, [r3, #28]
      break;
 800fe86:	e043      	b.n	800ff10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	68b9      	ldr	r1, [r7, #8]
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f000 fbe0 	bl	8010654 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f042 0208 	orr.w	r2, r2, #8
 800fea2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	f022 0204 	bic.w	r2, r2, #4
 800feb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	691a      	ldr	r2, [r3, #16]
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	430a      	orrs	r2, r1
 800fec4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fec6:	e023      	b.n	800ff10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	68b9      	ldr	r1, [r7, #8]
 800fece:	4618      	mov	r0, r3
 800fed0:	f000 fc24 	bl	801071c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fee2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fef2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	691b      	ldr	r3, [r3, #16]
 800fefe:	021a      	lsls	r2, r3, #8
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	430a      	orrs	r2, r1
 800ff06:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ff08:	e002      	b.n	800ff10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	75fb      	strb	r3, [r7, #23]
      break;
 800ff0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	2200      	movs	r2, #0
 800ff14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ff18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3718      	adds	r7, #24
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop

0800ff24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b084      	sub	sp, #16
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff38:	2b01      	cmp	r3, #1
 800ff3a:	d101      	bne.n	800ff40 <HAL_TIM_ConfigClockSource+0x1c>
 800ff3c:	2302      	movs	r3, #2
 800ff3e:	e0b6      	b.n	80100ae <HAL_TIM_ConfigClockSource+0x18a>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2201      	movs	r2, #1
 800ff44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2202      	movs	r2, #2
 800ff4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	689b      	ldr	r3, [r3, #8]
 800ff56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ff5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ff62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ff6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	68ba      	ldr	r2, [r7, #8]
 800ff72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff7c:	d03e      	beq.n	800fffc <HAL_TIM_ConfigClockSource+0xd8>
 800ff7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff82:	f200 8087 	bhi.w	8010094 <HAL_TIM_ConfigClockSource+0x170>
 800ff86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff8a:	f000 8086 	beq.w	801009a <HAL_TIM_ConfigClockSource+0x176>
 800ff8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff92:	d87f      	bhi.n	8010094 <HAL_TIM_ConfigClockSource+0x170>
 800ff94:	2b70      	cmp	r3, #112	; 0x70
 800ff96:	d01a      	beq.n	800ffce <HAL_TIM_ConfigClockSource+0xaa>
 800ff98:	2b70      	cmp	r3, #112	; 0x70
 800ff9a:	d87b      	bhi.n	8010094 <HAL_TIM_ConfigClockSource+0x170>
 800ff9c:	2b60      	cmp	r3, #96	; 0x60
 800ff9e:	d050      	beq.n	8010042 <HAL_TIM_ConfigClockSource+0x11e>
 800ffa0:	2b60      	cmp	r3, #96	; 0x60
 800ffa2:	d877      	bhi.n	8010094 <HAL_TIM_ConfigClockSource+0x170>
 800ffa4:	2b50      	cmp	r3, #80	; 0x50
 800ffa6:	d03c      	beq.n	8010022 <HAL_TIM_ConfigClockSource+0xfe>
 800ffa8:	2b50      	cmp	r3, #80	; 0x50
 800ffaa:	d873      	bhi.n	8010094 <HAL_TIM_ConfigClockSource+0x170>
 800ffac:	2b40      	cmp	r3, #64	; 0x40
 800ffae:	d058      	beq.n	8010062 <HAL_TIM_ConfigClockSource+0x13e>
 800ffb0:	2b40      	cmp	r3, #64	; 0x40
 800ffb2:	d86f      	bhi.n	8010094 <HAL_TIM_ConfigClockSource+0x170>
 800ffb4:	2b30      	cmp	r3, #48	; 0x30
 800ffb6:	d064      	beq.n	8010082 <HAL_TIM_ConfigClockSource+0x15e>
 800ffb8:	2b30      	cmp	r3, #48	; 0x30
 800ffba:	d86b      	bhi.n	8010094 <HAL_TIM_ConfigClockSource+0x170>
 800ffbc:	2b20      	cmp	r3, #32
 800ffbe:	d060      	beq.n	8010082 <HAL_TIM_ConfigClockSource+0x15e>
 800ffc0:	2b20      	cmp	r3, #32
 800ffc2:	d867      	bhi.n	8010094 <HAL_TIM_ConfigClockSource+0x170>
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d05c      	beq.n	8010082 <HAL_TIM_ConfigClockSource+0x15e>
 800ffc8:	2b10      	cmp	r3, #16
 800ffca:	d05a      	beq.n	8010082 <HAL_TIM_ConfigClockSource+0x15e>
 800ffcc:	e062      	b.n	8010094 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6818      	ldr	r0, [r3, #0]
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	6899      	ldr	r1, [r3, #8]
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	685a      	ldr	r2, [r3, #4]
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	68db      	ldr	r3, [r3, #12]
 800ffde:	f000 fc7d 	bl	80108dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	689b      	ldr	r3, [r3, #8]
 800ffe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	68ba      	ldr	r2, [r7, #8]
 800fff8:	609a      	str	r2, [r3, #8]
      break;
 800fffa:	e04f      	b.n	801009c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6818      	ldr	r0, [r3, #0]
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	6899      	ldr	r1, [r3, #8]
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	685a      	ldr	r2, [r3, #4]
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	68db      	ldr	r3, [r3, #12]
 801000c:	f000 fc66 	bl	80108dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	689a      	ldr	r2, [r3, #8]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801001e:	609a      	str	r2, [r3, #8]
      break;
 8010020:	e03c      	b.n	801009c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6818      	ldr	r0, [r3, #0]
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	6859      	ldr	r1, [r3, #4]
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	461a      	mov	r2, r3
 8010030:	f000 fbda 	bl	80107e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	2150      	movs	r1, #80	; 0x50
 801003a:	4618      	mov	r0, r3
 801003c:	f000 fc33 	bl	80108a6 <TIM_ITRx_SetConfig>
      break;
 8010040:	e02c      	b.n	801009c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6818      	ldr	r0, [r3, #0]
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	6859      	ldr	r1, [r3, #4]
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	461a      	mov	r2, r3
 8010050:	f000 fbf9 	bl	8010846 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2160      	movs	r1, #96	; 0x60
 801005a:	4618      	mov	r0, r3
 801005c:	f000 fc23 	bl	80108a6 <TIM_ITRx_SetConfig>
      break;
 8010060:	e01c      	b.n	801009c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6818      	ldr	r0, [r3, #0]
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	6859      	ldr	r1, [r3, #4]
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	68db      	ldr	r3, [r3, #12]
 801006e:	461a      	mov	r2, r3
 8010070:	f000 fbba 	bl	80107e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	2140      	movs	r1, #64	; 0x40
 801007a:	4618      	mov	r0, r3
 801007c:	f000 fc13 	bl	80108a6 <TIM_ITRx_SetConfig>
      break;
 8010080:	e00c      	b.n	801009c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681a      	ldr	r2, [r3, #0]
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	4619      	mov	r1, r3
 801008c:	4610      	mov	r0, r2
 801008e:	f000 fc0a 	bl	80108a6 <TIM_ITRx_SetConfig>
      break;
 8010092:	e003      	b.n	801009c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8010094:	2301      	movs	r3, #1
 8010096:	73fb      	strb	r3, [r7, #15]
      break;
 8010098:	e000      	b.n	801009c <HAL_TIM_ConfigClockSource+0x178>
      break;
 801009a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2201      	movs	r2, #1
 80100a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2200      	movs	r2, #0
 80100a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80100ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3710      	adds	r7, #16
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}

080100b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80100b6:	b480      	push	{r7}
 80100b8:	b083      	sub	sp, #12
 80100ba:	af00      	add	r7, sp, #0
 80100bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80100be:	bf00      	nop
 80100c0:	370c      	adds	r7, #12
 80100c2:	46bd      	mov	sp, r7
 80100c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c8:	4770      	bx	lr

080100ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80100ca:	b480      	push	{r7}
 80100cc:	b083      	sub	sp, #12
 80100ce:	af00      	add	r7, sp, #0
 80100d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80100d2:	bf00      	nop
 80100d4:	370c      	adds	r7, #12
 80100d6:	46bd      	mov	sp, r7
 80100d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100dc:	4770      	bx	lr

080100de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80100de:	b480      	push	{r7}
 80100e0:	b083      	sub	sp, #12
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80100e6:	bf00      	nop
 80100e8:	370c      	adds	r7, #12
 80100ea:	46bd      	mov	sp, r7
 80100ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f0:	4770      	bx	lr

080100f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80100f2:	b480      	push	{r7}
 80100f4:	b083      	sub	sp, #12
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80100fa:	bf00      	nop
 80100fc:	370c      	adds	r7, #12
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr
	...

08010108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010108:	b480      	push	{r7}
 801010a:	b085      	sub	sp, #20
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	4a40      	ldr	r2, [pc, #256]	; (801021c <TIM_Base_SetConfig+0x114>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d013      	beq.n	8010148 <TIM_Base_SetConfig+0x40>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010126:	d00f      	beq.n	8010148 <TIM_Base_SetConfig+0x40>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	4a3d      	ldr	r2, [pc, #244]	; (8010220 <TIM_Base_SetConfig+0x118>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d00b      	beq.n	8010148 <TIM_Base_SetConfig+0x40>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	4a3c      	ldr	r2, [pc, #240]	; (8010224 <TIM_Base_SetConfig+0x11c>)
 8010134:	4293      	cmp	r3, r2
 8010136:	d007      	beq.n	8010148 <TIM_Base_SetConfig+0x40>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	4a3b      	ldr	r2, [pc, #236]	; (8010228 <TIM_Base_SetConfig+0x120>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d003      	beq.n	8010148 <TIM_Base_SetConfig+0x40>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	4a3a      	ldr	r2, [pc, #232]	; (801022c <TIM_Base_SetConfig+0x124>)
 8010144:	4293      	cmp	r3, r2
 8010146:	d108      	bne.n	801015a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801014e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	4313      	orrs	r3, r2
 8010158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	4a2f      	ldr	r2, [pc, #188]	; (801021c <TIM_Base_SetConfig+0x114>)
 801015e:	4293      	cmp	r3, r2
 8010160:	d01f      	beq.n	80101a2 <TIM_Base_SetConfig+0x9a>
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010168:	d01b      	beq.n	80101a2 <TIM_Base_SetConfig+0x9a>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	4a2c      	ldr	r2, [pc, #176]	; (8010220 <TIM_Base_SetConfig+0x118>)
 801016e:	4293      	cmp	r3, r2
 8010170:	d017      	beq.n	80101a2 <TIM_Base_SetConfig+0x9a>
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	4a2b      	ldr	r2, [pc, #172]	; (8010224 <TIM_Base_SetConfig+0x11c>)
 8010176:	4293      	cmp	r3, r2
 8010178:	d013      	beq.n	80101a2 <TIM_Base_SetConfig+0x9a>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	4a2a      	ldr	r2, [pc, #168]	; (8010228 <TIM_Base_SetConfig+0x120>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d00f      	beq.n	80101a2 <TIM_Base_SetConfig+0x9a>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4a29      	ldr	r2, [pc, #164]	; (801022c <TIM_Base_SetConfig+0x124>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d00b      	beq.n	80101a2 <TIM_Base_SetConfig+0x9a>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	4a28      	ldr	r2, [pc, #160]	; (8010230 <TIM_Base_SetConfig+0x128>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d007      	beq.n	80101a2 <TIM_Base_SetConfig+0x9a>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	4a27      	ldr	r2, [pc, #156]	; (8010234 <TIM_Base_SetConfig+0x12c>)
 8010196:	4293      	cmp	r3, r2
 8010198:	d003      	beq.n	80101a2 <TIM_Base_SetConfig+0x9a>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	4a26      	ldr	r2, [pc, #152]	; (8010238 <TIM_Base_SetConfig+0x130>)
 801019e:	4293      	cmp	r3, r2
 80101a0:	d108      	bne.n	80101b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	68db      	ldr	r3, [r3, #12]
 80101ae:	68fa      	ldr	r2, [r7, #12]
 80101b0:	4313      	orrs	r3, r2
 80101b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	695b      	ldr	r3, [r3, #20]
 80101be:	4313      	orrs	r3, r2
 80101c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	68fa      	ldr	r2, [r7, #12]
 80101c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	689a      	ldr	r2, [r3, #8]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	681a      	ldr	r2, [r3, #0]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	4a10      	ldr	r2, [pc, #64]	; (801021c <TIM_Base_SetConfig+0x114>)
 80101dc:	4293      	cmp	r3, r2
 80101de:	d00f      	beq.n	8010200 <TIM_Base_SetConfig+0xf8>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	4a12      	ldr	r2, [pc, #72]	; (801022c <TIM_Base_SetConfig+0x124>)
 80101e4:	4293      	cmp	r3, r2
 80101e6:	d00b      	beq.n	8010200 <TIM_Base_SetConfig+0xf8>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	4a11      	ldr	r2, [pc, #68]	; (8010230 <TIM_Base_SetConfig+0x128>)
 80101ec:	4293      	cmp	r3, r2
 80101ee:	d007      	beq.n	8010200 <TIM_Base_SetConfig+0xf8>
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	4a10      	ldr	r2, [pc, #64]	; (8010234 <TIM_Base_SetConfig+0x12c>)
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d003      	beq.n	8010200 <TIM_Base_SetConfig+0xf8>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	4a0f      	ldr	r2, [pc, #60]	; (8010238 <TIM_Base_SetConfig+0x130>)
 80101fc:	4293      	cmp	r3, r2
 80101fe:	d103      	bne.n	8010208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	691a      	ldr	r2, [r3, #16]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2201      	movs	r2, #1
 801020c:	615a      	str	r2, [r3, #20]
}
 801020e:	bf00      	nop
 8010210:	3714      	adds	r7, #20
 8010212:	46bd      	mov	sp, r7
 8010214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010218:	4770      	bx	lr
 801021a:	bf00      	nop
 801021c:	40012c00 	.word	0x40012c00
 8010220:	40000400 	.word	0x40000400
 8010224:	40000800 	.word	0x40000800
 8010228:	40000c00 	.word	0x40000c00
 801022c:	40013400 	.word	0x40013400
 8010230:	40014000 	.word	0x40014000
 8010234:	40014400 	.word	0x40014400
 8010238:	40014800 	.word	0x40014800

0801023c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801023c:	b480      	push	{r7}
 801023e:	b087      	sub	sp, #28
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6a1b      	ldr	r3, [r3, #32]
 801024a:	f023 0201 	bic.w	r2, r3, #1
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6a1b      	ldr	r3, [r3, #32]
 8010256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	699b      	ldr	r3, [r3, #24]
 8010262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801026a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801026e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f023 0303 	bic.w	r3, r3, #3
 8010276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	68fa      	ldr	r2, [r7, #12]
 801027e:	4313      	orrs	r3, r2
 8010280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	f023 0302 	bic.w	r3, r3, #2
 8010288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	689b      	ldr	r3, [r3, #8]
 801028e:	697a      	ldr	r2, [r7, #20]
 8010290:	4313      	orrs	r3, r2
 8010292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	4a2c      	ldr	r2, [pc, #176]	; (8010348 <TIM_OC1_SetConfig+0x10c>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d00f      	beq.n	80102bc <TIM_OC1_SetConfig+0x80>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	4a2b      	ldr	r2, [pc, #172]	; (801034c <TIM_OC1_SetConfig+0x110>)
 80102a0:	4293      	cmp	r3, r2
 80102a2:	d00b      	beq.n	80102bc <TIM_OC1_SetConfig+0x80>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	4a2a      	ldr	r2, [pc, #168]	; (8010350 <TIM_OC1_SetConfig+0x114>)
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d007      	beq.n	80102bc <TIM_OC1_SetConfig+0x80>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	4a29      	ldr	r2, [pc, #164]	; (8010354 <TIM_OC1_SetConfig+0x118>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d003      	beq.n	80102bc <TIM_OC1_SetConfig+0x80>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	4a28      	ldr	r2, [pc, #160]	; (8010358 <TIM_OC1_SetConfig+0x11c>)
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d10c      	bne.n	80102d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	f023 0308 	bic.w	r3, r3, #8
 80102c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	68db      	ldr	r3, [r3, #12]
 80102c8:	697a      	ldr	r2, [r7, #20]
 80102ca:	4313      	orrs	r3, r2
 80102cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	f023 0304 	bic.w	r3, r3, #4
 80102d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4a1b      	ldr	r2, [pc, #108]	; (8010348 <TIM_OC1_SetConfig+0x10c>)
 80102da:	4293      	cmp	r3, r2
 80102dc:	d00f      	beq.n	80102fe <TIM_OC1_SetConfig+0xc2>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	4a1a      	ldr	r2, [pc, #104]	; (801034c <TIM_OC1_SetConfig+0x110>)
 80102e2:	4293      	cmp	r3, r2
 80102e4:	d00b      	beq.n	80102fe <TIM_OC1_SetConfig+0xc2>
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	4a19      	ldr	r2, [pc, #100]	; (8010350 <TIM_OC1_SetConfig+0x114>)
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d007      	beq.n	80102fe <TIM_OC1_SetConfig+0xc2>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	4a18      	ldr	r2, [pc, #96]	; (8010354 <TIM_OC1_SetConfig+0x118>)
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d003      	beq.n	80102fe <TIM_OC1_SetConfig+0xc2>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	4a17      	ldr	r2, [pc, #92]	; (8010358 <TIM_OC1_SetConfig+0x11c>)
 80102fa:	4293      	cmp	r3, r2
 80102fc:	d111      	bne.n	8010322 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801030c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	695b      	ldr	r3, [r3, #20]
 8010312:	693a      	ldr	r2, [r7, #16]
 8010314:	4313      	orrs	r3, r2
 8010316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	699b      	ldr	r3, [r3, #24]
 801031c:	693a      	ldr	r2, [r7, #16]
 801031e:	4313      	orrs	r3, r2
 8010320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	693a      	ldr	r2, [r7, #16]
 8010326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	68fa      	ldr	r2, [r7, #12]
 801032c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	685a      	ldr	r2, [r3, #4]
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	697a      	ldr	r2, [r7, #20]
 801033a:	621a      	str	r2, [r3, #32]
}
 801033c:	bf00      	nop
 801033e:	371c      	adds	r7, #28
 8010340:	46bd      	mov	sp, r7
 8010342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010346:	4770      	bx	lr
 8010348:	40012c00 	.word	0x40012c00
 801034c:	40013400 	.word	0x40013400
 8010350:	40014000 	.word	0x40014000
 8010354:	40014400 	.word	0x40014400
 8010358:	40014800 	.word	0x40014800

0801035c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801035c:	b480      	push	{r7}
 801035e:	b087      	sub	sp, #28
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6a1b      	ldr	r3, [r3, #32]
 801036a:	f023 0210 	bic.w	r2, r3, #16
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6a1b      	ldr	r3, [r3, #32]
 8010376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	699b      	ldr	r3, [r3, #24]
 8010382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801038a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801038e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	021b      	lsls	r3, r3, #8
 801039e:	68fa      	ldr	r2, [r7, #12]
 80103a0:	4313      	orrs	r3, r2
 80103a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	f023 0320 	bic.w	r3, r3, #32
 80103aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	689b      	ldr	r3, [r3, #8]
 80103b0:	011b      	lsls	r3, r3, #4
 80103b2:	697a      	ldr	r2, [r7, #20]
 80103b4:	4313      	orrs	r3, r2
 80103b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	4a28      	ldr	r2, [pc, #160]	; (801045c <TIM_OC2_SetConfig+0x100>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d003      	beq.n	80103c8 <TIM_OC2_SetConfig+0x6c>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	4a27      	ldr	r2, [pc, #156]	; (8010460 <TIM_OC2_SetConfig+0x104>)
 80103c4:	4293      	cmp	r3, r2
 80103c6:	d10d      	bne.n	80103e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	011b      	lsls	r3, r3, #4
 80103d6:	697a      	ldr	r2, [r7, #20]
 80103d8:	4313      	orrs	r3, r2
 80103da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	4a1d      	ldr	r2, [pc, #116]	; (801045c <TIM_OC2_SetConfig+0x100>)
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d00f      	beq.n	801040c <TIM_OC2_SetConfig+0xb0>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	4a1c      	ldr	r2, [pc, #112]	; (8010460 <TIM_OC2_SetConfig+0x104>)
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d00b      	beq.n	801040c <TIM_OC2_SetConfig+0xb0>
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	4a1b      	ldr	r2, [pc, #108]	; (8010464 <TIM_OC2_SetConfig+0x108>)
 80103f8:	4293      	cmp	r3, r2
 80103fa:	d007      	beq.n	801040c <TIM_OC2_SetConfig+0xb0>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	4a1a      	ldr	r2, [pc, #104]	; (8010468 <TIM_OC2_SetConfig+0x10c>)
 8010400:	4293      	cmp	r3, r2
 8010402:	d003      	beq.n	801040c <TIM_OC2_SetConfig+0xb0>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	4a19      	ldr	r2, [pc, #100]	; (801046c <TIM_OC2_SetConfig+0x110>)
 8010408:	4293      	cmp	r3, r2
 801040a:	d113      	bne.n	8010434 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801041a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	695b      	ldr	r3, [r3, #20]
 8010420:	009b      	lsls	r3, r3, #2
 8010422:	693a      	ldr	r2, [r7, #16]
 8010424:	4313      	orrs	r3, r2
 8010426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	699b      	ldr	r3, [r3, #24]
 801042c:	009b      	lsls	r3, r3, #2
 801042e:	693a      	ldr	r2, [r7, #16]
 8010430:	4313      	orrs	r3, r2
 8010432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	693a      	ldr	r2, [r7, #16]
 8010438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	68fa      	ldr	r2, [r7, #12]
 801043e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	685a      	ldr	r2, [r3, #4]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	697a      	ldr	r2, [r7, #20]
 801044c:	621a      	str	r2, [r3, #32]
}
 801044e:	bf00      	nop
 8010450:	371c      	adds	r7, #28
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr
 801045a:	bf00      	nop
 801045c:	40012c00 	.word	0x40012c00
 8010460:	40013400 	.word	0x40013400
 8010464:	40014000 	.word	0x40014000
 8010468:	40014400 	.word	0x40014400
 801046c:	40014800 	.word	0x40014800

08010470 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010470:	b480      	push	{r7}
 8010472:	b087      	sub	sp, #28
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6a1b      	ldr	r3, [r3, #32]
 801047e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6a1b      	ldr	r3, [r3, #32]
 801048a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	69db      	ldr	r3, [r3, #28]
 8010496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801049e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f023 0303 	bic.w	r3, r3, #3
 80104aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	68fa      	ldr	r2, [r7, #12]
 80104b2:	4313      	orrs	r3, r2
 80104b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80104bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	689b      	ldr	r3, [r3, #8]
 80104c2:	021b      	lsls	r3, r3, #8
 80104c4:	697a      	ldr	r2, [r7, #20]
 80104c6:	4313      	orrs	r3, r2
 80104c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	4a27      	ldr	r2, [pc, #156]	; (801056c <TIM_OC3_SetConfig+0xfc>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d003      	beq.n	80104da <TIM_OC3_SetConfig+0x6a>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	4a26      	ldr	r2, [pc, #152]	; (8010570 <TIM_OC3_SetConfig+0x100>)
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d10d      	bne.n	80104f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80104e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	68db      	ldr	r3, [r3, #12]
 80104e6:	021b      	lsls	r3, r3, #8
 80104e8:	697a      	ldr	r2, [r7, #20]
 80104ea:	4313      	orrs	r3, r2
 80104ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80104f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	4a1c      	ldr	r2, [pc, #112]	; (801056c <TIM_OC3_SetConfig+0xfc>)
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d00f      	beq.n	801051e <TIM_OC3_SetConfig+0xae>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	4a1b      	ldr	r2, [pc, #108]	; (8010570 <TIM_OC3_SetConfig+0x100>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d00b      	beq.n	801051e <TIM_OC3_SetConfig+0xae>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	4a1a      	ldr	r2, [pc, #104]	; (8010574 <TIM_OC3_SetConfig+0x104>)
 801050a:	4293      	cmp	r3, r2
 801050c:	d007      	beq.n	801051e <TIM_OC3_SetConfig+0xae>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	4a19      	ldr	r2, [pc, #100]	; (8010578 <TIM_OC3_SetConfig+0x108>)
 8010512:	4293      	cmp	r3, r2
 8010514:	d003      	beq.n	801051e <TIM_OC3_SetConfig+0xae>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	4a18      	ldr	r2, [pc, #96]	; (801057c <TIM_OC3_SetConfig+0x10c>)
 801051a:	4293      	cmp	r3, r2
 801051c:	d113      	bne.n	8010546 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801051e:	693b      	ldr	r3, [r7, #16]
 8010520:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801052c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	695b      	ldr	r3, [r3, #20]
 8010532:	011b      	lsls	r3, r3, #4
 8010534:	693a      	ldr	r2, [r7, #16]
 8010536:	4313      	orrs	r3, r2
 8010538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	699b      	ldr	r3, [r3, #24]
 801053e:	011b      	lsls	r3, r3, #4
 8010540:	693a      	ldr	r2, [r7, #16]
 8010542:	4313      	orrs	r3, r2
 8010544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	693a      	ldr	r2, [r7, #16]
 801054a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	68fa      	ldr	r2, [r7, #12]
 8010550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	685a      	ldr	r2, [r3, #4]
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	697a      	ldr	r2, [r7, #20]
 801055e:	621a      	str	r2, [r3, #32]
}
 8010560:	bf00      	nop
 8010562:	371c      	adds	r7, #28
 8010564:	46bd      	mov	sp, r7
 8010566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056a:	4770      	bx	lr
 801056c:	40012c00 	.word	0x40012c00
 8010570:	40013400 	.word	0x40013400
 8010574:	40014000 	.word	0x40014000
 8010578:	40014400 	.word	0x40014400
 801057c:	40014800 	.word	0x40014800

08010580 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010580:	b480      	push	{r7}
 8010582:	b087      	sub	sp, #28
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6a1b      	ldr	r3, [r3, #32]
 801058e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6a1b      	ldr	r3, [r3, #32]
 801059a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	685b      	ldr	r3, [r3, #4]
 80105a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	69db      	ldr	r3, [r3, #28]
 80105a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80105ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80105ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	021b      	lsls	r3, r3, #8
 80105c2:	68fa      	ldr	r2, [r7, #12]
 80105c4:	4313      	orrs	r3, r2
 80105c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80105ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	689b      	ldr	r3, [r3, #8]
 80105d4:	031b      	lsls	r3, r3, #12
 80105d6:	693a      	ldr	r2, [r7, #16]
 80105d8:	4313      	orrs	r3, r2
 80105da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	4a18      	ldr	r2, [pc, #96]	; (8010640 <TIM_OC4_SetConfig+0xc0>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d00f      	beq.n	8010604 <TIM_OC4_SetConfig+0x84>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	4a17      	ldr	r2, [pc, #92]	; (8010644 <TIM_OC4_SetConfig+0xc4>)
 80105e8:	4293      	cmp	r3, r2
 80105ea:	d00b      	beq.n	8010604 <TIM_OC4_SetConfig+0x84>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	4a16      	ldr	r2, [pc, #88]	; (8010648 <TIM_OC4_SetConfig+0xc8>)
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d007      	beq.n	8010604 <TIM_OC4_SetConfig+0x84>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	4a15      	ldr	r2, [pc, #84]	; (801064c <TIM_OC4_SetConfig+0xcc>)
 80105f8:	4293      	cmp	r3, r2
 80105fa:	d003      	beq.n	8010604 <TIM_OC4_SetConfig+0x84>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	4a14      	ldr	r2, [pc, #80]	; (8010650 <TIM_OC4_SetConfig+0xd0>)
 8010600:	4293      	cmp	r3, r2
 8010602:	d109      	bne.n	8010618 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801060a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	695b      	ldr	r3, [r3, #20]
 8010610:	019b      	lsls	r3, r3, #6
 8010612:	697a      	ldr	r2, [r7, #20]
 8010614:	4313      	orrs	r3, r2
 8010616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	697a      	ldr	r2, [r7, #20]
 801061c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	68fa      	ldr	r2, [r7, #12]
 8010622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	685a      	ldr	r2, [r3, #4]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	693a      	ldr	r2, [r7, #16]
 8010630:	621a      	str	r2, [r3, #32]
}
 8010632:	bf00      	nop
 8010634:	371c      	adds	r7, #28
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr
 801063e:	bf00      	nop
 8010640:	40012c00 	.word	0x40012c00
 8010644:	40013400 	.word	0x40013400
 8010648:	40014000 	.word	0x40014000
 801064c:	40014400 	.word	0x40014400
 8010650:	40014800 	.word	0x40014800

08010654 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010654:	b480      	push	{r7}
 8010656:	b087      	sub	sp, #28
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6a1b      	ldr	r3, [r3, #32]
 8010662:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6a1b      	ldr	r3, [r3, #32]
 801066e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801067a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	68fa      	ldr	r2, [r7, #12]
 801068e:	4313      	orrs	r3, r2
 8010690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010698:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	689b      	ldr	r3, [r3, #8]
 801069e:	041b      	lsls	r3, r3, #16
 80106a0:	693a      	ldr	r2, [r7, #16]
 80106a2:	4313      	orrs	r3, r2
 80106a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	4a17      	ldr	r2, [pc, #92]	; (8010708 <TIM_OC5_SetConfig+0xb4>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d00f      	beq.n	80106ce <TIM_OC5_SetConfig+0x7a>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	4a16      	ldr	r2, [pc, #88]	; (801070c <TIM_OC5_SetConfig+0xb8>)
 80106b2:	4293      	cmp	r3, r2
 80106b4:	d00b      	beq.n	80106ce <TIM_OC5_SetConfig+0x7a>
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	4a15      	ldr	r2, [pc, #84]	; (8010710 <TIM_OC5_SetConfig+0xbc>)
 80106ba:	4293      	cmp	r3, r2
 80106bc:	d007      	beq.n	80106ce <TIM_OC5_SetConfig+0x7a>
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	4a14      	ldr	r2, [pc, #80]	; (8010714 <TIM_OC5_SetConfig+0xc0>)
 80106c2:	4293      	cmp	r3, r2
 80106c4:	d003      	beq.n	80106ce <TIM_OC5_SetConfig+0x7a>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	4a13      	ldr	r2, [pc, #76]	; (8010718 <TIM_OC5_SetConfig+0xc4>)
 80106ca:	4293      	cmp	r3, r2
 80106cc:	d109      	bne.n	80106e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80106d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	695b      	ldr	r3, [r3, #20]
 80106da:	021b      	lsls	r3, r3, #8
 80106dc:	697a      	ldr	r2, [r7, #20]
 80106de:	4313      	orrs	r3, r2
 80106e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	697a      	ldr	r2, [r7, #20]
 80106e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	68fa      	ldr	r2, [r7, #12]
 80106ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	685a      	ldr	r2, [r3, #4]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	693a      	ldr	r2, [r7, #16]
 80106fa:	621a      	str	r2, [r3, #32]
}
 80106fc:	bf00      	nop
 80106fe:	371c      	adds	r7, #28
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr
 8010708:	40012c00 	.word	0x40012c00
 801070c:	40013400 	.word	0x40013400
 8010710:	40014000 	.word	0x40014000
 8010714:	40014400 	.word	0x40014400
 8010718:	40014800 	.word	0x40014800

0801071c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801071c:	b480      	push	{r7}
 801071e:	b087      	sub	sp, #28
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6a1b      	ldr	r3, [r3, #32]
 801072a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6a1b      	ldr	r3, [r3, #32]
 8010736:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	685b      	ldr	r3, [r3, #4]
 801073c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801074a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801074e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	021b      	lsls	r3, r3, #8
 8010756:	68fa      	ldr	r2, [r7, #12]
 8010758:	4313      	orrs	r3, r2
 801075a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	689b      	ldr	r3, [r3, #8]
 8010768:	051b      	lsls	r3, r3, #20
 801076a:	693a      	ldr	r2, [r7, #16]
 801076c:	4313      	orrs	r3, r2
 801076e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	4a18      	ldr	r2, [pc, #96]	; (80107d4 <TIM_OC6_SetConfig+0xb8>)
 8010774:	4293      	cmp	r3, r2
 8010776:	d00f      	beq.n	8010798 <TIM_OC6_SetConfig+0x7c>
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	4a17      	ldr	r2, [pc, #92]	; (80107d8 <TIM_OC6_SetConfig+0xbc>)
 801077c:	4293      	cmp	r3, r2
 801077e:	d00b      	beq.n	8010798 <TIM_OC6_SetConfig+0x7c>
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	4a16      	ldr	r2, [pc, #88]	; (80107dc <TIM_OC6_SetConfig+0xc0>)
 8010784:	4293      	cmp	r3, r2
 8010786:	d007      	beq.n	8010798 <TIM_OC6_SetConfig+0x7c>
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	4a15      	ldr	r2, [pc, #84]	; (80107e0 <TIM_OC6_SetConfig+0xc4>)
 801078c:	4293      	cmp	r3, r2
 801078e:	d003      	beq.n	8010798 <TIM_OC6_SetConfig+0x7c>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	4a14      	ldr	r2, [pc, #80]	; (80107e4 <TIM_OC6_SetConfig+0xc8>)
 8010794:	4293      	cmp	r3, r2
 8010796:	d109      	bne.n	80107ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801079e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	695b      	ldr	r3, [r3, #20]
 80107a4:	029b      	lsls	r3, r3, #10
 80107a6:	697a      	ldr	r2, [r7, #20]
 80107a8:	4313      	orrs	r3, r2
 80107aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	697a      	ldr	r2, [r7, #20]
 80107b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	68fa      	ldr	r2, [r7, #12]
 80107b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	685a      	ldr	r2, [r3, #4]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	693a      	ldr	r2, [r7, #16]
 80107c4:	621a      	str	r2, [r3, #32]
}
 80107c6:	bf00      	nop
 80107c8:	371c      	adds	r7, #28
 80107ca:	46bd      	mov	sp, r7
 80107cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d0:	4770      	bx	lr
 80107d2:	bf00      	nop
 80107d4:	40012c00 	.word	0x40012c00
 80107d8:	40013400 	.word	0x40013400
 80107dc:	40014000 	.word	0x40014000
 80107e0:	40014400 	.word	0x40014400
 80107e4:	40014800 	.word	0x40014800

080107e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b087      	sub	sp, #28
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	60b9      	str	r1, [r7, #8]
 80107f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6a1b      	ldr	r3, [r3, #32]
 80107f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	6a1b      	ldr	r3, [r3, #32]
 80107fe:	f023 0201 	bic.w	r2, r3, #1
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	699b      	ldr	r3, [r3, #24]
 801080a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	011b      	lsls	r3, r3, #4
 8010818:	693a      	ldr	r2, [r7, #16]
 801081a:	4313      	orrs	r3, r2
 801081c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	f023 030a 	bic.w	r3, r3, #10
 8010824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010826:	697a      	ldr	r2, [r7, #20]
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	4313      	orrs	r3, r2
 801082c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	693a      	ldr	r2, [r7, #16]
 8010832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	697a      	ldr	r2, [r7, #20]
 8010838:	621a      	str	r2, [r3, #32]
}
 801083a:	bf00      	nop
 801083c:	371c      	adds	r7, #28
 801083e:	46bd      	mov	sp, r7
 8010840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010844:	4770      	bx	lr

08010846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010846:	b480      	push	{r7}
 8010848:	b087      	sub	sp, #28
 801084a:	af00      	add	r7, sp, #0
 801084c:	60f8      	str	r0, [r7, #12]
 801084e:	60b9      	str	r1, [r7, #8]
 8010850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	6a1b      	ldr	r3, [r3, #32]
 8010856:	f023 0210 	bic.w	r2, r3, #16
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	699b      	ldr	r3, [r3, #24]
 8010862:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	6a1b      	ldr	r3, [r3, #32]
 8010868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801086a:	697b      	ldr	r3, [r7, #20]
 801086c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010870:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	031b      	lsls	r3, r3, #12
 8010876:	697a      	ldr	r2, [r7, #20]
 8010878:	4313      	orrs	r3, r2
 801087a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010882:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	011b      	lsls	r3, r3, #4
 8010888:	693a      	ldr	r2, [r7, #16]
 801088a:	4313      	orrs	r3, r2
 801088c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	697a      	ldr	r2, [r7, #20]
 8010892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	693a      	ldr	r2, [r7, #16]
 8010898:	621a      	str	r2, [r3, #32]
}
 801089a:	bf00      	nop
 801089c:	371c      	adds	r7, #28
 801089e:	46bd      	mov	sp, r7
 80108a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a4:	4770      	bx	lr

080108a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80108a6:	b480      	push	{r7}
 80108a8:	b085      	sub	sp, #20
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	6078      	str	r0, [r7, #4]
 80108ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	689b      	ldr	r3, [r3, #8]
 80108b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80108be:	683a      	ldr	r2, [r7, #0]
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	4313      	orrs	r3, r2
 80108c4:	f043 0307 	orr.w	r3, r3, #7
 80108c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	68fa      	ldr	r2, [r7, #12]
 80108ce:	609a      	str	r2, [r3, #8]
}
 80108d0:	bf00      	nop
 80108d2:	3714      	adds	r7, #20
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr

080108dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80108dc:	b480      	push	{r7}
 80108de:	b087      	sub	sp, #28
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	60f8      	str	r0, [r7, #12]
 80108e4:	60b9      	str	r1, [r7, #8]
 80108e6:	607a      	str	r2, [r7, #4]
 80108e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	689b      	ldr	r3, [r3, #8]
 80108ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80108f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	021a      	lsls	r2, r3, #8
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	431a      	orrs	r2, r3
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	4313      	orrs	r3, r2
 8010904:	697a      	ldr	r2, [r7, #20]
 8010906:	4313      	orrs	r3, r2
 8010908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	697a      	ldr	r2, [r7, #20]
 801090e:	609a      	str	r2, [r3, #8]
}
 8010910:	bf00      	nop
 8010912:	371c      	adds	r7, #28
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr

0801091c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801091c:	b480      	push	{r7}
 801091e:	b087      	sub	sp, #28
 8010920:	af00      	add	r7, sp, #0
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	f003 031f 	and.w	r3, r3, #31
 801092e:	2201      	movs	r2, #1
 8010930:	fa02 f303 	lsl.w	r3, r2, r3
 8010934:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	6a1a      	ldr	r2, [r3, #32]
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	43db      	mvns	r3, r3
 801093e:	401a      	ands	r2, r3
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6a1a      	ldr	r2, [r3, #32]
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	f003 031f 	and.w	r3, r3, #31
 801094e:	6879      	ldr	r1, [r7, #4]
 8010950:	fa01 f303 	lsl.w	r3, r1, r3
 8010954:	431a      	orrs	r2, r3
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	621a      	str	r2, [r3, #32]
}
 801095a:	bf00      	nop
 801095c:	371c      	adds	r7, #28
 801095e:	46bd      	mov	sp, r7
 8010960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010964:	4770      	bx	lr
	...

08010968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010968:	b480      	push	{r7}
 801096a:	b085      	sub	sp, #20
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010978:	2b01      	cmp	r3, #1
 801097a:	d101      	bne.n	8010980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801097c:	2302      	movs	r3, #2
 801097e:	e068      	b.n	8010a52 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2201      	movs	r2, #1
 8010984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2202      	movs	r2, #2
 801098c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	689b      	ldr	r3, [r3, #8]
 801099e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	4a2e      	ldr	r2, [pc, #184]	; (8010a60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80109a6:	4293      	cmp	r3, r2
 80109a8:	d004      	beq.n	80109b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	4a2d      	ldr	r2, [pc, #180]	; (8010a64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80109b0:	4293      	cmp	r3, r2
 80109b2:	d108      	bne.n	80109c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80109ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	685b      	ldr	r3, [r3, #4]
 80109c0:	68fa      	ldr	r2, [r7, #12]
 80109c2:	4313      	orrs	r3, r2
 80109c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	68fa      	ldr	r2, [r7, #12]
 80109d4:	4313      	orrs	r3, r2
 80109d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	68fa      	ldr	r2, [r7, #12]
 80109de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4a1e      	ldr	r2, [pc, #120]	; (8010a60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d01d      	beq.n	8010a26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109f2:	d018      	beq.n	8010a26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4a1b      	ldr	r2, [pc, #108]	; (8010a68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d013      	beq.n	8010a26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	4a1a      	ldr	r2, [pc, #104]	; (8010a6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d00e      	beq.n	8010a26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	4a18      	ldr	r2, [pc, #96]	; (8010a70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d009      	beq.n	8010a26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	4a13      	ldr	r2, [pc, #76]	; (8010a64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	d004      	beq.n	8010a26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	4a14      	ldr	r2, [pc, #80]	; (8010a74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010a22:	4293      	cmp	r3, r2
 8010a24:	d10c      	bne.n	8010a40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	689b      	ldr	r3, [r3, #8]
 8010a32:	68ba      	ldr	r2, [r7, #8]
 8010a34:	4313      	orrs	r3, r2
 8010a36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	68ba      	ldr	r2, [r7, #8]
 8010a3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2201      	movs	r2, #1
 8010a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010a50:	2300      	movs	r3, #0
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3714      	adds	r7, #20
 8010a56:	46bd      	mov	sp, r7
 8010a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5c:	4770      	bx	lr
 8010a5e:	bf00      	nop
 8010a60:	40012c00 	.word	0x40012c00
 8010a64:	40013400 	.word	0x40013400
 8010a68:	40000400 	.word	0x40000400
 8010a6c:	40000800 	.word	0x40000800
 8010a70:	40000c00 	.word	0x40000c00
 8010a74:	40014000 	.word	0x40014000

08010a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010a78:	b480      	push	{r7}
 8010a7a:	b083      	sub	sp, #12
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010a80:	bf00      	nop
 8010a82:	370c      	adds	r7, #12
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr

08010a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b083      	sub	sp, #12
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010a94:	bf00      	nop
 8010a96:	370c      	adds	r7, #12
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9e:	4770      	bx	lr

08010aa0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	b083      	sub	sp, #12
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010aa8:	bf00      	nop
 8010aaa:	370c      	adds	r7, #12
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr

08010ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d101      	bne.n	8010ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	e042      	b.n	8010b4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d106      	bne.n	8010ade <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f7fa fd41 	bl	800b560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2224      	movs	r2, #36	; 0x24
 8010ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	681a      	ldr	r2, [r3, #0]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f022 0201 	bic.w	r2, r2, #1
 8010af4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f000 fc02 	bl	8011300 <UART_SetConfig>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d101      	bne.n	8010b06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010b02:	2301      	movs	r3, #1
 8010b04:	e022      	b.n	8010b4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d002      	beq.n	8010b14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 fef2 	bl	80118f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	685a      	ldr	r2, [r3, #4]
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010b22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	689a      	ldr	r2, [r3, #8]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010b32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	681a      	ldr	r2, [r3, #0]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f042 0201 	orr.w	r2, r2, #1
 8010b42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f000 ff79 	bl	8011a3c <UART_CheckIdleState>
 8010b4a:	4603      	mov	r3, r0
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3708      	adds	r7, #8
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}

08010b54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b08a      	sub	sp, #40	; 0x28
 8010b58:	af02      	add	r7, sp, #8
 8010b5a:	60f8      	str	r0, [r7, #12]
 8010b5c:	60b9      	str	r1, [r7, #8]
 8010b5e:	603b      	str	r3, [r7, #0]
 8010b60:	4613      	mov	r3, r2
 8010b62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b6a:	2b20      	cmp	r3, #32
 8010b6c:	f040 8083 	bne.w	8010c76 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d002      	beq.n	8010b7c <HAL_UART_Transmit+0x28>
 8010b76:	88fb      	ldrh	r3, [r7, #6]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d101      	bne.n	8010b80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	e07b      	b.n	8010c78 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d101      	bne.n	8010b8e <HAL_UART_Transmit+0x3a>
 8010b8a:	2302      	movs	r3, #2
 8010b8c:	e074      	b.n	8010c78 <HAL_UART_Transmit+0x124>
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2201      	movs	r2, #1
 8010b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2221      	movs	r2, #33	; 0x21
 8010ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010ba6:	f7fa fdbb 	bl	800b720 <HAL_GetTick>
 8010baa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	88fa      	ldrh	r2, [r7, #6]
 8010bb0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	88fa      	ldrh	r2, [r7, #6]
 8010bb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	689b      	ldr	r3, [r3, #8]
 8010bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010bc4:	d108      	bne.n	8010bd8 <HAL_UART_Transmit+0x84>
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	691b      	ldr	r3, [r3, #16]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d104      	bne.n	8010bd8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	61bb      	str	r3, [r7, #24]
 8010bd6:	e003      	b.n	8010be0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	2200      	movs	r2, #0
 8010be4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8010be8:	e02c      	b.n	8010c44 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	9300      	str	r3, [sp, #0]
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	2180      	movs	r1, #128	; 0x80
 8010bf4:	68f8      	ldr	r0, [r7, #12]
 8010bf6:	f000 ff6c 	bl	8011ad2 <UART_WaitOnFlagUntilTimeout>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d001      	beq.n	8010c04 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8010c00:	2303      	movs	r3, #3
 8010c02:	e039      	b.n	8010c78 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8010c04:	69fb      	ldr	r3, [r7, #28]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d10b      	bne.n	8010c22 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010c0a:	69bb      	ldr	r3, [r7, #24]
 8010c0c:	881b      	ldrh	r3, [r3, #0]
 8010c0e:	461a      	mov	r2, r3
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010c18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010c1a:	69bb      	ldr	r3, [r7, #24]
 8010c1c:	3302      	adds	r3, #2
 8010c1e:	61bb      	str	r3, [r7, #24]
 8010c20:	e007      	b.n	8010c32 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010c22:	69fb      	ldr	r3, [r7, #28]
 8010c24:	781a      	ldrb	r2, [r3, #0]
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010c2c:	69fb      	ldr	r3, [r7, #28]
 8010c2e:	3301      	adds	r3, #1
 8010c30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010c38:	b29b      	uxth	r3, r3
 8010c3a:	3b01      	subs	r3, #1
 8010c3c:	b29a      	uxth	r2, r3
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d1cc      	bne.n	8010bea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	9300      	str	r3, [sp, #0]
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	2200      	movs	r2, #0
 8010c58:	2140      	movs	r1, #64	; 0x40
 8010c5a:	68f8      	ldr	r0, [r7, #12]
 8010c5c:	f000 ff39 	bl	8011ad2 <UART_WaitOnFlagUntilTimeout>
 8010c60:	4603      	mov	r3, r0
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d001      	beq.n	8010c6a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8010c66:	2303      	movs	r3, #3
 8010c68:	e006      	b.n	8010c78 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	2220      	movs	r2, #32
 8010c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8010c72:	2300      	movs	r3, #0
 8010c74:	e000      	b.n	8010c78 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8010c76:	2302      	movs	r3, #2
  }
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3720      	adds	r7, #32
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b0ba      	sub	sp, #232	; 0xe8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	69db      	ldr	r3, [r3, #28]
 8010c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	689b      	ldr	r3, [r3, #8]
 8010ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010ca6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010caa:	f640 030f 	movw	r3, #2063	; 0x80f
 8010cae:	4013      	ands	r3, r2
 8010cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010cb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d11b      	bne.n	8010cf4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cc0:	f003 0320 	and.w	r3, r3, #32
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d015      	beq.n	8010cf4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ccc:	f003 0320 	and.w	r3, r3, #32
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d105      	bne.n	8010ce0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d009      	beq.n	8010cf4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	f000 82d6 	beq.w	8011296 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	4798      	blx	r3
      }
      return;
 8010cf2:	e2d0      	b.n	8011296 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8010cf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	f000 811f 	beq.w	8010f3c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010cfe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010d02:	4b8b      	ldr	r3, [pc, #556]	; (8010f30 <HAL_UART_IRQHandler+0x2b0>)
 8010d04:	4013      	ands	r3, r2
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d106      	bne.n	8010d18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010d0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010d0e:	4b89      	ldr	r3, [pc, #548]	; (8010f34 <HAL_UART_IRQHandler+0x2b4>)
 8010d10:	4013      	ands	r3, r2
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	f000 8112 	beq.w	8010f3c <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d1c:	f003 0301 	and.w	r3, r3, #1
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d011      	beq.n	8010d48 <HAL_UART_IRQHandler+0xc8>
 8010d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00b      	beq.n	8010d48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	2201      	movs	r2, #1
 8010d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d3e:	f043 0201 	orr.w	r2, r3, #1
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d4c:	f003 0302 	and.w	r3, r3, #2
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d011      	beq.n	8010d78 <HAL_UART_IRQHandler+0xf8>
 8010d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d58:	f003 0301 	and.w	r3, r3, #1
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d00b      	beq.n	8010d78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	2202      	movs	r2, #2
 8010d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d6e:	f043 0204 	orr.w	r2, r3, #4
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d7c:	f003 0304 	and.w	r3, r3, #4
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d011      	beq.n	8010da8 <HAL_UART_IRQHandler+0x128>
 8010d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d88:	f003 0301 	and.w	r3, r3, #1
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d00b      	beq.n	8010da8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	2204      	movs	r2, #4
 8010d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d9e:	f043 0202 	orr.w	r2, r3, #2
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010dac:	f003 0308 	and.w	r3, r3, #8
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d017      	beq.n	8010de4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010db8:	f003 0320 	and.w	r3, r3, #32
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d105      	bne.n	8010dcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010dc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010dc4:	4b5a      	ldr	r3, [pc, #360]	; (8010f30 <HAL_UART_IRQHandler+0x2b0>)
 8010dc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d00b      	beq.n	8010de4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	2208      	movs	r2, #8
 8010dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010dda:	f043 0208 	orr.w	r2, r3, #8
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d012      	beq.n	8010e16 <HAL_UART_IRQHandler+0x196>
 8010df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010df4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d00c      	beq.n	8010e16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e0c:	f043 0220 	orr.w	r2, r3, #32
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f000 823c 	beq.w	801129a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e26:	f003 0320 	and.w	r3, r3, #32
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d013      	beq.n	8010e56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e32:	f003 0320 	and.w	r3, r3, #32
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d105      	bne.n	8010e46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d007      	beq.n	8010e56 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d003      	beq.n	8010e56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	689b      	ldr	r3, [r3, #8]
 8010e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e6a:	2b40      	cmp	r3, #64	; 0x40
 8010e6c:	d005      	beq.n	8010e7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010e6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010e72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d04f      	beq.n	8010f1a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f000 ffdb 	bl	8011e36 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	689b      	ldr	r3, [r3, #8]
 8010e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e8a:	2b40      	cmp	r3, #64	; 0x40
 8010e8c:	d141      	bne.n	8010f12 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	3308      	adds	r3, #8
 8010e94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e9c:	e853 3f00 	ldrex	r3, [r3]
 8010ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	3308      	adds	r3, #8
 8010eb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010eba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ec2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010ec6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010eca:	e841 2300 	strex	r3, r2, [r1]
 8010ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d1d9      	bne.n	8010e8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d013      	beq.n	8010f0a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ee6:	4a14      	ldr	r2, [pc, #80]	; (8010f38 <HAL_UART_IRQHandler+0x2b8>)
 8010ee8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7fa fec3 	bl	800bc7a <HAL_DMA_Abort_IT>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d017      	beq.n	8010f2a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f00:	687a      	ldr	r2, [r7, #4]
 8010f02:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8010f04:	4610      	mov	r0, r2
 8010f06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f08:	e00f      	b.n	8010f2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f000 f9ee 	bl	80112ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f10:	e00b      	b.n	8010f2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f000 f9ea 	bl	80112ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f18:	e007      	b.n	8010f2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f000 f9e6 	bl	80112ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2200      	movs	r2, #0
 8010f24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8010f28:	e1b7      	b.n	801129a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f2a:	bf00      	nop
    return;
 8010f2c:	e1b5      	b.n	801129a <HAL_UART_IRQHandler+0x61a>
 8010f2e:	bf00      	nop
 8010f30:	10000001 	.word	0x10000001
 8010f34:	04000120 	.word	0x04000120
 8010f38:	080120e1 	.word	0x080120e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	f040 814a 	bne.w	80111da <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f4a:	f003 0310 	and.w	r3, r3, #16
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	f000 8143 	beq.w	80111da <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f58:	f003 0310 	and.w	r3, r3, #16
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f000 813c 	beq.w	80111da <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2210      	movs	r2, #16
 8010f68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	689b      	ldr	r3, [r3, #8]
 8010f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f74:	2b40      	cmp	r3, #64	; 0x40
 8010f76:	f040 80b5 	bne.w	80110e4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	685b      	ldr	r3, [r3, #4]
 8010f82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010f86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	f000 8187 	beq.w	801129e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	f080 817f 	bcs.w	801129e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010fa6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	f003 0320 	and.w	r3, r3, #32
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	f040 8086 	bne.w	80110c8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010fc8:	e853 3f00 	ldrex	r3, [r3]
 8010fcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010fd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	461a      	mov	r2, r3
 8010fe2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010fe6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010fea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010ff2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010ff6:	e841 2300 	strex	r3, r2, [r1]
 8010ffa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011002:	2b00      	cmp	r3, #0
 8011004:	d1da      	bne.n	8010fbc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	3308      	adds	r3, #8
 801100c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801100e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011010:	e853 3f00 	ldrex	r3, [r3]
 8011014:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011018:	f023 0301 	bic.w	r3, r3, #1
 801101c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	3308      	adds	r3, #8
 8011026:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801102a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801102e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011030:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011032:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011036:	e841 2300 	strex	r3, r2, [r1]
 801103a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801103c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801103e:	2b00      	cmp	r3, #0
 8011040:	d1e1      	bne.n	8011006 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	3308      	adds	r3, #8
 8011048:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801104a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801104c:	e853 3f00 	ldrex	r3, [r3]
 8011050:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011058:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	3308      	adds	r3, #8
 8011062:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011066:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011068:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801106a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801106c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801106e:	e841 2300 	strex	r3, r2, [r1]
 8011072:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011076:	2b00      	cmp	r3, #0
 8011078:	d1e3      	bne.n	8011042 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2220      	movs	r2, #32
 801107e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2200      	movs	r2, #0
 8011086:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801108e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011090:	e853 3f00 	ldrex	r3, [r3]
 8011094:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011098:	f023 0310 	bic.w	r3, r3, #16
 801109c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	461a      	mov	r2, r3
 80110a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80110aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80110ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80110b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80110b2:	e841 2300 	strex	r3, r2, [r1]
 80110b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80110b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d1e4      	bne.n	8011088 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7fa fd7d 	bl	800bbc2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	1ad3      	subs	r3, r2, r3
 80110d8:	b29b      	uxth	r3, r3
 80110da:	4619      	mov	r1, r3
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f7f7 fb23 	bl	8008728 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80110e2:	e0dc      	b.n	801129e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80110f0:	b29b      	uxth	r3, r3
 80110f2:	1ad3      	subs	r3, r2, r3
 80110f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80110fe:	b29b      	uxth	r3, r3
 8011100:	2b00      	cmp	r3, #0
 8011102:	f000 80ce 	beq.w	80112a2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8011106:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801110a:	2b00      	cmp	r3, #0
 801110c:	f000 80c9 	beq.w	80112a2 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011118:	e853 3f00 	ldrex	r3, [r3]
 801111c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801111e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011120:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011124:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	461a      	mov	r2, r3
 801112e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011132:	647b      	str	r3, [r7, #68]	; 0x44
 8011134:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011136:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011138:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801113a:	e841 2300 	strex	r3, r2, [r1]
 801113e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011142:	2b00      	cmp	r3, #0
 8011144:	d1e4      	bne.n	8011110 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	3308      	adds	r3, #8
 801114c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011150:	e853 3f00 	ldrex	r3, [r3]
 8011154:	623b      	str	r3, [r7, #32]
   return(result);
 8011156:	6a3b      	ldr	r3, [r7, #32]
 8011158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801115c:	f023 0301 	bic.w	r3, r3, #1
 8011160:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	3308      	adds	r3, #8
 801116a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801116e:	633a      	str	r2, [r7, #48]	; 0x30
 8011170:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011176:	e841 2300 	strex	r3, r2, [r1]
 801117a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801117e:	2b00      	cmp	r3, #0
 8011180:	d1e1      	bne.n	8011146 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2220      	movs	r2, #32
 8011186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2200      	movs	r2, #0
 801118e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2200      	movs	r2, #0
 8011194:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	e853 3f00 	ldrex	r3, [r3]
 80111a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	f023 0310 	bic.w	r3, r3, #16
 80111aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	461a      	mov	r2, r3
 80111b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80111b8:	61fb      	str	r3, [r7, #28]
 80111ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111bc:	69b9      	ldr	r1, [r7, #24]
 80111be:	69fa      	ldr	r2, [r7, #28]
 80111c0:	e841 2300 	strex	r3, r2, [r1]
 80111c4:	617b      	str	r3, [r7, #20]
   return(result);
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d1e4      	bne.n	8011196 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80111cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80111d0:	4619      	mov	r1, r3
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f7f7 faa8 	bl	8008728 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80111d8:	e063      	b.n	80112a2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80111da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d00e      	beq.n	8011204 <HAL_UART_IRQHandler+0x584>
 80111e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80111ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d008      	beq.n	8011204 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80111fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f000 ffb0 	bl	8012162 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011202:	e051      	b.n	80112a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801120c:	2b00      	cmp	r3, #0
 801120e:	d014      	beq.n	801123a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011218:	2b00      	cmp	r3, #0
 801121a:	d105      	bne.n	8011228 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801121c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011220:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011224:	2b00      	cmp	r3, #0
 8011226:	d008      	beq.n	801123a <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801122c:	2b00      	cmp	r3, #0
 801122e:	d03a      	beq.n	80112a6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	4798      	blx	r3
    }
    return;
 8011238:	e035      	b.n	80112a6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801123a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801123e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011242:	2b00      	cmp	r3, #0
 8011244:	d009      	beq.n	801125a <HAL_UART_IRQHandler+0x5da>
 8011246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801124a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801124e:	2b00      	cmp	r3, #0
 8011250:	d003      	beq.n	801125a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f000 ff5a 	bl	801210c <UART_EndTransmit_IT>
    return;
 8011258:	e026      	b.n	80112a8 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801125a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801125e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011262:	2b00      	cmp	r3, #0
 8011264:	d009      	beq.n	801127a <HAL_UART_IRQHandler+0x5fa>
 8011266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801126a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801126e:	2b00      	cmp	r3, #0
 8011270:	d003      	beq.n	801127a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f000 ff89 	bl	801218a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011278:	e016      	b.n	80112a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801127a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801127e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011282:	2b00      	cmp	r3, #0
 8011284:	d010      	beq.n	80112a8 <HAL_UART_IRQHandler+0x628>
 8011286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801128a:	2b00      	cmp	r3, #0
 801128c:	da0c      	bge.n	80112a8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f000 ff71 	bl	8012176 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011294:	e008      	b.n	80112a8 <HAL_UART_IRQHandler+0x628>
      return;
 8011296:	bf00      	nop
 8011298:	e006      	b.n	80112a8 <HAL_UART_IRQHandler+0x628>
    return;
 801129a:	bf00      	nop
 801129c:	e004      	b.n	80112a8 <HAL_UART_IRQHandler+0x628>
      return;
 801129e:	bf00      	nop
 80112a0:	e002      	b.n	80112a8 <HAL_UART_IRQHandler+0x628>
      return;
 80112a2:	bf00      	nop
 80112a4:	e000      	b.n	80112a8 <HAL_UART_IRQHandler+0x628>
    return;
 80112a6:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80112a8:	37e8      	adds	r7, #232	; 0xe8
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}
 80112ae:	bf00      	nop

080112b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b083      	sub	sp, #12
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80112b8:	bf00      	nop
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr

080112c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80112c4:	b480      	push	{r7}
 80112c6:	b083      	sub	sp, #12
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80112cc:	bf00      	nop
 80112ce:	370c      	adds	r7, #12
 80112d0:	46bd      	mov	sp, r7
 80112d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d6:	4770      	bx	lr

080112d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80112d8:	b480      	push	{r7}
 80112da:	b083      	sub	sp, #12
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80112e0:	bf00      	nop
 80112e2:	370c      	adds	r7, #12
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr

080112ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80112ec:	b480      	push	{r7}
 80112ee:	b083      	sub	sp, #12
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80112f4:	bf00      	nop
 80112f6:	370c      	adds	r7, #12
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr

08011300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011304:	b08c      	sub	sp, #48	; 0x30
 8011306:	af00      	add	r7, sp, #0
 8011308:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801130a:	2300      	movs	r3, #0
 801130c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	689a      	ldr	r2, [r3, #8]
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	691b      	ldr	r3, [r3, #16]
 8011318:	431a      	orrs	r2, r3
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	695b      	ldr	r3, [r3, #20]
 801131e:	431a      	orrs	r2, r3
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	69db      	ldr	r3, [r3, #28]
 8011324:	4313      	orrs	r3, r2
 8011326:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011328:	697b      	ldr	r3, [r7, #20]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	4baa      	ldr	r3, [pc, #680]	; (80115d8 <UART_SetConfig+0x2d8>)
 8011330:	4013      	ands	r3, r2
 8011332:	697a      	ldr	r2, [r7, #20]
 8011334:	6812      	ldr	r2, [r2, #0]
 8011336:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011338:	430b      	orrs	r3, r1
 801133a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	685b      	ldr	r3, [r3, #4]
 8011342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	68da      	ldr	r2, [r3, #12]
 801134a:	697b      	ldr	r3, [r7, #20]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	430a      	orrs	r2, r1
 8011350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	699b      	ldr	r3, [r3, #24]
 8011356:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	4a9f      	ldr	r2, [pc, #636]	; (80115dc <UART_SetConfig+0x2dc>)
 801135e:	4293      	cmp	r3, r2
 8011360:	d004      	beq.n	801136c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	6a1b      	ldr	r3, [r3, #32]
 8011366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011368:	4313      	orrs	r3, r2
 801136a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	689b      	ldr	r3, [r3, #8]
 8011372:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8011376:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801137a:	697a      	ldr	r2, [r7, #20]
 801137c:	6812      	ldr	r2, [r2, #0]
 801137e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011380:	430b      	orrs	r3, r1
 8011382:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801138a:	f023 010f 	bic.w	r1, r3, #15
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	430a      	orrs	r2, r1
 8011398:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	4a90      	ldr	r2, [pc, #576]	; (80115e0 <UART_SetConfig+0x2e0>)
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d125      	bne.n	80113f0 <UART_SetConfig+0xf0>
 80113a4:	4b8f      	ldr	r3, [pc, #572]	; (80115e4 <UART_SetConfig+0x2e4>)
 80113a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80113aa:	f003 0303 	and.w	r3, r3, #3
 80113ae:	2b03      	cmp	r3, #3
 80113b0:	d81a      	bhi.n	80113e8 <UART_SetConfig+0xe8>
 80113b2:	a201      	add	r2, pc, #4	; (adr r2, 80113b8 <UART_SetConfig+0xb8>)
 80113b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113b8:	080113c9 	.word	0x080113c9
 80113bc:	080113d9 	.word	0x080113d9
 80113c0:	080113d1 	.word	0x080113d1
 80113c4:	080113e1 	.word	0x080113e1
 80113c8:	2301      	movs	r3, #1
 80113ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113ce:	e116      	b.n	80115fe <UART_SetConfig+0x2fe>
 80113d0:	2302      	movs	r3, #2
 80113d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113d6:	e112      	b.n	80115fe <UART_SetConfig+0x2fe>
 80113d8:	2304      	movs	r3, #4
 80113da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113de:	e10e      	b.n	80115fe <UART_SetConfig+0x2fe>
 80113e0:	2308      	movs	r3, #8
 80113e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113e6:	e10a      	b.n	80115fe <UART_SetConfig+0x2fe>
 80113e8:	2310      	movs	r3, #16
 80113ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113ee:	e106      	b.n	80115fe <UART_SetConfig+0x2fe>
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	4a7c      	ldr	r2, [pc, #496]	; (80115e8 <UART_SetConfig+0x2e8>)
 80113f6:	4293      	cmp	r3, r2
 80113f8:	d138      	bne.n	801146c <UART_SetConfig+0x16c>
 80113fa:	4b7a      	ldr	r3, [pc, #488]	; (80115e4 <UART_SetConfig+0x2e4>)
 80113fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011400:	f003 030c 	and.w	r3, r3, #12
 8011404:	2b0c      	cmp	r3, #12
 8011406:	d82d      	bhi.n	8011464 <UART_SetConfig+0x164>
 8011408:	a201      	add	r2, pc, #4	; (adr r2, 8011410 <UART_SetConfig+0x110>)
 801140a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801140e:	bf00      	nop
 8011410:	08011445 	.word	0x08011445
 8011414:	08011465 	.word	0x08011465
 8011418:	08011465 	.word	0x08011465
 801141c:	08011465 	.word	0x08011465
 8011420:	08011455 	.word	0x08011455
 8011424:	08011465 	.word	0x08011465
 8011428:	08011465 	.word	0x08011465
 801142c:	08011465 	.word	0x08011465
 8011430:	0801144d 	.word	0x0801144d
 8011434:	08011465 	.word	0x08011465
 8011438:	08011465 	.word	0x08011465
 801143c:	08011465 	.word	0x08011465
 8011440:	0801145d 	.word	0x0801145d
 8011444:	2300      	movs	r3, #0
 8011446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801144a:	e0d8      	b.n	80115fe <UART_SetConfig+0x2fe>
 801144c:	2302      	movs	r3, #2
 801144e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011452:	e0d4      	b.n	80115fe <UART_SetConfig+0x2fe>
 8011454:	2304      	movs	r3, #4
 8011456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801145a:	e0d0      	b.n	80115fe <UART_SetConfig+0x2fe>
 801145c:	2308      	movs	r3, #8
 801145e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011462:	e0cc      	b.n	80115fe <UART_SetConfig+0x2fe>
 8011464:	2310      	movs	r3, #16
 8011466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801146a:	e0c8      	b.n	80115fe <UART_SetConfig+0x2fe>
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	4a5e      	ldr	r2, [pc, #376]	; (80115ec <UART_SetConfig+0x2ec>)
 8011472:	4293      	cmp	r3, r2
 8011474:	d125      	bne.n	80114c2 <UART_SetConfig+0x1c2>
 8011476:	4b5b      	ldr	r3, [pc, #364]	; (80115e4 <UART_SetConfig+0x2e4>)
 8011478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801147c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011480:	2b30      	cmp	r3, #48	; 0x30
 8011482:	d016      	beq.n	80114b2 <UART_SetConfig+0x1b2>
 8011484:	2b30      	cmp	r3, #48	; 0x30
 8011486:	d818      	bhi.n	80114ba <UART_SetConfig+0x1ba>
 8011488:	2b20      	cmp	r3, #32
 801148a:	d00a      	beq.n	80114a2 <UART_SetConfig+0x1a2>
 801148c:	2b20      	cmp	r3, #32
 801148e:	d814      	bhi.n	80114ba <UART_SetConfig+0x1ba>
 8011490:	2b00      	cmp	r3, #0
 8011492:	d002      	beq.n	801149a <UART_SetConfig+0x19a>
 8011494:	2b10      	cmp	r3, #16
 8011496:	d008      	beq.n	80114aa <UART_SetConfig+0x1aa>
 8011498:	e00f      	b.n	80114ba <UART_SetConfig+0x1ba>
 801149a:	2300      	movs	r3, #0
 801149c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80114a0:	e0ad      	b.n	80115fe <UART_SetConfig+0x2fe>
 80114a2:	2302      	movs	r3, #2
 80114a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80114a8:	e0a9      	b.n	80115fe <UART_SetConfig+0x2fe>
 80114aa:	2304      	movs	r3, #4
 80114ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80114b0:	e0a5      	b.n	80115fe <UART_SetConfig+0x2fe>
 80114b2:	2308      	movs	r3, #8
 80114b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80114b8:	e0a1      	b.n	80115fe <UART_SetConfig+0x2fe>
 80114ba:	2310      	movs	r3, #16
 80114bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80114c0:	e09d      	b.n	80115fe <UART_SetConfig+0x2fe>
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	4a4a      	ldr	r2, [pc, #296]	; (80115f0 <UART_SetConfig+0x2f0>)
 80114c8:	4293      	cmp	r3, r2
 80114ca:	d125      	bne.n	8011518 <UART_SetConfig+0x218>
 80114cc:	4b45      	ldr	r3, [pc, #276]	; (80115e4 <UART_SetConfig+0x2e4>)
 80114ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80114d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80114d6:	2bc0      	cmp	r3, #192	; 0xc0
 80114d8:	d016      	beq.n	8011508 <UART_SetConfig+0x208>
 80114da:	2bc0      	cmp	r3, #192	; 0xc0
 80114dc:	d818      	bhi.n	8011510 <UART_SetConfig+0x210>
 80114de:	2b80      	cmp	r3, #128	; 0x80
 80114e0:	d00a      	beq.n	80114f8 <UART_SetConfig+0x1f8>
 80114e2:	2b80      	cmp	r3, #128	; 0x80
 80114e4:	d814      	bhi.n	8011510 <UART_SetConfig+0x210>
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d002      	beq.n	80114f0 <UART_SetConfig+0x1f0>
 80114ea:	2b40      	cmp	r3, #64	; 0x40
 80114ec:	d008      	beq.n	8011500 <UART_SetConfig+0x200>
 80114ee:	e00f      	b.n	8011510 <UART_SetConfig+0x210>
 80114f0:	2300      	movs	r3, #0
 80114f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80114f6:	e082      	b.n	80115fe <UART_SetConfig+0x2fe>
 80114f8:	2302      	movs	r3, #2
 80114fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80114fe:	e07e      	b.n	80115fe <UART_SetConfig+0x2fe>
 8011500:	2304      	movs	r3, #4
 8011502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011506:	e07a      	b.n	80115fe <UART_SetConfig+0x2fe>
 8011508:	2308      	movs	r3, #8
 801150a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801150e:	e076      	b.n	80115fe <UART_SetConfig+0x2fe>
 8011510:	2310      	movs	r3, #16
 8011512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011516:	e072      	b.n	80115fe <UART_SetConfig+0x2fe>
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	4a35      	ldr	r2, [pc, #212]	; (80115f4 <UART_SetConfig+0x2f4>)
 801151e:	4293      	cmp	r3, r2
 8011520:	d12a      	bne.n	8011578 <UART_SetConfig+0x278>
 8011522:	4b30      	ldr	r3, [pc, #192]	; (80115e4 <UART_SetConfig+0x2e4>)
 8011524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801152c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011530:	d01a      	beq.n	8011568 <UART_SetConfig+0x268>
 8011532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011536:	d81b      	bhi.n	8011570 <UART_SetConfig+0x270>
 8011538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801153c:	d00c      	beq.n	8011558 <UART_SetConfig+0x258>
 801153e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011542:	d815      	bhi.n	8011570 <UART_SetConfig+0x270>
 8011544:	2b00      	cmp	r3, #0
 8011546:	d003      	beq.n	8011550 <UART_SetConfig+0x250>
 8011548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801154c:	d008      	beq.n	8011560 <UART_SetConfig+0x260>
 801154e:	e00f      	b.n	8011570 <UART_SetConfig+0x270>
 8011550:	2300      	movs	r3, #0
 8011552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011556:	e052      	b.n	80115fe <UART_SetConfig+0x2fe>
 8011558:	2302      	movs	r3, #2
 801155a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801155e:	e04e      	b.n	80115fe <UART_SetConfig+0x2fe>
 8011560:	2304      	movs	r3, #4
 8011562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011566:	e04a      	b.n	80115fe <UART_SetConfig+0x2fe>
 8011568:	2308      	movs	r3, #8
 801156a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801156e:	e046      	b.n	80115fe <UART_SetConfig+0x2fe>
 8011570:	2310      	movs	r3, #16
 8011572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011576:	e042      	b.n	80115fe <UART_SetConfig+0x2fe>
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	4a17      	ldr	r2, [pc, #92]	; (80115dc <UART_SetConfig+0x2dc>)
 801157e:	4293      	cmp	r3, r2
 8011580:	d13a      	bne.n	80115f8 <UART_SetConfig+0x2f8>
 8011582:	4b18      	ldr	r3, [pc, #96]	; (80115e4 <UART_SetConfig+0x2e4>)
 8011584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011588:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801158c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011590:	d01a      	beq.n	80115c8 <UART_SetConfig+0x2c8>
 8011592:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011596:	d81b      	bhi.n	80115d0 <UART_SetConfig+0x2d0>
 8011598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801159c:	d00c      	beq.n	80115b8 <UART_SetConfig+0x2b8>
 801159e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80115a2:	d815      	bhi.n	80115d0 <UART_SetConfig+0x2d0>
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d003      	beq.n	80115b0 <UART_SetConfig+0x2b0>
 80115a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115ac:	d008      	beq.n	80115c0 <UART_SetConfig+0x2c0>
 80115ae:	e00f      	b.n	80115d0 <UART_SetConfig+0x2d0>
 80115b0:	2300      	movs	r3, #0
 80115b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80115b6:	e022      	b.n	80115fe <UART_SetConfig+0x2fe>
 80115b8:	2302      	movs	r3, #2
 80115ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80115be:	e01e      	b.n	80115fe <UART_SetConfig+0x2fe>
 80115c0:	2304      	movs	r3, #4
 80115c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80115c6:	e01a      	b.n	80115fe <UART_SetConfig+0x2fe>
 80115c8:	2308      	movs	r3, #8
 80115ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80115ce:	e016      	b.n	80115fe <UART_SetConfig+0x2fe>
 80115d0:	2310      	movs	r3, #16
 80115d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80115d6:	e012      	b.n	80115fe <UART_SetConfig+0x2fe>
 80115d8:	cfff69f3 	.word	0xcfff69f3
 80115dc:	40008000 	.word	0x40008000
 80115e0:	40013800 	.word	0x40013800
 80115e4:	40021000 	.word	0x40021000
 80115e8:	40004400 	.word	0x40004400
 80115ec:	40004800 	.word	0x40004800
 80115f0:	40004c00 	.word	0x40004c00
 80115f4:	40005000 	.word	0x40005000
 80115f8:	2310      	movs	r3, #16
 80115fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	4aae      	ldr	r2, [pc, #696]	; (80118bc <UART_SetConfig+0x5bc>)
 8011604:	4293      	cmp	r3, r2
 8011606:	f040 8097 	bne.w	8011738 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801160a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801160e:	2b08      	cmp	r3, #8
 8011610:	d823      	bhi.n	801165a <UART_SetConfig+0x35a>
 8011612:	a201      	add	r2, pc, #4	; (adr r2, 8011618 <UART_SetConfig+0x318>)
 8011614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011618:	0801163d 	.word	0x0801163d
 801161c:	0801165b 	.word	0x0801165b
 8011620:	08011645 	.word	0x08011645
 8011624:	0801165b 	.word	0x0801165b
 8011628:	0801164b 	.word	0x0801164b
 801162c:	0801165b 	.word	0x0801165b
 8011630:	0801165b 	.word	0x0801165b
 8011634:	0801165b 	.word	0x0801165b
 8011638:	08011653 	.word	0x08011653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801163c:	f7fb fe2a 	bl	800d294 <HAL_RCC_GetPCLK1Freq>
 8011640:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011642:	e010      	b.n	8011666 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011644:	4b9e      	ldr	r3, [pc, #632]	; (80118c0 <UART_SetConfig+0x5c0>)
 8011646:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011648:	e00d      	b.n	8011666 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801164a:	f7fb fd8b 	bl	800d164 <HAL_RCC_GetSysClockFreq>
 801164e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011650:	e009      	b.n	8011666 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011656:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011658:	e005      	b.n	8011666 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801165a:	2300      	movs	r3, #0
 801165c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801165e:	2301      	movs	r3, #1
 8011660:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011664:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011668:	2b00      	cmp	r3, #0
 801166a:	f000 8130 	beq.w	80118ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011672:	4a94      	ldr	r2, [pc, #592]	; (80118c4 <UART_SetConfig+0x5c4>)
 8011674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011678:	461a      	mov	r2, r3
 801167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011680:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	685a      	ldr	r2, [r3, #4]
 8011686:	4613      	mov	r3, r2
 8011688:	005b      	lsls	r3, r3, #1
 801168a:	4413      	add	r3, r2
 801168c:	69ba      	ldr	r2, [r7, #24]
 801168e:	429a      	cmp	r2, r3
 8011690:	d305      	bcc.n	801169e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011698:	69ba      	ldr	r2, [r7, #24]
 801169a:	429a      	cmp	r2, r3
 801169c:	d903      	bls.n	80116a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801169e:	2301      	movs	r3, #1
 80116a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80116a4:	e113      	b.n	80118ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a8:	2200      	movs	r2, #0
 80116aa:	60bb      	str	r3, [r7, #8]
 80116ac:	60fa      	str	r2, [r7, #12]
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116b2:	4a84      	ldr	r2, [pc, #528]	; (80118c4 <UART_SetConfig+0x5c4>)
 80116b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	2200      	movs	r2, #0
 80116bc:	603b      	str	r3, [r7, #0]
 80116be:	607a      	str	r2, [r7, #4]
 80116c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80116c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80116c8:	f7ef fb46 	bl	8000d58 <__aeabi_uldivmod>
 80116cc:	4602      	mov	r2, r0
 80116ce:	460b      	mov	r3, r1
 80116d0:	4610      	mov	r0, r2
 80116d2:	4619      	mov	r1, r3
 80116d4:	f04f 0200 	mov.w	r2, #0
 80116d8:	f04f 0300 	mov.w	r3, #0
 80116dc:	020b      	lsls	r3, r1, #8
 80116de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80116e2:	0202      	lsls	r2, r0, #8
 80116e4:	6979      	ldr	r1, [r7, #20]
 80116e6:	6849      	ldr	r1, [r1, #4]
 80116e8:	0849      	lsrs	r1, r1, #1
 80116ea:	2000      	movs	r0, #0
 80116ec:	460c      	mov	r4, r1
 80116ee:	4605      	mov	r5, r0
 80116f0:	eb12 0804 	adds.w	r8, r2, r4
 80116f4:	eb43 0905 	adc.w	r9, r3, r5
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	685b      	ldr	r3, [r3, #4]
 80116fc:	2200      	movs	r2, #0
 80116fe:	469a      	mov	sl, r3
 8011700:	4693      	mov	fp, r2
 8011702:	4652      	mov	r2, sl
 8011704:	465b      	mov	r3, fp
 8011706:	4640      	mov	r0, r8
 8011708:	4649      	mov	r1, r9
 801170a:	f7ef fb25 	bl	8000d58 <__aeabi_uldivmod>
 801170e:	4602      	mov	r2, r0
 8011710:	460b      	mov	r3, r1
 8011712:	4613      	mov	r3, r2
 8011714:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011716:	6a3b      	ldr	r3, [r7, #32]
 8011718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801171c:	d308      	bcc.n	8011730 <UART_SetConfig+0x430>
 801171e:	6a3b      	ldr	r3, [r7, #32]
 8011720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011724:	d204      	bcs.n	8011730 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	6a3a      	ldr	r2, [r7, #32]
 801172c:	60da      	str	r2, [r3, #12]
 801172e:	e0ce      	b.n	80118ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8011730:	2301      	movs	r3, #1
 8011732:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8011736:	e0ca      	b.n	80118ce <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	69db      	ldr	r3, [r3, #28]
 801173c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011740:	d166      	bne.n	8011810 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8011742:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011746:	2b08      	cmp	r3, #8
 8011748:	d827      	bhi.n	801179a <UART_SetConfig+0x49a>
 801174a:	a201      	add	r2, pc, #4	; (adr r2, 8011750 <UART_SetConfig+0x450>)
 801174c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011750:	08011775 	.word	0x08011775
 8011754:	0801177d 	.word	0x0801177d
 8011758:	08011785 	.word	0x08011785
 801175c:	0801179b 	.word	0x0801179b
 8011760:	0801178b 	.word	0x0801178b
 8011764:	0801179b 	.word	0x0801179b
 8011768:	0801179b 	.word	0x0801179b
 801176c:	0801179b 	.word	0x0801179b
 8011770:	08011793 	.word	0x08011793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011774:	f7fb fd8e 	bl	800d294 <HAL_RCC_GetPCLK1Freq>
 8011778:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801177a:	e014      	b.n	80117a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801177c:	f7fb fda0 	bl	800d2c0 <HAL_RCC_GetPCLK2Freq>
 8011780:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011782:	e010      	b.n	80117a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011784:	4b4e      	ldr	r3, [pc, #312]	; (80118c0 <UART_SetConfig+0x5c0>)
 8011786:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011788:	e00d      	b.n	80117a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801178a:	f7fb fceb 	bl	800d164 <HAL_RCC_GetSysClockFreq>
 801178e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011790:	e009      	b.n	80117a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011796:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011798:	e005      	b.n	80117a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801179a:	2300      	movs	r3, #0
 801179c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801179e:	2301      	movs	r3, #1
 80117a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80117a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80117a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	f000 8090 	beq.w	80118ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117b2:	4a44      	ldr	r2, [pc, #272]	; (80118c4 <UART_SetConfig+0x5c4>)
 80117b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117b8:	461a      	mov	r2, r3
 80117ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80117c0:	005a      	lsls	r2, r3, #1
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	085b      	lsrs	r3, r3, #1
 80117c8:	441a      	add	r2, r3
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80117d2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80117d4:	6a3b      	ldr	r3, [r7, #32]
 80117d6:	2b0f      	cmp	r3, #15
 80117d8:	d916      	bls.n	8011808 <UART_SetConfig+0x508>
 80117da:	6a3b      	ldr	r3, [r7, #32]
 80117dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117e0:	d212      	bcs.n	8011808 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80117e2:	6a3b      	ldr	r3, [r7, #32]
 80117e4:	b29b      	uxth	r3, r3
 80117e6:	f023 030f 	bic.w	r3, r3, #15
 80117ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80117ec:	6a3b      	ldr	r3, [r7, #32]
 80117ee:	085b      	lsrs	r3, r3, #1
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	f003 0307 	and.w	r3, r3, #7
 80117f6:	b29a      	uxth	r2, r3
 80117f8:	8bfb      	ldrh	r3, [r7, #30]
 80117fa:	4313      	orrs	r3, r2
 80117fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	8bfa      	ldrh	r2, [r7, #30]
 8011804:	60da      	str	r2, [r3, #12]
 8011806:	e062      	b.n	80118ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8011808:	2301      	movs	r3, #1
 801180a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801180e:	e05e      	b.n	80118ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011810:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011814:	2b08      	cmp	r3, #8
 8011816:	d828      	bhi.n	801186a <UART_SetConfig+0x56a>
 8011818:	a201      	add	r2, pc, #4	; (adr r2, 8011820 <UART_SetConfig+0x520>)
 801181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801181e:	bf00      	nop
 8011820:	08011845 	.word	0x08011845
 8011824:	0801184d 	.word	0x0801184d
 8011828:	08011855 	.word	0x08011855
 801182c:	0801186b 	.word	0x0801186b
 8011830:	0801185b 	.word	0x0801185b
 8011834:	0801186b 	.word	0x0801186b
 8011838:	0801186b 	.word	0x0801186b
 801183c:	0801186b 	.word	0x0801186b
 8011840:	08011863 	.word	0x08011863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011844:	f7fb fd26 	bl	800d294 <HAL_RCC_GetPCLK1Freq>
 8011848:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801184a:	e014      	b.n	8011876 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801184c:	f7fb fd38 	bl	800d2c0 <HAL_RCC_GetPCLK2Freq>
 8011850:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011852:	e010      	b.n	8011876 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011854:	4b1a      	ldr	r3, [pc, #104]	; (80118c0 <UART_SetConfig+0x5c0>)
 8011856:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011858:	e00d      	b.n	8011876 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801185a:	f7fb fc83 	bl	800d164 <HAL_RCC_GetSysClockFreq>
 801185e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011860:	e009      	b.n	8011876 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011866:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011868:	e005      	b.n	8011876 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801186a:	2300      	movs	r3, #0
 801186c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801186e:	2301      	movs	r3, #1
 8011870:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011874:	bf00      	nop
    }

    if (pclk != 0U)
 8011876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011878:	2b00      	cmp	r3, #0
 801187a:	d028      	beq.n	80118ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011880:	4a10      	ldr	r2, [pc, #64]	; (80118c4 <UART_SetConfig+0x5c4>)
 8011882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011886:	461a      	mov	r2, r3
 8011888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188a:	fbb3 f2f2 	udiv	r2, r3, r2
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	685b      	ldr	r3, [r3, #4]
 8011892:	085b      	lsrs	r3, r3, #1
 8011894:	441a      	add	r2, r3
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	fbb2 f3f3 	udiv	r3, r2, r3
 801189e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80118a0:	6a3b      	ldr	r3, [r7, #32]
 80118a2:	2b0f      	cmp	r3, #15
 80118a4:	d910      	bls.n	80118c8 <UART_SetConfig+0x5c8>
 80118a6:	6a3b      	ldr	r3, [r7, #32]
 80118a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118ac:	d20c      	bcs.n	80118c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80118ae:	6a3b      	ldr	r3, [r7, #32]
 80118b0:	b29a      	uxth	r2, r3
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	60da      	str	r2, [r3, #12]
 80118b8:	e009      	b.n	80118ce <UART_SetConfig+0x5ce>
 80118ba:	bf00      	nop
 80118bc:	40008000 	.word	0x40008000
 80118c0:	00f42400 	.word	0x00f42400
 80118c4:	0801c9b0 	.word	0x0801c9b0
      }
      else
      {
        ret = HAL_ERROR;
 80118c8:	2301      	movs	r3, #1
 80118ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	2201      	movs	r2, #1
 80118d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	2201      	movs	r2, #1
 80118da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	2200      	movs	r2, #0
 80118e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	2200      	movs	r2, #0
 80118e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80118ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3730      	adds	r7, #48	; 0x30
 80118f2:	46bd      	mov	sp, r7
 80118f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080118f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80118f8:	b480      	push	{r7}
 80118fa:	b083      	sub	sp, #12
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011904:	f003 0301 	and.w	r3, r3, #1
 8011908:	2b00      	cmp	r3, #0
 801190a:	d00a      	beq.n	8011922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	430a      	orrs	r2, r1
 8011920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011926:	f003 0302 	and.w	r3, r3, #2
 801192a:	2b00      	cmp	r3, #0
 801192c:	d00a      	beq.n	8011944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	685b      	ldr	r3, [r3, #4]
 8011934:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	430a      	orrs	r2, r1
 8011942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011948:	f003 0304 	and.w	r3, r3, #4
 801194c:	2b00      	cmp	r3, #0
 801194e:	d00a      	beq.n	8011966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	685b      	ldr	r3, [r3, #4]
 8011956:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	430a      	orrs	r2, r1
 8011964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801196a:	f003 0308 	and.w	r3, r3, #8
 801196e:	2b00      	cmp	r3, #0
 8011970:	d00a      	beq.n	8011988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	685b      	ldr	r3, [r3, #4]
 8011978:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	430a      	orrs	r2, r1
 8011986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801198c:	f003 0310 	and.w	r3, r3, #16
 8011990:	2b00      	cmp	r3, #0
 8011992:	d00a      	beq.n	80119aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	689b      	ldr	r3, [r3, #8]
 801199a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	430a      	orrs	r2, r1
 80119a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119ae:	f003 0320 	and.w	r3, r3, #32
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d00a      	beq.n	80119cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	689b      	ldr	r3, [r3, #8]
 80119bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	430a      	orrs	r2, r1
 80119ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d01a      	beq.n	8011a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	430a      	orrs	r2, r1
 80119ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80119f6:	d10a      	bne.n	8011a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	430a      	orrs	r2, r1
 8011a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d00a      	beq.n	8011a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	430a      	orrs	r2, r1
 8011a2e:	605a      	str	r2, [r3, #4]
  }
}
 8011a30:	bf00      	nop
 8011a32:	370c      	adds	r7, #12
 8011a34:	46bd      	mov	sp, r7
 8011a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3a:	4770      	bx	lr

08011a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b086      	sub	sp, #24
 8011a40:	af02      	add	r7, sp, #8
 8011a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2200      	movs	r2, #0
 8011a48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011a4c:	f7f9 fe68 	bl	800b720 <HAL_GetTick>
 8011a50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f003 0308 	and.w	r3, r3, #8
 8011a5c:	2b08      	cmp	r3, #8
 8011a5e:	d10e      	bne.n	8011a7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a64:	9300      	str	r3, [sp, #0]
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f000 f82f 	bl	8011ad2 <UART_WaitOnFlagUntilTimeout>
 8011a74:	4603      	mov	r3, r0
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d001      	beq.n	8011a7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a7a:	2303      	movs	r3, #3
 8011a7c:	e025      	b.n	8011aca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	f003 0304 	and.w	r3, r3, #4
 8011a88:	2b04      	cmp	r3, #4
 8011a8a:	d10e      	bne.n	8011aaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a90:	9300      	str	r3, [sp, #0]
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	2200      	movs	r2, #0
 8011a96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f000 f819 	bl	8011ad2 <UART_WaitOnFlagUntilTimeout>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d001      	beq.n	8011aaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011aa6:	2303      	movs	r3, #3
 8011aa8:	e00f      	b.n	8011aca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	2220      	movs	r2, #32
 8011aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	2220      	movs	r2, #32
 8011ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	2200      	movs	r2, #0
 8011abe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011ac8:	2300      	movs	r3, #0
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	3710      	adds	r7, #16
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}

08011ad2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011ad2:	b580      	push	{r7, lr}
 8011ad4:	b09c      	sub	sp, #112	; 0x70
 8011ad6:	af00      	add	r7, sp, #0
 8011ad8:	60f8      	str	r0, [r7, #12]
 8011ada:	60b9      	str	r1, [r7, #8]
 8011adc:	603b      	str	r3, [r7, #0]
 8011ade:	4613      	mov	r3, r2
 8011ae0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ae2:	e0a9      	b.n	8011c38 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aea:	f000 80a5 	beq.w	8011c38 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011aee:	f7f9 fe17 	bl	800b720 <HAL_GetTick>
 8011af2:	4602      	mov	r2, r0
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	1ad3      	subs	r3, r2, r3
 8011af8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d302      	bcc.n	8011b04 <UART_WaitOnFlagUntilTimeout+0x32>
 8011afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d140      	bne.n	8011b86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b0c:	e853 3f00 	ldrex	r3, [r3]
 8011b10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011b18:	667b      	str	r3, [r7, #100]	; 0x64
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	461a      	mov	r2, r3
 8011b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011b24:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011b28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011b2a:	e841 2300 	strex	r3, r2, [r1]
 8011b2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d1e6      	bne.n	8011b04 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	3308      	adds	r3, #8
 8011b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b40:	e853 3f00 	ldrex	r3, [r3]
 8011b44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b48:	f023 0301 	bic.w	r3, r3, #1
 8011b4c:	663b      	str	r3, [r7, #96]	; 0x60
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	3308      	adds	r3, #8
 8011b54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011b56:	64ba      	str	r2, [r7, #72]	; 0x48
 8011b58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011b5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b5e:	e841 2300 	strex	r3, r2, [r1]
 8011b62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d1e5      	bne.n	8011b36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	2220      	movs	r2, #32
 8011b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2220      	movs	r2, #32
 8011b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8011b82:	2303      	movs	r3, #3
 8011b84:	e069      	b.n	8011c5a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	f003 0304 	and.w	r3, r3, #4
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d051      	beq.n	8011c38 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	69db      	ldr	r3, [r3, #28]
 8011b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011ba2:	d149      	bne.n	8011c38 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011bac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb6:	e853 3f00 	ldrex	r3, [r3]
 8011bba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	461a      	mov	r2, r3
 8011bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8011bce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011bd4:	e841 2300 	strex	r3, r2, [r1]
 8011bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d1e6      	bne.n	8011bae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	3308      	adds	r3, #8
 8011be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	e853 3f00 	ldrex	r3, [r3]
 8011bee:	613b      	str	r3, [r7, #16]
   return(result);
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	f023 0301 	bic.w	r3, r3, #1
 8011bf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	3308      	adds	r3, #8
 8011bfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011c00:	623a      	str	r2, [r7, #32]
 8011c02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c04:	69f9      	ldr	r1, [r7, #28]
 8011c06:	6a3a      	ldr	r2, [r7, #32]
 8011c08:	e841 2300 	strex	r3, r2, [r1]
 8011c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8011c0e:	69bb      	ldr	r3, [r7, #24]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d1e5      	bne.n	8011be0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	2220      	movs	r2, #32
 8011c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	2220      	movs	r2, #32
 8011c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2220      	movs	r2, #32
 8011c28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	2200      	movs	r2, #0
 8011c30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8011c34:	2303      	movs	r3, #3
 8011c36:	e010      	b.n	8011c5a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	69da      	ldr	r2, [r3, #28]
 8011c3e:	68bb      	ldr	r3, [r7, #8]
 8011c40:	4013      	ands	r3, r2
 8011c42:	68ba      	ldr	r2, [r7, #8]
 8011c44:	429a      	cmp	r2, r3
 8011c46:	bf0c      	ite	eq
 8011c48:	2301      	moveq	r3, #1
 8011c4a:	2300      	movne	r3, #0
 8011c4c:	b2db      	uxtb	r3, r3
 8011c4e:	461a      	mov	r2, r3
 8011c50:	79fb      	ldrb	r3, [r7, #7]
 8011c52:	429a      	cmp	r2, r3
 8011c54:	f43f af46 	beq.w	8011ae4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011c58:	2300      	movs	r3, #0
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3770      	adds	r7, #112	; 0x70
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}
	...

08011c64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b096      	sub	sp, #88	; 0x58
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	60f8      	str	r0, [r7, #12]
 8011c6c:	60b9      	str	r1, [r7, #8]
 8011c6e:	4613      	mov	r3, r2
 8011c70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	68ba      	ldr	r2, [r7, #8]
 8011c76:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	88fa      	ldrh	r2, [r7, #6]
 8011c7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	2200      	movs	r2, #0
 8011c84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	2222      	movs	r2, #34	; 0x22
 8011c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d02c      	beq.n	8011cf2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c9c:	4a42      	ldr	r2, [pc, #264]	; (8011da8 <UART_Start_Receive_DMA+0x144>)
 8011c9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ca4:	4a41      	ldr	r2, [pc, #260]	; (8011dac <UART_Start_Receive_DMA+0x148>)
 8011ca6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011cac:	4a40      	ldr	r2, [pc, #256]	; (8011db0 <UART_Start_Receive_DMA+0x14c>)
 8011cae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	3324      	adds	r3, #36	; 0x24
 8011cc2:	4619      	mov	r1, r3
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011cc8:	461a      	mov	r2, r3
 8011cca:	88fb      	ldrh	r3, [r7, #6]
 8011ccc:	f7f9 fefe 	bl	800bacc <HAL_DMA_Start_IT>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d00d      	beq.n	8011cf2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	2210      	movs	r2, #16
 8011cda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	2220      	movs	r2, #32
 8011cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8011cee:	2301      	movs	r3, #1
 8011cf0:	e055      	b.n	8011d9e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	691b      	ldr	r3, [r3, #16]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d018      	beq.n	8011d34 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d0a:	e853 3f00 	ldrex	r3, [r3]
 8011d0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011d16:	657b      	str	r3, [r7, #84]	; 0x54
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d20:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d22:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d28:	e841 2300 	strex	r3, r2, [r1]
 8011d2c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d1e6      	bne.n	8011d02 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	3308      	adds	r3, #8
 8011d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d3e:	e853 3f00 	ldrex	r3, [r3]
 8011d42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d46:	f043 0301 	orr.w	r3, r3, #1
 8011d4a:	653b      	str	r3, [r7, #80]	; 0x50
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	3308      	adds	r3, #8
 8011d52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011d54:	637a      	str	r2, [r7, #52]	; 0x34
 8011d56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d5c:	e841 2300 	strex	r3, r2, [r1]
 8011d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d1e5      	bne.n	8011d34 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	3308      	adds	r3, #8
 8011d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d70:	697b      	ldr	r3, [r7, #20]
 8011d72:	e853 3f00 	ldrex	r3, [r3]
 8011d76:	613b      	str	r3, [r7, #16]
   return(result);
 8011d78:	693b      	ldr	r3, [r7, #16]
 8011d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	3308      	adds	r3, #8
 8011d86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011d88:	623a      	str	r2, [r7, #32]
 8011d8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d8c:	69f9      	ldr	r1, [r7, #28]
 8011d8e:	6a3a      	ldr	r2, [r7, #32]
 8011d90:	e841 2300 	strex	r3, r2, [r1]
 8011d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8011d96:	69bb      	ldr	r3, [r7, #24]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d1e5      	bne.n	8011d68 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8011d9c:	2300      	movs	r3, #0
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3758      	adds	r7, #88	; 0x58
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	08011f03 	.word	0x08011f03
 8011dac:	08012029 	.word	0x08012029
 8011db0:	08012061 	.word	0x08012061

08011db4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011db4:	b480      	push	{r7}
 8011db6:	b08f      	sub	sp, #60	; 0x3c
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dc2:	6a3b      	ldr	r3, [r7, #32]
 8011dc4:	e853 3f00 	ldrex	r3, [r3]
 8011dc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8011dca:	69fb      	ldr	r3, [r7, #28]
 8011dcc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ddc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011de2:	e841 2300 	strex	r3, r2, [r1]
 8011de6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d1e6      	bne.n	8011dbc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	3308      	adds	r3, #8
 8011df4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	e853 3f00 	ldrex	r3, [r3]
 8011dfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8011dfe:	68bb      	ldr	r3, [r7, #8]
 8011e00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011e04:	633b      	str	r3, [r7, #48]	; 0x30
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	3308      	adds	r3, #8
 8011e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e0e:	61ba      	str	r2, [r7, #24]
 8011e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e12:	6979      	ldr	r1, [r7, #20]
 8011e14:	69ba      	ldr	r2, [r7, #24]
 8011e16:	e841 2300 	strex	r3, r2, [r1]
 8011e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d1e5      	bne.n	8011dee <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2220      	movs	r2, #32
 8011e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8011e2a:	bf00      	nop
 8011e2c:	373c      	adds	r7, #60	; 0x3c
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e34:	4770      	bx	lr

08011e36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011e36:	b480      	push	{r7}
 8011e38:	b095      	sub	sp, #84	; 0x54
 8011e3a:	af00      	add	r7, sp, #0
 8011e3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e46:	e853 3f00 	ldrex	r3, [r3]
 8011e4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	461a      	mov	r2, r3
 8011e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8011e5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011e64:	e841 2300 	strex	r3, r2, [r1]
 8011e68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d1e6      	bne.n	8011e3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	3308      	adds	r3, #8
 8011e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e78:	6a3b      	ldr	r3, [r7, #32]
 8011e7a:	e853 3f00 	ldrex	r3, [r3]
 8011e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011e80:	69fb      	ldr	r3, [r7, #28]
 8011e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011e86:	f023 0301 	bic.w	r3, r3, #1
 8011e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	3308      	adds	r3, #8
 8011e92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e9c:	e841 2300 	strex	r3, r2, [r1]
 8011ea0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d1e3      	bne.n	8011e70 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011eac:	2b01      	cmp	r3, #1
 8011eae:	d118      	bne.n	8011ee2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	e853 3f00 	ldrex	r3, [r3]
 8011ebc:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	f023 0310 	bic.w	r3, r3, #16
 8011ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	461a      	mov	r2, r3
 8011ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ece:	61bb      	str	r3, [r7, #24]
 8011ed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ed2:	6979      	ldr	r1, [r7, #20]
 8011ed4:	69ba      	ldr	r2, [r7, #24]
 8011ed6:	e841 2300 	strex	r3, r2, [r1]
 8011eda:	613b      	str	r3, [r7, #16]
   return(result);
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d1e6      	bne.n	8011eb0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2220      	movs	r2, #32
 8011ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	2200      	movs	r2, #0
 8011eee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	671a      	str	r2, [r3, #112]	; 0x70
}
 8011ef6:	bf00      	nop
 8011ef8:	3754      	adds	r7, #84	; 0x54
 8011efa:	46bd      	mov	sp, r7
 8011efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f00:	4770      	bx	lr

08011f02 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011f02:	b580      	push	{r7, lr}
 8011f04:	b09c      	sub	sp, #112	; 0x70
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f0e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	f003 0320 	and.w	r3, r3, #32
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d171      	bne.n	8012002 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8011f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f20:	2200      	movs	r2, #0
 8011f22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f2e:	e853 3f00 	ldrex	r3, [r3]
 8011f32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8011f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	461a      	mov	r2, r3
 8011f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f44:	65bb      	str	r3, [r7, #88]	; 0x58
 8011f46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011f4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011f4c:	e841 2300 	strex	r3, r2, [r1]
 8011f50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d1e6      	bne.n	8011f26 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	3308      	adds	r3, #8
 8011f5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f62:	e853 3f00 	ldrex	r3, [r3]
 8011f66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f6a:	f023 0301 	bic.w	r3, r3, #1
 8011f6e:	667b      	str	r3, [r7, #100]	; 0x64
 8011f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	3308      	adds	r3, #8
 8011f76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011f78:	647a      	str	r2, [r7, #68]	; 0x44
 8011f7a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011f7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f80:	e841 2300 	strex	r3, r2, [r1]
 8011f84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d1e5      	bne.n	8011f58 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	3308      	adds	r3, #8
 8011f92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f96:	e853 3f00 	ldrex	r3, [r3]
 8011f9a:	623b      	str	r3, [r7, #32]
   return(result);
 8011f9c:	6a3b      	ldr	r3, [r7, #32]
 8011f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011fa2:	663b      	str	r3, [r7, #96]	; 0x60
 8011fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	3308      	adds	r3, #8
 8011faa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011fac:	633a      	str	r2, [r7, #48]	; 0x30
 8011fae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011fb4:	e841 2300 	strex	r3, r2, [r1]
 8011fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d1e5      	bne.n	8011f8c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fc2:	2220      	movs	r2, #32
 8011fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fcc:	2b01      	cmp	r3, #1
 8011fce:	d118      	bne.n	8012002 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	e853 3f00 	ldrex	r3, [r3]
 8011fdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	f023 0310 	bic.w	r3, r3, #16
 8011fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	461a      	mov	r2, r3
 8011fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011fee:	61fb      	str	r3, [r7, #28]
 8011ff0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff2:	69b9      	ldr	r1, [r7, #24]
 8011ff4:	69fa      	ldr	r2, [r7, #28]
 8011ff6:	e841 2300 	strex	r3, r2, [r1]
 8011ffa:	617b      	str	r3, [r7, #20]
   return(result);
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d1e6      	bne.n	8011fd0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012006:	2b01      	cmp	r3, #1
 8012008:	d107      	bne.n	801201a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801200a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801200c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012010:	4619      	mov	r1, r3
 8012012:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012014:	f7f6 fb88 	bl	8008728 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012018:	e002      	b.n	8012020 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801201a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801201c:	f7ff f952 	bl	80112c4 <HAL_UART_RxCpltCallback>
}
 8012020:	bf00      	nop
 8012022:	3770      	adds	r7, #112	; 0x70
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}

08012028 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b084      	sub	sp, #16
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012034:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801203a:	2b01      	cmp	r3, #1
 801203c:	d109      	bne.n	8012052 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012044:	085b      	lsrs	r3, r3, #1
 8012046:	b29b      	uxth	r3, r3
 8012048:	4619      	mov	r1, r3
 801204a:	68f8      	ldr	r0, [r7, #12]
 801204c:	f7f6 fb6c 	bl	8008728 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012050:	e002      	b.n	8012058 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8012052:	68f8      	ldr	r0, [r7, #12]
 8012054:	f7ff f940 	bl	80112d8 <HAL_UART_RxHalfCpltCallback>
}
 8012058:	bf00      	nop
 801205a:	3710      	adds	r7, #16
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}

08012060 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b086      	sub	sp, #24
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801206c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012074:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801207c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801207e:	697b      	ldr	r3, [r7, #20]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	689b      	ldr	r3, [r3, #8]
 8012084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012088:	2b80      	cmp	r3, #128	; 0x80
 801208a:	d109      	bne.n	80120a0 <UART_DMAError+0x40>
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	2b21      	cmp	r3, #33	; 0x21
 8012090:	d106      	bne.n	80120a0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	2200      	movs	r2, #0
 8012096:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801209a:	6978      	ldr	r0, [r7, #20]
 801209c:	f7ff fe8a 	bl	8011db4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	689b      	ldr	r3, [r3, #8]
 80120a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120aa:	2b40      	cmp	r3, #64	; 0x40
 80120ac:	d109      	bne.n	80120c2 <UART_DMAError+0x62>
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	2b22      	cmp	r3, #34	; 0x22
 80120b2:	d106      	bne.n	80120c2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	2200      	movs	r2, #0
 80120b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80120bc:	6978      	ldr	r0, [r7, #20]
 80120be:	f7ff feba 	bl	8011e36 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120c8:	f043 0210 	orr.w	r2, r3, #16
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80120d2:	6978      	ldr	r0, [r7, #20]
 80120d4:	f7ff f90a 	bl	80112ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80120d8:	bf00      	nop
 80120da:	3718      	adds	r7, #24
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}

080120e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b084      	sub	sp, #16
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	2200      	movs	r2, #0
 80120f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	2200      	movs	r2, #0
 80120fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80120fe:	68f8      	ldr	r0, [r7, #12]
 8012100:	f7ff f8f4 	bl	80112ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012104:	bf00      	nop
 8012106:	3710      	adds	r7, #16
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}

0801210c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b088      	sub	sp, #32
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	e853 3f00 	ldrex	r3, [r3]
 8012120:	60bb      	str	r3, [r7, #8]
   return(result);
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012128:	61fb      	str	r3, [r7, #28]
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	461a      	mov	r2, r3
 8012130:	69fb      	ldr	r3, [r7, #28]
 8012132:	61bb      	str	r3, [r7, #24]
 8012134:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012136:	6979      	ldr	r1, [r7, #20]
 8012138:	69ba      	ldr	r2, [r7, #24]
 801213a:	e841 2300 	strex	r3, r2, [r1]
 801213e:	613b      	str	r3, [r7, #16]
   return(result);
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d1e6      	bne.n	8012114 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	2220      	movs	r2, #32
 801214a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	2200      	movs	r2, #0
 8012152:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f7ff f8ab 	bl	80112b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801215a:	bf00      	nop
 801215c:	3720      	adds	r7, #32
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}

08012162 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012162:	b480      	push	{r7}
 8012164:	b083      	sub	sp, #12
 8012166:	af00      	add	r7, sp, #0
 8012168:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801216a:	bf00      	nop
 801216c:	370c      	adds	r7, #12
 801216e:	46bd      	mov	sp, r7
 8012170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012174:	4770      	bx	lr

08012176 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012176:	b480      	push	{r7}
 8012178:	b083      	sub	sp, #12
 801217a:	af00      	add	r7, sp, #0
 801217c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801217e:	bf00      	nop
 8012180:	370c      	adds	r7, #12
 8012182:	46bd      	mov	sp, r7
 8012184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012188:	4770      	bx	lr

0801218a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801218a:	b480      	push	{r7}
 801218c:	b083      	sub	sp, #12
 801218e:	af00      	add	r7, sp, #0
 8012190:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012192:	bf00      	nop
 8012194:	370c      	adds	r7, #12
 8012196:	46bd      	mov	sp, r7
 8012198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219c:	4770      	bx	lr

0801219e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801219e:	b480      	push	{r7}
 80121a0:	b085      	sub	sp, #20
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80121ac:	2b01      	cmp	r3, #1
 80121ae:	d101      	bne.n	80121b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80121b0:	2302      	movs	r3, #2
 80121b2:	e027      	b.n	8012204 <HAL_UARTEx_DisableFifoMode+0x66>
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2201      	movs	r2, #1
 80121b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	2224      	movs	r2, #36	; 0x24
 80121c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	681a      	ldr	r2, [r3, #0]
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	f022 0201 	bic.w	r2, r2, #1
 80121da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80121e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2200      	movs	r2, #0
 80121e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	68fa      	ldr	r2, [r7, #12]
 80121f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2220      	movs	r2, #32
 80121f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2200      	movs	r2, #0
 80121fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012202:	2300      	movs	r3, #0
}
 8012204:	4618      	mov	r0, r3
 8012206:	3714      	adds	r7, #20
 8012208:	46bd      	mov	sp, r7
 801220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220e:	4770      	bx	lr

08012210 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b084      	sub	sp, #16
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012220:	2b01      	cmp	r3, #1
 8012222:	d101      	bne.n	8012228 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012224:	2302      	movs	r3, #2
 8012226:	e02d      	b.n	8012284 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2201      	movs	r2, #1
 801222c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2224      	movs	r2, #36	; 0x24
 8012234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	681a      	ldr	r2, [r3, #0]
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	f022 0201 	bic.w	r2, r2, #1
 801224e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	689b      	ldr	r3, [r3, #8]
 8012256:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	683a      	ldr	r2, [r7, #0]
 8012260:	430a      	orrs	r2, r1
 8012262:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f000 f8ab 	bl	80123c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	68fa      	ldr	r2, [r7, #12]
 8012270:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2220      	movs	r2, #32
 8012276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2200      	movs	r2, #0
 801227e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012282:	2300      	movs	r3, #0
}
 8012284:	4618      	mov	r0, r3
 8012286:	3710      	adds	r7, #16
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}

0801228c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801229c:	2b01      	cmp	r3, #1
 801229e:	d101      	bne.n	80122a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80122a0:	2302      	movs	r3, #2
 80122a2:	e02d      	b.n	8012300 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2201      	movs	r2, #1
 80122a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	2224      	movs	r2, #36	; 0x24
 80122b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	681a      	ldr	r2, [r3, #0]
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	f022 0201 	bic.w	r2, r2, #1
 80122ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	689b      	ldr	r3, [r3, #8]
 80122d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	683a      	ldr	r2, [r7, #0]
 80122dc:	430a      	orrs	r2, r1
 80122de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f000 f86d 	bl	80123c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	68fa      	ldr	r2, [r7, #12]
 80122ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2220      	movs	r2, #32
 80122f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2200      	movs	r2, #0
 80122fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80122fe:	2300      	movs	r3, #0
}
 8012300:	4618      	mov	r0, r3
 8012302:	3710      	adds	r7, #16
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}

08012308 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b08c      	sub	sp, #48	; 0x30
 801230c:	af00      	add	r7, sp, #0
 801230e:	60f8      	str	r0, [r7, #12]
 8012310:	60b9      	str	r1, [r7, #8]
 8012312:	4613      	mov	r3, r2
 8012314:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801231c:	2b20      	cmp	r3, #32
 801231e:	d14a      	bne.n	80123b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d002      	beq.n	801232c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8012326:	88fb      	ldrh	r3, [r7, #6]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d101      	bne.n	8012330 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 801232c:	2301      	movs	r3, #1
 801232e:	e043      	b.n	80123b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012336:	2b01      	cmp	r3, #1
 8012338:	d101      	bne.n	801233e <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 801233a:	2302      	movs	r3, #2
 801233c:	e03c      	b.n	80123b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	2201      	movs	r2, #1
 8012342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	2201      	movs	r2, #1
 801234a:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801234c:	88fb      	ldrh	r3, [r7, #6]
 801234e:	461a      	mov	r2, r3
 8012350:	68b9      	ldr	r1, [r7, #8]
 8012352:	68f8      	ldr	r0, [r7, #12]
 8012354:	f7ff fc86 	bl	8011c64 <UART_Start_Receive_DMA>
 8012358:	4603      	mov	r3, r0
 801235a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801235e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012362:	2b00      	cmp	r3, #0
 8012364:	d124      	bne.n	80123b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801236a:	2b01      	cmp	r3, #1
 801236c:	d11d      	bne.n	80123aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	2210      	movs	r2, #16
 8012374:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801237c:	69bb      	ldr	r3, [r7, #24]
 801237e:	e853 3f00 	ldrex	r3, [r3]
 8012382:	617b      	str	r3, [r7, #20]
   return(result);
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	f043 0310 	orr.w	r3, r3, #16
 801238a:	62bb      	str	r3, [r7, #40]	; 0x28
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	461a      	mov	r2, r3
 8012392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012394:	627b      	str	r3, [r7, #36]	; 0x24
 8012396:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012398:	6a39      	ldr	r1, [r7, #32]
 801239a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801239c:	e841 2300 	strex	r3, r2, [r1]
 80123a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d1e6      	bne.n	8012376 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80123a8:	e002      	b.n	80123b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80123aa:	2301      	movs	r3, #1
 80123ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80123b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123b4:	e000      	b.n	80123b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80123b6:	2302      	movs	r3, #2
  }
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	3730      	adds	r7, #48	; 0x30
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}

080123c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80123c0:	b480      	push	{r7}
 80123c2:	b085      	sub	sp, #20
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d108      	bne.n	80123e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2201      	movs	r2, #1
 80123d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2201      	movs	r2, #1
 80123dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80123e0:	e031      	b.n	8012446 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80123e2:	2308      	movs	r3, #8
 80123e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80123e6:	2308      	movs	r3, #8
 80123e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	689b      	ldr	r3, [r3, #8]
 80123f0:	0e5b      	lsrs	r3, r3, #25
 80123f2:	b2db      	uxtb	r3, r3
 80123f4:	f003 0307 	and.w	r3, r3, #7
 80123f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	689b      	ldr	r3, [r3, #8]
 8012400:	0f5b      	lsrs	r3, r3, #29
 8012402:	b2db      	uxtb	r3, r3
 8012404:	f003 0307 	and.w	r3, r3, #7
 8012408:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801240a:	7bbb      	ldrb	r3, [r7, #14]
 801240c:	7b3a      	ldrb	r2, [r7, #12]
 801240e:	4911      	ldr	r1, [pc, #68]	; (8012454 <UARTEx_SetNbDataToProcess+0x94>)
 8012410:	5c8a      	ldrb	r2, [r1, r2]
 8012412:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012416:	7b3a      	ldrb	r2, [r7, #12]
 8012418:	490f      	ldr	r1, [pc, #60]	; (8012458 <UARTEx_SetNbDataToProcess+0x98>)
 801241a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801241c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012420:	b29a      	uxth	r2, r3
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012428:	7bfb      	ldrb	r3, [r7, #15]
 801242a:	7b7a      	ldrb	r2, [r7, #13]
 801242c:	4909      	ldr	r1, [pc, #36]	; (8012454 <UARTEx_SetNbDataToProcess+0x94>)
 801242e:	5c8a      	ldrb	r2, [r1, r2]
 8012430:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012434:	7b7a      	ldrb	r2, [r7, #13]
 8012436:	4908      	ldr	r1, [pc, #32]	; (8012458 <UARTEx_SetNbDataToProcess+0x98>)
 8012438:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801243a:	fb93 f3f2 	sdiv	r3, r3, r2
 801243e:	b29a      	uxth	r2, r3
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012446:	bf00      	nop
 8012448:	3714      	adds	r7, #20
 801244a:	46bd      	mov	sp, r7
 801244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012450:	4770      	bx	lr
 8012452:	bf00      	nop
 8012454:	0801c9c8 	.word	0x0801c9c8
 8012458:	0801c9d0 	.word	0x0801c9d0

0801245c <__NVIC_SetPriority>:
{
 801245c:	b480      	push	{r7}
 801245e:	b083      	sub	sp, #12
 8012460:	af00      	add	r7, sp, #0
 8012462:	4603      	mov	r3, r0
 8012464:	6039      	str	r1, [r7, #0]
 8012466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801246c:	2b00      	cmp	r3, #0
 801246e:	db0a      	blt.n	8012486 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	b2da      	uxtb	r2, r3
 8012474:	490c      	ldr	r1, [pc, #48]	; (80124a8 <__NVIC_SetPriority+0x4c>)
 8012476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801247a:	0112      	lsls	r2, r2, #4
 801247c:	b2d2      	uxtb	r2, r2
 801247e:	440b      	add	r3, r1
 8012480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012484:	e00a      	b.n	801249c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	b2da      	uxtb	r2, r3
 801248a:	4908      	ldr	r1, [pc, #32]	; (80124ac <__NVIC_SetPriority+0x50>)
 801248c:	79fb      	ldrb	r3, [r7, #7]
 801248e:	f003 030f 	and.w	r3, r3, #15
 8012492:	3b04      	subs	r3, #4
 8012494:	0112      	lsls	r2, r2, #4
 8012496:	b2d2      	uxtb	r2, r2
 8012498:	440b      	add	r3, r1
 801249a:	761a      	strb	r2, [r3, #24]
}
 801249c:	bf00      	nop
 801249e:	370c      	adds	r7, #12
 80124a0:	46bd      	mov	sp, r7
 80124a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a6:	4770      	bx	lr
 80124a8:	e000e100 	.word	0xe000e100
 80124ac:	e000ed00 	.word	0xe000ed00

080124b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80124b0:	b580      	push	{r7, lr}
 80124b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80124b4:	4b05      	ldr	r3, [pc, #20]	; (80124cc <SysTick_Handler+0x1c>)
 80124b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80124b8:	f002 fde8 	bl	801508c <xTaskGetSchedulerState>
 80124bc:	4603      	mov	r3, r0
 80124be:	2b01      	cmp	r3, #1
 80124c0:	d001      	beq.n	80124c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80124c2:	f003 fdc1 	bl	8016048 <xPortSysTickHandler>
  }
}
 80124c6:	bf00      	nop
 80124c8:	bd80      	pop	{r7, pc}
 80124ca:	bf00      	nop
 80124cc:	e000e010 	.word	0xe000e010

080124d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80124d0:	b580      	push	{r7, lr}
 80124d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80124d4:	2100      	movs	r1, #0
 80124d6:	f06f 0004 	mvn.w	r0, #4
 80124da:	f7ff ffbf 	bl	801245c <__NVIC_SetPriority>
#endif
}
 80124de:	bf00      	nop
 80124e0:	bd80      	pop	{r7, pc}
	...

080124e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80124e4:	b480      	push	{r7}
 80124e6:	b083      	sub	sp, #12
 80124e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124ea:	f3ef 8305 	mrs	r3, IPSR
 80124ee:	603b      	str	r3, [r7, #0]
  return(result);
 80124f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d003      	beq.n	80124fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80124f6:	f06f 0305 	mvn.w	r3, #5
 80124fa:	607b      	str	r3, [r7, #4]
 80124fc:	e00c      	b.n	8012518 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80124fe:	4b0a      	ldr	r3, [pc, #40]	; (8012528 <osKernelInitialize+0x44>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d105      	bne.n	8012512 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012506:	4b08      	ldr	r3, [pc, #32]	; (8012528 <osKernelInitialize+0x44>)
 8012508:	2201      	movs	r2, #1
 801250a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801250c:	2300      	movs	r3, #0
 801250e:	607b      	str	r3, [r7, #4]
 8012510:	e002      	b.n	8012518 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012512:	f04f 33ff 	mov.w	r3, #4294967295
 8012516:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012518:	687b      	ldr	r3, [r7, #4]
}
 801251a:	4618      	mov	r0, r3
 801251c:	370c      	adds	r7, #12
 801251e:	46bd      	mov	sp, r7
 8012520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012524:	4770      	bx	lr
 8012526:	bf00      	nop
 8012528:	200045c0 	.word	0x200045c0

0801252c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012532:	f3ef 8305 	mrs	r3, IPSR
 8012536:	603b      	str	r3, [r7, #0]
  return(result);
 8012538:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801253a:	2b00      	cmp	r3, #0
 801253c:	d003      	beq.n	8012546 <osKernelStart+0x1a>
    stat = osErrorISR;
 801253e:	f06f 0305 	mvn.w	r3, #5
 8012542:	607b      	str	r3, [r7, #4]
 8012544:	e010      	b.n	8012568 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012546:	4b0b      	ldr	r3, [pc, #44]	; (8012574 <osKernelStart+0x48>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	2b01      	cmp	r3, #1
 801254c:	d109      	bne.n	8012562 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801254e:	f7ff ffbf 	bl	80124d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012552:	4b08      	ldr	r3, [pc, #32]	; (8012574 <osKernelStart+0x48>)
 8012554:	2202      	movs	r2, #2
 8012556:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012558:	f002 f8a2 	bl	80146a0 <vTaskStartScheduler>
      stat = osOK;
 801255c:	2300      	movs	r3, #0
 801255e:	607b      	str	r3, [r7, #4]
 8012560:	e002      	b.n	8012568 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012562:	f04f 33ff 	mov.w	r3, #4294967295
 8012566:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012568:	687b      	ldr	r3, [r7, #4]
}
 801256a:	4618      	mov	r0, r3
 801256c:	3708      	adds	r7, #8
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}
 8012572:	bf00      	nop
 8012574:	200045c0 	.word	0x200045c0

08012578 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012578:	b580      	push	{r7, lr}
 801257a:	b08e      	sub	sp, #56	; 0x38
 801257c:	af04      	add	r7, sp, #16
 801257e:	60f8      	str	r0, [r7, #12]
 8012580:	60b9      	str	r1, [r7, #8]
 8012582:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012584:	2300      	movs	r3, #0
 8012586:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012588:	f3ef 8305 	mrs	r3, IPSR
 801258c:	617b      	str	r3, [r7, #20]
  return(result);
 801258e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012590:	2b00      	cmp	r3, #0
 8012592:	d17e      	bne.n	8012692 <osThreadNew+0x11a>
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d07b      	beq.n	8012692 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801259a:	2380      	movs	r3, #128	; 0x80
 801259c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801259e:	2318      	movs	r3, #24
 80125a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80125a2:	2300      	movs	r3, #0
 80125a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80125a6:	f04f 33ff 	mov.w	r3, #4294967295
 80125aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d045      	beq.n	801263e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d002      	beq.n	80125c0 <osThreadNew+0x48>
        name = attr->name;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	699b      	ldr	r3, [r3, #24]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d002      	beq.n	80125ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	699b      	ldr	r3, [r3, #24]
 80125cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80125ce:	69fb      	ldr	r3, [r7, #28]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d008      	beq.n	80125e6 <osThreadNew+0x6e>
 80125d4:	69fb      	ldr	r3, [r7, #28]
 80125d6:	2b38      	cmp	r3, #56	; 0x38
 80125d8:	d805      	bhi.n	80125e6 <osThreadNew+0x6e>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	685b      	ldr	r3, [r3, #4]
 80125de:	f003 0301 	and.w	r3, r3, #1
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d001      	beq.n	80125ea <osThreadNew+0x72>
        return (NULL);
 80125e6:	2300      	movs	r3, #0
 80125e8:	e054      	b.n	8012694 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	695b      	ldr	r3, [r3, #20]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d003      	beq.n	80125fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	695b      	ldr	r3, [r3, #20]
 80125f6:	089b      	lsrs	r3, r3, #2
 80125f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	689b      	ldr	r3, [r3, #8]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d00e      	beq.n	8012620 <osThreadNew+0xa8>
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	68db      	ldr	r3, [r3, #12]
 8012606:	2b6b      	cmp	r3, #107	; 0x6b
 8012608:	d90a      	bls.n	8012620 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801260e:	2b00      	cmp	r3, #0
 8012610:	d006      	beq.n	8012620 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	695b      	ldr	r3, [r3, #20]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d002      	beq.n	8012620 <osThreadNew+0xa8>
        mem = 1;
 801261a:	2301      	movs	r3, #1
 801261c:	61bb      	str	r3, [r7, #24]
 801261e:	e010      	b.n	8012642 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	689b      	ldr	r3, [r3, #8]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d10c      	bne.n	8012642 <osThreadNew+0xca>
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	68db      	ldr	r3, [r3, #12]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d108      	bne.n	8012642 <osThreadNew+0xca>
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	691b      	ldr	r3, [r3, #16]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d104      	bne.n	8012642 <osThreadNew+0xca>
          mem = 0;
 8012638:	2300      	movs	r3, #0
 801263a:	61bb      	str	r3, [r7, #24]
 801263c:	e001      	b.n	8012642 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801263e:	2300      	movs	r3, #0
 8012640:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012642:	69bb      	ldr	r3, [r7, #24]
 8012644:	2b01      	cmp	r3, #1
 8012646:	d110      	bne.n	801266a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801264c:	687a      	ldr	r2, [r7, #4]
 801264e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012650:	9202      	str	r2, [sp, #8]
 8012652:	9301      	str	r3, [sp, #4]
 8012654:	69fb      	ldr	r3, [r7, #28]
 8012656:	9300      	str	r3, [sp, #0]
 8012658:	68bb      	ldr	r3, [r7, #8]
 801265a:	6a3a      	ldr	r2, [r7, #32]
 801265c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801265e:	68f8      	ldr	r0, [r7, #12]
 8012660:	f001 fe48 	bl	80142f4 <xTaskCreateStatic>
 8012664:	4603      	mov	r3, r0
 8012666:	613b      	str	r3, [r7, #16]
 8012668:	e013      	b.n	8012692 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801266a:	69bb      	ldr	r3, [r7, #24]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d110      	bne.n	8012692 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012670:	6a3b      	ldr	r3, [r7, #32]
 8012672:	b29a      	uxth	r2, r3
 8012674:	f107 0310 	add.w	r3, r7, #16
 8012678:	9301      	str	r3, [sp, #4]
 801267a:	69fb      	ldr	r3, [r7, #28]
 801267c:	9300      	str	r3, [sp, #0]
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012682:	68f8      	ldr	r0, [r7, #12]
 8012684:	f001 fe93 	bl	80143ae <xTaskCreate>
 8012688:	4603      	mov	r3, r0
 801268a:	2b01      	cmp	r3, #1
 801268c:	d001      	beq.n	8012692 <osThreadNew+0x11a>
            hTask = NULL;
 801268e:	2300      	movs	r3, #0
 8012690:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012692:	693b      	ldr	r3, [r7, #16]
}
 8012694:	4618      	mov	r0, r3
 8012696:	3728      	adds	r7, #40	; 0x28
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801269c:	b580      	push	{r7, lr}
 801269e:	b084      	sub	sp, #16
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126a4:	f3ef 8305 	mrs	r3, IPSR
 80126a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80126aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d003      	beq.n	80126b8 <osDelay+0x1c>
    stat = osErrorISR;
 80126b0:	f06f 0305 	mvn.w	r3, #5
 80126b4:	60fb      	str	r3, [r7, #12]
 80126b6:	e007      	b.n	80126c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80126b8:	2300      	movs	r3, #0
 80126ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d002      	beq.n	80126c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	f001 ffb8 	bl	8014638 <vTaskDelay>
    }
  }

  return (stat);
 80126c8:	68fb      	ldr	r3, [r7, #12]
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3710      	adds	r7, #16
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}

080126d2 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80126d2:	b580      	push	{r7, lr}
 80126d4:	b084      	sub	sp, #16
 80126d6:	af00      	add	r7, sp, #0
 80126d8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f003 fab4 	bl	8015c48 <pvTimerGetTimerID>
 80126e0:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d005      	beq.n	80126f4 <TimerCallback+0x22>
    callb->func (callb->arg);
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	68fa      	ldr	r2, [r7, #12]
 80126ee:	6852      	ldr	r2, [r2, #4]
 80126f0:	4610      	mov	r0, r2
 80126f2:	4798      	blx	r3
  }
}
 80126f4:	bf00      	nop
 80126f6:	3710      	adds	r7, #16
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}

080126fc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b08c      	sub	sp, #48	; 0x30
 8012700:	af02      	add	r7, sp, #8
 8012702:	60f8      	str	r0, [r7, #12]
 8012704:	607a      	str	r2, [r7, #4]
 8012706:	603b      	str	r3, [r7, #0]
 8012708:	460b      	mov	r3, r1
 801270a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 801270c:	2300      	movs	r3, #0
 801270e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012710:	f3ef 8305 	mrs	r3, IPSR
 8012714:	613b      	str	r3, [r7, #16]
  return(result);
 8012716:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8012718:	2b00      	cmp	r3, #0
 801271a:	d163      	bne.n	80127e4 <osTimerNew+0xe8>
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d060      	beq.n	80127e4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8012722:	2008      	movs	r0, #8
 8012724:	f003 fd20 	bl	8016168 <pvPortMalloc>
 8012728:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d059      	beq.n	80127e4 <osTimerNew+0xe8>
      callb->func = func;
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	68fa      	ldr	r2, [r7, #12]
 8012734:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	687a      	ldr	r2, [r7, #4]
 801273a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 801273c:	7afb      	ldrb	r3, [r7, #11]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d102      	bne.n	8012748 <osTimerNew+0x4c>
        reload = pdFALSE;
 8012742:	2300      	movs	r3, #0
 8012744:	61fb      	str	r3, [r7, #28]
 8012746:	e001      	b.n	801274c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8012748:	2301      	movs	r3, #1
 801274a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 801274c:	f04f 33ff 	mov.w	r3, #4294967295
 8012750:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8012752:	2300      	movs	r3, #0
 8012754:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d01c      	beq.n	8012796 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d002      	beq.n	801276a <osTimerNew+0x6e>
          name = attr->name;
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	689b      	ldr	r3, [r3, #8]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d006      	beq.n	8012780 <osTimerNew+0x84>
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	68db      	ldr	r3, [r3, #12]
 8012776:	2b2b      	cmp	r3, #43	; 0x2b
 8012778:	d902      	bls.n	8012780 <osTimerNew+0x84>
          mem = 1;
 801277a:	2301      	movs	r3, #1
 801277c:	61bb      	str	r3, [r7, #24]
 801277e:	e00c      	b.n	801279a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	689b      	ldr	r3, [r3, #8]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d108      	bne.n	801279a <osTimerNew+0x9e>
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	68db      	ldr	r3, [r3, #12]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d104      	bne.n	801279a <osTimerNew+0x9e>
            mem = 0;
 8012790:	2300      	movs	r3, #0
 8012792:	61bb      	str	r3, [r7, #24]
 8012794:	e001      	b.n	801279a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8012796:	2300      	movs	r3, #0
 8012798:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 801279a:	69bb      	ldr	r3, [r7, #24]
 801279c:	2b01      	cmp	r3, #1
 801279e:	d10c      	bne.n	80127ba <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	689b      	ldr	r3, [r3, #8]
 80127a4:	9301      	str	r3, [sp, #4]
 80127a6:	4b12      	ldr	r3, [pc, #72]	; (80127f0 <osTimerNew+0xf4>)
 80127a8:	9300      	str	r3, [sp, #0]
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	69fa      	ldr	r2, [r7, #28]
 80127ae:	2101      	movs	r1, #1
 80127b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127b2:	f002 feca 	bl	801554a <xTimerCreateStatic>
 80127b6:	6238      	str	r0, [r7, #32]
 80127b8:	e00b      	b.n	80127d2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80127ba:	69bb      	ldr	r3, [r7, #24]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d108      	bne.n	80127d2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80127c0:	4b0b      	ldr	r3, [pc, #44]	; (80127f0 <osTimerNew+0xf4>)
 80127c2:	9300      	str	r3, [sp, #0]
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	69fa      	ldr	r2, [r7, #28]
 80127c8:	2101      	movs	r1, #1
 80127ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127cc:	f002 fe9c 	bl	8015508 <xTimerCreate>
 80127d0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80127d2:	6a3b      	ldr	r3, [r7, #32]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d105      	bne.n	80127e4 <osTimerNew+0xe8>
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d002      	beq.n	80127e4 <osTimerNew+0xe8>
        vPortFree (callb);
 80127de:	6978      	ldr	r0, [r7, #20]
 80127e0:	f003 fd8e 	bl	8016300 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80127e4:	6a3b      	ldr	r3, [r7, #32]
}
 80127e6:	4618      	mov	r0, r3
 80127e8:	3728      	adds	r7, #40	; 0x28
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}
 80127ee:	bf00      	nop
 80127f0:	080126d3 	.word	0x080126d3

080127f4 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b086      	sub	sp, #24
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80127fc:	2300      	movs	r3, #0
 80127fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012800:	f3ef 8305 	mrs	r3, IPSR
 8012804:	60fb      	str	r3, [r7, #12]
  return(result);
 8012806:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012808:	2b00      	cmp	r3, #0
 801280a:	d12d      	bne.n	8012868 <osEventFlagsNew+0x74>
    mem = -1;
 801280c:	f04f 33ff 	mov.w	r3, #4294967295
 8012810:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d015      	beq.n	8012844 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	689b      	ldr	r3, [r3, #8]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d006      	beq.n	801282e <osEventFlagsNew+0x3a>
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	68db      	ldr	r3, [r3, #12]
 8012824:	2b1f      	cmp	r3, #31
 8012826:	d902      	bls.n	801282e <osEventFlagsNew+0x3a>
        mem = 1;
 8012828:	2301      	movs	r3, #1
 801282a:	613b      	str	r3, [r7, #16]
 801282c:	e00c      	b.n	8012848 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	689b      	ldr	r3, [r3, #8]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d108      	bne.n	8012848 <osEventFlagsNew+0x54>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	68db      	ldr	r3, [r3, #12]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d104      	bne.n	8012848 <osEventFlagsNew+0x54>
          mem = 0;
 801283e:	2300      	movs	r3, #0
 8012840:	613b      	str	r3, [r7, #16]
 8012842:	e001      	b.n	8012848 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8012844:	2300      	movs	r3, #0
 8012846:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	2b01      	cmp	r3, #1
 801284c:	d106      	bne.n	801285c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	689b      	ldr	r3, [r3, #8]
 8012852:	4618      	mov	r0, r3
 8012854:	f000 fb2c 	bl	8012eb0 <xEventGroupCreateStatic>
 8012858:	6178      	str	r0, [r7, #20]
 801285a:	e005      	b.n	8012868 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d102      	bne.n	8012868 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8012862:	f000 fb5c 	bl	8012f1e <xEventGroupCreate>
 8012866:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8012868:	697b      	ldr	r3, [r7, #20]
}
 801286a:	4618      	mov	r0, r3
 801286c:	3718      	adds	r7, #24
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
	...

08012874 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8012874:	b580      	push	{r7, lr}
 8012876:	b086      	sub	sp, #24
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
 801287c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012882:	693b      	ldr	r3, [r7, #16]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d004      	beq.n	8012892 <osEventFlagsSet+0x1e>
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801288e:	2b00      	cmp	r3, #0
 8012890:	d003      	beq.n	801289a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012892:	f06f 0303 	mvn.w	r3, #3
 8012896:	617b      	str	r3, [r7, #20]
 8012898:	e028      	b.n	80128ec <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801289a:	f3ef 8305 	mrs	r3, IPSR
 801289e:	60fb      	str	r3, [r7, #12]
  return(result);
 80128a0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d01d      	beq.n	80128e2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80128a6:	2300      	movs	r3, #0
 80128a8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80128aa:	f107 0308 	add.w	r3, r7, #8
 80128ae:	461a      	mov	r2, r3
 80128b0:	6839      	ldr	r1, [r7, #0]
 80128b2:	6938      	ldr	r0, [r7, #16]
 80128b4:	f000 fcd6 	bl	8013264 <xEventGroupSetBitsFromISR>
 80128b8:	4603      	mov	r3, r0
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d103      	bne.n	80128c6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80128be:	f06f 0302 	mvn.w	r3, #2
 80128c2:	617b      	str	r3, [r7, #20]
 80128c4:	e012      	b.n	80128ec <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d00d      	beq.n	80128ec <osEventFlagsSet+0x78>
 80128d0:	4b09      	ldr	r3, [pc, #36]	; (80128f8 <osEventFlagsSet+0x84>)
 80128d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128d6:	601a      	str	r2, [r3, #0]
 80128d8:	f3bf 8f4f 	dsb	sy
 80128dc:	f3bf 8f6f 	isb	sy
 80128e0:	e004      	b.n	80128ec <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80128e2:	6839      	ldr	r1, [r7, #0]
 80128e4:	6938      	ldr	r0, [r7, #16]
 80128e6:	f000 fc03 	bl	80130f0 <xEventGroupSetBits>
 80128ea:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80128ec:	697b      	ldr	r3, [r7, #20]
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	3718      	adds	r7, #24
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}
 80128f6:	bf00      	nop
 80128f8:	e000ed04 	.word	0xe000ed04

080128fc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b08c      	sub	sp, #48	; 0x30
 8012900:	af02      	add	r7, sp, #8
 8012902:	60f8      	str	r0, [r7, #12]
 8012904:	60b9      	str	r1, [r7, #8]
 8012906:	607a      	str	r2, [r7, #4]
 8012908:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801290e:	69bb      	ldr	r3, [r7, #24]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d004      	beq.n	801291e <osEventFlagsWait+0x22>
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801291a:	2b00      	cmp	r3, #0
 801291c:	d003      	beq.n	8012926 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 801291e:	f06f 0303 	mvn.w	r3, #3
 8012922:	61fb      	str	r3, [r7, #28]
 8012924:	e04b      	b.n	80129be <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012926:	f3ef 8305 	mrs	r3, IPSR
 801292a:	617b      	str	r3, [r7, #20]
  return(result);
 801292c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801292e:	2b00      	cmp	r3, #0
 8012930:	d003      	beq.n	801293a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8012932:	f06f 0305 	mvn.w	r3, #5
 8012936:	61fb      	str	r3, [r7, #28]
 8012938:	e041      	b.n	80129be <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	f003 0301 	and.w	r3, r3, #1
 8012940:	2b00      	cmp	r3, #0
 8012942:	d002      	beq.n	801294a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8012944:	2301      	movs	r3, #1
 8012946:	627b      	str	r3, [r7, #36]	; 0x24
 8012948:	e001      	b.n	801294e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 801294a:	2300      	movs	r3, #0
 801294c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f003 0302 	and.w	r3, r3, #2
 8012954:	2b00      	cmp	r3, #0
 8012956:	d002      	beq.n	801295e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8012958:	2300      	movs	r3, #0
 801295a:	623b      	str	r3, [r7, #32]
 801295c:	e001      	b.n	8012962 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 801295e:	2301      	movs	r3, #1
 8012960:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	9300      	str	r3, [sp, #0]
 8012966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012968:	6a3a      	ldr	r2, [r7, #32]
 801296a:	68b9      	ldr	r1, [r7, #8]
 801296c:	69b8      	ldr	r0, [r7, #24]
 801296e:	f000 faf1 	bl	8012f54 <xEventGroupWaitBits>
 8012972:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f003 0301 	and.w	r3, r3, #1
 801297a:	2b00      	cmp	r3, #0
 801297c:	d010      	beq.n	80129a0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801297e:	68ba      	ldr	r2, [r7, #8]
 8012980:	69fb      	ldr	r3, [r7, #28]
 8012982:	4013      	ands	r3, r2
 8012984:	68ba      	ldr	r2, [r7, #8]
 8012986:	429a      	cmp	r2, r3
 8012988:	d019      	beq.n	80129be <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d003      	beq.n	8012998 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8012990:	f06f 0301 	mvn.w	r3, #1
 8012994:	61fb      	str	r3, [r7, #28]
 8012996:	e012      	b.n	80129be <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012998:	f06f 0302 	mvn.w	r3, #2
 801299c:	61fb      	str	r3, [r7, #28]
 801299e:	e00e      	b.n	80129be <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80129a0:	68ba      	ldr	r2, [r7, #8]
 80129a2:	69fb      	ldr	r3, [r7, #28]
 80129a4:	4013      	ands	r3, r2
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d109      	bne.n	80129be <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d003      	beq.n	80129b8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80129b0:	f06f 0301 	mvn.w	r3, #1
 80129b4:	61fb      	str	r3, [r7, #28]
 80129b6:	e002      	b.n	80129be <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80129b8:	f06f 0302 	mvn.w	r3, #2
 80129bc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80129be:	69fb      	ldr	r3, [r7, #28]
}
 80129c0:	4618      	mov	r0, r3
 80129c2:	3728      	adds	r7, #40	; 0x28
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}

080129c8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b088      	sub	sp, #32
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80129d0:	2300      	movs	r3, #0
 80129d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129d4:	f3ef 8305 	mrs	r3, IPSR
 80129d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80129da:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d174      	bne.n	8012aca <osMutexNew+0x102>
    if (attr != NULL) {
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d003      	beq.n	80129ee <osMutexNew+0x26>
      type = attr->attr_bits;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	61bb      	str	r3, [r7, #24]
 80129ec:	e001      	b.n	80129f2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80129ee:	2300      	movs	r3, #0
 80129f0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80129f2:	69bb      	ldr	r3, [r7, #24]
 80129f4:	f003 0301 	and.w	r3, r3, #1
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d002      	beq.n	8012a02 <osMutexNew+0x3a>
      rmtx = 1U;
 80129fc:	2301      	movs	r3, #1
 80129fe:	617b      	str	r3, [r7, #20]
 8012a00:	e001      	b.n	8012a06 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8012a02:	2300      	movs	r3, #0
 8012a04:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8012a06:	69bb      	ldr	r3, [r7, #24]
 8012a08:	f003 0308 	and.w	r3, r3, #8
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d15c      	bne.n	8012aca <osMutexNew+0x102>
      mem = -1;
 8012a10:	f04f 33ff 	mov.w	r3, #4294967295
 8012a14:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d015      	beq.n	8012a48 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	689b      	ldr	r3, [r3, #8]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d006      	beq.n	8012a32 <osMutexNew+0x6a>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	68db      	ldr	r3, [r3, #12]
 8012a28:	2b4f      	cmp	r3, #79	; 0x4f
 8012a2a:	d902      	bls.n	8012a32 <osMutexNew+0x6a>
          mem = 1;
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	613b      	str	r3, [r7, #16]
 8012a30:	e00c      	b.n	8012a4c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	689b      	ldr	r3, [r3, #8]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d108      	bne.n	8012a4c <osMutexNew+0x84>
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	68db      	ldr	r3, [r3, #12]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d104      	bne.n	8012a4c <osMutexNew+0x84>
            mem = 0;
 8012a42:	2300      	movs	r3, #0
 8012a44:	613b      	str	r3, [r7, #16]
 8012a46:	e001      	b.n	8012a4c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8012a48:	2300      	movs	r3, #0
 8012a4a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8012a4c:	693b      	ldr	r3, [r7, #16]
 8012a4e:	2b01      	cmp	r3, #1
 8012a50:	d112      	bne.n	8012a78 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d007      	beq.n	8012a68 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	689b      	ldr	r3, [r3, #8]
 8012a5c:	4619      	mov	r1, r3
 8012a5e:	2004      	movs	r0, #4
 8012a60:	f000 fe37 	bl	80136d2 <xQueueCreateMutexStatic>
 8012a64:	61f8      	str	r0, [r7, #28]
 8012a66:	e016      	b.n	8012a96 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	689b      	ldr	r3, [r3, #8]
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	2001      	movs	r0, #1
 8012a70:	f000 fe2f 	bl	80136d2 <xQueueCreateMutexStatic>
 8012a74:	61f8      	str	r0, [r7, #28]
 8012a76:	e00e      	b.n	8012a96 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d10b      	bne.n	8012a96 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8012a7e:	697b      	ldr	r3, [r7, #20]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d004      	beq.n	8012a8e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8012a84:	2004      	movs	r0, #4
 8012a86:	f000 fe0c 	bl	80136a2 <xQueueCreateMutex>
 8012a8a:	61f8      	str	r0, [r7, #28]
 8012a8c:	e003      	b.n	8012a96 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8012a8e:	2001      	movs	r0, #1
 8012a90:	f000 fe07 	bl	80136a2 <xQueueCreateMutex>
 8012a94:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8012a96:	69fb      	ldr	r3, [r7, #28]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d00c      	beq.n	8012ab6 <osMutexNew+0xee>
        if (attr != NULL) {
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d003      	beq.n	8012aaa <osMutexNew+0xe2>
          name = attr->name;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	60fb      	str	r3, [r7, #12]
 8012aa8:	e001      	b.n	8012aae <osMutexNew+0xe6>
        } else {
          name = NULL;
 8012aaa:	2300      	movs	r3, #0
 8012aac:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8012aae:	68f9      	ldr	r1, [r7, #12]
 8012ab0:	69f8      	ldr	r0, [r7, #28]
 8012ab2:	f001 fbc1 	bl	8014238 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8012ab6:	69fb      	ldr	r3, [r7, #28]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d006      	beq.n	8012aca <osMutexNew+0x102>
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d003      	beq.n	8012aca <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8012ac2:	69fb      	ldr	r3, [r7, #28]
 8012ac4:	f043 0301 	orr.w	r3, r3, #1
 8012ac8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8012aca:	69fb      	ldr	r3, [r7, #28]
}
 8012acc:	4618      	mov	r0, r3
 8012ace:	3720      	adds	r7, #32
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}

08012ad4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b086      	sub	sp, #24
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f023 0301 	bic.w	r3, r3, #1
 8012ae4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f003 0301 	and.w	r3, r3, #1
 8012aec:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8012aee:	2300      	movs	r3, #0
 8012af0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012af2:	f3ef 8305 	mrs	r3, IPSR
 8012af6:	60bb      	str	r3, [r7, #8]
  return(result);
 8012af8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d003      	beq.n	8012b06 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8012afe:	f06f 0305 	mvn.w	r3, #5
 8012b02:	617b      	str	r3, [r7, #20]
 8012b04:	e02c      	b.n	8012b60 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8012b06:	693b      	ldr	r3, [r7, #16]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d103      	bne.n	8012b14 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8012b0c:	f06f 0303 	mvn.w	r3, #3
 8012b10:	617b      	str	r3, [r7, #20]
 8012b12:	e025      	b.n	8012b60 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d011      	beq.n	8012b3e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8012b1a:	6839      	ldr	r1, [r7, #0]
 8012b1c:	6938      	ldr	r0, [r7, #16]
 8012b1e:	f000 fe27 	bl	8013770 <xQueueTakeMutexRecursive>
 8012b22:	4603      	mov	r3, r0
 8012b24:	2b01      	cmp	r3, #1
 8012b26:	d01b      	beq.n	8012b60 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d003      	beq.n	8012b36 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8012b2e:	f06f 0301 	mvn.w	r3, #1
 8012b32:	617b      	str	r3, [r7, #20]
 8012b34:	e014      	b.n	8012b60 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8012b36:	f06f 0302 	mvn.w	r3, #2
 8012b3a:	617b      	str	r3, [r7, #20]
 8012b3c:	e010      	b.n	8012b60 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8012b3e:	6839      	ldr	r1, [r7, #0]
 8012b40:	6938      	ldr	r0, [r7, #16]
 8012b42:	f001 f8c5 	bl	8013cd0 <xQueueSemaphoreTake>
 8012b46:	4603      	mov	r3, r0
 8012b48:	2b01      	cmp	r3, #1
 8012b4a:	d009      	beq.n	8012b60 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d003      	beq.n	8012b5a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8012b52:	f06f 0301 	mvn.w	r3, #1
 8012b56:	617b      	str	r3, [r7, #20]
 8012b58:	e002      	b.n	8012b60 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8012b5a:	f06f 0302 	mvn.w	r3, #2
 8012b5e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8012b60:	697b      	ldr	r3, [r7, #20]
}
 8012b62:	4618      	mov	r0, r3
 8012b64:	3718      	adds	r7, #24
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bd80      	pop	{r7, pc}

08012b6a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8012b6a:	b580      	push	{r7, lr}
 8012b6c:	b086      	sub	sp, #24
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f023 0301 	bic.w	r3, r3, #1
 8012b78:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f003 0301 	and.w	r3, r3, #1
 8012b80:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8012b82:	2300      	movs	r3, #0
 8012b84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b86:	f3ef 8305 	mrs	r3, IPSR
 8012b8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8012b8c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d003      	beq.n	8012b9a <osMutexRelease+0x30>
    stat = osErrorISR;
 8012b92:	f06f 0305 	mvn.w	r3, #5
 8012b96:	617b      	str	r3, [r7, #20]
 8012b98:	e01f      	b.n	8012bda <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8012b9a:	693b      	ldr	r3, [r7, #16]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d103      	bne.n	8012ba8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8012ba0:	f06f 0303 	mvn.w	r3, #3
 8012ba4:	617b      	str	r3, [r7, #20]
 8012ba6:	e018      	b.n	8012bda <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d009      	beq.n	8012bc2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8012bae:	6938      	ldr	r0, [r7, #16]
 8012bb0:	f000 fdaa 	bl	8013708 <xQueueGiveMutexRecursive>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	2b01      	cmp	r3, #1
 8012bb8:	d00f      	beq.n	8012bda <osMutexRelease+0x70>
        stat = osErrorResource;
 8012bba:	f06f 0302 	mvn.w	r3, #2
 8012bbe:	617b      	str	r3, [r7, #20]
 8012bc0:	e00b      	b.n	8012bda <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	2100      	movs	r1, #0
 8012bc8:	6938      	ldr	r0, [r7, #16]
 8012bca:	f000 fe07 	bl	80137dc <xQueueGenericSend>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	2b01      	cmp	r3, #1
 8012bd2:	d002      	beq.n	8012bda <osMutexRelease+0x70>
        stat = osErrorResource;
 8012bd4:	f06f 0302 	mvn.w	r3, #2
 8012bd8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8012bda:	697b      	ldr	r3, [r7, #20]
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3718      	adds	r7, #24
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b08a      	sub	sp, #40	; 0x28
 8012be8:	af02      	add	r7, sp, #8
 8012bea:	60f8      	str	r0, [r7, #12]
 8012bec:	60b9      	str	r1, [r7, #8]
 8012bee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012bf4:	f3ef 8305 	mrs	r3, IPSR
 8012bf8:	613b      	str	r3, [r7, #16]
  return(result);
 8012bfa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d15f      	bne.n	8012cc0 <osMessageQueueNew+0xdc>
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d05c      	beq.n	8012cc0 <osMessageQueueNew+0xdc>
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d059      	beq.n	8012cc0 <osMessageQueueNew+0xdc>
    mem = -1;
 8012c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8012c10:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d029      	beq.n	8012c6c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	689b      	ldr	r3, [r3, #8]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d012      	beq.n	8012c46 <osMessageQueueNew+0x62>
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	68db      	ldr	r3, [r3, #12]
 8012c24:	2b4f      	cmp	r3, #79	; 0x4f
 8012c26:	d90e      	bls.n	8012c46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d00a      	beq.n	8012c46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	695a      	ldr	r2, [r3, #20]
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	68b9      	ldr	r1, [r7, #8]
 8012c38:	fb01 f303 	mul.w	r3, r1, r3
 8012c3c:	429a      	cmp	r2, r3
 8012c3e:	d302      	bcc.n	8012c46 <osMessageQueueNew+0x62>
        mem = 1;
 8012c40:	2301      	movs	r3, #1
 8012c42:	61bb      	str	r3, [r7, #24]
 8012c44:	e014      	b.n	8012c70 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	689b      	ldr	r3, [r3, #8]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d110      	bne.n	8012c70 <osMessageQueueNew+0x8c>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	68db      	ldr	r3, [r3, #12]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d10c      	bne.n	8012c70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d108      	bne.n	8012c70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	695b      	ldr	r3, [r3, #20]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d104      	bne.n	8012c70 <osMessageQueueNew+0x8c>
          mem = 0;
 8012c66:	2300      	movs	r3, #0
 8012c68:	61bb      	str	r3, [r7, #24]
 8012c6a:	e001      	b.n	8012c70 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012c70:	69bb      	ldr	r3, [r7, #24]
 8012c72:	2b01      	cmp	r3, #1
 8012c74:	d10b      	bne.n	8012c8e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	691a      	ldr	r2, [r3, #16]
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	689b      	ldr	r3, [r3, #8]
 8012c7e:	2100      	movs	r1, #0
 8012c80:	9100      	str	r1, [sp, #0]
 8012c82:	68b9      	ldr	r1, [r7, #8]
 8012c84:	68f8      	ldr	r0, [r7, #12]
 8012c86:	f000 fc1d 	bl	80134c4 <xQueueGenericCreateStatic>
 8012c8a:	61f8      	str	r0, [r7, #28]
 8012c8c:	e008      	b.n	8012ca0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8012c8e:	69bb      	ldr	r3, [r7, #24]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d105      	bne.n	8012ca0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012c94:	2200      	movs	r2, #0
 8012c96:	68b9      	ldr	r1, [r7, #8]
 8012c98:	68f8      	ldr	r0, [r7, #12]
 8012c9a:	f000 fc8b 	bl	80135b4 <xQueueGenericCreate>
 8012c9e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012ca0:	69fb      	ldr	r3, [r7, #28]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d00c      	beq.n	8012cc0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d003      	beq.n	8012cb4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	617b      	str	r3, [r7, #20]
 8012cb2:	e001      	b.n	8012cb8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012cb8:	6979      	ldr	r1, [r7, #20]
 8012cba:	69f8      	ldr	r0, [r7, #28]
 8012cbc:	f001 fabc 	bl	8014238 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012cc0:	69fb      	ldr	r3, [r7, #28]
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3720      	adds	r7, #32
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}
	...

08012ccc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b088      	sub	sp, #32
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	60b9      	str	r1, [r7, #8]
 8012cd6:	603b      	str	r3, [r7, #0]
 8012cd8:	4613      	mov	r3, r2
 8012cda:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ce4:	f3ef 8305 	mrs	r3, IPSR
 8012ce8:	617b      	str	r3, [r7, #20]
  return(result);
 8012cea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d028      	beq.n	8012d42 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012cf0:	69bb      	ldr	r3, [r7, #24]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d005      	beq.n	8012d02 <osMessageQueuePut+0x36>
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d002      	beq.n	8012d02 <osMessageQueuePut+0x36>
 8012cfc:	683b      	ldr	r3, [r7, #0]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d003      	beq.n	8012d0a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012d02:	f06f 0303 	mvn.w	r3, #3
 8012d06:	61fb      	str	r3, [r7, #28]
 8012d08:	e038      	b.n	8012d7c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012d0e:	f107 0210 	add.w	r2, r7, #16
 8012d12:	2300      	movs	r3, #0
 8012d14:	68b9      	ldr	r1, [r7, #8]
 8012d16:	69b8      	ldr	r0, [r7, #24]
 8012d18:	f000 fe5e 	bl	80139d8 <xQueueGenericSendFromISR>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	2b01      	cmp	r3, #1
 8012d20:	d003      	beq.n	8012d2a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012d22:	f06f 0302 	mvn.w	r3, #2
 8012d26:	61fb      	str	r3, [r7, #28]
 8012d28:	e028      	b.n	8012d7c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d025      	beq.n	8012d7c <osMessageQueuePut+0xb0>
 8012d30:	4b15      	ldr	r3, [pc, #84]	; (8012d88 <osMessageQueuePut+0xbc>)
 8012d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d36:	601a      	str	r2, [r3, #0]
 8012d38:	f3bf 8f4f 	dsb	sy
 8012d3c:	f3bf 8f6f 	isb	sy
 8012d40:	e01c      	b.n	8012d7c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012d42:	69bb      	ldr	r3, [r7, #24]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d002      	beq.n	8012d4e <osMessageQueuePut+0x82>
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d103      	bne.n	8012d56 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012d4e:	f06f 0303 	mvn.w	r3, #3
 8012d52:	61fb      	str	r3, [r7, #28]
 8012d54:	e012      	b.n	8012d7c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012d56:	2300      	movs	r3, #0
 8012d58:	683a      	ldr	r2, [r7, #0]
 8012d5a:	68b9      	ldr	r1, [r7, #8]
 8012d5c:	69b8      	ldr	r0, [r7, #24]
 8012d5e:	f000 fd3d 	bl	80137dc <xQueueGenericSend>
 8012d62:	4603      	mov	r3, r0
 8012d64:	2b01      	cmp	r3, #1
 8012d66:	d009      	beq.n	8012d7c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d003      	beq.n	8012d76 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012d6e:	f06f 0301 	mvn.w	r3, #1
 8012d72:	61fb      	str	r3, [r7, #28]
 8012d74:	e002      	b.n	8012d7c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8012d76:	f06f 0302 	mvn.w	r3, #2
 8012d7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012d7c:	69fb      	ldr	r3, [r7, #28]
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3720      	adds	r7, #32
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	bf00      	nop
 8012d88:	e000ed04 	.word	0xe000ed04

08012d8c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b088      	sub	sp, #32
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	60f8      	str	r0, [r7, #12]
 8012d94:	60b9      	str	r1, [r7, #8]
 8012d96:	607a      	str	r2, [r7, #4]
 8012d98:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012da2:	f3ef 8305 	mrs	r3, IPSR
 8012da6:	617b      	str	r3, [r7, #20]
  return(result);
 8012da8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d028      	beq.n	8012e00 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012dae:	69bb      	ldr	r3, [r7, #24]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d005      	beq.n	8012dc0 <osMessageQueueGet+0x34>
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d002      	beq.n	8012dc0 <osMessageQueueGet+0x34>
 8012dba:	683b      	ldr	r3, [r7, #0]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d003      	beq.n	8012dc8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012dc0:	f06f 0303 	mvn.w	r3, #3
 8012dc4:	61fb      	str	r3, [r7, #28]
 8012dc6:	e037      	b.n	8012e38 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012dcc:	f107 0310 	add.w	r3, r7, #16
 8012dd0:	461a      	mov	r2, r3
 8012dd2:	68b9      	ldr	r1, [r7, #8]
 8012dd4:	69b8      	ldr	r0, [r7, #24]
 8012dd6:	f001 f887 	bl	8013ee8 <xQueueReceiveFromISR>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	2b01      	cmp	r3, #1
 8012dde:	d003      	beq.n	8012de8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012de0:	f06f 0302 	mvn.w	r3, #2
 8012de4:	61fb      	str	r3, [r7, #28]
 8012de6:	e027      	b.n	8012e38 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d024      	beq.n	8012e38 <osMessageQueueGet+0xac>
 8012dee:	4b15      	ldr	r3, [pc, #84]	; (8012e44 <osMessageQueueGet+0xb8>)
 8012df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012df4:	601a      	str	r2, [r3, #0]
 8012df6:	f3bf 8f4f 	dsb	sy
 8012dfa:	f3bf 8f6f 	isb	sy
 8012dfe:	e01b      	b.n	8012e38 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012e00:	69bb      	ldr	r3, [r7, #24]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d002      	beq.n	8012e0c <osMessageQueueGet+0x80>
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d103      	bne.n	8012e14 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012e0c:	f06f 0303 	mvn.w	r3, #3
 8012e10:	61fb      	str	r3, [r7, #28]
 8012e12:	e011      	b.n	8012e38 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012e14:	683a      	ldr	r2, [r7, #0]
 8012e16:	68b9      	ldr	r1, [r7, #8]
 8012e18:	69b8      	ldr	r0, [r7, #24]
 8012e1a:	f000 fe79 	bl	8013b10 <xQueueReceive>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	2b01      	cmp	r3, #1
 8012e22:	d009      	beq.n	8012e38 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d003      	beq.n	8012e32 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012e2a:	f06f 0301 	mvn.w	r3, #1
 8012e2e:	61fb      	str	r3, [r7, #28]
 8012e30:	e002      	b.n	8012e38 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8012e32:	f06f 0302 	mvn.w	r3, #2
 8012e36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012e38:	69fb      	ldr	r3, [r7, #28]
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3720      	adds	r7, #32
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}
 8012e42:	bf00      	nop
 8012e44:	e000ed04 	.word	0xe000ed04

08012e48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012e48:	b480      	push	{r7}
 8012e4a:	b085      	sub	sp, #20
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	60f8      	str	r0, [r7, #12]
 8012e50:	60b9      	str	r1, [r7, #8]
 8012e52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	4a07      	ldr	r2, [pc, #28]	; (8012e74 <vApplicationGetIdleTaskMemory+0x2c>)
 8012e58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	4a06      	ldr	r2, [pc, #24]	; (8012e78 <vApplicationGetIdleTaskMemory+0x30>)
 8012e5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	2280      	movs	r2, #128	; 0x80
 8012e64:	601a      	str	r2, [r3, #0]
}
 8012e66:	bf00      	nop
 8012e68:	3714      	adds	r7, #20
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e70:	4770      	bx	lr
 8012e72:	bf00      	nop
 8012e74:	200045c4 	.word	0x200045c4
 8012e78:	20004630 	.word	0x20004630

08012e7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012e7c:	b480      	push	{r7}
 8012e7e:	b085      	sub	sp, #20
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	60f8      	str	r0, [r7, #12]
 8012e84:	60b9      	str	r1, [r7, #8]
 8012e86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	4a07      	ldr	r2, [pc, #28]	; (8012ea8 <vApplicationGetTimerTaskMemory+0x2c>)
 8012e8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	4a06      	ldr	r2, [pc, #24]	; (8012eac <vApplicationGetTimerTaskMemory+0x30>)
 8012e92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012e9a:	601a      	str	r2, [r3, #0]
}
 8012e9c:	bf00      	nop
 8012e9e:	3714      	adds	r7, #20
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea6:	4770      	bx	lr
 8012ea8:	20004830 	.word	0x20004830
 8012eac:	2000489c 	.word	0x2000489c

08012eb0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b086      	sub	sp, #24
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d10a      	bne.n	8012ed4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec2:	f383 8811 	msr	BASEPRI, r3
 8012ec6:	f3bf 8f6f 	isb	sy
 8012eca:	f3bf 8f4f 	dsb	sy
 8012ece:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012ed0:	bf00      	nop
 8012ed2:	e7fe      	b.n	8012ed2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8012ed4:	2320      	movs	r3, #32
 8012ed6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	2b20      	cmp	r3, #32
 8012edc:	d00a      	beq.n	8012ef4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8012ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee2:	f383 8811 	msr	BASEPRI, r3
 8012ee6:	f3bf 8f6f 	isb	sy
 8012eea:	f3bf 8f4f 	dsb	sy
 8012eee:	60fb      	str	r3, [r7, #12]
}
 8012ef0:	bf00      	nop
 8012ef2:	e7fe      	b.n	8012ef2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8012ef8:	697b      	ldr	r3, [r7, #20]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d00a      	beq.n	8012f14 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8012efe:	697b      	ldr	r3, [r7, #20]
 8012f00:	2200      	movs	r2, #0
 8012f02:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	3304      	adds	r3, #4
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f000 f9bf 	bl	801328c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	2201      	movs	r2, #1
 8012f12:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8012f14:	697b      	ldr	r3, [r7, #20]
	}
 8012f16:	4618      	mov	r0, r3
 8012f18:	3718      	adds	r7, #24
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}

08012f1e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8012f1e:	b580      	push	{r7, lr}
 8012f20:	b082      	sub	sp, #8
 8012f22:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8012f24:	2020      	movs	r0, #32
 8012f26:	f003 f91f 	bl	8016168 <pvPortMalloc>
 8012f2a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d00a      	beq.n	8012f48 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2200      	movs	r2, #0
 8012f36:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	3304      	adds	r3, #4
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f000 f9a5 	bl	801328c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	2200      	movs	r2, #0
 8012f46:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8012f48:	687b      	ldr	r3, [r7, #4]
	}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3708      	adds	r7, #8
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
	...

08012f54 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b090      	sub	sp, #64	; 0x40
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	60f8      	str	r0, [r7, #12]
 8012f5c:	60b9      	str	r1, [r7, #8]
 8012f5e:	607a      	str	r2, [r7, #4]
 8012f60:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8012f66:	2300      	movs	r3, #0
 8012f68:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d10a      	bne.n	8012f8a <xEventGroupWaitBits+0x36>
	__asm volatile
 8012f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f78:	f383 8811 	msr	BASEPRI, r3
 8012f7c:	f3bf 8f6f 	isb	sy
 8012f80:	f3bf 8f4f 	dsb	sy
 8012f84:	623b      	str	r3, [r7, #32]
}
 8012f86:	bf00      	nop
 8012f88:	e7fe      	b.n	8012f88 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012f8a:	68bb      	ldr	r3, [r7, #8]
 8012f8c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d00a      	beq.n	8012faa <xEventGroupWaitBits+0x56>
	__asm volatile
 8012f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f98:	f383 8811 	msr	BASEPRI, r3
 8012f9c:	f3bf 8f6f 	isb	sy
 8012fa0:	f3bf 8f4f 	dsb	sy
 8012fa4:	61fb      	str	r3, [r7, #28]
}
 8012fa6:	bf00      	nop
 8012fa8:	e7fe      	b.n	8012fa8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d10a      	bne.n	8012fc6 <xEventGroupWaitBits+0x72>
	__asm volatile
 8012fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb4:	f383 8811 	msr	BASEPRI, r3
 8012fb8:	f3bf 8f6f 	isb	sy
 8012fbc:	f3bf 8f4f 	dsb	sy
 8012fc0:	61bb      	str	r3, [r7, #24]
}
 8012fc2:	bf00      	nop
 8012fc4:	e7fe      	b.n	8012fc4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012fc6:	f002 f861 	bl	801508c <xTaskGetSchedulerState>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d102      	bne.n	8012fd6 <xEventGroupWaitBits+0x82>
 8012fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d101      	bne.n	8012fda <xEventGroupWaitBits+0x86>
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	e000      	b.n	8012fdc <xEventGroupWaitBits+0x88>
 8012fda:	2300      	movs	r3, #0
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d10a      	bne.n	8012ff6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8012fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe4:	f383 8811 	msr	BASEPRI, r3
 8012fe8:	f3bf 8f6f 	isb	sy
 8012fec:	f3bf 8f4f 	dsb	sy
 8012ff0:	617b      	str	r3, [r7, #20]
}
 8012ff2:	bf00      	nop
 8012ff4:	e7fe      	b.n	8012ff4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8012ff6:	f001 fbb9 	bl	801476c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8012ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013000:	683a      	ldr	r2, [r7, #0]
 8013002:	68b9      	ldr	r1, [r7, #8]
 8013004:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013006:	f000 f90b 	bl	8013220 <prvTestWaitCondition>
 801300a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801300e:	2b00      	cmp	r3, #0
 8013010:	d00e      	beq.n	8013030 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013014:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013016:	2300      	movs	r3, #0
 8013018:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d028      	beq.n	8013072 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013022:	681a      	ldr	r2, [r3, #0]
 8013024:	68bb      	ldr	r3, [r7, #8]
 8013026:	43db      	mvns	r3, r3
 8013028:	401a      	ands	r2, r3
 801302a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801302c:	601a      	str	r2, [r3, #0]
 801302e:	e020      	b.n	8013072 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013032:	2b00      	cmp	r3, #0
 8013034:	d104      	bne.n	8013040 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013038:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801303a:	2301      	movs	r3, #1
 801303c:	633b      	str	r3, [r7, #48]	; 0x30
 801303e:	e018      	b.n	8013072 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d003      	beq.n	801304e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013048:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801304c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d003      	beq.n	801305c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013056:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801305a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801305e:	1d18      	adds	r0, r3, #4
 8013060:	68ba      	ldr	r2, [r7, #8]
 8013062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013064:	4313      	orrs	r3, r2
 8013066:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013068:	4619      	mov	r1, r3
 801306a:	f001 fd77 	bl	8014b5c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801306e:	2300      	movs	r3, #0
 8013070:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013072:	f001 fb89 	bl	8014788 <xTaskResumeAll>
 8013076:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801307a:	2b00      	cmp	r3, #0
 801307c:	d031      	beq.n	80130e2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013080:	2b00      	cmp	r3, #0
 8013082:	d107      	bne.n	8013094 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013084:	4b19      	ldr	r3, [pc, #100]	; (80130ec <xEventGroupWaitBits+0x198>)
 8013086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801308a:	601a      	str	r2, [r3, #0]
 801308c:	f3bf 8f4f 	dsb	sy
 8013090:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013094:	f002 f970 	bl	8015378 <uxTaskResetEventItemValue>
 8013098:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801309a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801309c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d11a      	bne.n	80130da <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80130a4:	f002 ff3e 	bl	8015f24 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80130a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80130ae:	683a      	ldr	r2, [r7, #0]
 80130b0:	68b9      	ldr	r1, [r7, #8]
 80130b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80130b4:	f000 f8b4 	bl	8013220 <prvTestWaitCondition>
 80130b8:	4603      	mov	r3, r0
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d009      	beq.n	80130d2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d006      	beq.n	80130d2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80130c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130c6:	681a      	ldr	r2, [r3, #0]
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	43db      	mvns	r3, r3
 80130cc:	401a      	ands	r2, r3
 80130ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130d0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80130d2:	2301      	movs	r3, #1
 80130d4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80130d6:	f002 ff55 	bl	8015f84 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80130da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80130e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80130e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80130e4:	4618      	mov	r0, r3
 80130e6:	3740      	adds	r7, #64	; 0x40
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}
 80130ec:	e000ed04 	.word	0xe000ed04

080130f0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b08e      	sub	sp, #56	; 0x38
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80130fa:	2300      	movs	r3, #0
 80130fc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013102:	2300      	movs	r3, #0
 8013104:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d10a      	bne.n	8013122 <xEventGroupSetBits+0x32>
	__asm volatile
 801310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013110:	f383 8811 	msr	BASEPRI, r3
 8013114:	f3bf 8f6f 	isb	sy
 8013118:	f3bf 8f4f 	dsb	sy
 801311c:	613b      	str	r3, [r7, #16]
}
 801311e:	bf00      	nop
 8013120:	e7fe      	b.n	8013120 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013128:	2b00      	cmp	r3, #0
 801312a:	d00a      	beq.n	8013142 <xEventGroupSetBits+0x52>
	__asm volatile
 801312c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013130:	f383 8811 	msr	BASEPRI, r3
 8013134:	f3bf 8f6f 	isb	sy
 8013138:	f3bf 8f4f 	dsb	sy
 801313c:	60fb      	str	r3, [r7, #12]
}
 801313e:	bf00      	nop
 8013140:	e7fe      	b.n	8013140 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013144:	3304      	adds	r3, #4
 8013146:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801314a:	3308      	adds	r3, #8
 801314c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801314e:	f001 fb0d 	bl	801476c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013154:	68db      	ldr	r3, [r3, #12]
 8013156:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801315a:	681a      	ldr	r2, [r3, #0]
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	431a      	orrs	r2, r3
 8013160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013162:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013164:	e03c      	b.n	80131e0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013168:	685b      	ldr	r3, [r3, #4]
 801316a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801316c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013172:	2300      	movs	r3, #0
 8013174:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013176:	69bb      	ldr	r3, [r7, #24]
 8013178:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801317c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801317e:	69bb      	ldr	r3, [r7, #24]
 8013180:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013184:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801318c:	2b00      	cmp	r3, #0
 801318e:	d108      	bne.n	80131a2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013192:	681a      	ldr	r2, [r3, #0]
 8013194:	69bb      	ldr	r3, [r7, #24]
 8013196:	4013      	ands	r3, r2
 8013198:	2b00      	cmp	r3, #0
 801319a:	d00b      	beq.n	80131b4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 801319c:	2301      	movs	r3, #1
 801319e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80131a0:	e008      	b.n	80131b4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80131a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a4:	681a      	ldr	r2, [r3, #0]
 80131a6:	69bb      	ldr	r3, [r7, #24]
 80131a8:	4013      	ands	r3, r2
 80131aa:	69ba      	ldr	r2, [r7, #24]
 80131ac:	429a      	cmp	r2, r3
 80131ae:	d101      	bne.n	80131b4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80131b0:	2301      	movs	r3, #1
 80131b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80131b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d010      	beq.n	80131dc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d003      	beq.n	80131cc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80131c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131c6:	69bb      	ldr	r3, [r7, #24]
 80131c8:	4313      	orrs	r3, r2
 80131ca:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80131cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80131d4:	4619      	mov	r1, r3
 80131d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80131d8:	f001 fd8c 	bl	8014cf4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80131dc:	69fb      	ldr	r3, [r7, #28]
 80131de:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80131e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131e2:	6a3b      	ldr	r3, [r7, #32]
 80131e4:	429a      	cmp	r2, r3
 80131e6:	d1be      	bne.n	8013166 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80131e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ea:	681a      	ldr	r2, [r3, #0]
 80131ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ee:	43db      	mvns	r3, r3
 80131f0:	401a      	ands	r2, r3
 80131f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131f4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80131f6:	f001 fac7 	bl	8014788 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80131fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131fc:	681b      	ldr	r3, [r3, #0]
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3738      	adds	r7, #56	; 0x38
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}

08013206 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013206:	b580      	push	{r7, lr}
 8013208:	b082      	sub	sp, #8
 801320a:	af00      	add	r7, sp, #0
 801320c:	6078      	str	r0, [r7, #4]
 801320e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013210:	6839      	ldr	r1, [r7, #0]
 8013212:	6878      	ldr	r0, [r7, #4]
 8013214:	f7ff ff6c 	bl	80130f0 <xEventGroupSetBits>
}
 8013218:	bf00      	nop
 801321a:	3708      	adds	r7, #8
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}

08013220 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013220:	b480      	push	{r7}
 8013222:	b087      	sub	sp, #28
 8013224:	af00      	add	r7, sp, #0
 8013226:	60f8      	str	r0, [r7, #12]
 8013228:	60b9      	str	r1, [r7, #8]
 801322a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801322c:	2300      	movs	r3, #0
 801322e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d107      	bne.n	8013246 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013236:	68fa      	ldr	r2, [r7, #12]
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	4013      	ands	r3, r2
 801323c:	2b00      	cmp	r3, #0
 801323e:	d00a      	beq.n	8013256 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013240:	2301      	movs	r3, #1
 8013242:	617b      	str	r3, [r7, #20]
 8013244:	e007      	b.n	8013256 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013246:	68fa      	ldr	r2, [r7, #12]
 8013248:	68bb      	ldr	r3, [r7, #8]
 801324a:	4013      	ands	r3, r2
 801324c:	68ba      	ldr	r2, [r7, #8]
 801324e:	429a      	cmp	r2, r3
 8013250:	d101      	bne.n	8013256 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013252:	2301      	movs	r3, #1
 8013254:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013256:	697b      	ldr	r3, [r7, #20]
}
 8013258:	4618      	mov	r0, r3
 801325a:	371c      	adds	r7, #28
 801325c:	46bd      	mov	sp, r7
 801325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013262:	4770      	bx	lr

08013264 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013264:	b580      	push	{r7, lr}
 8013266:	b086      	sub	sp, #24
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	68ba      	ldr	r2, [r7, #8]
 8013274:	68f9      	ldr	r1, [r7, #12]
 8013276:	4804      	ldr	r0, [pc, #16]	; (8013288 <xEventGroupSetBitsFromISR+0x24>)
 8013278:	f002 fd06 	bl	8015c88 <xTimerPendFunctionCallFromISR>
 801327c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801327e:	697b      	ldr	r3, [r7, #20]
	}
 8013280:	4618      	mov	r0, r3
 8013282:	3718      	adds	r7, #24
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}
 8013288:	08013207 	.word	0x08013207

0801328c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801328c:	b480      	push	{r7}
 801328e:	b083      	sub	sp, #12
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f103 0208 	add.w	r2, r3, #8
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	f04f 32ff 	mov.w	r2, #4294967295
 80132a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	f103 0208 	add.w	r2, r3, #8
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f103 0208 	add.w	r2, r3, #8
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2200      	movs	r2, #0
 80132be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80132c0:	bf00      	nop
 80132c2:	370c      	adds	r7, #12
 80132c4:	46bd      	mov	sp, r7
 80132c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ca:	4770      	bx	lr

080132cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80132cc:	b480      	push	{r7}
 80132ce:	b083      	sub	sp, #12
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2200      	movs	r2, #0
 80132d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80132da:	bf00      	nop
 80132dc:	370c      	adds	r7, #12
 80132de:	46bd      	mov	sp, r7
 80132e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e4:	4770      	bx	lr

080132e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80132e6:	b480      	push	{r7}
 80132e8:	b085      	sub	sp, #20
 80132ea:	af00      	add	r7, sp, #0
 80132ec:	6078      	str	r0, [r7, #4]
 80132ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	685b      	ldr	r3, [r3, #4]
 80132f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	68fa      	ldr	r2, [r7, #12]
 80132fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	689a      	ldr	r2, [r3, #8]
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	689b      	ldr	r3, [r3, #8]
 8013308:	683a      	ldr	r2, [r7, #0]
 801330a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	683a      	ldr	r2, [r7, #0]
 8013310:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	687a      	ldr	r2, [r7, #4]
 8013316:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	1c5a      	adds	r2, r3, #1
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	601a      	str	r2, [r3, #0]
}
 8013322:	bf00      	nop
 8013324:	3714      	adds	r7, #20
 8013326:	46bd      	mov	sp, r7
 8013328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332c:	4770      	bx	lr

0801332e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801332e:	b480      	push	{r7}
 8013330:	b085      	sub	sp, #20
 8013332:	af00      	add	r7, sp, #0
 8013334:	6078      	str	r0, [r7, #4]
 8013336:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013344:	d103      	bne.n	801334e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	691b      	ldr	r3, [r3, #16]
 801334a:	60fb      	str	r3, [r7, #12]
 801334c:	e00c      	b.n	8013368 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	3308      	adds	r3, #8
 8013352:	60fb      	str	r3, [r7, #12]
 8013354:	e002      	b.n	801335c <vListInsert+0x2e>
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	685b      	ldr	r3, [r3, #4]
 801335a:	60fb      	str	r3, [r7, #12]
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	685b      	ldr	r3, [r3, #4]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	68ba      	ldr	r2, [r7, #8]
 8013364:	429a      	cmp	r2, r3
 8013366:	d2f6      	bcs.n	8013356 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	685a      	ldr	r2, [r3, #4]
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	685b      	ldr	r3, [r3, #4]
 8013374:	683a      	ldr	r2, [r7, #0]
 8013376:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	68fa      	ldr	r2, [r7, #12]
 801337c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	683a      	ldr	r2, [r7, #0]
 8013382:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013384:	683b      	ldr	r3, [r7, #0]
 8013386:	687a      	ldr	r2, [r7, #4]
 8013388:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	1c5a      	adds	r2, r3, #1
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	601a      	str	r2, [r3, #0]
}
 8013394:	bf00      	nop
 8013396:	3714      	adds	r7, #20
 8013398:	46bd      	mov	sp, r7
 801339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339e:	4770      	bx	lr

080133a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80133a0:	b480      	push	{r7}
 80133a2:	b085      	sub	sp, #20
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	691b      	ldr	r3, [r3, #16]
 80133ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	685b      	ldr	r3, [r3, #4]
 80133b2:	687a      	ldr	r2, [r7, #4]
 80133b4:	6892      	ldr	r2, [r2, #8]
 80133b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	689b      	ldr	r3, [r3, #8]
 80133bc:	687a      	ldr	r2, [r7, #4]
 80133be:	6852      	ldr	r2, [r2, #4]
 80133c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	685b      	ldr	r3, [r3, #4]
 80133c6:	687a      	ldr	r2, [r7, #4]
 80133c8:	429a      	cmp	r2, r3
 80133ca:	d103      	bne.n	80133d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	689a      	ldr	r2, [r3, #8]
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2200      	movs	r2, #0
 80133d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	1e5a      	subs	r2, r3, #1
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	681b      	ldr	r3, [r3, #0]
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	3714      	adds	r7, #20
 80133ec:	46bd      	mov	sp, r7
 80133ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f2:	4770      	bx	lr

080133f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b084      	sub	sp, #16
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
 80133fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d10a      	bne.n	801341e <xQueueGenericReset+0x2a>
	__asm volatile
 8013408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801340c:	f383 8811 	msr	BASEPRI, r3
 8013410:	f3bf 8f6f 	isb	sy
 8013414:	f3bf 8f4f 	dsb	sy
 8013418:	60bb      	str	r3, [r7, #8]
}
 801341a:	bf00      	nop
 801341c:	e7fe      	b.n	801341c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801341e:	f002 fd81 	bl	8015f24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	681a      	ldr	r2, [r3, #0]
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801342a:	68f9      	ldr	r1, [r7, #12]
 801342c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801342e:	fb01 f303 	mul.w	r3, r1, r3
 8013432:	441a      	add	r2, r3
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	2200      	movs	r2, #0
 801343c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	681a      	ldr	r2, [r3, #0]
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	681a      	ldr	r2, [r3, #0]
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801344e:	3b01      	subs	r3, #1
 8013450:	68f9      	ldr	r1, [r7, #12]
 8013452:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013454:	fb01 f303 	mul.w	r3, r1, r3
 8013458:	441a      	add	r2, r3
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	22ff      	movs	r2, #255	; 0xff
 8013462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	22ff      	movs	r2, #255	; 0xff
 801346a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d114      	bne.n	801349e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	691b      	ldr	r3, [r3, #16]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d01a      	beq.n	80134b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	3310      	adds	r3, #16
 8013480:	4618      	mov	r0, r3
 8013482:	f001 fbd3 	bl	8014c2c <xTaskRemoveFromEventList>
 8013486:	4603      	mov	r3, r0
 8013488:	2b00      	cmp	r3, #0
 801348a:	d012      	beq.n	80134b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801348c:	4b0c      	ldr	r3, [pc, #48]	; (80134c0 <xQueueGenericReset+0xcc>)
 801348e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013492:	601a      	str	r2, [r3, #0]
 8013494:	f3bf 8f4f 	dsb	sy
 8013498:	f3bf 8f6f 	isb	sy
 801349c:	e009      	b.n	80134b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	3310      	adds	r3, #16
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7ff fef2 	bl	801328c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	3324      	adds	r3, #36	; 0x24
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7ff feed 	bl	801328c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80134b2:	f002 fd67 	bl	8015f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80134b6:	2301      	movs	r3, #1
}
 80134b8:	4618      	mov	r0, r3
 80134ba:	3710      	adds	r7, #16
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}
 80134c0:	e000ed04 	.word	0xe000ed04

080134c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b08e      	sub	sp, #56	; 0x38
 80134c8:	af02      	add	r7, sp, #8
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	60b9      	str	r1, [r7, #8]
 80134ce:	607a      	str	r2, [r7, #4]
 80134d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d10a      	bne.n	80134ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80134d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134dc:	f383 8811 	msr	BASEPRI, r3
 80134e0:	f3bf 8f6f 	isb	sy
 80134e4:	f3bf 8f4f 	dsb	sy
 80134e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80134ea:	bf00      	nop
 80134ec:	e7fe      	b.n	80134ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80134ee:	683b      	ldr	r3, [r7, #0]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d10a      	bne.n	801350a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80134f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134f8:	f383 8811 	msr	BASEPRI, r3
 80134fc:	f3bf 8f6f 	isb	sy
 8013500:	f3bf 8f4f 	dsb	sy
 8013504:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013506:	bf00      	nop
 8013508:	e7fe      	b.n	8013508 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d002      	beq.n	8013516 <xQueueGenericCreateStatic+0x52>
 8013510:	68bb      	ldr	r3, [r7, #8]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d001      	beq.n	801351a <xQueueGenericCreateStatic+0x56>
 8013516:	2301      	movs	r3, #1
 8013518:	e000      	b.n	801351c <xQueueGenericCreateStatic+0x58>
 801351a:	2300      	movs	r3, #0
 801351c:	2b00      	cmp	r3, #0
 801351e:	d10a      	bne.n	8013536 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013524:	f383 8811 	msr	BASEPRI, r3
 8013528:	f3bf 8f6f 	isb	sy
 801352c:	f3bf 8f4f 	dsb	sy
 8013530:	623b      	str	r3, [r7, #32]
}
 8013532:	bf00      	nop
 8013534:	e7fe      	b.n	8013534 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d102      	bne.n	8013542 <xQueueGenericCreateStatic+0x7e>
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d101      	bne.n	8013546 <xQueueGenericCreateStatic+0x82>
 8013542:	2301      	movs	r3, #1
 8013544:	e000      	b.n	8013548 <xQueueGenericCreateStatic+0x84>
 8013546:	2300      	movs	r3, #0
 8013548:	2b00      	cmp	r3, #0
 801354a:	d10a      	bne.n	8013562 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013550:	f383 8811 	msr	BASEPRI, r3
 8013554:	f3bf 8f6f 	isb	sy
 8013558:	f3bf 8f4f 	dsb	sy
 801355c:	61fb      	str	r3, [r7, #28]
}
 801355e:	bf00      	nop
 8013560:	e7fe      	b.n	8013560 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013562:	2350      	movs	r3, #80	; 0x50
 8013564:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	2b50      	cmp	r3, #80	; 0x50
 801356a:	d00a      	beq.n	8013582 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013570:	f383 8811 	msr	BASEPRI, r3
 8013574:	f3bf 8f6f 	isb	sy
 8013578:	f3bf 8f4f 	dsb	sy
 801357c:	61bb      	str	r3, [r7, #24]
}
 801357e:	bf00      	nop
 8013580:	e7fe      	b.n	8013580 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013582:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013584:	683b      	ldr	r3, [r7, #0]
 8013586:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801358a:	2b00      	cmp	r3, #0
 801358c:	d00d      	beq.n	80135aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013590:	2201      	movs	r2, #1
 8013592:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013596:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801359c:	9300      	str	r3, [sp, #0]
 801359e:	4613      	mov	r3, r2
 80135a0:	687a      	ldr	r2, [r7, #4]
 80135a2:	68b9      	ldr	r1, [r7, #8]
 80135a4:	68f8      	ldr	r0, [r7, #12]
 80135a6:	f000 f83f 	bl	8013628 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80135aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3730      	adds	r7, #48	; 0x30
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b08a      	sub	sp, #40	; 0x28
 80135b8:	af02      	add	r7, sp, #8
 80135ba:	60f8      	str	r0, [r7, #12]
 80135bc:	60b9      	str	r1, [r7, #8]
 80135be:	4613      	mov	r3, r2
 80135c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d10a      	bne.n	80135de <xQueueGenericCreate+0x2a>
	__asm volatile
 80135c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135cc:	f383 8811 	msr	BASEPRI, r3
 80135d0:	f3bf 8f6f 	isb	sy
 80135d4:	f3bf 8f4f 	dsb	sy
 80135d8:	613b      	str	r3, [r7, #16]
}
 80135da:	bf00      	nop
 80135dc:	e7fe      	b.n	80135dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	68ba      	ldr	r2, [r7, #8]
 80135e2:	fb02 f303 	mul.w	r3, r2, r3
 80135e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80135e8:	69fb      	ldr	r3, [r7, #28]
 80135ea:	3350      	adds	r3, #80	; 0x50
 80135ec:	4618      	mov	r0, r3
 80135ee:	f002 fdbb 	bl	8016168 <pvPortMalloc>
 80135f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80135f4:	69bb      	ldr	r3, [r7, #24]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d011      	beq.n	801361e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80135fa:	69bb      	ldr	r3, [r7, #24]
 80135fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	3350      	adds	r3, #80	; 0x50
 8013602:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013604:	69bb      	ldr	r3, [r7, #24]
 8013606:	2200      	movs	r2, #0
 8013608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801360c:	79fa      	ldrb	r2, [r7, #7]
 801360e:	69bb      	ldr	r3, [r7, #24]
 8013610:	9300      	str	r3, [sp, #0]
 8013612:	4613      	mov	r3, r2
 8013614:	697a      	ldr	r2, [r7, #20]
 8013616:	68b9      	ldr	r1, [r7, #8]
 8013618:	68f8      	ldr	r0, [r7, #12]
 801361a:	f000 f805 	bl	8013628 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801361e:	69bb      	ldr	r3, [r7, #24]
	}
 8013620:	4618      	mov	r0, r3
 8013622:	3720      	adds	r7, #32
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}

08013628 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b084      	sub	sp, #16
 801362c:	af00      	add	r7, sp, #0
 801362e:	60f8      	str	r0, [r7, #12]
 8013630:	60b9      	str	r1, [r7, #8]
 8013632:	607a      	str	r2, [r7, #4]
 8013634:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d103      	bne.n	8013644 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801363c:	69bb      	ldr	r3, [r7, #24]
 801363e:	69ba      	ldr	r2, [r7, #24]
 8013640:	601a      	str	r2, [r3, #0]
 8013642:	e002      	b.n	801364a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013644:	69bb      	ldr	r3, [r7, #24]
 8013646:	687a      	ldr	r2, [r7, #4]
 8013648:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801364a:	69bb      	ldr	r3, [r7, #24]
 801364c:	68fa      	ldr	r2, [r7, #12]
 801364e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013650:	69bb      	ldr	r3, [r7, #24]
 8013652:	68ba      	ldr	r2, [r7, #8]
 8013654:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013656:	2101      	movs	r1, #1
 8013658:	69b8      	ldr	r0, [r7, #24]
 801365a:	f7ff fecb 	bl	80133f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801365e:	69bb      	ldr	r3, [r7, #24]
 8013660:	78fa      	ldrb	r2, [r7, #3]
 8013662:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013666:	bf00      	nop
 8013668:	3710      	adds	r7, #16
 801366a:	46bd      	mov	sp, r7
 801366c:	bd80      	pop	{r7, pc}

0801366e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801366e:	b580      	push	{r7, lr}
 8013670:	b082      	sub	sp, #8
 8013672:	af00      	add	r7, sp, #0
 8013674:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d00e      	beq.n	801369a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2200      	movs	r2, #0
 8013680:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2200      	movs	r2, #0
 8013686:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	2200      	movs	r2, #0
 801368c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801368e:	2300      	movs	r3, #0
 8013690:	2200      	movs	r2, #0
 8013692:	2100      	movs	r1, #0
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f000 f8a1 	bl	80137dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801369a:	bf00      	nop
 801369c:	3708      	adds	r7, #8
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}

080136a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80136a2:	b580      	push	{r7, lr}
 80136a4:	b086      	sub	sp, #24
 80136a6:	af00      	add	r7, sp, #0
 80136a8:	4603      	mov	r3, r0
 80136aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80136ac:	2301      	movs	r3, #1
 80136ae:	617b      	str	r3, [r7, #20]
 80136b0:	2300      	movs	r3, #0
 80136b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80136b4:	79fb      	ldrb	r3, [r7, #7]
 80136b6:	461a      	mov	r2, r3
 80136b8:	6939      	ldr	r1, [r7, #16]
 80136ba:	6978      	ldr	r0, [r7, #20]
 80136bc:	f7ff ff7a 	bl	80135b4 <xQueueGenericCreate>
 80136c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80136c2:	68f8      	ldr	r0, [r7, #12]
 80136c4:	f7ff ffd3 	bl	801366e <prvInitialiseMutex>

		return xNewQueue;
 80136c8:	68fb      	ldr	r3, [r7, #12]
	}
 80136ca:	4618      	mov	r0, r3
 80136cc:	3718      	adds	r7, #24
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}

080136d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80136d2:	b580      	push	{r7, lr}
 80136d4:	b088      	sub	sp, #32
 80136d6:	af02      	add	r7, sp, #8
 80136d8:	4603      	mov	r3, r0
 80136da:	6039      	str	r1, [r7, #0]
 80136dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80136de:	2301      	movs	r3, #1
 80136e0:	617b      	str	r3, [r7, #20]
 80136e2:	2300      	movs	r3, #0
 80136e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80136e6:	79fb      	ldrb	r3, [r7, #7]
 80136e8:	9300      	str	r3, [sp, #0]
 80136ea:	683b      	ldr	r3, [r7, #0]
 80136ec:	2200      	movs	r2, #0
 80136ee:	6939      	ldr	r1, [r7, #16]
 80136f0:	6978      	ldr	r0, [r7, #20]
 80136f2:	f7ff fee7 	bl	80134c4 <xQueueGenericCreateStatic>
 80136f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80136f8:	68f8      	ldr	r0, [r7, #12]
 80136fa:	f7ff ffb8 	bl	801366e <prvInitialiseMutex>

		return xNewQueue;
 80136fe:	68fb      	ldr	r3, [r7, #12]
	}
 8013700:	4618      	mov	r0, r3
 8013702:	3718      	adds	r7, #24
 8013704:	46bd      	mov	sp, r7
 8013706:	bd80      	pop	{r7, pc}

08013708 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8013708:	b590      	push	{r4, r7, lr}
 801370a:	b087      	sub	sp, #28
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8013714:	693b      	ldr	r3, [r7, #16]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d10a      	bne.n	8013730 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 801371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801371e:	f383 8811 	msr	BASEPRI, r3
 8013722:	f3bf 8f6f 	isb	sy
 8013726:	f3bf 8f4f 	dsb	sy
 801372a:	60fb      	str	r3, [r7, #12]
}
 801372c:	bf00      	nop
 801372e:	e7fe      	b.n	801372e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8013730:	693b      	ldr	r3, [r7, #16]
 8013732:	689c      	ldr	r4, [r3, #8]
 8013734:	f001 fc9a 	bl	801506c <xTaskGetCurrentTaskHandle>
 8013738:	4603      	mov	r3, r0
 801373a:	429c      	cmp	r4, r3
 801373c:	d111      	bne.n	8013762 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801373e:	693b      	ldr	r3, [r7, #16]
 8013740:	68db      	ldr	r3, [r3, #12]
 8013742:	1e5a      	subs	r2, r3, #1
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	68db      	ldr	r3, [r3, #12]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d105      	bne.n	801375c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8013750:	2300      	movs	r3, #0
 8013752:	2200      	movs	r2, #0
 8013754:	2100      	movs	r1, #0
 8013756:	6938      	ldr	r0, [r7, #16]
 8013758:	f000 f840 	bl	80137dc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801375c:	2301      	movs	r3, #1
 801375e:	617b      	str	r3, [r7, #20]
 8013760:	e001      	b.n	8013766 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8013762:	2300      	movs	r3, #0
 8013764:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8013766:	697b      	ldr	r3, [r7, #20]
	}
 8013768:	4618      	mov	r0, r3
 801376a:	371c      	adds	r7, #28
 801376c:	46bd      	mov	sp, r7
 801376e:	bd90      	pop	{r4, r7, pc}

08013770 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8013770:	b590      	push	{r4, r7, lr}
 8013772:	b087      	sub	sp, #28
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801377e:	693b      	ldr	r3, [r7, #16]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d10a      	bne.n	801379a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8013784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013788:	f383 8811 	msr	BASEPRI, r3
 801378c:	f3bf 8f6f 	isb	sy
 8013790:	f3bf 8f4f 	dsb	sy
 8013794:	60fb      	str	r3, [r7, #12]
}
 8013796:	bf00      	nop
 8013798:	e7fe      	b.n	8013798 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	689c      	ldr	r4, [r3, #8]
 801379e:	f001 fc65 	bl	801506c <xTaskGetCurrentTaskHandle>
 80137a2:	4603      	mov	r3, r0
 80137a4:	429c      	cmp	r4, r3
 80137a6:	d107      	bne.n	80137b8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80137a8:	693b      	ldr	r3, [r7, #16]
 80137aa:	68db      	ldr	r3, [r3, #12]
 80137ac:	1c5a      	adds	r2, r3, #1
 80137ae:	693b      	ldr	r3, [r7, #16]
 80137b0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80137b2:	2301      	movs	r3, #1
 80137b4:	617b      	str	r3, [r7, #20]
 80137b6:	e00c      	b.n	80137d2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80137b8:	6839      	ldr	r1, [r7, #0]
 80137ba:	6938      	ldr	r0, [r7, #16]
 80137bc:	f000 fa88 	bl	8013cd0 <xQueueSemaphoreTake>
 80137c0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d004      	beq.n	80137d2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80137c8:	693b      	ldr	r3, [r7, #16]
 80137ca:	68db      	ldr	r3, [r3, #12]
 80137cc:	1c5a      	adds	r2, r3, #1
 80137ce:	693b      	ldr	r3, [r7, #16]
 80137d0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80137d2:	697b      	ldr	r3, [r7, #20]
	}
 80137d4:	4618      	mov	r0, r3
 80137d6:	371c      	adds	r7, #28
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd90      	pop	{r4, r7, pc}

080137dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b08e      	sub	sp, #56	; 0x38
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	60b9      	str	r1, [r7, #8]
 80137e6:	607a      	str	r2, [r7, #4]
 80137e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80137ea:	2300      	movs	r3, #0
 80137ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80137f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d10a      	bne.n	801380e <xQueueGenericSend+0x32>
	__asm volatile
 80137f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137fc:	f383 8811 	msr	BASEPRI, r3
 8013800:	f3bf 8f6f 	isb	sy
 8013804:	f3bf 8f4f 	dsb	sy
 8013808:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801380a:	bf00      	nop
 801380c:	e7fe      	b.n	801380c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d103      	bne.n	801381c <xQueueGenericSend+0x40>
 8013814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013818:	2b00      	cmp	r3, #0
 801381a:	d101      	bne.n	8013820 <xQueueGenericSend+0x44>
 801381c:	2301      	movs	r3, #1
 801381e:	e000      	b.n	8013822 <xQueueGenericSend+0x46>
 8013820:	2300      	movs	r3, #0
 8013822:	2b00      	cmp	r3, #0
 8013824:	d10a      	bne.n	801383c <xQueueGenericSend+0x60>
	__asm volatile
 8013826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801382a:	f383 8811 	msr	BASEPRI, r3
 801382e:	f3bf 8f6f 	isb	sy
 8013832:	f3bf 8f4f 	dsb	sy
 8013836:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013838:	bf00      	nop
 801383a:	e7fe      	b.n	801383a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801383c:	683b      	ldr	r3, [r7, #0]
 801383e:	2b02      	cmp	r3, #2
 8013840:	d103      	bne.n	801384a <xQueueGenericSend+0x6e>
 8013842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013846:	2b01      	cmp	r3, #1
 8013848:	d101      	bne.n	801384e <xQueueGenericSend+0x72>
 801384a:	2301      	movs	r3, #1
 801384c:	e000      	b.n	8013850 <xQueueGenericSend+0x74>
 801384e:	2300      	movs	r3, #0
 8013850:	2b00      	cmp	r3, #0
 8013852:	d10a      	bne.n	801386a <xQueueGenericSend+0x8e>
	__asm volatile
 8013854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013858:	f383 8811 	msr	BASEPRI, r3
 801385c:	f3bf 8f6f 	isb	sy
 8013860:	f3bf 8f4f 	dsb	sy
 8013864:	623b      	str	r3, [r7, #32]
}
 8013866:	bf00      	nop
 8013868:	e7fe      	b.n	8013868 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801386a:	f001 fc0f 	bl	801508c <xTaskGetSchedulerState>
 801386e:	4603      	mov	r3, r0
 8013870:	2b00      	cmp	r3, #0
 8013872:	d102      	bne.n	801387a <xQueueGenericSend+0x9e>
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d101      	bne.n	801387e <xQueueGenericSend+0xa2>
 801387a:	2301      	movs	r3, #1
 801387c:	e000      	b.n	8013880 <xQueueGenericSend+0xa4>
 801387e:	2300      	movs	r3, #0
 8013880:	2b00      	cmp	r3, #0
 8013882:	d10a      	bne.n	801389a <xQueueGenericSend+0xbe>
	__asm volatile
 8013884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013888:	f383 8811 	msr	BASEPRI, r3
 801388c:	f3bf 8f6f 	isb	sy
 8013890:	f3bf 8f4f 	dsb	sy
 8013894:	61fb      	str	r3, [r7, #28]
}
 8013896:	bf00      	nop
 8013898:	e7fe      	b.n	8013898 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801389a:	f002 fb43 	bl	8015f24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d302      	bcc.n	80138b0 <xQueueGenericSend+0xd4>
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	2b02      	cmp	r3, #2
 80138ae:	d129      	bne.n	8013904 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80138b0:	683a      	ldr	r2, [r7, #0]
 80138b2:	68b9      	ldr	r1, [r7, #8]
 80138b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138b6:	f000 fbaf 	bl	8014018 <prvCopyDataToQueue>
 80138ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80138bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d010      	beq.n	80138e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80138c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c6:	3324      	adds	r3, #36	; 0x24
 80138c8:	4618      	mov	r0, r3
 80138ca:	f001 f9af 	bl	8014c2c <xTaskRemoveFromEventList>
 80138ce:	4603      	mov	r3, r0
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d013      	beq.n	80138fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80138d4:	4b3f      	ldr	r3, [pc, #252]	; (80139d4 <xQueueGenericSend+0x1f8>)
 80138d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138da:	601a      	str	r2, [r3, #0]
 80138dc:	f3bf 8f4f 	dsb	sy
 80138e0:	f3bf 8f6f 	isb	sy
 80138e4:	e00a      	b.n	80138fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80138e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d007      	beq.n	80138fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80138ec:	4b39      	ldr	r3, [pc, #228]	; (80139d4 <xQueueGenericSend+0x1f8>)
 80138ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138f2:	601a      	str	r2, [r3, #0]
 80138f4:	f3bf 8f4f 	dsb	sy
 80138f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80138fc:	f002 fb42 	bl	8015f84 <vPortExitCritical>
				return pdPASS;
 8013900:	2301      	movs	r3, #1
 8013902:	e063      	b.n	80139cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d103      	bne.n	8013912 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801390a:	f002 fb3b 	bl	8015f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801390e:	2300      	movs	r3, #0
 8013910:	e05c      	b.n	80139cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013914:	2b00      	cmp	r3, #0
 8013916:	d106      	bne.n	8013926 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013918:	f107 0314 	add.w	r3, r7, #20
 801391c:	4618      	mov	r0, r3
 801391e:	f001 fa4b 	bl	8014db8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013922:	2301      	movs	r3, #1
 8013924:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013926:	f002 fb2d 	bl	8015f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801392a:	f000 ff1f 	bl	801476c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801392e:	f002 faf9 	bl	8015f24 <vPortEnterCritical>
 8013932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013938:	b25b      	sxtb	r3, r3
 801393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801393e:	d103      	bne.n	8013948 <xQueueGenericSend+0x16c>
 8013940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013942:	2200      	movs	r2, #0
 8013944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801394a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801394e:	b25b      	sxtb	r3, r3
 8013950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013954:	d103      	bne.n	801395e <xQueueGenericSend+0x182>
 8013956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013958:	2200      	movs	r2, #0
 801395a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801395e:	f002 fb11 	bl	8015f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013962:	1d3a      	adds	r2, r7, #4
 8013964:	f107 0314 	add.w	r3, r7, #20
 8013968:	4611      	mov	r1, r2
 801396a:	4618      	mov	r0, r3
 801396c:	f001 fa3a 	bl	8014de4 <xTaskCheckForTimeOut>
 8013970:	4603      	mov	r3, r0
 8013972:	2b00      	cmp	r3, #0
 8013974:	d124      	bne.n	80139c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013978:	f000 fc46 	bl	8014208 <prvIsQueueFull>
 801397c:	4603      	mov	r3, r0
 801397e:	2b00      	cmp	r3, #0
 8013980:	d018      	beq.n	80139b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013984:	3310      	adds	r3, #16
 8013986:	687a      	ldr	r2, [r7, #4]
 8013988:	4611      	mov	r1, r2
 801398a:	4618      	mov	r0, r3
 801398c:	f001 f8c2 	bl	8014b14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013992:	f000 fbd1 	bl	8014138 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013996:	f000 fef7 	bl	8014788 <xTaskResumeAll>
 801399a:	4603      	mov	r3, r0
 801399c:	2b00      	cmp	r3, #0
 801399e:	f47f af7c 	bne.w	801389a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80139a2:	4b0c      	ldr	r3, [pc, #48]	; (80139d4 <xQueueGenericSend+0x1f8>)
 80139a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139a8:	601a      	str	r2, [r3, #0]
 80139aa:	f3bf 8f4f 	dsb	sy
 80139ae:	f3bf 8f6f 	isb	sy
 80139b2:	e772      	b.n	801389a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80139b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139b6:	f000 fbbf 	bl	8014138 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80139ba:	f000 fee5 	bl	8014788 <xTaskResumeAll>
 80139be:	e76c      	b.n	801389a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80139c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139c2:	f000 fbb9 	bl	8014138 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80139c6:	f000 fedf 	bl	8014788 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80139ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	3738      	adds	r7, #56	; 0x38
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd80      	pop	{r7, pc}
 80139d4:	e000ed04 	.word	0xe000ed04

080139d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b090      	sub	sp, #64	; 0x40
 80139dc:	af00      	add	r7, sp, #0
 80139de:	60f8      	str	r0, [r7, #12]
 80139e0:	60b9      	str	r1, [r7, #8]
 80139e2:	607a      	str	r2, [r7, #4]
 80139e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80139ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d10a      	bne.n	8013a06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80139f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f4:	f383 8811 	msr	BASEPRI, r3
 80139f8:	f3bf 8f6f 	isb	sy
 80139fc:	f3bf 8f4f 	dsb	sy
 8013a00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013a02:	bf00      	nop
 8013a04:	e7fe      	b.n	8013a04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a06:	68bb      	ldr	r3, [r7, #8]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d103      	bne.n	8013a14 <xQueueGenericSendFromISR+0x3c>
 8013a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d101      	bne.n	8013a18 <xQueueGenericSendFromISR+0x40>
 8013a14:	2301      	movs	r3, #1
 8013a16:	e000      	b.n	8013a1a <xQueueGenericSendFromISR+0x42>
 8013a18:	2300      	movs	r3, #0
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d10a      	bne.n	8013a34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a22:	f383 8811 	msr	BASEPRI, r3
 8013a26:	f3bf 8f6f 	isb	sy
 8013a2a:	f3bf 8f4f 	dsb	sy
 8013a2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013a30:	bf00      	nop
 8013a32:	e7fe      	b.n	8013a32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	2b02      	cmp	r3, #2
 8013a38:	d103      	bne.n	8013a42 <xQueueGenericSendFromISR+0x6a>
 8013a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a3e:	2b01      	cmp	r3, #1
 8013a40:	d101      	bne.n	8013a46 <xQueueGenericSendFromISR+0x6e>
 8013a42:	2301      	movs	r3, #1
 8013a44:	e000      	b.n	8013a48 <xQueueGenericSendFromISR+0x70>
 8013a46:	2300      	movs	r3, #0
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d10a      	bne.n	8013a62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a50:	f383 8811 	msr	BASEPRI, r3
 8013a54:	f3bf 8f6f 	isb	sy
 8013a58:	f3bf 8f4f 	dsb	sy
 8013a5c:	623b      	str	r3, [r7, #32]
}
 8013a5e:	bf00      	nop
 8013a60:	e7fe      	b.n	8013a60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a62:	f002 fb41 	bl	80160e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013a66:	f3ef 8211 	mrs	r2, BASEPRI
 8013a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a6e:	f383 8811 	msr	BASEPRI, r3
 8013a72:	f3bf 8f6f 	isb	sy
 8013a76:	f3bf 8f4f 	dsb	sy
 8013a7a:	61fa      	str	r2, [r7, #28]
 8013a7c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013a7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013a80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a8a:	429a      	cmp	r2, r3
 8013a8c:	d302      	bcc.n	8013a94 <xQueueGenericSendFromISR+0xbc>
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	2b02      	cmp	r3, #2
 8013a92:	d12f      	bne.n	8013af4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013aa4:	683a      	ldr	r2, [r7, #0]
 8013aa6:	68b9      	ldr	r1, [r7, #8]
 8013aa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013aaa:	f000 fab5 	bl	8014018 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013aae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ab6:	d112      	bne.n	8013ade <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d016      	beq.n	8013aee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac2:	3324      	adds	r3, #36	; 0x24
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f001 f8b1 	bl	8014c2c <xTaskRemoveFromEventList>
 8013aca:	4603      	mov	r3, r0
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d00e      	beq.n	8013aee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d00b      	beq.n	8013aee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	2201      	movs	r2, #1
 8013ada:	601a      	str	r2, [r3, #0]
 8013adc:	e007      	b.n	8013aee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013ade:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013ae2:	3301      	adds	r3, #1
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	b25a      	sxtb	r2, r3
 8013ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013aee:	2301      	movs	r3, #1
 8013af0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013af2:	e001      	b.n	8013af8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013af4:	2300      	movs	r3, #0
 8013af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013afa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013b02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3740      	adds	r7, #64	; 0x40
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}
	...

08013b10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b08c      	sub	sp, #48	; 0x30
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	60f8      	str	r0, [r7, #12]
 8013b18:	60b9      	str	r1, [r7, #8]
 8013b1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d10a      	bne.n	8013b40 <xQueueReceive+0x30>
	__asm volatile
 8013b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b2e:	f383 8811 	msr	BASEPRI, r3
 8013b32:	f3bf 8f6f 	isb	sy
 8013b36:	f3bf 8f4f 	dsb	sy
 8013b3a:	623b      	str	r3, [r7, #32]
}
 8013b3c:	bf00      	nop
 8013b3e:	e7fe      	b.n	8013b3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d103      	bne.n	8013b4e <xQueueReceive+0x3e>
 8013b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d101      	bne.n	8013b52 <xQueueReceive+0x42>
 8013b4e:	2301      	movs	r3, #1
 8013b50:	e000      	b.n	8013b54 <xQueueReceive+0x44>
 8013b52:	2300      	movs	r3, #0
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d10a      	bne.n	8013b6e <xQueueReceive+0x5e>
	__asm volatile
 8013b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b5c:	f383 8811 	msr	BASEPRI, r3
 8013b60:	f3bf 8f6f 	isb	sy
 8013b64:	f3bf 8f4f 	dsb	sy
 8013b68:	61fb      	str	r3, [r7, #28]
}
 8013b6a:	bf00      	nop
 8013b6c:	e7fe      	b.n	8013b6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013b6e:	f001 fa8d 	bl	801508c <xTaskGetSchedulerState>
 8013b72:	4603      	mov	r3, r0
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d102      	bne.n	8013b7e <xQueueReceive+0x6e>
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d101      	bne.n	8013b82 <xQueueReceive+0x72>
 8013b7e:	2301      	movs	r3, #1
 8013b80:	e000      	b.n	8013b84 <xQueueReceive+0x74>
 8013b82:	2300      	movs	r3, #0
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d10a      	bne.n	8013b9e <xQueueReceive+0x8e>
	__asm volatile
 8013b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b8c:	f383 8811 	msr	BASEPRI, r3
 8013b90:	f3bf 8f6f 	isb	sy
 8013b94:	f3bf 8f4f 	dsb	sy
 8013b98:	61bb      	str	r3, [r7, #24]
}
 8013b9a:	bf00      	nop
 8013b9c:	e7fe      	b.n	8013b9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013b9e:	f002 f9c1 	bl	8015f24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ba6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d01f      	beq.n	8013bee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013bae:	68b9      	ldr	r1, [r7, #8]
 8013bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013bb2:	f000 fa9b 	bl	80140ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb8:	1e5a      	subs	r2, r3, #1
 8013bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc0:	691b      	ldr	r3, [r3, #16]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d00f      	beq.n	8013be6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc8:	3310      	adds	r3, #16
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f001 f82e 	bl	8014c2c <xTaskRemoveFromEventList>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d007      	beq.n	8013be6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013bd6:	4b3d      	ldr	r3, [pc, #244]	; (8013ccc <xQueueReceive+0x1bc>)
 8013bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bdc:	601a      	str	r2, [r3, #0]
 8013bde:	f3bf 8f4f 	dsb	sy
 8013be2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013be6:	f002 f9cd 	bl	8015f84 <vPortExitCritical>
				return pdPASS;
 8013bea:	2301      	movs	r3, #1
 8013bec:	e069      	b.n	8013cc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d103      	bne.n	8013bfc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013bf4:	f002 f9c6 	bl	8015f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	e062      	b.n	8013cc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d106      	bne.n	8013c10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013c02:	f107 0310 	add.w	r3, r7, #16
 8013c06:	4618      	mov	r0, r3
 8013c08:	f001 f8d6 	bl	8014db8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013c10:	f002 f9b8 	bl	8015f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013c14:	f000 fdaa 	bl	801476c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013c18:	f002 f984 	bl	8015f24 <vPortEnterCritical>
 8013c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013c22:	b25b      	sxtb	r3, r3
 8013c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c28:	d103      	bne.n	8013c32 <xQueueReceive+0x122>
 8013c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013c38:	b25b      	sxtb	r3, r3
 8013c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c3e:	d103      	bne.n	8013c48 <xQueueReceive+0x138>
 8013c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c42:	2200      	movs	r2, #0
 8013c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013c48:	f002 f99c 	bl	8015f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013c4c:	1d3a      	adds	r2, r7, #4
 8013c4e:	f107 0310 	add.w	r3, r7, #16
 8013c52:	4611      	mov	r1, r2
 8013c54:	4618      	mov	r0, r3
 8013c56:	f001 f8c5 	bl	8014de4 <xTaskCheckForTimeOut>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d123      	bne.n	8013ca8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c62:	f000 fabb 	bl	80141dc <prvIsQueueEmpty>
 8013c66:	4603      	mov	r3, r0
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d017      	beq.n	8013c9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c6e:	3324      	adds	r3, #36	; 0x24
 8013c70:	687a      	ldr	r2, [r7, #4]
 8013c72:	4611      	mov	r1, r2
 8013c74:	4618      	mov	r0, r3
 8013c76:	f000 ff4d 	bl	8014b14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c7c:	f000 fa5c 	bl	8014138 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013c80:	f000 fd82 	bl	8014788 <xTaskResumeAll>
 8013c84:	4603      	mov	r3, r0
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d189      	bne.n	8013b9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013c8a:	4b10      	ldr	r3, [pc, #64]	; (8013ccc <xQueueReceive+0x1bc>)
 8013c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c90:	601a      	str	r2, [r3, #0]
 8013c92:	f3bf 8f4f 	dsb	sy
 8013c96:	f3bf 8f6f 	isb	sy
 8013c9a:	e780      	b.n	8013b9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c9e:	f000 fa4b 	bl	8014138 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013ca2:	f000 fd71 	bl	8014788 <xTaskResumeAll>
 8013ca6:	e77a      	b.n	8013b9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013caa:	f000 fa45 	bl	8014138 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013cae:	f000 fd6b 	bl	8014788 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cb4:	f000 fa92 	bl	80141dc <prvIsQueueEmpty>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	f43f af6f 	beq.w	8013b9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013cc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	3730      	adds	r7, #48	; 0x30
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}
 8013cca:	bf00      	nop
 8013ccc:	e000ed04 	.word	0xe000ed04

08013cd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b08e      	sub	sp, #56	; 0x38
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
 8013cd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d10a      	bne.n	8013d02 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8013cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf0:	f383 8811 	msr	BASEPRI, r3
 8013cf4:	f3bf 8f6f 	isb	sy
 8013cf8:	f3bf 8f4f 	dsb	sy
 8013cfc:	623b      	str	r3, [r7, #32]
}
 8013cfe:	bf00      	nop
 8013d00:	e7fe      	b.n	8013d00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d00a      	beq.n	8013d20 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8013d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d0e:	f383 8811 	msr	BASEPRI, r3
 8013d12:	f3bf 8f6f 	isb	sy
 8013d16:	f3bf 8f4f 	dsb	sy
 8013d1a:	61fb      	str	r3, [r7, #28]
}
 8013d1c:	bf00      	nop
 8013d1e:	e7fe      	b.n	8013d1e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013d20:	f001 f9b4 	bl	801508c <xTaskGetSchedulerState>
 8013d24:	4603      	mov	r3, r0
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d102      	bne.n	8013d30 <xQueueSemaphoreTake+0x60>
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d101      	bne.n	8013d34 <xQueueSemaphoreTake+0x64>
 8013d30:	2301      	movs	r3, #1
 8013d32:	e000      	b.n	8013d36 <xQueueSemaphoreTake+0x66>
 8013d34:	2300      	movs	r3, #0
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d10a      	bne.n	8013d50 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8013d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d3e:	f383 8811 	msr	BASEPRI, r3
 8013d42:	f3bf 8f6f 	isb	sy
 8013d46:	f3bf 8f4f 	dsb	sy
 8013d4a:	61bb      	str	r3, [r7, #24]
}
 8013d4c:	bf00      	nop
 8013d4e:	e7fe      	b.n	8013d4e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013d50:	f002 f8e8 	bl	8015f24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d58:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d024      	beq.n	8013daa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d62:	1e5a      	subs	r2, r3, #1
 8013d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d104      	bne.n	8013d7a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013d70:	f001 fb1a 	bl	80153a8 <pvTaskIncrementMutexHeldCount>
 8013d74:	4602      	mov	r2, r0
 8013d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d7c:	691b      	ldr	r3, [r3, #16]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d00f      	beq.n	8013da2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d84:	3310      	adds	r3, #16
 8013d86:	4618      	mov	r0, r3
 8013d88:	f000 ff50 	bl	8014c2c <xTaskRemoveFromEventList>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d007      	beq.n	8013da2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013d92:	4b54      	ldr	r3, [pc, #336]	; (8013ee4 <xQueueSemaphoreTake+0x214>)
 8013d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d98:	601a      	str	r2, [r3, #0]
 8013d9a:	f3bf 8f4f 	dsb	sy
 8013d9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013da2:	f002 f8ef 	bl	8015f84 <vPortExitCritical>
				return pdPASS;
 8013da6:	2301      	movs	r3, #1
 8013da8:	e097      	b.n	8013eda <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d111      	bne.n	8013dd4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d00a      	beq.n	8013dcc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8013db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dba:	f383 8811 	msr	BASEPRI, r3
 8013dbe:	f3bf 8f6f 	isb	sy
 8013dc2:	f3bf 8f4f 	dsb	sy
 8013dc6:	617b      	str	r3, [r7, #20]
}
 8013dc8:	bf00      	nop
 8013dca:	e7fe      	b.n	8013dca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013dcc:	f002 f8da 	bl	8015f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	e082      	b.n	8013eda <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d106      	bne.n	8013de8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013dda:	f107 030c 	add.w	r3, r7, #12
 8013dde:	4618      	mov	r0, r3
 8013de0:	f000 ffea 	bl	8014db8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013de4:	2301      	movs	r3, #1
 8013de6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013de8:	f002 f8cc 	bl	8015f84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013dec:	f000 fcbe 	bl	801476c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013df0:	f002 f898 	bl	8015f24 <vPortEnterCritical>
 8013df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013dfa:	b25b      	sxtb	r3, r3
 8013dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e00:	d103      	bne.n	8013e0a <xQueueSemaphoreTake+0x13a>
 8013e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e04:	2200      	movs	r2, #0
 8013e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013e10:	b25b      	sxtb	r3, r3
 8013e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e16:	d103      	bne.n	8013e20 <xQueueSemaphoreTake+0x150>
 8013e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013e20:	f002 f8b0 	bl	8015f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013e24:	463a      	mov	r2, r7
 8013e26:	f107 030c 	add.w	r3, r7, #12
 8013e2a:	4611      	mov	r1, r2
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f000 ffd9 	bl	8014de4 <xTaskCheckForTimeOut>
 8013e32:	4603      	mov	r3, r0
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d132      	bne.n	8013e9e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013e38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e3a:	f000 f9cf 	bl	80141dc <prvIsQueueEmpty>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d026      	beq.n	8013e92 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d109      	bne.n	8013e60 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8013e4c:	f002 f86a 	bl	8015f24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e52:	689b      	ldr	r3, [r3, #8]
 8013e54:	4618      	mov	r0, r3
 8013e56:	f001 f937 	bl	80150c8 <xTaskPriorityInherit>
 8013e5a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013e5c:	f002 f892 	bl	8015f84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e62:	3324      	adds	r3, #36	; 0x24
 8013e64:	683a      	ldr	r2, [r7, #0]
 8013e66:	4611      	mov	r1, r2
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f000 fe53 	bl	8014b14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013e6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e70:	f000 f962 	bl	8014138 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013e74:	f000 fc88 	bl	8014788 <xTaskResumeAll>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	f47f af68 	bne.w	8013d50 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8013e80:	4b18      	ldr	r3, [pc, #96]	; (8013ee4 <xQueueSemaphoreTake+0x214>)
 8013e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e86:	601a      	str	r2, [r3, #0]
 8013e88:	f3bf 8f4f 	dsb	sy
 8013e8c:	f3bf 8f6f 	isb	sy
 8013e90:	e75e      	b.n	8013d50 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013e92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e94:	f000 f950 	bl	8014138 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013e98:	f000 fc76 	bl	8014788 <xTaskResumeAll>
 8013e9c:	e758      	b.n	8013d50 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013e9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ea0:	f000 f94a 	bl	8014138 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013ea4:	f000 fc70 	bl	8014788 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ea8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013eaa:	f000 f997 	bl	80141dc <prvIsQueueEmpty>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	f43f af4d 	beq.w	8013d50 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d00d      	beq.n	8013ed8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8013ebc:	f002 f832 	bl	8015f24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013ec0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ec2:	f000 f891 	bl	8013fe8 <prvGetDisinheritPriorityAfterTimeout>
 8013ec6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eca:	689b      	ldr	r3, [r3, #8]
 8013ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f001 f9d0 	bl	8015274 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013ed4:	f002 f856 	bl	8015f84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013ed8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3738      	adds	r7, #56	; 0x38
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
 8013ee2:	bf00      	nop
 8013ee4:	e000ed04 	.word	0xe000ed04

08013ee8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b08e      	sub	sp, #56	; 0x38
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	60f8      	str	r0, [r7, #12]
 8013ef0:	60b9      	str	r1, [r7, #8]
 8013ef2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d10a      	bne.n	8013f14 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f02:	f383 8811 	msr	BASEPRI, r3
 8013f06:	f3bf 8f6f 	isb	sy
 8013f0a:	f3bf 8f4f 	dsb	sy
 8013f0e:	623b      	str	r3, [r7, #32]
}
 8013f10:	bf00      	nop
 8013f12:	e7fe      	b.n	8013f12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d103      	bne.n	8013f22 <xQueueReceiveFromISR+0x3a>
 8013f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d101      	bne.n	8013f26 <xQueueReceiveFromISR+0x3e>
 8013f22:	2301      	movs	r3, #1
 8013f24:	e000      	b.n	8013f28 <xQueueReceiveFromISR+0x40>
 8013f26:	2300      	movs	r3, #0
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d10a      	bne.n	8013f42 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f30:	f383 8811 	msr	BASEPRI, r3
 8013f34:	f3bf 8f6f 	isb	sy
 8013f38:	f3bf 8f4f 	dsb	sy
 8013f3c:	61fb      	str	r3, [r7, #28]
}
 8013f3e:	bf00      	nop
 8013f40:	e7fe      	b.n	8013f40 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013f42:	f002 f8d1 	bl	80160e8 <vPortValidateInterruptPriority>
	__asm volatile
 8013f46:	f3ef 8211 	mrs	r2, BASEPRI
 8013f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f4e:	f383 8811 	msr	BASEPRI, r3
 8013f52:	f3bf 8f6f 	isb	sy
 8013f56:	f3bf 8f4f 	dsb	sy
 8013f5a:	61ba      	str	r2, [r7, #24]
 8013f5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013f5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013f60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d02f      	beq.n	8013fce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013f78:	68b9      	ldr	r1, [r7, #8]
 8013f7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f7c:	f000 f8b6 	bl	80140ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f82:	1e5a      	subs	r2, r3, #1
 8013f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013f88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f90:	d112      	bne.n	8013fb8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f94:	691b      	ldr	r3, [r3, #16]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d016      	beq.n	8013fc8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f9c:	3310      	adds	r3, #16
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f000 fe44 	bl	8014c2c <xTaskRemoveFromEventList>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d00e      	beq.n	8013fc8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d00b      	beq.n	8013fc8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2201      	movs	r2, #1
 8013fb4:	601a      	str	r2, [r3, #0]
 8013fb6:	e007      	b.n	8013fc8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fbc:	3301      	adds	r3, #1
 8013fbe:	b2db      	uxtb	r3, r3
 8013fc0:	b25a      	sxtb	r2, r3
 8013fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013fc8:	2301      	movs	r3, #1
 8013fca:	637b      	str	r3, [r7, #52]	; 0x34
 8013fcc:	e001      	b.n	8013fd2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8013fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013fd6:	693b      	ldr	r3, [r7, #16]
 8013fd8:	f383 8811 	msr	BASEPRI, r3
}
 8013fdc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3738      	adds	r7, #56	; 0x38
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013fe8:	b480      	push	{r7}
 8013fea:	b085      	sub	sp, #20
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d006      	beq.n	8014006 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8014002:	60fb      	str	r3, [r7, #12]
 8014004:	e001      	b.n	801400a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014006:	2300      	movs	r3, #0
 8014008:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801400a:	68fb      	ldr	r3, [r7, #12]
	}
 801400c:	4618      	mov	r0, r3
 801400e:	3714      	adds	r7, #20
 8014010:	46bd      	mov	sp, r7
 8014012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014016:	4770      	bx	lr

08014018 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b086      	sub	sp, #24
 801401c:	af00      	add	r7, sp, #0
 801401e:	60f8      	str	r0, [r7, #12]
 8014020:	60b9      	str	r1, [r7, #8]
 8014022:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014024:	2300      	movs	r3, #0
 8014026:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801402c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014032:	2b00      	cmp	r3, #0
 8014034:	d10d      	bne.n	8014052 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d14d      	bne.n	80140da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	689b      	ldr	r3, [r3, #8]
 8014042:	4618      	mov	r0, r3
 8014044:	f001 f8a8 	bl	8015198 <xTaskPriorityDisinherit>
 8014048:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	2200      	movs	r2, #0
 801404e:	609a      	str	r2, [r3, #8]
 8014050:	e043      	b.n	80140da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d119      	bne.n	801408c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	6858      	ldr	r0, [r3, #4]
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014060:	461a      	mov	r2, r3
 8014062:	68b9      	ldr	r1, [r7, #8]
 8014064:	f002 fa96 	bl	8016594 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	685a      	ldr	r2, [r3, #4]
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014070:	441a      	add	r2, r3
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	685a      	ldr	r2, [r3, #4]
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	689b      	ldr	r3, [r3, #8]
 801407e:	429a      	cmp	r2, r3
 8014080:	d32b      	bcc.n	80140da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	681a      	ldr	r2, [r3, #0]
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	605a      	str	r2, [r3, #4]
 801408a:	e026      	b.n	80140da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	68d8      	ldr	r0, [r3, #12]
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014094:	461a      	mov	r2, r3
 8014096:	68b9      	ldr	r1, [r7, #8]
 8014098:	f002 fa7c 	bl	8016594 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	68da      	ldr	r2, [r3, #12]
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140a4:	425b      	negs	r3, r3
 80140a6:	441a      	add	r2, r3
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	68da      	ldr	r2, [r3, #12]
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d207      	bcs.n	80140c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	689a      	ldr	r2, [r3, #8]
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140c0:	425b      	negs	r3, r3
 80140c2:	441a      	add	r2, r3
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	2b02      	cmp	r3, #2
 80140cc:	d105      	bne.n	80140da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80140ce:	693b      	ldr	r3, [r7, #16]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d002      	beq.n	80140da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	3b01      	subs	r3, #1
 80140d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80140da:	693b      	ldr	r3, [r7, #16]
 80140dc:	1c5a      	adds	r2, r3, #1
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80140e2:	697b      	ldr	r3, [r7, #20]
}
 80140e4:	4618      	mov	r0, r3
 80140e6:	3718      	adds	r7, #24
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}

080140ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
 80140f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d018      	beq.n	8014130 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	68da      	ldr	r2, [r3, #12]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014106:	441a      	add	r2, r3
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	68da      	ldr	r2, [r3, #12]
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	689b      	ldr	r3, [r3, #8]
 8014114:	429a      	cmp	r2, r3
 8014116:	d303      	bcc.n	8014120 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681a      	ldr	r2, [r3, #0]
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	68d9      	ldr	r1, [r3, #12]
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014128:	461a      	mov	r2, r3
 801412a:	6838      	ldr	r0, [r7, #0]
 801412c:	f002 fa32 	bl	8016594 <memcpy>
	}
}
 8014130:	bf00      	nop
 8014132:	3708      	adds	r7, #8
 8014134:	46bd      	mov	sp, r7
 8014136:	bd80      	pop	{r7, pc}

08014138 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b084      	sub	sp, #16
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014140:	f001 fef0 	bl	8015f24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801414a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801414c:	e011      	b.n	8014172 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014152:	2b00      	cmp	r3, #0
 8014154:	d012      	beq.n	801417c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	3324      	adds	r3, #36	; 0x24
 801415a:	4618      	mov	r0, r3
 801415c:	f000 fd66 	bl	8014c2c <xTaskRemoveFromEventList>
 8014160:	4603      	mov	r3, r0
 8014162:	2b00      	cmp	r3, #0
 8014164:	d001      	beq.n	801416a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014166:	f000 fe9f 	bl	8014ea8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801416a:	7bfb      	ldrb	r3, [r7, #15]
 801416c:	3b01      	subs	r3, #1
 801416e:	b2db      	uxtb	r3, r3
 8014170:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014176:	2b00      	cmp	r3, #0
 8014178:	dce9      	bgt.n	801414e <prvUnlockQueue+0x16>
 801417a:	e000      	b.n	801417e <prvUnlockQueue+0x46>
					break;
 801417c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	22ff      	movs	r2, #255	; 0xff
 8014182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014186:	f001 fefd 	bl	8015f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801418a:	f001 fecb 	bl	8015f24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014194:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014196:	e011      	b.n	80141bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	691b      	ldr	r3, [r3, #16]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d012      	beq.n	80141c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	3310      	adds	r3, #16
 80141a4:	4618      	mov	r0, r3
 80141a6:	f000 fd41 	bl	8014c2c <xTaskRemoveFromEventList>
 80141aa:	4603      	mov	r3, r0
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d001      	beq.n	80141b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80141b0:	f000 fe7a 	bl	8014ea8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80141b4:	7bbb      	ldrb	r3, [r7, #14]
 80141b6:	3b01      	subs	r3, #1
 80141b8:	b2db      	uxtb	r3, r3
 80141ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80141bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	dce9      	bgt.n	8014198 <prvUnlockQueue+0x60>
 80141c4:	e000      	b.n	80141c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80141c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	22ff      	movs	r2, #255	; 0xff
 80141cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80141d0:	f001 fed8 	bl	8015f84 <vPortExitCritical>
}
 80141d4:	bf00      	nop
 80141d6:	3710      	adds	r7, #16
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}

080141dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b084      	sub	sp, #16
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80141e4:	f001 fe9e 	bl	8015f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d102      	bne.n	80141f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80141f0:	2301      	movs	r3, #1
 80141f2:	60fb      	str	r3, [r7, #12]
 80141f4:	e001      	b.n	80141fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80141f6:	2300      	movs	r3, #0
 80141f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80141fa:	f001 fec3 	bl	8015f84 <vPortExitCritical>

	return xReturn;
 80141fe:	68fb      	ldr	r3, [r7, #12]
}
 8014200:	4618      	mov	r0, r3
 8014202:	3710      	adds	r7, #16
 8014204:	46bd      	mov	sp, r7
 8014206:	bd80      	pop	{r7, pc}

08014208 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b084      	sub	sp, #16
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014210:	f001 fe88 	bl	8015f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801421c:	429a      	cmp	r2, r3
 801421e:	d102      	bne.n	8014226 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014220:	2301      	movs	r3, #1
 8014222:	60fb      	str	r3, [r7, #12]
 8014224:	e001      	b.n	801422a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014226:	2300      	movs	r3, #0
 8014228:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801422a:	f001 feab 	bl	8015f84 <vPortExitCritical>

	return xReturn;
 801422e:	68fb      	ldr	r3, [r7, #12]
}
 8014230:	4618      	mov	r0, r3
 8014232:	3710      	adds	r7, #16
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}

08014238 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014238:	b480      	push	{r7}
 801423a:	b085      	sub	sp, #20
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014242:	2300      	movs	r3, #0
 8014244:	60fb      	str	r3, [r7, #12]
 8014246:	e014      	b.n	8014272 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014248:	4a0f      	ldr	r2, [pc, #60]	; (8014288 <vQueueAddToRegistry+0x50>)
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d10b      	bne.n	801426c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014254:	490c      	ldr	r1, [pc, #48]	; (8014288 <vQueueAddToRegistry+0x50>)
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	683a      	ldr	r2, [r7, #0]
 801425a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801425e:	4a0a      	ldr	r2, [pc, #40]	; (8014288 <vQueueAddToRegistry+0x50>)
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	00db      	lsls	r3, r3, #3
 8014264:	4413      	add	r3, r2
 8014266:	687a      	ldr	r2, [r7, #4]
 8014268:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801426a:	e006      	b.n	801427a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	3301      	adds	r3, #1
 8014270:	60fb      	str	r3, [r7, #12]
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	2b07      	cmp	r3, #7
 8014276:	d9e7      	bls.n	8014248 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014278:	bf00      	nop
 801427a:	bf00      	nop
 801427c:	3714      	adds	r7, #20
 801427e:	46bd      	mov	sp, r7
 8014280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014284:	4770      	bx	lr
 8014286:	bf00      	nop
 8014288:	2000589c 	.word	0x2000589c

0801428c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801428c:	b580      	push	{r7, lr}
 801428e:	b086      	sub	sp, #24
 8014290:	af00      	add	r7, sp, #0
 8014292:	60f8      	str	r0, [r7, #12]
 8014294:	60b9      	str	r1, [r7, #8]
 8014296:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801429c:	f001 fe42 	bl	8015f24 <vPortEnterCritical>
 80142a0:	697b      	ldr	r3, [r7, #20]
 80142a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80142a6:	b25b      	sxtb	r3, r3
 80142a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ac:	d103      	bne.n	80142b6 <vQueueWaitForMessageRestricted+0x2a>
 80142ae:	697b      	ldr	r3, [r7, #20]
 80142b0:	2200      	movs	r2, #0
 80142b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80142b6:	697b      	ldr	r3, [r7, #20]
 80142b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80142bc:	b25b      	sxtb	r3, r3
 80142be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142c2:	d103      	bne.n	80142cc <vQueueWaitForMessageRestricted+0x40>
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	2200      	movs	r2, #0
 80142c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80142cc:	f001 fe5a 	bl	8015f84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80142d0:	697b      	ldr	r3, [r7, #20]
 80142d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d106      	bne.n	80142e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80142d8:	697b      	ldr	r3, [r7, #20]
 80142da:	3324      	adds	r3, #36	; 0x24
 80142dc:	687a      	ldr	r2, [r7, #4]
 80142de:	68b9      	ldr	r1, [r7, #8]
 80142e0:	4618      	mov	r0, r3
 80142e2:	f000 fc77 	bl	8014bd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80142e6:	6978      	ldr	r0, [r7, #20]
 80142e8:	f7ff ff26 	bl	8014138 <prvUnlockQueue>
	}
 80142ec:	bf00      	nop
 80142ee:	3718      	adds	r7, #24
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}

080142f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b08e      	sub	sp, #56	; 0x38
 80142f8:	af04      	add	r7, sp, #16
 80142fa:	60f8      	str	r0, [r7, #12]
 80142fc:	60b9      	str	r1, [r7, #8]
 80142fe:	607a      	str	r2, [r7, #4]
 8014300:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014304:	2b00      	cmp	r3, #0
 8014306:	d10a      	bne.n	801431e <xTaskCreateStatic+0x2a>
	__asm volatile
 8014308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801430c:	f383 8811 	msr	BASEPRI, r3
 8014310:	f3bf 8f6f 	isb	sy
 8014314:	f3bf 8f4f 	dsb	sy
 8014318:	623b      	str	r3, [r7, #32]
}
 801431a:	bf00      	nop
 801431c:	e7fe      	b.n	801431c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014320:	2b00      	cmp	r3, #0
 8014322:	d10a      	bne.n	801433a <xTaskCreateStatic+0x46>
	__asm volatile
 8014324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014328:	f383 8811 	msr	BASEPRI, r3
 801432c:	f3bf 8f6f 	isb	sy
 8014330:	f3bf 8f4f 	dsb	sy
 8014334:	61fb      	str	r3, [r7, #28]
}
 8014336:	bf00      	nop
 8014338:	e7fe      	b.n	8014338 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801433a:	236c      	movs	r3, #108	; 0x6c
 801433c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	2b6c      	cmp	r3, #108	; 0x6c
 8014342:	d00a      	beq.n	801435a <xTaskCreateStatic+0x66>
	__asm volatile
 8014344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014348:	f383 8811 	msr	BASEPRI, r3
 801434c:	f3bf 8f6f 	isb	sy
 8014350:	f3bf 8f4f 	dsb	sy
 8014354:	61bb      	str	r3, [r7, #24]
}
 8014356:	bf00      	nop
 8014358:	e7fe      	b.n	8014358 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801435a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801435c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801435e:	2b00      	cmp	r3, #0
 8014360:	d01e      	beq.n	80143a0 <xTaskCreateStatic+0xac>
 8014362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014364:	2b00      	cmp	r3, #0
 8014366:	d01b      	beq.n	80143a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801436a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801436e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014370:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014374:	2202      	movs	r2, #2
 8014376:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801437a:	2300      	movs	r3, #0
 801437c:	9303      	str	r3, [sp, #12]
 801437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014380:	9302      	str	r3, [sp, #8]
 8014382:	f107 0314 	add.w	r3, r7, #20
 8014386:	9301      	str	r3, [sp, #4]
 8014388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801438a:	9300      	str	r3, [sp, #0]
 801438c:	683b      	ldr	r3, [r7, #0]
 801438e:	687a      	ldr	r2, [r7, #4]
 8014390:	68b9      	ldr	r1, [r7, #8]
 8014392:	68f8      	ldr	r0, [r7, #12]
 8014394:	f000 f850 	bl	8014438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801439a:	f000 f8dd 	bl	8014558 <prvAddNewTaskToReadyList>
 801439e:	e001      	b.n	80143a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80143a0:	2300      	movs	r3, #0
 80143a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80143a4:	697b      	ldr	r3, [r7, #20]
	}
 80143a6:	4618      	mov	r0, r3
 80143a8:	3728      	adds	r7, #40	; 0x28
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}

080143ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80143ae:	b580      	push	{r7, lr}
 80143b0:	b08c      	sub	sp, #48	; 0x30
 80143b2:	af04      	add	r7, sp, #16
 80143b4:	60f8      	str	r0, [r7, #12]
 80143b6:	60b9      	str	r1, [r7, #8]
 80143b8:	603b      	str	r3, [r7, #0]
 80143ba:	4613      	mov	r3, r2
 80143bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80143be:	88fb      	ldrh	r3, [r7, #6]
 80143c0:	009b      	lsls	r3, r3, #2
 80143c2:	4618      	mov	r0, r3
 80143c4:	f001 fed0 	bl	8016168 <pvPortMalloc>
 80143c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d00e      	beq.n	80143ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80143d0:	206c      	movs	r0, #108	; 0x6c
 80143d2:	f001 fec9 	bl	8016168 <pvPortMalloc>
 80143d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80143d8:	69fb      	ldr	r3, [r7, #28]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d003      	beq.n	80143e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80143de:	69fb      	ldr	r3, [r7, #28]
 80143e0:	697a      	ldr	r2, [r7, #20]
 80143e2:	631a      	str	r2, [r3, #48]	; 0x30
 80143e4:	e005      	b.n	80143f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80143e6:	6978      	ldr	r0, [r7, #20]
 80143e8:	f001 ff8a 	bl	8016300 <vPortFree>
 80143ec:	e001      	b.n	80143f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80143ee:	2300      	movs	r3, #0
 80143f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80143f2:	69fb      	ldr	r3, [r7, #28]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d017      	beq.n	8014428 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80143f8:	69fb      	ldr	r3, [r7, #28]
 80143fa:	2200      	movs	r2, #0
 80143fc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014400:	88fa      	ldrh	r2, [r7, #6]
 8014402:	2300      	movs	r3, #0
 8014404:	9303      	str	r3, [sp, #12]
 8014406:	69fb      	ldr	r3, [r7, #28]
 8014408:	9302      	str	r3, [sp, #8]
 801440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801440c:	9301      	str	r3, [sp, #4]
 801440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014410:	9300      	str	r3, [sp, #0]
 8014412:	683b      	ldr	r3, [r7, #0]
 8014414:	68b9      	ldr	r1, [r7, #8]
 8014416:	68f8      	ldr	r0, [r7, #12]
 8014418:	f000 f80e 	bl	8014438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801441c:	69f8      	ldr	r0, [r7, #28]
 801441e:	f000 f89b 	bl	8014558 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014422:	2301      	movs	r3, #1
 8014424:	61bb      	str	r3, [r7, #24]
 8014426:	e002      	b.n	801442e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014428:	f04f 33ff 	mov.w	r3, #4294967295
 801442c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801442e:	69bb      	ldr	r3, [r7, #24]
	}
 8014430:	4618      	mov	r0, r3
 8014432:	3720      	adds	r7, #32
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}

08014438 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b088      	sub	sp, #32
 801443c:	af00      	add	r7, sp, #0
 801443e:	60f8      	str	r0, [r7, #12]
 8014440:	60b9      	str	r1, [r7, #8]
 8014442:	607a      	str	r2, [r7, #4]
 8014444:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014448:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	009b      	lsls	r3, r3, #2
 801444e:	461a      	mov	r2, r3
 8014450:	21a5      	movs	r1, #165	; 0xa5
 8014452:	f002 f8ad 	bl	80165b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014460:	3b01      	subs	r3, #1
 8014462:	009b      	lsls	r3, r3, #2
 8014464:	4413      	add	r3, r2
 8014466:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014468:	69bb      	ldr	r3, [r7, #24]
 801446a:	f023 0307 	bic.w	r3, r3, #7
 801446e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014470:	69bb      	ldr	r3, [r7, #24]
 8014472:	f003 0307 	and.w	r3, r3, #7
 8014476:	2b00      	cmp	r3, #0
 8014478:	d00a      	beq.n	8014490 <prvInitialiseNewTask+0x58>
	__asm volatile
 801447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801447e:	f383 8811 	msr	BASEPRI, r3
 8014482:	f3bf 8f6f 	isb	sy
 8014486:	f3bf 8f4f 	dsb	sy
 801448a:	617b      	str	r3, [r7, #20]
}
 801448c:	bf00      	nop
 801448e:	e7fe      	b.n	801448e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014490:	68bb      	ldr	r3, [r7, #8]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d01f      	beq.n	80144d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014496:	2300      	movs	r3, #0
 8014498:	61fb      	str	r3, [r7, #28]
 801449a:	e012      	b.n	80144c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801449c:	68ba      	ldr	r2, [r7, #8]
 801449e:	69fb      	ldr	r3, [r7, #28]
 80144a0:	4413      	add	r3, r2
 80144a2:	7819      	ldrb	r1, [r3, #0]
 80144a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144a6:	69fb      	ldr	r3, [r7, #28]
 80144a8:	4413      	add	r3, r2
 80144aa:	3334      	adds	r3, #52	; 0x34
 80144ac:	460a      	mov	r2, r1
 80144ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80144b0:	68ba      	ldr	r2, [r7, #8]
 80144b2:	69fb      	ldr	r3, [r7, #28]
 80144b4:	4413      	add	r3, r2
 80144b6:	781b      	ldrb	r3, [r3, #0]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d006      	beq.n	80144ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80144bc:	69fb      	ldr	r3, [r7, #28]
 80144be:	3301      	adds	r3, #1
 80144c0:	61fb      	str	r3, [r7, #28]
 80144c2:	69fb      	ldr	r3, [r7, #28]
 80144c4:	2b1f      	cmp	r3, #31
 80144c6:	d9e9      	bls.n	801449c <prvInitialiseNewTask+0x64>
 80144c8:	e000      	b.n	80144cc <prvInitialiseNewTask+0x94>
			{
				break;
 80144ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80144cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ce:	2200      	movs	r2, #0
 80144d0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80144d4:	e003      	b.n	80144de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80144d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144d8:	2200      	movs	r2, #0
 80144da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80144de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144e0:	2b37      	cmp	r3, #55	; 0x37
 80144e2:	d901      	bls.n	80144e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80144e4:	2337      	movs	r3, #55	; 0x37
 80144e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80144e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80144ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144f2:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 80144f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144f6:	2200      	movs	r2, #0
 80144f8:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80144fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144fc:	3304      	adds	r3, #4
 80144fe:	4618      	mov	r0, r3
 8014500:	f7fe fee4 	bl	80132cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014506:	3318      	adds	r3, #24
 8014508:	4618      	mov	r0, r3
 801450a:	f7fe fedf 	bl	80132cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801450e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014512:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014516:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801451c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801451e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014522:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014526:	2200      	movs	r2, #0
 8014528:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801452c:	2200      	movs	r2, #0
 801452e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014532:	683a      	ldr	r2, [r7, #0]
 8014534:	68f9      	ldr	r1, [r7, #12]
 8014536:	69b8      	ldr	r0, [r7, #24]
 8014538:	f001 fbc6 	bl	8015cc8 <pxPortInitialiseStack>
 801453c:	4602      	mov	r2, r0
 801453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014540:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014544:	2b00      	cmp	r3, #0
 8014546:	d002      	beq.n	801454e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801454a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801454c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801454e:	bf00      	nop
 8014550:	3720      	adds	r7, #32
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}
	...

08014558 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b082      	sub	sp, #8
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014560:	f001 fce0 	bl	8015f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014564:	4b2d      	ldr	r3, [pc, #180]	; (801461c <prvAddNewTaskToReadyList+0xc4>)
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	3301      	adds	r3, #1
 801456a:	4a2c      	ldr	r2, [pc, #176]	; (801461c <prvAddNewTaskToReadyList+0xc4>)
 801456c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801456e:	4b2c      	ldr	r3, [pc, #176]	; (8014620 <prvAddNewTaskToReadyList+0xc8>)
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d109      	bne.n	801458a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014576:	4a2a      	ldr	r2, [pc, #168]	; (8014620 <prvAddNewTaskToReadyList+0xc8>)
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801457c:	4b27      	ldr	r3, [pc, #156]	; (801461c <prvAddNewTaskToReadyList+0xc4>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	2b01      	cmp	r3, #1
 8014582:	d110      	bne.n	80145a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014584:	f000 fcb4 	bl	8014ef0 <prvInitialiseTaskLists>
 8014588:	e00d      	b.n	80145a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801458a:	4b26      	ldr	r3, [pc, #152]	; (8014624 <prvAddNewTaskToReadyList+0xcc>)
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d109      	bne.n	80145a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014592:	4b23      	ldr	r3, [pc, #140]	; (8014620 <prvAddNewTaskToReadyList+0xc8>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801459c:	429a      	cmp	r2, r3
 801459e:	d802      	bhi.n	80145a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80145a0:	4a1f      	ldr	r2, [pc, #124]	; (8014620 <prvAddNewTaskToReadyList+0xc8>)
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80145a6:	4b20      	ldr	r3, [pc, #128]	; (8014628 <prvAddNewTaskToReadyList+0xd0>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	3301      	adds	r3, #1
 80145ac:	4a1e      	ldr	r2, [pc, #120]	; (8014628 <prvAddNewTaskToReadyList+0xd0>)
 80145ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80145b0:	4b1d      	ldr	r3, [pc, #116]	; (8014628 <prvAddNewTaskToReadyList+0xd0>)
 80145b2:	681a      	ldr	r2, [r3, #0]
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145bc:	4b1b      	ldr	r3, [pc, #108]	; (801462c <prvAddNewTaskToReadyList+0xd4>)
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	429a      	cmp	r2, r3
 80145c2:	d903      	bls.n	80145cc <prvAddNewTaskToReadyList+0x74>
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145c8:	4a18      	ldr	r2, [pc, #96]	; (801462c <prvAddNewTaskToReadyList+0xd4>)
 80145ca:	6013      	str	r3, [r2, #0]
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145d0:	4613      	mov	r3, r2
 80145d2:	009b      	lsls	r3, r3, #2
 80145d4:	4413      	add	r3, r2
 80145d6:	009b      	lsls	r3, r3, #2
 80145d8:	4a15      	ldr	r2, [pc, #84]	; (8014630 <prvAddNewTaskToReadyList+0xd8>)
 80145da:	441a      	add	r2, r3
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	3304      	adds	r3, #4
 80145e0:	4619      	mov	r1, r3
 80145e2:	4610      	mov	r0, r2
 80145e4:	f7fe fe7f 	bl	80132e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80145e8:	f001 fccc 	bl	8015f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80145ec:	4b0d      	ldr	r3, [pc, #52]	; (8014624 <prvAddNewTaskToReadyList+0xcc>)
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d00e      	beq.n	8014612 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80145f4:	4b0a      	ldr	r3, [pc, #40]	; (8014620 <prvAddNewTaskToReadyList+0xc8>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145fe:	429a      	cmp	r2, r3
 8014600:	d207      	bcs.n	8014612 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014602:	4b0c      	ldr	r3, [pc, #48]	; (8014634 <prvAddNewTaskToReadyList+0xdc>)
 8014604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014608:	601a      	str	r2, [r3, #0]
 801460a:	f3bf 8f4f 	dsb	sy
 801460e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014612:	bf00      	nop
 8014614:	3708      	adds	r7, #8
 8014616:	46bd      	mov	sp, r7
 8014618:	bd80      	pop	{r7, pc}
 801461a:	bf00      	nop
 801461c:	20005db0 	.word	0x20005db0
 8014620:	200058dc 	.word	0x200058dc
 8014624:	20005dbc 	.word	0x20005dbc
 8014628:	20005dcc 	.word	0x20005dcc
 801462c:	20005db8 	.word	0x20005db8
 8014630:	200058e0 	.word	0x200058e0
 8014634:	e000ed04 	.word	0xe000ed04

08014638 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014638:	b580      	push	{r7, lr}
 801463a:	b084      	sub	sp, #16
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014640:	2300      	movs	r3, #0
 8014642:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d017      	beq.n	801467a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801464a:	4b13      	ldr	r3, [pc, #76]	; (8014698 <vTaskDelay+0x60>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d00a      	beq.n	8014668 <vTaskDelay+0x30>
	__asm volatile
 8014652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014656:	f383 8811 	msr	BASEPRI, r3
 801465a:	f3bf 8f6f 	isb	sy
 801465e:	f3bf 8f4f 	dsb	sy
 8014662:	60bb      	str	r3, [r7, #8]
}
 8014664:	bf00      	nop
 8014666:	e7fe      	b.n	8014666 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014668:	f000 f880 	bl	801476c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801466c:	2100      	movs	r1, #0
 801466e:	6878      	ldr	r0, [r7, #4]
 8014670:	f000 feae 	bl	80153d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014674:	f000 f888 	bl	8014788 <xTaskResumeAll>
 8014678:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d107      	bne.n	8014690 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014680:	4b06      	ldr	r3, [pc, #24]	; (801469c <vTaskDelay+0x64>)
 8014682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014686:	601a      	str	r2, [r3, #0]
 8014688:	f3bf 8f4f 	dsb	sy
 801468c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014690:	bf00      	nop
 8014692:	3710      	adds	r7, #16
 8014694:	46bd      	mov	sp, r7
 8014696:	bd80      	pop	{r7, pc}
 8014698:	20005dd8 	.word	0x20005dd8
 801469c:	e000ed04 	.word	0xe000ed04

080146a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	b08a      	sub	sp, #40	; 0x28
 80146a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80146a6:	2300      	movs	r3, #0
 80146a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80146aa:	2300      	movs	r3, #0
 80146ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80146ae:	463a      	mov	r2, r7
 80146b0:	1d39      	adds	r1, r7, #4
 80146b2:	f107 0308 	add.w	r3, r7, #8
 80146b6:	4618      	mov	r0, r3
 80146b8:	f7fe fbc6 	bl	8012e48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80146bc:	6839      	ldr	r1, [r7, #0]
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	68ba      	ldr	r2, [r7, #8]
 80146c2:	9202      	str	r2, [sp, #8]
 80146c4:	9301      	str	r3, [sp, #4]
 80146c6:	2300      	movs	r3, #0
 80146c8:	9300      	str	r3, [sp, #0]
 80146ca:	2300      	movs	r3, #0
 80146cc:	460a      	mov	r2, r1
 80146ce:	4921      	ldr	r1, [pc, #132]	; (8014754 <vTaskStartScheduler+0xb4>)
 80146d0:	4821      	ldr	r0, [pc, #132]	; (8014758 <vTaskStartScheduler+0xb8>)
 80146d2:	f7ff fe0f 	bl	80142f4 <xTaskCreateStatic>
 80146d6:	4603      	mov	r3, r0
 80146d8:	4a20      	ldr	r2, [pc, #128]	; (801475c <vTaskStartScheduler+0xbc>)
 80146da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80146dc:	4b1f      	ldr	r3, [pc, #124]	; (801475c <vTaskStartScheduler+0xbc>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d002      	beq.n	80146ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80146e4:	2301      	movs	r3, #1
 80146e6:	617b      	str	r3, [r7, #20]
 80146e8:	e001      	b.n	80146ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80146ea:	2300      	movs	r3, #0
 80146ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80146ee:	697b      	ldr	r3, [r7, #20]
 80146f0:	2b01      	cmp	r3, #1
 80146f2:	d102      	bne.n	80146fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80146f4:	f000 fec0 	bl	8015478 <xTimerCreateTimerTask>
 80146f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80146fa:	697b      	ldr	r3, [r7, #20]
 80146fc:	2b01      	cmp	r3, #1
 80146fe:	d116      	bne.n	801472e <vTaskStartScheduler+0x8e>
	__asm volatile
 8014700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014704:	f383 8811 	msr	BASEPRI, r3
 8014708:	f3bf 8f6f 	isb	sy
 801470c:	f3bf 8f4f 	dsb	sy
 8014710:	613b      	str	r3, [r7, #16]
}
 8014712:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014714:	4b12      	ldr	r3, [pc, #72]	; (8014760 <vTaskStartScheduler+0xc0>)
 8014716:	f04f 32ff 	mov.w	r2, #4294967295
 801471a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801471c:	4b11      	ldr	r3, [pc, #68]	; (8014764 <vTaskStartScheduler+0xc4>)
 801471e:	2201      	movs	r2, #1
 8014720:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014722:	4b11      	ldr	r3, [pc, #68]	; (8014768 <vTaskStartScheduler+0xc8>)
 8014724:	2200      	movs	r2, #0
 8014726:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014728:	f001 fb5a 	bl	8015de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801472c:	e00e      	b.n	801474c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014734:	d10a      	bne.n	801474c <vTaskStartScheduler+0xac>
	__asm volatile
 8014736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801473a:	f383 8811 	msr	BASEPRI, r3
 801473e:	f3bf 8f6f 	isb	sy
 8014742:	f3bf 8f4f 	dsb	sy
 8014746:	60fb      	str	r3, [r7, #12]
}
 8014748:	bf00      	nop
 801474a:	e7fe      	b.n	801474a <vTaskStartScheduler+0xaa>
}
 801474c:	bf00      	nop
 801474e:	3718      	adds	r7, #24
 8014750:	46bd      	mov	sp, r7
 8014752:	bd80      	pop	{r7, pc}
 8014754:	0801c3b8 	.word	0x0801c3b8
 8014758:	08014ec1 	.word	0x08014ec1
 801475c:	20005dd4 	.word	0x20005dd4
 8014760:	20005dd0 	.word	0x20005dd0
 8014764:	20005dbc 	.word	0x20005dbc
 8014768:	20005db4 	.word	0x20005db4

0801476c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801476c:	b480      	push	{r7}
 801476e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014770:	4b04      	ldr	r3, [pc, #16]	; (8014784 <vTaskSuspendAll+0x18>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	3301      	adds	r3, #1
 8014776:	4a03      	ldr	r2, [pc, #12]	; (8014784 <vTaskSuspendAll+0x18>)
 8014778:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801477a:	bf00      	nop
 801477c:	46bd      	mov	sp, r7
 801477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014782:	4770      	bx	lr
 8014784:	20005dd8 	.word	0x20005dd8

08014788 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b084      	sub	sp, #16
 801478c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801478e:	2300      	movs	r3, #0
 8014790:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014792:	2300      	movs	r3, #0
 8014794:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014796:	4b42      	ldr	r3, [pc, #264]	; (80148a0 <xTaskResumeAll+0x118>)
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d10a      	bne.n	80147b4 <xTaskResumeAll+0x2c>
	__asm volatile
 801479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147a2:	f383 8811 	msr	BASEPRI, r3
 80147a6:	f3bf 8f6f 	isb	sy
 80147aa:	f3bf 8f4f 	dsb	sy
 80147ae:	603b      	str	r3, [r7, #0]
}
 80147b0:	bf00      	nop
 80147b2:	e7fe      	b.n	80147b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80147b4:	f001 fbb6 	bl	8015f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80147b8:	4b39      	ldr	r3, [pc, #228]	; (80148a0 <xTaskResumeAll+0x118>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	3b01      	subs	r3, #1
 80147be:	4a38      	ldr	r2, [pc, #224]	; (80148a0 <xTaskResumeAll+0x118>)
 80147c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80147c2:	4b37      	ldr	r3, [pc, #220]	; (80148a0 <xTaskResumeAll+0x118>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d162      	bne.n	8014890 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80147ca:	4b36      	ldr	r3, [pc, #216]	; (80148a4 <xTaskResumeAll+0x11c>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d05e      	beq.n	8014890 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80147d2:	e02f      	b.n	8014834 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147d4:	4b34      	ldr	r3, [pc, #208]	; (80148a8 <xTaskResumeAll+0x120>)
 80147d6:	68db      	ldr	r3, [r3, #12]
 80147d8:	68db      	ldr	r3, [r3, #12]
 80147da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	3318      	adds	r3, #24
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7fe fddd 	bl	80133a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	3304      	adds	r3, #4
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7fe fdd8 	bl	80133a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147f4:	4b2d      	ldr	r3, [pc, #180]	; (80148ac <xTaskResumeAll+0x124>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	429a      	cmp	r2, r3
 80147fa:	d903      	bls.n	8014804 <xTaskResumeAll+0x7c>
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014800:	4a2a      	ldr	r2, [pc, #168]	; (80148ac <xTaskResumeAll+0x124>)
 8014802:	6013      	str	r3, [r2, #0]
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014808:	4613      	mov	r3, r2
 801480a:	009b      	lsls	r3, r3, #2
 801480c:	4413      	add	r3, r2
 801480e:	009b      	lsls	r3, r3, #2
 8014810:	4a27      	ldr	r2, [pc, #156]	; (80148b0 <xTaskResumeAll+0x128>)
 8014812:	441a      	add	r2, r3
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	3304      	adds	r3, #4
 8014818:	4619      	mov	r1, r3
 801481a:	4610      	mov	r0, r2
 801481c:	f7fe fd63 	bl	80132e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014824:	4b23      	ldr	r3, [pc, #140]	; (80148b4 <xTaskResumeAll+0x12c>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801482a:	429a      	cmp	r2, r3
 801482c:	d302      	bcc.n	8014834 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801482e:	4b22      	ldr	r3, [pc, #136]	; (80148b8 <xTaskResumeAll+0x130>)
 8014830:	2201      	movs	r2, #1
 8014832:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014834:	4b1c      	ldr	r3, [pc, #112]	; (80148a8 <xTaskResumeAll+0x120>)
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d1cb      	bne.n	80147d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d001      	beq.n	8014846 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014842:	f000 fbf3 	bl	801502c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014846:	4b1d      	ldr	r3, [pc, #116]	; (80148bc <xTaskResumeAll+0x134>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d010      	beq.n	8014874 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014852:	f000 f847 	bl	80148e4 <xTaskIncrementTick>
 8014856:	4603      	mov	r3, r0
 8014858:	2b00      	cmp	r3, #0
 801485a:	d002      	beq.n	8014862 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801485c:	4b16      	ldr	r3, [pc, #88]	; (80148b8 <xTaskResumeAll+0x130>)
 801485e:	2201      	movs	r2, #1
 8014860:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	3b01      	subs	r3, #1
 8014866:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d1f1      	bne.n	8014852 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801486e:	4b13      	ldr	r3, [pc, #76]	; (80148bc <xTaskResumeAll+0x134>)
 8014870:	2200      	movs	r2, #0
 8014872:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014874:	4b10      	ldr	r3, [pc, #64]	; (80148b8 <xTaskResumeAll+0x130>)
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d009      	beq.n	8014890 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801487c:	2301      	movs	r3, #1
 801487e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014880:	4b0f      	ldr	r3, [pc, #60]	; (80148c0 <xTaskResumeAll+0x138>)
 8014882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014886:	601a      	str	r2, [r3, #0]
 8014888:	f3bf 8f4f 	dsb	sy
 801488c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014890:	f001 fb78 	bl	8015f84 <vPortExitCritical>

	return xAlreadyYielded;
 8014894:	68bb      	ldr	r3, [r7, #8]
}
 8014896:	4618      	mov	r0, r3
 8014898:	3710      	adds	r7, #16
 801489a:	46bd      	mov	sp, r7
 801489c:	bd80      	pop	{r7, pc}
 801489e:	bf00      	nop
 80148a0:	20005dd8 	.word	0x20005dd8
 80148a4:	20005db0 	.word	0x20005db0
 80148a8:	20005d70 	.word	0x20005d70
 80148ac:	20005db8 	.word	0x20005db8
 80148b0:	200058e0 	.word	0x200058e0
 80148b4:	200058dc 	.word	0x200058dc
 80148b8:	20005dc4 	.word	0x20005dc4
 80148bc:	20005dc0 	.word	0x20005dc0
 80148c0:	e000ed04 	.word	0xe000ed04

080148c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80148c4:	b480      	push	{r7}
 80148c6:	b083      	sub	sp, #12
 80148c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80148ca:	4b05      	ldr	r3, [pc, #20]	; (80148e0 <xTaskGetTickCount+0x1c>)
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80148d0:	687b      	ldr	r3, [r7, #4]
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	370c      	adds	r7, #12
 80148d6:	46bd      	mov	sp, r7
 80148d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148dc:	4770      	bx	lr
 80148de:	bf00      	nop
 80148e0:	20005db4 	.word	0x20005db4

080148e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b086      	sub	sp, #24
 80148e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80148ea:	2300      	movs	r3, #0
 80148ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80148ee:	4b4f      	ldr	r3, [pc, #316]	; (8014a2c <xTaskIncrementTick+0x148>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	f040 808f 	bne.w	8014a16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80148f8:	4b4d      	ldr	r3, [pc, #308]	; (8014a30 <xTaskIncrementTick+0x14c>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	3301      	adds	r3, #1
 80148fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014900:	4a4b      	ldr	r2, [pc, #300]	; (8014a30 <xTaskIncrementTick+0x14c>)
 8014902:	693b      	ldr	r3, [r7, #16]
 8014904:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014906:	693b      	ldr	r3, [r7, #16]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d120      	bne.n	801494e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801490c:	4b49      	ldr	r3, [pc, #292]	; (8014a34 <xTaskIncrementTick+0x150>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d00a      	beq.n	801492c <xTaskIncrementTick+0x48>
	__asm volatile
 8014916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801491a:	f383 8811 	msr	BASEPRI, r3
 801491e:	f3bf 8f6f 	isb	sy
 8014922:	f3bf 8f4f 	dsb	sy
 8014926:	603b      	str	r3, [r7, #0]
}
 8014928:	bf00      	nop
 801492a:	e7fe      	b.n	801492a <xTaskIncrementTick+0x46>
 801492c:	4b41      	ldr	r3, [pc, #260]	; (8014a34 <xTaskIncrementTick+0x150>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	60fb      	str	r3, [r7, #12]
 8014932:	4b41      	ldr	r3, [pc, #260]	; (8014a38 <xTaskIncrementTick+0x154>)
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	4a3f      	ldr	r2, [pc, #252]	; (8014a34 <xTaskIncrementTick+0x150>)
 8014938:	6013      	str	r3, [r2, #0]
 801493a:	4a3f      	ldr	r2, [pc, #252]	; (8014a38 <xTaskIncrementTick+0x154>)
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	6013      	str	r3, [r2, #0]
 8014940:	4b3e      	ldr	r3, [pc, #248]	; (8014a3c <xTaskIncrementTick+0x158>)
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	3301      	adds	r3, #1
 8014946:	4a3d      	ldr	r2, [pc, #244]	; (8014a3c <xTaskIncrementTick+0x158>)
 8014948:	6013      	str	r3, [r2, #0]
 801494a:	f000 fb6f 	bl	801502c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801494e:	4b3c      	ldr	r3, [pc, #240]	; (8014a40 <xTaskIncrementTick+0x15c>)
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	693a      	ldr	r2, [r7, #16]
 8014954:	429a      	cmp	r2, r3
 8014956:	d349      	bcc.n	80149ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014958:	4b36      	ldr	r3, [pc, #216]	; (8014a34 <xTaskIncrementTick+0x150>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d104      	bne.n	801496c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014962:	4b37      	ldr	r3, [pc, #220]	; (8014a40 <xTaskIncrementTick+0x15c>)
 8014964:	f04f 32ff 	mov.w	r2, #4294967295
 8014968:	601a      	str	r2, [r3, #0]
					break;
 801496a:	e03f      	b.n	80149ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801496c:	4b31      	ldr	r3, [pc, #196]	; (8014a34 <xTaskIncrementTick+0x150>)
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	68db      	ldr	r3, [r3, #12]
 8014972:	68db      	ldr	r3, [r3, #12]
 8014974:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014976:	68bb      	ldr	r3, [r7, #8]
 8014978:	685b      	ldr	r3, [r3, #4]
 801497a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801497c:	693a      	ldr	r2, [r7, #16]
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	429a      	cmp	r2, r3
 8014982:	d203      	bcs.n	801498c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014984:	4a2e      	ldr	r2, [pc, #184]	; (8014a40 <xTaskIncrementTick+0x15c>)
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801498a:	e02f      	b.n	80149ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801498c:	68bb      	ldr	r3, [r7, #8]
 801498e:	3304      	adds	r3, #4
 8014990:	4618      	mov	r0, r3
 8014992:	f7fe fd05 	bl	80133a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801499a:	2b00      	cmp	r3, #0
 801499c:	d004      	beq.n	80149a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	3318      	adds	r3, #24
 80149a2:	4618      	mov	r0, r3
 80149a4:	f7fe fcfc 	bl	80133a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149ac:	4b25      	ldr	r3, [pc, #148]	; (8014a44 <xTaskIncrementTick+0x160>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	429a      	cmp	r2, r3
 80149b2:	d903      	bls.n	80149bc <xTaskIncrementTick+0xd8>
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149b8:	4a22      	ldr	r2, [pc, #136]	; (8014a44 <xTaskIncrementTick+0x160>)
 80149ba:	6013      	str	r3, [r2, #0]
 80149bc:	68bb      	ldr	r3, [r7, #8]
 80149be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149c0:	4613      	mov	r3, r2
 80149c2:	009b      	lsls	r3, r3, #2
 80149c4:	4413      	add	r3, r2
 80149c6:	009b      	lsls	r3, r3, #2
 80149c8:	4a1f      	ldr	r2, [pc, #124]	; (8014a48 <xTaskIncrementTick+0x164>)
 80149ca:	441a      	add	r2, r3
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	3304      	adds	r3, #4
 80149d0:	4619      	mov	r1, r3
 80149d2:	4610      	mov	r0, r2
 80149d4:	f7fe fc87 	bl	80132e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80149d8:	68bb      	ldr	r3, [r7, #8]
 80149da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149dc:	4b1b      	ldr	r3, [pc, #108]	; (8014a4c <xTaskIncrementTick+0x168>)
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149e2:	429a      	cmp	r2, r3
 80149e4:	d3b8      	bcc.n	8014958 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80149e6:	2301      	movs	r3, #1
 80149e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80149ea:	e7b5      	b.n	8014958 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80149ec:	4b17      	ldr	r3, [pc, #92]	; (8014a4c <xTaskIncrementTick+0x168>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149f2:	4915      	ldr	r1, [pc, #84]	; (8014a48 <xTaskIncrementTick+0x164>)
 80149f4:	4613      	mov	r3, r2
 80149f6:	009b      	lsls	r3, r3, #2
 80149f8:	4413      	add	r3, r2
 80149fa:	009b      	lsls	r3, r3, #2
 80149fc:	440b      	add	r3, r1
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	2b01      	cmp	r3, #1
 8014a02:	d901      	bls.n	8014a08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014a04:	2301      	movs	r3, #1
 8014a06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014a08:	4b11      	ldr	r3, [pc, #68]	; (8014a50 <xTaskIncrementTick+0x16c>)
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d007      	beq.n	8014a20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8014a10:	2301      	movs	r3, #1
 8014a12:	617b      	str	r3, [r7, #20]
 8014a14:	e004      	b.n	8014a20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014a16:	4b0f      	ldr	r3, [pc, #60]	; (8014a54 <xTaskIncrementTick+0x170>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	3301      	adds	r3, #1
 8014a1c:	4a0d      	ldr	r2, [pc, #52]	; (8014a54 <xTaskIncrementTick+0x170>)
 8014a1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014a20:	697b      	ldr	r3, [r7, #20]
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	3718      	adds	r7, #24
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}
 8014a2a:	bf00      	nop
 8014a2c:	20005dd8 	.word	0x20005dd8
 8014a30:	20005db4 	.word	0x20005db4
 8014a34:	20005d68 	.word	0x20005d68
 8014a38:	20005d6c 	.word	0x20005d6c
 8014a3c:	20005dc8 	.word	0x20005dc8
 8014a40:	20005dd0 	.word	0x20005dd0
 8014a44:	20005db8 	.word	0x20005db8
 8014a48:	200058e0 	.word	0x200058e0
 8014a4c:	200058dc 	.word	0x200058dc
 8014a50:	20005dc4 	.word	0x20005dc4
 8014a54:	20005dc0 	.word	0x20005dc0

08014a58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014a58:	b480      	push	{r7}
 8014a5a:	b085      	sub	sp, #20
 8014a5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014a5e:	4b28      	ldr	r3, [pc, #160]	; (8014b00 <vTaskSwitchContext+0xa8>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d003      	beq.n	8014a6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014a66:	4b27      	ldr	r3, [pc, #156]	; (8014b04 <vTaskSwitchContext+0xac>)
 8014a68:	2201      	movs	r2, #1
 8014a6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014a6c:	e041      	b.n	8014af2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014a6e:	4b25      	ldr	r3, [pc, #148]	; (8014b04 <vTaskSwitchContext+0xac>)
 8014a70:	2200      	movs	r2, #0
 8014a72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a74:	4b24      	ldr	r3, [pc, #144]	; (8014b08 <vTaskSwitchContext+0xb0>)
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	60fb      	str	r3, [r7, #12]
 8014a7a:	e010      	b.n	8014a9e <vTaskSwitchContext+0x46>
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d10a      	bne.n	8014a98 <vTaskSwitchContext+0x40>
	__asm volatile
 8014a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a86:	f383 8811 	msr	BASEPRI, r3
 8014a8a:	f3bf 8f6f 	isb	sy
 8014a8e:	f3bf 8f4f 	dsb	sy
 8014a92:	607b      	str	r3, [r7, #4]
}
 8014a94:	bf00      	nop
 8014a96:	e7fe      	b.n	8014a96 <vTaskSwitchContext+0x3e>
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	3b01      	subs	r3, #1
 8014a9c:	60fb      	str	r3, [r7, #12]
 8014a9e:	491b      	ldr	r1, [pc, #108]	; (8014b0c <vTaskSwitchContext+0xb4>)
 8014aa0:	68fa      	ldr	r2, [r7, #12]
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	009b      	lsls	r3, r3, #2
 8014aa6:	4413      	add	r3, r2
 8014aa8:	009b      	lsls	r3, r3, #2
 8014aaa:	440b      	add	r3, r1
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d0e4      	beq.n	8014a7c <vTaskSwitchContext+0x24>
 8014ab2:	68fa      	ldr	r2, [r7, #12]
 8014ab4:	4613      	mov	r3, r2
 8014ab6:	009b      	lsls	r3, r3, #2
 8014ab8:	4413      	add	r3, r2
 8014aba:	009b      	lsls	r3, r3, #2
 8014abc:	4a13      	ldr	r2, [pc, #76]	; (8014b0c <vTaskSwitchContext+0xb4>)
 8014abe:	4413      	add	r3, r2
 8014ac0:	60bb      	str	r3, [r7, #8]
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	685b      	ldr	r3, [r3, #4]
 8014ac6:	685a      	ldr	r2, [r3, #4]
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	605a      	str	r2, [r3, #4]
 8014acc:	68bb      	ldr	r3, [r7, #8]
 8014ace:	685a      	ldr	r2, [r3, #4]
 8014ad0:	68bb      	ldr	r3, [r7, #8]
 8014ad2:	3308      	adds	r3, #8
 8014ad4:	429a      	cmp	r2, r3
 8014ad6:	d104      	bne.n	8014ae2 <vTaskSwitchContext+0x8a>
 8014ad8:	68bb      	ldr	r3, [r7, #8]
 8014ada:	685b      	ldr	r3, [r3, #4]
 8014adc:	685a      	ldr	r2, [r3, #4]
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	605a      	str	r2, [r3, #4]
 8014ae2:	68bb      	ldr	r3, [r7, #8]
 8014ae4:	685b      	ldr	r3, [r3, #4]
 8014ae6:	68db      	ldr	r3, [r3, #12]
 8014ae8:	4a09      	ldr	r2, [pc, #36]	; (8014b10 <vTaskSwitchContext+0xb8>)
 8014aea:	6013      	str	r3, [r2, #0]
 8014aec:	4a06      	ldr	r2, [pc, #24]	; (8014b08 <vTaskSwitchContext+0xb0>)
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	6013      	str	r3, [r2, #0]
}
 8014af2:	bf00      	nop
 8014af4:	3714      	adds	r7, #20
 8014af6:	46bd      	mov	sp, r7
 8014af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afc:	4770      	bx	lr
 8014afe:	bf00      	nop
 8014b00:	20005dd8 	.word	0x20005dd8
 8014b04:	20005dc4 	.word	0x20005dc4
 8014b08:	20005db8 	.word	0x20005db8
 8014b0c:	200058e0 	.word	0x200058e0
 8014b10:	200058dc 	.word	0x200058dc

08014b14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b084      	sub	sp, #16
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d10a      	bne.n	8014b3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b28:	f383 8811 	msr	BASEPRI, r3
 8014b2c:	f3bf 8f6f 	isb	sy
 8014b30:	f3bf 8f4f 	dsb	sy
 8014b34:	60fb      	str	r3, [r7, #12]
}
 8014b36:	bf00      	nop
 8014b38:	e7fe      	b.n	8014b38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014b3a:	4b07      	ldr	r3, [pc, #28]	; (8014b58 <vTaskPlaceOnEventList+0x44>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	3318      	adds	r3, #24
 8014b40:	4619      	mov	r1, r3
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f7fe fbf3 	bl	801332e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014b48:	2101      	movs	r1, #1
 8014b4a:	6838      	ldr	r0, [r7, #0]
 8014b4c:	f000 fc40 	bl	80153d0 <prvAddCurrentTaskToDelayedList>
}
 8014b50:	bf00      	nop
 8014b52:	3710      	adds	r7, #16
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd80      	pop	{r7, pc}
 8014b58:	200058dc 	.word	0x200058dc

08014b5c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b086      	sub	sp, #24
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	60f8      	str	r0, [r7, #12]
 8014b64:	60b9      	str	r1, [r7, #8]
 8014b66:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d10a      	bne.n	8014b84 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b72:	f383 8811 	msr	BASEPRI, r3
 8014b76:	f3bf 8f6f 	isb	sy
 8014b7a:	f3bf 8f4f 	dsb	sy
 8014b7e:	617b      	str	r3, [r7, #20]
}
 8014b80:	bf00      	nop
 8014b82:	e7fe      	b.n	8014b82 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014b84:	4b11      	ldr	r3, [pc, #68]	; (8014bcc <vTaskPlaceOnUnorderedEventList+0x70>)
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d10a      	bne.n	8014ba2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b90:	f383 8811 	msr	BASEPRI, r3
 8014b94:	f3bf 8f6f 	isb	sy
 8014b98:	f3bf 8f4f 	dsb	sy
 8014b9c:	613b      	str	r3, [r7, #16]
}
 8014b9e:	bf00      	nop
 8014ba0:	e7fe      	b.n	8014ba0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014ba2:	4b0b      	ldr	r3, [pc, #44]	; (8014bd0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	68ba      	ldr	r2, [r7, #8]
 8014ba8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014bac:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014bae:	4b08      	ldr	r3, [pc, #32]	; (8014bd0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	3318      	adds	r3, #24
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	68f8      	ldr	r0, [r7, #12]
 8014bb8:	f7fe fb95 	bl	80132e6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014bbc:	2101      	movs	r1, #1
 8014bbe:	6878      	ldr	r0, [r7, #4]
 8014bc0:	f000 fc06 	bl	80153d0 <prvAddCurrentTaskToDelayedList>
}
 8014bc4:	bf00      	nop
 8014bc6:	3718      	adds	r7, #24
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}
 8014bcc:	20005dd8 	.word	0x20005dd8
 8014bd0:	200058dc 	.word	0x200058dc

08014bd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b086      	sub	sp, #24
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	60f8      	str	r0, [r7, #12]
 8014bdc:	60b9      	str	r1, [r7, #8]
 8014bde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d10a      	bne.n	8014bfc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bea:	f383 8811 	msr	BASEPRI, r3
 8014bee:	f3bf 8f6f 	isb	sy
 8014bf2:	f3bf 8f4f 	dsb	sy
 8014bf6:	617b      	str	r3, [r7, #20]
}
 8014bf8:	bf00      	nop
 8014bfa:	e7fe      	b.n	8014bfa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014bfc:	4b0a      	ldr	r3, [pc, #40]	; (8014c28 <vTaskPlaceOnEventListRestricted+0x54>)
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	3318      	adds	r3, #24
 8014c02:	4619      	mov	r1, r3
 8014c04:	68f8      	ldr	r0, [r7, #12]
 8014c06:	f7fe fb6e 	bl	80132e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d002      	beq.n	8014c16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014c10:	f04f 33ff 	mov.w	r3, #4294967295
 8014c14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014c16:	6879      	ldr	r1, [r7, #4]
 8014c18:	68b8      	ldr	r0, [r7, #8]
 8014c1a:	f000 fbd9 	bl	80153d0 <prvAddCurrentTaskToDelayedList>
	}
 8014c1e:	bf00      	nop
 8014c20:	3718      	adds	r7, #24
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}
 8014c26:	bf00      	nop
 8014c28:	200058dc 	.word	0x200058dc

08014c2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b086      	sub	sp, #24
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	68db      	ldr	r3, [r3, #12]
 8014c38:	68db      	ldr	r3, [r3, #12]
 8014c3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014c3c:	693b      	ldr	r3, [r7, #16]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d10a      	bne.n	8014c58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c46:	f383 8811 	msr	BASEPRI, r3
 8014c4a:	f3bf 8f6f 	isb	sy
 8014c4e:	f3bf 8f4f 	dsb	sy
 8014c52:	60fb      	str	r3, [r7, #12]
}
 8014c54:	bf00      	nop
 8014c56:	e7fe      	b.n	8014c56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014c58:	693b      	ldr	r3, [r7, #16]
 8014c5a:	3318      	adds	r3, #24
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	f7fe fb9f 	bl	80133a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c62:	4b1e      	ldr	r3, [pc, #120]	; (8014cdc <xTaskRemoveFromEventList+0xb0>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d11d      	bne.n	8014ca6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014c6a:	693b      	ldr	r3, [r7, #16]
 8014c6c:	3304      	adds	r3, #4
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f7fe fb96 	bl	80133a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c78:	4b19      	ldr	r3, [pc, #100]	; (8014ce0 <xTaskRemoveFromEventList+0xb4>)
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	d903      	bls.n	8014c88 <xTaskRemoveFromEventList+0x5c>
 8014c80:	693b      	ldr	r3, [r7, #16]
 8014c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c84:	4a16      	ldr	r2, [pc, #88]	; (8014ce0 <xTaskRemoveFromEventList+0xb4>)
 8014c86:	6013      	str	r3, [r2, #0]
 8014c88:	693b      	ldr	r3, [r7, #16]
 8014c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c8c:	4613      	mov	r3, r2
 8014c8e:	009b      	lsls	r3, r3, #2
 8014c90:	4413      	add	r3, r2
 8014c92:	009b      	lsls	r3, r3, #2
 8014c94:	4a13      	ldr	r2, [pc, #76]	; (8014ce4 <xTaskRemoveFromEventList+0xb8>)
 8014c96:	441a      	add	r2, r3
 8014c98:	693b      	ldr	r3, [r7, #16]
 8014c9a:	3304      	adds	r3, #4
 8014c9c:	4619      	mov	r1, r3
 8014c9e:	4610      	mov	r0, r2
 8014ca0:	f7fe fb21 	bl	80132e6 <vListInsertEnd>
 8014ca4:	e005      	b.n	8014cb2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014ca6:	693b      	ldr	r3, [r7, #16]
 8014ca8:	3318      	adds	r3, #24
 8014caa:	4619      	mov	r1, r3
 8014cac:	480e      	ldr	r0, [pc, #56]	; (8014ce8 <xTaskRemoveFromEventList+0xbc>)
 8014cae:	f7fe fb1a 	bl	80132e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014cb2:	693b      	ldr	r3, [r7, #16]
 8014cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cb6:	4b0d      	ldr	r3, [pc, #52]	; (8014cec <xTaskRemoveFromEventList+0xc0>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cbc:	429a      	cmp	r2, r3
 8014cbe:	d905      	bls.n	8014ccc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014cc0:	2301      	movs	r3, #1
 8014cc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014cc4:	4b0a      	ldr	r3, [pc, #40]	; (8014cf0 <xTaskRemoveFromEventList+0xc4>)
 8014cc6:	2201      	movs	r2, #1
 8014cc8:	601a      	str	r2, [r3, #0]
 8014cca:	e001      	b.n	8014cd0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014ccc:	2300      	movs	r3, #0
 8014cce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014cd0:	697b      	ldr	r3, [r7, #20]
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	3718      	adds	r7, #24
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}
 8014cda:	bf00      	nop
 8014cdc:	20005dd8 	.word	0x20005dd8
 8014ce0:	20005db8 	.word	0x20005db8
 8014ce4:	200058e0 	.word	0x200058e0
 8014ce8:	20005d70 	.word	0x20005d70
 8014cec:	200058dc 	.word	0x200058dc
 8014cf0:	20005dc4 	.word	0x20005dc4

08014cf4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b086      	sub	sp, #24
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
 8014cfc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014cfe:	4b29      	ldr	r3, [pc, #164]	; (8014da4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d10a      	bne.n	8014d1c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d0a:	f383 8811 	msr	BASEPRI, r3
 8014d0e:	f3bf 8f6f 	isb	sy
 8014d12:	f3bf 8f4f 	dsb	sy
 8014d16:	613b      	str	r3, [r7, #16]
}
 8014d18:	bf00      	nop
 8014d1a:	e7fe      	b.n	8014d1a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	68db      	ldr	r3, [r3, #12]
 8014d2a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d10a      	bne.n	8014d48 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d36:	f383 8811 	msr	BASEPRI, r3
 8014d3a:	f3bf 8f6f 	isb	sy
 8014d3e:	f3bf 8f4f 	dsb	sy
 8014d42:	60fb      	str	r3, [r7, #12]
}
 8014d44:	bf00      	nop
 8014d46:	e7fe      	b.n	8014d46 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	f7fe fb29 	bl	80133a0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	3304      	adds	r3, #4
 8014d52:	4618      	mov	r0, r3
 8014d54:	f7fe fb24 	bl	80133a0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d5c:	4b12      	ldr	r3, [pc, #72]	; (8014da8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	429a      	cmp	r2, r3
 8014d62:	d903      	bls.n	8014d6c <vTaskRemoveFromUnorderedEventList+0x78>
 8014d64:	697b      	ldr	r3, [r7, #20]
 8014d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d68:	4a0f      	ldr	r2, [pc, #60]	; (8014da8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014d6a:	6013      	str	r3, [r2, #0]
 8014d6c:	697b      	ldr	r3, [r7, #20]
 8014d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d70:	4613      	mov	r3, r2
 8014d72:	009b      	lsls	r3, r3, #2
 8014d74:	4413      	add	r3, r2
 8014d76:	009b      	lsls	r3, r3, #2
 8014d78:	4a0c      	ldr	r2, [pc, #48]	; (8014dac <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014d7a:	441a      	add	r2, r3
 8014d7c:	697b      	ldr	r3, [r7, #20]
 8014d7e:	3304      	adds	r3, #4
 8014d80:	4619      	mov	r1, r3
 8014d82:	4610      	mov	r0, r2
 8014d84:	f7fe faaf 	bl	80132e6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d8c:	4b08      	ldr	r3, [pc, #32]	; (8014db0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d92:	429a      	cmp	r2, r3
 8014d94:	d902      	bls.n	8014d9c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014d96:	4b07      	ldr	r3, [pc, #28]	; (8014db4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014d98:	2201      	movs	r2, #1
 8014d9a:	601a      	str	r2, [r3, #0]
	}
}
 8014d9c:	bf00      	nop
 8014d9e:	3718      	adds	r7, #24
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}
 8014da4:	20005dd8 	.word	0x20005dd8
 8014da8:	20005db8 	.word	0x20005db8
 8014dac:	200058e0 	.word	0x200058e0
 8014db0:	200058dc 	.word	0x200058dc
 8014db4:	20005dc4 	.word	0x20005dc4

08014db8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014db8:	b480      	push	{r7}
 8014dba:	b083      	sub	sp, #12
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014dc0:	4b06      	ldr	r3, [pc, #24]	; (8014ddc <vTaskInternalSetTimeOutState+0x24>)
 8014dc2:	681a      	ldr	r2, [r3, #0]
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014dc8:	4b05      	ldr	r3, [pc, #20]	; (8014de0 <vTaskInternalSetTimeOutState+0x28>)
 8014dca:	681a      	ldr	r2, [r3, #0]
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	605a      	str	r2, [r3, #4]
}
 8014dd0:	bf00      	nop
 8014dd2:	370c      	adds	r7, #12
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dda:	4770      	bx	lr
 8014ddc:	20005dc8 	.word	0x20005dc8
 8014de0:	20005db4 	.word	0x20005db4

08014de4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b088      	sub	sp, #32
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d10a      	bne.n	8014e0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014df8:	f383 8811 	msr	BASEPRI, r3
 8014dfc:	f3bf 8f6f 	isb	sy
 8014e00:	f3bf 8f4f 	dsb	sy
 8014e04:	613b      	str	r3, [r7, #16]
}
 8014e06:	bf00      	nop
 8014e08:	e7fe      	b.n	8014e08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d10a      	bne.n	8014e26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e14:	f383 8811 	msr	BASEPRI, r3
 8014e18:	f3bf 8f6f 	isb	sy
 8014e1c:	f3bf 8f4f 	dsb	sy
 8014e20:	60fb      	str	r3, [r7, #12]
}
 8014e22:	bf00      	nop
 8014e24:	e7fe      	b.n	8014e24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014e26:	f001 f87d 	bl	8015f24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014e2a:	4b1d      	ldr	r3, [pc, #116]	; (8014ea0 <xTaskCheckForTimeOut+0xbc>)
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	685b      	ldr	r3, [r3, #4]
 8014e34:	69ba      	ldr	r2, [r7, #24]
 8014e36:	1ad3      	subs	r3, r2, r3
 8014e38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e42:	d102      	bne.n	8014e4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014e44:	2300      	movs	r3, #0
 8014e46:	61fb      	str	r3, [r7, #28]
 8014e48:	e023      	b.n	8014e92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	681a      	ldr	r2, [r3, #0]
 8014e4e:	4b15      	ldr	r3, [pc, #84]	; (8014ea4 <xTaskCheckForTimeOut+0xc0>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	429a      	cmp	r2, r3
 8014e54:	d007      	beq.n	8014e66 <xTaskCheckForTimeOut+0x82>
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	685b      	ldr	r3, [r3, #4]
 8014e5a:	69ba      	ldr	r2, [r7, #24]
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	d302      	bcc.n	8014e66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014e60:	2301      	movs	r3, #1
 8014e62:	61fb      	str	r3, [r7, #28]
 8014e64:	e015      	b.n	8014e92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	697a      	ldr	r2, [r7, #20]
 8014e6c:	429a      	cmp	r2, r3
 8014e6e:	d20b      	bcs.n	8014e88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014e70:	683b      	ldr	r3, [r7, #0]
 8014e72:	681a      	ldr	r2, [r3, #0]
 8014e74:	697b      	ldr	r3, [r7, #20]
 8014e76:	1ad2      	subs	r2, r2, r3
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f7ff ff9b 	bl	8014db8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014e82:	2300      	movs	r3, #0
 8014e84:	61fb      	str	r3, [r7, #28]
 8014e86:	e004      	b.n	8014e92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014e8e:	2301      	movs	r3, #1
 8014e90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014e92:	f001 f877 	bl	8015f84 <vPortExitCritical>

	return xReturn;
 8014e96:	69fb      	ldr	r3, [r7, #28]
}
 8014e98:	4618      	mov	r0, r3
 8014e9a:	3720      	adds	r7, #32
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bd80      	pop	{r7, pc}
 8014ea0:	20005db4 	.word	0x20005db4
 8014ea4:	20005dc8 	.word	0x20005dc8

08014ea8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014ea8:	b480      	push	{r7}
 8014eaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014eac:	4b03      	ldr	r3, [pc, #12]	; (8014ebc <vTaskMissedYield+0x14>)
 8014eae:	2201      	movs	r2, #1
 8014eb0:	601a      	str	r2, [r3, #0]
}
 8014eb2:	bf00      	nop
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eba:	4770      	bx	lr
 8014ebc:	20005dc4 	.word	0x20005dc4

08014ec0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b082      	sub	sp, #8
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014ec8:	f000 f852 	bl	8014f70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014ecc:	4b06      	ldr	r3, [pc, #24]	; (8014ee8 <prvIdleTask+0x28>)
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	2b01      	cmp	r3, #1
 8014ed2:	d9f9      	bls.n	8014ec8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014ed4:	4b05      	ldr	r3, [pc, #20]	; (8014eec <prvIdleTask+0x2c>)
 8014ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014eda:	601a      	str	r2, [r3, #0]
 8014edc:	f3bf 8f4f 	dsb	sy
 8014ee0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014ee4:	e7f0      	b.n	8014ec8 <prvIdleTask+0x8>
 8014ee6:	bf00      	nop
 8014ee8:	200058e0 	.word	0x200058e0
 8014eec:	e000ed04 	.word	0xe000ed04

08014ef0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b082      	sub	sp, #8
 8014ef4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	607b      	str	r3, [r7, #4]
 8014efa:	e00c      	b.n	8014f16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014efc:	687a      	ldr	r2, [r7, #4]
 8014efe:	4613      	mov	r3, r2
 8014f00:	009b      	lsls	r3, r3, #2
 8014f02:	4413      	add	r3, r2
 8014f04:	009b      	lsls	r3, r3, #2
 8014f06:	4a12      	ldr	r2, [pc, #72]	; (8014f50 <prvInitialiseTaskLists+0x60>)
 8014f08:	4413      	add	r3, r2
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f7fe f9be 	bl	801328c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	3301      	adds	r3, #1
 8014f14:	607b      	str	r3, [r7, #4]
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	2b37      	cmp	r3, #55	; 0x37
 8014f1a:	d9ef      	bls.n	8014efc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014f1c:	480d      	ldr	r0, [pc, #52]	; (8014f54 <prvInitialiseTaskLists+0x64>)
 8014f1e:	f7fe f9b5 	bl	801328c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014f22:	480d      	ldr	r0, [pc, #52]	; (8014f58 <prvInitialiseTaskLists+0x68>)
 8014f24:	f7fe f9b2 	bl	801328c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014f28:	480c      	ldr	r0, [pc, #48]	; (8014f5c <prvInitialiseTaskLists+0x6c>)
 8014f2a:	f7fe f9af 	bl	801328c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014f2e:	480c      	ldr	r0, [pc, #48]	; (8014f60 <prvInitialiseTaskLists+0x70>)
 8014f30:	f7fe f9ac 	bl	801328c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014f34:	480b      	ldr	r0, [pc, #44]	; (8014f64 <prvInitialiseTaskLists+0x74>)
 8014f36:	f7fe f9a9 	bl	801328c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014f3a:	4b0b      	ldr	r3, [pc, #44]	; (8014f68 <prvInitialiseTaskLists+0x78>)
 8014f3c:	4a05      	ldr	r2, [pc, #20]	; (8014f54 <prvInitialiseTaskLists+0x64>)
 8014f3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014f40:	4b0a      	ldr	r3, [pc, #40]	; (8014f6c <prvInitialiseTaskLists+0x7c>)
 8014f42:	4a05      	ldr	r2, [pc, #20]	; (8014f58 <prvInitialiseTaskLists+0x68>)
 8014f44:	601a      	str	r2, [r3, #0]
}
 8014f46:	bf00      	nop
 8014f48:	3708      	adds	r7, #8
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd80      	pop	{r7, pc}
 8014f4e:	bf00      	nop
 8014f50:	200058e0 	.word	0x200058e0
 8014f54:	20005d40 	.word	0x20005d40
 8014f58:	20005d54 	.word	0x20005d54
 8014f5c:	20005d70 	.word	0x20005d70
 8014f60:	20005d84 	.word	0x20005d84
 8014f64:	20005d9c 	.word	0x20005d9c
 8014f68:	20005d68 	.word	0x20005d68
 8014f6c:	20005d6c 	.word	0x20005d6c

08014f70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b082      	sub	sp, #8
 8014f74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f76:	e019      	b.n	8014fac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014f78:	f000 ffd4 	bl	8015f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f7c:	4b10      	ldr	r3, [pc, #64]	; (8014fc0 <prvCheckTasksWaitingTermination+0x50>)
 8014f7e:	68db      	ldr	r3, [r3, #12]
 8014f80:	68db      	ldr	r3, [r3, #12]
 8014f82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	3304      	adds	r3, #4
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f7fe fa09 	bl	80133a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014f8e:	4b0d      	ldr	r3, [pc, #52]	; (8014fc4 <prvCheckTasksWaitingTermination+0x54>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	3b01      	subs	r3, #1
 8014f94:	4a0b      	ldr	r2, [pc, #44]	; (8014fc4 <prvCheckTasksWaitingTermination+0x54>)
 8014f96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014f98:	4b0b      	ldr	r3, [pc, #44]	; (8014fc8 <prvCheckTasksWaitingTermination+0x58>)
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	3b01      	subs	r3, #1
 8014f9e:	4a0a      	ldr	r2, [pc, #40]	; (8014fc8 <prvCheckTasksWaitingTermination+0x58>)
 8014fa0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014fa2:	f000 ffef 	bl	8015f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014fa6:	6878      	ldr	r0, [r7, #4]
 8014fa8:	f000 f810 	bl	8014fcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014fac:	4b06      	ldr	r3, [pc, #24]	; (8014fc8 <prvCheckTasksWaitingTermination+0x58>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d1e1      	bne.n	8014f78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014fb4:	bf00      	nop
 8014fb6:	bf00      	nop
 8014fb8:	3708      	adds	r7, #8
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	bd80      	pop	{r7, pc}
 8014fbe:	bf00      	nop
 8014fc0:	20005d84 	.word	0x20005d84
 8014fc4:	20005db0 	.word	0x20005db0
 8014fc8:	20005d98 	.word	0x20005d98

08014fcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b084      	sub	sp, #16
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d108      	bne.n	8014ff0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f001 f98c 	bl	8016300 <vPortFree>
				vPortFree( pxTCB );
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	f001 f989 	bl	8016300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014fee:	e018      	b.n	8015022 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8014ff6:	2b01      	cmp	r3, #1
 8014ff8:	d103      	bne.n	8015002 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f001 f980 	bl	8016300 <vPortFree>
	}
 8015000:	e00f      	b.n	8015022 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8015008:	2b02      	cmp	r3, #2
 801500a:	d00a      	beq.n	8015022 <prvDeleteTCB+0x56>
	__asm volatile
 801500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015010:	f383 8811 	msr	BASEPRI, r3
 8015014:	f3bf 8f6f 	isb	sy
 8015018:	f3bf 8f4f 	dsb	sy
 801501c:	60fb      	str	r3, [r7, #12]
}
 801501e:	bf00      	nop
 8015020:	e7fe      	b.n	8015020 <prvDeleteTCB+0x54>
	}
 8015022:	bf00      	nop
 8015024:	3710      	adds	r7, #16
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}
	...

0801502c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801502c:	b480      	push	{r7}
 801502e:	b083      	sub	sp, #12
 8015030:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015032:	4b0c      	ldr	r3, [pc, #48]	; (8015064 <prvResetNextTaskUnblockTime+0x38>)
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d104      	bne.n	8015046 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801503c:	4b0a      	ldr	r3, [pc, #40]	; (8015068 <prvResetNextTaskUnblockTime+0x3c>)
 801503e:	f04f 32ff 	mov.w	r2, #4294967295
 8015042:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015044:	e008      	b.n	8015058 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015046:	4b07      	ldr	r3, [pc, #28]	; (8015064 <prvResetNextTaskUnblockTime+0x38>)
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	68db      	ldr	r3, [r3, #12]
 801504c:	68db      	ldr	r3, [r3, #12]
 801504e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	685b      	ldr	r3, [r3, #4]
 8015054:	4a04      	ldr	r2, [pc, #16]	; (8015068 <prvResetNextTaskUnblockTime+0x3c>)
 8015056:	6013      	str	r3, [r2, #0]
}
 8015058:	bf00      	nop
 801505a:	370c      	adds	r7, #12
 801505c:	46bd      	mov	sp, r7
 801505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015062:	4770      	bx	lr
 8015064:	20005d68 	.word	0x20005d68
 8015068:	20005dd0 	.word	0x20005dd0

0801506c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801506c:	b480      	push	{r7}
 801506e:	b083      	sub	sp, #12
 8015070:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8015072:	4b05      	ldr	r3, [pc, #20]	; (8015088 <xTaskGetCurrentTaskHandle+0x1c>)
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	607b      	str	r3, [r7, #4]

		return xReturn;
 8015078:	687b      	ldr	r3, [r7, #4]
	}
 801507a:	4618      	mov	r0, r3
 801507c:	370c      	adds	r7, #12
 801507e:	46bd      	mov	sp, r7
 8015080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015084:	4770      	bx	lr
 8015086:	bf00      	nop
 8015088:	200058dc 	.word	0x200058dc

0801508c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801508c:	b480      	push	{r7}
 801508e:	b083      	sub	sp, #12
 8015090:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015092:	4b0b      	ldr	r3, [pc, #44]	; (80150c0 <xTaskGetSchedulerState+0x34>)
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d102      	bne.n	80150a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801509a:	2301      	movs	r3, #1
 801509c:	607b      	str	r3, [r7, #4]
 801509e:	e008      	b.n	80150b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80150a0:	4b08      	ldr	r3, [pc, #32]	; (80150c4 <xTaskGetSchedulerState+0x38>)
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d102      	bne.n	80150ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80150a8:	2302      	movs	r3, #2
 80150aa:	607b      	str	r3, [r7, #4]
 80150ac:	e001      	b.n	80150b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80150ae:	2300      	movs	r3, #0
 80150b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80150b2:	687b      	ldr	r3, [r7, #4]
	}
 80150b4:	4618      	mov	r0, r3
 80150b6:	370c      	adds	r7, #12
 80150b8:	46bd      	mov	sp, r7
 80150ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150be:	4770      	bx	lr
 80150c0:	20005dbc 	.word	0x20005dbc
 80150c4:	20005dd8 	.word	0x20005dd8

080150c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b084      	sub	sp, #16
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80150d4:	2300      	movs	r3, #0
 80150d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d051      	beq.n	8015182 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80150de:	68bb      	ldr	r3, [r7, #8]
 80150e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150e2:	4b2a      	ldr	r3, [pc, #168]	; (801518c <xTaskPriorityInherit+0xc4>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150e8:	429a      	cmp	r2, r3
 80150ea:	d241      	bcs.n	8015170 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80150ec:	68bb      	ldr	r3, [r7, #8]
 80150ee:	699b      	ldr	r3, [r3, #24]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	db06      	blt.n	8015102 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80150f4:	4b25      	ldr	r3, [pc, #148]	; (801518c <xTaskPriorityInherit+0xc4>)
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015102:	68bb      	ldr	r3, [r7, #8]
 8015104:	6959      	ldr	r1, [r3, #20]
 8015106:	68bb      	ldr	r3, [r7, #8]
 8015108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801510a:	4613      	mov	r3, r2
 801510c:	009b      	lsls	r3, r3, #2
 801510e:	4413      	add	r3, r2
 8015110:	009b      	lsls	r3, r3, #2
 8015112:	4a1f      	ldr	r2, [pc, #124]	; (8015190 <xTaskPriorityInherit+0xc8>)
 8015114:	4413      	add	r3, r2
 8015116:	4299      	cmp	r1, r3
 8015118:	d122      	bne.n	8015160 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801511a:	68bb      	ldr	r3, [r7, #8]
 801511c:	3304      	adds	r3, #4
 801511e:	4618      	mov	r0, r3
 8015120:	f7fe f93e 	bl	80133a0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015124:	4b19      	ldr	r3, [pc, #100]	; (801518c <xTaskPriorityInherit+0xc4>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015132:	4b18      	ldr	r3, [pc, #96]	; (8015194 <xTaskPriorityInherit+0xcc>)
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	429a      	cmp	r2, r3
 8015138:	d903      	bls.n	8015142 <xTaskPriorityInherit+0x7a>
 801513a:	68bb      	ldr	r3, [r7, #8]
 801513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801513e:	4a15      	ldr	r2, [pc, #84]	; (8015194 <xTaskPriorityInherit+0xcc>)
 8015140:	6013      	str	r3, [r2, #0]
 8015142:	68bb      	ldr	r3, [r7, #8]
 8015144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015146:	4613      	mov	r3, r2
 8015148:	009b      	lsls	r3, r3, #2
 801514a:	4413      	add	r3, r2
 801514c:	009b      	lsls	r3, r3, #2
 801514e:	4a10      	ldr	r2, [pc, #64]	; (8015190 <xTaskPriorityInherit+0xc8>)
 8015150:	441a      	add	r2, r3
 8015152:	68bb      	ldr	r3, [r7, #8]
 8015154:	3304      	adds	r3, #4
 8015156:	4619      	mov	r1, r3
 8015158:	4610      	mov	r0, r2
 801515a:	f7fe f8c4 	bl	80132e6 <vListInsertEnd>
 801515e:	e004      	b.n	801516a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015160:	4b0a      	ldr	r3, [pc, #40]	; (801518c <xTaskPriorityInherit+0xc4>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015166:	68bb      	ldr	r3, [r7, #8]
 8015168:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801516a:	2301      	movs	r3, #1
 801516c:	60fb      	str	r3, [r7, #12]
 801516e:	e008      	b.n	8015182 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015170:	68bb      	ldr	r3, [r7, #8]
 8015172:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015174:	4b05      	ldr	r3, [pc, #20]	; (801518c <xTaskPriorityInherit+0xc4>)
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801517a:	429a      	cmp	r2, r3
 801517c:	d201      	bcs.n	8015182 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801517e:	2301      	movs	r3, #1
 8015180:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015182:	68fb      	ldr	r3, [r7, #12]
	}
 8015184:	4618      	mov	r0, r3
 8015186:	3710      	adds	r7, #16
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}
 801518c:	200058dc 	.word	0x200058dc
 8015190:	200058e0 	.word	0x200058e0
 8015194:	20005db8 	.word	0x20005db8

08015198 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015198:	b580      	push	{r7, lr}
 801519a:	b086      	sub	sp, #24
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80151a4:	2300      	movs	r3, #0
 80151a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d056      	beq.n	801525c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80151ae:	4b2e      	ldr	r3, [pc, #184]	; (8015268 <xTaskPriorityDisinherit+0xd0>)
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	693a      	ldr	r2, [r7, #16]
 80151b4:	429a      	cmp	r2, r3
 80151b6:	d00a      	beq.n	80151ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80151b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151bc:	f383 8811 	msr	BASEPRI, r3
 80151c0:	f3bf 8f6f 	isb	sy
 80151c4:	f3bf 8f4f 	dsb	sy
 80151c8:	60fb      	str	r3, [r7, #12]
}
 80151ca:	bf00      	nop
 80151cc:	e7fe      	b.n	80151cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80151ce:	693b      	ldr	r3, [r7, #16]
 80151d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d10a      	bne.n	80151ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80151d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151da:	f383 8811 	msr	BASEPRI, r3
 80151de:	f3bf 8f6f 	isb	sy
 80151e2:	f3bf 8f4f 	dsb	sy
 80151e6:	60bb      	str	r3, [r7, #8]
}
 80151e8:	bf00      	nop
 80151ea:	e7fe      	b.n	80151ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80151ec:	693b      	ldr	r3, [r7, #16]
 80151ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80151f0:	1e5a      	subs	r2, r3, #1
 80151f2:	693b      	ldr	r3, [r7, #16]
 80151f4:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80151f6:	693b      	ldr	r3, [r7, #16]
 80151f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80151fe:	429a      	cmp	r2, r3
 8015200:	d02c      	beq.n	801525c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015202:	693b      	ldr	r3, [r7, #16]
 8015204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015206:	2b00      	cmp	r3, #0
 8015208:	d128      	bne.n	801525c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801520a:	693b      	ldr	r3, [r7, #16]
 801520c:	3304      	adds	r3, #4
 801520e:	4618      	mov	r0, r3
 8015210:	f7fe f8c6 	bl	80133a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015218:	693b      	ldr	r3, [r7, #16]
 801521a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801521c:	693b      	ldr	r3, [r7, #16]
 801521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015220:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015224:	693b      	ldr	r3, [r7, #16]
 8015226:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015228:	693b      	ldr	r3, [r7, #16]
 801522a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801522c:	4b0f      	ldr	r3, [pc, #60]	; (801526c <xTaskPriorityDisinherit+0xd4>)
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	429a      	cmp	r2, r3
 8015232:	d903      	bls.n	801523c <xTaskPriorityDisinherit+0xa4>
 8015234:	693b      	ldr	r3, [r7, #16]
 8015236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015238:	4a0c      	ldr	r2, [pc, #48]	; (801526c <xTaskPriorityDisinherit+0xd4>)
 801523a:	6013      	str	r3, [r2, #0]
 801523c:	693b      	ldr	r3, [r7, #16]
 801523e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015240:	4613      	mov	r3, r2
 8015242:	009b      	lsls	r3, r3, #2
 8015244:	4413      	add	r3, r2
 8015246:	009b      	lsls	r3, r3, #2
 8015248:	4a09      	ldr	r2, [pc, #36]	; (8015270 <xTaskPriorityDisinherit+0xd8>)
 801524a:	441a      	add	r2, r3
 801524c:	693b      	ldr	r3, [r7, #16]
 801524e:	3304      	adds	r3, #4
 8015250:	4619      	mov	r1, r3
 8015252:	4610      	mov	r0, r2
 8015254:	f7fe f847 	bl	80132e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015258:	2301      	movs	r3, #1
 801525a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801525c:	697b      	ldr	r3, [r7, #20]
	}
 801525e:	4618      	mov	r0, r3
 8015260:	3718      	adds	r7, #24
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}
 8015266:	bf00      	nop
 8015268:	200058dc 	.word	0x200058dc
 801526c:	20005db8 	.word	0x20005db8
 8015270:	200058e0 	.word	0x200058e0

08015274 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015274:	b580      	push	{r7, lr}
 8015276:	b088      	sub	sp, #32
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
 801527c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015282:	2301      	movs	r3, #1
 8015284:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d06a      	beq.n	8015362 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801528c:	69bb      	ldr	r3, [r7, #24]
 801528e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015290:	2b00      	cmp	r3, #0
 8015292:	d10a      	bne.n	80152aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8015294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015298:	f383 8811 	msr	BASEPRI, r3
 801529c:	f3bf 8f6f 	isb	sy
 80152a0:	f3bf 8f4f 	dsb	sy
 80152a4:	60fb      	str	r3, [r7, #12]
}
 80152a6:	bf00      	nop
 80152a8:	e7fe      	b.n	80152a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80152aa:	69bb      	ldr	r3, [r7, #24]
 80152ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80152ae:	683a      	ldr	r2, [r7, #0]
 80152b0:	429a      	cmp	r2, r3
 80152b2:	d902      	bls.n	80152ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	61fb      	str	r3, [r7, #28]
 80152b8:	e002      	b.n	80152c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80152ba:	69bb      	ldr	r3, [r7, #24]
 80152bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80152be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80152c0:	69bb      	ldr	r3, [r7, #24]
 80152c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152c4:	69fa      	ldr	r2, [r7, #28]
 80152c6:	429a      	cmp	r2, r3
 80152c8:	d04b      	beq.n	8015362 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80152ca:	69bb      	ldr	r3, [r7, #24]
 80152cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80152ce:	697a      	ldr	r2, [r7, #20]
 80152d0:	429a      	cmp	r2, r3
 80152d2:	d146      	bne.n	8015362 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80152d4:	4b25      	ldr	r3, [pc, #148]	; (801536c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	69ba      	ldr	r2, [r7, #24]
 80152da:	429a      	cmp	r2, r3
 80152dc:	d10a      	bne.n	80152f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80152de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152e2:	f383 8811 	msr	BASEPRI, r3
 80152e6:	f3bf 8f6f 	isb	sy
 80152ea:	f3bf 8f4f 	dsb	sy
 80152ee:	60bb      	str	r3, [r7, #8]
}
 80152f0:	bf00      	nop
 80152f2:	e7fe      	b.n	80152f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80152f4:	69bb      	ldr	r3, [r7, #24]
 80152f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80152fa:	69bb      	ldr	r3, [r7, #24]
 80152fc:	69fa      	ldr	r2, [r7, #28]
 80152fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015300:	69bb      	ldr	r3, [r7, #24]
 8015302:	699b      	ldr	r3, [r3, #24]
 8015304:	2b00      	cmp	r3, #0
 8015306:	db04      	blt.n	8015312 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015308:	69fb      	ldr	r3, [r7, #28]
 801530a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801530e:	69bb      	ldr	r3, [r7, #24]
 8015310:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015312:	69bb      	ldr	r3, [r7, #24]
 8015314:	6959      	ldr	r1, [r3, #20]
 8015316:	693a      	ldr	r2, [r7, #16]
 8015318:	4613      	mov	r3, r2
 801531a:	009b      	lsls	r3, r3, #2
 801531c:	4413      	add	r3, r2
 801531e:	009b      	lsls	r3, r3, #2
 8015320:	4a13      	ldr	r2, [pc, #76]	; (8015370 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015322:	4413      	add	r3, r2
 8015324:	4299      	cmp	r1, r3
 8015326:	d11c      	bne.n	8015362 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015328:	69bb      	ldr	r3, [r7, #24]
 801532a:	3304      	adds	r3, #4
 801532c:	4618      	mov	r0, r3
 801532e:	f7fe f837 	bl	80133a0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015332:	69bb      	ldr	r3, [r7, #24]
 8015334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015336:	4b0f      	ldr	r3, [pc, #60]	; (8015374 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	429a      	cmp	r2, r3
 801533c:	d903      	bls.n	8015346 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801533e:	69bb      	ldr	r3, [r7, #24]
 8015340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015342:	4a0c      	ldr	r2, [pc, #48]	; (8015374 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015344:	6013      	str	r3, [r2, #0]
 8015346:	69bb      	ldr	r3, [r7, #24]
 8015348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801534a:	4613      	mov	r3, r2
 801534c:	009b      	lsls	r3, r3, #2
 801534e:	4413      	add	r3, r2
 8015350:	009b      	lsls	r3, r3, #2
 8015352:	4a07      	ldr	r2, [pc, #28]	; (8015370 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015354:	441a      	add	r2, r3
 8015356:	69bb      	ldr	r3, [r7, #24]
 8015358:	3304      	adds	r3, #4
 801535a:	4619      	mov	r1, r3
 801535c:	4610      	mov	r0, r2
 801535e:	f7fd ffc2 	bl	80132e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015362:	bf00      	nop
 8015364:	3720      	adds	r7, #32
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}
 801536a:	bf00      	nop
 801536c:	200058dc 	.word	0x200058dc
 8015370:	200058e0 	.word	0x200058e0
 8015374:	20005db8 	.word	0x20005db8

08015378 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015378:	b480      	push	{r7}
 801537a:	b083      	sub	sp, #12
 801537c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801537e:	4b09      	ldr	r3, [pc, #36]	; (80153a4 <uxTaskResetEventItemValue+0x2c>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	699b      	ldr	r3, [r3, #24]
 8015384:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015386:	4b07      	ldr	r3, [pc, #28]	; (80153a4 <uxTaskResetEventItemValue+0x2c>)
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801538c:	4b05      	ldr	r3, [pc, #20]	; (80153a4 <uxTaskResetEventItemValue+0x2c>)
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015394:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015396:	687b      	ldr	r3, [r7, #4]
}
 8015398:	4618      	mov	r0, r3
 801539a:	370c      	adds	r7, #12
 801539c:	46bd      	mov	sp, r7
 801539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a2:	4770      	bx	lr
 80153a4:	200058dc 	.word	0x200058dc

080153a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80153a8:	b480      	push	{r7}
 80153aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80153ac:	4b07      	ldr	r3, [pc, #28]	; (80153cc <pvTaskIncrementMutexHeldCount+0x24>)
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d004      	beq.n	80153be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80153b4:	4b05      	ldr	r3, [pc, #20]	; (80153cc <pvTaskIncrementMutexHeldCount+0x24>)
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80153ba:	3201      	adds	r2, #1
 80153bc:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 80153be:	4b03      	ldr	r3, [pc, #12]	; (80153cc <pvTaskIncrementMutexHeldCount+0x24>)
 80153c0:	681b      	ldr	r3, [r3, #0]
	}
 80153c2:	4618      	mov	r0, r3
 80153c4:	46bd      	mov	sp, r7
 80153c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ca:	4770      	bx	lr
 80153cc:	200058dc 	.word	0x200058dc

080153d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b084      	sub	sp, #16
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
 80153d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80153da:	4b21      	ldr	r3, [pc, #132]	; (8015460 <prvAddCurrentTaskToDelayedList+0x90>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80153e0:	4b20      	ldr	r3, [pc, #128]	; (8015464 <prvAddCurrentTaskToDelayedList+0x94>)
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	3304      	adds	r3, #4
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7fd ffda 	bl	80133a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153f2:	d10a      	bne.n	801540a <prvAddCurrentTaskToDelayedList+0x3a>
 80153f4:	683b      	ldr	r3, [r7, #0]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d007      	beq.n	801540a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153fa:	4b1a      	ldr	r3, [pc, #104]	; (8015464 <prvAddCurrentTaskToDelayedList+0x94>)
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	3304      	adds	r3, #4
 8015400:	4619      	mov	r1, r3
 8015402:	4819      	ldr	r0, [pc, #100]	; (8015468 <prvAddCurrentTaskToDelayedList+0x98>)
 8015404:	f7fd ff6f 	bl	80132e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015408:	e026      	b.n	8015458 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801540a:	68fa      	ldr	r2, [r7, #12]
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	4413      	add	r3, r2
 8015410:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015412:	4b14      	ldr	r3, [pc, #80]	; (8015464 <prvAddCurrentTaskToDelayedList+0x94>)
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	68ba      	ldr	r2, [r7, #8]
 8015418:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801541a:	68ba      	ldr	r2, [r7, #8]
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	429a      	cmp	r2, r3
 8015420:	d209      	bcs.n	8015436 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015422:	4b12      	ldr	r3, [pc, #72]	; (801546c <prvAddCurrentTaskToDelayedList+0x9c>)
 8015424:	681a      	ldr	r2, [r3, #0]
 8015426:	4b0f      	ldr	r3, [pc, #60]	; (8015464 <prvAddCurrentTaskToDelayedList+0x94>)
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	3304      	adds	r3, #4
 801542c:	4619      	mov	r1, r3
 801542e:	4610      	mov	r0, r2
 8015430:	f7fd ff7d 	bl	801332e <vListInsert>
}
 8015434:	e010      	b.n	8015458 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015436:	4b0e      	ldr	r3, [pc, #56]	; (8015470 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015438:	681a      	ldr	r2, [r3, #0]
 801543a:	4b0a      	ldr	r3, [pc, #40]	; (8015464 <prvAddCurrentTaskToDelayedList+0x94>)
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	3304      	adds	r3, #4
 8015440:	4619      	mov	r1, r3
 8015442:	4610      	mov	r0, r2
 8015444:	f7fd ff73 	bl	801332e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015448:	4b0a      	ldr	r3, [pc, #40]	; (8015474 <prvAddCurrentTaskToDelayedList+0xa4>)
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	68ba      	ldr	r2, [r7, #8]
 801544e:	429a      	cmp	r2, r3
 8015450:	d202      	bcs.n	8015458 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015452:	4a08      	ldr	r2, [pc, #32]	; (8015474 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015454:	68bb      	ldr	r3, [r7, #8]
 8015456:	6013      	str	r3, [r2, #0]
}
 8015458:	bf00      	nop
 801545a:	3710      	adds	r7, #16
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}
 8015460:	20005db4 	.word	0x20005db4
 8015464:	200058dc 	.word	0x200058dc
 8015468:	20005d9c 	.word	0x20005d9c
 801546c:	20005d6c 	.word	0x20005d6c
 8015470:	20005d68 	.word	0x20005d68
 8015474:	20005dd0 	.word	0x20005dd0

08015478 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b08a      	sub	sp, #40	; 0x28
 801547c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801547e:	2300      	movs	r3, #0
 8015480:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015482:	f000 fba1 	bl	8015bc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015486:	4b1c      	ldr	r3, [pc, #112]	; (80154f8 <xTimerCreateTimerTask+0x80>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d021      	beq.n	80154d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801548e:	2300      	movs	r3, #0
 8015490:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015492:	2300      	movs	r3, #0
 8015494:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015496:	1d3a      	adds	r2, r7, #4
 8015498:	f107 0108 	add.w	r1, r7, #8
 801549c:	f107 030c 	add.w	r3, r7, #12
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7fd fceb 	bl	8012e7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80154a6:	6879      	ldr	r1, [r7, #4]
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	68fa      	ldr	r2, [r7, #12]
 80154ac:	9202      	str	r2, [sp, #8]
 80154ae:	9301      	str	r3, [sp, #4]
 80154b0:	2302      	movs	r3, #2
 80154b2:	9300      	str	r3, [sp, #0]
 80154b4:	2300      	movs	r3, #0
 80154b6:	460a      	mov	r2, r1
 80154b8:	4910      	ldr	r1, [pc, #64]	; (80154fc <xTimerCreateTimerTask+0x84>)
 80154ba:	4811      	ldr	r0, [pc, #68]	; (8015500 <xTimerCreateTimerTask+0x88>)
 80154bc:	f7fe ff1a 	bl	80142f4 <xTaskCreateStatic>
 80154c0:	4603      	mov	r3, r0
 80154c2:	4a10      	ldr	r2, [pc, #64]	; (8015504 <xTimerCreateTimerTask+0x8c>)
 80154c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80154c6:	4b0f      	ldr	r3, [pc, #60]	; (8015504 <xTimerCreateTimerTask+0x8c>)
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d001      	beq.n	80154d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80154ce:	2301      	movs	r3, #1
 80154d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80154d2:	697b      	ldr	r3, [r7, #20]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d10a      	bne.n	80154ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80154d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154dc:	f383 8811 	msr	BASEPRI, r3
 80154e0:	f3bf 8f6f 	isb	sy
 80154e4:	f3bf 8f4f 	dsb	sy
 80154e8:	613b      	str	r3, [r7, #16]
}
 80154ea:	bf00      	nop
 80154ec:	e7fe      	b.n	80154ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80154ee:	697b      	ldr	r3, [r7, #20]
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	3718      	adds	r7, #24
 80154f4:	46bd      	mov	sp, r7
 80154f6:	bd80      	pop	{r7, pc}
 80154f8:	20005e0c 	.word	0x20005e0c
 80154fc:	0801c3c0 	.word	0x0801c3c0
 8015500:	08015771 	.word	0x08015771
 8015504:	20005e10 	.word	0x20005e10

08015508 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8015508:	b580      	push	{r7, lr}
 801550a:	b088      	sub	sp, #32
 801550c:	af02      	add	r7, sp, #8
 801550e:	60f8      	str	r0, [r7, #12]
 8015510:	60b9      	str	r1, [r7, #8]
 8015512:	607a      	str	r2, [r7, #4]
 8015514:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8015516:	202c      	movs	r0, #44	; 0x2c
 8015518:	f000 fe26 	bl	8016168 <pvPortMalloc>
 801551c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801551e:	697b      	ldr	r3, [r7, #20]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d00d      	beq.n	8015540 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8015524:	697b      	ldr	r3, [r7, #20]
 8015526:	2200      	movs	r2, #0
 8015528:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801552c:	697b      	ldr	r3, [r7, #20]
 801552e:	9301      	str	r3, [sp, #4]
 8015530:	6a3b      	ldr	r3, [r7, #32]
 8015532:	9300      	str	r3, [sp, #0]
 8015534:	683b      	ldr	r3, [r7, #0]
 8015536:	687a      	ldr	r2, [r7, #4]
 8015538:	68b9      	ldr	r1, [r7, #8]
 801553a:	68f8      	ldr	r0, [r7, #12]
 801553c:	f000 f843 	bl	80155c6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8015540:	697b      	ldr	r3, [r7, #20]
	}
 8015542:	4618      	mov	r0, r3
 8015544:	3718      	adds	r7, #24
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}

0801554a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801554a:	b580      	push	{r7, lr}
 801554c:	b08a      	sub	sp, #40	; 0x28
 801554e:	af02      	add	r7, sp, #8
 8015550:	60f8      	str	r0, [r7, #12]
 8015552:	60b9      	str	r1, [r7, #8]
 8015554:	607a      	str	r2, [r7, #4]
 8015556:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8015558:	232c      	movs	r3, #44	; 0x2c
 801555a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 801555c:	693b      	ldr	r3, [r7, #16]
 801555e:	2b2c      	cmp	r3, #44	; 0x2c
 8015560:	d00a      	beq.n	8015578 <xTimerCreateStatic+0x2e>
	__asm volatile
 8015562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015566:	f383 8811 	msr	BASEPRI, r3
 801556a:	f3bf 8f6f 	isb	sy
 801556e:	f3bf 8f4f 	dsb	sy
 8015572:	61bb      	str	r3, [r7, #24]
}
 8015574:	bf00      	nop
 8015576:	e7fe      	b.n	8015576 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015578:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801557c:	2b00      	cmp	r3, #0
 801557e:	d10a      	bne.n	8015596 <xTimerCreateStatic+0x4c>
	__asm volatile
 8015580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015584:	f383 8811 	msr	BASEPRI, r3
 8015588:	f3bf 8f6f 	isb	sy
 801558c:	f3bf 8f4f 	dsb	sy
 8015590:	617b      	str	r3, [r7, #20]
}
 8015592:	bf00      	nop
 8015594:	e7fe      	b.n	8015594 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8015596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015598:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801559a:	69fb      	ldr	r3, [r7, #28]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d00d      	beq.n	80155bc <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80155a0:	69fb      	ldr	r3, [r7, #28]
 80155a2:	2202      	movs	r2, #2
 80155a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80155a8:	69fb      	ldr	r3, [r7, #28]
 80155aa:	9301      	str	r3, [sp, #4]
 80155ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155ae:	9300      	str	r3, [sp, #0]
 80155b0:	683b      	ldr	r3, [r7, #0]
 80155b2:	687a      	ldr	r2, [r7, #4]
 80155b4:	68b9      	ldr	r1, [r7, #8]
 80155b6:	68f8      	ldr	r0, [r7, #12]
 80155b8:	f000 f805 	bl	80155c6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80155bc:	69fb      	ldr	r3, [r7, #28]
	}
 80155be:	4618      	mov	r0, r3
 80155c0:	3720      	adds	r7, #32
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bd80      	pop	{r7, pc}

080155c6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80155c6:	b580      	push	{r7, lr}
 80155c8:	b086      	sub	sp, #24
 80155ca:	af00      	add	r7, sp, #0
 80155cc:	60f8      	str	r0, [r7, #12]
 80155ce:	60b9      	str	r1, [r7, #8]
 80155d0:	607a      	str	r2, [r7, #4]
 80155d2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d10a      	bne.n	80155f0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80155da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155de:	f383 8811 	msr	BASEPRI, r3
 80155e2:	f3bf 8f6f 	isb	sy
 80155e6:	f3bf 8f4f 	dsb	sy
 80155ea:	617b      	str	r3, [r7, #20]
}
 80155ec:	bf00      	nop
 80155ee:	e7fe      	b.n	80155ee <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80155f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d01e      	beq.n	8015634 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80155f6:	f000 fae7 	bl	8015bc8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80155fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155fc:	68fa      	ldr	r2, [r7, #12]
 80155fe:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8015600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015602:	68ba      	ldr	r2, [r7, #8]
 8015604:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8015606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015608:	683a      	ldr	r2, [r7, #0]
 801560a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801560e:	6a3a      	ldr	r2, [r7, #32]
 8015610:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8015612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015614:	3304      	adds	r3, #4
 8015616:	4618      	mov	r0, r3
 8015618:	f7fd fe58 	bl	80132cc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d008      	beq.n	8015634 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8015622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015628:	f043 0304 	orr.w	r3, r3, #4
 801562c:	b2da      	uxtb	r2, r3
 801562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015630:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8015634:	bf00      	nop
 8015636:	3718      	adds	r7, #24
 8015638:	46bd      	mov	sp, r7
 801563a:	bd80      	pop	{r7, pc}

0801563c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b08a      	sub	sp, #40	; 0x28
 8015640:	af00      	add	r7, sp, #0
 8015642:	60f8      	str	r0, [r7, #12]
 8015644:	60b9      	str	r1, [r7, #8]
 8015646:	607a      	str	r2, [r7, #4]
 8015648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801564a:	2300      	movs	r3, #0
 801564c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d10a      	bne.n	801566a <xTimerGenericCommand+0x2e>
	__asm volatile
 8015654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015658:	f383 8811 	msr	BASEPRI, r3
 801565c:	f3bf 8f6f 	isb	sy
 8015660:	f3bf 8f4f 	dsb	sy
 8015664:	623b      	str	r3, [r7, #32]
}
 8015666:	bf00      	nop
 8015668:	e7fe      	b.n	8015668 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801566a:	4b1a      	ldr	r3, [pc, #104]	; (80156d4 <xTimerGenericCommand+0x98>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d02a      	beq.n	80156c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015672:	68bb      	ldr	r3, [r7, #8]
 8015674:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801567e:	68bb      	ldr	r3, [r7, #8]
 8015680:	2b05      	cmp	r3, #5
 8015682:	dc18      	bgt.n	80156b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015684:	f7ff fd02 	bl	801508c <xTaskGetSchedulerState>
 8015688:	4603      	mov	r3, r0
 801568a:	2b02      	cmp	r3, #2
 801568c:	d109      	bne.n	80156a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801568e:	4b11      	ldr	r3, [pc, #68]	; (80156d4 <xTimerGenericCommand+0x98>)
 8015690:	6818      	ldr	r0, [r3, #0]
 8015692:	f107 0110 	add.w	r1, r7, #16
 8015696:	2300      	movs	r3, #0
 8015698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801569a:	f7fe f89f 	bl	80137dc <xQueueGenericSend>
 801569e:	6278      	str	r0, [r7, #36]	; 0x24
 80156a0:	e012      	b.n	80156c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80156a2:	4b0c      	ldr	r3, [pc, #48]	; (80156d4 <xTimerGenericCommand+0x98>)
 80156a4:	6818      	ldr	r0, [r3, #0]
 80156a6:	f107 0110 	add.w	r1, r7, #16
 80156aa:	2300      	movs	r3, #0
 80156ac:	2200      	movs	r2, #0
 80156ae:	f7fe f895 	bl	80137dc <xQueueGenericSend>
 80156b2:	6278      	str	r0, [r7, #36]	; 0x24
 80156b4:	e008      	b.n	80156c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80156b6:	4b07      	ldr	r3, [pc, #28]	; (80156d4 <xTimerGenericCommand+0x98>)
 80156b8:	6818      	ldr	r0, [r3, #0]
 80156ba:	f107 0110 	add.w	r1, r7, #16
 80156be:	2300      	movs	r3, #0
 80156c0:	683a      	ldr	r2, [r7, #0]
 80156c2:	f7fe f989 	bl	80139d8 <xQueueGenericSendFromISR>
 80156c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80156c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80156ca:	4618      	mov	r0, r3
 80156cc:	3728      	adds	r7, #40	; 0x28
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}
 80156d2:	bf00      	nop
 80156d4:	20005e0c 	.word	0x20005e0c

080156d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b088      	sub	sp, #32
 80156dc:	af02      	add	r7, sp, #8
 80156de:	6078      	str	r0, [r7, #4]
 80156e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80156e2:	4b22      	ldr	r3, [pc, #136]	; (801576c <prvProcessExpiredTimer+0x94>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	68db      	ldr	r3, [r3, #12]
 80156e8:	68db      	ldr	r3, [r3, #12]
 80156ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80156ec:	697b      	ldr	r3, [r7, #20]
 80156ee:	3304      	adds	r3, #4
 80156f0:	4618      	mov	r0, r3
 80156f2:	f7fd fe55 	bl	80133a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156fc:	f003 0304 	and.w	r3, r3, #4
 8015700:	2b00      	cmp	r3, #0
 8015702:	d022      	beq.n	801574a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	699a      	ldr	r2, [r3, #24]
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	18d1      	adds	r1, r2, r3
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	683a      	ldr	r2, [r7, #0]
 8015710:	6978      	ldr	r0, [r7, #20]
 8015712:	f000 f8d1 	bl	80158b8 <prvInsertTimerInActiveList>
 8015716:	4603      	mov	r3, r0
 8015718:	2b00      	cmp	r3, #0
 801571a:	d01f      	beq.n	801575c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801571c:	2300      	movs	r3, #0
 801571e:	9300      	str	r3, [sp, #0]
 8015720:	2300      	movs	r3, #0
 8015722:	687a      	ldr	r2, [r7, #4]
 8015724:	2100      	movs	r1, #0
 8015726:	6978      	ldr	r0, [r7, #20]
 8015728:	f7ff ff88 	bl	801563c <xTimerGenericCommand>
 801572c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801572e:	693b      	ldr	r3, [r7, #16]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d113      	bne.n	801575c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015738:	f383 8811 	msr	BASEPRI, r3
 801573c:	f3bf 8f6f 	isb	sy
 8015740:	f3bf 8f4f 	dsb	sy
 8015744:	60fb      	str	r3, [r7, #12]
}
 8015746:	bf00      	nop
 8015748:	e7fe      	b.n	8015748 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801574a:	697b      	ldr	r3, [r7, #20]
 801574c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015750:	f023 0301 	bic.w	r3, r3, #1
 8015754:	b2da      	uxtb	r2, r3
 8015756:	697b      	ldr	r3, [r7, #20]
 8015758:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801575c:	697b      	ldr	r3, [r7, #20]
 801575e:	6a1b      	ldr	r3, [r3, #32]
 8015760:	6978      	ldr	r0, [r7, #20]
 8015762:	4798      	blx	r3
}
 8015764:	bf00      	nop
 8015766:	3718      	adds	r7, #24
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}
 801576c:	20005e04 	.word	0x20005e04

08015770 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b084      	sub	sp, #16
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015778:	f107 0308 	add.w	r3, r7, #8
 801577c:	4618      	mov	r0, r3
 801577e:	f000 f857 	bl	8015830 <prvGetNextExpireTime>
 8015782:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015784:	68bb      	ldr	r3, [r7, #8]
 8015786:	4619      	mov	r1, r3
 8015788:	68f8      	ldr	r0, [r7, #12]
 801578a:	f000 f803 	bl	8015794 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801578e:	f000 f8d5 	bl	801593c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015792:	e7f1      	b.n	8015778 <prvTimerTask+0x8>

08015794 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b084      	sub	sp, #16
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
 801579c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801579e:	f7fe ffe5 	bl	801476c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80157a2:	f107 0308 	add.w	r3, r7, #8
 80157a6:	4618      	mov	r0, r3
 80157a8:	f000 f866 	bl	8015878 <prvSampleTimeNow>
 80157ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d130      	bne.n	8015816 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d10a      	bne.n	80157d0 <prvProcessTimerOrBlockTask+0x3c>
 80157ba:	687a      	ldr	r2, [r7, #4]
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	429a      	cmp	r2, r3
 80157c0:	d806      	bhi.n	80157d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80157c2:	f7fe ffe1 	bl	8014788 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80157c6:	68f9      	ldr	r1, [r7, #12]
 80157c8:	6878      	ldr	r0, [r7, #4]
 80157ca:	f7ff ff85 	bl	80156d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80157ce:	e024      	b.n	801581a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80157d0:	683b      	ldr	r3, [r7, #0]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d008      	beq.n	80157e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80157d6:	4b13      	ldr	r3, [pc, #76]	; (8015824 <prvProcessTimerOrBlockTask+0x90>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d101      	bne.n	80157e4 <prvProcessTimerOrBlockTask+0x50>
 80157e0:	2301      	movs	r3, #1
 80157e2:	e000      	b.n	80157e6 <prvProcessTimerOrBlockTask+0x52>
 80157e4:	2300      	movs	r3, #0
 80157e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80157e8:	4b0f      	ldr	r3, [pc, #60]	; (8015828 <prvProcessTimerOrBlockTask+0x94>)
 80157ea:	6818      	ldr	r0, [r3, #0]
 80157ec:	687a      	ldr	r2, [r7, #4]
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	1ad3      	subs	r3, r2, r3
 80157f2:	683a      	ldr	r2, [r7, #0]
 80157f4:	4619      	mov	r1, r3
 80157f6:	f7fe fd49 	bl	801428c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80157fa:	f7fe ffc5 	bl	8014788 <xTaskResumeAll>
 80157fe:	4603      	mov	r3, r0
 8015800:	2b00      	cmp	r3, #0
 8015802:	d10a      	bne.n	801581a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015804:	4b09      	ldr	r3, [pc, #36]	; (801582c <prvProcessTimerOrBlockTask+0x98>)
 8015806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801580a:	601a      	str	r2, [r3, #0]
 801580c:	f3bf 8f4f 	dsb	sy
 8015810:	f3bf 8f6f 	isb	sy
}
 8015814:	e001      	b.n	801581a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015816:	f7fe ffb7 	bl	8014788 <xTaskResumeAll>
}
 801581a:	bf00      	nop
 801581c:	3710      	adds	r7, #16
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
 8015822:	bf00      	nop
 8015824:	20005e08 	.word	0x20005e08
 8015828:	20005e0c 	.word	0x20005e0c
 801582c:	e000ed04 	.word	0xe000ed04

08015830 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015830:	b480      	push	{r7}
 8015832:	b085      	sub	sp, #20
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015838:	4b0e      	ldr	r3, [pc, #56]	; (8015874 <prvGetNextExpireTime+0x44>)
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d101      	bne.n	8015846 <prvGetNextExpireTime+0x16>
 8015842:	2201      	movs	r2, #1
 8015844:	e000      	b.n	8015848 <prvGetNextExpireTime+0x18>
 8015846:	2200      	movs	r2, #0
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d105      	bne.n	8015860 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015854:	4b07      	ldr	r3, [pc, #28]	; (8015874 <prvGetNextExpireTime+0x44>)
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	68db      	ldr	r3, [r3, #12]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	60fb      	str	r3, [r7, #12]
 801585e:	e001      	b.n	8015864 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015860:	2300      	movs	r3, #0
 8015862:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015864:	68fb      	ldr	r3, [r7, #12]
}
 8015866:	4618      	mov	r0, r3
 8015868:	3714      	adds	r7, #20
 801586a:	46bd      	mov	sp, r7
 801586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015870:	4770      	bx	lr
 8015872:	bf00      	nop
 8015874:	20005e04 	.word	0x20005e04

08015878 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b084      	sub	sp, #16
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015880:	f7ff f820 	bl	80148c4 <xTaskGetTickCount>
 8015884:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015886:	4b0b      	ldr	r3, [pc, #44]	; (80158b4 <prvSampleTimeNow+0x3c>)
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	68fa      	ldr	r2, [r7, #12]
 801588c:	429a      	cmp	r2, r3
 801588e:	d205      	bcs.n	801589c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015890:	f000 f936 	bl	8015b00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	2201      	movs	r2, #1
 8015898:	601a      	str	r2, [r3, #0]
 801589a:	e002      	b.n	80158a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2200      	movs	r2, #0
 80158a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80158a2:	4a04      	ldr	r2, [pc, #16]	; (80158b4 <prvSampleTimeNow+0x3c>)
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80158a8:	68fb      	ldr	r3, [r7, #12]
}
 80158aa:	4618      	mov	r0, r3
 80158ac:	3710      	adds	r7, #16
 80158ae:	46bd      	mov	sp, r7
 80158b0:	bd80      	pop	{r7, pc}
 80158b2:	bf00      	nop
 80158b4:	20005e14 	.word	0x20005e14

080158b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b086      	sub	sp, #24
 80158bc:	af00      	add	r7, sp, #0
 80158be:	60f8      	str	r0, [r7, #12]
 80158c0:	60b9      	str	r1, [r7, #8]
 80158c2:	607a      	str	r2, [r7, #4]
 80158c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80158c6:	2300      	movs	r3, #0
 80158c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	68ba      	ldr	r2, [r7, #8]
 80158ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	68fa      	ldr	r2, [r7, #12]
 80158d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80158d6:	68ba      	ldr	r2, [r7, #8]
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	429a      	cmp	r2, r3
 80158dc:	d812      	bhi.n	8015904 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80158de:	687a      	ldr	r2, [r7, #4]
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	1ad2      	subs	r2, r2, r3
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	699b      	ldr	r3, [r3, #24]
 80158e8:	429a      	cmp	r2, r3
 80158ea:	d302      	bcc.n	80158f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80158ec:	2301      	movs	r3, #1
 80158ee:	617b      	str	r3, [r7, #20]
 80158f0:	e01b      	b.n	801592a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80158f2:	4b10      	ldr	r3, [pc, #64]	; (8015934 <prvInsertTimerInActiveList+0x7c>)
 80158f4:	681a      	ldr	r2, [r3, #0]
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	3304      	adds	r3, #4
 80158fa:	4619      	mov	r1, r3
 80158fc:	4610      	mov	r0, r2
 80158fe:	f7fd fd16 	bl	801332e <vListInsert>
 8015902:	e012      	b.n	801592a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015904:	687a      	ldr	r2, [r7, #4]
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	429a      	cmp	r2, r3
 801590a:	d206      	bcs.n	801591a <prvInsertTimerInActiveList+0x62>
 801590c:	68ba      	ldr	r2, [r7, #8]
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	429a      	cmp	r2, r3
 8015912:	d302      	bcc.n	801591a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015914:	2301      	movs	r3, #1
 8015916:	617b      	str	r3, [r7, #20]
 8015918:	e007      	b.n	801592a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801591a:	4b07      	ldr	r3, [pc, #28]	; (8015938 <prvInsertTimerInActiveList+0x80>)
 801591c:	681a      	ldr	r2, [r3, #0]
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	3304      	adds	r3, #4
 8015922:	4619      	mov	r1, r3
 8015924:	4610      	mov	r0, r2
 8015926:	f7fd fd02 	bl	801332e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801592a:	697b      	ldr	r3, [r7, #20]
}
 801592c:	4618      	mov	r0, r3
 801592e:	3718      	adds	r7, #24
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}
 8015934:	20005e08 	.word	0x20005e08
 8015938:	20005e04 	.word	0x20005e04

0801593c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b08e      	sub	sp, #56	; 0x38
 8015940:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015942:	e0ca      	b.n	8015ada <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	2b00      	cmp	r3, #0
 8015948:	da18      	bge.n	801597c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801594a:	1d3b      	adds	r3, r7, #4
 801594c:	3304      	adds	r3, #4
 801594e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015952:	2b00      	cmp	r3, #0
 8015954:	d10a      	bne.n	801596c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801595a:	f383 8811 	msr	BASEPRI, r3
 801595e:	f3bf 8f6f 	isb	sy
 8015962:	f3bf 8f4f 	dsb	sy
 8015966:	61fb      	str	r3, [r7, #28]
}
 8015968:	bf00      	nop
 801596a:	e7fe      	b.n	801596a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801596c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015972:	6850      	ldr	r0, [r2, #4]
 8015974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015976:	6892      	ldr	r2, [r2, #8]
 8015978:	4611      	mov	r1, r2
 801597a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	2b00      	cmp	r3, #0
 8015980:	f2c0 80aa 	blt.w	8015ad8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801598a:	695b      	ldr	r3, [r3, #20]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d004      	beq.n	801599a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015992:	3304      	adds	r3, #4
 8015994:	4618      	mov	r0, r3
 8015996:	f7fd fd03 	bl	80133a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801599a:	463b      	mov	r3, r7
 801599c:	4618      	mov	r0, r3
 801599e:	f7ff ff6b 	bl	8015878 <prvSampleTimeNow>
 80159a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	2b09      	cmp	r3, #9
 80159a8:	f200 8097 	bhi.w	8015ada <prvProcessReceivedCommands+0x19e>
 80159ac:	a201      	add	r2, pc, #4	; (adr r2, 80159b4 <prvProcessReceivedCommands+0x78>)
 80159ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159b2:	bf00      	nop
 80159b4:	080159dd 	.word	0x080159dd
 80159b8:	080159dd 	.word	0x080159dd
 80159bc:	080159dd 	.word	0x080159dd
 80159c0:	08015a51 	.word	0x08015a51
 80159c4:	08015a65 	.word	0x08015a65
 80159c8:	08015aaf 	.word	0x08015aaf
 80159cc:	080159dd 	.word	0x080159dd
 80159d0:	080159dd 	.word	0x080159dd
 80159d4:	08015a51 	.word	0x08015a51
 80159d8:	08015a65 	.word	0x08015a65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80159dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159e2:	f043 0301 	orr.w	r3, r3, #1
 80159e6:	b2da      	uxtb	r2, r3
 80159e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80159ee:	68ba      	ldr	r2, [r7, #8]
 80159f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159f2:	699b      	ldr	r3, [r3, #24]
 80159f4:	18d1      	adds	r1, r2, r3
 80159f6:	68bb      	ldr	r3, [r7, #8]
 80159f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159fc:	f7ff ff5c 	bl	80158b8 <prvInsertTimerInActiveList>
 8015a00:	4603      	mov	r3, r0
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d069      	beq.n	8015ada <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a08:	6a1b      	ldr	r3, [r3, #32]
 8015a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a14:	f003 0304 	and.w	r3, r3, #4
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d05e      	beq.n	8015ada <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015a1c:	68ba      	ldr	r2, [r7, #8]
 8015a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a20:	699b      	ldr	r3, [r3, #24]
 8015a22:	441a      	add	r2, r3
 8015a24:	2300      	movs	r3, #0
 8015a26:	9300      	str	r3, [sp, #0]
 8015a28:	2300      	movs	r3, #0
 8015a2a:	2100      	movs	r1, #0
 8015a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a2e:	f7ff fe05 	bl	801563c <xTimerGenericCommand>
 8015a32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015a34:	6a3b      	ldr	r3, [r7, #32]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d14f      	bne.n	8015ada <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a3e:	f383 8811 	msr	BASEPRI, r3
 8015a42:	f3bf 8f6f 	isb	sy
 8015a46:	f3bf 8f4f 	dsb	sy
 8015a4a:	61bb      	str	r3, [r7, #24]
}
 8015a4c:	bf00      	nop
 8015a4e:	e7fe      	b.n	8015a4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a56:	f023 0301 	bic.w	r3, r3, #1
 8015a5a:	b2da      	uxtb	r2, r3
 8015a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015a62:	e03a      	b.n	8015ada <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a6a:	f043 0301 	orr.w	r3, r3, #1
 8015a6e:	b2da      	uxtb	r2, r3
 8015a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015a76:	68ba      	ldr	r2, [r7, #8]
 8015a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a7e:	699b      	ldr	r3, [r3, #24]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d10a      	bne.n	8015a9a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a88:	f383 8811 	msr	BASEPRI, r3
 8015a8c:	f3bf 8f6f 	isb	sy
 8015a90:	f3bf 8f4f 	dsb	sy
 8015a94:	617b      	str	r3, [r7, #20]
}
 8015a96:	bf00      	nop
 8015a98:	e7fe      	b.n	8015a98 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a9c:	699a      	ldr	r2, [r3, #24]
 8015a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aa0:	18d1      	adds	r1, r2, r3
 8015aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015aa8:	f7ff ff06 	bl	80158b8 <prvInsertTimerInActiveList>
					break;
 8015aac:	e015      	b.n	8015ada <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ab4:	f003 0302 	and.w	r3, r3, #2
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d103      	bne.n	8015ac4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015abe:	f000 fc1f 	bl	8016300 <vPortFree>
 8015ac2:	e00a      	b.n	8015ada <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015aca:	f023 0301 	bic.w	r3, r3, #1
 8015ace:	b2da      	uxtb	r2, r3
 8015ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015ad6:	e000      	b.n	8015ada <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015ad8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015ada:	4b08      	ldr	r3, [pc, #32]	; (8015afc <prvProcessReceivedCommands+0x1c0>)
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	1d39      	adds	r1, r7, #4
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f7fe f814 	bl	8013b10 <xQueueReceive>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	f47f af2a 	bne.w	8015944 <prvProcessReceivedCommands+0x8>
	}
}
 8015af0:	bf00      	nop
 8015af2:	bf00      	nop
 8015af4:	3730      	adds	r7, #48	; 0x30
 8015af6:	46bd      	mov	sp, r7
 8015af8:	bd80      	pop	{r7, pc}
 8015afa:	bf00      	nop
 8015afc:	20005e0c 	.word	0x20005e0c

08015b00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b088      	sub	sp, #32
 8015b04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015b06:	e048      	b.n	8015b9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015b08:	4b2d      	ldr	r3, [pc, #180]	; (8015bc0 <prvSwitchTimerLists+0xc0>)
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	68db      	ldr	r3, [r3, #12]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b12:	4b2b      	ldr	r3, [pc, #172]	; (8015bc0 <prvSwitchTimerLists+0xc0>)
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	68db      	ldr	r3, [r3, #12]
 8015b18:	68db      	ldr	r3, [r3, #12]
 8015b1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	3304      	adds	r3, #4
 8015b20:	4618      	mov	r0, r3
 8015b22:	f7fd fc3d 	bl	80133a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	6a1b      	ldr	r3, [r3, #32]
 8015b2a:	68f8      	ldr	r0, [r7, #12]
 8015b2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b34:	f003 0304 	and.w	r3, r3, #4
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d02e      	beq.n	8015b9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	699b      	ldr	r3, [r3, #24]
 8015b40:	693a      	ldr	r2, [r7, #16]
 8015b42:	4413      	add	r3, r2
 8015b44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015b46:	68ba      	ldr	r2, [r7, #8]
 8015b48:	693b      	ldr	r3, [r7, #16]
 8015b4a:	429a      	cmp	r2, r3
 8015b4c:	d90e      	bls.n	8015b6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	68ba      	ldr	r2, [r7, #8]
 8015b52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	68fa      	ldr	r2, [r7, #12]
 8015b58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015b5a:	4b19      	ldr	r3, [pc, #100]	; (8015bc0 <prvSwitchTimerLists+0xc0>)
 8015b5c:	681a      	ldr	r2, [r3, #0]
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	3304      	adds	r3, #4
 8015b62:	4619      	mov	r1, r3
 8015b64:	4610      	mov	r0, r2
 8015b66:	f7fd fbe2 	bl	801332e <vListInsert>
 8015b6a:	e016      	b.n	8015b9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	9300      	str	r3, [sp, #0]
 8015b70:	2300      	movs	r3, #0
 8015b72:	693a      	ldr	r2, [r7, #16]
 8015b74:	2100      	movs	r1, #0
 8015b76:	68f8      	ldr	r0, [r7, #12]
 8015b78:	f7ff fd60 	bl	801563c <xTimerGenericCommand>
 8015b7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d10a      	bne.n	8015b9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b88:	f383 8811 	msr	BASEPRI, r3
 8015b8c:	f3bf 8f6f 	isb	sy
 8015b90:	f3bf 8f4f 	dsb	sy
 8015b94:	603b      	str	r3, [r7, #0]
}
 8015b96:	bf00      	nop
 8015b98:	e7fe      	b.n	8015b98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015b9a:	4b09      	ldr	r3, [pc, #36]	; (8015bc0 <prvSwitchTimerLists+0xc0>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d1b1      	bne.n	8015b08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015ba4:	4b06      	ldr	r3, [pc, #24]	; (8015bc0 <prvSwitchTimerLists+0xc0>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015baa:	4b06      	ldr	r3, [pc, #24]	; (8015bc4 <prvSwitchTimerLists+0xc4>)
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	4a04      	ldr	r2, [pc, #16]	; (8015bc0 <prvSwitchTimerLists+0xc0>)
 8015bb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015bb2:	4a04      	ldr	r2, [pc, #16]	; (8015bc4 <prvSwitchTimerLists+0xc4>)
 8015bb4:	697b      	ldr	r3, [r7, #20]
 8015bb6:	6013      	str	r3, [r2, #0]
}
 8015bb8:	bf00      	nop
 8015bba:	3718      	adds	r7, #24
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bd80      	pop	{r7, pc}
 8015bc0:	20005e04 	.word	0x20005e04
 8015bc4:	20005e08 	.word	0x20005e08

08015bc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b082      	sub	sp, #8
 8015bcc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015bce:	f000 f9a9 	bl	8015f24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015bd2:	4b15      	ldr	r3, [pc, #84]	; (8015c28 <prvCheckForValidListAndQueue+0x60>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d120      	bne.n	8015c1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015bda:	4814      	ldr	r0, [pc, #80]	; (8015c2c <prvCheckForValidListAndQueue+0x64>)
 8015bdc:	f7fd fb56 	bl	801328c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015be0:	4813      	ldr	r0, [pc, #76]	; (8015c30 <prvCheckForValidListAndQueue+0x68>)
 8015be2:	f7fd fb53 	bl	801328c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015be6:	4b13      	ldr	r3, [pc, #76]	; (8015c34 <prvCheckForValidListAndQueue+0x6c>)
 8015be8:	4a10      	ldr	r2, [pc, #64]	; (8015c2c <prvCheckForValidListAndQueue+0x64>)
 8015bea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015bec:	4b12      	ldr	r3, [pc, #72]	; (8015c38 <prvCheckForValidListAndQueue+0x70>)
 8015bee:	4a10      	ldr	r2, [pc, #64]	; (8015c30 <prvCheckForValidListAndQueue+0x68>)
 8015bf0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	9300      	str	r3, [sp, #0]
 8015bf6:	4b11      	ldr	r3, [pc, #68]	; (8015c3c <prvCheckForValidListAndQueue+0x74>)
 8015bf8:	4a11      	ldr	r2, [pc, #68]	; (8015c40 <prvCheckForValidListAndQueue+0x78>)
 8015bfa:	2110      	movs	r1, #16
 8015bfc:	2040      	movs	r0, #64	; 0x40
 8015bfe:	f7fd fc61 	bl	80134c4 <xQueueGenericCreateStatic>
 8015c02:	4603      	mov	r3, r0
 8015c04:	4a08      	ldr	r2, [pc, #32]	; (8015c28 <prvCheckForValidListAndQueue+0x60>)
 8015c06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015c08:	4b07      	ldr	r3, [pc, #28]	; (8015c28 <prvCheckForValidListAndQueue+0x60>)
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d005      	beq.n	8015c1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015c10:	4b05      	ldr	r3, [pc, #20]	; (8015c28 <prvCheckForValidListAndQueue+0x60>)
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	490b      	ldr	r1, [pc, #44]	; (8015c44 <prvCheckForValidListAndQueue+0x7c>)
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7fe fb0e 	bl	8014238 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015c1c:	f000 f9b2 	bl	8015f84 <vPortExitCritical>
}
 8015c20:	bf00      	nop
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd80      	pop	{r7, pc}
 8015c26:	bf00      	nop
 8015c28:	20005e0c 	.word	0x20005e0c
 8015c2c:	20005ddc 	.word	0x20005ddc
 8015c30:	20005df0 	.word	0x20005df0
 8015c34:	20005e04 	.word	0x20005e04
 8015c38:	20005e08 	.word	0x20005e08
 8015c3c:	20006218 	.word	0x20006218
 8015c40:	20005e18 	.word	0x20005e18
 8015c44:	0801c3c8 	.word	0x0801c3c8

08015c48 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b086      	sub	sp, #24
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d10a      	bne.n	8015c70 <pvTimerGetTimerID+0x28>
	__asm volatile
 8015c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c5e:	f383 8811 	msr	BASEPRI, r3
 8015c62:	f3bf 8f6f 	isb	sy
 8015c66:	f3bf 8f4f 	dsb	sy
 8015c6a:	60fb      	str	r3, [r7, #12]
}
 8015c6c:	bf00      	nop
 8015c6e:	e7fe      	b.n	8015c6e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8015c70:	f000 f958 	bl	8015f24 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8015c74:	697b      	ldr	r3, [r7, #20]
 8015c76:	69db      	ldr	r3, [r3, #28]
 8015c78:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8015c7a:	f000 f983 	bl	8015f84 <vPortExitCritical>

	return pvReturn;
 8015c7e:	693b      	ldr	r3, [r7, #16]
}
 8015c80:	4618      	mov	r0, r3
 8015c82:	3718      	adds	r7, #24
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}

08015c88 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b08a      	sub	sp, #40	; 0x28
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	60f8      	str	r0, [r7, #12]
 8015c90:	60b9      	str	r1, [r7, #8]
 8015c92:	607a      	str	r2, [r7, #4]
 8015c94:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015c96:	f06f 0301 	mvn.w	r3, #1
 8015c9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015ca0:	68bb      	ldr	r3, [r7, #8]
 8015ca2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015ca8:	4b06      	ldr	r3, [pc, #24]	; (8015cc4 <xTimerPendFunctionCallFromISR+0x3c>)
 8015caa:	6818      	ldr	r0, [r3, #0]
 8015cac:	f107 0114 	add.w	r1, r7, #20
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	683a      	ldr	r2, [r7, #0]
 8015cb4:	f7fd fe90 	bl	80139d8 <xQueueGenericSendFromISR>
 8015cb8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	3728      	adds	r7, #40	; 0x28
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}
 8015cc4:	20005e0c 	.word	0x20005e0c

08015cc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015cc8:	b480      	push	{r7}
 8015cca:	b085      	sub	sp, #20
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	60f8      	str	r0, [r7, #12]
 8015cd0:	60b9      	str	r1, [r7, #8]
 8015cd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	3b04      	subs	r3, #4
 8015cd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	3b04      	subs	r3, #4
 8015ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015ce8:	68bb      	ldr	r3, [r7, #8]
 8015cea:	f023 0201 	bic.w	r2, r3, #1
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	3b04      	subs	r3, #4
 8015cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015cf8:	4a0c      	ldr	r2, [pc, #48]	; (8015d2c <pxPortInitialiseStack+0x64>)
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	3b14      	subs	r3, #20
 8015d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015d04:	687a      	ldr	r2, [r7, #4]
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	3b04      	subs	r3, #4
 8015d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	f06f 0202 	mvn.w	r2, #2
 8015d16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	3b20      	subs	r3, #32
 8015d1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015d1e:	68fb      	ldr	r3, [r7, #12]
}
 8015d20:	4618      	mov	r0, r3
 8015d22:	3714      	adds	r7, #20
 8015d24:	46bd      	mov	sp, r7
 8015d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2a:	4770      	bx	lr
 8015d2c:	08015d31 	.word	0x08015d31

08015d30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015d30:	b480      	push	{r7}
 8015d32:	b085      	sub	sp, #20
 8015d34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015d36:	2300      	movs	r3, #0
 8015d38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015d3a:	4b12      	ldr	r3, [pc, #72]	; (8015d84 <prvTaskExitError+0x54>)
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d42:	d00a      	beq.n	8015d5a <prvTaskExitError+0x2a>
	__asm volatile
 8015d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d48:	f383 8811 	msr	BASEPRI, r3
 8015d4c:	f3bf 8f6f 	isb	sy
 8015d50:	f3bf 8f4f 	dsb	sy
 8015d54:	60fb      	str	r3, [r7, #12]
}
 8015d56:	bf00      	nop
 8015d58:	e7fe      	b.n	8015d58 <prvTaskExitError+0x28>
	__asm volatile
 8015d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d5e:	f383 8811 	msr	BASEPRI, r3
 8015d62:	f3bf 8f6f 	isb	sy
 8015d66:	f3bf 8f4f 	dsb	sy
 8015d6a:	60bb      	str	r3, [r7, #8]
}
 8015d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015d6e:	bf00      	nop
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d0fc      	beq.n	8015d70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015d76:	bf00      	nop
 8015d78:	bf00      	nop
 8015d7a:	3714      	adds	r7, #20
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d82:	4770      	bx	lr
 8015d84:	200000a0 	.word	0x200000a0
	...

08015d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015d90:	4b07      	ldr	r3, [pc, #28]	; (8015db0 <pxCurrentTCBConst2>)
 8015d92:	6819      	ldr	r1, [r3, #0]
 8015d94:	6808      	ldr	r0, [r1, #0]
 8015d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d9a:	f380 8809 	msr	PSP, r0
 8015d9e:	f3bf 8f6f 	isb	sy
 8015da2:	f04f 0000 	mov.w	r0, #0
 8015da6:	f380 8811 	msr	BASEPRI, r0
 8015daa:	4770      	bx	lr
 8015dac:	f3af 8000 	nop.w

08015db0 <pxCurrentTCBConst2>:
 8015db0:	200058dc 	.word	0x200058dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015db4:	bf00      	nop
 8015db6:	bf00      	nop

08015db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015db8:	4808      	ldr	r0, [pc, #32]	; (8015ddc <prvPortStartFirstTask+0x24>)
 8015dba:	6800      	ldr	r0, [r0, #0]
 8015dbc:	6800      	ldr	r0, [r0, #0]
 8015dbe:	f380 8808 	msr	MSP, r0
 8015dc2:	f04f 0000 	mov.w	r0, #0
 8015dc6:	f380 8814 	msr	CONTROL, r0
 8015dca:	b662      	cpsie	i
 8015dcc:	b661      	cpsie	f
 8015dce:	f3bf 8f4f 	dsb	sy
 8015dd2:	f3bf 8f6f 	isb	sy
 8015dd6:	df00      	svc	0
 8015dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015dda:	bf00      	nop
 8015ddc:	e000ed08 	.word	0xe000ed08

08015de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b086      	sub	sp, #24
 8015de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015de6:	4b46      	ldr	r3, [pc, #280]	; (8015f00 <xPortStartScheduler+0x120>)
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	4a46      	ldr	r2, [pc, #280]	; (8015f04 <xPortStartScheduler+0x124>)
 8015dec:	4293      	cmp	r3, r2
 8015dee:	d10a      	bne.n	8015e06 <xPortStartScheduler+0x26>
	__asm volatile
 8015df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015df4:	f383 8811 	msr	BASEPRI, r3
 8015df8:	f3bf 8f6f 	isb	sy
 8015dfc:	f3bf 8f4f 	dsb	sy
 8015e00:	613b      	str	r3, [r7, #16]
}
 8015e02:	bf00      	nop
 8015e04:	e7fe      	b.n	8015e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015e06:	4b3e      	ldr	r3, [pc, #248]	; (8015f00 <xPortStartScheduler+0x120>)
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	4a3f      	ldr	r2, [pc, #252]	; (8015f08 <xPortStartScheduler+0x128>)
 8015e0c:	4293      	cmp	r3, r2
 8015e0e:	d10a      	bne.n	8015e26 <xPortStartScheduler+0x46>
	__asm volatile
 8015e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e14:	f383 8811 	msr	BASEPRI, r3
 8015e18:	f3bf 8f6f 	isb	sy
 8015e1c:	f3bf 8f4f 	dsb	sy
 8015e20:	60fb      	str	r3, [r7, #12]
}
 8015e22:	bf00      	nop
 8015e24:	e7fe      	b.n	8015e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015e26:	4b39      	ldr	r3, [pc, #228]	; (8015f0c <xPortStartScheduler+0x12c>)
 8015e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	b2db      	uxtb	r3, r3
 8015e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015e32:	697b      	ldr	r3, [r7, #20]
 8015e34:	22ff      	movs	r2, #255	; 0xff
 8015e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015e38:	697b      	ldr	r3, [r7, #20]
 8015e3a:	781b      	ldrb	r3, [r3, #0]
 8015e3c:	b2db      	uxtb	r3, r3
 8015e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015e40:	78fb      	ldrb	r3, [r7, #3]
 8015e42:	b2db      	uxtb	r3, r3
 8015e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015e48:	b2da      	uxtb	r2, r3
 8015e4a:	4b31      	ldr	r3, [pc, #196]	; (8015f10 <xPortStartScheduler+0x130>)
 8015e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015e4e:	4b31      	ldr	r3, [pc, #196]	; (8015f14 <xPortStartScheduler+0x134>)
 8015e50:	2207      	movs	r2, #7
 8015e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015e54:	e009      	b.n	8015e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015e56:	4b2f      	ldr	r3, [pc, #188]	; (8015f14 <xPortStartScheduler+0x134>)
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	3b01      	subs	r3, #1
 8015e5c:	4a2d      	ldr	r2, [pc, #180]	; (8015f14 <xPortStartScheduler+0x134>)
 8015e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015e60:	78fb      	ldrb	r3, [r7, #3]
 8015e62:	b2db      	uxtb	r3, r3
 8015e64:	005b      	lsls	r3, r3, #1
 8015e66:	b2db      	uxtb	r3, r3
 8015e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015e6a:	78fb      	ldrb	r3, [r7, #3]
 8015e6c:	b2db      	uxtb	r3, r3
 8015e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015e72:	2b80      	cmp	r3, #128	; 0x80
 8015e74:	d0ef      	beq.n	8015e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015e76:	4b27      	ldr	r3, [pc, #156]	; (8015f14 <xPortStartScheduler+0x134>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	f1c3 0307 	rsb	r3, r3, #7
 8015e7e:	2b04      	cmp	r3, #4
 8015e80:	d00a      	beq.n	8015e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8015e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e86:	f383 8811 	msr	BASEPRI, r3
 8015e8a:	f3bf 8f6f 	isb	sy
 8015e8e:	f3bf 8f4f 	dsb	sy
 8015e92:	60bb      	str	r3, [r7, #8]
}
 8015e94:	bf00      	nop
 8015e96:	e7fe      	b.n	8015e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015e98:	4b1e      	ldr	r3, [pc, #120]	; (8015f14 <xPortStartScheduler+0x134>)
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	021b      	lsls	r3, r3, #8
 8015e9e:	4a1d      	ldr	r2, [pc, #116]	; (8015f14 <xPortStartScheduler+0x134>)
 8015ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015ea2:	4b1c      	ldr	r3, [pc, #112]	; (8015f14 <xPortStartScheduler+0x134>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015eaa:	4a1a      	ldr	r2, [pc, #104]	; (8015f14 <xPortStartScheduler+0x134>)
 8015eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	b2da      	uxtb	r2, r3
 8015eb2:	697b      	ldr	r3, [r7, #20]
 8015eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015eb6:	4b18      	ldr	r3, [pc, #96]	; (8015f18 <xPortStartScheduler+0x138>)
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	4a17      	ldr	r2, [pc, #92]	; (8015f18 <xPortStartScheduler+0x138>)
 8015ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015ec2:	4b15      	ldr	r3, [pc, #84]	; (8015f18 <xPortStartScheduler+0x138>)
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	4a14      	ldr	r2, [pc, #80]	; (8015f18 <xPortStartScheduler+0x138>)
 8015ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015ece:	f000 f8dd 	bl	801608c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015ed2:	4b12      	ldr	r3, [pc, #72]	; (8015f1c <xPortStartScheduler+0x13c>)
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015ed8:	f000 f8fc 	bl	80160d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015edc:	4b10      	ldr	r3, [pc, #64]	; (8015f20 <xPortStartScheduler+0x140>)
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	4a0f      	ldr	r2, [pc, #60]	; (8015f20 <xPortStartScheduler+0x140>)
 8015ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015ee8:	f7ff ff66 	bl	8015db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015eec:	f7fe fdb4 	bl	8014a58 <vTaskSwitchContext>
	prvTaskExitError();
 8015ef0:	f7ff ff1e 	bl	8015d30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015ef4:	2300      	movs	r3, #0
}
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	3718      	adds	r7, #24
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd80      	pop	{r7, pc}
 8015efe:	bf00      	nop
 8015f00:	e000ed00 	.word	0xe000ed00
 8015f04:	410fc271 	.word	0x410fc271
 8015f08:	410fc270 	.word	0x410fc270
 8015f0c:	e000e400 	.word	0xe000e400
 8015f10:	20006268 	.word	0x20006268
 8015f14:	2000626c 	.word	0x2000626c
 8015f18:	e000ed20 	.word	0xe000ed20
 8015f1c:	200000a0 	.word	0x200000a0
 8015f20:	e000ef34 	.word	0xe000ef34

08015f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015f24:	b480      	push	{r7}
 8015f26:	b083      	sub	sp, #12
 8015f28:	af00      	add	r7, sp, #0
	__asm volatile
 8015f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f2e:	f383 8811 	msr	BASEPRI, r3
 8015f32:	f3bf 8f6f 	isb	sy
 8015f36:	f3bf 8f4f 	dsb	sy
 8015f3a:	607b      	str	r3, [r7, #4]
}
 8015f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015f3e:	4b0f      	ldr	r3, [pc, #60]	; (8015f7c <vPortEnterCritical+0x58>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	3301      	adds	r3, #1
 8015f44:	4a0d      	ldr	r2, [pc, #52]	; (8015f7c <vPortEnterCritical+0x58>)
 8015f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015f48:	4b0c      	ldr	r3, [pc, #48]	; (8015f7c <vPortEnterCritical+0x58>)
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	2b01      	cmp	r3, #1
 8015f4e:	d10f      	bne.n	8015f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015f50:	4b0b      	ldr	r3, [pc, #44]	; (8015f80 <vPortEnterCritical+0x5c>)
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	b2db      	uxtb	r3, r3
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d00a      	beq.n	8015f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8015f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f5e:	f383 8811 	msr	BASEPRI, r3
 8015f62:	f3bf 8f6f 	isb	sy
 8015f66:	f3bf 8f4f 	dsb	sy
 8015f6a:	603b      	str	r3, [r7, #0]
}
 8015f6c:	bf00      	nop
 8015f6e:	e7fe      	b.n	8015f6e <vPortEnterCritical+0x4a>
	}
}
 8015f70:	bf00      	nop
 8015f72:	370c      	adds	r7, #12
 8015f74:	46bd      	mov	sp, r7
 8015f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7a:	4770      	bx	lr
 8015f7c:	200000a0 	.word	0x200000a0
 8015f80:	e000ed04 	.word	0xe000ed04

08015f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015f84:	b480      	push	{r7}
 8015f86:	b083      	sub	sp, #12
 8015f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015f8a:	4b12      	ldr	r3, [pc, #72]	; (8015fd4 <vPortExitCritical+0x50>)
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d10a      	bne.n	8015fa8 <vPortExitCritical+0x24>
	__asm volatile
 8015f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f96:	f383 8811 	msr	BASEPRI, r3
 8015f9a:	f3bf 8f6f 	isb	sy
 8015f9e:	f3bf 8f4f 	dsb	sy
 8015fa2:	607b      	str	r3, [r7, #4]
}
 8015fa4:	bf00      	nop
 8015fa6:	e7fe      	b.n	8015fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015fa8:	4b0a      	ldr	r3, [pc, #40]	; (8015fd4 <vPortExitCritical+0x50>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	3b01      	subs	r3, #1
 8015fae:	4a09      	ldr	r2, [pc, #36]	; (8015fd4 <vPortExitCritical+0x50>)
 8015fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015fb2:	4b08      	ldr	r3, [pc, #32]	; (8015fd4 <vPortExitCritical+0x50>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d105      	bne.n	8015fc6 <vPortExitCritical+0x42>
 8015fba:	2300      	movs	r3, #0
 8015fbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015fbe:	683b      	ldr	r3, [r7, #0]
 8015fc0:	f383 8811 	msr	BASEPRI, r3
}
 8015fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015fc6:	bf00      	nop
 8015fc8:	370c      	adds	r7, #12
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd0:	4770      	bx	lr
 8015fd2:	bf00      	nop
 8015fd4:	200000a0 	.word	0x200000a0
	...

08015fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015fe0:	f3ef 8009 	mrs	r0, PSP
 8015fe4:	f3bf 8f6f 	isb	sy
 8015fe8:	4b15      	ldr	r3, [pc, #84]	; (8016040 <pxCurrentTCBConst>)
 8015fea:	681a      	ldr	r2, [r3, #0]
 8015fec:	f01e 0f10 	tst.w	lr, #16
 8015ff0:	bf08      	it	eq
 8015ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ffa:	6010      	str	r0, [r2, #0]
 8015ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016004:	f380 8811 	msr	BASEPRI, r0
 8016008:	f3bf 8f4f 	dsb	sy
 801600c:	f3bf 8f6f 	isb	sy
 8016010:	f7fe fd22 	bl	8014a58 <vTaskSwitchContext>
 8016014:	f04f 0000 	mov.w	r0, #0
 8016018:	f380 8811 	msr	BASEPRI, r0
 801601c:	bc09      	pop	{r0, r3}
 801601e:	6819      	ldr	r1, [r3, #0]
 8016020:	6808      	ldr	r0, [r1, #0]
 8016022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016026:	f01e 0f10 	tst.w	lr, #16
 801602a:	bf08      	it	eq
 801602c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016030:	f380 8809 	msr	PSP, r0
 8016034:	f3bf 8f6f 	isb	sy
 8016038:	4770      	bx	lr
 801603a:	bf00      	nop
 801603c:	f3af 8000 	nop.w

08016040 <pxCurrentTCBConst>:
 8016040:	200058dc 	.word	0x200058dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016044:	bf00      	nop
 8016046:	bf00      	nop

08016048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b082      	sub	sp, #8
 801604c:	af00      	add	r7, sp, #0
	__asm volatile
 801604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016052:	f383 8811 	msr	BASEPRI, r3
 8016056:	f3bf 8f6f 	isb	sy
 801605a:	f3bf 8f4f 	dsb	sy
 801605e:	607b      	str	r3, [r7, #4]
}
 8016060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016062:	f7fe fc3f 	bl	80148e4 <xTaskIncrementTick>
 8016066:	4603      	mov	r3, r0
 8016068:	2b00      	cmp	r3, #0
 801606a:	d003      	beq.n	8016074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801606c:	4b06      	ldr	r3, [pc, #24]	; (8016088 <xPortSysTickHandler+0x40>)
 801606e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016072:	601a      	str	r2, [r3, #0]
 8016074:	2300      	movs	r3, #0
 8016076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016078:	683b      	ldr	r3, [r7, #0]
 801607a:	f383 8811 	msr	BASEPRI, r3
}
 801607e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016080:	bf00      	nop
 8016082:	3708      	adds	r7, #8
 8016084:	46bd      	mov	sp, r7
 8016086:	bd80      	pop	{r7, pc}
 8016088:	e000ed04 	.word	0xe000ed04

0801608c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801608c:	b480      	push	{r7}
 801608e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016090:	4b0b      	ldr	r3, [pc, #44]	; (80160c0 <vPortSetupTimerInterrupt+0x34>)
 8016092:	2200      	movs	r2, #0
 8016094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016096:	4b0b      	ldr	r3, [pc, #44]	; (80160c4 <vPortSetupTimerInterrupt+0x38>)
 8016098:	2200      	movs	r2, #0
 801609a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801609c:	4b0a      	ldr	r3, [pc, #40]	; (80160c8 <vPortSetupTimerInterrupt+0x3c>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	4a0a      	ldr	r2, [pc, #40]	; (80160cc <vPortSetupTimerInterrupt+0x40>)
 80160a2:	fba2 2303 	umull	r2, r3, r2, r3
 80160a6:	099b      	lsrs	r3, r3, #6
 80160a8:	4a09      	ldr	r2, [pc, #36]	; (80160d0 <vPortSetupTimerInterrupt+0x44>)
 80160aa:	3b01      	subs	r3, #1
 80160ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80160ae:	4b04      	ldr	r3, [pc, #16]	; (80160c0 <vPortSetupTimerInterrupt+0x34>)
 80160b0:	2207      	movs	r2, #7
 80160b2:	601a      	str	r2, [r3, #0]
}
 80160b4:	bf00      	nop
 80160b6:	46bd      	mov	sp, r7
 80160b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160bc:	4770      	bx	lr
 80160be:	bf00      	nop
 80160c0:	e000e010 	.word	0xe000e010
 80160c4:	e000e018 	.word	0xe000e018
 80160c8:	20000094 	.word	0x20000094
 80160cc:	10624dd3 	.word	0x10624dd3
 80160d0:	e000e014 	.word	0xe000e014

080160d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80160d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80160e4 <vPortEnableVFP+0x10>
 80160d8:	6801      	ldr	r1, [r0, #0]
 80160da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80160de:	6001      	str	r1, [r0, #0]
 80160e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80160e2:	bf00      	nop
 80160e4:	e000ed88 	.word	0xe000ed88

080160e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80160e8:	b480      	push	{r7}
 80160ea:	b085      	sub	sp, #20
 80160ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80160ee:	f3ef 8305 	mrs	r3, IPSR
 80160f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	2b0f      	cmp	r3, #15
 80160f8:	d914      	bls.n	8016124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80160fa:	4a17      	ldr	r2, [pc, #92]	; (8016158 <vPortValidateInterruptPriority+0x70>)
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	4413      	add	r3, r2
 8016100:	781b      	ldrb	r3, [r3, #0]
 8016102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016104:	4b15      	ldr	r3, [pc, #84]	; (801615c <vPortValidateInterruptPriority+0x74>)
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	7afa      	ldrb	r2, [r7, #11]
 801610a:	429a      	cmp	r2, r3
 801610c:	d20a      	bcs.n	8016124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016112:	f383 8811 	msr	BASEPRI, r3
 8016116:	f3bf 8f6f 	isb	sy
 801611a:	f3bf 8f4f 	dsb	sy
 801611e:	607b      	str	r3, [r7, #4]
}
 8016120:	bf00      	nop
 8016122:	e7fe      	b.n	8016122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016124:	4b0e      	ldr	r3, [pc, #56]	; (8016160 <vPortValidateInterruptPriority+0x78>)
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801612c:	4b0d      	ldr	r3, [pc, #52]	; (8016164 <vPortValidateInterruptPriority+0x7c>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	429a      	cmp	r2, r3
 8016132:	d90a      	bls.n	801614a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016138:	f383 8811 	msr	BASEPRI, r3
 801613c:	f3bf 8f6f 	isb	sy
 8016140:	f3bf 8f4f 	dsb	sy
 8016144:	603b      	str	r3, [r7, #0]
}
 8016146:	bf00      	nop
 8016148:	e7fe      	b.n	8016148 <vPortValidateInterruptPriority+0x60>
	}
 801614a:	bf00      	nop
 801614c:	3714      	adds	r7, #20
 801614e:	46bd      	mov	sp, r7
 8016150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016154:	4770      	bx	lr
 8016156:	bf00      	nop
 8016158:	e000e3f0 	.word	0xe000e3f0
 801615c:	20006268 	.word	0x20006268
 8016160:	e000ed0c 	.word	0xe000ed0c
 8016164:	2000626c 	.word	0x2000626c

08016168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b08a      	sub	sp, #40	; 0x28
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016170:	2300      	movs	r3, #0
 8016172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016174:	f7fe fafa 	bl	801476c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016178:	4b5b      	ldr	r3, [pc, #364]	; (80162e8 <pvPortMalloc+0x180>)
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d101      	bne.n	8016184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016180:	f000 f920 	bl	80163c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016184:	4b59      	ldr	r3, [pc, #356]	; (80162ec <pvPortMalloc+0x184>)
 8016186:	681a      	ldr	r2, [r3, #0]
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	4013      	ands	r3, r2
 801618c:	2b00      	cmp	r3, #0
 801618e:	f040 8093 	bne.w	80162b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d01d      	beq.n	80161d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016198:	2208      	movs	r2, #8
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	4413      	add	r3, r2
 801619e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	f003 0307 	and.w	r3, r3, #7
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d014      	beq.n	80161d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	f023 0307 	bic.w	r3, r3, #7
 80161b0:	3308      	adds	r3, #8
 80161b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f003 0307 	and.w	r3, r3, #7
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d00a      	beq.n	80161d4 <pvPortMalloc+0x6c>
	__asm volatile
 80161be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161c2:	f383 8811 	msr	BASEPRI, r3
 80161c6:	f3bf 8f6f 	isb	sy
 80161ca:	f3bf 8f4f 	dsb	sy
 80161ce:	617b      	str	r3, [r7, #20]
}
 80161d0:	bf00      	nop
 80161d2:	e7fe      	b.n	80161d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d06e      	beq.n	80162b8 <pvPortMalloc+0x150>
 80161da:	4b45      	ldr	r3, [pc, #276]	; (80162f0 <pvPortMalloc+0x188>)
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	687a      	ldr	r2, [r7, #4]
 80161e0:	429a      	cmp	r2, r3
 80161e2:	d869      	bhi.n	80162b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80161e4:	4b43      	ldr	r3, [pc, #268]	; (80162f4 <pvPortMalloc+0x18c>)
 80161e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80161e8:	4b42      	ldr	r3, [pc, #264]	; (80162f4 <pvPortMalloc+0x18c>)
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80161ee:	e004      	b.n	80161fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80161f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80161f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80161fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161fc:	685b      	ldr	r3, [r3, #4]
 80161fe:	687a      	ldr	r2, [r7, #4]
 8016200:	429a      	cmp	r2, r3
 8016202:	d903      	bls.n	801620c <pvPortMalloc+0xa4>
 8016204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d1f1      	bne.n	80161f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801620c:	4b36      	ldr	r3, [pc, #216]	; (80162e8 <pvPortMalloc+0x180>)
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016212:	429a      	cmp	r2, r3
 8016214:	d050      	beq.n	80162b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016216:	6a3b      	ldr	r3, [r7, #32]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	2208      	movs	r2, #8
 801621c:	4413      	add	r3, r2
 801621e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016222:	681a      	ldr	r2, [r3, #0]
 8016224:	6a3b      	ldr	r3, [r7, #32]
 8016226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801622a:	685a      	ldr	r2, [r3, #4]
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	1ad2      	subs	r2, r2, r3
 8016230:	2308      	movs	r3, #8
 8016232:	005b      	lsls	r3, r3, #1
 8016234:	429a      	cmp	r2, r3
 8016236:	d91f      	bls.n	8016278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	4413      	add	r3, r2
 801623e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016240:	69bb      	ldr	r3, [r7, #24]
 8016242:	f003 0307 	and.w	r3, r3, #7
 8016246:	2b00      	cmp	r3, #0
 8016248:	d00a      	beq.n	8016260 <pvPortMalloc+0xf8>
	__asm volatile
 801624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801624e:	f383 8811 	msr	BASEPRI, r3
 8016252:	f3bf 8f6f 	isb	sy
 8016256:	f3bf 8f4f 	dsb	sy
 801625a:	613b      	str	r3, [r7, #16]
}
 801625c:	bf00      	nop
 801625e:	e7fe      	b.n	801625e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016262:	685a      	ldr	r2, [r3, #4]
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	1ad2      	subs	r2, r2, r3
 8016268:	69bb      	ldr	r3, [r7, #24]
 801626a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801626e:	687a      	ldr	r2, [r7, #4]
 8016270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016272:	69b8      	ldr	r0, [r7, #24]
 8016274:	f000 f90a 	bl	801648c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016278:	4b1d      	ldr	r3, [pc, #116]	; (80162f0 <pvPortMalloc+0x188>)
 801627a:	681a      	ldr	r2, [r3, #0]
 801627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801627e:	685b      	ldr	r3, [r3, #4]
 8016280:	1ad3      	subs	r3, r2, r3
 8016282:	4a1b      	ldr	r2, [pc, #108]	; (80162f0 <pvPortMalloc+0x188>)
 8016284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016286:	4b1a      	ldr	r3, [pc, #104]	; (80162f0 <pvPortMalloc+0x188>)
 8016288:	681a      	ldr	r2, [r3, #0]
 801628a:	4b1b      	ldr	r3, [pc, #108]	; (80162f8 <pvPortMalloc+0x190>)
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	429a      	cmp	r2, r3
 8016290:	d203      	bcs.n	801629a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016292:	4b17      	ldr	r3, [pc, #92]	; (80162f0 <pvPortMalloc+0x188>)
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	4a18      	ldr	r2, [pc, #96]	; (80162f8 <pvPortMalloc+0x190>)
 8016298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801629c:	685a      	ldr	r2, [r3, #4]
 801629e:	4b13      	ldr	r3, [pc, #76]	; (80162ec <pvPortMalloc+0x184>)
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	431a      	orrs	r2, r3
 80162a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80162a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162aa:	2200      	movs	r2, #0
 80162ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80162ae:	4b13      	ldr	r3, [pc, #76]	; (80162fc <pvPortMalloc+0x194>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	3301      	adds	r3, #1
 80162b4:	4a11      	ldr	r2, [pc, #68]	; (80162fc <pvPortMalloc+0x194>)
 80162b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80162b8:	f7fe fa66 	bl	8014788 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80162bc:	69fb      	ldr	r3, [r7, #28]
 80162be:	f003 0307 	and.w	r3, r3, #7
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d00a      	beq.n	80162dc <pvPortMalloc+0x174>
	__asm volatile
 80162c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162ca:	f383 8811 	msr	BASEPRI, r3
 80162ce:	f3bf 8f6f 	isb	sy
 80162d2:	f3bf 8f4f 	dsb	sy
 80162d6:	60fb      	str	r3, [r7, #12]
}
 80162d8:	bf00      	nop
 80162da:	e7fe      	b.n	80162da <pvPortMalloc+0x172>
	return pvReturn;
 80162dc:	69fb      	ldr	r3, [r7, #28]
}
 80162de:	4618      	mov	r0, r3
 80162e0:	3728      	adds	r7, #40	; 0x28
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bd80      	pop	{r7, pc}
 80162e6:	bf00      	nop
 80162e8:	2001e918 	.word	0x2001e918
 80162ec:	2001e92c 	.word	0x2001e92c
 80162f0:	2001e91c 	.word	0x2001e91c
 80162f4:	2001e910 	.word	0x2001e910
 80162f8:	2001e920 	.word	0x2001e920
 80162fc:	2001e924 	.word	0x2001e924

08016300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b086      	sub	sp, #24
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d04d      	beq.n	80163ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016312:	2308      	movs	r3, #8
 8016314:	425b      	negs	r3, r3
 8016316:	697a      	ldr	r2, [r7, #20]
 8016318:	4413      	add	r3, r2
 801631a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801631c:	697b      	ldr	r3, [r7, #20]
 801631e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016320:	693b      	ldr	r3, [r7, #16]
 8016322:	685a      	ldr	r2, [r3, #4]
 8016324:	4b24      	ldr	r3, [pc, #144]	; (80163b8 <vPortFree+0xb8>)
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	4013      	ands	r3, r2
 801632a:	2b00      	cmp	r3, #0
 801632c:	d10a      	bne.n	8016344 <vPortFree+0x44>
	__asm volatile
 801632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016332:	f383 8811 	msr	BASEPRI, r3
 8016336:	f3bf 8f6f 	isb	sy
 801633a:	f3bf 8f4f 	dsb	sy
 801633e:	60fb      	str	r3, [r7, #12]
}
 8016340:	bf00      	nop
 8016342:	e7fe      	b.n	8016342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016344:	693b      	ldr	r3, [r7, #16]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d00a      	beq.n	8016362 <vPortFree+0x62>
	__asm volatile
 801634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016350:	f383 8811 	msr	BASEPRI, r3
 8016354:	f3bf 8f6f 	isb	sy
 8016358:	f3bf 8f4f 	dsb	sy
 801635c:	60bb      	str	r3, [r7, #8]
}
 801635e:	bf00      	nop
 8016360:	e7fe      	b.n	8016360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016362:	693b      	ldr	r3, [r7, #16]
 8016364:	685a      	ldr	r2, [r3, #4]
 8016366:	4b14      	ldr	r3, [pc, #80]	; (80163b8 <vPortFree+0xb8>)
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	4013      	ands	r3, r2
 801636c:	2b00      	cmp	r3, #0
 801636e:	d01e      	beq.n	80163ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016370:	693b      	ldr	r3, [r7, #16]
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d11a      	bne.n	80163ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016378:	693b      	ldr	r3, [r7, #16]
 801637a:	685a      	ldr	r2, [r3, #4]
 801637c:	4b0e      	ldr	r3, [pc, #56]	; (80163b8 <vPortFree+0xb8>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	43db      	mvns	r3, r3
 8016382:	401a      	ands	r2, r3
 8016384:	693b      	ldr	r3, [r7, #16]
 8016386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016388:	f7fe f9f0 	bl	801476c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801638c:	693b      	ldr	r3, [r7, #16]
 801638e:	685a      	ldr	r2, [r3, #4]
 8016390:	4b0a      	ldr	r3, [pc, #40]	; (80163bc <vPortFree+0xbc>)
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	4413      	add	r3, r2
 8016396:	4a09      	ldr	r2, [pc, #36]	; (80163bc <vPortFree+0xbc>)
 8016398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801639a:	6938      	ldr	r0, [r7, #16]
 801639c:	f000 f876 	bl	801648c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80163a0:	4b07      	ldr	r3, [pc, #28]	; (80163c0 <vPortFree+0xc0>)
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	3301      	adds	r3, #1
 80163a6:	4a06      	ldr	r2, [pc, #24]	; (80163c0 <vPortFree+0xc0>)
 80163a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80163aa:	f7fe f9ed 	bl	8014788 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80163ae:	bf00      	nop
 80163b0:	3718      	adds	r7, #24
 80163b2:	46bd      	mov	sp, r7
 80163b4:	bd80      	pop	{r7, pc}
 80163b6:	bf00      	nop
 80163b8:	2001e92c 	.word	0x2001e92c
 80163bc:	2001e91c 	.word	0x2001e91c
 80163c0:	2001e928 	.word	0x2001e928

080163c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80163c4:	b480      	push	{r7}
 80163c6:	b085      	sub	sp, #20
 80163c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80163ca:	4b29      	ldr	r3, [pc, #164]	; (8016470 <prvHeapInit+0xac>)
 80163cc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80163ce:	4b29      	ldr	r3, [pc, #164]	; (8016474 <prvHeapInit+0xb0>)
 80163d0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	f003 0307 	and.w	r3, r3, #7
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d00c      	beq.n	80163f6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	3307      	adds	r3, #7
 80163e0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	f023 0307 	bic.w	r3, r3, #7
 80163e8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80163ea:	68ba      	ldr	r2, [r7, #8]
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	1ad3      	subs	r3, r2, r3
 80163f0:	4a20      	ldr	r2, [pc, #128]	; (8016474 <prvHeapInit+0xb0>)
 80163f2:	4413      	add	r3, r2
 80163f4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80163fa:	4a1f      	ldr	r2, [pc, #124]	; (8016478 <prvHeapInit+0xb4>)
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016400:	4b1d      	ldr	r3, [pc, #116]	; (8016478 <prvHeapInit+0xb4>)
 8016402:	2200      	movs	r2, #0
 8016404:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	68ba      	ldr	r2, [r7, #8]
 801640a:	4413      	add	r3, r2
 801640c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801640e:	2208      	movs	r2, #8
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	1a9b      	subs	r3, r3, r2
 8016414:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	f023 0307 	bic.w	r3, r3, #7
 801641c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	4a16      	ldr	r2, [pc, #88]	; (801647c <prvHeapInit+0xb8>)
 8016422:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016424:	4b15      	ldr	r3, [pc, #84]	; (801647c <prvHeapInit+0xb8>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	2200      	movs	r2, #0
 801642a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801642c:	4b13      	ldr	r3, [pc, #76]	; (801647c <prvHeapInit+0xb8>)
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	2200      	movs	r2, #0
 8016432:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016438:	683b      	ldr	r3, [r7, #0]
 801643a:	68fa      	ldr	r2, [r7, #12]
 801643c:	1ad2      	subs	r2, r2, r3
 801643e:	683b      	ldr	r3, [r7, #0]
 8016440:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016442:	4b0e      	ldr	r3, [pc, #56]	; (801647c <prvHeapInit+0xb8>)
 8016444:	681a      	ldr	r2, [r3, #0]
 8016446:	683b      	ldr	r3, [r7, #0]
 8016448:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801644a:	683b      	ldr	r3, [r7, #0]
 801644c:	685b      	ldr	r3, [r3, #4]
 801644e:	4a0c      	ldr	r2, [pc, #48]	; (8016480 <prvHeapInit+0xbc>)
 8016450:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016452:	683b      	ldr	r3, [r7, #0]
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	4a0b      	ldr	r2, [pc, #44]	; (8016484 <prvHeapInit+0xc0>)
 8016458:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801645a:	4b0b      	ldr	r3, [pc, #44]	; (8016488 <prvHeapInit+0xc4>)
 801645c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016460:	601a      	str	r2, [r3, #0]
}
 8016462:	bf00      	nop
 8016464:	3714      	adds	r7, #20
 8016466:	46bd      	mov	sp, r7
 8016468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801646c:	4770      	bx	lr
 801646e:	bf00      	nop
 8016470:	000186a0 	.word	0x000186a0
 8016474:	20006270 	.word	0x20006270
 8016478:	2001e910 	.word	0x2001e910
 801647c:	2001e918 	.word	0x2001e918
 8016480:	2001e920 	.word	0x2001e920
 8016484:	2001e91c 	.word	0x2001e91c
 8016488:	2001e92c 	.word	0x2001e92c

0801648c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801648c:	b480      	push	{r7}
 801648e:	b085      	sub	sp, #20
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016494:	4b28      	ldr	r3, [pc, #160]	; (8016538 <prvInsertBlockIntoFreeList+0xac>)
 8016496:	60fb      	str	r3, [r7, #12]
 8016498:	e002      	b.n	80164a0 <prvInsertBlockIntoFreeList+0x14>
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	60fb      	str	r3, [r7, #12]
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	687a      	ldr	r2, [r7, #4]
 80164a6:	429a      	cmp	r2, r3
 80164a8:	d8f7      	bhi.n	801649a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	685b      	ldr	r3, [r3, #4]
 80164b2:	68ba      	ldr	r2, [r7, #8]
 80164b4:	4413      	add	r3, r2
 80164b6:	687a      	ldr	r2, [r7, #4]
 80164b8:	429a      	cmp	r2, r3
 80164ba:	d108      	bne.n	80164ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	685a      	ldr	r2, [r3, #4]
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	685b      	ldr	r3, [r3, #4]
 80164c4:	441a      	add	r2, r3
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	685b      	ldr	r3, [r3, #4]
 80164d6:	68ba      	ldr	r2, [r7, #8]
 80164d8:	441a      	add	r2, r3
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	429a      	cmp	r2, r3
 80164e0:	d118      	bne.n	8016514 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	681a      	ldr	r2, [r3, #0]
 80164e6:	4b15      	ldr	r3, [pc, #84]	; (801653c <prvInsertBlockIntoFreeList+0xb0>)
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	429a      	cmp	r2, r3
 80164ec:	d00d      	beq.n	801650a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	685a      	ldr	r2, [r3, #4]
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	685b      	ldr	r3, [r3, #4]
 80164f8:	441a      	add	r2, r3
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	681a      	ldr	r2, [r3, #0]
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	601a      	str	r2, [r3, #0]
 8016508:	e008      	b.n	801651c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801650a:	4b0c      	ldr	r3, [pc, #48]	; (801653c <prvInsertBlockIntoFreeList+0xb0>)
 801650c:	681a      	ldr	r2, [r3, #0]
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	601a      	str	r2, [r3, #0]
 8016512:	e003      	b.n	801651c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	681a      	ldr	r2, [r3, #0]
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801651c:	68fa      	ldr	r2, [r7, #12]
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	429a      	cmp	r2, r3
 8016522:	d002      	beq.n	801652a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	687a      	ldr	r2, [r7, #4]
 8016528:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801652a:	bf00      	nop
 801652c:	3714      	adds	r7, #20
 801652e:	46bd      	mov	sp, r7
 8016530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016534:	4770      	bx	lr
 8016536:	bf00      	nop
 8016538:	2001e910 	.word	0x2001e910
 801653c:	2001e918 	.word	0x2001e918

08016540 <__errno>:
 8016540:	4b01      	ldr	r3, [pc, #4]	; (8016548 <__errno+0x8>)
 8016542:	6818      	ldr	r0, [r3, #0]
 8016544:	4770      	bx	lr
 8016546:	bf00      	nop
 8016548:	200000a4 	.word	0x200000a4

0801654c <__libc_init_array>:
 801654c:	b570      	push	{r4, r5, r6, lr}
 801654e:	4d0d      	ldr	r5, [pc, #52]	; (8016584 <__libc_init_array+0x38>)
 8016550:	4c0d      	ldr	r4, [pc, #52]	; (8016588 <__libc_init_array+0x3c>)
 8016552:	1b64      	subs	r4, r4, r5
 8016554:	10a4      	asrs	r4, r4, #2
 8016556:	2600      	movs	r6, #0
 8016558:	42a6      	cmp	r6, r4
 801655a:	d109      	bne.n	8016570 <__libc_init_array+0x24>
 801655c:	4d0b      	ldr	r5, [pc, #44]	; (801658c <__libc_init_array+0x40>)
 801655e:	4c0c      	ldr	r4, [pc, #48]	; (8016590 <__libc_init_array+0x44>)
 8016560:	f005 fd2c 	bl	801bfbc <_init>
 8016564:	1b64      	subs	r4, r4, r5
 8016566:	10a4      	asrs	r4, r4, #2
 8016568:	2600      	movs	r6, #0
 801656a:	42a6      	cmp	r6, r4
 801656c:	d105      	bne.n	801657a <__libc_init_array+0x2e>
 801656e:	bd70      	pop	{r4, r5, r6, pc}
 8016570:	f855 3b04 	ldr.w	r3, [r5], #4
 8016574:	4798      	blx	r3
 8016576:	3601      	adds	r6, #1
 8016578:	e7ee      	b.n	8016558 <__libc_init_array+0xc>
 801657a:	f855 3b04 	ldr.w	r3, [r5], #4
 801657e:	4798      	blx	r3
 8016580:	3601      	adds	r6, #1
 8016582:	e7f2      	b.n	801656a <__libc_init_array+0x1e>
 8016584:	0801d060 	.word	0x0801d060
 8016588:	0801d060 	.word	0x0801d060
 801658c:	0801d060 	.word	0x0801d060
 8016590:	0801d064 	.word	0x0801d064

08016594 <memcpy>:
 8016594:	440a      	add	r2, r1
 8016596:	4291      	cmp	r1, r2
 8016598:	f100 33ff 	add.w	r3, r0, #4294967295
 801659c:	d100      	bne.n	80165a0 <memcpy+0xc>
 801659e:	4770      	bx	lr
 80165a0:	b510      	push	{r4, lr}
 80165a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80165aa:	4291      	cmp	r1, r2
 80165ac:	d1f9      	bne.n	80165a2 <memcpy+0xe>
 80165ae:	bd10      	pop	{r4, pc}

080165b0 <memset>:
 80165b0:	4402      	add	r2, r0
 80165b2:	4603      	mov	r3, r0
 80165b4:	4293      	cmp	r3, r2
 80165b6:	d100      	bne.n	80165ba <memset+0xa>
 80165b8:	4770      	bx	lr
 80165ba:	f803 1b01 	strb.w	r1, [r3], #1
 80165be:	e7f9      	b.n	80165b4 <memset+0x4>

080165c0 <__cvt>:
 80165c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80165c4:	ec55 4b10 	vmov	r4, r5, d0
 80165c8:	2d00      	cmp	r5, #0
 80165ca:	460e      	mov	r6, r1
 80165cc:	4619      	mov	r1, r3
 80165ce:	462b      	mov	r3, r5
 80165d0:	bfbb      	ittet	lt
 80165d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80165d6:	461d      	movlt	r5, r3
 80165d8:	2300      	movge	r3, #0
 80165da:	232d      	movlt	r3, #45	; 0x2d
 80165dc:	700b      	strb	r3, [r1, #0]
 80165de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80165e4:	4691      	mov	r9, r2
 80165e6:	f023 0820 	bic.w	r8, r3, #32
 80165ea:	bfbc      	itt	lt
 80165ec:	4622      	movlt	r2, r4
 80165ee:	4614      	movlt	r4, r2
 80165f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80165f4:	d005      	beq.n	8016602 <__cvt+0x42>
 80165f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80165fa:	d100      	bne.n	80165fe <__cvt+0x3e>
 80165fc:	3601      	adds	r6, #1
 80165fe:	2102      	movs	r1, #2
 8016600:	e000      	b.n	8016604 <__cvt+0x44>
 8016602:	2103      	movs	r1, #3
 8016604:	ab03      	add	r3, sp, #12
 8016606:	9301      	str	r3, [sp, #4]
 8016608:	ab02      	add	r3, sp, #8
 801660a:	9300      	str	r3, [sp, #0]
 801660c:	ec45 4b10 	vmov	d0, r4, r5
 8016610:	4653      	mov	r3, sl
 8016612:	4632      	mov	r2, r6
 8016614:	f001 fdac 	bl	8018170 <_dtoa_r>
 8016618:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801661c:	4607      	mov	r7, r0
 801661e:	d102      	bne.n	8016626 <__cvt+0x66>
 8016620:	f019 0f01 	tst.w	r9, #1
 8016624:	d022      	beq.n	801666c <__cvt+0xac>
 8016626:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801662a:	eb07 0906 	add.w	r9, r7, r6
 801662e:	d110      	bne.n	8016652 <__cvt+0x92>
 8016630:	783b      	ldrb	r3, [r7, #0]
 8016632:	2b30      	cmp	r3, #48	; 0x30
 8016634:	d10a      	bne.n	801664c <__cvt+0x8c>
 8016636:	2200      	movs	r2, #0
 8016638:	2300      	movs	r3, #0
 801663a:	4620      	mov	r0, r4
 801663c:	4629      	mov	r1, r5
 801663e:	f7ea fa5b 	bl	8000af8 <__aeabi_dcmpeq>
 8016642:	b918      	cbnz	r0, 801664c <__cvt+0x8c>
 8016644:	f1c6 0601 	rsb	r6, r6, #1
 8016648:	f8ca 6000 	str.w	r6, [sl]
 801664c:	f8da 3000 	ldr.w	r3, [sl]
 8016650:	4499      	add	r9, r3
 8016652:	2200      	movs	r2, #0
 8016654:	2300      	movs	r3, #0
 8016656:	4620      	mov	r0, r4
 8016658:	4629      	mov	r1, r5
 801665a:	f7ea fa4d 	bl	8000af8 <__aeabi_dcmpeq>
 801665e:	b108      	cbz	r0, 8016664 <__cvt+0xa4>
 8016660:	f8cd 900c 	str.w	r9, [sp, #12]
 8016664:	2230      	movs	r2, #48	; 0x30
 8016666:	9b03      	ldr	r3, [sp, #12]
 8016668:	454b      	cmp	r3, r9
 801666a:	d307      	bcc.n	801667c <__cvt+0xbc>
 801666c:	9b03      	ldr	r3, [sp, #12]
 801666e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016670:	1bdb      	subs	r3, r3, r7
 8016672:	4638      	mov	r0, r7
 8016674:	6013      	str	r3, [r2, #0]
 8016676:	b004      	add	sp, #16
 8016678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801667c:	1c59      	adds	r1, r3, #1
 801667e:	9103      	str	r1, [sp, #12]
 8016680:	701a      	strb	r2, [r3, #0]
 8016682:	e7f0      	b.n	8016666 <__cvt+0xa6>

08016684 <__exponent>:
 8016684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016686:	4603      	mov	r3, r0
 8016688:	2900      	cmp	r1, #0
 801668a:	bfb8      	it	lt
 801668c:	4249      	neglt	r1, r1
 801668e:	f803 2b02 	strb.w	r2, [r3], #2
 8016692:	bfb4      	ite	lt
 8016694:	222d      	movlt	r2, #45	; 0x2d
 8016696:	222b      	movge	r2, #43	; 0x2b
 8016698:	2909      	cmp	r1, #9
 801669a:	7042      	strb	r2, [r0, #1]
 801669c:	dd2a      	ble.n	80166f4 <__exponent+0x70>
 801669e:	f10d 0407 	add.w	r4, sp, #7
 80166a2:	46a4      	mov	ip, r4
 80166a4:	270a      	movs	r7, #10
 80166a6:	46a6      	mov	lr, r4
 80166a8:	460a      	mov	r2, r1
 80166aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80166ae:	fb07 1516 	mls	r5, r7, r6, r1
 80166b2:	3530      	adds	r5, #48	; 0x30
 80166b4:	2a63      	cmp	r2, #99	; 0x63
 80166b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80166ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80166be:	4631      	mov	r1, r6
 80166c0:	dcf1      	bgt.n	80166a6 <__exponent+0x22>
 80166c2:	3130      	adds	r1, #48	; 0x30
 80166c4:	f1ae 0502 	sub.w	r5, lr, #2
 80166c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80166cc:	1c44      	adds	r4, r0, #1
 80166ce:	4629      	mov	r1, r5
 80166d0:	4561      	cmp	r1, ip
 80166d2:	d30a      	bcc.n	80166ea <__exponent+0x66>
 80166d4:	f10d 0209 	add.w	r2, sp, #9
 80166d8:	eba2 020e 	sub.w	r2, r2, lr
 80166dc:	4565      	cmp	r5, ip
 80166de:	bf88      	it	hi
 80166e0:	2200      	movhi	r2, #0
 80166e2:	4413      	add	r3, r2
 80166e4:	1a18      	subs	r0, r3, r0
 80166e6:	b003      	add	sp, #12
 80166e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80166ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80166f2:	e7ed      	b.n	80166d0 <__exponent+0x4c>
 80166f4:	2330      	movs	r3, #48	; 0x30
 80166f6:	3130      	adds	r1, #48	; 0x30
 80166f8:	7083      	strb	r3, [r0, #2]
 80166fa:	70c1      	strb	r1, [r0, #3]
 80166fc:	1d03      	adds	r3, r0, #4
 80166fe:	e7f1      	b.n	80166e4 <__exponent+0x60>

08016700 <_printf_float>:
 8016700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016704:	ed2d 8b02 	vpush	{d8}
 8016708:	b08d      	sub	sp, #52	; 0x34
 801670a:	460c      	mov	r4, r1
 801670c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016710:	4616      	mov	r6, r2
 8016712:	461f      	mov	r7, r3
 8016714:	4605      	mov	r5, r0
 8016716:	f002 fe89 	bl	801942c <_localeconv_r>
 801671a:	f8d0 a000 	ldr.w	sl, [r0]
 801671e:	4650      	mov	r0, sl
 8016720:	f7e9 fd6e 	bl	8000200 <strlen>
 8016724:	2300      	movs	r3, #0
 8016726:	930a      	str	r3, [sp, #40]	; 0x28
 8016728:	6823      	ldr	r3, [r4, #0]
 801672a:	9305      	str	r3, [sp, #20]
 801672c:	f8d8 3000 	ldr.w	r3, [r8]
 8016730:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016734:	3307      	adds	r3, #7
 8016736:	f023 0307 	bic.w	r3, r3, #7
 801673a:	f103 0208 	add.w	r2, r3, #8
 801673e:	f8c8 2000 	str.w	r2, [r8]
 8016742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016746:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801674a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801674e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016752:	9307      	str	r3, [sp, #28]
 8016754:	f8cd 8018 	str.w	r8, [sp, #24]
 8016758:	ee08 0a10 	vmov	s16, r0
 801675c:	4b9f      	ldr	r3, [pc, #636]	; (80169dc <_printf_float+0x2dc>)
 801675e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016762:	f04f 32ff 	mov.w	r2, #4294967295
 8016766:	f7ea f9f9 	bl	8000b5c <__aeabi_dcmpun>
 801676a:	bb88      	cbnz	r0, 80167d0 <_printf_float+0xd0>
 801676c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016770:	4b9a      	ldr	r3, [pc, #616]	; (80169dc <_printf_float+0x2dc>)
 8016772:	f04f 32ff 	mov.w	r2, #4294967295
 8016776:	f7ea f9d3 	bl	8000b20 <__aeabi_dcmple>
 801677a:	bb48      	cbnz	r0, 80167d0 <_printf_float+0xd0>
 801677c:	2200      	movs	r2, #0
 801677e:	2300      	movs	r3, #0
 8016780:	4640      	mov	r0, r8
 8016782:	4649      	mov	r1, r9
 8016784:	f7ea f9c2 	bl	8000b0c <__aeabi_dcmplt>
 8016788:	b110      	cbz	r0, 8016790 <_printf_float+0x90>
 801678a:	232d      	movs	r3, #45	; 0x2d
 801678c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016790:	4b93      	ldr	r3, [pc, #588]	; (80169e0 <_printf_float+0x2e0>)
 8016792:	4894      	ldr	r0, [pc, #592]	; (80169e4 <_printf_float+0x2e4>)
 8016794:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016798:	bf94      	ite	ls
 801679a:	4698      	movls	r8, r3
 801679c:	4680      	movhi	r8, r0
 801679e:	2303      	movs	r3, #3
 80167a0:	6123      	str	r3, [r4, #16]
 80167a2:	9b05      	ldr	r3, [sp, #20]
 80167a4:	f023 0204 	bic.w	r2, r3, #4
 80167a8:	6022      	str	r2, [r4, #0]
 80167aa:	f04f 0900 	mov.w	r9, #0
 80167ae:	9700      	str	r7, [sp, #0]
 80167b0:	4633      	mov	r3, r6
 80167b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80167b4:	4621      	mov	r1, r4
 80167b6:	4628      	mov	r0, r5
 80167b8:	f000 f9d8 	bl	8016b6c <_printf_common>
 80167bc:	3001      	adds	r0, #1
 80167be:	f040 8090 	bne.w	80168e2 <_printf_float+0x1e2>
 80167c2:	f04f 30ff 	mov.w	r0, #4294967295
 80167c6:	b00d      	add	sp, #52	; 0x34
 80167c8:	ecbd 8b02 	vpop	{d8}
 80167cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167d0:	4642      	mov	r2, r8
 80167d2:	464b      	mov	r3, r9
 80167d4:	4640      	mov	r0, r8
 80167d6:	4649      	mov	r1, r9
 80167d8:	f7ea f9c0 	bl	8000b5c <__aeabi_dcmpun>
 80167dc:	b140      	cbz	r0, 80167f0 <_printf_float+0xf0>
 80167de:	464b      	mov	r3, r9
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	bfbc      	itt	lt
 80167e4:	232d      	movlt	r3, #45	; 0x2d
 80167e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80167ea:	487f      	ldr	r0, [pc, #508]	; (80169e8 <_printf_float+0x2e8>)
 80167ec:	4b7f      	ldr	r3, [pc, #508]	; (80169ec <_printf_float+0x2ec>)
 80167ee:	e7d1      	b.n	8016794 <_printf_float+0x94>
 80167f0:	6863      	ldr	r3, [r4, #4]
 80167f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80167f6:	9206      	str	r2, [sp, #24]
 80167f8:	1c5a      	adds	r2, r3, #1
 80167fa:	d13f      	bne.n	801687c <_printf_float+0x17c>
 80167fc:	2306      	movs	r3, #6
 80167fe:	6063      	str	r3, [r4, #4]
 8016800:	9b05      	ldr	r3, [sp, #20]
 8016802:	6861      	ldr	r1, [r4, #4]
 8016804:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016808:	2300      	movs	r3, #0
 801680a:	9303      	str	r3, [sp, #12]
 801680c:	ab0a      	add	r3, sp, #40	; 0x28
 801680e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016812:	ab09      	add	r3, sp, #36	; 0x24
 8016814:	ec49 8b10 	vmov	d0, r8, r9
 8016818:	9300      	str	r3, [sp, #0]
 801681a:	6022      	str	r2, [r4, #0]
 801681c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016820:	4628      	mov	r0, r5
 8016822:	f7ff fecd 	bl	80165c0 <__cvt>
 8016826:	9b06      	ldr	r3, [sp, #24]
 8016828:	9909      	ldr	r1, [sp, #36]	; 0x24
 801682a:	2b47      	cmp	r3, #71	; 0x47
 801682c:	4680      	mov	r8, r0
 801682e:	d108      	bne.n	8016842 <_printf_float+0x142>
 8016830:	1cc8      	adds	r0, r1, #3
 8016832:	db02      	blt.n	801683a <_printf_float+0x13a>
 8016834:	6863      	ldr	r3, [r4, #4]
 8016836:	4299      	cmp	r1, r3
 8016838:	dd41      	ble.n	80168be <_printf_float+0x1be>
 801683a:	f1ab 0b02 	sub.w	fp, fp, #2
 801683e:	fa5f fb8b 	uxtb.w	fp, fp
 8016842:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016846:	d820      	bhi.n	801688a <_printf_float+0x18a>
 8016848:	3901      	subs	r1, #1
 801684a:	465a      	mov	r2, fp
 801684c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016850:	9109      	str	r1, [sp, #36]	; 0x24
 8016852:	f7ff ff17 	bl	8016684 <__exponent>
 8016856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016858:	1813      	adds	r3, r2, r0
 801685a:	2a01      	cmp	r2, #1
 801685c:	4681      	mov	r9, r0
 801685e:	6123      	str	r3, [r4, #16]
 8016860:	dc02      	bgt.n	8016868 <_printf_float+0x168>
 8016862:	6822      	ldr	r2, [r4, #0]
 8016864:	07d2      	lsls	r2, r2, #31
 8016866:	d501      	bpl.n	801686c <_printf_float+0x16c>
 8016868:	3301      	adds	r3, #1
 801686a:	6123      	str	r3, [r4, #16]
 801686c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016870:	2b00      	cmp	r3, #0
 8016872:	d09c      	beq.n	80167ae <_printf_float+0xae>
 8016874:	232d      	movs	r3, #45	; 0x2d
 8016876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801687a:	e798      	b.n	80167ae <_printf_float+0xae>
 801687c:	9a06      	ldr	r2, [sp, #24]
 801687e:	2a47      	cmp	r2, #71	; 0x47
 8016880:	d1be      	bne.n	8016800 <_printf_float+0x100>
 8016882:	2b00      	cmp	r3, #0
 8016884:	d1bc      	bne.n	8016800 <_printf_float+0x100>
 8016886:	2301      	movs	r3, #1
 8016888:	e7b9      	b.n	80167fe <_printf_float+0xfe>
 801688a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801688e:	d118      	bne.n	80168c2 <_printf_float+0x1c2>
 8016890:	2900      	cmp	r1, #0
 8016892:	6863      	ldr	r3, [r4, #4]
 8016894:	dd0b      	ble.n	80168ae <_printf_float+0x1ae>
 8016896:	6121      	str	r1, [r4, #16]
 8016898:	b913      	cbnz	r3, 80168a0 <_printf_float+0x1a0>
 801689a:	6822      	ldr	r2, [r4, #0]
 801689c:	07d0      	lsls	r0, r2, #31
 801689e:	d502      	bpl.n	80168a6 <_printf_float+0x1a6>
 80168a0:	3301      	adds	r3, #1
 80168a2:	440b      	add	r3, r1
 80168a4:	6123      	str	r3, [r4, #16]
 80168a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80168a8:	f04f 0900 	mov.w	r9, #0
 80168ac:	e7de      	b.n	801686c <_printf_float+0x16c>
 80168ae:	b913      	cbnz	r3, 80168b6 <_printf_float+0x1b6>
 80168b0:	6822      	ldr	r2, [r4, #0]
 80168b2:	07d2      	lsls	r2, r2, #31
 80168b4:	d501      	bpl.n	80168ba <_printf_float+0x1ba>
 80168b6:	3302      	adds	r3, #2
 80168b8:	e7f4      	b.n	80168a4 <_printf_float+0x1a4>
 80168ba:	2301      	movs	r3, #1
 80168bc:	e7f2      	b.n	80168a4 <_printf_float+0x1a4>
 80168be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80168c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168c4:	4299      	cmp	r1, r3
 80168c6:	db05      	blt.n	80168d4 <_printf_float+0x1d4>
 80168c8:	6823      	ldr	r3, [r4, #0]
 80168ca:	6121      	str	r1, [r4, #16]
 80168cc:	07d8      	lsls	r0, r3, #31
 80168ce:	d5ea      	bpl.n	80168a6 <_printf_float+0x1a6>
 80168d0:	1c4b      	adds	r3, r1, #1
 80168d2:	e7e7      	b.n	80168a4 <_printf_float+0x1a4>
 80168d4:	2900      	cmp	r1, #0
 80168d6:	bfd4      	ite	le
 80168d8:	f1c1 0202 	rsble	r2, r1, #2
 80168dc:	2201      	movgt	r2, #1
 80168de:	4413      	add	r3, r2
 80168e0:	e7e0      	b.n	80168a4 <_printf_float+0x1a4>
 80168e2:	6823      	ldr	r3, [r4, #0]
 80168e4:	055a      	lsls	r2, r3, #21
 80168e6:	d407      	bmi.n	80168f8 <_printf_float+0x1f8>
 80168e8:	6923      	ldr	r3, [r4, #16]
 80168ea:	4642      	mov	r2, r8
 80168ec:	4631      	mov	r1, r6
 80168ee:	4628      	mov	r0, r5
 80168f0:	47b8      	blx	r7
 80168f2:	3001      	adds	r0, #1
 80168f4:	d12c      	bne.n	8016950 <_printf_float+0x250>
 80168f6:	e764      	b.n	80167c2 <_printf_float+0xc2>
 80168f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80168fc:	f240 80e0 	bls.w	8016ac0 <_printf_float+0x3c0>
 8016900:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016904:	2200      	movs	r2, #0
 8016906:	2300      	movs	r3, #0
 8016908:	f7ea f8f6 	bl	8000af8 <__aeabi_dcmpeq>
 801690c:	2800      	cmp	r0, #0
 801690e:	d034      	beq.n	801697a <_printf_float+0x27a>
 8016910:	4a37      	ldr	r2, [pc, #220]	; (80169f0 <_printf_float+0x2f0>)
 8016912:	2301      	movs	r3, #1
 8016914:	4631      	mov	r1, r6
 8016916:	4628      	mov	r0, r5
 8016918:	47b8      	blx	r7
 801691a:	3001      	adds	r0, #1
 801691c:	f43f af51 	beq.w	80167c2 <_printf_float+0xc2>
 8016920:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016924:	429a      	cmp	r2, r3
 8016926:	db02      	blt.n	801692e <_printf_float+0x22e>
 8016928:	6823      	ldr	r3, [r4, #0]
 801692a:	07d8      	lsls	r0, r3, #31
 801692c:	d510      	bpl.n	8016950 <_printf_float+0x250>
 801692e:	ee18 3a10 	vmov	r3, s16
 8016932:	4652      	mov	r2, sl
 8016934:	4631      	mov	r1, r6
 8016936:	4628      	mov	r0, r5
 8016938:	47b8      	blx	r7
 801693a:	3001      	adds	r0, #1
 801693c:	f43f af41 	beq.w	80167c2 <_printf_float+0xc2>
 8016940:	f04f 0800 	mov.w	r8, #0
 8016944:	f104 091a 	add.w	r9, r4, #26
 8016948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801694a:	3b01      	subs	r3, #1
 801694c:	4543      	cmp	r3, r8
 801694e:	dc09      	bgt.n	8016964 <_printf_float+0x264>
 8016950:	6823      	ldr	r3, [r4, #0]
 8016952:	079b      	lsls	r3, r3, #30
 8016954:	f100 8105 	bmi.w	8016b62 <_printf_float+0x462>
 8016958:	68e0      	ldr	r0, [r4, #12]
 801695a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801695c:	4298      	cmp	r0, r3
 801695e:	bfb8      	it	lt
 8016960:	4618      	movlt	r0, r3
 8016962:	e730      	b.n	80167c6 <_printf_float+0xc6>
 8016964:	2301      	movs	r3, #1
 8016966:	464a      	mov	r2, r9
 8016968:	4631      	mov	r1, r6
 801696a:	4628      	mov	r0, r5
 801696c:	47b8      	blx	r7
 801696e:	3001      	adds	r0, #1
 8016970:	f43f af27 	beq.w	80167c2 <_printf_float+0xc2>
 8016974:	f108 0801 	add.w	r8, r8, #1
 8016978:	e7e6      	b.n	8016948 <_printf_float+0x248>
 801697a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801697c:	2b00      	cmp	r3, #0
 801697e:	dc39      	bgt.n	80169f4 <_printf_float+0x2f4>
 8016980:	4a1b      	ldr	r2, [pc, #108]	; (80169f0 <_printf_float+0x2f0>)
 8016982:	2301      	movs	r3, #1
 8016984:	4631      	mov	r1, r6
 8016986:	4628      	mov	r0, r5
 8016988:	47b8      	blx	r7
 801698a:	3001      	adds	r0, #1
 801698c:	f43f af19 	beq.w	80167c2 <_printf_float+0xc2>
 8016990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016994:	4313      	orrs	r3, r2
 8016996:	d102      	bne.n	801699e <_printf_float+0x29e>
 8016998:	6823      	ldr	r3, [r4, #0]
 801699a:	07d9      	lsls	r1, r3, #31
 801699c:	d5d8      	bpl.n	8016950 <_printf_float+0x250>
 801699e:	ee18 3a10 	vmov	r3, s16
 80169a2:	4652      	mov	r2, sl
 80169a4:	4631      	mov	r1, r6
 80169a6:	4628      	mov	r0, r5
 80169a8:	47b8      	blx	r7
 80169aa:	3001      	adds	r0, #1
 80169ac:	f43f af09 	beq.w	80167c2 <_printf_float+0xc2>
 80169b0:	f04f 0900 	mov.w	r9, #0
 80169b4:	f104 0a1a 	add.w	sl, r4, #26
 80169b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169ba:	425b      	negs	r3, r3
 80169bc:	454b      	cmp	r3, r9
 80169be:	dc01      	bgt.n	80169c4 <_printf_float+0x2c4>
 80169c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169c2:	e792      	b.n	80168ea <_printf_float+0x1ea>
 80169c4:	2301      	movs	r3, #1
 80169c6:	4652      	mov	r2, sl
 80169c8:	4631      	mov	r1, r6
 80169ca:	4628      	mov	r0, r5
 80169cc:	47b8      	blx	r7
 80169ce:	3001      	adds	r0, #1
 80169d0:	f43f aef7 	beq.w	80167c2 <_printf_float+0xc2>
 80169d4:	f109 0901 	add.w	r9, r9, #1
 80169d8:	e7ee      	b.n	80169b8 <_printf_float+0x2b8>
 80169da:	bf00      	nop
 80169dc:	7fefffff 	.word	0x7fefffff
 80169e0:	0801c9dc 	.word	0x0801c9dc
 80169e4:	0801c9e0 	.word	0x0801c9e0
 80169e8:	0801c9e8 	.word	0x0801c9e8
 80169ec:	0801c9e4 	.word	0x0801c9e4
 80169f0:	0801c9ec 	.word	0x0801c9ec
 80169f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80169f8:	429a      	cmp	r2, r3
 80169fa:	bfa8      	it	ge
 80169fc:	461a      	movge	r2, r3
 80169fe:	2a00      	cmp	r2, #0
 8016a00:	4691      	mov	r9, r2
 8016a02:	dc37      	bgt.n	8016a74 <_printf_float+0x374>
 8016a04:	f04f 0b00 	mov.w	fp, #0
 8016a08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016a0c:	f104 021a 	add.w	r2, r4, #26
 8016a10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016a12:	9305      	str	r3, [sp, #20]
 8016a14:	eba3 0309 	sub.w	r3, r3, r9
 8016a18:	455b      	cmp	r3, fp
 8016a1a:	dc33      	bgt.n	8016a84 <_printf_float+0x384>
 8016a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016a20:	429a      	cmp	r2, r3
 8016a22:	db3b      	blt.n	8016a9c <_printf_float+0x39c>
 8016a24:	6823      	ldr	r3, [r4, #0]
 8016a26:	07da      	lsls	r2, r3, #31
 8016a28:	d438      	bmi.n	8016a9c <_printf_float+0x39c>
 8016a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a2c:	9a05      	ldr	r2, [sp, #20]
 8016a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016a30:	1a9a      	subs	r2, r3, r2
 8016a32:	eba3 0901 	sub.w	r9, r3, r1
 8016a36:	4591      	cmp	r9, r2
 8016a38:	bfa8      	it	ge
 8016a3a:	4691      	movge	r9, r2
 8016a3c:	f1b9 0f00 	cmp.w	r9, #0
 8016a40:	dc35      	bgt.n	8016aae <_printf_float+0x3ae>
 8016a42:	f04f 0800 	mov.w	r8, #0
 8016a46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016a4a:	f104 0a1a 	add.w	sl, r4, #26
 8016a4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016a52:	1a9b      	subs	r3, r3, r2
 8016a54:	eba3 0309 	sub.w	r3, r3, r9
 8016a58:	4543      	cmp	r3, r8
 8016a5a:	f77f af79 	ble.w	8016950 <_printf_float+0x250>
 8016a5e:	2301      	movs	r3, #1
 8016a60:	4652      	mov	r2, sl
 8016a62:	4631      	mov	r1, r6
 8016a64:	4628      	mov	r0, r5
 8016a66:	47b8      	blx	r7
 8016a68:	3001      	adds	r0, #1
 8016a6a:	f43f aeaa 	beq.w	80167c2 <_printf_float+0xc2>
 8016a6e:	f108 0801 	add.w	r8, r8, #1
 8016a72:	e7ec      	b.n	8016a4e <_printf_float+0x34e>
 8016a74:	4613      	mov	r3, r2
 8016a76:	4631      	mov	r1, r6
 8016a78:	4642      	mov	r2, r8
 8016a7a:	4628      	mov	r0, r5
 8016a7c:	47b8      	blx	r7
 8016a7e:	3001      	adds	r0, #1
 8016a80:	d1c0      	bne.n	8016a04 <_printf_float+0x304>
 8016a82:	e69e      	b.n	80167c2 <_printf_float+0xc2>
 8016a84:	2301      	movs	r3, #1
 8016a86:	4631      	mov	r1, r6
 8016a88:	4628      	mov	r0, r5
 8016a8a:	9205      	str	r2, [sp, #20]
 8016a8c:	47b8      	blx	r7
 8016a8e:	3001      	adds	r0, #1
 8016a90:	f43f ae97 	beq.w	80167c2 <_printf_float+0xc2>
 8016a94:	9a05      	ldr	r2, [sp, #20]
 8016a96:	f10b 0b01 	add.w	fp, fp, #1
 8016a9a:	e7b9      	b.n	8016a10 <_printf_float+0x310>
 8016a9c:	ee18 3a10 	vmov	r3, s16
 8016aa0:	4652      	mov	r2, sl
 8016aa2:	4631      	mov	r1, r6
 8016aa4:	4628      	mov	r0, r5
 8016aa6:	47b8      	blx	r7
 8016aa8:	3001      	adds	r0, #1
 8016aaa:	d1be      	bne.n	8016a2a <_printf_float+0x32a>
 8016aac:	e689      	b.n	80167c2 <_printf_float+0xc2>
 8016aae:	9a05      	ldr	r2, [sp, #20]
 8016ab0:	464b      	mov	r3, r9
 8016ab2:	4442      	add	r2, r8
 8016ab4:	4631      	mov	r1, r6
 8016ab6:	4628      	mov	r0, r5
 8016ab8:	47b8      	blx	r7
 8016aba:	3001      	adds	r0, #1
 8016abc:	d1c1      	bne.n	8016a42 <_printf_float+0x342>
 8016abe:	e680      	b.n	80167c2 <_printf_float+0xc2>
 8016ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016ac2:	2a01      	cmp	r2, #1
 8016ac4:	dc01      	bgt.n	8016aca <_printf_float+0x3ca>
 8016ac6:	07db      	lsls	r3, r3, #31
 8016ac8:	d538      	bpl.n	8016b3c <_printf_float+0x43c>
 8016aca:	2301      	movs	r3, #1
 8016acc:	4642      	mov	r2, r8
 8016ace:	4631      	mov	r1, r6
 8016ad0:	4628      	mov	r0, r5
 8016ad2:	47b8      	blx	r7
 8016ad4:	3001      	adds	r0, #1
 8016ad6:	f43f ae74 	beq.w	80167c2 <_printf_float+0xc2>
 8016ada:	ee18 3a10 	vmov	r3, s16
 8016ade:	4652      	mov	r2, sl
 8016ae0:	4631      	mov	r1, r6
 8016ae2:	4628      	mov	r0, r5
 8016ae4:	47b8      	blx	r7
 8016ae6:	3001      	adds	r0, #1
 8016ae8:	f43f ae6b 	beq.w	80167c2 <_printf_float+0xc2>
 8016aec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016af0:	2200      	movs	r2, #0
 8016af2:	2300      	movs	r3, #0
 8016af4:	f7ea f800 	bl	8000af8 <__aeabi_dcmpeq>
 8016af8:	b9d8      	cbnz	r0, 8016b32 <_printf_float+0x432>
 8016afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016afc:	f108 0201 	add.w	r2, r8, #1
 8016b00:	3b01      	subs	r3, #1
 8016b02:	4631      	mov	r1, r6
 8016b04:	4628      	mov	r0, r5
 8016b06:	47b8      	blx	r7
 8016b08:	3001      	adds	r0, #1
 8016b0a:	d10e      	bne.n	8016b2a <_printf_float+0x42a>
 8016b0c:	e659      	b.n	80167c2 <_printf_float+0xc2>
 8016b0e:	2301      	movs	r3, #1
 8016b10:	4652      	mov	r2, sl
 8016b12:	4631      	mov	r1, r6
 8016b14:	4628      	mov	r0, r5
 8016b16:	47b8      	blx	r7
 8016b18:	3001      	adds	r0, #1
 8016b1a:	f43f ae52 	beq.w	80167c2 <_printf_float+0xc2>
 8016b1e:	f108 0801 	add.w	r8, r8, #1
 8016b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b24:	3b01      	subs	r3, #1
 8016b26:	4543      	cmp	r3, r8
 8016b28:	dcf1      	bgt.n	8016b0e <_printf_float+0x40e>
 8016b2a:	464b      	mov	r3, r9
 8016b2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016b30:	e6dc      	b.n	80168ec <_printf_float+0x1ec>
 8016b32:	f04f 0800 	mov.w	r8, #0
 8016b36:	f104 0a1a 	add.w	sl, r4, #26
 8016b3a:	e7f2      	b.n	8016b22 <_printf_float+0x422>
 8016b3c:	2301      	movs	r3, #1
 8016b3e:	4642      	mov	r2, r8
 8016b40:	e7df      	b.n	8016b02 <_printf_float+0x402>
 8016b42:	2301      	movs	r3, #1
 8016b44:	464a      	mov	r2, r9
 8016b46:	4631      	mov	r1, r6
 8016b48:	4628      	mov	r0, r5
 8016b4a:	47b8      	blx	r7
 8016b4c:	3001      	adds	r0, #1
 8016b4e:	f43f ae38 	beq.w	80167c2 <_printf_float+0xc2>
 8016b52:	f108 0801 	add.w	r8, r8, #1
 8016b56:	68e3      	ldr	r3, [r4, #12]
 8016b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b5a:	1a5b      	subs	r3, r3, r1
 8016b5c:	4543      	cmp	r3, r8
 8016b5e:	dcf0      	bgt.n	8016b42 <_printf_float+0x442>
 8016b60:	e6fa      	b.n	8016958 <_printf_float+0x258>
 8016b62:	f04f 0800 	mov.w	r8, #0
 8016b66:	f104 0919 	add.w	r9, r4, #25
 8016b6a:	e7f4      	b.n	8016b56 <_printf_float+0x456>

08016b6c <_printf_common>:
 8016b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b70:	4616      	mov	r6, r2
 8016b72:	4699      	mov	r9, r3
 8016b74:	688a      	ldr	r2, [r1, #8]
 8016b76:	690b      	ldr	r3, [r1, #16]
 8016b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016b7c:	4293      	cmp	r3, r2
 8016b7e:	bfb8      	it	lt
 8016b80:	4613      	movlt	r3, r2
 8016b82:	6033      	str	r3, [r6, #0]
 8016b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016b88:	4607      	mov	r7, r0
 8016b8a:	460c      	mov	r4, r1
 8016b8c:	b10a      	cbz	r2, 8016b92 <_printf_common+0x26>
 8016b8e:	3301      	adds	r3, #1
 8016b90:	6033      	str	r3, [r6, #0]
 8016b92:	6823      	ldr	r3, [r4, #0]
 8016b94:	0699      	lsls	r1, r3, #26
 8016b96:	bf42      	ittt	mi
 8016b98:	6833      	ldrmi	r3, [r6, #0]
 8016b9a:	3302      	addmi	r3, #2
 8016b9c:	6033      	strmi	r3, [r6, #0]
 8016b9e:	6825      	ldr	r5, [r4, #0]
 8016ba0:	f015 0506 	ands.w	r5, r5, #6
 8016ba4:	d106      	bne.n	8016bb4 <_printf_common+0x48>
 8016ba6:	f104 0a19 	add.w	sl, r4, #25
 8016baa:	68e3      	ldr	r3, [r4, #12]
 8016bac:	6832      	ldr	r2, [r6, #0]
 8016bae:	1a9b      	subs	r3, r3, r2
 8016bb0:	42ab      	cmp	r3, r5
 8016bb2:	dc26      	bgt.n	8016c02 <_printf_common+0x96>
 8016bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016bb8:	1e13      	subs	r3, r2, #0
 8016bba:	6822      	ldr	r2, [r4, #0]
 8016bbc:	bf18      	it	ne
 8016bbe:	2301      	movne	r3, #1
 8016bc0:	0692      	lsls	r2, r2, #26
 8016bc2:	d42b      	bmi.n	8016c1c <_printf_common+0xb0>
 8016bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016bc8:	4649      	mov	r1, r9
 8016bca:	4638      	mov	r0, r7
 8016bcc:	47c0      	blx	r8
 8016bce:	3001      	adds	r0, #1
 8016bd0:	d01e      	beq.n	8016c10 <_printf_common+0xa4>
 8016bd2:	6823      	ldr	r3, [r4, #0]
 8016bd4:	68e5      	ldr	r5, [r4, #12]
 8016bd6:	6832      	ldr	r2, [r6, #0]
 8016bd8:	f003 0306 	and.w	r3, r3, #6
 8016bdc:	2b04      	cmp	r3, #4
 8016bde:	bf08      	it	eq
 8016be0:	1aad      	subeq	r5, r5, r2
 8016be2:	68a3      	ldr	r3, [r4, #8]
 8016be4:	6922      	ldr	r2, [r4, #16]
 8016be6:	bf0c      	ite	eq
 8016be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016bec:	2500      	movne	r5, #0
 8016bee:	4293      	cmp	r3, r2
 8016bf0:	bfc4      	itt	gt
 8016bf2:	1a9b      	subgt	r3, r3, r2
 8016bf4:	18ed      	addgt	r5, r5, r3
 8016bf6:	2600      	movs	r6, #0
 8016bf8:	341a      	adds	r4, #26
 8016bfa:	42b5      	cmp	r5, r6
 8016bfc:	d11a      	bne.n	8016c34 <_printf_common+0xc8>
 8016bfe:	2000      	movs	r0, #0
 8016c00:	e008      	b.n	8016c14 <_printf_common+0xa8>
 8016c02:	2301      	movs	r3, #1
 8016c04:	4652      	mov	r2, sl
 8016c06:	4649      	mov	r1, r9
 8016c08:	4638      	mov	r0, r7
 8016c0a:	47c0      	blx	r8
 8016c0c:	3001      	adds	r0, #1
 8016c0e:	d103      	bne.n	8016c18 <_printf_common+0xac>
 8016c10:	f04f 30ff 	mov.w	r0, #4294967295
 8016c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c18:	3501      	adds	r5, #1
 8016c1a:	e7c6      	b.n	8016baa <_printf_common+0x3e>
 8016c1c:	18e1      	adds	r1, r4, r3
 8016c1e:	1c5a      	adds	r2, r3, #1
 8016c20:	2030      	movs	r0, #48	; 0x30
 8016c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016c26:	4422      	add	r2, r4
 8016c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016c30:	3302      	adds	r3, #2
 8016c32:	e7c7      	b.n	8016bc4 <_printf_common+0x58>
 8016c34:	2301      	movs	r3, #1
 8016c36:	4622      	mov	r2, r4
 8016c38:	4649      	mov	r1, r9
 8016c3a:	4638      	mov	r0, r7
 8016c3c:	47c0      	blx	r8
 8016c3e:	3001      	adds	r0, #1
 8016c40:	d0e6      	beq.n	8016c10 <_printf_common+0xa4>
 8016c42:	3601      	adds	r6, #1
 8016c44:	e7d9      	b.n	8016bfa <_printf_common+0x8e>
	...

08016c48 <_printf_i>:
 8016c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016c4c:	7e0f      	ldrb	r7, [r1, #24]
 8016c4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016c50:	2f78      	cmp	r7, #120	; 0x78
 8016c52:	4691      	mov	r9, r2
 8016c54:	4680      	mov	r8, r0
 8016c56:	460c      	mov	r4, r1
 8016c58:	469a      	mov	sl, r3
 8016c5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016c5e:	d807      	bhi.n	8016c70 <_printf_i+0x28>
 8016c60:	2f62      	cmp	r7, #98	; 0x62
 8016c62:	d80a      	bhi.n	8016c7a <_printf_i+0x32>
 8016c64:	2f00      	cmp	r7, #0
 8016c66:	f000 80d8 	beq.w	8016e1a <_printf_i+0x1d2>
 8016c6a:	2f58      	cmp	r7, #88	; 0x58
 8016c6c:	f000 80a3 	beq.w	8016db6 <_printf_i+0x16e>
 8016c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016c78:	e03a      	b.n	8016cf0 <_printf_i+0xa8>
 8016c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016c7e:	2b15      	cmp	r3, #21
 8016c80:	d8f6      	bhi.n	8016c70 <_printf_i+0x28>
 8016c82:	a101      	add	r1, pc, #4	; (adr r1, 8016c88 <_printf_i+0x40>)
 8016c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016c88:	08016ce1 	.word	0x08016ce1
 8016c8c:	08016cf5 	.word	0x08016cf5
 8016c90:	08016c71 	.word	0x08016c71
 8016c94:	08016c71 	.word	0x08016c71
 8016c98:	08016c71 	.word	0x08016c71
 8016c9c:	08016c71 	.word	0x08016c71
 8016ca0:	08016cf5 	.word	0x08016cf5
 8016ca4:	08016c71 	.word	0x08016c71
 8016ca8:	08016c71 	.word	0x08016c71
 8016cac:	08016c71 	.word	0x08016c71
 8016cb0:	08016c71 	.word	0x08016c71
 8016cb4:	08016e01 	.word	0x08016e01
 8016cb8:	08016d25 	.word	0x08016d25
 8016cbc:	08016de3 	.word	0x08016de3
 8016cc0:	08016c71 	.word	0x08016c71
 8016cc4:	08016c71 	.word	0x08016c71
 8016cc8:	08016e23 	.word	0x08016e23
 8016ccc:	08016c71 	.word	0x08016c71
 8016cd0:	08016d25 	.word	0x08016d25
 8016cd4:	08016c71 	.word	0x08016c71
 8016cd8:	08016c71 	.word	0x08016c71
 8016cdc:	08016deb 	.word	0x08016deb
 8016ce0:	682b      	ldr	r3, [r5, #0]
 8016ce2:	1d1a      	adds	r2, r3, #4
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	602a      	str	r2, [r5, #0]
 8016ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	e0a3      	b.n	8016e3c <_printf_i+0x1f4>
 8016cf4:	6820      	ldr	r0, [r4, #0]
 8016cf6:	6829      	ldr	r1, [r5, #0]
 8016cf8:	0606      	lsls	r6, r0, #24
 8016cfa:	f101 0304 	add.w	r3, r1, #4
 8016cfe:	d50a      	bpl.n	8016d16 <_printf_i+0xce>
 8016d00:	680e      	ldr	r6, [r1, #0]
 8016d02:	602b      	str	r3, [r5, #0]
 8016d04:	2e00      	cmp	r6, #0
 8016d06:	da03      	bge.n	8016d10 <_printf_i+0xc8>
 8016d08:	232d      	movs	r3, #45	; 0x2d
 8016d0a:	4276      	negs	r6, r6
 8016d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016d10:	485e      	ldr	r0, [pc, #376]	; (8016e8c <_printf_i+0x244>)
 8016d12:	230a      	movs	r3, #10
 8016d14:	e019      	b.n	8016d4a <_printf_i+0x102>
 8016d16:	680e      	ldr	r6, [r1, #0]
 8016d18:	602b      	str	r3, [r5, #0]
 8016d1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016d1e:	bf18      	it	ne
 8016d20:	b236      	sxthne	r6, r6
 8016d22:	e7ef      	b.n	8016d04 <_printf_i+0xbc>
 8016d24:	682b      	ldr	r3, [r5, #0]
 8016d26:	6820      	ldr	r0, [r4, #0]
 8016d28:	1d19      	adds	r1, r3, #4
 8016d2a:	6029      	str	r1, [r5, #0]
 8016d2c:	0601      	lsls	r1, r0, #24
 8016d2e:	d501      	bpl.n	8016d34 <_printf_i+0xec>
 8016d30:	681e      	ldr	r6, [r3, #0]
 8016d32:	e002      	b.n	8016d3a <_printf_i+0xf2>
 8016d34:	0646      	lsls	r6, r0, #25
 8016d36:	d5fb      	bpl.n	8016d30 <_printf_i+0xe8>
 8016d38:	881e      	ldrh	r6, [r3, #0]
 8016d3a:	4854      	ldr	r0, [pc, #336]	; (8016e8c <_printf_i+0x244>)
 8016d3c:	2f6f      	cmp	r7, #111	; 0x6f
 8016d3e:	bf0c      	ite	eq
 8016d40:	2308      	moveq	r3, #8
 8016d42:	230a      	movne	r3, #10
 8016d44:	2100      	movs	r1, #0
 8016d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016d4a:	6865      	ldr	r5, [r4, #4]
 8016d4c:	60a5      	str	r5, [r4, #8]
 8016d4e:	2d00      	cmp	r5, #0
 8016d50:	bfa2      	ittt	ge
 8016d52:	6821      	ldrge	r1, [r4, #0]
 8016d54:	f021 0104 	bicge.w	r1, r1, #4
 8016d58:	6021      	strge	r1, [r4, #0]
 8016d5a:	b90e      	cbnz	r6, 8016d60 <_printf_i+0x118>
 8016d5c:	2d00      	cmp	r5, #0
 8016d5e:	d04d      	beq.n	8016dfc <_printf_i+0x1b4>
 8016d60:	4615      	mov	r5, r2
 8016d62:	fbb6 f1f3 	udiv	r1, r6, r3
 8016d66:	fb03 6711 	mls	r7, r3, r1, r6
 8016d6a:	5dc7      	ldrb	r7, [r0, r7]
 8016d6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016d70:	4637      	mov	r7, r6
 8016d72:	42bb      	cmp	r3, r7
 8016d74:	460e      	mov	r6, r1
 8016d76:	d9f4      	bls.n	8016d62 <_printf_i+0x11a>
 8016d78:	2b08      	cmp	r3, #8
 8016d7a:	d10b      	bne.n	8016d94 <_printf_i+0x14c>
 8016d7c:	6823      	ldr	r3, [r4, #0]
 8016d7e:	07de      	lsls	r6, r3, #31
 8016d80:	d508      	bpl.n	8016d94 <_printf_i+0x14c>
 8016d82:	6923      	ldr	r3, [r4, #16]
 8016d84:	6861      	ldr	r1, [r4, #4]
 8016d86:	4299      	cmp	r1, r3
 8016d88:	bfde      	ittt	le
 8016d8a:	2330      	movle	r3, #48	; 0x30
 8016d8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016d90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016d94:	1b52      	subs	r2, r2, r5
 8016d96:	6122      	str	r2, [r4, #16]
 8016d98:	f8cd a000 	str.w	sl, [sp]
 8016d9c:	464b      	mov	r3, r9
 8016d9e:	aa03      	add	r2, sp, #12
 8016da0:	4621      	mov	r1, r4
 8016da2:	4640      	mov	r0, r8
 8016da4:	f7ff fee2 	bl	8016b6c <_printf_common>
 8016da8:	3001      	adds	r0, #1
 8016daa:	d14c      	bne.n	8016e46 <_printf_i+0x1fe>
 8016dac:	f04f 30ff 	mov.w	r0, #4294967295
 8016db0:	b004      	add	sp, #16
 8016db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016db6:	4835      	ldr	r0, [pc, #212]	; (8016e8c <_printf_i+0x244>)
 8016db8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016dbc:	6829      	ldr	r1, [r5, #0]
 8016dbe:	6823      	ldr	r3, [r4, #0]
 8016dc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8016dc4:	6029      	str	r1, [r5, #0]
 8016dc6:	061d      	lsls	r5, r3, #24
 8016dc8:	d514      	bpl.n	8016df4 <_printf_i+0x1ac>
 8016dca:	07df      	lsls	r7, r3, #31
 8016dcc:	bf44      	itt	mi
 8016dce:	f043 0320 	orrmi.w	r3, r3, #32
 8016dd2:	6023      	strmi	r3, [r4, #0]
 8016dd4:	b91e      	cbnz	r6, 8016dde <_printf_i+0x196>
 8016dd6:	6823      	ldr	r3, [r4, #0]
 8016dd8:	f023 0320 	bic.w	r3, r3, #32
 8016ddc:	6023      	str	r3, [r4, #0]
 8016dde:	2310      	movs	r3, #16
 8016de0:	e7b0      	b.n	8016d44 <_printf_i+0xfc>
 8016de2:	6823      	ldr	r3, [r4, #0]
 8016de4:	f043 0320 	orr.w	r3, r3, #32
 8016de8:	6023      	str	r3, [r4, #0]
 8016dea:	2378      	movs	r3, #120	; 0x78
 8016dec:	4828      	ldr	r0, [pc, #160]	; (8016e90 <_printf_i+0x248>)
 8016dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016df2:	e7e3      	b.n	8016dbc <_printf_i+0x174>
 8016df4:	0659      	lsls	r1, r3, #25
 8016df6:	bf48      	it	mi
 8016df8:	b2b6      	uxthmi	r6, r6
 8016dfa:	e7e6      	b.n	8016dca <_printf_i+0x182>
 8016dfc:	4615      	mov	r5, r2
 8016dfe:	e7bb      	b.n	8016d78 <_printf_i+0x130>
 8016e00:	682b      	ldr	r3, [r5, #0]
 8016e02:	6826      	ldr	r6, [r4, #0]
 8016e04:	6961      	ldr	r1, [r4, #20]
 8016e06:	1d18      	adds	r0, r3, #4
 8016e08:	6028      	str	r0, [r5, #0]
 8016e0a:	0635      	lsls	r5, r6, #24
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	d501      	bpl.n	8016e14 <_printf_i+0x1cc>
 8016e10:	6019      	str	r1, [r3, #0]
 8016e12:	e002      	b.n	8016e1a <_printf_i+0x1d2>
 8016e14:	0670      	lsls	r0, r6, #25
 8016e16:	d5fb      	bpl.n	8016e10 <_printf_i+0x1c8>
 8016e18:	8019      	strh	r1, [r3, #0]
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	6123      	str	r3, [r4, #16]
 8016e1e:	4615      	mov	r5, r2
 8016e20:	e7ba      	b.n	8016d98 <_printf_i+0x150>
 8016e22:	682b      	ldr	r3, [r5, #0]
 8016e24:	1d1a      	adds	r2, r3, #4
 8016e26:	602a      	str	r2, [r5, #0]
 8016e28:	681d      	ldr	r5, [r3, #0]
 8016e2a:	6862      	ldr	r2, [r4, #4]
 8016e2c:	2100      	movs	r1, #0
 8016e2e:	4628      	mov	r0, r5
 8016e30:	f7e9 f9ee 	bl	8000210 <memchr>
 8016e34:	b108      	cbz	r0, 8016e3a <_printf_i+0x1f2>
 8016e36:	1b40      	subs	r0, r0, r5
 8016e38:	6060      	str	r0, [r4, #4]
 8016e3a:	6863      	ldr	r3, [r4, #4]
 8016e3c:	6123      	str	r3, [r4, #16]
 8016e3e:	2300      	movs	r3, #0
 8016e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e44:	e7a8      	b.n	8016d98 <_printf_i+0x150>
 8016e46:	6923      	ldr	r3, [r4, #16]
 8016e48:	462a      	mov	r2, r5
 8016e4a:	4649      	mov	r1, r9
 8016e4c:	4640      	mov	r0, r8
 8016e4e:	47d0      	blx	sl
 8016e50:	3001      	adds	r0, #1
 8016e52:	d0ab      	beq.n	8016dac <_printf_i+0x164>
 8016e54:	6823      	ldr	r3, [r4, #0]
 8016e56:	079b      	lsls	r3, r3, #30
 8016e58:	d413      	bmi.n	8016e82 <_printf_i+0x23a>
 8016e5a:	68e0      	ldr	r0, [r4, #12]
 8016e5c:	9b03      	ldr	r3, [sp, #12]
 8016e5e:	4298      	cmp	r0, r3
 8016e60:	bfb8      	it	lt
 8016e62:	4618      	movlt	r0, r3
 8016e64:	e7a4      	b.n	8016db0 <_printf_i+0x168>
 8016e66:	2301      	movs	r3, #1
 8016e68:	4632      	mov	r2, r6
 8016e6a:	4649      	mov	r1, r9
 8016e6c:	4640      	mov	r0, r8
 8016e6e:	47d0      	blx	sl
 8016e70:	3001      	adds	r0, #1
 8016e72:	d09b      	beq.n	8016dac <_printf_i+0x164>
 8016e74:	3501      	adds	r5, #1
 8016e76:	68e3      	ldr	r3, [r4, #12]
 8016e78:	9903      	ldr	r1, [sp, #12]
 8016e7a:	1a5b      	subs	r3, r3, r1
 8016e7c:	42ab      	cmp	r3, r5
 8016e7e:	dcf2      	bgt.n	8016e66 <_printf_i+0x21e>
 8016e80:	e7eb      	b.n	8016e5a <_printf_i+0x212>
 8016e82:	2500      	movs	r5, #0
 8016e84:	f104 0619 	add.w	r6, r4, #25
 8016e88:	e7f5      	b.n	8016e76 <_printf_i+0x22e>
 8016e8a:	bf00      	nop
 8016e8c:	0801c9ee 	.word	0x0801c9ee
 8016e90:	0801c9ff 	.word	0x0801c9ff

08016e94 <_scanf_float>:
 8016e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e98:	b087      	sub	sp, #28
 8016e9a:	4617      	mov	r7, r2
 8016e9c:	9303      	str	r3, [sp, #12]
 8016e9e:	688b      	ldr	r3, [r1, #8]
 8016ea0:	1e5a      	subs	r2, r3, #1
 8016ea2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016ea6:	bf83      	ittte	hi
 8016ea8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016eac:	195b      	addhi	r3, r3, r5
 8016eae:	9302      	strhi	r3, [sp, #8]
 8016eb0:	2300      	movls	r3, #0
 8016eb2:	bf86      	itte	hi
 8016eb4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016eb8:	608b      	strhi	r3, [r1, #8]
 8016eba:	9302      	strls	r3, [sp, #8]
 8016ebc:	680b      	ldr	r3, [r1, #0]
 8016ebe:	468b      	mov	fp, r1
 8016ec0:	2500      	movs	r5, #0
 8016ec2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016ec6:	f84b 3b1c 	str.w	r3, [fp], #28
 8016eca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016ece:	4680      	mov	r8, r0
 8016ed0:	460c      	mov	r4, r1
 8016ed2:	465e      	mov	r6, fp
 8016ed4:	46aa      	mov	sl, r5
 8016ed6:	46a9      	mov	r9, r5
 8016ed8:	9501      	str	r5, [sp, #4]
 8016eda:	68a2      	ldr	r2, [r4, #8]
 8016edc:	b152      	cbz	r2, 8016ef4 <_scanf_float+0x60>
 8016ede:	683b      	ldr	r3, [r7, #0]
 8016ee0:	781b      	ldrb	r3, [r3, #0]
 8016ee2:	2b4e      	cmp	r3, #78	; 0x4e
 8016ee4:	d864      	bhi.n	8016fb0 <_scanf_float+0x11c>
 8016ee6:	2b40      	cmp	r3, #64	; 0x40
 8016ee8:	d83c      	bhi.n	8016f64 <_scanf_float+0xd0>
 8016eea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016eee:	b2c8      	uxtb	r0, r1
 8016ef0:	280e      	cmp	r0, #14
 8016ef2:	d93a      	bls.n	8016f6a <_scanf_float+0xd6>
 8016ef4:	f1b9 0f00 	cmp.w	r9, #0
 8016ef8:	d003      	beq.n	8016f02 <_scanf_float+0x6e>
 8016efa:	6823      	ldr	r3, [r4, #0]
 8016efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016f00:	6023      	str	r3, [r4, #0]
 8016f02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016f06:	f1ba 0f01 	cmp.w	sl, #1
 8016f0a:	f200 8113 	bhi.w	8017134 <_scanf_float+0x2a0>
 8016f0e:	455e      	cmp	r6, fp
 8016f10:	f200 8105 	bhi.w	801711e <_scanf_float+0x28a>
 8016f14:	2501      	movs	r5, #1
 8016f16:	4628      	mov	r0, r5
 8016f18:	b007      	add	sp, #28
 8016f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f1e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016f22:	2a0d      	cmp	r2, #13
 8016f24:	d8e6      	bhi.n	8016ef4 <_scanf_float+0x60>
 8016f26:	a101      	add	r1, pc, #4	; (adr r1, 8016f2c <_scanf_float+0x98>)
 8016f28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016f2c:	0801706b 	.word	0x0801706b
 8016f30:	08016ef5 	.word	0x08016ef5
 8016f34:	08016ef5 	.word	0x08016ef5
 8016f38:	08016ef5 	.word	0x08016ef5
 8016f3c:	080170cb 	.word	0x080170cb
 8016f40:	080170a3 	.word	0x080170a3
 8016f44:	08016ef5 	.word	0x08016ef5
 8016f48:	08016ef5 	.word	0x08016ef5
 8016f4c:	08017079 	.word	0x08017079
 8016f50:	08016ef5 	.word	0x08016ef5
 8016f54:	08016ef5 	.word	0x08016ef5
 8016f58:	08016ef5 	.word	0x08016ef5
 8016f5c:	08016ef5 	.word	0x08016ef5
 8016f60:	08017031 	.word	0x08017031
 8016f64:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016f68:	e7db      	b.n	8016f22 <_scanf_float+0x8e>
 8016f6a:	290e      	cmp	r1, #14
 8016f6c:	d8c2      	bhi.n	8016ef4 <_scanf_float+0x60>
 8016f6e:	a001      	add	r0, pc, #4	; (adr r0, 8016f74 <_scanf_float+0xe0>)
 8016f70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016f74:	08017023 	.word	0x08017023
 8016f78:	08016ef5 	.word	0x08016ef5
 8016f7c:	08017023 	.word	0x08017023
 8016f80:	080170b7 	.word	0x080170b7
 8016f84:	08016ef5 	.word	0x08016ef5
 8016f88:	08016fd1 	.word	0x08016fd1
 8016f8c:	0801700d 	.word	0x0801700d
 8016f90:	0801700d 	.word	0x0801700d
 8016f94:	0801700d 	.word	0x0801700d
 8016f98:	0801700d 	.word	0x0801700d
 8016f9c:	0801700d 	.word	0x0801700d
 8016fa0:	0801700d 	.word	0x0801700d
 8016fa4:	0801700d 	.word	0x0801700d
 8016fa8:	0801700d 	.word	0x0801700d
 8016fac:	0801700d 	.word	0x0801700d
 8016fb0:	2b6e      	cmp	r3, #110	; 0x6e
 8016fb2:	d809      	bhi.n	8016fc8 <_scanf_float+0x134>
 8016fb4:	2b60      	cmp	r3, #96	; 0x60
 8016fb6:	d8b2      	bhi.n	8016f1e <_scanf_float+0x8a>
 8016fb8:	2b54      	cmp	r3, #84	; 0x54
 8016fba:	d077      	beq.n	80170ac <_scanf_float+0x218>
 8016fbc:	2b59      	cmp	r3, #89	; 0x59
 8016fbe:	d199      	bne.n	8016ef4 <_scanf_float+0x60>
 8016fc0:	2d07      	cmp	r5, #7
 8016fc2:	d197      	bne.n	8016ef4 <_scanf_float+0x60>
 8016fc4:	2508      	movs	r5, #8
 8016fc6:	e029      	b.n	801701c <_scanf_float+0x188>
 8016fc8:	2b74      	cmp	r3, #116	; 0x74
 8016fca:	d06f      	beq.n	80170ac <_scanf_float+0x218>
 8016fcc:	2b79      	cmp	r3, #121	; 0x79
 8016fce:	e7f6      	b.n	8016fbe <_scanf_float+0x12a>
 8016fd0:	6821      	ldr	r1, [r4, #0]
 8016fd2:	05c8      	lsls	r0, r1, #23
 8016fd4:	d51a      	bpl.n	801700c <_scanf_float+0x178>
 8016fd6:	9b02      	ldr	r3, [sp, #8]
 8016fd8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016fdc:	6021      	str	r1, [r4, #0]
 8016fde:	f109 0901 	add.w	r9, r9, #1
 8016fe2:	b11b      	cbz	r3, 8016fec <_scanf_float+0x158>
 8016fe4:	3b01      	subs	r3, #1
 8016fe6:	3201      	adds	r2, #1
 8016fe8:	9302      	str	r3, [sp, #8]
 8016fea:	60a2      	str	r2, [r4, #8]
 8016fec:	68a3      	ldr	r3, [r4, #8]
 8016fee:	3b01      	subs	r3, #1
 8016ff0:	60a3      	str	r3, [r4, #8]
 8016ff2:	6923      	ldr	r3, [r4, #16]
 8016ff4:	3301      	adds	r3, #1
 8016ff6:	6123      	str	r3, [r4, #16]
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	3b01      	subs	r3, #1
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	607b      	str	r3, [r7, #4]
 8017000:	f340 8084 	ble.w	801710c <_scanf_float+0x278>
 8017004:	683b      	ldr	r3, [r7, #0]
 8017006:	3301      	adds	r3, #1
 8017008:	603b      	str	r3, [r7, #0]
 801700a:	e766      	b.n	8016eda <_scanf_float+0x46>
 801700c:	eb1a 0f05 	cmn.w	sl, r5
 8017010:	f47f af70 	bne.w	8016ef4 <_scanf_float+0x60>
 8017014:	6822      	ldr	r2, [r4, #0]
 8017016:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801701a:	6022      	str	r2, [r4, #0]
 801701c:	f806 3b01 	strb.w	r3, [r6], #1
 8017020:	e7e4      	b.n	8016fec <_scanf_float+0x158>
 8017022:	6822      	ldr	r2, [r4, #0]
 8017024:	0610      	lsls	r0, r2, #24
 8017026:	f57f af65 	bpl.w	8016ef4 <_scanf_float+0x60>
 801702a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801702e:	e7f4      	b.n	801701a <_scanf_float+0x186>
 8017030:	f1ba 0f00 	cmp.w	sl, #0
 8017034:	d10e      	bne.n	8017054 <_scanf_float+0x1c0>
 8017036:	f1b9 0f00 	cmp.w	r9, #0
 801703a:	d10e      	bne.n	801705a <_scanf_float+0x1c6>
 801703c:	6822      	ldr	r2, [r4, #0]
 801703e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017042:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017046:	d108      	bne.n	801705a <_scanf_float+0x1c6>
 8017048:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801704c:	6022      	str	r2, [r4, #0]
 801704e:	f04f 0a01 	mov.w	sl, #1
 8017052:	e7e3      	b.n	801701c <_scanf_float+0x188>
 8017054:	f1ba 0f02 	cmp.w	sl, #2
 8017058:	d055      	beq.n	8017106 <_scanf_float+0x272>
 801705a:	2d01      	cmp	r5, #1
 801705c:	d002      	beq.n	8017064 <_scanf_float+0x1d0>
 801705e:	2d04      	cmp	r5, #4
 8017060:	f47f af48 	bne.w	8016ef4 <_scanf_float+0x60>
 8017064:	3501      	adds	r5, #1
 8017066:	b2ed      	uxtb	r5, r5
 8017068:	e7d8      	b.n	801701c <_scanf_float+0x188>
 801706a:	f1ba 0f01 	cmp.w	sl, #1
 801706e:	f47f af41 	bne.w	8016ef4 <_scanf_float+0x60>
 8017072:	f04f 0a02 	mov.w	sl, #2
 8017076:	e7d1      	b.n	801701c <_scanf_float+0x188>
 8017078:	b97d      	cbnz	r5, 801709a <_scanf_float+0x206>
 801707a:	f1b9 0f00 	cmp.w	r9, #0
 801707e:	f47f af3c 	bne.w	8016efa <_scanf_float+0x66>
 8017082:	6822      	ldr	r2, [r4, #0]
 8017084:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017088:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801708c:	f47f af39 	bne.w	8016f02 <_scanf_float+0x6e>
 8017090:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017094:	6022      	str	r2, [r4, #0]
 8017096:	2501      	movs	r5, #1
 8017098:	e7c0      	b.n	801701c <_scanf_float+0x188>
 801709a:	2d03      	cmp	r5, #3
 801709c:	d0e2      	beq.n	8017064 <_scanf_float+0x1d0>
 801709e:	2d05      	cmp	r5, #5
 80170a0:	e7de      	b.n	8017060 <_scanf_float+0x1cc>
 80170a2:	2d02      	cmp	r5, #2
 80170a4:	f47f af26 	bne.w	8016ef4 <_scanf_float+0x60>
 80170a8:	2503      	movs	r5, #3
 80170aa:	e7b7      	b.n	801701c <_scanf_float+0x188>
 80170ac:	2d06      	cmp	r5, #6
 80170ae:	f47f af21 	bne.w	8016ef4 <_scanf_float+0x60>
 80170b2:	2507      	movs	r5, #7
 80170b4:	e7b2      	b.n	801701c <_scanf_float+0x188>
 80170b6:	6822      	ldr	r2, [r4, #0]
 80170b8:	0591      	lsls	r1, r2, #22
 80170ba:	f57f af1b 	bpl.w	8016ef4 <_scanf_float+0x60>
 80170be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80170c2:	6022      	str	r2, [r4, #0]
 80170c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80170c8:	e7a8      	b.n	801701c <_scanf_float+0x188>
 80170ca:	6822      	ldr	r2, [r4, #0]
 80170cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80170d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80170d4:	d006      	beq.n	80170e4 <_scanf_float+0x250>
 80170d6:	0550      	lsls	r0, r2, #21
 80170d8:	f57f af0c 	bpl.w	8016ef4 <_scanf_float+0x60>
 80170dc:	f1b9 0f00 	cmp.w	r9, #0
 80170e0:	f43f af0f 	beq.w	8016f02 <_scanf_float+0x6e>
 80170e4:	0591      	lsls	r1, r2, #22
 80170e6:	bf58      	it	pl
 80170e8:	9901      	ldrpl	r1, [sp, #4]
 80170ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80170ee:	bf58      	it	pl
 80170f0:	eba9 0101 	subpl.w	r1, r9, r1
 80170f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80170f8:	bf58      	it	pl
 80170fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80170fe:	6022      	str	r2, [r4, #0]
 8017100:	f04f 0900 	mov.w	r9, #0
 8017104:	e78a      	b.n	801701c <_scanf_float+0x188>
 8017106:	f04f 0a03 	mov.w	sl, #3
 801710a:	e787      	b.n	801701c <_scanf_float+0x188>
 801710c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017110:	4639      	mov	r1, r7
 8017112:	4640      	mov	r0, r8
 8017114:	4798      	blx	r3
 8017116:	2800      	cmp	r0, #0
 8017118:	f43f aedf 	beq.w	8016eda <_scanf_float+0x46>
 801711c:	e6ea      	b.n	8016ef4 <_scanf_float+0x60>
 801711e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017122:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017126:	463a      	mov	r2, r7
 8017128:	4640      	mov	r0, r8
 801712a:	4798      	blx	r3
 801712c:	6923      	ldr	r3, [r4, #16]
 801712e:	3b01      	subs	r3, #1
 8017130:	6123      	str	r3, [r4, #16]
 8017132:	e6ec      	b.n	8016f0e <_scanf_float+0x7a>
 8017134:	1e6b      	subs	r3, r5, #1
 8017136:	2b06      	cmp	r3, #6
 8017138:	d825      	bhi.n	8017186 <_scanf_float+0x2f2>
 801713a:	2d02      	cmp	r5, #2
 801713c:	d836      	bhi.n	80171ac <_scanf_float+0x318>
 801713e:	455e      	cmp	r6, fp
 8017140:	f67f aee8 	bls.w	8016f14 <_scanf_float+0x80>
 8017144:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017148:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801714c:	463a      	mov	r2, r7
 801714e:	4640      	mov	r0, r8
 8017150:	4798      	blx	r3
 8017152:	6923      	ldr	r3, [r4, #16]
 8017154:	3b01      	subs	r3, #1
 8017156:	6123      	str	r3, [r4, #16]
 8017158:	e7f1      	b.n	801713e <_scanf_float+0x2aa>
 801715a:	9802      	ldr	r0, [sp, #8]
 801715c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017160:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8017164:	9002      	str	r0, [sp, #8]
 8017166:	463a      	mov	r2, r7
 8017168:	4640      	mov	r0, r8
 801716a:	4798      	blx	r3
 801716c:	6923      	ldr	r3, [r4, #16]
 801716e:	3b01      	subs	r3, #1
 8017170:	6123      	str	r3, [r4, #16]
 8017172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017176:	fa5f fa8a 	uxtb.w	sl, sl
 801717a:	f1ba 0f02 	cmp.w	sl, #2
 801717e:	d1ec      	bne.n	801715a <_scanf_float+0x2c6>
 8017180:	3d03      	subs	r5, #3
 8017182:	b2ed      	uxtb	r5, r5
 8017184:	1b76      	subs	r6, r6, r5
 8017186:	6823      	ldr	r3, [r4, #0]
 8017188:	05da      	lsls	r2, r3, #23
 801718a:	d52f      	bpl.n	80171ec <_scanf_float+0x358>
 801718c:	055b      	lsls	r3, r3, #21
 801718e:	d510      	bpl.n	80171b2 <_scanf_float+0x31e>
 8017190:	455e      	cmp	r6, fp
 8017192:	f67f aebf 	bls.w	8016f14 <_scanf_float+0x80>
 8017196:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801719a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801719e:	463a      	mov	r2, r7
 80171a0:	4640      	mov	r0, r8
 80171a2:	4798      	blx	r3
 80171a4:	6923      	ldr	r3, [r4, #16]
 80171a6:	3b01      	subs	r3, #1
 80171a8:	6123      	str	r3, [r4, #16]
 80171aa:	e7f1      	b.n	8017190 <_scanf_float+0x2fc>
 80171ac:	46aa      	mov	sl, r5
 80171ae:	9602      	str	r6, [sp, #8]
 80171b0:	e7df      	b.n	8017172 <_scanf_float+0x2de>
 80171b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80171b6:	6923      	ldr	r3, [r4, #16]
 80171b8:	2965      	cmp	r1, #101	; 0x65
 80171ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80171be:	f106 35ff 	add.w	r5, r6, #4294967295
 80171c2:	6123      	str	r3, [r4, #16]
 80171c4:	d00c      	beq.n	80171e0 <_scanf_float+0x34c>
 80171c6:	2945      	cmp	r1, #69	; 0x45
 80171c8:	d00a      	beq.n	80171e0 <_scanf_float+0x34c>
 80171ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80171ce:	463a      	mov	r2, r7
 80171d0:	4640      	mov	r0, r8
 80171d2:	4798      	blx	r3
 80171d4:	6923      	ldr	r3, [r4, #16]
 80171d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80171da:	3b01      	subs	r3, #1
 80171dc:	1eb5      	subs	r5, r6, #2
 80171de:	6123      	str	r3, [r4, #16]
 80171e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80171e4:	463a      	mov	r2, r7
 80171e6:	4640      	mov	r0, r8
 80171e8:	4798      	blx	r3
 80171ea:	462e      	mov	r6, r5
 80171ec:	6825      	ldr	r5, [r4, #0]
 80171ee:	f015 0510 	ands.w	r5, r5, #16
 80171f2:	d159      	bne.n	80172a8 <_scanf_float+0x414>
 80171f4:	7035      	strb	r5, [r6, #0]
 80171f6:	6823      	ldr	r3, [r4, #0]
 80171f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80171fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017200:	d11b      	bne.n	801723a <_scanf_float+0x3a6>
 8017202:	9b01      	ldr	r3, [sp, #4]
 8017204:	454b      	cmp	r3, r9
 8017206:	eba3 0209 	sub.w	r2, r3, r9
 801720a:	d123      	bne.n	8017254 <_scanf_float+0x3c0>
 801720c:	2200      	movs	r2, #0
 801720e:	4659      	mov	r1, fp
 8017210:	4640      	mov	r0, r8
 8017212:	f000 fe97 	bl	8017f44 <_strtod_r>
 8017216:	6822      	ldr	r2, [r4, #0]
 8017218:	9b03      	ldr	r3, [sp, #12]
 801721a:	f012 0f02 	tst.w	r2, #2
 801721e:	ec57 6b10 	vmov	r6, r7, d0
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	d021      	beq.n	801726a <_scanf_float+0x3d6>
 8017226:	9903      	ldr	r1, [sp, #12]
 8017228:	1d1a      	adds	r2, r3, #4
 801722a:	600a      	str	r2, [r1, #0]
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	e9c3 6700 	strd	r6, r7, [r3]
 8017232:	68e3      	ldr	r3, [r4, #12]
 8017234:	3301      	adds	r3, #1
 8017236:	60e3      	str	r3, [r4, #12]
 8017238:	e66d      	b.n	8016f16 <_scanf_float+0x82>
 801723a:	9b04      	ldr	r3, [sp, #16]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d0e5      	beq.n	801720c <_scanf_float+0x378>
 8017240:	9905      	ldr	r1, [sp, #20]
 8017242:	230a      	movs	r3, #10
 8017244:	462a      	mov	r2, r5
 8017246:	3101      	adds	r1, #1
 8017248:	4640      	mov	r0, r8
 801724a:	f000 ff03 	bl	8018054 <_strtol_r>
 801724e:	9b04      	ldr	r3, [sp, #16]
 8017250:	9e05      	ldr	r6, [sp, #20]
 8017252:	1ac2      	subs	r2, r0, r3
 8017254:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017258:	429e      	cmp	r6, r3
 801725a:	bf28      	it	cs
 801725c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8017260:	4912      	ldr	r1, [pc, #72]	; (80172ac <_scanf_float+0x418>)
 8017262:	4630      	mov	r0, r6
 8017264:	f000 f82c 	bl	80172c0 <siprintf>
 8017268:	e7d0      	b.n	801720c <_scanf_float+0x378>
 801726a:	9903      	ldr	r1, [sp, #12]
 801726c:	f012 0f04 	tst.w	r2, #4
 8017270:	f103 0204 	add.w	r2, r3, #4
 8017274:	600a      	str	r2, [r1, #0]
 8017276:	d1d9      	bne.n	801722c <_scanf_float+0x398>
 8017278:	f8d3 8000 	ldr.w	r8, [r3]
 801727c:	ee10 2a10 	vmov	r2, s0
 8017280:	ee10 0a10 	vmov	r0, s0
 8017284:	463b      	mov	r3, r7
 8017286:	4639      	mov	r1, r7
 8017288:	f7e9 fc68 	bl	8000b5c <__aeabi_dcmpun>
 801728c:	b128      	cbz	r0, 801729a <_scanf_float+0x406>
 801728e:	4808      	ldr	r0, [pc, #32]	; (80172b0 <_scanf_float+0x41c>)
 8017290:	f000 f810 	bl	80172b4 <nanf>
 8017294:	ed88 0a00 	vstr	s0, [r8]
 8017298:	e7cb      	b.n	8017232 <_scanf_float+0x39e>
 801729a:	4630      	mov	r0, r6
 801729c:	4639      	mov	r1, r7
 801729e:	f7e9 fcbb 	bl	8000c18 <__aeabi_d2f>
 80172a2:	f8c8 0000 	str.w	r0, [r8]
 80172a6:	e7c4      	b.n	8017232 <_scanf_float+0x39e>
 80172a8:	2500      	movs	r5, #0
 80172aa:	e634      	b.n	8016f16 <_scanf_float+0x82>
 80172ac:	0801ca10 	.word	0x0801ca10
 80172b0:	0801ce18 	.word	0x0801ce18

080172b4 <nanf>:
 80172b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80172bc <nanf+0x8>
 80172b8:	4770      	bx	lr
 80172ba:	bf00      	nop
 80172bc:	7fc00000 	.word	0x7fc00000

080172c0 <siprintf>:
 80172c0:	b40e      	push	{r1, r2, r3}
 80172c2:	b500      	push	{lr}
 80172c4:	b09c      	sub	sp, #112	; 0x70
 80172c6:	ab1d      	add	r3, sp, #116	; 0x74
 80172c8:	9002      	str	r0, [sp, #8]
 80172ca:	9006      	str	r0, [sp, #24]
 80172cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80172d0:	4809      	ldr	r0, [pc, #36]	; (80172f8 <siprintf+0x38>)
 80172d2:	9107      	str	r1, [sp, #28]
 80172d4:	9104      	str	r1, [sp, #16]
 80172d6:	4909      	ldr	r1, [pc, #36]	; (80172fc <siprintf+0x3c>)
 80172d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80172dc:	9105      	str	r1, [sp, #20]
 80172de:	6800      	ldr	r0, [r0, #0]
 80172e0:	9301      	str	r3, [sp, #4]
 80172e2:	a902      	add	r1, sp, #8
 80172e4:	f002 fed4 	bl	801a090 <_svfiprintf_r>
 80172e8:	9b02      	ldr	r3, [sp, #8]
 80172ea:	2200      	movs	r2, #0
 80172ec:	701a      	strb	r2, [r3, #0]
 80172ee:	b01c      	add	sp, #112	; 0x70
 80172f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80172f4:	b003      	add	sp, #12
 80172f6:	4770      	bx	lr
 80172f8:	200000a4 	.word	0x200000a4
 80172fc:	ffff0208 	.word	0xffff0208

08017300 <sulp>:
 8017300:	b570      	push	{r4, r5, r6, lr}
 8017302:	4604      	mov	r4, r0
 8017304:	460d      	mov	r5, r1
 8017306:	ec45 4b10 	vmov	d0, r4, r5
 801730a:	4616      	mov	r6, r2
 801730c:	f002 fc1e 	bl	8019b4c <__ulp>
 8017310:	ec51 0b10 	vmov	r0, r1, d0
 8017314:	b17e      	cbz	r6, 8017336 <sulp+0x36>
 8017316:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801731a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801731e:	2b00      	cmp	r3, #0
 8017320:	dd09      	ble.n	8017336 <sulp+0x36>
 8017322:	051b      	lsls	r3, r3, #20
 8017324:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017328:	2400      	movs	r4, #0
 801732a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801732e:	4622      	mov	r2, r4
 8017330:	462b      	mov	r3, r5
 8017332:	f7e9 f979 	bl	8000628 <__aeabi_dmul>
 8017336:	bd70      	pop	{r4, r5, r6, pc}

08017338 <_strtod_l>:
 8017338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801733c:	ed2d 8b02 	vpush	{d8}
 8017340:	b09d      	sub	sp, #116	; 0x74
 8017342:	461f      	mov	r7, r3
 8017344:	2300      	movs	r3, #0
 8017346:	9318      	str	r3, [sp, #96]	; 0x60
 8017348:	4ba2      	ldr	r3, [pc, #648]	; (80175d4 <_strtod_l+0x29c>)
 801734a:	9213      	str	r2, [sp, #76]	; 0x4c
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	9305      	str	r3, [sp, #20]
 8017350:	4604      	mov	r4, r0
 8017352:	4618      	mov	r0, r3
 8017354:	4688      	mov	r8, r1
 8017356:	f7e8 ff53 	bl	8000200 <strlen>
 801735a:	f04f 0a00 	mov.w	sl, #0
 801735e:	4605      	mov	r5, r0
 8017360:	f04f 0b00 	mov.w	fp, #0
 8017364:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8017368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801736a:	781a      	ldrb	r2, [r3, #0]
 801736c:	2a2b      	cmp	r2, #43	; 0x2b
 801736e:	d04e      	beq.n	801740e <_strtod_l+0xd6>
 8017370:	d83b      	bhi.n	80173ea <_strtod_l+0xb2>
 8017372:	2a0d      	cmp	r2, #13
 8017374:	d834      	bhi.n	80173e0 <_strtod_l+0xa8>
 8017376:	2a08      	cmp	r2, #8
 8017378:	d834      	bhi.n	80173e4 <_strtod_l+0xac>
 801737a:	2a00      	cmp	r2, #0
 801737c:	d03e      	beq.n	80173fc <_strtod_l+0xc4>
 801737e:	2300      	movs	r3, #0
 8017380:	930a      	str	r3, [sp, #40]	; 0x28
 8017382:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8017384:	7833      	ldrb	r3, [r6, #0]
 8017386:	2b30      	cmp	r3, #48	; 0x30
 8017388:	f040 80b0 	bne.w	80174ec <_strtod_l+0x1b4>
 801738c:	7873      	ldrb	r3, [r6, #1]
 801738e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017392:	2b58      	cmp	r3, #88	; 0x58
 8017394:	d168      	bne.n	8017468 <_strtod_l+0x130>
 8017396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017398:	9301      	str	r3, [sp, #4]
 801739a:	ab18      	add	r3, sp, #96	; 0x60
 801739c:	9702      	str	r7, [sp, #8]
 801739e:	9300      	str	r3, [sp, #0]
 80173a0:	4a8d      	ldr	r2, [pc, #564]	; (80175d8 <_strtod_l+0x2a0>)
 80173a2:	ab19      	add	r3, sp, #100	; 0x64
 80173a4:	a917      	add	r1, sp, #92	; 0x5c
 80173a6:	4620      	mov	r0, r4
 80173a8:	f001 fd38 	bl	8018e1c <__gethex>
 80173ac:	f010 0707 	ands.w	r7, r0, #7
 80173b0:	4605      	mov	r5, r0
 80173b2:	d005      	beq.n	80173c0 <_strtod_l+0x88>
 80173b4:	2f06      	cmp	r7, #6
 80173b6:	d12c      	bne.n	8017412 <_strtod_l+0xda>
 80173b8:	3601      	adds	r6, #1
 80173ba:	2300      	movs	r3, #0
 80173bc:	9617      	str	r6, [sp, #92]	; 0x5c
 80173be:	930a      	str	r3, [sp, #40]	; 0x28
 80173c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	f040 8590 	bne.w	8017ee8 <_strtod_l+0xbb0>
 80173c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173ca:	b1eb      	cbz	r3, 8017408 <_strtod_l+0xd0>
 80173cc:	4652      	mov	r2, sl
 80173ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80173d2:	ec43 2b10 	vmov	d0, r2, r3
 80173d6:	b01d      	add	sp, #116	; 0x74
 80173d8:	ecbd 8b02 	vpop	{d8}
 80173dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173e0:	2a20      	cmp	r2, #32
 80173e2:	d1cc      	bne.n	801737e <_strtod_l+0x46>
 80173e4:	3301      	adds	r3, #1
 80173e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80173e8:	e7be      	b.n	8017368 <_strtod_l+0x30>
 80173ea:	2a2d      	cmp	r2, #45	; 0x2d
 80173ec:	d1c7      	bne.n	801737e <_strtod_l+0x46>
 80173ee:	2201      	movs	r2, #1
 80173f0:	920a      	str	r2, [sp, #40]	; 0x28
 80173f2:	1c5a      	adds	r2, r3, #1
 80173f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80173f6:	785b      	ldrb	r3, [r3, #1]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d1c2      	bne.n	8017382 <_strtod_l+0x4a>
 80173fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80173fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8017402:	2b00      	cmp	r3, #0
 8017404:	f040 856e 	bne.w	8017ee4 <_strtod_l+0xbac>
 8017408:	4652      	mov	r2, sl
 801740a:	465b      	mov	r3, fp
 801740c:	e7e1      	b.n	80173d2 <_strtod_l+0x9a>
 801740e:	2200      	movs	r2, #0
 8017410:	e7ee      	b.n	80173f0 <_strtod_l+0xb8>
 8017412:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017414:	b13a      	cbz	r2, 8017426 <_strtod_l+0xee>
 8017416:	2135      	movs	r1, #53	; 0x35
 8017418:	a81a      	add	r0, sp, #104	; 0x68
 801741a:	f002 fca2 	bl	8019d62 <__copybits>
 801741e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017420:	4620      	mov	r0, r4
 8017422:	f002 f861 	bl	80194e8 <_Bfree>
 8017426:	3f01      	subs	r7, #1
 8017428:	2f04      	cmp	r7, #4
 801742a:	d806      	bhi.n	801743a <_strtod_l+0x102>
 801742c:	e8df f007 	tbb	[pc, r7]
 8017430:	1714030a 	.word	0x1714030a
 8017434:	0a          	.byte	0x0a
 8017435:	00          	.byte	0x00
 8017436:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801743a:	0728      	lsls	r0, r5, #28
 801743c:	d5c0      	bpl.n	80173c0 <_strtod_l+0x88>
 801743e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8017442:	e7bd      	b.n	80173c0 <_strtod_l+0x88>
 8017444:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8017448:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801744a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801744e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017452:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017456:	e7f0      	b.n	801743a <_strtod_l+0x102>
 8017458:	f8df b180 	ldr.w	fp, [pc, #384]	; 80175dc <_strtod_l+0x2a4>
 801745c:	e7ed      	b.n	801743a <_strtod_l+0x102>
 801745e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017462:	f04f 3aff 	mov.w	sl, #4294967295
 8017466:	e7e8      	b.n	801743a <_strtod_l+0x102>
 8017468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801746a:	1c5a      	adds	r2, r3, #1
 801746c:	9217      	str	r2, [sp, #92]	; 0x5c
 801746e:	785b      	ldrb	r3, [r3, #1]
 8017470:	2b30      	cmp	r3, #48	; 0x30
 8017472:	d0f9      	beq.n	8017468 <_strtod_l+0x130>
 8017474:	2b00      	cmp	r3, #0
 8017476:	d0a3      	beq.n	80173c0 <_strtod_l+0x88>
 8017478:	2301      	movs	r3, #1
 801747a:	f04f 0900 	mov.w	r9, #0
 801747e:	9304      	str	r3, [sp, #16]
 8017480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017482:	9308      	str	r3, [sp, #32]
 8017484:	f8cd 901c 	str.w	r9, [sp, #28]
 8017488:	464f      	mov	r7, r9
 801748a:	220a      	movs	r2, #10
 801748c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801748e:	7806      	ldrb	r6, [r0, #0]
 8017490:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8017494:	b2d9      	uxtb	r1, r3
 8017496:	2909      	cmp	r1, #9
 8017498:	d92a      	bls.n	80174f0 <_strtod_l+0x1b8>
 801749a:	9905      	ldr	r1, [sp, #20]
 801749c:	462a      	mov	r2, r5
 801749e:	f002 ff0f 	bl	801a2c0 <strncmp>
 80174a2:	b398      	cbz	r0, 801750c <_strtod_l+0x1d4>
 80174a4:	2000      	movs	r0, #0
 80174a6:	4632      	mov	r2, r6
 80174a8:	463d      	mov	r5, r7
 80174aa:	9005      	str	r0, [sp, #20]
 80174ac:	4603      	mov	r3, r0
 80174ae:	2a65      	cmp	r2, #101	; 0x65
 80174b0:	d001      	beq.n	80174b6 <_strtod_l+0x17e>
 80174b2:	2a45      	cmp	r2, #69	; 0x45
 80174b4:	d118      	bne.n	80174e8 <_strtod_l+0x1b0>
 80174b6:	b91d      	cbnz	r5, 80174c0 <_strtod_l+0x188>
 80174b8:	9a04      	ldr	r2, [sp, #16]
 80174ba:	4302      	orrs	r2, r0
 80174bc:	d09e      	beq.n	80173fc <_strtod_l+0xc4>
 80174be:	2500      	movs	r5, #0
 80174c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80174c4:	f108 0201 	add.w	r2, r8, #1
 80174c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80174ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 80174ce:	2a2b      	cmp	r2, #43	; 0x2b
 80174d0:	d075      	beq.n	80175be <_strtod_l+0x286>
 80174d2:	2a2d      	cmp	r2, #45	; 0x2d
 80174d4:	d07b      	beq.n	80175ce <_strtod_l+0x296>
 80174d6:	f04f 0c00 	mov.w	ip, #0
 80174da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80174de:	2909      	cmp	r1, #9
 80174e0:	f240 8082 	bls.w	80175e8 <_strtod_l+0x2b0>
 80174e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80174e8:	2600      	movs	r6, #0
 80174ea:	e09d      	b.n	8017628 <_strtod_l+0x2f0>
 80174ec:	2300      	movs	r3, #0
 80174ee:	e7c4      	b.n	801747a <_strtod_l+0x142>
 80174f0:	2f08      	cmp	r7, #8
 80174f2:	bfd8      	it	le
 80174f4:	9907      	ldrle	r1, [sp, #28]
 80174f6:	f100 0001 	add.w	r0, r0, #1
 80174fa:	bfda      	itte	le
 80174fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8017500:	9307      	strle	r3, [sp, #28]
 8017502:	fb02 3909 	mlagt	r9, r2, r9, r3
 8017506:	3701      	adds	r7, #1
 8017508:	9017      	str	r0, [sp, #92]	; 0x5c
 801750a:	e7bf      	b.n	801748c <_strtod_l+0x154>
 801750c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801750e:	195a      	adds	r2, r3, r5
 8017510:	9217      	str	r2, [sp, #92]	; 0x5c
 8017512:	5d5a      	ldrb	r2, [r3, r5]
 8017514:	2f00      	cmp	r7, #0
 8017516:	d037      	beq.n	8017588 <_strtod_l+0x250>
 8017518:	9005      	str	r0, [sp, #20]
 801751a:	463d      	mov	r5, r7
 801751c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8017520:	2b09      	cmp	r3, #9
 8017522:	d912      	bls.n	801754a <_strtod_l+0x212>
 8017524:	2301      	movs	r3, #1
 8017526:	e7c2      	b.n	80174ae <_strtod_l+0x176>
 8017528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801752a:	1c5a      	adds	r2, r3, #1
 801752c:	9217      	str	r2, [sp, #92]	; 0x5c
 801752e:	785a      	ldrb	r2, [r3, #1]
 8017530:	3001      	adds	r0, #1
 8017532:	2a30      	cmp	r2, #48	; 0x30
 8017534:	d0f8      	beq.n	8017528 <_strtod_l+0x1f0>
 8017536:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801753a:	2b08      	cmp	r3, #8
 801753c:	f200 84d9 	bhi.w	8017ef2 <_strtod_l+0xbba>
 8017540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017542:	9005      	str	r0, [sp, #20]
 8017544:	2000      	movs	r0, #0
 8017546:	9308      	str	r3, [sp, #32]
 8017548:	4605      	mov	r5, r0
 801754a:	3a30      	subs	r2, #48	; 0x30
 801754c:	f100 0301 	add.w	r3, r0, #1
 8017550:	d014      	beq.n	801757c <_strtod_l+0x244>
 8017552:	9905      	ldr	r1, [sp, #20]
 8017554:	4419      	add	r1, r3
 8017556:	9105      	str	r1, [sp, #20]
 8017558:	462b      	mov	r3, r5
 801755a:	eb00 0e05 	add.w	lr, r0, r5
 801755e:	210a      	movs	r1, #10
 8017560:	4573      	cmp	r3, lr
 8017562:	d113      	bne.n	801758c <_strtod_l+0x254>
 8017564:	182b      	adds	r3, r5, r0
 8017566:	2b08      	cmp	r3, #8
 8017568:	f105 0501 	add.w	r5, r5, #1
 801756c:	4405      	add	r5, r0
 801756e:	dc1c      	bgt.n	80175aa <_strtod_l+0x272>
 8017570:	9907      	ldr	r1, [sp, #28]
 8017572:	230a      	movs	r3, #10
 8017574:	fb03 2301 	mla	r3, r3, r1, r2
 8017578:	9307      	str	r3, [sp, #28]
 801757a:	2300      	movs	r3, #0
 801757c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801757e:	1c51      	adds	r1, r2, #1
 8017580:	9117      	str	r1, [sp, #92]	; 0x5c
 8017582:	7852      	ldrb	r2, [r2, #1]
 8017584:	4618      	mov	r0, r3
 8017586:	e7c9      	b.n	801751c <_strtod_l+0x1e4>
 8017588:	4638      	mov	r0, r7
 801758a:	e7d2      	b.n	8017532 <_strtod_l+0x1fa>
 801758c:	2b08      	cmp	r3, #8
 801758e:	dc04      	bgt.n	801759a <_strtod_l+0x262>
 8017590:	9e07      	ldr	r6, [sp, #28]
 8017592:	434e      	muls	r6, r1
 8017594:	9607      	str	r6, [sp, #28]
 8017596:	3301      	adds	r3, #1
 8017598:	e7e2      	b.n	8017560 <_strtod_l+0x228>
 801759a:	f103 0c01 	add.w	ip, r3, #1
 801759e:	f1bc 0f10 	cmp.w	ip, #16
 80175a2:	bfd8      	it	le
 80175a4:	fb01 f909 	mulle.w	r9, r1, r9
 80175a8:	e7f5      	b.n	8017596 <_strtod_l+0x25e>
 80175aa:	2d10      	cmp	r5, #16
 80175ac:	bfdc      	itt	le
 80175ae:	230a      	movle	r3, #10
 80175b0:	fb03 2909 	mlale	r9, r3, r9, r2
 80175b4:	e7e1      	b.n	801757a <_strtod_l+0x242>
 80175b6:	2300      	movs	r3, #0
 80175b8:	9305      	str	r3, [sp, #20]
 80175ba:	2301      	movs	r3, #1
 80175bc:	e77c      	b.n	80174b8 <_strtod_l+0x180>
 80175be:	f04f 0c00 	mov.w	ip, #0
 80175c2:	f108 0202 	add.w	r2, r8, #2
 80175c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80175c8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80175cc:	e785      	b.n	80174da <_strtod_l+0x1a2>
 80175ce:	f04f 0c01 	mov.w	ip, #1
 80175d2:	e7f6      	b.n	80175c2 <_strtod_l+0x28a>
 80175d4:	0801cc60 	.word	0x0801cc60
 80175d8:	0801ca18 	.word	0x0801ca18
 80175dc:	7ff00000 	.word	0x7ff00000
 80175e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80175e2:	1c51      	adds	r1, r2, #1
 80175e4:	9117      	str	r1, [sp, #92]	; 0x5c
 80175e6:	7852      	ldrb	r2, [r2, #1]
 80175e8:	2a30      	cmp	r2, #48	; 0x30
 80175ea:	d0f9      	beq.n	80175e0 <_strtod_l+0x2a8>
 80175ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80175f0:	2908      	cmp	r1, #8
 80175f2:	f63f af79 	bhi.w	80174e8 <_strtod_l+0x1b0>
 80175f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80175fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80175fc:	9206      	str	r2, [sp, #24]
 80175fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017600:	1c51      	adds	r1, r2, #1
 8017602:	9117      	str	r1, [sp, #92]	; 0x5c
 8017604:	7852      	ldrb	r2, [r2, #1]
 8017606:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801760a:	2e09      	cmp	r6, #9
 801760c:	d937      	bls.n	801767e <_strtod_l+0x346>
 801760e:	9e06      	ldr	r6, [sp, #24]
 8017610:	1b89      	subs	r1, r1, r6
 8017612:	2908      	cmp	r1, #8
 8017614:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8017618:	dc02      	bgt.n	8017620 <_strtod_l+0x2e8>
 801761a:	4576      	cmp	r6, lr
 801761c:	bfa8      	it	ge
 801761e:	4676      	movge	r6, lr
 8017620:	f1bc 0f00 	cmp.w	ip, #0
 8017624:	d000      	beq.n	8017628 <_strtod_l+0x2f0>
 8017626:	4276      	negs	r6, r6
 8017628:	2d00      	cmp	r5, #0
 801762a:	d14d      	bne.n	80176c8 <_strtod_l+0x390>
 801762c:	9904      	ldr	r1, [sp, #16]
 801762e:	4301      	orrs	r1, r0
 8017630:	f47f aec6 	bne.w	80173c0 <_strtod_l+0x88>
 8017634:	2b00      	cmp	r3, #0
 8017636:	f47f aee1 	bne.w	80173fc <_strtod_l+0xc4>
 801763a:	2a69      	cmp	r2, #105	; 0x69
 801763c:	d027      	beq.n	801768e <_strtod_l+0x356>
 801763e:	dc24      	bgt.n	801768a <_strtod_l+0x352>
 8017640:	2a49      	cmp	r2, #73	; 0x49
 8017642:	d024      	beq.n	801768e <_strtod_l+0x356>
 8017644:	2a4e      	cmp	r2, #78	; 0x4e
 8017646:	f47f aed9 	bne.w	80173fc <_strtod_l+0xc4>
 801764a:	499f      	ldr	r1, [pc, #636]	; (80178c8 <_strtod_l+0x590>)
 801764c:	a817      	add	r0, sp, #92	; 0x5c
 801764e:	f001 fe3d 	bl	80192cc <__match>
 8017652:	2800      	cmp	r0, #0
 8017654:	f43f aed2 	beq.w	80173fc <_strtod_l+0xc4>
 8017658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801765a:	781b      	ldrb	r3, [r3, #0]
 801765c:	2b28      	cmp	r3, #40	; 0x28
 801765e:	d12d      	bne.n	80176bc <_strtod_l+0x384>
 8017660:	499a      	ldr	r1, [pc, #616]	; (80178cc <_strtod_l+0x594>)
 8017662:	aa1a      	add	r2, sp, #104	; 0x68
 8017664:	a817      	add	r0, sp, #92	; 0x5c
 8017666:	f001 fe45 	bl	80192f4 <__hexnan>
 801766a:	2805      	cmp	r0, #5
 801766c:	d126      	bne.n	80176bc <_strtod_l+0x384>
 801766e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017670:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8017674:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017678:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801767c:	e6a0      	b.n	80173c0 <_strtod_l+0x88>
 801767e:	210a      	movs	r1, #10
 8017680:	fb01 2e0e 	mla	lr, r1, lr, r2
 8017684:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017688:	e7b9      	b.n	80175fe <_strtod_l+0x2c6>
 801768a:	2a6e      	cmp	r2, #110	; 0x6e
 801768c:	e7db      	b.n	8017646 <_strtod_l+0x30e>
 801768e:	4990      	ldr	r1, [pc, #576]	; (80178d0 <_strtod_l+0x598>)
 8017690:	a817      	add	r0, sp, #92	; 0x5c
 8017692:	f001 fe1b 	bl	80192cc <__match>
 8017696:	2800      	cmp	r0, #0
 8017698:	f43f aeb0 	beq.w	80173fc <_strtod_l+0xc4>
 801769c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801769e:	498d      	ldr	r1, [pc, #564]	; (80178d4 <_strtod_l+0x59c>)
 80176a0:	3b01      	subs	r3, #1
 80176a2:	a817      	add	r0, sp, #92	; 0x5c
 80176a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80176a6:	f001 fe11 	bl	80192cc <__match>
 80176aa:	b910      	cbnz	r0, 80176b2 <_strtod_l+0x37a>
 80176ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80176ae:	3301      	adds	r3, #1
 80176b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80176b2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80178e4 <_strtod_l+0x5ac>
 80176b6:	f04f 0a00 	mov.w	sl, #0
 80176ba:	e681      	b.n	80173c0 <_strtod_l+0x88>
 80176bc:	4886      	ldr	r0, [pc, #536]	; (80178d8 <_strtod_l+0x5a0>)
 80176be:	f002 fde7 	bl	801a290 <nan>
 80176c2:	ec5b ab10 	vmov	sl, fp, d0
 80176c6:	e67b      	b.n	80173c0 <_strtod_l+0x88>
 80176c8:	9b05      	ldr	r3, [sp, #20]
 80176ca:	9807      	ldr	r0, [sp, #28]
 80176cc:	1af3      	subs	r3, r6, r3
 80176ce:	2f00      	cmp	r7, #0
 80176d0:	bf08      	it	eq
 80176d2:	462f      	moveq	r7, r5
 80176d4:	2d10      	cmp	r5, #16
 80176d6:	9306      	str	r3, [sp, #24]
 80176d8:	46a8      	mov	r8, r5
 80176da:	bfa8      	it	ge
 80176dc:	f04f 0810 	movge.w	r8, #16
 80176e0:	f7e8 ff28 	bl	8000534 <__aeabi_ui2d>
 80176e4:	2d09      	cmp	r5, #9
 80176e6:	4682      	mov	sl, r0
 80176e8:	468b      	mov	fp, r1
 80176ea:	dd13      	ble.n	8017714 <_strtod_l+0x3dc>
 80176ec:	4b7b      	ldr	r3, [pc, #492]	; (80178dc <_strtod_l+0x5a4>)
 80176ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80176f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80176f6:	f7e8 ff97 	bl	8000628 <__aeabi_dmul>
 80176fa:	4682      	mov	sl, r0
 80176fc:	4648      	mov	r0, r9
 80176fe:	468b      	mov	fp, r1
 8017700:	f7e8 ff18 	bl	8000534 <__aeabi_ui2d>
 8017704:	4602      	mov	r2, r0
 8017706:	460b      	mov	r3, r1
 8017708:	4650      	mov	r0, sl
 801770a:	4659      	mov	r1, fp
 801770c:	f7e8 fdd6 	bl	80002bc <__adddf3>
 8017710:	4682      	mov	sl, r0
 8017712:	468b      	mov	fp, r1
 8017714:	2d0f      	cmp	r5, #15
 8017716:	dc38      	bgt.n	801778a <_strtod_l+0x452>
 8017718:	9b06      	ldr	r3, [sp, #24]
 801771a:	2b00      	cmp	r3, #0
 801771c:	f43f ae50 	beq.w	80173c0 <_strtod_l+0x88>
 8017720:	dd24      	ble.n	801776c <_strtod_l+0x434>
 8017722:	2b16      	cmp	r3, #22
 8017724:	dc0b      	bgt.n	801773e <_strtod_l+0x406>
 8017726:	496d      	ldr	r1, [pc, #436]	; (80178dc <_strtod_l+0x5a4>)
 8017728:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801772c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017730:	4652      	mov	r2, sl
 8017732:	465b      	mov	r3, fp
 8017734:	f7e8 ff78 	bl	8000628 <__aeabi_dmul>
 8017738:	4682      	mov	sl, r0
 801773a:	468b      	mov	fp, r1
 801773c:	e640      	b.n	80173c0 <_strtod_l+0x88>
 801773e:	9a06      	ldr	r2, [sp, #24]
 8017740:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8017744:	4293      	cmp	r3, r2
 8017746:	db20      	blt.n	801778a <_strtod_l+0x452>
 8017748:	4c64      	ldr	r4, [pc, #400]	; (80178dc <_strtod_l+0x5a4>)
 801774a:	f1c5 050f 	rsb	r5, r5, #15
 801774e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8017752:	4652      	mov	r2, sl
 8017754:	465b      	mov	r3, fp
 8017756:	e9d1 0100 	ldrd	r0, r1, [r1]
 801775a:	f7e8 ff65 	bl	8000628 <__aeabi_dmul>
 801775e:	9b06      	ldr	r3, [sp, #24]
 8017760:	1b5d      	subs	r5, r3, r5
 8017762:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8017766:	e9d4 2300 	ldrd	r2, r3, [r4]
 801776a:	e7e3      	b.n	8017734 <_strtod_l+0x3fc>
 801776c:	9b06      	ldr	r3, [sp, #24]
 801776e:	3316      	adds	r3, #22
 8017770:	db0b      	blt.n	801778a <_strtod_l+0x452>
 8017772:	9b05      	ldr	r3, [sp, #20]
 8017774:	1b9e      	subs	r6, r3, r6
 8017776:	4b59      	ldr	r3, [pc, #356]	; (80178dc <_strtod_l+0x5a4>)
 8017778:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801777c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017780:	4650      	mov	r0, sl
 8017782:	4659      	mov	r1, fp
 8017784:	f7e9 f87a 	bl	800087c <__aeabi_ddiv>
 8017788:	e7d6      	b.n	8017738 <_strtod_l+0x400>
 801778a:	9b06      	ldr	r3, [sp, #24]
 801778c:	eba5 0808 	sub.w	r8, r5, r8
 8017790:	4498      	add	r8, r3
 8017792:	f1b8 0f00 	cmp.w	r8, #0
 8017796:	dd74      	ble.n	8017882 <_strtod_l+0x54a>
 8017798:	f018 030f 	ands.w	r3, r8, #15
 801779c:	d00a      	beq.n	80177b4 <_strtod_l+0x47c>
 801779e:	494f      	ldr	r1, [pc, #316]	; (80178dc <_strtod_l+0x5a4>)
 80177a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80177a4:	4652      	mov	r2, sl
 80177a6:	465b      	mov	r3, fp
 80177a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80177ac:	f7e8 ff3c 	bl	8000628 <__aeabi_dmul>
 80177b0:	4682      	mov	sl, r0
 80177b2:	468b      	mov	fp, r1
 80177b4:	f038 080f 	bics.w	r8, r8, #15
 80177b8:	d04f      	beq.n	801785a <_strtod_l+0x522>
 80177ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80177be:	dd22      	ble.n	8017806 <_strtod_l+0x4ce>
 80177c0:	2500      	movs	r5, #0
 80177c2:	462e      	mov	r6, r5
 80177c4:	9507      	str	r5, [sp, #28]
 80177c6:	9505      	str	r5, [sp, #20]
 80177c8:	2322      	movs	r3, #34	; 0x22
 80177ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 80178e4 <_strtod_l+0x5ac>
 80177ce:	6023      	str	r3, [r4, #0]
 80177d0:	f04f 0a00 	mov.w	sl, #0
 80177d4:	9b07      	ldr	r3, [sp, #28]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	f43f adf2 	beq.w	80173c0 <_strtod_l+0x88>
 80177dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80177de:	4620      	mov	r0, r4
 80177e0:	f001 fe82 	bl	80194e8 <_Bfree>
 80177e4:	9905      	ldr	r1, [sp, #20]
 80177e6:	4620      	mov	r0, r4
 80177e8:	f001 fe7e 	bl	80194e8 <_Bfree>
 80177ec:	4631      	mov	r1, r6
 80177ee:	4620      	mov	r0, r4
 80177f0:	f001 fe7a 	bl	80194e8 <_Bfree>
 80177f4:	9907      	ldr	r1, [sp, #28]
 80177f6:	4620      	mov	r0, r4
 80177f8:	f001 fe76 	bl	80194e8 <_Bfree>
 80177fc:	4629      	mov	r1, r5
 80177fe:	4620      	mov	r0, r4
 8017800:	f001 fe72 	bl	80194e8 <_Bfree>
 8017804:	e5dc      	b.n	80173c0 <_strtod_l+0x88>
 8017806:	4b36      	ldr	r3, [pc, #216]	; (80178e0 <_strtod_l+0x5a8>)
 8017808:	9304      	str	r3, [sp, #16]
 801780a:	2300      	movs	r3, #0
 801780c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017810:	4650      	mov	r0, sl
 8017812:	4659      	mov	r1, fp
 8017814:	4699      	mov	r9, r3
 8017816:	f1b8 0f01 	cmp.w	r8, #1
 801781a:	dc21      	bgt.n	8017860 <_strtod_l+0x528>
 801781c:	b10b      	cbz	r3, 8017822 <_strtod_l+0x4ea>
 801781e:	4682      	mov	sl, r0
 8017820:	468b      	mov	fp, r1
 8017822:	4b2f      	ldr	r3, [pc, #188]	; (80178e0 <_strtod_l+0x5a8>)
 8017824:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017828:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801782c:	4652      	mov	r2, sl
 801782e:	465b      	mov	r3, fp
 8017830:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017834:	f7e8 fef8 	bl	8000628 <__aeabi_dmul>
 8017838:	4b2a      	ldr	r3, [pc, #168]	; (80178e4 <_strtod_l+0x5ac>)
 801783a:	460a      	mov	r2, r1
 801783c:	400b      	ands	r3, r1
 801783e:	492a      	ldr	r1, [pc, #168]	; (80178e8 <_strtod_l+0x5b0>)
 8017840:	428b      	cmp	r3, r1
 8017842:	4682      	mov	sl, r0
 8017844:	d8bc      	bhi.n	80177c0 <_strtod_l+0x488>
 8017846:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801784a:	428b      	cmp	r3, r1
 801784c:	bf86      	itte	hi
 801784e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80178ec <_strtod_l+0x5b4>
 8017852:	f04f 3aff 	movhi.w	sl, #4294967295
 8017856:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801785a:	2300      	movs	r3, #0
 801785c:	9304      	str	r3, [sp, #16]
 801785e:	e084      	b.n	801796a <_strtod_l+0x632>
 8017860:	f018 0f01 	tst.w	r8, #1
 8017864:	d005      	beq.n	8017872 <_strtod_l+0x53a>
 8017866:	9b04      	ldr	r3, [sp, #16]
 8017868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801786c:	f7e8 fedc 	bl	8000628 <__aeabi_dmul>
 8017870:	2301      	movs	r3, #1
 8017872:	9a04      	ldr	r2, [sp, #16]
 8017874:	3208      	adds	r2, #8
 8017876:	f109 0901 	add.w	r9, r9, #1
 801787a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801787e:	9204      	str	r2, [sp, #16]
 8017880:	e7c9      	b.n	8017816 <_strtod_l+0x4de>
 8017882:	d0ea      	beq.n	801785a <_strtod_l+0x522>
 8017884:	f1c8 0800 	rsb	r8, r8, #0
 8017888:	f018 020f 	ands.w	r2, r8, #15
 801788c:	d00a      	beq.n	80178a4 <_strtod_l+0x56c>
 801788e:	4b13      	ldr	r3, [pc, #76]	; (80178dc <_strtod_l+0x5a4>)
 8017890:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017894:	4650      	mov	r0, sl
 8017896:	4659      	mov	r1, fp
 8017898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801789c:	f7e8 ffee 	bl	800087c <__aeabi_ddiv>
 80178a0:	4682      	mov	sl, r0
 80178a2:	468b      	mov	fp, r1
 80178a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80178a8:	d0d7      	beq.n	801785a <_strtod_l+0x522>
 80178aa:	f1b8 0f1f 	cmp.w	r8, #31
 80178ae:	dd1f      	ble.n	80178f0 <_strtod_l+0x5b8>
 80178b0:	2500      	movs	r5, #0
 80178b2:	462e      	mov	r6, r5
 80178b4:	9507      	str	r5, [sp, #28]
 80178b6:	9505      	str	r5, [sp, #20]
 80178b8:	2322      	movs	r3, #34	; 0x22
 80178ba:	f04f 0a00 	mov.w	sl, #0
 80178be:	f04f 0b00 	mov.w	fp, #0
 80178c2:	6023      	str	r3, [r4, #0]
 80178c4:	e786      	b.n	80177d4 <_strtod_l+0x49c>
 80178c6:	bf00      	nop
 80178c8:	0801c9e9 	.word	0x0801c9e9
 80178cc:	0801ca2c 	.word	0x0801ca2c
 80178d0:	0801c9e1 	.word	0x0801c9e1
 80178d4:	0801cb6c 	.word	0x0801cb6c
 80178d8:	0801ce18 	.word	0x0801ce18
 80178dc:	0801ccf8 	.word	0x0801ccf8
 80178e0:	0801ccd0 	.word	0x0801ccd0
 80178e4:	7ff00000 	.word	0x7ff00000
 80178e8:	7ca00000 	.word	0x7ca00000
 80178ec:	7fefffff 	.word	0x7fefffff
 80178f0:	f018 0310 	ands.w	r3, r8, #16
 80178f4:	bf18      	it	ne
 80178f6:	236a      	movne	r3, #106	; 0x6a
 80178f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8017ca8 <_strtod_l+0x970>
 80178fc:	9304      	str	r3, [sp, #16]
 80178fe:	4650      	mov	r0, sl
 8017900:	4659      	mov	r1, fp
 8017902:	2300      	movs	r3, #0
 8017904:	f018 0f01 	tst.w	r8, #1
 8017908:	d004      	beq.n	8017914 <_strtod_l+0x5dc>
 801790a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801790e:	f7e8 fe8b 	bl	8000628 <__aeabi_dmul>
 8017912:	2301      	movs	r3, #1
 8017914:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017918:	f109 0908 	add.w	r9, r9, #8
 801791c:	d1f2      	bne.n	8017904 <_strtod_l+0x5cc>
 801791e:	b10b      	cbz	r3, 8017924 <_strtod_l+0x5ec>
 8017920:	4682      	mov	sl, r0
 8017922:	468b      	mov	fp, r1
 8017924:	9b04      	ldr	r3, [sp, #16]
 8017926:	b1c3      	cbz	r3, 801795a <_strtod_l+0x622>
 8017928:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801792c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017930:	2b00      	cmp	r3, #0
 8017932:	4659      	mov	r1, fp
 8017934:	dd11      	ble.n	801795a <_strtod_l+0x622>
 8017936:	2b1f      	cmp	r3, #31
 8017938:	f340 8124 	ble.w	8017b84 <_strtod_l+0x84c>
 801793c:	2b34      	cmp	r3, #52	; 0x34
 801793e:	bfde      	ittt	le
 8017940:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8017944:	f04f 33ff 	movle.w	r3, #4294967295
 8017948:	fa03 f202 	lslle.w	r2, r3, r2
 801794c:	f04f 0a00 	mov.w	sl, #0
 8017950:	bfcc      	ite	gt
 8017952:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017956:	ea02 0b01 	andle.w	fp, r2, r1
 801795a:	2200      	movs	r2, #0
 801795c:	2300      	movs	r3, #0
 801795e:	4650      	mov	r0, sl
 8017960:	4659      	mov	r1, fp
 8017962:	f7e9 f8c9 	bl	8000af8 <__aeabi_dcmpeq>
 8017966:	2800      	cmp	r0, #0
 8017968:	d1a2      	bne.n	80178b0 <_strtod_l+0x578>
 801796a:	9b07      	ldr	r3, [sp, #28]
 801796c:	9300      	str	r3, [sp, #0]
 801796e:	9908      	ldr	r1, [sp, #32]
 8017970:	462b      	mov	r3, r5
 8017972:	463a      	mov	r2, r7
 8017974:	4620      	mov	r0, r4
 8017976:	f001 fe1f 	bl	80195b8 <__s2b>
 801797a:	9007      	str	r0, [sp, #28]
 801797c:	2800      	cmp	r0, #0
 801797e:	f43f af1f 	beq.w	80177c0 <_strtod_l+0x488>
 8017982:	9b05      	ldr	r3, [sp, #20]
 8017984:	1b9e      	subs	r6, r3, r6
 8017986:	9b06      	ldr	r3, [sp, #24]
 8017988:	2b00      	cmp	r3, #0
 801798a:	bfb4      	ite	lt
 801798c:	4633      	movlt	r3, r6
 801798e:	2300      	movge	r3, #0
 8017990:	930c      	str	r3, [sp, #48]	; 0x30
 8017992:	9b06      	ldr	r3, [sp, #24]
 8017994:	2500      	movs	r5, #0
 8017996:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801799a:	9312      	str	r3, [sp, #72]	; 0x48
 801799c:	462e      	mov	r6, r5
 801799e:	9b07      	ldr	r3, [sp, #28]
 80179a0:	4620      	mov	r0, r4
 80179a2:	6859      	ldr	r1, [r3, #4]
 80179a4:	f001 fd60 	bl	8019468 <_Balloc>
 80179a8:	9005      	str	r0, [sp, #20]
 80179aa:	2800      	cmp	r0, #0
 80179ac:	f43f af0c 	beq.w	80177c8 <_strtod_l+0x490>
 80179b0:	9b07      	ldr	r3, [sp, #28]
 80179b2:	691a      	ldr	r2, [r3, #16]
 80179b4:	3202      	adds	r2, #2
 80179b6:	f103 010c 	add.w	r1, r3, #12
 80179ba:	0092      	lsls	r2, r2, #2
 80179bc:	300c      	adds	r0, #12
 80179be:	f7fe fde9 	bl	8016594 <memcpy>
 80179c2:	ec4b ab10 	vmov	d0, sl, fp
 80179c6:	aa1a      	add	r2, sp, #104	; 0x68
 80179c8:	a919      	add	r1, sp, #100	; 0x64
 80179ca:	4620      	mov	r0, r4
 80179cc:	f002 f93a 	bl	8019c44 <__d2b>
 80179d0:	ec4b ab18 	vmov	d8, sl, fp
 80179d4:	9018      	str	r0, [sp, #96]	; 0x60
 80179d6:	2800      	cmp	r0, #0
 80179d8:	f43f aef6 	beq.w	80177c8 <_strtod_l+0x490>
 80179dc:	2101      	movs	r1, #1
 80179de:	4620      	mov	r0, r4
 80179e0:	f001 fe84 	bl	80196ec <__i2b>
 80179e4:	4606      	mov	r6, r0
 80179e6:	2800      	cmp	r0, #0
 80179e8:	f43f aeee 	beq.w	80177c8 <_strtod_l+0x490>
 80179ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80179ee:	9904      	ldr	r1, [sp, #16]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	bfab      	itete	ge
 80179f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80179f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80179f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80179fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80179fe:	bfac      	ite	ge
 8017a00:	eb03 0902 	addge.w	r9, r3, r2
 8017a04:	1ad7      	sublt	r7, r2, r3
 8017a06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017a08:	eba3 0801 	sub.w	r8, r3, r1
 8017a0c:	4490      	add	r8, r2
 8017a0e:	4ba1      	ldr	r3, [pc, #644]	; (8017c94 <_strtod_l+0x95c>)
 8017a10:	f108 38ff 	add.w	r8, r8, #4294967295
 8017a14:	4598      	cmp	r8, r3
 8017a16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017a1a:	f280 80c7 	bge.w	8017bac <_strtod_l+0x874>
 8017a1e:	eba3 0308 	sub.w	r3, r3, r8
 8017a22:	2b1f      	cmp	r3, #31
 8017a24:	eba2 0203 	sub.w	r2, r2, r3
 8017a28:	f04f 0101 	mov.w	r1, #1
 8017a2c:	f300 80b1 	bgt.w	8017b92 <_strtod_l+0x85a>
 8017a30:	fa01 f303 	lsl.w	r3, r1, r3
 8017a34:	930d      	str	r3, [sp, #52]	; 0x34
 8017a36:	2300      	movs	r3, #0
 8017a38:	9308      	str	r3, [sp, #32]
 8017a3a:	eb09 0802 	add.w	r8, r9, r2
 8017a3e:	9b04      	ldr	r3, [sp, #16]
 8017a40:	45c1      	cmp	r9, r8
 8017a42:	4417      	add	r7, r2
 8017a44:	441f      	add	r7, r3
 8017a46:	464b      	mov	r3, r9
 8017a48:	bfa8      	it	ge
 8017a4a:	4643      	movge	r3, r8
 8017a4c:	42bb      	cmp	r3, r7
 8017a4e:	bfa8      	it	ge
 8017a50:	463b      	movge	r3, r7
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	bfc2      	ittt	gt
 8017a56:	eba8 0803 	subgt.w	r8, r8, r3
 8017a5a:	1aff      	subgt	r7, r7, r3
 8017a5c:	eba9 0903 	subgt.w	r9, r9, r3
 8017a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	dd17      	ble.n	8017a96 <_strtod_l+0x75e>
 8017a66:	4631      	mov	r1, r6
 8017a68:	461a      	mov	r2, r3
 8017a6a:	4620      	mov	r0, r4
 8017a6c:	f001 fefe 	bl	801986c <__pow5mult>
 8017a70:	4606      	mov	r6, r0
 8017a72:	2800      	cmp	r0, #0
 8017a74:	f43f aea8 	beq.w	80177c8 <_strtod_l+0x490>
 8017a78:	4601      	mov	r1, r0
 8017a7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017a7c:	4620      	mov	r0, r4
 8017a7e:	f001 fe4b 	bl	8019718 <__multiply>
 8017a82:	900b      	str	r0, [sp, #44]	; 0x2c
 8017a84:	2800      	cmp	r0, #0
 8017a86:	f43f ae9f 	beq.w	80177c8 <_strtod_l+0x490>
 8017a8a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	f001 fd2b 	bl	80194e8 <_Bfree>
 8017a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a94:	9318      	str	r3, [sp, #96]	; 0x60
 8017a96:	f1b8 0f00 	cmp.w	r8, #0
 8017a9a:	f300 808c 	bgt.w	8017bb6 <_strtod_l+0x87e>
 8017a9e:	9b06      	ldr	r3, [sp, #24]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	dd08      	ble.n	8017ab6 <_strtod_l+0x77e>
 8017aa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017aa6:	9905      	ldr	r1, [sp, #20]
 8017aa8:	4620      	mov	r0, r4
 8017aaa:	f001 fedf 	bl	801986c <__pow5mult>
 8017aae:	9005      	str	r0, [sp, #20]
 8017ab0:	2800      	cmp	r0, #0
 8017ab2:	f43f ae89 	beq.w	80177c8 <_strtod_l+0x490>
 8017ab6:	2f00      	cmp	r7, #0
 8017ab8:	dd08      	ble.n	8017acc <_strtod_l+0x794>
 8017aba:	9905      	ldr	r1, [sp, #20]
 8017abc:	463a      	mov	r2, r7
 8017abe:	4620      	mov	r0, r4
 8017ac0:	f001 ff2e 	bl	8019920 <__lshift>
 8017ac4:	9005      	str	r0, [sp, #20]
 8017ac6:	2800      	cmp	r0, #0
 8017ac8:	f43f ae7e 	beq.w	80177c8 <_strtod_l+0x490>
 8017acc:	f1b9 0f00 	cmp.w	r9, #0
 8017ad0:	dd08      	ble.n	8017ae4 <_strtod_l+0x7ac>
 8017ad2:	4631      	mov	r1, r6
 8017ad4:	464a      	mov	r2, r9
 8017ad6:	4620      	mov	r0, r4
 8017ad8:	f001 ff22 	bl	8019920 <__lshift>
 8017adc:	4606      	mov	r6, r0
 8017ade:	2800      	cmp	r0, #0
 8017ae0:	f43f ae72 	beq.w	80177c8 <_strtod_l+0x490>
 8017ae4:	9a05      	ldr	r2, [sp, #20]
 8017ae6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017ae8:	4620      	mov	r0, r4
 8017aea:	f001 ffa5 	bl	8019a38 <__mdiff>
 8017aee:	4605      	mov	r5, r0
 8017af0:	2800      	cmp	r0, #0
 8017af2:	f43f ae69 	beq.w	80177c8 <_strtod_l+0x490>
 8017af6:	68c3      	ldr	r3, [r0, #12]
 8017af8:	930b      	str	r3, [sp, #44]	; 0x2c
 8017afa:	2300      	movs	r3, #0
 8017afc:	60c3      	str	r3, [r0, #12]
 8017afe:	4631      	mov	r1, r6
 8017b00:	f001 ff7e 	bl	8019a00 <__mcmp>
 8017b04:	2800      	cmp	r0, #0
 8017b06:	da60      	bge.n	8017bca <_strtod_l+0x892>
 8017b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b0a:	ea53 030a 	orrs.w	r3, r3, sl
 8017b0e:	f040 8082 	bne.w	8017c16 <_strtod_l+0x8de>
 8017b12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d17d      	bne.n	8017c16 <_strtod_l+0x8de>
 8017b1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017b1e:	0d1b      	lsrs	r3, r3, #20
 8017b20:	051b      	lsls	r3, r3, #20
 8017b22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017b26:	d976      	bls.n	8017c16 <_strtod_l+0x8de>
 8017b28:	696b      	ldr	r3, [r5, #20]
 8017b2a:	b913      	cbnz	r3, 8017b32 <_strtod_l+0x7fa>
 8017b2c:	692b      	ldr	r3, [r5, #16]
 8017b2e:	2b01      	cmp	r3, #1
 8017b30:	dd71      	ble.n	8017c16 <_strtod_l+0x8de>
 8017b32:	4629      	mov	r1, r5
 8017b34:	2201      	movs	r2, #1
 8017b36:	4620      	mov	r0, r4
 8017b38:	f001 fef2 	bl	8019920 <__lshift>
 8017b3c:	4631      	mov	r1, r6
 8017b3e:	4605      	mov	r5, r0
 8017b40:	f001 ff5e 	bl	8019a00 <__mcmp>
 8017b44:	2800      	cmp	r0, #0
 8017b46:	dd66      	ble.n	8017c16 <_strtod_l+0x8de>
 8017b48:	9904      	ldr	r1, [sp, #16]
 8017b4a:	4a53      	ldr	r2, [pc, #332]	; (8017c98 <_strtod_l+0x960>)
 8017b4c:	465b      	mov	r3, fp
 8017b4e:	2900      	cmp	r1, #0
 8017b50:	f000 8081 	beq.w	8017c56 <_strtod_l+0x91e>
 8017b54:	ea02 010b 	and.w	r1, r2, fp
 8017b58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017b5c:	dc7b      	bgt.n	8017c56 <_strtod_l+0x91e>
 8017b5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017b62:	f77f aea9 	ble.w	80178b8 <_strtod_l+0x580>
 8017b66:	4b4d      	ldr	r3, [pc, #308]	; (8017c9c <_strtod_l+0x964>)
 8017b68:	4650      	mov	r0, sl
 8017b6a:	4659      	mov	r1, fp
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	f7e8 fd5b 	bl	8000628 <__aeabi_dmul>
 8017b72:	460b      	mov	r3, r1
 8017b74:	4303      	orrs	r3, r0
 8017b76:	bf08      	it	eq
 8017b78:	2322      	moveq	r3, #34	; 0x22
 8017b7a:	4682      	mov	sl, r0
 8017b7c:	468b      	mov	fp, r1
 8017b7e:	bf08      	it	eq
 8017b80:	6023      	streq	r3, [r4, #0]
 8017b82:	e62b      	b.n	80177dc <_strtod_l+0x4a4>
 8017b84:	f04f 32ff 	mov.w	r2, #4294967295
 8017b88:	fa02 f303 	lsl.w	r3, r2, r3
 8017b8c:	ea03 0a0a 	and.w	sl, r3, sl
 8017b90:	e6e3      	b.n	801795a <_strtod_l+0x622>
 8017b92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8017b96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8017b9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8017b9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8017ba2:	fa01 f308 	lsl.w	r3, r1, r8
 8017ba6:	9308      	str	r3, [sp, #32]
 8017ba8:	910d      	str	r1, [sp, #52]	; 0x34
 8017baa:	e746      	b.n	8017a3a <_strtod_l+0x702>
 8017bac:	2300      	movs	r3, #0
 8017bae:	9308      	str	r3, [sp, #32]
 8017bb0:	2301      	movs	r3, #1
 8017bb2:	930d      	str	r3, [sp, #52]	; 0x34
 8017bb4:	e741      	b.n	8017a3a <_strtod_l+0x702>
 8017bb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017bb8:	4642      	mov	r2, r8
 8017bba:	4620      	mov	r0, r4
 8017bbc:	f001 feb0 	bl	8019920 <__lshift>
 8017bc0:	9018      	str	r0, [sp, #96]	; 0x60
 8017bc2:	2800      	cmp	r0, #0
 8017bc4:	f47f af6b 	bne.w	8017a9e <_strtod_l+0x766>
 8017bc8:	e5fe      	b.n	80177c8 <_strtod_l+0x490>
 8017bca:	465f      	mov	r7, fp
 8017bcc:	d16e      	bne.n	8017cac <_strtod_l+0x974>
 8017bce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017bd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017bd4:	b342      	cbz	r2, 8017c28 <_strtod_l+0x8f0>
 8017bd6:	4a32      	ldr	r2, [pc, #200]	; (8017ca0 <_strtod_l+0x968>)
 8017bd8:	4293      	cmp	r3, r2
 8017bda:	d128      	bne.n	8017c2e <_strtod_l+0x8f6>
 8017bdc:	9b04      	ldr	r3, [sp, #16]
 8017bde:	4651      	mov	r1, sl
 8017be0:	b1eb      	cbz	r3, 8017c1e <_strtod_l+0x8e6>
 8017be2:	4b2d      	ldr	r3, [pc, #180]	; (8017c98 <_strtod_l+0x960>)
 8017be4:	403b      	ands	r3, r7
 8017be6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017bea:	f04f 32ff 	mov.w	r2, #4294967295
 8017bee:	d819      	bhi.n	8017c24 <_strtod_l+0x8ec>
 8017bf0:	0d1b      	lsrs	r3, r3, #20
 8017bf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8017bfa:	4299      	cmp	r1, r3
 8017bfc:	d117      	bne.n	8017c2e <_strtod_l+0x8f6>
 8017bfe:	4b29      	ldr	r3, [pc, #164]	; (8017ca4 <_strtod_l+0x96c>)
 8017c00:	429f      	cmp	r7, r3
 8017c02:	d102      	bne.n	8017c0a <_strtod_l+0x8d2>
 8017c04:	3101      	adds	r1, #1
 8017c06:	f43f addf 	beq.w	80177c8 <_strtod_l+0x490>
 8017c0a:	4b23      	ldr	r3, [pc, #140]	; (8017c98 <_strtod_l+0x960>)
 8017c0c:	403b      	ands	r3, r7
 8017c0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017c12:	f04f 0a00 	mov.w	sl, #0
 8017c16:	9b04      	ldr	r3, [sp, #16]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d1a4      	bne.n	8017b66 <_strtod_l+0x82e>
 8017c1c:	e5de      	b.n	80177dc <_strtod_l+0x4a4>
 8017c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8017c22:	e7ea      	b.n	8017bfa <_strtod_l+0x8c2>
 8017c24:	4613      	mov	r3, r2
 8017c26:	e7e8      	b.n	8017bfa <_strtod_l+0x8c2>
 8017c28:	ea53 030a 	orrs.w	r3, r3, sl
 8017c2c:	d08c      	beq.n	8017b48 <_strtod_l+0x810>
 8017c2e:	9b08      	ldr	r3, [sp, #32]
 8017c30:	b1db      	cbz	r3, 8017c6a <_strtod_l+0x932>
 8017c32:	423b      	tst	r3, r7
 8017c34:	d0ef      	beq.n	8017c16 <_strtod_l+0x8de>
 8017c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c38:	9a04      	ldr	r2, [sp, #16]
 8017c3a:	4650      	mov	r0, sl
 8017c3c:	4659      	mov	r1, fp
 8017c3e:	b1c3      	cbz	r3, 8017c72 <_strtod_l+0x93a>
 8017c40:	f7ff fb5e 	bl	8017300 <sulp>
 8017c44:	4602      	mov	r2, r0
 8017c46:	460b      	mov	r3, r1
 8017c48:	ec51 0b18 	vmov	r0, r1, d8
 8017c4c:	f7e8 fb36 	bl	80002bc <__adddf3>
 8017c50:	4682      	mov	sl, r0
 8017c52:	468b      	mov	fp, r1
 8017c54:	e7df      	b.n	8017c16 <_strtod_l+0x8de>
 8017c56:	4013      	ands	r3, r2
 8017c58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017c5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017c60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017c64:	f04f 3aff 	mov.w	sl, #4294967295
 8017c68:	e7d5      	b.n	8017c16 <_strtod_l+0x8de>
 8017c6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c6c:	ea13 0f0a 	tst.w	r3, sl
 8017c70:	e7e0      	b.n	8017c34 <_strtod_l+0x8fc>
 8017c72:	f7ff fb45 	bl	8017300 <sulp>
 8017c76:	4602      	mov	r2, r0
 8017c78:	460b      	mov	r3, r1
 8017c7a:	ec51 0b18 	vmov	r0, r1, d8
 8017c7e:	f7e8 fb1b 	bl	80002b8 <__aeabi_dsub>
 8017c82:	2200      	movs	r2, #0
 8017c84:	2300      	movs	r3, #0
 8017c86:	4682      	mov	sl, r0
 8017c88:	468b      	mov	fp, r1
 8017c8a:	f7e8 ff35 	bl	8000af8 <__aeabi_dcmpeq>
 8017c8e:	2800      	cmp	r0, #0
 8017c90:	d0c1      	beq.n	8017c16 <_strtod_l+0x8de>
 8017c92:	e611      	b.n	80178b8 <_strtod_l+0x580>
 8017c94:	fffffc02 	.word	0xfffffc02
 8017c98:	7ff00000 	.word	0x7ff00000
 8017c9c:	39500000 	.word	0x39500000
 8017ca0:	000fffff 	.word	0x000fffff
 8017ca4:	7fefffff 	.word	0x7fefffff
 8017ca8:	0801ca40 	.word	0x0801ca40
 8017cac:	4631      	mov	r1, r6
 8017cae:	4628      	mov	r0, r5
 8017cb0:	f002 f824 	bl	8019cfc <__ratio>
 8017cb4:	ec59 8b10 	vmov	r8, r9, d0
 8017cb8:	ee10 0a10 	vmov	r0, s0
 8017cbc:	2200      	movs	r2, #0
 8017cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017cc2:	4649      	mov	r1, r9
 8017cc4:	f7e8 ff2c 	bl	8000b20 <__aeabi_dcmple>
 8017cc8:	2800      	cmp	r0, #0
 8017cca:	d07a      	beq.n	8017dc2 <_strtod_l+0xa8a>
 8017ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d04a      	beq.n	8017d68 <_strtod_l+0xa30>
 8017cd2:	4b95      	ldr	r3, [pc, #596]	; (8017f28 <_strtod_l+0xbf0>)
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017cda:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017f28 <_strtod_l+0xbf0>
 8017cde:	f04f 0800 	mov.w	r8, #0
 8017ce2:	4b92      	ldr	r3, [pc, #584]	; (8017f2c <_strtod_l+0xbf4>)
 8017ce4:	403b      	ands	r3, r7
 8017ce6:	930d      	str	r3, [sp, #52]	; 0x34
 8017ce8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017cea:	4b91      	ldr	r3, [pc, #580]	; (8017f30 <_strtod_l+0xbf8>)
 8017cec:	429a      	cmp	r2, r3
 8017cee:	f040 80b0 	bne.w	8017e52 <_strtod_l+0xb1a>
 8017cf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017cf6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017cfa:	ec4b ab10 	vmov	d0, sl, fp
 8017cfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017d02:	f001 ff23 	bl	8019b4c <__ulp>
 8017d06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017d0a:	ec53 2b10 	vmov	r2, r3, d0
 8017d0e:	f7e8 fc8b 	bl	8000628 <__aeabi_dmul>
 8017d12:	4652      	mov	r2, sl
 8017d14:	465b      	mov	r3, fp
 8017d16:	f7e8 fad1 	bl	80002bc <__adddf3>
 8017d1a:	460b      	mov	r3, r1
 8017d1c:	4983      	ldr	r1, [pc, #524]	; (8017f2c <_strtod_l+0xbf4>)
 8017d1e:	4a85      	ldr	r2, [pc, #532]	; (8017f34 <_strtod_l+0xbfc>)
 8017d20:	4019      	ands	r1, r3
 8017d22:	4291      	cmp	r1, r2
 8017d24:	4682      	mov	sl, r0
 8017d26:	d960      	bls.n	8017dea <_strtod_l+0xab2>
 8017d28:	ee18 3a90 	vmov	r3, s17
 8017d2c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017d30:	4293      	cmp	r3, r2
 8017d32:	d104      	bne.n	8017d3e <_strtod_l+0xa06>
 8017d34:	ee18 3a10 	vmov	r3, s16
 8017d38:	3301      	adds	r3, #1
 8017d3a:	f43f ad45 	beq.w	80177c8 <_strtod_l+0x490>
 8017d3e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8017f40 <_strtod_l+0xc08>
 8017d42:	f04f 3aff 	mov.w	sl, #4294967295
 8017d46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017d48:	4620      	mov	r0, r4
 8017d4a:	f001 fbcd 	bl	80194e8 <_Bfree>
 8017d4e:	9905      	ldr	r1, [sp, #20]
 8017d50:	4620      	mov	r0, r4
 8017d52:	f001 fbc9 	bl	80194e8 <_Bfree>
 8017d56:	4631      	mov	r1, r6
 8017d58:	4620      	mov	r0, r4
 8017d5a:	f001 fbc5 	bl	80194e8 <_Bfree>
 8017d5e:	4629      	mov	r1, r5
 8017d60:	4620      	mov	r0, r4
 8017d62:	f001 fbc1 	bl	80194e8 <_Bfree>
 8017d66:	e61a      	b.n	801799e <_strtod_l+0x666>
 8017d68:	f1ba 0f00 	cmp.w	sl, #0
 8017d6c:	d11b      	bne.n	8017da6 <_strtod_l+0xa6e>
 8017d6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017d72:	b9f3      	cbnz	r3, 8017db2 <_strtod_l+0xa7a>
 8017d74:	4b6c      	ldr	r3, [pc, #432]	; (8017f28 <_strtod_l+0xbf0>)
 8017d76:	2200      	movs	r2, #0
 8017d78:	4640      	mov	r0, r8
 8017d7a:	4649      	mov	r1, r9
 8017d7c:	f7e8 fec6 	bl	8000b0c <__aeabi_dcmplt>
 8017d80:	b9d0      	cbnz	r0, 8017db8 <_strtod_l+0xa80>
 8017d82:	4640      	mov	r0, r8
 8017d84:	4649      	mov	r1, r9
 8017d86:	4b6c      	ldr	r3, [pc, #432]	; (8017f38 <_strtod_l+0xc00>)
 8017d88:	2200      	movs	r2, #0
 8017d8a:	f7e8 fc4d 	bl	8000628 <__aeabi_dmul>
 8017d8e:	4680      	mov	r8, r0
 8017d90:	4689      	mov	r9, r1
 8017d92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017d96:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8017d9a:	9315      	str	r3, [sp, #84]	; 0x54
 8017d9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017da0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017da4:	e79d      	b.n	8017ce2 <_strtod_l+0x9aa>
 8017da6:	f1ba 0f01 	cmp.w	sl, #1
 8017daa:	d102      	bne.n	8017db2 <_strtod_l+0xa7a>
 8017dac:	2f00      	cmp	r7, #0
 8017dae:	f43f ad83 	beq.w	80178b8 <_strtod_l+0x580>
 8017db2:	4b62      	ldr	r3, [pc, #392]	; (8017f3c <_strtod_l+0xc04>)
 8017db4:	2200      	movs	r2, #0
 8017db6:	e78e      	b.n	8017cd6 <_strtod_l+0x99e>
 8017db8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8017f38 <_strtod_l+0xc00>
 8017dbc:	f04f 0800 	mov.w	r8, #0
 8017dc0:	e7e7      	b.n	8017d92 <_strtod_l+0xa5a>
 8017dc2:	4b5d      	ldr	r3, [pc, #372]	; (8017f38 <_strtod_l+0xc00>)
 8017dc4:	4640      	mov	r0, r8
 8017dc6:	4649      	mov	r1, r9
 8017dc8:	2200      	movs	r2, #0
 8017dca:	f7e8 fc2d 	bl	8000628 <__aeabi_dmul>
 8017dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017dd0:	4680      	mov	r8, r0
 8017dd2:	4689      	mov	r9, r1
 8017dd4:	b933      	cbnz	r3, 8017de4 <_strtod_l+0xaac>
 8017dd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017dda:	900e      	str	r0, [sp, #56]	; 0x38
 8017ddc:	930f      	str	r3, [sp, #60]	; 0x3c
 8017dde:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8017de2:	e7dd      	b.n	8017da0 <_strtod_l+0xa68>
 8017de4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8017de8:	e7f9      	b.n	8017dde <_strtod_l+0xaa6>
 8017dea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017dee:	9b04      	ldr	r3, [sp, #16]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d1a8      	bne.n	8017d46 <_strtod_l+0xa0e>
 8017df4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017dfa:	0d1b      	lsrs	r3, r3, #20
 8017dfc:	051b      	lsls	r3, r3, #20
 8017dfe:	429a      	cmp	r2, r3
 8017e00:	d1a1      	bne.n	8017d46 <_strtod_l+0xa0e>
 8017e02:	4640      	mov	r0, r8
 8017e04:	4649      	mov	r1, r9
 8017e06:	f7e8 ffbf 	bl	8000d88 <__aeabi_d2lz>
 8017e0a:	f7e8 fbdf 	bl	80005cc <__aeabi_l2d>
 8017e0e:	4602      	mov	r2, r0
 8017e10:	460b      	mov	r3, r1
 8017e12:	4640      	mov	r0, r8
 8017e14:	4649      	mov	r1, r9
 8017e16:	f7e8 fa4f 	bl	80002b8 <__aeabi_dsub>
 8017e1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017e1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017e20:	ea43 030a 	orr.w	r3, r3, sl
 8017e24:	4313      	orrs	r3, r2
 8017e26:	4680      	mov	r8, r0
 8017e28:	4689      	mov	r9, r1
 8017e2a:	d055      	beq.n	8017ed8 <_strtod_l+0xba0>
 8017e2c:	a336      	add	r3, pc, #216	; (adr r3, 8017f08 <_strtod_l+0xbd0>)
 8017e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e32:	f7e8 fe6b 	bl	8000b0c <__aeabi_dcmplt>
 8017e36:	2800      	cmp	r0, #0
 8017e38:	f47f acd0 	bne.w	80177dc <_strtod_l+0x4a4>
 8017e3c:	a334      	add	r3, pc, #208	; (adr r3, 8017f10 <_strtod_l+0xbd8>)
 8017e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e42:	4640      	mov	r0, r8
 8017e44:	4649      	mov	r1, r9
 8017e46:	f7e8 fe7f 	bl	8000b48 <__aeabi_dcmpgt>
 8017e4a:	2800      	cmp	r0, #0
 8017e4c:	f43f af7b 	beq.w	8017d46 <_strtod_l+0xa0e>
 8017e50:	e4c4      	b.n	80177dc <_strtod_l+0x4a4>
 8017e52:	9b04      	ldr	r3, [sp, #16]
 8017e54:	b333      	cbz	r3, 8017ea4 <_strtod_l+0xb6c>
 8017e56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e58:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017e5c:	d822      	bhi.n	8017ea4 <_strtod_l+0xb6c>
 8017e5e:	a32e      	add	r3, pc, #184	; (adr r3, 8017f18 <_strtod_l+0xbe0>)
 8017e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e64:	4640      	mov	r0, r8
 8017e66:	4649      	mov	r1, r9
 8017e68:	f7e8 fe5a 	bl	8000b20 <__aeabi_dcmple>
 8017e6c:	b1a0      	cbz	r0, 8017e98 <_strtod_l+0xb60>
 8017e6e:	4649      	mov	r1, r9
 8017e70:	4640      	mov	r0, r8
 8017e72:	f7e8 feb1 	bl	8000bd8 <__aeabi_d2uiz>
 8017e76:	2801      	cmp	r0, #1
 8017e78:	bf38      	it	cc
 8017e7a:	2001      	movcc	r0, #1
 8017e7c:	f7e8 fb5a 	bl	8000534 <__aeabi_ui2d>
 8017e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e82:	4680      	mov	r8, r0
 8017e84:	4689      	mov	r9, r1
 8017e86:	bb23      	cbnz	r3, 8017ed2 <_strtod_l+0xb9a>
 8017e88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017e8c:	9010      	str	r0, [sp, #64]	; 0x40
 8017e8e:	9311      	str	r3, [sp, #68]	; 0x44
 8017e90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017e94:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017e9c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017ea0:	1a9b      	subs	r3, r3, r2
 8017ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ea4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017ea8:	eeb0 0a48 	vmov.f32	s0, s16
 8017eac:	eef0 0a68 	vmov.f32	s1, s17
 8017eb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017eb4:	f001 fe4a 	bl	8019b4c <__ulp>
 8017eb8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017ebc:	ec53 2b10 	vmov	r2, r3, d0
 8017ec0:	f7e8 fbb2 	bl	8000628 <__aeabi_dmul>
 8017ec4:	ec53 2b18 	vmov	r2, r3, d8
 8017ec8:	f7e8 f9f8 	bl	80002bc <__adddf3>
 8017ecc:	4682      	mov	sl, r0
 8017ece:	468b      	mov	fp, r1
 8017ed0:	e78d      	b.n	8017dee <_strtod_l+0xab6>
 8017ed2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8017ed6:	e7db      	b.n	8017e90 <_strtod_l+0xb58>
 8017ed8:	a311      	add	r3, pc, #68	; (adr r3, 8017f20 <_strtod_l+0xbe8>)
 8017eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ede:	f7e8 fe15 	bl	8000b0c <__aeabi_dcmplt>
 8017ee2:	e7b2      	b.n	8017e4a <_strtod_l+0xb12>
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8017ee8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017eea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017eec:	6013      	str	r3, [r2, #0]
 8017eee:	f7ff ba6b 	b.w	80173c8 <_strtod_l+0x90>
 8017ef2:	2a65      	cmp	r2, #101	; 0x65
 8017ef4:	f43f ab5f 	beq.w	80175b6 <_strtod_l+0x27e>
 8017ef8:	2a45      	cmp	r2, #69	; 0x45
 8017efa:	f43f ab5c 	beq.w	80175b6 <_strtod_l+0x27e>
 8017efe:	2301      	movs	r3, #1
 8017f00:	f7ff bb94 	b.w	801762c <_strtod_l+0x2f4>
 8017f04:	f3af 8000 	nop.w
 8017f08:	94a03595 	.word	0x94a03595
 8017f0c:	3fdfffff 	.word	0x3fdfffff
 8017f10:	35afe535 	.word	0x35afe535
 8017f14:	3fe00000 	.word	0x3fe00000
 8017f18:	ffc00000 	.word	0xffc00000
 8017f1c:	41dfffff 	.word	0x41dfffff
 8017f20:	94a03595 	.word	0x94a03595
 8017f24:	3fcfffff 	.word	0x3fcfffff
 8017f28:	3ff00000 	.word	0x3ff00000
 8017f2c:	7ff00000 	.word	0x7ff00000
 8017f30:	7fe00000 	.word	0x7fe00000
 8017f34:	7c9fffff 	.word	0x7c9fffff
 8017f38:	3fe00000 	.word	0x3fe00000
 8017f3c:	bff00000 	.word	0xbff00000
 8017f40:	7fefffff 	.word	0x7fefffff

08017f44 <_strtod_r>:
 8017f44:	4b01      	ldr	r3, [pc, #4]	; (8017f4c <_strtod_r+0x8>)
 8017f46:	f7ff b9f7 	b.w	8017338 <_strtod_l>
 8017f4a:	bf00      	nop
 8017f4c:	2000010c 	.word	0x2000010c

08017f50 <_strtol_l.constprop.0>:
 8017f50:	2b01      	cmp	r3, #1
 8017f52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f56:	d001      	beq.n	8017f5c <_strtol_l.constprop.0+0xc>
 8017f58:	2b24      	cmp	r3, #36	; 0x24
 8017f5a:	d906      	bls.n	8017f6a <_strtol_l.constprop.0+0x1a>
 8017f5c:	f7fe faf0 	bl	8016540 <__errno>
 8017f60:	2316      	movs	r3, #22
 8017f62:	6003      	str	r3, [r0, #0]
 8017f64:	2000      	movs	r0, #0
 8017f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f6a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018050 <_strtol_l.constprop.0+0x100>
 8017f6e:	460d      	mov	r5, r1
 8017f70:	462e      	mov	r6, r5
 8017f72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017f76:	f814 700c 	ldrb.w	r7, [r4, ip]
 8017f7a:	f017 0708 	ands.w	r7, r7, #8
 8017f7e:	d1f7      	bne.n	8017f70 <_strtol_l.constprop.0+0x20>
 8017f80:	2c2d      	cmp	r4, #45	; 0x2d
 8017f82:	d132      	bne.n	8017fea <_strtol_l.constprop.0+0x9a>
 8017f84:	782c      	ldrb	r4, [r5, #0]
 8017f86:	2701      	movs	r7, #1
 8017f88:	1cb5      	adds	r5, r6, #2
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d05b      	beq.n	8018046 <_strtol_l.constprop.0+0xf6>
 8017f8e:	2b10      	cmp	r3, #16
 8017f90:	d109      	bne.n	8017fa6 <_strtol_l.constprop.0+0x56>
 8017f92:	2c30      	cmp	r4, #48	; 0x30
 8017f94:	d107      	bne.n	8017fa6 <_strtol_l.constprop.0+0x56>
 8017f96:	782c      	ldrb	r4, [r5, #0]
 8017f98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017f9c:	2c58      	cmp	r4, #88	; 0x58
 8017f9e:	d14d      	bne.n	801803c <_strtol_l.constprop.0+0xec>
 8017fa0:	786c      	ldrb	r4, [r5, #1]
 8017fa2:	2310      	movs	r3, #16
 8017fa4:	3502      	adds	r5, #2
 8017fa6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017faa:	f108 38ff 	add.w	r8, r8, #4294967295
 8017fae:	f04f 0c00 	mov.w	ip, #0
 8017fb2:	fbb8 f9f3 	udiv	r9, r8, r3
 8017fb6:	4666      	mov	r6, ip
 8017fb8:	fb03 8a19 	mls	sl, r3, r9, r8
 8017fbc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8017fc0:	f1be 0f09 	cmp.w	lr, #9
 8017fc4:	d816      	bhi.n	8017ff4 <_strtol_l.constprop.0+0xa4>
 8017fc6:	4674      	mov	r4, lr
 8017fc8:	42a3      	cmp	r3, r4
 8017fca:	dd24      	ble.n	8018016 <_strtol_l.constprop.0+0xc6>
 8017fcc:	f1bc 0f00 	cmp.w	ip, #0
 8017fd0:	db1e      	blt.n	8018010 <_strtol_l.constprop.0+0xc0>
 8017fd2:	45b1      	cmp	r9, r6
 8017fd4:	d31c      	bcc.n	8018010 <_strtol_l.constprop.0+0xc0>
 8017fd6:	d101      	bne.n	8017fdc <_strtol_l.constprop.0+0x8c>
 8017fd8:	45a2      	cmp	sl, r4
 8017fda:	db19      	blt.n	8018010 <_strtol_l.constprop.0+0xc0>
 8017fdc:	fb06 4603 	mla	r6, r6, r3, r4
 8017fe0:	f04f 0c01 	mov.w	ip, #1
 8017fe4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017fe8:	e7e8      	b.n	8017fbc <_strtol_l.constprop.0+0x6c>
 8017fea:	2c2b      	cmp	r4, #43	; 0x2b
 8017fec:	bf04      	itt	eq
 8017fee:	782c      	ldrbeq	r4, [r5, #0]
 8017ff0:	1cb5      	addeq	r5, r6, #2
 8017ff2:	e7ca      	b.n	8017f8a <_strtol_l.constprop.0+0x3a>
 8017ff4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8017ff8:	f1be 0f19 	cmp.w	lr, #25
 8017ffc:	d801      	bhi.n	8018002 <_strtol_l.constprop.0+0xb2>
 8017ffe:	3c37      	subs	r4, #55	; 0x37
 8018000:	e7e2      	b.n	8017fc8 <_strtol_l.constprop.0+0x78>
 8018002:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8018006:	f1be 0f19 	cmp.w	lr, #25
 801800a:	d804      	bhi.n	8018016 <_strtol_l.constprop.0+0xc6>
 801800c:	3c57      	subs	r4, #87	; 0x57
 801800e:	e7db      	b.n	8017fc8 <_strtol_l.constprop.0+0x78>
 8018010:	f04f 3cff 	mov.w	ip, #4294967295
 8018014:	e7e6      	b.n	8017fe4 <_strtol_l.constprop.0+0x94>
 8018016:	f1bc 0f00 	cmp.w	ip, #0
 801801a:	da05      	bge.n	8018028 <_strtol_l.constprop.0+0xd8>
 801801c:	2322      	movs	r3, #34	; 0x22
 801801e:	6003      	str	r3, [r0, #0]
 8018020:	4646      	mov	r6, r8
 8018022:	b942      	cbnz	r2, 8018036 <_strtol_l.constprop.0+0xe6>
 8018024:	4630      	mov	r0, r6
 8018026:	e79e      	b.n	8017f66 <_strtol_l.constprop.0+0x16>
 8018028:	b107      	cbz	r7, 801802c <_strtol_l.constprop.0+0xdc>
 801802a:	4276      	negs	r6, r6
 801802c:	2a00      	cmp	r2, #0
 801802e:	d0f9      	beq.n	8018024 <_strtol_l.constprop.0+0xd4>
 8018030:	f1bc 0f00 	cmp.w	ip, #0
 8018034:	d000      	beq.n	8018038 <_strtol_l.constprop.0+0xe8>
 8018036:	1e69      	subs	r1, r5, #1
 8018038:	6011      	str	r1, [r2, #0]
 801803a:	e7f3      	b.n	8018024 <_strtol_l.constprop.0+0xd4>
 801803c:	2430      	movs	r4, #48	; 0x30
 801803e:	2b00      	cmp	r3, #0
 8018040:	d1b1      	bne.n	8017fa6 <_strtol_l.constprop.0+0x56>
 8018042:	2308      	movs	r3, #8
 8018044:	e7af      	b.n	8017fa6 <_strtol_l.constprop.0+0x56>
 8018046:	2c30      	cmp	r4, #48	; 0x30
 8018048:	d0a5      	beq.n	8017f96 <_strtol_l.constprop.0+0x46>
 801804a:	230a      	movs	r3, #10
 801804c:	e7ab      	b.n	8017fa6 <_strtol_l.constprop.0+0x56>
 801804e:	bf00      	nop
 8018050:	0801ca69 	.word	0x0801ca69

08018054 <_strtol_r>:
 8018054:	f7ff bf7c 	b.w	8017f50 <_strtol_l.constprop.0>

08018058 <quorem>:
 8018058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801805c:	6903      	ldr	r3, [r0, #16]
 801805e:	690c      	ldr	r4, [r1, #16]
 8018060:	42a3      	cmp	r3, r4
 8018062:	4607      	mov	r7, r0
 8018064:	f2c0 8081 	blt.w	801816a <quorem+0x112>
 8018068:	3c01      	subs	r4, #1
 801806a:	f101 0814 	add.w	r8, r1, #20
 801806e:	f100 0514 	add.w	r5, r0, #20
 8018072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018076:	9301      	str	r3, [sp, #4]
 8018078:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801807c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018080:	3301      	adds	r3, #1
 8018082:	429a      	cmp	r2, r3
 8018084:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018088:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801808c:	fbb2 f6f3 	udiv	r6, r2, r3
 8018090:	d331      	bcc.n	80180f6 <quorem+0x9e>
 8018092:	f04f 0e00 	mov.w	lr, #0
 8018096:	4640      	mov	r0, r8
 8018098:	46ac      	mov	ip, r5
 801809a:	46f2      	mov	sl, lr
 801809c:	f850 2b04 	ldr.w	r2, [r0], #4
 80180a0:	b293      	uxth	r3, r2
 80180a2:	fb06 e303 	mla	r3, r6, r3, lr
 80180a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80180aa:	b29b      	uxth	r3, r3
 80180ac:	ebaa 0303 	sub.w	r3, sl, r3
 80180b0:	f8dc a000 	ldr.w	sl, [ip]
 80180b4:	0c12      	lsrs	r2, r2, #16
 80180b6:	fa13 f38a 	uxtah	r3, r3, sl
 80180ba:	fb06 e202 	mla	r2, r6, r2, lr
 80180be:	9300      	str	r3, [sp, #0]
 80180c0:	9b00      	ldr	r3, [sp, #0]
 80180c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80180c6:	b292      	uxth	r2, r2
 80180c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80180cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80180d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80180d4:	4581      	cmp	r9, r0
 80180d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80180da:	f84c 3b04 	str.w	r3, [ip], #4
 80180de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80180e2:	d2db      	bcs.n	801809c <quorem+0x44>
 80180e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80180e8:	b92b      	cbnz	r3, 80180f6 <quorem+0x9e>
 80180ea:	9b01      	ldr	r3, [sp, #4]
 80180ec:	3b04      	subs	r3, #4
 80180ee:	429d      	cmp	r5, r3
 80180f0:	461a      	mov	r2, r3
 80180f2:	d32e      	bcc.n	8018152 <quorem+0xfa>
 80180f4:	613c      	str	r4, [r7, #16]
 80180f6:	4638      	mov	r0, r7
 80180f8:	f001 fc82 	bl	8019a00 <__mcmp>
 80180fc:	2800      	cmp	r0, #0
 80180fe:	db24      	blt.n	801814a <quorem+0xf2>
 8018100:	3601      	adds	r6, #1
 8018102:	4628      	mov	r0, r5
 8018104:	f04f 0c00 	mov.w	ip, #0
 8018108:	f858 2b04 	ldr.w	r2, [r8], #4
 801810c:	f8d0 e000 	ldr.w	lr, [r0]
 8018110:	b293      	uxth	r3, r2
 8018112:	ebac 0303 	sub.w	r3, ip, r3
 8018116:	0c12      	lsrs	r2, r2, #16
 8018118:	fa13 f38e 	uxtah	r3, r3, lr
 801811c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018120:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018124:	b29b      	uxth	r3, r3
 8018126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801812a:	45c1      	cmp	r9, r8
 801812c:	f840 3b04 	str.w	r3, [r0], #4
 8018130:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018134:	d2e8      	bcs.n	8018108 <quorem+0xb0>
 8018136:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801813a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801813e:	b922      	cbnz	r2, 801814a <quorem+0xf2>
 8018140:	3b04      	subs	r3, #4
 8018142:	429d      	cmp	r5, r3
 8018144:	461a      	mov	r2, r3
 8018146:	d30a      	bcc.n	801815e <quorem+0x106>
 8018148:	613c      	str	r4, [r7, #16]
 801814a:	4630      	mov	r0, r6
 801814c:	b003      	add	sp, #12
 801814e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018152:	6812      	ldr	r2, [r2, #0]
 8018154:	3b04      	subs	r3, #4
 8018156:	2a00      	cmp	r2, #0
 8018158:	d1cc      	bne.n	80180f4 <quorem+0x9c>
 801815a:	3c01      	subs	r4, #1
 801815c:	e7c7      	b.n	80180ee <quorem+0x96>
 801815e:	6812      	ldr	r2, [r2, #0]
 8018160:	3b04      	subs	r3, #4
 8018162:	2a00      	cmp	r2, #0
 8018164:	d1f0      	bne.n	8018148 <quorem+0xf0>
 8018166:	3c01      	subs	r4, #1
 8018168:	e7eb      	b.n	8018142 <quorem+0xea>
 801816a:	2000      	movs	r0, #0
 801816c:	e7ee      	b.n	801814c <quorem+0xf4>
	...

08018170 <_dtoa_r>:
 8018170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018174:	ed2d 8b04 	vpush	{d8-d9}
 8018178:	ec57 6b10 	vmov	r6, r7, d0
 801817c:	b093      	sub	sp, #76	; 0x4c
 801817e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018180:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018184:	9106      	str	r1, [sp, #24]
 8018186:	ee10 aa10 	vmov	sl, s0
 801818a:	4604      	mov	r4, r0
 801818c:	9209      	str	r2, [sp, #36]	; 0x24
 801818e:	930c      	str	r3, [sp, #48]	; 0x30
 8018190:	46bb      	mov	fp, r7
 8018192:	b975      	cbnz	r5, 80181b2 <_dtoa_r+0x42>
 8018194:	2010      	movs	r0, #16
 8018196:	f001 f94d 	bl	8019434 <malloc>
 801819a:	4602      	mov	r2, r0
 801819c:	6260      	str	r0, [r4, #36]	; 0x24
 801819e:	b920      	cbnz	r0, 80181aa <_dtoa_r+0x3a>
 80181a0:	4ba7      	ldr	r3, [pc, #668]	; (8018440 <_dtoa_r+0x2d0>)
 80181a2:	21ea      	movs	r1, #234	; 0xea
 80181a4:	48a7      	ldr	r0, [pc, #668]	; (8018444 <_dtoa_r+0x2d4>)
 80181a6:	f002 f8ad 	bl	801a304 <__assert_func>
 80181aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80181ae:	6005      	str	r5, [r0, #0]
 80181b0:	60c5      	str	r5, [r0, #12]
 80181b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181b4:	6819      	ldr	r1, [r3, #0]
 80181b6:	b151      	cbz	r1, 80181ce <_dtoa_r+0x5e>
 80181b8:	685a      	ldr	r2, [r3, #4]
 80181ba:	604a      	str	r2, [r1, #4]
 80181bc:	2301      	movs	r3, #1
 80181be:	4093      	lsls	r3, r2
 80181c0:	608b      	str	r3, [r1, #8]
 80181c2:	4620      	mov	r0, r4
 80181c4:	f001 f990 	bl	80194e8 <_Bfree>
 80181c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181ca:	2200      	movs	r2, #0
 80181cc:	601a      	str	r2, [r3, #0]
 80181ce:	1e3b      	subs	r3, r7, #0
 80181d0:	bfaa      	itet	ge
 80181d2:	2300      	movge	r3, #0
 80181d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80181d8:	f8c8 3000 	strge.w	r3, [r8]
 80181dc:	4b9a      	ldr	r3, [pc, #616]	; (8018448 <_dtoa_r+0x2d8>)
 80181de:	bfbc      	itt	lt
 80181e0:	2201      	movlt	r2, #1
 80181e2:	f8c8 2000 	strlt.w	r2, [r8]
 80181e6:	ea33 030b 	bics.w	r3, r3, fp
 80181ea:	d11b      	bne.n	8018224 <_dtoa_r+0xb4>
 80181ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80181ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80181f2:	6013      	str	r3, [r2, #0]
 80181f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80181f8:	4333      	orrs	r3, r6
 80181fa:	f000 8592 	beq.w	8018d22 <_dtoa_r+0xbb2>
 80181fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018200:	b963      	cbnz	r3, 801821c <_dtoa_r+0xac>
 8018202:	4b92      	ldr	r3, [pc, #584]	; (801844c <_dtoa_r+0x2dc>)
 8018204:	e022      	b.n	801824c <_dtoa_r+0xdc>
 8018206:	4b92      	ldr	r3, [pc, #584]	; (8018450 <_dtoa_r+0x2e0>)
 8018208:	9301      	str	r3, [sp, #4]
 801820a:	3308      	adds	r3, #8
 801820c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801820e:	6013      	str	r3, [r2, #0]
 8018210:	9801      	ldr	r0, [sp, #4]
 8018212:	b013      	add	sp, #76	; 0x4c
 8018214:	ecbd 8b04 	vpop	{d8-d9}
 8018218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801821c:	4b8b      	ldr	r3, [pc, #556]	; (801844c <_dtoa_r+0x2dc>)
 801821e:	9301      	str	r3, [sp, #4]
 8018220:	3303      	adds	r3, #3
 8018222:	e7f3      	b.n	801820c <_dtoa_r+0x9c>
 8018224:	2200      	movs	r2, #0
 8018226:	2300      	movs	r3, #0
 8018228:	4650      	mov	r0, sl
 801822a:	4659      	mov	r1, fp
 801822c:	f7e8 fc64 	bl	8000af8 <__aeabi_dcmpeq>
 8018230:	ec4b ab19 	vmov	d9, sl, fp
 8018234:	4680      	mov	r8, r0
 8018236:	b158      	cbz	r0, 8018250 <_dtoa_r+0xe0>
 8018238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801823a:	2301      	movs	r3, #1
 801823c:	6013      	str	r3, [r2, #0]
 801823e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018240:	2b00      	cmp	r3, #0
 8018242:	f000 856b 	beq.w	8018d1c <_dtoa_r+0xbac>
 8018246:	4883      	ldr	r0, [pc, #524]	; (8018454 <_dtoa_r+0x2e4>)
 8018248:	6018      	str	r0, [r3, #0]
 801824a:	1e43      	subs	r3, r0, #1
 801824c:	9301      	str	r3, [sp, #4]
 801824e:	e7df      	b.n	8018210 <_dtoa_r+0xa0>
 8018250:	ec4b ab10 	vmov	d0, sl, fp
 8018254:	aa10      	add	r2, sp, #64	; 0x40
 8018256:	a911      	add	r1, sp, #68	; 0x44
 8018258:	4620      	mov	r0, r4
 801825a:	f001 fcf3 	bl	8019c44 <__d2b>
 801825e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8018262:	ee08 0a10 	vmov	s16, r0
 8018266:	2d00      	cmp	r5, #0
 8018268:	f000 8084 	beq.w	8018374 <_dtoa_r+0x204>
 801826c:	ee19 3a90 	vmov	r3, s19
 8018270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018274:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018278:	4656      	mov	r6, sl
 801827a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801827e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018282:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8018286:	4b74      	ldr	r3, [pc, #464]	; (8018458 <_dtoa_r+0x2e8>)
 8018288:	2200      	movs	r2, #0
 801828a:	4630      	mov	r0, r6
 801828c:	4639      	mov	r1, r7
 801828e:	f7e8 f813 	bl	80002b8 <__aeabi_dsub>
 8018292:	a365      	add	r3, pc, #404	; (adr r3, 8018428 <_dtoa_r+0x2b8>)
 8018294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018298:	f7e8 f9c6 	bl	8000628 <__aeabi_dmul>
 801829c:	a364      	add	r3, pc, #400	; (adr r3, 8018430 <_dtoa_r+0x2c0>)
 801829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182a2:	f7e8 f80b 	bl	80002bc <__adddf3>
 80182a6:	4606      	mov	r6, r0
 80182a8:	4628      	mov	r0, r5
 80182aa:	460f      	mov	r7, r1
 80182ac:	f7e8 f952 	bl	8000554 <__aeabi_i2d>
 80182b0:	a361      	add	r3, pc, #388	; (adr r3, 8018438 <_dtoa_r+0x2c8>)
 80182b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182b6:	f7e8 f9b7 	bl	8000628 <__aeabi_dmul>
 80182ba:	4602      	mov	r2, r0
 80182bc:	460b      	mov	r3, r1
 80182be:	4630      	mov	r0, r6
 80182c0:	4639      	mov	r1, r7
 80182c2:	f7e7 fffb 	bl	80002bc <__adddf3>
 80182c6:	4606      	mov	r6, r0
 80182c8:	460f      	mov	r7, r1
 80182ca:	f7e8 fc5d 	bl	8000b88 <__aeabi_d2iz>
 80182ce:	2200      	movs	r2, #0
 80182d0:	9000      	str	r0, [sp, #0]
 80182d2:	2300      	movs	r3, #0
 80182d4:	4630      	mov	r0, r6
 80182d6:	4639      	mov	r1, r7
 80182d8:	f7e8 fc18 	bl	8000b0c <__aeabi_dcmplt>
 80182dc:	b150      	cbz	r0, 80182f4 <_dtoa_r+0x184>
 80182de:	9800      	ldr	r0, [sp, #0]
 80182e0:	f7e8 f938 	bl	8000554 <__aeabi_i2d>
 80182e4:	4632      	mov	r2, r6
 80182e6:	463b      	mov	r3, r7
 80182e8:	f7e8 fc06 	bl	8000af8 <__aeabi_dcmpeq>
 80182ec:	b910      	cbnz	r0, 80182f4 <_dtoa_r+0x184>
 80182ee:	9b00      	ldr	r3, [sp, #0]
 80182f0:	3b01      	subs	r3, #1
 80182f2:	9300      	str	r3, [sp, #0]
 80182f4:	9b00      	ldr	r3, [sp, #0]
 80182f6:	2b16      	cmp	r3, #22
 80182f8:	d85a      	bhi.n	80183b0 <_dtoa_r+0x240>
 80182fa:	9a00      	ldr	r2, [sp, #0]
 80182fc:	4b57      	ldr	r3, [pc, #348]	; (801845c <_dtoa_r+0x2ec>)
 80182fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018306:	ec51 0b19 	vmov	r0, r1, d9
 801830a:	f7e8 fbff 	bl	8000b0c <__aeabi_dcmplt>
 801830e:	2800      	cmp	r0, #0
 8018310:	d050      	beq.n	80183b4 <_dtoa_r+0x244>
 8018312:	9b00      	ldr	r3, [sp, #0]
 8018314:	3b01      	subs	r3, #1
 8018316:	9300      	str	r3, [sp, #0]
 8018318:	2300      	movs	r3, #0
 801831a:	930b      	str	r3, [sp, #44]	; 0x2c
 801831c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801831e:	1b5d      	subs	r5, r3, r5
 8018320:	1e6b      	subs	r3, r5, #1
 8018322:	9305      	str	r3, [sp, #20]
 8018324:	bf45      	ittet	mi
 8018326:	f1c5 0301 	rsbmi	r3, r5, #1
 801832a:	9304      	strmi	r3, [sp, #16]
 801832c:	2300      	movpl	r3, #0
 801832e:	2300      	movmi	r3, #0
 8018330:	bf4c      	ite	mi
 8018332:	9305      	strmi	r3, [sp, #20]
 8018334:	9304      	strpl	r3, [sp, #16]
 8018336:	9b00      	ldr	r3, [sp, #0]
 8018338:	2b00      	cmp	r3, #0
 801833a:	db3d      	blt.n	80183b8 <_dtoa_r+0x248>
 801833c:	9b05      	ldr	r3, [sp, #20]
 801833e:	9a00      	ldr	r2, [sp, #0]
 8018340:	920a      	str	r2, [sp, #40]	; 0x28
 8018342:	4413      	add	r3, r2
 8018344:	9305      	str	r3, [sp, #20]
 8018346:	2300      	movs	r3, #0
 8018348:	9307      	str	r3, [sp, #28]
 801834a:	9b06      	ldr	r3, [sp, #24]
 801834c:	2b09      	cmp	r3, #9
 801834e:	f200 8089 	bhi.w	8018464 <_dtoa_r+0x2f4>
 8018352:	2b05      	cmp	r3, #5
 8018354:	bfc4      	itt	gt
 8018356:	3b04      	subgt	r3, #4
 8018358:	9306      	strgt	r3, [sp, #24]
 801835a:	9b06      	ldr	r3, [sp, #24]
 801835c:	f1a3 0302 	sub.w	r3, r3, #2
 8018360:	bfcc      	ite	gt
 8018362:	2500      	movgt	r5, #0
 8018364:	2501      	movle	r5, #1
 8018366:	2b03      	cmp	r3, #3
 8018368:	f200 8087 	bhi.w	801847a <_dtoa_r+0x30a>
 801836c:	e8df f003 	tbb	[pc, r3]
 8018370:	59383a2d 	.word	0x59383a2d
 8018374:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8018378:	441d      	add	r5, r3
 801837a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801837e:	2b20      	cmp	r3, #32
 8018380:	bfc1      	itttt	gt
 8018382:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018386:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801838a:	fa0b f303 	lslgt.w	r3, fp, r3
 801838e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018392:	bfda      	itte	le
 8018394:	f1c3 0320 	rsble	r3, r3, #32
 8018398:	fa06 f003 	lslle.w	r0, r6, r3
 801839c:	4318      	orrgt	r0, r3
 801839e:	f7e8 f8c9 	bl	8000534 <__aeabi_ui2d>
 80183a2:	2301      	movs	r3, #1
 80183a4:	4606      	mov	r6, r0
 80183a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80183aa:	3d01      	subs	r5, #1
 80183ac:	930e      	str	r3, [sp, #56]	; 0x38
 80183ae:	e76a      	b.n	8018286 <_dtoa_r+0x116>
 80183b0:	2301      	movs	r3, #1
 80183b2:	e7b2      	b.n	801831a <_dtoa_r+0x1aa>
 80183b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80183b6:	e7b1      	b.n	801831c <_dtoa_r+0x1ac>
 80183b8:	9b04      	ldr	r3, [sp, #16]
 80183ba:	9a00      	ldr	r2, [sp, #0]
 80183bc:	1a9b      	subs	r3, r3, r2
 80183be:	9304      	str	r3, [sp, #16]
 80183c0:	4253      	negs	r3, r2
 80183c2:	9307      	str	r3, [sp, #28]
 80183c4:	2300      	movs	r3, #0
 80183c6:	930a      	str	r3, [sp, #40]	; 0x28
 80183c8:	e7bf      	b.n	801834a <_dtoa_r+0x1da>
 80183ca:	2300      	movs	r3, #0
 80183cc:	9308      	str	r3, [sp, #32]
 80183ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	dc55      	bgt.n	8018480 <_dtoa_r+0x310>
 80183d4:	2301      	movs	r3, #1
 80183d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80183da:	461a      	mov	r2, r3
 80183dc:	9209      	str	r2, [sp, #36]	; 0x24
 80183de:	e00c      	b.n	80183fa <_dtoa_r+0x28a>
 80183e0:	2301      	movs	r3, #1
 80183e2:	e7f3      	b.n	80183cc <_dtoa_r+0x25c>
 80183e4:	2300      	movs	r3, #0
 80183e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80183e8:	9308      	str	r3, [sp, #32]
 80183ea:	9b00      	ldr	r3, [sp, #0]
 80183ec:	4413      	add	r3, r2
 80183ee:	9302      	str	r3, [sp, #8]
 80183f0:	3301      	adds	r3, #1
 80183f2:	2b01      	cmp	r3, #1
 80183f4:	9303      	str	r3, [sp, #12]
 80183f6:	bfb8      	it	lt
 80183f8:	2301      	movlt	r3, #1
 80183fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80183fc:	2200      	movs	r2, #0
 80183fe:	6042      	str	r2, [r0, #4]
 8018400:	2204      	movs	r2, #4
 8018402:	f102 0614 	add.w	r6, r2, #20
 8018406:	429e      	cmp	r6, r3
 8018408:	6841      	ldr	r1, [r0, #4]
 801840a:	d93d      	bls.n	8018488 <_dtoa_r+0x318>
 801840c:	4620      	mov	r0, r4
 801840e:	f001 f82b 	bl	8019468 <_Balloc>
 8018412:	9001      	str	r0, [sp, #4]
 8018414:	2800      	cmp	r0, #0
 8018416:	d13b      	bne.n	8018490 <_dtoa_r+0x320>
 8018418:	4b11      	ldr	r3, [pc, #68]	; (8018460 <_dtoa_r+0x2f0>)
 801841a:	4602      	mov	r2, r0
 801841c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8018420:	e6c0      	b.n	80181a4 <_dtoa_r+0x34>
 8018422:	2301      	movs	r3, #1
 8018424:	e7df      	b.n	80183e6 <_dtoa_r+0x276>
 8018426:	bf00      	nop
 8018428:	636f4361 	.word	0x636f4361
 801842c:	3fd287a7 	.word	0x3fd287a7
 8018430:	8b60c8b3 	.word	0x8b60c8b3
 8018434:	3fc68a28 	.word	0x3fc68a28
 8018438:	509f79fb 	.word	0x509f79fb
 801843c:	3fd34413 	.word	0x3fd34413
 8018440:	0801cb76 	.word	0x0801cb76
 8018444:	0801cb8d 	.word	0x0801cb8d
 8018448:	7ff00000 	.word	0x7ff00000
 801844c:	0801cb72 	.word	0x0801cb72
 8018450:	0801cb69 	.word	0x0801cb69
 8018454:	0801c9ed 	.word	0x0801c9ed
 8018458:	3ff80000 	.word	0x3ff80000
 801845c:	0801ccf8 	.word	0x0801ccf8
 8018460:	0801cbe8 	.word	0x0801cbe8
 8018464:	2501      	movs	r5, #1
 8018466:	2300      	movs	r3, #0
 8018468:	9306      	str	r3, [sp, #24]
 801846a:	9508      	str	r5, [sp, #32]
 801846c:	f04f 33ff 	mov.w	r3, #4294967295
 8018470:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8018474:	2200      	movs	r2, #0
 8018476:	2312      	movs	r3, #18
 8018478:	e7b0      	b.n	80183dc <_dtoa_r+0x26c>
 801847a:	2301      	movs	r3, #1
 801847c:	9308      	str	r3, [sp, #32]
 801847e:	e7f5      	b.n	801846c <_dtoa_r+0x2fc>
 8018480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018482:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8018486:	e7b8      	b.n	80183fa <_dtoa_r+0x28a>
 8018488:	3101      	adds	r1, #1
 801848a:	6041      	str	r1, [r0, #4]
 801848c:	0052      	lsls	r2, r2, #1
 801848e:	e7b8      	b.n	8018402 <_dtoa_r+0x292>
 8018490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018492:	9a01      	ldr	r2, [sp, #4]
 8018494:	601a      	str	r2, [r3, #0]
 8018496:	9b03      	ldr	r3, [sp, #12]
 8018498:	2b0e      	cmp	r3, #14
 801849a:	f200 809d 	bhi.w	80185d8 <_dtoa_r+0x468>
 801849e:	2d00      	cmp	r5, #0
 80184a0:	f000 809a 	beq.w	80185d8 <_dtoa_r+0x468>
 80184a4:	9b00      	ldr	r3, [sp, #0]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	dd32      	ble.n	8018510 <_dtoa_r+0x3a0>
 80184aa:	4ab7      	ldr	r2, [pc, #732]	; (8018788 <_dtoa_r+0x618>)
 80184ac:	f003 030f 	and.w	r3, r3, #15
 80184b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80184b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80184b8:	9b00      	ldr	r3, [sp, #0]
 80184ba:	05d8      	lsls	r0, r3, #23
 80184bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80184c0:	d516      	bpl.n	80184f0 <_dtoa_r+0x380>
 80184c2:	4bb2      	ldr	r3, [pc, #712]	; (801878c <_dtoa_r+0x61c>)
 80184c4:	ec51 0b19 	vmov	r0, r1, d9
 80184c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80184cc:	f7e8 f9d6 	bl	800087c <__aeabi_ddiv>
 80184d0:	f007 070f 	and.w	r7, r7, #15
 80184d4:	4682      	mov	sl, r0
 80184d6:	468b      	mov	fp, r1
 80184d8:	2503      	movs	r5, #3
 80184da:	4eac      	ldr	r6, [pc, #688]	; (801878c <_dtoa_r+0x61c>)
 80184dc:	b957      	cbnz	r7, 80184f4 <_dtoa_r+0x384>
 80184de:	4642      	mov	r2, r8
 80184e0:	464b      	mov	r3, r9
 80184e2:	4650      	mov	r0, sl
 80184e4:	4659      	mov	r1, fp
 80184e6:	f7e8 f9c9 	bl	800087c <__aeabi_ddiv>
 80184ea:	4682      	mov	sl, r0
 80184ec:	468b      	mov	fp, r1
 80184ee:	e028      	b.n	8018542 <_dtoa_r+0x3d2>
 80184f0:	2502      	movs	r5, #2
 80184f2:	e7f2      	b.n	80184da <_dtoa_r+0x36a>
 80184f4:	07f9      	lsls	r1, r7, #31
 80184f6:	d508      	bpl.n	801850a <_dtoa_r+0x39a>
 80184f8:	4640      	mov	r0, r8
 80184fa:	4649      	mov	r1, r9
 80184fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018500:	f7e8 f892 	bl	8000628 <__aeabi_dmul>
 8018504:	3501      	adds	r5, #1
 8018506:	4680      	mov	r8, r0
 8018508:	4689      	mov	r9, r1
 801850a:	107f      	asrs	r7, r7, #1
 801850c:	3608      	adds	r6, #8
 801850e:	e7e5      	b.n	80184dc <_dtoa_r+0x36c>
 8018510:	f000 809b 	beq.w	801864a <_dtoa_r+0x4da>
 8018514:	9b00      	ldr	r3, [sp, #0]
 8018516:	4f9d      	ldr	r7, [pc, #628]	; (801878c <_dtoa_r+0x61c>)
 8018518:	425e      	negs	r6, r3
 801851a:	4b9b      	ldr	r3, [pc, #620]	; (8018788 <_dtoa_r+0x618>)
 801851c:	f006 020f 	and.w	r2, r6, #15
 8018520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018528:	ec51 0b19 	vmov	r0, r1, d9
 801852c:	f7e8 f87c 	bl	8000628 <__aeabi_dmul>
 8018530:	1136      	asrs	r6, r6, #4
 8018532:	4682      	mov	sl, r0
 8018534:	468b      	mov	fp, r1
 8018536:	2300      	movs	r3, #0
 8018538:	2502      	movs	r5, #2
 801853a:	2e00      	cmp	r6, #0
 801853c:	d17a      	bne.n	8018634 <_dtoa_r+0x4c4>
 801853e:	2b00      	cmp	r3, #0
 8018540:	d1d3      	bne.n	80184ea <_dtoa_r+0x37a>
 8018542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018544:	2b00      	cmp	r3, #0
 8018546:	f000 8082 	beq.w	801864e <_dtoa_r+0x4de>
 801854a:	4b91      	ldr	r3, [pc, #580]	; (8018790 <_dtoa_r+0x620>)
 801854c:	2200      	movs	r2, #0
 801854e:	4650      	mov	r0, sl
 8018550:	4659      	mov	r1, fp
 8018552:	f7e8 fadb 	bl	8000b0c <__aeabi_dcmplt>
 8018556:	2800      	cmp	r0, #0
 8018558:	d079      	beq.n	801864e <_dtoa_r+0x4de>
 801855a:	9b03      	ldr	r3, [sp, #12]
 801855c:	2b00      	cmp	r3, #0
 801855e:	d076      	beq.n	801864e <_dtoa_r+0x4de>
 8018560:	9b02      	ldr	r3, [sp, #8]
 8018562:	2b00      	cmp	r3, #0
 8018564:	dd36      	ble.n	80185d4 <_dtoa_r+0x464>
 8018566:	9b00      	ldr	r3, [sp, #0]
 8018568:	4650      	mov	r0, sl
 801856a:	4659      	mov	r1, fp
 801856c:	1e5f      	subs	r7, r3, #1
 801856e:	2200      	movs	r2, #0
 8018570:	4b88      	ldr	r3, [pc, #544]	; (8018794 <_dtoa_r+0x624>)
 8018572:	f7e8 f859 	bl	8000628 <__aeabi_dmul>
 8018576:	9e02      	ldr	r6, [sp, #8]
 8018578:	4682      	mov	sl, r0
 801857a:	468b      	mov	fp, r1
 801857c:	3501      	adds	r5, #1
 801857e:	4628      	mov	r0, r5
 8018580:	f7e7 ffe8 	bl	8000554 <__aeabi_i2d>
 8018584:	4652      	mov	r2, sl
 8018586:	465b      	mov	r3, fp
 8018588:	f7e8 f84e 	bl	8000628 <__aeabi_dmul>
 801858c:	4b82      	ldr	r3, [pc, #520]	; (8018798 <_dtoa_r+0x628>)
 801858e:	2200      	movs	r2, #0
 8018590:	f7e7 fe94 	bl	80002bc <__adddf3>
 8018594:	46d0      	mov	r8, sl
 8018596:	46d9      	mov	r9, fp
 8018598:	4682      	mov	sl, r0
 801859a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801859e:	2e00      	cmp	r6, #0
 80185a0:	d158      	bne.n	8018654 <_dtoa_r+0x4e4>
 80185a2:	4b7e      	ldr	r3, [pc, #504]	; (801879c <_dtoa_r+0x62c>)
 80185a4:	2200      	movs	r2, #0
 80185a6:	4640      	mov	r0, r8
 80185a8:	4649      	mov	r1, r9
 80185aa:	f7e7 fe85 	bl	80002b8 <__aeabi_dsub>
 80185ae:	4652      	mov	r2, sl
 80185b0:	465b      	mov	r3, fp
 80185b2:	4680      	mov	r8, r0
 80185b4:	4689      	mov	r9, r1
 80185b6:	f7e8 fac7 	bl	8000b48 <__aeabi_dcmpgt>
 80185ba:	2800      	cmp	r0, #0
 80185bc:	f040 8295 	bne.w	8018aea <_dtoa_r+0x97a>
 80185c0:	4652      	mov	r2, sl
 80185c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80185c6:	4640      	mov	r0, r8
 80185c8:	4649      	mov	r1, r9
 80185ca:	f7e8 fa9f 	bl	8000b0c <__aeabi_dcmplt>
 80185ce:	2800      	cmp	r0, #0
 80185d0:	f040 8289 	bne.w	8018ae6 <_dtoa_r+0x976>
 80185d4:	ec5b ab19 	vmov	sl, fp, d9
 80185d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80185da:	2b00      	cmp	r3, #0
 80185dc:	f2c0 8148 	blt.w	8018870 <_dtoa_r+0x700>
 80185e0:	9a00      	ldr	r2, [sp, #0]
 80185e2:	2a0e      	cmp	r2, #14
 80185e4:	f300 8144 	bgt.w	8018870 <_dtoa_r+0x700>
 80185e8:	4b67      	ldr	r3, [pc, #412]	; (8018788 <_dtoa_r+0x618>)
 80185ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80185ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80185f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	f280 80d5 	bge.w	80187a4 <_dtoa_r+0x634>
 80185fa:	9b03      	ldr	r3, [sp, #12]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	f300 80d1 	bgt.w	80187a4 <_dtoa_r+0x634>
 8018602:	f040 826f 	bne.w	8018ae4 <_dtoa_r+0x974>
 8018606:	4b65      	ldr	r3, [pc, #404]	; (801879c <_dtoa_r+0x62c>)
 8018608:	2200      	movs	r2, #0
 801860a:	4640      	mov	r0, r8
 801860c:	4649      	mov	r1, r9
 801860e:	f7e8 f80b 	bl	8000628 <__aeabi_dmul>
 8018612:	4652      	mov	r2, sl
 8018614:	465b      	mov	r3, fp
 8018616:	f7e8 fa8d 	bl	8000b34 <__aeabi_dcmpge>
 801861a:	9e03      	ldr	r6, [sp, #12]
 801861c:	4637      	mov	r7, r6
 801861e:	2800      	cmp	r0, #0
 8018620:	f040 8245 	bne.w	8018aae <_dtoa_r+0x93e>
 8018624:	9d01      	ldr	r5, [sp, #4]
 8018626:	2331      	movs	r3, #49	; 0x31
 8018628:	f805 3b01 	strb.w	r3, [r5], #1
 801862c:	9b00      	ldr	r3, [sp, #0]
 801862e:	3301      	adds	r3, #1
 8018630:	9300      	str	r3, [sp, #0]
 8018632:	e240      	b.n	8018ab6 <_dtoa_r+0x946>
 8018634:	07f2      	lsls	r2, r6, #31
 8018636:	d505      	bpl.n	8018644 <_dtoa_r+0x4d4>
 8018638:	e9d7 2300 	ldrd	r2, r3, [r7]
 801863c:	f7e7 fff4 	bl	8000628 <__aeabi_dmul>
 8018640:	3501      	adds	r5, #1
 8018642:	2301      	movs	r3, #1
 8018644:	1076      	asrs	r6, r6, #1
 8018646:	3708      	adds	r7, #8
 8018648:	e777      	b.n	801853a <_dtoa_r+0x3ca>
 801864a:	2502      	movs	r5, #2
 801864c:	e779      	b.n	8018542 <_dtoa_r+0x3d2>
 801864e:	9f00      	ldr	r7, [sp, #0]
 8018650:	9e03      	ldr	r6, [sp, #12]
 8018652:	e794      	b.n	801857e <_dtoa_r+0x40e>
 8018654:	9901      	ldr	r1, [sp, #4]
 8018656:	4b4c      	ldr	r3, [pc, #304]	; (8018788 <_dtoa_r+0x618>)
 8018658:	4431      	add	r1, r6
 801865a:	910d      	str	r1, [sp, #52]	; 0x34
 801865c:	9908      	ldr	r1, [sp, #32]
 801865e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8018662:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018666:	2900      	cmp	r1, #0
 8018668:	d043      	beq.n	80186f2 <_dtoa_r+0x582>
 801866a:	494d      	ldr	r1, [pc, #308]	; (80187a0 <_dtoa_r+0x630>)
 801866c:	2000      	movs	r0, #0
 801866e:	f7e8 f905 	bl	800087c <__aeabi_ddiv>
 8018672:	4652      	mov	r2, sl
 8018674:	465b      	mov	r3, fp
 8018676:	f7e7 fe1f 	bl	80002b8 <__aeabi_dsub>
 801867a:	9d01      	ldr	r5, [sp, #4]
 801867c:	4682      	mov	sl, r0
 801867e:	468b      	mov	fp, r1
 8018680:	4649      	mov	r1, r9
 8018682:	4640      	mov	r0, r8
 8018684:	f7e8 fa80 	bl	8000b88 <__aeabi_d2iz>
 8018688:	4606      	mov	r6, r0
 801868a:	f7e7 ff63 	bl	8000554 <__aeabi_i2d>
 801868e:	4602      	mov	r2, r0
 8018690:	460b      	mov	r3, r1
 8018692:	4640      	mov	r0, r8
 8018694:	4649      	mov	r1, r9
 8018696:	f7e7 fe0f 	bl	80002b8 <__aeabi_dsub>
 801869a:	3630      	adds	r6, #48	; 0x30
 801869c:	f805 6b01 	strb.w	r6, [r5], #1
 80186a0:	4652      	mov	r2, sl
 80186a2:	465b      	mov	r3, fp
 80186a4:	4680      	mov	r8, r0
 80186a6:	4689      	mov	r9, r1
 80186a8:	f7e8 fa30 	bl	8000b0c <__aeabi_dcmplt>
 80186ac:	2800      	cmp	r0, #0
 80186ae:	d163      	bne.n	8018778 <_dtoa_r+0x608>
 80186b0:	4642      	mov	r2, r8
 80186b2:	464b      	mov	r3, r9
 80186b4:	4936      	ldr	r1, [pc, #216]	; (8018790 <_dtoa_r+0x620>)
 80186b6:	2000      	movs	r0, #0
 80186b8:	f7e7 fdfe 	bl	80002b8 <__aeabi_dsub>
 80186bc:	4652      	mov	r2, sl
 80186be:	465b      	mov	r3, fp
 80186c0:	f7e8 fa24 	bl	8000b0c <__aeabi_dcmplt>
 80186c4:	2800      	cmp	r0, #0
 80186c6:	f040 80b5 	bne.w	8018834 <_dtoa_r+0x6c4>
 80186ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80186cc:	429d      	cmp	r5, r3
 80186ce:	d081      	beq.n	80185d4 <_dtoa_r+0x464>
 80186d0:	4b30      	ldr	r3, [pc, #192]	; (8018794 <_dtoa_r+0x624>)
 80186d2:	2200      	movs	r2, #0
 80186d4:	4650      	mov	r0, sl
 80186d6:	4659      	mov	r1, fp
 80186d8:	f7e7 ffa6 	bl	8000628 <__aeabi_dmul>
 80186dc:	4b2d      	ldr	r3, [pc, #180]	; (8018794 <_dtoa_r+0x624>)
 80186de:	4682      	mov	sl, r0
 80186e0:	468b      	mov	fp, r1
 80186e2:	4640      	mov	r0, r8
 80186e4:	4649      	mov	r1, r9
 80186e6:	2200      	movs	r2, #0
 80186e8:	f7e7 ff9e 	bl	8000628 <__aeabi_dmul>
 80186ec:	4680      	mov	r8, r0
 80186ee:	4689      	mov	r9, r1
 80186f0:	e7c6      	b.n	8018680 <_dtoa_r+0x510>
 80186f2:	4650      	mov	r0, sl
 80186f4:	4659      	mov	r1, fp
 80186f6:	f7e7 ff97 	bl	8000628 <__aeabi_dmul>
 80186fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80186fc:	9d01      	ldr	r5, [sp, #4]
 80186fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8018700:	4682      	mov	sl, r0
 8018702:	468b      	mov	fp, r1
 8018704:	4649      	mov	r1, r9
 8018706:	4640      	mov	r0, r8
 8018708:	f7e8 fa3e 	bl	8000b88 <__aeabi_d2iz>
 801870c:	4606      	mov	r6, r0
 801870e:	f7e7 ff21 	bl	8000554 <__aeabi_i2d>
 8018712:	3630      	adds	r6, #48	; 0x30
 8018714:	4602      	mov	r2, r0
 8018716:	460b      	mov	r3, r1
 8018718:	4640      	mov	r0, r8
 801871a:	4649      	mov	r1, r9
 801871c:	f7e7 fdcc 	bl	80002b8 <__aeabi_dsub>
 8018720:	f805 6b01 	strb.w	r6, [r5], #1
 8018724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018726:	429d      	cmp	r5, r3
 8018728:	4680      	mov	r8, r0
 801872a:	4689      	mov	r9, r1
 801872c:	f04f 0200 	mov.w	r2, #0
 8018730:	d124      	bne.n	801877c <_dtoa_r+0x60c>
 8018732:	4b1b      	ldr	r3, [pc, #108]	; (80187a0 <_dtoa_r+0x630>)
 8018734:	4650      	mov	r0, sl
 8018736:	4659      	mov	r1, fp
 8018738:	f7e7 fdc0 	bl	80002bc <__adddf3>
 801873c:	4602      	mov	r2, r0
 801873e:	460b      	mov	r3, r1
 8018740:	4640      	mov	r0, r8
 8018742:	4649      	mov	r1, r9
 8018744:	f7e8 fa00 	bl	8000b48 <__aeabi_dcmpgt>
 8018748:	2800      	cmp	r0, #0
 801874a:	d173      	bne.n	8018834 <_dtoa_r+0x6c4>
 801874c:	4652      	mov	r2, sl
 801874e:	465b      	mov	r3, fp
 8018750:	4913      	ldr	r1, [pc, #76]	; (80187a0 <_dtoa_r+0x630>)
 8018752:	2000      	movs	r0, #0
 8018754:	f7e7 fdb0 	bl	80002b8 <__aeabi_dsub>
 8018758:	4602      	mov	r2, r0
 801875a:	460b      	mov	r3, r1
 801875c:	4640      	mov	r0, r8
 801875e:	4649      	mov	r1, r9
 8018760:	f7e8 f9d4 	bl	8000b0c <__aeabi_dcmplt>
 8018764:	2800      	cmp	r0, #0
 8018766:	f43f af35 	beq.w	80185d4 <_dtoa_r+0x464>
 801876a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801876c:	1e6b      	subs	r3, r5, #1
 801876e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018770:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018774:	2b30      	cmp	r3, #48	; 0x30
 8018776:	d0f8      	beq.n	801876a <_dtoa_r+0x5fa>
 8018778:	9700      	str	r7, [sp, #0]
 801877a:	e049      	b.n	8018810 <_dtoa_r+0x6a0>
 801877c:	4b05      	ldr	r3, [pc, #20]	; (8018794 <_dtoa_r+0x624>)
 801877e:	f7e7 ff53 	bl	8000628 <__aeabi_dmul>
 8018782:	4680      	mov	r8, r0
 8018784:	4689      	mov	r9, r1
 8018786:	e7bd      	b.n	8018704 <_dtoa_r+0x594>
 8018788:	0801ccf8 	.word	0x0801ccf8
 801878c:	0801ccd0 	.word	0x0801ccd0
 8018790:	3ff00000 	.word	0x3ff00000
 8018794:	40240000 	.word	0x40240000
 8018798:	401c0000 	.word	0x401c0000
 801879c:	40140000 	.word	0x40140000
 80187a0:	3fe00000 	.word	0x3fe00000
 80187a4:	9d01      	ldr	r5, [sp, #4]
 80187a6:	4656      	mov	r6, sl
 80187a8:	465f      	mov	r7, fp
 80187aa:	4642      	mov	r2, r8
 80187ac:	464b      	mov	r3, r9
 80187ae:	4630      	mov	r0, r6
 80187b0:	4639      	mov	r1, r7
 80187b2:	f7e8 f863 	bl	800087c <__aeabi_ddiv>
 80187b6:	f7e8 f9e7 	bl	8000b88 <__aeabi_d2iz>
 80187ba:	4682      	mov	sl, r0
 80187bc:	f7e7 feca 	bl	8000554 <__aeabi_i2d>
 80187c0:	4642      	mov	r2, r8
 80187c2:	464b      	mov	r3, r9
 80187c4:	f7e7 ff30 	bl	8000628 <__aeabi_dmul>
 80187c8:	4602      	mov	r2, r0
 80187ca:	460b      	mov	r3, r1
 80187cc:	4630      	mov	r0, r6
 80187ce:	4639      	mov	r1, r7
 80187d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80187d4:	f7e7 fd70 	bl	80002b8 <__aeabi_dsub>
 80187d8:	f805 6b01 	strb.w	r6, [r5], #1
 80187dc:	9e01      	ldr	r6, [sp, #4]
 80187de:	9f03      	ldr	r7, [sp, #12]
 80187e0:	1bae      	subs	r6, r5, r6
 80187e2:	42b7      	cmp	r7, r6
 80187e4:	4602      	mov	r2, r0
 80187e6:	460b      	mov	r3, r1
 80187e8:	d135      	bne.n	8018856 <_dtoa_r+0x6e6>
 80187ea:	f7e7 fd67 	bl	80002bc <__adddf3>
 80187ee:	4642      	mov	r2, r8
 80187f0:	464b      	mov	r3, r9
 80187f2:	4606      	mov	r6, r0
 80187f4:	460f      	mov	r7, r1
 80187f6:	f7e8 f9a7 	bl	8000b48 <__aeabi_dcmpgt>
 80187fa:	b9d0      	cbnz	r0, 8018832 <_dtoa_r+0x6c2>
 80187fc:	4642      	mov	r2, r8
 80187fe:	464b      	mov	r3, r9
 8018800:	4630      	mov	r0, r6
 8018802:	4639      	mov	r1, r7
 8018804:	f7e8 f978 	bl	8000af8 <__aeabi_dcmpeq>
 8018808:	b110      	cbz	r0, 8018810 <_dtoa_r+0x6a0>
 801880a:	f01a 0f01 	tst.w	sl, #1
 801880e:	d110      	bne.n	8018832 <_dtoa_r+0x6c2>
 8018810:	4620      	mov	r0, r4
 8018812:	ee18 1a10 	vmov	r1, s16
 8018816:	f000 fe67 	bl	80194e8 <_Bfree>
 801881a:	2300      	movs	r3, #0
 801881c:	9800      	ldr	r0, [sp, #0]
 801881e:	702b      	strb	r3, [r5, #0]
 8018820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018822:	3001      	adds	r0, #1
 8018824:	6018      	str	r0, [r3, #0]
 8018826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018828:	2b00      	cmp	r3, #0
 801882a:	f43f acf1 	beq.w	8018210 <_dtoa_r+0xa0>
 801882e:	601d      	str	r5, [r3, #0]
 8018830:	e4ee      	b.n	8018210 <_dtoa_r+0xa0>
 8018832:	9f00      	ldr	r7, [sp, #0]
 8018834:	462b      	mov	r3, r5
 8018836:	461d      	mov	r5, r3
 8018838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801883c:	2a39      	cmp	r2, #57	; 0x39
 801883e:	d106      	bne.n	801884e <_dtoa_r+0x6de>
 8018840:	9a01      	ldr	r2, [sp, #4]
 8018842:	429a      	cmp	r2, r3
 8018844:	d1f7      	bne.n	8018836 <_dtoa_r+0x6c6>
 8018846:	9901      	ldr	r1, [sp, #4]
 8018848:	2230      	movs	r2, #48	; 0x30
 801884a:	3701      	adds	r7, #1
 801884c:	700a      	strb	r2, [r1, #0]
 801884e:	781a      	ldrb	r2, [r3, #0]
 8018850:	3201      	adds	r2, #1
 8018852:	701a      	strb	r2, [r3, #0]
 8018854:	e790      	b.n	8018778 <_dtoa_r+0x608>
 8018856:	4ba6      	ldr	r3, [pc, #664]	; (8018af0 <_dtoa_r+0x980>)
 8018858:	2200      	movs	r2, #0
 801885a:	f7e7 fee5 	bl	8000628 <__aeabi_dmul>
 801885e:	2200      	movs	r2, #0
 8018860:	2300      	movs	r3, #0
 8018862:	4606      	mov	r6, r0
 8018864:	460f      	mov	r7, r1
 8018866:	f7e8 f947 	bl	8000af8 <__aeabi_dcmpeq>
 801886a:	2800      	cmp	r0, #0
 801886c:	d09d      	beq.n	80187aa <_dtoa_r+0x63a>
 801886e:	e7cf      	b.n	8018810 <_dtoa_r+0x6a0>
 8018870:	9a08      	ldr	r2, [sp, #32]
 8018872:	2a00      	cmp	r2, #0
 8018874:	f000 80d7 	beq.w	8018a26 <_dtoa_r+0x8b6>
 8018878:	9a06      	ldr	r2, [sp, #24]
 801887a:	2a01      	cmp	r2, #1
 801887c:	f300 80ba 	bgt.w	80189f4 <_dtoa_r+0x884>
 8018880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018882:	2a00      	cmp	r2, #0
 8018884:	f000 80b2 	beq.w	80189ec <_dtoa_r+0x87c>
 8018888:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801888c:	9e07      	ldr	r6, [sp, #28]
 801888e:	9d04      	ldr	r5, [sp, #16]
 8018890:	9a04      	ldr	r2, [sp, #16]
 8018892:	441a      	add	r2, r3
 8018894:	9204      	str	r2, [sp, #16]
 8018896:	9a05      	ldr	r2, [sp, #20]
 8018898:	2101      	movs	r1, #1
 801889a:	441a      	add	r2, r3
 801889c:	4620      	mov	r0, r4
 801889e:	9205      	str	r2, [sp, #20]
 80188a0:	f000 ff24 	bl	80196ec <__i2b>
 80188a4:	4607      	mov	r7, r0
 80188a6:	2d00      	cmp	r5, #0
 80188a8:	dd0c      	ble.n	80188c4 <_dtoa_r+0x754>
 80188aa:	9b05      	ldr	r3, [sp, #20]
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	dd09      	ble.n	80188c4 <_dtoa_r+0x754>
 80188b0:	42ab      	cmp	r3, r5
 80188b2:	9a04      	ldr	r2, [sp, #16]
 80188b4:	bfa8      	it	ge
 80188b6:	462b      	movge	r3, r5
 80188b8:	1ad2      	subs	r2, r2, r3
 80188ba:	9204      	str	r2, [sp, #16]
 80188bc:	9a05      	ldr	r2, [sp, #20]
 80188be:	1aed      	subs	r5, r5, r3
 80188c0:	1ad3      	subs	r3, r2, r3
 80188c2:	9305      	str	r3, [sp, #20]
 80188c4:	9b07      	ldr	r3, [sp, #28]
 80188c6:	b31b      	cbz	r3, 8018910 <_dtoa_r+0x7a0>
 80188c8:	9b08      	ldr	r3, [sp, #32]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	f000 80af 	beq.w	8018a2e <_dtoa_r+0x8be>
 80188d0:	2e00      	cmp	r6, #0
 80188d2:	dd13      	ble.n	80188fc <_dtoa_r+0x78c>
 80188d4:	4639      	mov	r1, r7
 80188d6:	4632      	mov	r2, r6
 80188d8:	4620      	mov	r0, r4
 80188da:	f000 ffc7 	bl	801986c <__pow5mult>
 80188de:	ee18 2a10 	vmov	r2, s16
 80188e2:	4601      	mov	r1, r0
 80188e4:	4607      	mov	r7, r0
 80188e6:	4620      	mov	r0, r4
 80188e8:	f000 ff16 	bl	8019718 <__multiply>
 80188ec:	ee18 1a10 	vmov	r1, s16
 80188f0:	4680      	mov	r8, r0
 80188f2:	4620      	mov	r0, r4
 80188f4:	f000 fdf8 	bl	80194e8 <_Bfree>
 80188f8:	ee08 8a10 	vmov	s16, r8
 80188fc:	9b07      	ldr	r3, [sp, #28]
 80188fe:	1b9a      	subs	r2, r3, r6
 8018900:	d006      	beq.n	8018910 <_dtoa_r+0x7a0>
 8018902:	ee18 1a10 	vmov	r1, s16
 8018906:	4620      	mov	r0, r4
 8018908:	f000 ffb0 	bl	801986c <__pow5mult>
 801890c:	ee08 0a10 	vmov	s16, r0
 8018910:	2101      	movs	r1, #1
 8018912:	4620      	mov	r0, r4
 8018914:	f000 feea 	bl	80196ec <__i2b>
 8018918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801891a:	2b00      	cmp	r3, #0
 801891c:	4606      	mov	r6, r0
 801891e:	f340 8088 	ble.w	8018a32 <_dtoa_r+0x8c2>
 8018922:	461a      	mov	r2, r3
 8018924:	4601      	mov	r1, r0
 8018926:	4620      	mov	r0, r4
 8018928:	f000 ffa0 	bl	801986c <__pow5mult>
 801892c:	9b06      	ldr	r3, [sp, #24]
 801892e:	2b01      	cmp	r3, #1
 8018930:	4606      	mov	r6, r0
 8018932:	f340 8081 	ble.w	8018a38 <_dtoa_r+0x8c8>
 8018936:	f04f 0800 	mov.w	r8, #0
 801893a:	6933      	ldr	r3, [r6, #16]
 801893c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018940:	6918      	ldr	r0, [r3, #16]
 8018942:	f000 fe83 	bl	801964c <__hi0bits>
 8018946:	f1c0 0020 	rsb	r0, r0, #32
 801894a:	9b05      	ldr	r3, [sp, #20]
 801894c:	4418      	add	r0, r3
 801894e:	f010 001f 	ands.w	r0, r0, #31
 8018952:	f000 8092 	beq.w	8018a7a <_dtoa_r+0x90a>
 8018956:	f1c0 0320 	rsb	r3, r0, #32
 801895a:	2b04      	cmp	r3, #4
 801895c:	f340 808a 	ble.w	8018a74 <_dtoa_r+0x904>
 8018960:	f1c0 001c 	rsb	r0, r0, #28
 8018964:	9b04      	ldr	r3, [sp, #16]
 8018966:	4403      	add	r3, r0
 8018968:	9304      	str	r3, [sp, #16]
 801896a:	9b05      	ldr	r3, [sp, #20]
 801896c:	4403      	add	r3, r0
 801896e:	4405      	add	r5, r0
 8018970:	9305      	str	r3, [sp, #20]
 8018972:	9b04      	ldr	r3, [sp, #16]
 8018974:	2b00      	cmp	r3, #0
 8018976:	dd07      	ble.n	8018988 <_dtoa_r+0x818>
 8018978:	ee18 1a10 	vmov	r1, s16
 801897c:	461a      	mov	r2, r3
 801897e:	4620      	mov	r0, r4
 8018980:	f000 ffce 	bl	8019920 <__lshift>
 8018984:	ee08 0a10 	vmov	s16, r0
 8018988:	9b05      	ldr	r3, [sp, #20]
 801898a:	2b00      	cmp	r3, #0
 801898c:	dd05      	ble.n	801899a <_dtoa_r+0x82a>
 801898e:	4631      	mov	r1, r6
 8018990:	461a      	mov	r2, r3
 8018992:	4620      	mov	r0, r4
 8018994:	f000 ffc4 	bl	8019920 <__lshift>
 8018998:	4606      	mov	r6, r0
 801899a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801899c:	2b00      	cmp	r3, #0
 801899e:	d06e      	beq.n	8018a7e <_dtoa_r+0x90e>
 80189a0:	ee18 0a10 	vmov	r0, s16
 80189a4:	4631      	mov	r1, r6
 80189a6:	f001 f82b 	bl	8019a00 <__mcmp>
 80189aa:	2800      	cmp	r0, #0
 80189ac:	da67      	bge.n	8018a7e <_dtoa_r+0x90e>
 80189ae:	9b00      	ldr	r3, [sp, #0]
 80189b0:	3b01      	subs	r3, #1
 80189b2:	ee18 1a10 	vmov	r1, s16
 80189b6:	9300      	str	r3, [sp, #0]
 80189b8:	220a      	movs	r2, #10
 80189ba:	2300      	movs	r3, #0
 80189bc:	4620      	mov	r0, r4
 80189be:	f000 fdb5 	bl	801952c <__multadd>
 80189c2:	9b08      	ldr	r3, [sp, #32]
 80189c4:	ee08 0a10 	vmov	s16, r0
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	f000 81b1 	beq.w	8018d30 <_dtoa_r+0xbc0>
 80189ce:	2300      	movs	r3, #0
 80189d0:	4639      	mov	r1, r7
 80189d2:	220a      	movs	r2, #10
 80189d4:	4620      	mov	r0, r4
 80189d6:	f000 fda9 	bl	801952c <__multadd>
 80189da:	9b02      	ldr	r3, [sp, #8]
 80189dc:	2b00      	cmp	r3, #0
 80189de:	4607      	mov	r7, r0
 80189e0:	f300 808e 	bgt.w	8018b00 <_dtoa_r+0x990>
 80189e4:	9b06      	ldr	r3, [sp, #24]
 80189e6:	2b02      	cmp	r3, #2
 80189e8:	dc51      	bgt.n	8018a8e <_dtoa_r+0x91e>
 80189ea:	e089      	b.n	8018b00 <_dtoa_r+0x990>
 80189ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80189ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80189f2:	e74b      	b.n	801888c <_dtoa_r+0x71c>
 80189f4:	9b03      	ldr	r3, [sp, #12]
 80189f6:	1e5e      	subs	r6, r3, #1
 80189f8:	9b07      	ldr	r3, [sp, #28]
 80189fa:	42b3      	cmp	r3, r6
 80189fc:	bfbf      	itttt	lt
 80189fe:	9b07      	ldrlt	r3, [sp, #28]
 8018a00:	9607      	strlt	r6, [sp, #28]
 8018a02:	1af2      	sublt	r2, r6, r3
 8018a04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8018a06:	bfb6      	itet	lt
 8018a08:	189b      	addlt	r3, r3, r2
 8018a0a:	1b9e      	subge	r6, r3, r6
 8018a0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8018a0e:	9b03      	ldr	r3, [sp, #12]
 8018a10:	bfb8      	it	lt
 8018a12:	2600      	movlt	r6, #0
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	bfb7      	itett	lt
 8018a18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8018a1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8018a20:	1a9d      	sublt	r5, r3, r2
 8018a22:	2300      	movlt	r3, #0
 8018a24:	e734      	b.n	8018890 <_dtoa_r+0x720>
 8018a26:	9e07      	ldr	r6, [sp, #28]
 8018a28:	9d04      	ldr	r5, [sp, #16]
 8018a2a:	9f08      	ldr	r7, [sp, #32]
 8018a2c:	e73b      	b.n	80188a6 <_dtoa_r+0x736>
 8018a2e:	9a07      	ldr	r2, [sp, #28]
 8018a30:	e767      	b.n	8018902 <_dtoa_r+0x792>
 8018a32:	9b06      	ldr	r3, [sp, #24]
 8018a34:	2b01      	cmp	r3, #1
 8018a36:	dc18      	bgt.n	8018a6a <_dtoa_r+0x8fa>
 8018a38:	f1ba 0f00 	cmp.w	sl, #0
 8018a3c:	d115      	bne.n	8018a6a <_dtoa_r+0x8fa>
 8018a3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018a42:	b993      	cbnz	r3, 8018a6a <_dtoa_r+0x8fa>
 8018a44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018a48:	0d1b      	lsrs	r3, r3, #20
 8018a4a:	051b      	lsls	r3, r3, #20
 8018a4c:	b183      	cbz	r3, 8018a70 <_dtoa_r+0x900>
 8018a4e:	9b04      	ldr	r3, [sp, #16]
 8018a50:	3301      	adds	r3, #1
 8018a52:	9304      	str	r3, [sp, #16]
 8018a54:	9b05      	ldr	r3, [sp, #20]
 8018a56:	3301      	adds	r3, #1
 8018a58:	9305      	str	r3, [sp, #20]
 8018a5a:	f04f 0801 	mov.w	r8, #1
 8018a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	f47f af6a 	bne.w	801893a <_dtoa_r+0x7ca>
 8018a66:	2001      	movs	r0, #1
 8018a68:	e76f      	b.n	801894a <_dtoa_r+0x7da>
 8018a6a:	f04f 0800 	mov.w	r8, #0
 8018a6e:	e7f6      	b.n	8018a5e <_dtoa_r+0x8ee>
 8018a70:	4698      	mov	r8, r3
 8018a72:	e7f4      	b.n	8018a5e <_dtoa_r+0x8ee>
 8018a74:	f43f af7d 	beq.w	8018972 <_dtoa_r+0x802>
 8018a78:	4618      	mov	r0, r3
 8018a7a:	301c      	adds	r0, #28
 8018a7c:	e772      	b.n	8018964 <_dtoa_r+0x7f4>
 8018a7e:	9b03      	ldr	r3, [sp, #12]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	dc37      	bgt.n	8018af4 <_dtoa_r+0x984>
 8018a84:	9b06      	ldr	r3, [sp, #24]
 8018a86:	2b02      	cmp	r3, #2
 8018a88:	dd34      	ble.n	8018af4 <_dtoa_r+0x984>
 8018a8a:	9b03      	ldr	r3, [sp, #12]
 8018a8c:	9302      	str	r3, [sp, #8]
 8018a8e:	9b02      	ldr	r3, [sp, #8]
 8018a90:	b96b      	cbnz	r3, 8018aae <_dtoa_r+0x93e>
 8018a92:	4631      	mov	r1, r6
 8018a94:	2205      	movs	r2, #5
 8018a96:	4620      	mov	r0, r4
 8018a98:	f000 fd48 	bl	801952c <__multadd>
 8018a9c:	4601      	mov	r1, r0
 8018a9e:	4606      	mov	r6, r0
 8018aa0:	ee18 0a10 	vmov	r0, s16
 8018aa4:	f000 ffac 	bl	8019a00 <__mcmp>
 8018aa8:	2800      	cmp	r0, #0
 8018aaa:	f73f adbb 	bgt.w	8018624 <_dtoa_r+0x4b4>
 8018aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ab0:	9d01      	ldr	r5, [sp, #4]
 8018ab2:	43db      	mvns	r3, r3
 8018ab4:	9300      	str	r3, [sp, #0]
 8018ab6:	f04f 0800 	mov.w	r8, #0
 8018aba:	4631      	mov	r1, r6
 8018abc:	4620      	mov	r0, r4
 8018abe:	f000 fd13 	bl	80194e8 <_Bfree>
 8018ac2:	2f00      	cmp	r7, #0
 8018ac4:	f43f aea4 	beq.w	8018810 <_dtoa_r+0x6a0>
 8018ac8:	f1b8 0f00 	cmp.w	r8, #0
 8018acc:	d005      	beq.n	8018ada <_dtoa_r+0x96a>
 8018ace:	45b8      	cmp	r8, r7
 8018ad0:	d003      	beq.n	8018ada <_dtoa_r+0x96a>
 8018ad2:	4641      	mov	r1, r8
 8018ad4:	4620      	mov	r0, r4
 8018ad6:	f000 fd07 	bl	80194e8 <_Bfree>
 8018ada:	4639      	mov	r1, r7
 8018adc:	4620      	mov	r0, r4
 8018ade:	f000 fd03 	bl	80194e8 <_Bfree>
 8018ae2:	e695      	b.n	8018810 <_dtoa_r+0x6a0>
 8018ae4:	2600      	movs	r6, #0
 8018ae6:	4637      	mov	r7, r6
 8018ae8:	e7e1      	b.n	8018aae <_dtoa_r+0x93e>
 8018aea:	9700      	str	r7, [sp, #0]
 8018aec:	4637      	mov	r7, r6
 8018aee:	e599      	b.n	8018624 <_dtoa_r+0x4b4>
 8018af0:	40240000 	.word	0x40240000
 8018af4:	9b08      	ldr	r3, [sp, #32]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	f000 80ca 	beq.w	8018c90 <_dtoa_r+0xb20>
 8018afc:	9b03      	ldr	r3, [sp, #12]
 8018afe:	9302      	str	r3, [sp, #8]
 8018b00:	2d00      	cmp	r5, #0
 8018b02:	dd05      	ble.n	8018b10 <_dtoa_r+0x9a0>
 8018b04:	4639      	mov	r1, r7
 8018b06:	462a      	mov	r2, r5
 8018b08:	4620      	mov	r0, r4
 8018b0a:	f000 ff09 	bl	8019920 <__lshift>
 8018b0e:	4607      	mov	r7, r0
 8018b10:	f1b8 0f00 	cmp.w	r8, #0
 8018b14:	d05b      	beq.n	8018bce <_dtoa_r+0xa5e>
 8018b16:	6879      	ldr	r1, [r7, #4]
 8018b18:	4620      	mov	r0, r4
 8018b1a:	f000 fca5 	bl	8019468 <_Balloc>
 8018b1e:	4605      	mov	r5, r0
 8018b20:	b928      	cbnz	r0, 8018b2e <_dtoa_r+0x9be>
 8018b22:	4b87      	ldr	r3, [pc, #540]	; (8018d40 <_dtoa_r+0xbd0>)
 8018b24:	4602      	mov	r2, r0
 8018b26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018b2a:	f7ff bb3b 	b.w	80181a4 <_dtoa_r+0x34>
 8018b2e:	693a      	ldr	r2, [r7, #16]
 8018b30:	3202      	adds	r2, #2
 8018b32:	0092      	lsls	r2, r2, #2
 8018b34:	f107 010c 	add.w	r1, r7, #12
 8018b38:	300c      	adds	r0, #12
 8018b3a:	f7fd fd2b 	bl	8016594 <memcpy>
 8018b3e:	2201      	movs	r2, #1
 8018b40:	4629      	mov	r1, r5
 8018b42:	4620      	mov	r0, r4
 8018b44:	f000 feec 	bl	8019920 <__lshift>
 8018b48:	9b01      	ldr	r3, [sp, #4]
 8018b4a:	f103 0901 	add.w	r9, r3, #1
 8018b4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018b52:	4413      	add	r3, r2
 8018b54:	9305      	str	r3, [sp, #20]
 8018b56:	f00a 0301 	and.w	r3, sl, #1
 8018b5a:	46b8      	mov	r8, r7
 8018b5c:	9304      	str	r3, [sp, #16]
 8018b5e:	4607      	mov	r7, r0
 8018b60:	4631      	mov	r1, r6
 8018b62:	ee18 0a10 	vmov	r0, s16
 8018b66:	f7ff fa77 	bl	8018058 <quorem>
 8018b6a:	4641      	mov	r1, r8
 8018b6c:	9002      	str	r0, [sp, #8]
 8018b6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8018b72:	ee18 0a10 	vmov	r0, s16
 8018b76:	f000 ff43 	bl	8019a00 <__mcmp>
 8018b7a:	463a      	mov	r2, r7
 8018b7c:	9003      	str	r0, [sp, #12]
 8018b7e:	4631      	mov	r1, r6
 8018b80:	4620      	mov	r0, r4
 8018b82:	f000 ff59 	bl	8019a38 <__mdiff>
 8018b86:	68c2      	ldr	r2, [r0, #12]
 8018b88:	f109 3bff 	add.w	fp, r9, #4294967295
 8018b8c:	4605      	mov	r5, r0
 8018b8e:	bb02      	cbnz	r2, 8018bd2 <_dtoa_r+0xa62>
 8018b90:	4601      	mov	r1, r0
 8018b92:	ee18 0a10 	vmov	r0, s16
 8018b96:	f000 ff33 	bl	8019a00 <__mcmp>
 8018b9a:	4602      	mov	r2, r0
 8018b9c:	4629      	mov	r1, r5
 8018b9e:	4620      	mov	r0, r4
 8018ba0:	9207      	str	r2, [sp, #28]
 8018ba2:	f000 fca1 	bl	80194e8 <_Bfree>
 8018ba6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8018baa:	ea43 0102 	orr.w	r1, r3, r2
 8018bae:	9b04      	ldr	r3, [sp, #16]
 8018bb0:	430b      	orrs	r3, r1
 8018bb2:	464d      	mov	r5, r9
 8018bb4:	d10f      	bne.n	8018bd6 <_dtoa_r+0xa66>
 8018bb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018bba:	d02a      	beq.n	8018c12 <_dtoa_r+0xaa2>
 8018bbc:	9b03      	ldr	r3, [sp, #12]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	dd02      	ble.n	8018bc8 <_dtoa_r+0xa58>
 8018bc2:	9b02      	ldr	r3, [sp, #8]
 8018bc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8018bc8:	f88b a000 	strb.w	sl, [fp]
 8018bcc:	e775      	b.n	8018aba <_dtoa_r+0x94a>
 8018bce:	4638      	mov	r0, r7
 8018bd0:	e7ba      	b.n	8018b48 <_dtoa_r+0x9d8>
 8018bd2:	2201      	movs	r2, #1
 8018bd4:	e7e2      	b.n	8018b9c <_dtoa_r+0xa2c>
 8018bd6:	9b03      	ldr	r3, [sp, #12]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	db04      	blt.n	8018be6 <_dtoa_r+0xa76>
 8018bdc:	9906      	ldr	r1, [sp, #24]
 8018bde:	430b      	orrs	r3, r1
 8018be0:	9904      	ldr	r1, [sp, #16]
 8018be2:	430b      	orrs	r3, r1
 8018be4:	d122      	bne.n	8018c2c <_dtoa_r+0xabc>
 8018be6:	2a00      	cmp	r2, #0
 8018be8:	ddee      	ble.n	8018bc8 <_dtoa_r+0xa58>
 8018bea:	ee18 1a10 	vmov	r1, s16
 8018bee:	2201      	movs	r2, #1
 8018bf0:	4620      	mov	r0, r4
 8018bf2:	f000 fe95 	bl	8019920 <__lshift>
 8018bf6:	4631      	mov	r1, r6
 8018bf8:	ee08 0a10 	vmov	s16, r0
 8018bfc:	f000 ff00 	bl	8019a00 <__mcmp>
 8018c00:	2800      	cmp	r0, #0
 8018c02:	dc03      	bgt.n	8018c0c <_dtoa_r+0xa9c>
 8018c04:	d1e0      	bne.n	8018bc8 <_dtoa_r+0xa58>
 8018c06:	f01a 0f01 	tst.w	sl, #1
 8018c0a:	d0dd      	beq.n	8018bc8 <_dtoa_r+0xa58>
 8018c0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018c10:	d1d7      	bne.n	8018bc2 <_dtoa_r+0xa52>
 8018c12:	2339      	movs	r3, #57	; 0x39
 8018c14:	f88b 3000 	strb.w	r3, [fp]
 8018c18:	462b      	mov	r3, r5
 8018c1a:	461d      	mov	r5, r3
 8018c1c:	3b01      	subs	r3, #1
 8018c1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018c22:	2a39      	cmp	r2, #57	; 0x39
 8018c24:	d071      	beq.n	8018d0a <_dtoa_r+0xb9a>
 8018c26:	3201      	adds	r2, #1
 8018c28:	701a      	strb	r2, [r3, #0]
 8018c2a:	e746      	b.n	8018aba <_dtoa_r+0x94a>
 8018c2c:	2a00      	cmp	r2, #0
 8018c2e:	dd07      	ble.n	8018c40 <_dtoa_r+0xad0>
 8018c30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018c34:	d0ed      	beq.n	8018c12 <_dtoa_r+0xaa2>
 8018c36:	f10a 0301 	add.w	r3, sl, #1
 8018c3a:	f88b 3000 	strb.w	r3, [fp]
 8018c3e:	e73c      	b.n	8018aba <_dtoa_r+0x94a>
 8018c40:	9b05      	ldr	r3, [sp, #20]
 8018c42:	f809 ac01 	strb.w	sl, [r9, #-1]
 8018c46:	4599      	cmp	r9, r3
 8018c48:	d047      	beq.n	8018cda <_dtoa_r+0xb6a>
 8018c4a:	ee18 1a10 	vmov	r1, s16
 8018c4e:	2300      	movs	r3, #0
 8018c50:	220a      	movs	r2, #10
 8018c52:	4620      	mov	r0, r4
 8018c54:	f000 fc6a 	bl	801952c <__multadd>
 8018c58:	45b8      	cmp	r8, r7
 8018c5a:	ee08 0a10 	vmov	s16, r0
 8018c5e:	f04f 0300 	mov.w	r3, #0
 8018c62:	f04f 020a 	mov.w	r2, #10
 8018c66:	4641      	mov	r1, r8
 8018c68:	4620      	mov	r0, r4
 8018c6a:	d106      	bne.n	8018c7a <_dtoa_r+0xb0a>
 8018c6c:	f000 fc5e 	bl	801952c <__multadd>
 8018c70:	4680      	mov	r8, r0
 8018c72:	4607      	mov	r7, r0
 8018c74:	f109 0901 	add.w	r9, r9, #1
 8018c78:	e772      	b.n	8018b60 <_dtoa_r+0x9f0>
 8018c7a:	f000 fc57 	bl	801952c <__multadd>
 8018c7e:	4639      	mov	r1, r7
 8018c80:	4680      	mov	r8, r0
 8018c82:	2300      	movs	r3, #0
 8018c84:	220a      	movs	r2, #10
 8018c86:	4620      	mov	r0, r4
 8018c88:	f000 fc50 	bl	801952c <__multadd>
 8018c8c:	4607      	mov	r7, r0
 8018c8e:	e7f1      	b.n	8018c74 <_dtoa_r+0xb04>
 8018c90:	9b03      	ldr	r3, [sp, #12]
 8018c92:	9302      	str	r3, [sp, #8]
 8018c94:	9d01      	ldr	r5, [sp, #4]
 8018c96:	ee18 0a10 	vmov	r0, s16
 8018c9a:	4631      	mov	r1, r6
 8018c9c:	f7ff f9dc 	bl	8018058 <quorem>
 8018ca0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8018ca4:	9b01      	ldr	r3, [sp, #4]
 8018ca6:	f805 ab01 	strb.w	sl, [r5], #1
 8018caa:	1aea      	subs	r2, r5, r3
 8018cac:	9b02      	ldr	r3, [sp, #8]
 8018cae:	4293      	cmp	r3, r2
 8018cb0:	dd09      	ble.n	8018cc6 <_dtoa_r+0xb56>
 8018cb2:	ee18 1a10 	vmov	r1, s16
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	220a      	movs	r2, #10
 8018cba:	4620      	mov	r0, r4
 8018cbc:	f000 fc36 	bl	801952c <__multadd>
 8018cc0:	ee08 0a10 	vmov	s16, r0
 8018cc4:	e7e7      	b.n	8018c96 <_dtoa_r+0xb26>
 8018cc6:	9b02      	ldr	r3, [sp, #8]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	bfc8      	it	gt
 8018ccc:	461d      	movgt	r5, r3
 8018cce:	9b01      	ldr	r3, [sp, #4]
 8018cd0:	bfd8      	it	le
 8018cd2:	2501      	movle	r5, #1
 8018cd4:	441d      	add	r5, r3
 8018cd6:	f04f 0800 	mov.w	r8, #0
 8018cda:	ee18 1a10 	vmov	r1, s16
 8018cde:	2201      	movs	r2, #1
 8018ce0:	4620      	mov	r0, r4
 8018ce2:	f000 fe1d 	bl	8019920 <__lshift>
 8018ce6:	4631      	mov	r1, r6
 8018ce8:	ee08 0a10 	vmov	s16, r0
 8018cec:	f000 fe88 	bl	8019a00 <__mcmp>
 8018cf0:	2800      	cmp	r0, #0
 8018cf2:	dc91      	bgt.n	8018c18 <_dtoa_r+0xaa8>
 8018cf4:	d102      	bne.n	8018cfc <_dtoa_r+0xb8c>
 8018cf6:	f01a 0f01 	tst.w	sl, #1
 8018cfa:	d18d      	bne.n	8018c18 <_dtoa_r+0xaa8>
 8018cfc:	462b      	mov	r3, r5
 8018cfe:	461d      	mov	r5, r3
 8018d00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018d04:	2a30      	cmp	r2, #48	; 0x30
 8018d06:	d0fa      	beq.n	8018cfe <_dtoa_r+0xb8e>
 8018d08:	e6d7      	b.n	8018aba <_dtoa_r+0x94a>
 8018d0a:	9a01      	ldr	r2, [sp, #4]
 8018d0c:	429a      	cmp	r2, r3
 8018d0e:	d184      	bne.n	8018c1a <_dtoa_r+0xaaa>
 8018d10:	9b00      	ldr	r3, [sp, #0]
 8018d12:	3301      	adds	r3, #1
 8018d14:	9300      	str	r3, [sp, #0]
 8018d16:	2331      	movs	r3, #49	; 0x31
 8018d18:	7013      	strb	r3, [r2, #0]
 8018d1a:	e6ce      	b.n	8018aba <_dtoa_r+0x94a>
 8018d1c:	4b09      	ldr	r3, [pc, #36]	; (8018d44 <_dtoa_r+0xbd4>)
 8018d1e:	f7ff ba95 	b.w	801824c <_dtoa_r+0xdc>
 8018d22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	f47f aa6e 	bne.w	8018206 <_dtoa_r+0x96>
 8018d2a:	4b07      	ldr	r3, [pc, #28]	; (8018d48 <_dtoa_r+0xbd8>)
 8018d2c:	f7ff ba8e 	b.w	801824c <_dtoa_r+0xdc>
 8018d30:	9b02      	ldr	r3, [sp, #8]
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	dcae      	bgt.n	8018c94 <_dtoa_r+0xb24>
 8018d36:	9b06      	ldr	r3, [sp, #24]
 8018d38:	2b02      	cmp	r3, #2
 8018d3a:	f73f aea8 	bgt.w	8018a8e <_dtoa_r+0x91e>
 8018d3e:	e7a9      	b.n	8018c94 <_dtoa_r+0xb24>
 8018d40:	0801cbe8 	.word	0x0801cbe8
 8018d44:	0801c9ec 	.word	0x0801c9ec
 8018d48:	0801cb69 	.word	0x0801cb69

08018d4c <rshift>:
 8018d4c:	6903      	ldr	r3, [r0, #16]
 8018d4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018d52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d56:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018d5a:	f100 0414 	add.w	r4, r0, #20
 8018d5e:	dd45      	ble.n	8018dec <rshift+0xa0>
 8018d60:	f011 011f 	ands.w	r1, r1, #31
 8018d64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018d68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018d6c:	d10c      	bne.n	8018d88 <rshift+0x3c>
 8018d6e:	f100 0710 	add.w	r7, r0, #16
 8018d72:	4629      	mov	r1, r5
 8018d74:	42b1      	cmp	r1, r6
 8018d76:	d334      	bcc.n	8018de2 <rshift+0x96>
 8018d78:	1a9b      	subs	r3, r3, r2
 8018d7a:	009b      	lsls	r3, r3, #2
 8018d7c:	1eea      	subs	r2, r5, #3
 8018d7e:	4296      	cmp	r6, r2
 8018d80:	bf38      	it	cc
 8018d82:	2300      	movcc	r3, #0
 8018d84:	4423      	add	r3, r4
 8018d86:	e015      	b.n	8018db4 <rshift+0x68>
 8018d88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018d8c:	f1c1 0820 	rsb	r8, r1, #32
 8018d90:	40cf      	lsrs	r7, r1
 8018d92:	f105 0e04 	add.w	lr, r5, #4
 8018d96:	46a1      	mov	r9, r4
 8018d98:	4576      	cmp	r6, lr
 8018d9a:	46f4      	mov	ip, lr
 8018d9c:	d815      	bhi.n	8018dca <rshift+0x7e>
 8018d9e:	1a9a      	subs	r2, r3, r2
 8018da0:	0092      	lsls	r2, r2, #2
 8018da2:	3a04      	subs	r2, #4
 8018da4:	3501      	adds	r5, #1
 8018da6:	42ae      	cmp	r6, r5
 8018da8:	bf38      	it	cc
 8018daa:	2200      	movcc	r2, #0
 8018dac:	18a3      	adds	r3, r4, r2
 8018dae:	50a7      	str	r7, [r4, r2]
 8018db0:	b107      	cbz	r7, 8018db4 <rshift+0x68>
 8018db2:	3304      	adds	r3, #4
 8018db4:	1b1a      	subs	r2, r3, r4
 8018db6:	42a3      	cmp	r3, r4
 8018db8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018dbc:	bf08      	it	eq
 8018dbe:	2300      	moveq	r3, #0
 8018dc0:	6102      	str	r2, [r0, #16]
 8018dc2:	bf08      	it	eq
 8018dc4:	6143      	streq	r3, [r0, #20]
 8018dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018dca:	f8dc c000 	ldr.w	ip, [ip]
 8018dce:	fa0c fc08 	lsl.w	ip, ip, r8
 8018dd2:	ea4c 0707 	orr.w	r7, ip, r7
 8018dd6:	f849 7b04 	str.w	r7, [r9], #4
 8018dda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018dde:	40cf      	lsrs	r7, r1
 8018de0:	e7da      	b.n	8018d98 <rshift+0x4c>
 8018de2:	f851 cb04 	ldr.w	ip, [r1], #4
 8018de6:	f847 cf04 	str.w	ip, [r7, #4]!
 8018dea:	e7c3      	b.n	8018d74 <rshift+0x28>
 8018dec:	4623      	mov	r3, r4
 8018dee:	e7e1      	b.n	8018db4 <rshift+0x68>

08018df0 <__hexdig_fun>:
 8018df0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018df4:	2b09      	cmp	r3, #9
 8018df6:	d802      	bhi.n	8018dfe <__hexdig_fun+0xe>
 8018df8:	3820      	subs	r0, #32
 8018dfa:	b2c0      	uxtb	r0, r0
 8018dfc:	4770      	bx	lr
 8018dfe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018e02:	2b05      	cmp	r3, #5
 8018e04:	d801      	bhi.n	8018e0a <__hexdig_fun+0x1a>
 8018e06:	3847      	subs	r0, #71	; 0x47
 8018e08:	e7f7      	b.n	8018dfa <__hexdig_fun+0xa>
 8018e0a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018e0e:	2b05      	cmp	r3, #5
 8018e10:	d801      	bhi.n	8018e16 <__hexdig_fun+0x26>
 8018e12:	3827      	subs	r0, #39	; 0x27
 8018e14:	e7f1      	b.n	8018dfa <__hexdig_fun+0xa>
 8018e16:	2000      	movs	r0, #0
 8018e18:	4770      	bx	lr
	...

08018e1c <__gethex>:
 8018e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e20:	ed2d 8b02 	vpush	{d8}
 8018e24:	b089      	sub	sp, #36	; 0x24
 8018e26:	ee08 0a10 	vmov	s16, r0
 8018e2a:	9304      	str	r3, [sp, #16]
 8018e2c:	4bb4      	ldr	r3, [pc, #720]	; (8019100 <__gethex+0x2e4>)
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	9301      	str	r3, [sp, #4]
 8018e32:	4618      	mov	r0, r3
 8018e34:	468b      	mov	fp, r1
 8018e36:	4690      	mov	r8, r2
 8018e38:	f7e7 f9e2 	bl	8000200 <strlen>
 8018e3c:	9b01      	ldr	r3, [sp, #4]
 8018e3e:	f8db 2000 	ldr.w	r2, [fp]
 8018e42:	4403      	add	r3, r0
 8018e44:	4682      	mov	sl, r0
 8018e46:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018e4a:	9305      	str	r3, [sp, #20]
 8018e4c:	1c93      	adds	r3, r2, #2
 8018e4e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018e52:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018e56:	32fe      	adds	r2, #254	; 0xfe
 8018e58:	18d1      	adds	r1, r2, r3
 8018e5a:	461f      	mov	r7, r3
 8018e5c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018e60:	9100      	str	r1, [sp, #0]
 8018e62:	2830      	cmp	r0, #48	; 0x30
 8018e64:	d0f8      	beq.n	8018e58 <__gethex+0x3c>
 8018e66:	f7ff ffc3 	bl	8018df0 <__hexdig_fun>
 8018e6a:	4604      	mov	r4, r0
 8018e6c:	2800      	cmp	r0, #0
 8018e6e:	d13a      	bne.n	8018ee6 <__gethex+0xca>
 8018e70:	9901      	ldr	r1, [sp, #4]
 8018e72:	4652      	mov	r2, sl
 8018e74:	4638      	mov	r0, r7
 8018e76:	f001 fa23 	bl	801a2c0 <strncmp>
 8018e7a:	4605      	mov	r5, r0
 8018e7c:	2800      	cmp	r0, #0
 8018e7e:	d168      	bne.n	8018f52 <__gethex+0x136>
 8018e80:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018e84:	eb07 060a 	add.w	r6, r7, sl
 8018e88:	f7ff ffb2 	bl	8018df0 <__hexdig_fun>
 8018e8c:	2800      	cmp	r0, #0
 8018e8e:	d062      	beq.n	8018f56 <__gethex+0x13a>
 8018e90:	4633      	mov	r3, r6
 8018e92:	7818      	ldrb	r0, [r3, #0]
 8018e94:	2830      	cmp	r0, #48	; 0x30
 8018e96:	461f      	mov	r7, r3
 8018e98:	f103 0301 	add.w	r3, r3, #1
 8018e9c:	d0f9      	beq.n	8018e92 <__gethex+0x76>
 8018e9e:	f7ff ffa7 	bl	8018df0 <__hexdig_fun>
 8018ea2:	2301      	movs	r3, #1
 8018ea4:	fab0 f480 	clz	r4, r0
 8018ea8:	0964      	lsrs	r4, r4, #5
 8018eaa:	4635      	mov	r5, r6
 8018eac:	9300      	str	r3, [sp, #0]
 8018eae:	463a      	mov	r2, r7
 8018eb0:	4616      	mov	r6, r2
 8018eb2:	3201      	adds	r2, #1
 8018eb4:	7830      	ldrb	r0, [r6, #0]
 8018eb6:	f7ff ff9b 	bl	8018df0 <__hexdig_fun>
 8018eba:	2800      	cmp	r0, #0
 8018ebc:	d1f8      	bne.n	8018eb0 <__gethex+0x94>
 8018ebe:	9901      	ldr	r1, [sp, #4]
 8018ec0:	4652      	mov	r2, sl
 8018ec2:	4630      	mov	r0, r6
 8018ec4:	f001 f9fc 	bl	801a2c0 <strncmp>
 8018ec8:	b980      	cbnz	r0, 8018eec <__gethex+0xd0>
 8018eca:	b94d      	cbnz	r5, 8018ee0 <__gethex+0xc4>
 8018ecc:	eb06 050a 	add.w	r5, r6, sl
 8018ed0:	462a      	mov	r2, r5
 8018ed2:	4616      	mov	r6, r2
 8018ed4:	3201      	adds	r2, #1
 8018ed6:	7830      	ldrb	r0, [r6, #0]
 8018ed8:	f7ff ff8a 	bl	8018df0 <__hexdig_fun>
 8018edc:	2800      	cmp	r0, #0
 8018ede:	d1f8      	bne.n	8018ed2 <__gethex+0xb6>
 8018ee0:	1bad      	subs	r5, r5, r6
 8018ee2:	00ad      	lsls	r5, r5, #2
 8018ee4:	e004      	b.n	8018ef0 <__gethex+0xd4>
 8018ee6:	2400      	movs	r4, #0
 8018ee8:	4625      	mov	r5, r4
 8018eea:	e7e0      	b.n	8018eae <__gethex+0x92>
 8018eec:	2d00      	cmp	r5, #0
 8018eee:	d1f7      	bne.n	8018ee0 <__gethex+0xc4>
 8018ef0:	7833      	ldrb	r3, [r6, #0]
 8018ef2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018ef6:	2b50      	cmp	r3, #80	; 0x50
 8018ef8:	d13b      	bne.n	8018f72 <__gethex+0x156>
 8018efa:	7873      	ldrb	r3, [r6, #1]
 8018efc:	2b2b      	cmp	r3, #43	; 0x2b
 8018efe:	d02c      	beq.n	8018f5a <__gethex+0x13e>
 8018f00:	2b2d      	cmp	r3, #45	; 0x2d
 8018f02:	d02e      	beq.n	8018f62 <__gethex+0x146>
 8018f04:	1c71      	adds	r1, r6, #1
 8018f06:	f04f 0900 	mov.w	r9, #0
 8018f0a:	7808      	ldrb	r0, [r1, #0]
 8018f0c:	f7ff ff70 	bl	8018df0 <__hexdig_fun>
 8018f10:	1e43      	subs	r3, r0, #1
 8018f12:	b2db      	uxtb	r3, r3
 8018f14:	2b18      	cmp	r3, #24
 8018f16:	d82c      	bhi.n	8018f72 <__gethex+0x156>
 8018f18:	f1a0 0210 	sub.w	r2, r0, #16
 8018f1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018f20:	f7ff ff66 	bl	8018df0 <__hexdig_fun>
 8018f24:	1e43      	subs	r3, r0, #1
 8018f26:	b2db      	uxtb	r3, r3
 8018f28:	2b18      	cmp	r3, #24
 8018f2a:	d91d      	bls.n	8018f68 <__gethex+0x14c>
 8018f2c:	f1b9 0f00 	cmp.w	r9, #0
 8018f30:	d000      	beq.n	8018f34 <__gethex+0x118>
 8018f32:	4252      	negs	r2, r2
 8018f34:	4415      	add	r5, r2
 8018f36:	f8cb 1000 	str.w	r1, [fp]
 8018f3a:	b1e4      	cbz	r4, 8018f76 <__gethex+0x15a>
 8018f3c:	9b00      	ldr	r3, [sp, #0]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	bf14      	ite	ne
 8018f42:	2700      	movne	r7, #0
 8018f44:	2706      	moveq	r7, #6
 8018f46:	4638      	mov	r0, r7
 8018f48:	b009      	add	sp, #36	; 0x24
 8018f4a:	ecbd 8b02 	vpop	{d8}
 8018f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f52:	463e      	mov	r6, r7
 8018f54:	4625      	mov	r5, r4
 8018f56:	2401      	movs	r4, #1
 8018f58:	e7ca      	b.n	8018ef0 <__gethex+0xd4>
 8018f5a:	f04f 0900 	mov.w	r9, #0
 8018f5e:	1cb1      	adds	r1, r6, #2
 8018f60:	e7d3      	b.n	8018f0a <__gethex+0xee>
 8018f62:	f04f 0901 	mov.w	r9, #1
 8018f66:	e7fa      	b.n	8018f5e <__gethex+0x142>
 8018f68:	230a      	movs	r3, #10
 8018f6a:	fb03 0202 	mla	r2, r3, r2, r0
 8018f6e:	3a10      	subs	r2, #16
 8018f70:	e7d4      	b.n	8018f1c <__gethex+0x100>
 8018f72:	4631      	mov	r1, r6
 8018f74:	e7df      	b.n	8018f36 <__gethex+0x11a>
 8018f76:	1bf3      	subs	r3, r6, r7
 8018f78:	3b01      	subs	r3, #1
 8018f7a:	4621      	mov	r1, r4
 8018f7c:	2b07      	cmp	r3, #7
 8018f7e:	dc0b      	bgt.n	8018f98 <__gethex+0x17c>
 8018f80:	ee18 0a10 	vmov	r0, s16
 8018f84:	f000 fa70 	bl	8019468 <_Balloc>
 8018f88:	4604      	mov	r4, r0
 8018f8a:	b940      	cbnz	r0, 8018f9e <__gethex+0x182>
 8018f8c:	4b5d      	ldr	r3, [pc, #372]	; (8019104 <__gethex+0x2e8>)
 8018f8e:	4602      	mov	r2, r0
 8018f90:	21de      	movs	r1, #222	; 0xde
 8018f92:	485d      	ldr	r0, [pc, #372]	; (8019108 <__gethex+0x2ec>)
 8018f94:	f001 f9b6 	bl	801a304 <__assert_func>
 8018f98:	3101      	adds	r1, #1
 8018f9a:	105b      	asrs	r3, r3, #1
 8018f9c:	e7ee      	b.n	8018f7c <__gethex+0x160>
 8018f9e:	f100 0914 	add.w	r9, r0, #20
 8018fa2:	f04f 0b00 	mov.w	fp, #0
 8018fa6:	f1ca 0301 	rsb	r3, sl, #1
 8018faa:	f8cd 9008 	str.w	r9, [sp, #8]
 8018fae:	f8cd b000 	str.w	fp, [sp]
 8018fb2:	9306      	str	r3, [sp, #24]
 8018fb4:	42b7      	cmp	r7, r6
 8018fb6:	d340      	bcc.n	801903a <__gethex+0x21e>
 8018fb8:	9802      	ldr	r0, [sp, #8]
 8018fba:	9b00      	ldr	r3, [sp, #0]
 8018fbc:	f840 3b04 	str.w	r3, [r0], #4
 8018fc0:	eba0 0009 	sub.w	r0, r0, r9
 8018fc4:	1080      	asrs	r0, r0, #2
 8018fc6:	0146      	lsls	r6, r0, #5
 8018fc8:	6120      	str	r0, [r4, #16]
 8018fca:	4618      	mov	r0, r3
 8018fcc:	f000 fb3e 	bl	801964c <__hi0bits>
 8018fd0:	1a30      	subs	r0, r6, r0
 8018fd2:	f8d8 6000 	ldr.w	r6, [r8]
 8018fd6:	42b0      	cmp	r0, r6
 8018fd8:	dd63      	ble.n	80190a2 <__gethex+0x286>
 8018fda:	1b87      	subs	r7, r0, r6
 8018fdc:	4639      	mov	r1, r7
 8018fde:	4620      	mov	r0, r4
 8018fe0:	f000 fee2 	bl	8019da8 <__any_on>
 8018fe4:	4682      	mov	sl, r0
 8018fe6:	b1a8      	cbz	r0, 8019014 <__gethex+0x1f8>
 8018fe8:	1e7b      	subs	r3, r7, #1
 8018fea:	1159      	asrs	r1, r3, #5
 8018fec:	f003 021f 	and.w	r2, r3, #31
 8018ff0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018ff4:	f04f 0a01 	mov.w	sl, #1
 8018ff8:	fa0a f202 	lsl.w	r2, sl, r2
 8018ffc:	420a      	tst	r2, r1
 8018ffe:	d009      	beq.n	8019014 <__gethex+0x1f8>
 8019000:	4553      	cmp	r3, sl
 8019002:	dd05      	ble.n	8019010 <__gethex+0x1f4>
 8019004:	1eb9      	subs	r1, r7, #2
 8019006:	4620      	mov	r0, r4
 8019008:	f000 fece 	bl	8019da8 <__any_on>
 801900c:	2800      	cmp	r0, #0
 801900e:	d145      	bne.n	801909c <__gethex+0x280>
 8019010:	f04f 0a02 	mov.w	sl, #2
 8019014:	4639      	mov	r1, r7
 8019016:	4620      	mov	r0, r4
 8019018:	f7ff fe98 	bl	8018d4c <rshift>
 801901c:	443d      	add	r5, r7
 801901e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019022:	42ab      	cmp	r3, r5
 8019024:	da4c      	bge.n	80190c0 <__gethex+0x2a4>
 8019026:	ee18 0a10 	vmov	r0, s16
 801902a:	4621      	mov	r1, r4
 801902c:	f000 fa5c 	bl	80194e8 <_Bfree>
 8019030:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019032:	2300      	movs	r3, #0
 8019034:	6013      	str	r3, [r2, #0]
 8019036:	27a3      	movs	r7, #163	; 0xa3
 8019038:	e785      	b.n	8018f46 <__gethex+0x12a>
 801903a:	1e73      	subs	r3, r6, #1
 801903c:	9a05      	ldr	r2, [sp, #20]
 801903e:	9303      	str	r3, [sp, #12]
 8019040:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019044:	4293      	cmp	r3, r2
 8019046:	d019      	beq.n	801907c <__gethex+0x260>
 8019048:	f1bb 0f20 	cmp.w	fp, #32
 801904c:	d107      	bne.n	801905e <__gethex+0x242>
 801904e:	9b02      	ldr	r3, [sp, #8]
 8019050:	9a00      	ldr	r2, [sp, #0]
 8019052:	f843 2b04 	str.w	r2, [r3], #4
 8019056:	9302      	str	r3, [sp, #8]
 8019058:	2300      	movs	r3, #0
 801905a:	9300      	str	r3, [sp, #0]
 801905c:	469b      	mov	fp, r3
 801905e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019062:	f7ff fec5 	bl	8018df0 <__hexdig_fun>
 8019066:	9b00      	ldr	r3, [sp, #0]
 8019068:	f000 000f 	and.w	r0, r0, #15
 801906c:	fa00 f00b 	lsl.w	r0, r0, fp
 8019070:	4303      	orrs	r3, r0
 8019072:	9300      	str	r3, [sp, #0]
 8019074:	f10b 0b04 	add.w	fp, fp, #4
 8019078:	9b03      	ldr	r3, [sp, #12]
 801907a:	e00d      	b.n	8019098 <__gethex+0x27c>
 801907c:	9b03      	ldr	r3, [sp, #12]
 801907e:	9a06      	ldr	r2, [sp, #24]
 8019080:	4413      	add	r3, r2
 8019082:	42bb      	cmp	r3, r7
 8019084:	d3e0      	bcc.n	8019048 <__gethex+0x22c>
 8019086:	4618      	mov	r0, r3
 8019088:	9901      	ldr	r1, [sp, #4]
 801908a:	9307      	str	r3, [sp, #28]
 801908c:	4652      	mov	r2, sl
 801908e:	f001 f917 	bl	801a2c0 <strncmp>
 8019092:	9b07      	ldr	r3, [sp, #28]
 8019094:	2800      	cmp	r0, #0
 8019096:	d1d7      	bne.n	8019048 <__gethex+0x22c>
 8019098:	461e      	mov	r6, r3
 801909a:	e78b      	b.n	8018fb4 <__gethex+0x198>
 801909c:	f04f 0a03 	mov.w	sl, #3
 80190a0:	e7b8      	b.n	8019014 <__gethex+0x1f8>
 80190a2:	da0a      	bge.n	80190ba <__gethex+0x29e>
 80190a4:	1a37      	subs	r7, r6, r0
 80190a6:	4621      	mov	r1, r4
 80190a8:	ee18 0a10 	vmov	r0, s16
 80190ac:	463a      	mov	r2, r7
 80190ae:	f000 fc37 	bl	8019920 <__lshift>
 80190b2:	1bed      	subs	r5, r5, r7
 80190b4:	4604      	mov	r4, r0
 80190b6:	f100 0914 	add.w	r9, r0, #20
 80190ba:	f04f 0a00 	mov.w	sl, #0
 80190be:	e7ae      	b.n	801901e <__gethex+0x202>
 80190c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80190c4:	42a8      	cmp	r0, r5
 80190c6:	dd72      	ble.n	80191ae <__gethex+0x392>
 80190c8:	1b45      	subs	r5, r0, r5
 80190ca:	42ae      	cmp	r6, r5
 80190cc:	dc36      	bgt.n	801913c <__gethex+0x320>
 80190ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80190d2:	2b02      	cmp	r3, #2
 80190d4:	d02a      	beq.n	801912c <__gethex+0x310>
 80190d6:	2b03      	cmp	r3, #3
 80190d8:	d02c      	beq.n	8019134 <__gethex+0x318>
 80190da:	2b01      	cmp	r3, #1
 80190dc:	d11c      	bne.n	8019118 <__gethex+0x2fc>
 80190de:	42ae      	cmp	r6, r5
 80190e0:	d11a      	bne.n	8019118 <__gethex+0x2fc>
 80190e2:	2e01      	cmp	r6, #1
 80190e4:	d112      	bne.n	801910c <__gethex+0x2f0>
 80190e6:	9a04      	ldr	r2, [sp, #16]
 80190e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80190ec:	6013      	str	r3, [r2, #0]
 80190ee:	2301      	movs	r3, #1
 80190f0:	6123      	str	r3, [r4, #16]
 80190f2:	f8c9 3000 	str.w	r3, [r9]
 80190f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80190f8:	2762      	movs	r7, #98	; 0x62
 80190fa:	601c      	str	r4, [r3, #0]
 80190fc:	e723      	b.n	8018f46 <__gethex+0x12a>
 80190fe:	bf00      	nop
 8019100:	0801cc60 	.word	0x0801cc60
 8019104:	0801cbe8 	.word	0x0801cbe8
 8019108:	0801cbf9 	.word	0x0801cbf9
 801910c:	1e71      	subs	r1, r6, #1
 801910e:	4620      	mov	r0, r4
 8019110:	f000 fe4a 	bl	8019da8 <__any_on>
 8019114:	2800      	cmp	r0, #0
 8019116:	d1e6      	bne.n	80190e6 <__gethex+0x2ca>
 8019118:	ee18 0a10 	vmov	r0, s16
 801911c:	4621      	mov	r1, r4
 801911e:	f000 f9e3 	bl	80194e8 <_Bfree>
 8019122:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019124:	2300      	movs	r3, #0
 8019126:	6013      	str	r3, [r2, #0]
 8019128:	2750      	movs	r7, #80	; 0x50
 801912a:	e70c      	b.n	8018f46 <__gethex+0x12a>
 801912c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801912e:	2b00      	cmp	r3, #0
 8019130:	d1f2      	bne.n	8019118 <__gethex+0x2fc>
 8019132:	e7d8      	b.n	80190e6 <__gethex+0x2ca>
 8019134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019136:	2b00      	cmp	r3, #0
 8019138:	d1d5      	bne.n	80190e6 <__gethex+0x2ca>
 801913a:	e7ed      	b.n	8019118 <__gethex+0x2fc>
 801913c:	1e6f      	subs	r7, r5, #1
 801913e:	f1ba 0f00 	cmp.w	sl, #0
 8019142:	d131      	bne.n	80191a8 <__gethex+0x38c>
 8019144:	b127      	cbz	r7, 8019150 <__gethex+0x334>
 8019146:	4639      	mov	r1, r7
 8019148:	4620      	mov	r0, r4
 801914a:	f000 fe2d 	bl	8019da8 <__any_on>
 801914e:	4682      	mov	sl, r0
 8019150:	117b      	asrs	r3, r7, #5
 8019152:	2101      	movs	r1, #1
 8019154:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019158:	f007 071f 	and.w	r7, r7, #31
 801915c:	fa01 f707 	lsl.w	r7, r1, r7
 8019160:	421f      	tst	r7, r3
 8019162:	4629      	mov	r1, r5
 8019164:	4620      	mov	r0, r4
 8019166:	bf18      	it	ne
 8019168:	f04a 0a02 	orrne.w	sl, sl, #2
 801916c:	1b76      	subs	r6, r6, r5
 801916e:	f7ff fded 	bl	8018d4c <rshift>
 8019172:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019176:	2702      	movs	r7, #2
 8019178:	f1ba 0f00 	cmp.w	sl, #0
 801917c:	d048      	beq.n	8019210 <__gethex+0x3f4>
 801917e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019182:	2b02      	cmp	r3, #2
 8019184:	d015      	beq.n	80191b2 <__gethex+0x396>
 8019186:	2b03      	cmp	r3, #3
 8019188:	d017      	beq.n	80191ba <__gethex+0x39e>
 801918a:	2b01      	cmp	r3, #1
 801918c:	d109      	bne.n	80191a2 <__gethex+0x386>
 801918e:	f01a 0f02 	tst.w	sl, #2
 8019192:	d006      	beq.n	80191a2 <__gethex+0x386>
 8019194:	f8d9 0000 	ldr.w	r0, [r9]
 8019198:	ea4a 0a00 	orr.w	sl, sl, r0
 801919c:	f01a 0f01 	tst.w	sl, #1
 80191a0:	d10e      	bne.n	80191c0 <__gethex+0x3a4>
 80191a2:	f047 0710 	orr.w	r7, r7, #16
 80191a6:	e033      	b.n	8019210 <__gethex+0x3f4>
 80191a8:	f04f 0a01 	mov.w	sl, #1
 80191ac:	e7d0      	b.n	8019150 <__gethex+0x334>
 80191ae:	2701      	movs	r7, #1
 80191b0:	e7e2      	b.n	8019178 <__gethex+0x35c>
 80191b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80191b4:	f1c3 0301 	rsb	r3, r3, #1
 80191b8:	9315      	str	r3, [sp, #84]	; 0x54
 80191ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d0f0      	beq.n	80191a2 <__gethex+0x386>
 80191c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80191c4:	f104 0314 	add.w	r3, r4, #20
 80191c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80191cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80191d0:	f04f 0c00 	mov.w	ip, #0
 80191d4:	4618      	mov	r0, r3
 80191d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80191da:	f1b2 3fff 	cmp.w	r2, #4294967295
 80191de:	d01c      	beq.n	801921a <__gethex+0x3fe>
 80191e0:	3201      	adds	r2, #1
 80191e2:	6002      	str	r2, [r0, #0]
 80191e4:	2f02      	cmp	r7, #2
 80191e6:	f104 0314 	add.w	r3, r4, #20
 80191ea:	d13f      	bne.n	801926c <__gethex+0x450>
 80191ec:	f8d8 2000 	ldr.w	r2, [r8]
 80191f0:	3a01      	subs	r2, #1
 80191f2:	42b2      	cmp	r2, r6
 80191f4:	d10a      	bne.n	801920c <__gethex+0x3f0>
 80191f6:	1171      	asrs	r1, r6, #5
 80191f8:	2201      	movs	r2, #1
 80191fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80191fe:	f006 061f 	and.w	r6, r6, #31
 8019202:	fa02 f606 	lsl.w	r6, r2, r6
 8019206:	421e      	tst	r6, r3
 8019208:	bf18      	it	ne
 801920a:	4617      	movne	r7, r2
 801920c:	f047 0720 	orr.w	r7, r7, #32
 8019210:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019212:	601c      	str	r4, [r3, #0]
 8019214:	9b04      	ldr	r3, [sp, #16]
 8019216:	601d      	str	r5, [r3, #0]
 8019218:	e695      	b.n	8018f46 <__gethex+0x12a>
 801921a:	4299      	cmp	r1, r3
 801921c:	f843 cc04 	str.w	ip, [r3, #-4]
 8019220:	d8d8      	bhi.n	80191d4 <__gethex+0x3b8>
 8019222:	68a3      	ldr	r3, [r4, #8]
 8019224:	459b      	cmp	fp, r3
 8019226:	db19      	blt.n	801925c <__gethex+0x440>
 8019228:	6861      	ldr	r1, [r4, #4]
 801922a:	ee18 0a10 	vmov	r0, s16
 801922e:	3101      	adds	r1, #1
 8019230:	f000 f91a 	bl	8019468 <_Balloc>
 8019234:	4681      	mov	r9, r0
 8019236:	b918      	cbnz	r0, 8019240 <__gethex+0x424>
 8019238:	4b1a      	ldr	r3, [pc, #104]	; (80192a4 <__gethex+0x488>)
 801923a:	4602      	mov	r2, r0
 801923c:	2184      	movs	r1, #132	; 0x84
 801923e:	e6a8      	b.n	8018f92 <__gethex+0x176>
 8019240:	6922      	ldr	r2, [r4, #16]
 8019242:	3202      	adds	r2, #2
 8019244:	f104 010c 	add.w	r1, r4, #12
 8019248:	0092      	lsls	r2, r2, #2
 801924a:	300c      	adds	r0, #12
 801924c:	f7fd f9a2 	bl	8016594 <memcpy>
 8019250:	4621      	mov	r1, r4
 8019252:	ee18 0a10 	vmov	r0, s16
 8019256:	f000 f947 	bl	80194e8 <_Bfree>
 801925a:	464c      	mov	r4, r9
 801925c:	6923      	ldr	r3, [r4, #16]
 801925e:	1c5a      	adds	r2, r3, #1
 8019260:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019264:	6122      	str	r2, [r4, #16]
 8019266:	2201      	movs	r2, #1
 8019268:	615a      	str	r2, [r3, #20]
 801926a:	e7bb      	b.n	80191e4 <__gethex+0x3c8>
 801926c:	6922      	ldr	r2, [r4, #16]
 801926e:	455a      	cmp	r2, fp
 8019270:	dd0b      	ble.n	801928a <__gethex+0x46e>
 8019272:	2101      	movs	r1, #1
 8019274:	4620      	mov	r0, r4
 8019276:	f7ff fd69 	bl	8018d4c <rshift>
 801927a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801927e:	3501      	adds	r5, #1
 8019280:	42ab      	cmp	r3, r5
 8019282:	f6ff aed0 	blt.w	8019026 <__gethex+0x20a>
 8019286:	2701      	movs	r7, #1
 8019288:	e7c0      	b.n	801920c <__gethex+0x3f0>
 801928a:	f016 061f 	ands.w	r6, r6, #31
 801928e:	d0fa      	beq.n	8019286 <__gethex+0x46a>
 8019290:	4453      	add	r3, sl
 8019292:	f1c6 0620 	rsb	r6, r6, #32
 8019296:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801929a:	f000 f9d7 	bl	801964c <__hi0bits>
 801929e:	42b0      	cmp	r0, r6
 80192a0:	dbe7      	blt.n	8019272 <__gethex+0x456>
 80192a2:	e7f0      	b.n	8019286 <__gethex+0x46a>
 80192a4:	0801cbe8 	.word	0x0801cbe8

080192a8 <L_shift>:
 80192a8:	f1c2 0208 	rsb	r2, r2, #8
 80192ac:	0092      	lsls	r2, r2, #2
 80192ae:	b570      	push	{r4, r5, r6, lr}
 80192b0:	f1c2 0620 	rsb	r6, r2, #32
 80192b4:	6843      	ldr	r3, [r0, #4]
 80192b6:	6804      	ldr	r4, [r0, #0]
 80192b8:	fa03 f506 	lsl.w	r5, r3, r6
 80192bc:	432c      	orrs	r4, r5
 80192be:	40d3      	lsrs	r3, r2
 80192c0:	6004      	str	r4, [r0, #0]
 80192c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80192c6:	4288      	cmp	r0, r1
 80192c8:	d3f4      	bcc.n	80192b4 <L_shift+0xc>
 80192ca:	bd70      	pop	{r4, r5, r6, pc}

080192cc <__match>:
 80192cc:	b530      	push	{r4, r5, lr}
 80192ce:	6803      	ldr	r3, [r0, #0]
 80192d0:	3301      	adds	r3, #1
 80192d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80192d6:	b914      	cbnz	r4, 80192de <__match+0x12>
 80192d8:	6003      	str	r3, [r0, #0]
 80192da:	2001      	movs	r0, #1
 80192dc:	bd30      	pop	{r4, r5, pc}
 80192de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80192e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80192e6:	2d19      	cmp	r5, #25
 80192e8:	bf98      	it	ls
 80192ea:	3220      	addls	r2, #32
 80192ec:	42a2      	cmp	r2, r4
 80192ee:	d0f0      	beq.n	80192d2 <__match+0x6>
 80192f0:	2000      	movs	r0, #0
 80192f2:	e7f3      	b.n	80192dc <__match+0x10>

080192f4 <__hexnan>:
 80192f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192f8:	680b      	ldr	r3, [r1, #0]
 80192fa:	115e      	asrs	r6, r3, #5
 80192fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019300:	f013 031f 	ands.w	r3, r3, #31
 8019304:	b087      	sub	sp, #28
 8019306:	bf18      	it	ne
 8019308:	3604      	addne	r6, #4
 801930a:	2500      	movs	r5, #0
 801930c:	1f37      	subs	r7, r6, #4
 801930e:	4690      	mov	r8, r2
 8019310:	6802      	ldr	r2, [r0, #0]
 8019312:	9301      	str	r3, [sp, #4]
 8019314:	4682      	mov	sl, r0
 8019316:	f846 5c04 	str.w	r5, [r6, #-4]
 801931a:	46b9      	mov	r9, r7
 801931c:	463c      	mov	r4, r7
 801931e:	9502      	str	r5, [sp, #8]
 8019320:	46ab      	mov	fp, r5
 8019322:	7851      	ldrb	r1, [r2, #1]
 8019324:	1c53      	adds	r3, r2, #1
 8019326:	9303      	str	r3, [sp, #12]
 8019328:	b341      	cbz	r1, 801937c <__hexnan+0x88>
 801932a:	4608      	mov	r0, r1
 801932c:	9205      	str	r2, [sp, #20]
 801932e:	9104      	str	r1, [sp, #16]
 8019330:	f7ff fd5e 	bl	8018df0 <__hexdig_fun>
 8019334:	2800      	cmp	r0, #0
 8019336:	d14f      	bne.n	80193d8 <__hexnan+0xe4>
 8019338:	9904      	ldr	r1, [sp, #16]
 801933a:	9a05      	ldr	r2, [sp, #20]
 801933c:	2920      	cmp	r1, #32
 801933e:	d818      	bhi.n	8019372 <__hexnan+0x7e>
 8019340:	9b02      	ldr	r3, [sp, #8]
 8019342:	459b      	cmp	fp, r3
 8019344:	dd13      	ble.n	801936e <__hexnan+0x7a>
 8019346:	454c      	cmp	r4, r9
 8019348:	d206      	bcs.n	8019358 <__hexnan+0x64>
 801934a:	2d07      	cmp	r5, #7
 801934c:	dc04      	bgt.n	8019358 <__hexnan+0x64>
 801934e:	462a      	mov	r2, r5
 8019350:	4649      	mov	r1, r9
 8019352:	4620      	mov	r0, r4
 8019354:	f7ff ffa8 	bl	80192a8 <L_shift>
 8019358:	4544      	cmp	r4, r8
 801935a:	d950      	bls.n	80193fe <__hexnan+0x10a>
 801935c:	2300      	movs	r3, #0
 801935e:	f1a4 0904 	sub.w	r9, r4, #4
 8019362:	f844 3c04 	str.w	r3, [r4, #-4]
 8019366:	f8cd b008 	str.w	fp, [sp, #8]
 801936a:	464c      	mov	r4, r9
 801936c:	461d      	mov	r5, r3
 801936e:	9a03      	ldr	r2, [sp, #12]
 8019370:	e7d7      	b.n	8019322 <__hexnan+0x2e>
 8019372:	2929      	cmp	r1, #41	; 0x29
 8019374:	d156      	bne.n	8019424 <__hexnan+0x130>
 8019376:	3202      	adds	r2, #2
 8019378:	f8ca 2000 	str.w	r2, [sl]
 801937c:	f1bb 0f00 	cmp.w	fp, #0
 8019380:	d050      	beq.n	8019424 <__hexnan+0x130>
 8019382:	454c      	cmp	r4, r9
 8019384:	d206      	bcs.n	8019394 <__hexnan+0xa0>
 8019386:	2d07      	cmp	r5, #7
 8019388:	dc04      	bgt.n	8019394 <__hexnan+0xa0>
 801938a:	462a      	mov	r2, r5
 801938c:	4649      	mov	r1, r9
 801938e:	4620      	mov	r0, r4
 8019390:	f7ff ff8a 	bl	80192a8 <L_shift>
 8019394:	4544      	cmp	r4, r8
 8019396:	d934      	bls.n	8019402 <__hexnan+0x10e>
 8019398:	f1a8 0204 	sub.w	r2, r8, #4
 801939c:	4623      	mov	r3, r4
 801939e:	f853 1b04 	ldr.w	r1, [r3], #4
 80193a2:	f842 1f04 	str.w	r1, [r2, #4]!
 80193a6:	429f      	cmp	r7, r3
 80193a8:	d2f9      	bcs.n	801939e <__hexnan+0xaa>
 80193aa:	1b3b      	subs	r3, r7, r4
 80193ac:	f023 0303 	bic.w	r3, r3, #3
 80193b0:	3304      	adds	r3, #4
 80193b2:	3401      	adds	r4, #1
 80193b4:	3e03      	subs	r6, #3
 80193b6:	42b4      	cmp	r4, r6
 80193b8:	bf88      	it	hi
 80193ba:	2304      	movhi	r3, #4
 80193bc:	4443      	add	r3, r8
 80193be:	2200      	movs	r2, #0
 80193c0:	f843 2b04 	str.w	r2, [r3], #4
 80193c4:	429f      	cmp	r7, r3
 80193c6:	d2fb      	bcs.n	80193c0 <__hexnan+0xcc>
 80193c8:	683b      	ldr	r3, [r7, #0]
 80193ca:	b91b      	cbnz	r3, 80193d4 <__hexnan+0xe0>
 80193cc:	4547      	cmp	r7, r8
 80193ce:	d127      	bne.n	8019420 <__hexnan+0x12c>
 80193d0:	2301      	movs	r3, #1
 80193d2:	603b      	str	r3, [r7, #0]
 80193d4:	2005      	movs	r0, #5
 80193d6:	e026      	b.n	8019426 <__hexnan+0x132>
 80193d8:	3501      	adds	r5, #1
 80193da:	2d08      	cmp	r5, #8
 80193dc:	f10b 0b01 	add.w	fp, fp, #1
 80193e0:	dd06      	ble.n	80193f0 <__hexnan+0xfc>
 80193e2:	4544      	cmp	r4, r8
 80193e4:	d9c3      	bls.n	801936e <__hexnan+0x7a>
 80193e6:	2300      	movs	r3, #0
 80193e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80193ec:	2501      	movs	r5, #1
 80193ee:	3c04      	subs	r4, #4
 80193f0:	6822      	ldr	r2, [r4, #0]
 80193f2:	f000 000f 	and.w	r0, r0, #15
 80193f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80193fa:	6022      	str	r2, [r4, #0]
 80193fc:	e7b7      	b.n	801936e <__hexnan+0x7a>
 80193fe:	2508      	movs	r5, #8
 8019400:	e7b5      	b.n	801936e <__hexnan+0x7a>
 8019402:	9b01      	ldr	r3, [sp, #4]
 8019404:	2b00      	cmp	r3, #0
 8019406:	d0df      	beq.n	80193c8 <__hexnan+0xd4>
 8019408:	f04f 32ff 	mov.w	r2, #4294967295
 801940c:	f1c3 0320 	rsb	r3, r3, #32
 8019410:	fa22 f303 	lsr.w	r3, r2, r3
 8019414:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019418:	401a      	ands	r2, r3
 801941a:	f846 2c04 	str.w	r2, [r6, #-4]
 801941e:	e7d3      	b.n	80193c8 <__hexnan+0xd4>
 8019420:	3f04      	subs	r7, #4
 8019422:	e7d1      	b.n	80193c8 <__hexnan+0xd4>
 8019424:	2004      	movs	r0, #4
 8019426:	b007      	add	sp, #28
 8019428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801942c <_localeconv_r>:
 801942c:	4800      	ldr	r0, [pc, #0]	; (8019430 <_localeconv_r+0x4>)
 801942e:	4770      	bx	lr
 8019430:	200001fc 	.word	0x200001fc

08019434 <malloc>:
 8019434:	4b02      	ldr	r3, [pc, #8]	; (8019440 <malloc+0xc>)
 8019436:	4601      	mov	r1, r0
 8019438:	6818      	ldr	r0, [r3, #0]
 801943a:	f000 bd59 	b.w	8019ef0 <_malloc_r>
 801943e:	bf00      	nop
 8019440:	200000a4 	.word	0x200000a4

08019444 <__ascii_mbtowc>:
 8019444:	b082      	sub	sp, #8
 8019446:	b901      	cbnz	r1, 801944a <__ascii_mbtowc+0x6>
 8019448:	a901      	add	r1, sp, #4
 801944a:	b142      	cbz	r2, 801945e <__ascii_mbtowc+0x1a>
 801944c:	b14b      	cbz	r3, 8019462 <__ascii_mbtowc+0x1e>
 801944e:	7813      	ldrb	r3, [r2, #0]
 8019450:	600b      	str	r3, [r1, #0]
 8019452:	7812      	ldrb	r2, [r2, #0]
 8019454:	1e10      	subs	r0, r2, #0
 8019456:	bf18      	it	ne
 8019458:	2001      	movne	r0, #1
 801945a:	b002      	add	sp, #8
 801945c:	4770      	bx	lr
 801945e:	4610      	mov	r0, r2
 8019460:	e7fb      	b.n	801945a <__ascii_mbtowc+0x16>
 8019462:	f06f 0001 	mvn.w	r0, #1
 8019466:	e7f8      	b.n	801945a <__ascii_mbtowc+0x16>

08019468 <_Balloc>:
 8019468:	b570      	push	{r4, r5, r6, lr}
 801946a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801946c:	4604      	mov	r4, r0
 801946e:	460d      	mov	r5, r1
 8019470:	b976      	cbnz	r6, 8019490 <_Balloc+0x28>
 8019472:	2010      	movs	r0, #16
 8019474:	f7ff ffde 	bl	8019434 <malloc>
 8019478:	4602      	mov	r2, r0
 801947a:	6260      	str	r0, [r4, #36]	; 0x24
 801947c:	b920      	cbnz	r0, 8019488 <_Balloc+0x20>
 801947e:	4b18      	ldr	r3, [pc, #96]	; (80194e0 <_Balloc+0x78>)
 8019480:	4818      	ldr	r0, [pc, #96]	; (80194e4 <_Balloc+0x7c>)
 8019482:	2166      	movs	r1, #102	; 0x66
 8019484:	f000 ff3e 	bl	801a304 <__assert_func>
 8019488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801948c:	6006      	str	r6, [r0, #0]
 801948e:	60c6      	str	r6, [r0, #12]
 8019490:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019492:	68f3      	ldr	r3, [r6, #12]
 8019494:	b183      	cbz	r3, 80194b8 <_Balloc+0x50>
 8019496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019498:	68db      	ldr	r3, [r3, #12]
 801949a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801949e:	b9b8      	cbnz	r0, 80194d0 <_Balloc+0x68>
 80194a0:	2101      	movs	r1, #1
 80194a2:	fa01 f605 	lsl.w	r6, r1, r5
 80194a6:	1d72      	adds	r2, r6, #5
 80194a8:	0092      	lsls	r2, r2, #2
 80194aa:	4620      	mov	r0, r4
 80194ac:	f000 fc9d 	bl	8019dea <_calloc_r>
 80194b0:	b160      	cbz	r0, 80194cc <_Balloc+0x64>
 80194b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80194b6:	e00e      	b.n	80194d6 <_Balloc+0x6e>
 80194b8:	2221      	movs	r2, #33	; 0x21
 80194ba:	2104      	movs	r1, #4
 80194bc:	4620      	mov	r0, r4
 80194be:	f000 fc94 	bl	8019dea <_calloc_r>
 80194c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80194c4:	60f0      	str	r0, [r6, #12]
 80194c6:	68db      	ldr	r3, [r3, #12]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d1e4      	bne.n	8019496 <_Balloc+0x2e>
 80194cc:	2000      	movs	r0, #0
 80194ce:	bd70      	pop	{r4, r5, r6, pc}
 80194d0:	6802      	ldr	r2, [r0, #0]
 80194d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80194d6:	2300      	movs	r3, #0
 80194d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80194dc:	e7f7      	b.n	80194ce <_Balloc+0x66>
 80194de:	bf00      	nop
 80194e0:	0801cb76 	.word	0x0801cb76
 80194e4:	0801cc74 	.word	0x0801cc74

080194e8 <_Bfree>:
 80194e8:	b570      	push	{r4, r5, r6, lr}
 80194ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80194ec:	4605      	mov	r5, r0
 80194ee:	460c      	mov	r4, r1
 80194f0:	b976      	cbnz	r6, 8019510 <_Bfree+0x28>
 80194f2:	2010      	movs	r0, #16
 80194f4:	f7ff ff9e 	bl	8019434 <malloc>
 80194f8:	4602      	mov	r2, r0
 80194fa:	6268      	str	r0, [r5, #36]	; 0x24
 80194fc:	b920      	cbnz	r0, 8019508 <_Bfree+0x20>
 80194fe:	4b09      	ldr	r3, [pc, #36]	; (8019524 <_Bfree+0x3c>)
 8019500:	4809      	ldr	r0, [pc, #36]	; (8019528 <_Bfree+0x40>)
 8019502:	218a      	movs	r1, #138	; 0x8a
 8019504:	f000 fefe 	bl	801a304 <__assert_func>
 8019508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801950c:	6006      	str	r6, [r0, #0]
 801950e:	60c6      	str	r6, [r0, #12]
 8019510:	b13c      	cbz	r4, 8019522 <_Bfree+0x3a>
 8019512:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019514:	6862      	ldr	r2, [r4, #4]
 8019516:	68db      	ldr	r3, [r3, #12]
 8019518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801951c:	6021      	str	r1, [r4, #0]
 801951e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019522:	bd70      	pop	{r4, r5, r6, pc}
 8019524:	0801cb76 	.word	0x0801cb76
 8019528:	0801cc74 	.word	0x0801cc74

0801952c <__multadd>:
 801952c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019530:	690d      	ldr	r5, [r1, #16]
 8019532:	4607      	mov	r7, r0
 8019534:	460c      	mov	r4, r1
 8019536:	461e      	mov	r6, r3
 8019538:	f101 0c14 	add.w	ip, r1, #20
 801953c:	2000      	movs	r0, #0
 801953e:	f8dc 3000 	ldr.w	r3, [ip]
 8019542:	b299      	uxth	r1, r3
 8019544:	fb02 6101 	mla	r1, r2, r1, r6
 8019548:	0c1e      	lsrs	r6, r3, #16
 801954a:	0c0b      	lsrs	r3, r1, #16
 801954c:	fb02 3306 	mla	r3, r2, r6, r3
 8019550:	b289      	uxth	r1, r1
 8019552:	3001      	adds	r0, #1
 8019554:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019558:	4285      	cmp	r5, r0
 801955a:	f84c 1b04 	str.w	r1, [ip], #4
 801955e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019562:	dcec      	bgt.n	801953e <__multadd+0x12>
 8019564:	b30e      	cbz	r6, 80195aa <__multadd+0x7e>
 8019566:	68a3      	ldr	r3, [r4, #8]
 8019568:	42ab      	cmp	r3, r5
 801956a:	dc19      	bgt.n	80195a0 <__multadd+0x74>
 801956c:	6861      	ldr	r1, [r4, #4]
 801956e:	4638      	mov	r0, r7
 8019570:	3101      	adds	r1, #1
 8019572:	f7ff ff79 	bl	8019468 <_Balloc>
 8019576:	4680      	mov	r8, r0
 8019578:	b928      	cbnz	r0, 8019586 <__multadd+0x5a>
 801957a:	4602      	mov	r2, r0
 801957c:	4b0c      	ldr	r3, [pc, #48]	; (80195b0 <__multadd+0x84>)
 801957e:	480d      	ldr	r0, [pc, #52]	; (80195b4 <__multadd+0x88>)
 8019580:	21b5      	movs	r1, #181	; 0xb5
 8019582:	f000 febf 	bl	801a304 <__assert_func>
 8019586:	6922      	ldr	r2, [r4, #16]
 8019588:	3202      	adds	r2, #2
 801958a:	f104 010c 	add.w	r1, r4, #12
 801958e:	0092      	lsls	r2, r2, #2
 8019590:	300c      	adds	r0, #12
 8019592:	f7fc ffff 	bl	8016594 <memcpy>
 8019596:	4621      	mov	r1, r4
 8019598:	4638      	mov	r0, r7
 801959a:	f7ff ffa5 	bl	80194e8 <_Bfree>
 801959e:	4644      	mov	r4, r8
 80195a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80195a4:	3501      	adds	r5, #1
 80195a6:	615e      	str	r6, [r3, #20]
 80195a8:	6125      	str	r5, [r4, #16]
 80195aa:	4620      	mov	r0, r4
 80195ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195b0:	0801cbe8 	.word	0x0801cbe8
 80195b4:	0801cc74 	.word	0x0801cc74

080195b8 <__s2b>:
 80195b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195bc:	460c      	mov	r4, r1
 80195be:	4615      	mov	r5, r2
 80195c0:	461f      	mov	r7, r3
 80195c2:	2209      	movs	r2, #9
 80195c4:	3308      	adds	r3, #8
 80195c6:	4606      	mov	r6, r0
 80195c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80195cc:	2100      	movs	r1, #0
 80195ce:	2201      	movs	r2, #1
 80195d0:	429a      	cmp	r2, r3
 80195d2:	db09      	blt.n	80195e8 <__s2b+0x30>
 80195d4:	4630      	mov	r0, r6
 80195d6:	f7ff ff47 	bl	8019468 <_Balloc>
 80195da:	b940      	cbnz	r0, 80195ee <__s2b+0x36>
 80195dc:	4602      	mov	r2, r0
 80195de:	4b19      	ldr	r3, [pc, #100]	; (8019644 <__s2b+0x8c>)
 80195e0:	4819      	ldr	r0, [pc, #100]	; (8019648 <__s2b+0x90>)
 80195e2:	21ce      	movs	r1, #206	; 0xce
 80195e4:	f000 fe8e 	bl	801a304 <__assert_func>
 80195e8:	0052      	lsls	r2, r2, #1
 80195ea:	3101      	adds	r1, #1
 80195ec:	e7f0      	b.n	80195d0 <__s2b+0x18>
 80195ee:	9b08      	ldr	r3, [sp, #32]
 80195f0:	6143      	str	r3, [r0, #20]
 80195f2:	2d09      	cmp	r5, #9
 80195f4:	f04f 0301 	mov.w	r3, #1
 80195f8:	6103      	str	r3, [r0, #16]
 80195fa:	dd16      	ble.n	801962a <__s2b+0x72>
 80195fc:	f104 0909 	add.w	r9, r4, #9
 8019600:	46c8      	mov	r8, r9
 8019602:	442c      	add	r4, r5
 8019604:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019608:	4601      	mov	r1, r0
 801960a:	3b30      	subs	r3, #48	; 0x30
 801960c:	220a      	movs	r2, #10
 801960e:	4630      	mov	r0, r6
 8019610:	f7ff ff8c 	bl	801952c <__multadd>
 8019614:	45a0      	cmp	r8, r4
 8019616:	d1f5      	bne.n	8019604 <__s2b+0x4c>
 8019618:	f1a5 0408 	sub.w	r4, r5, #8
 801961c:	444c      	add	r4, r9
 801961e:	1b2d      	subs	r5, r5, r4
 8019620:	1963      	adds	r3, r4, r5
 8019622:	42bb      	cmp	r3, r7
 8019624:	db04      	blt.n	8019630 <__s2b+0x78>
 8019626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801962a:	340a      	adds	r4, #10
 801962c:	2509      	movs	r5, #9
 801962e:	e7f6      	b.n	801961e <__s2b+0x66>
 8019630:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019634:	4601      	mov	r1, r0
 8019636:	3b30      	subs	r3, #48	; 0x30
 8019638:	220a      	movs	r2, #10
 801963a:	4630      	mov	r0, r6
 801963c:	f7ff ff76 	bl	801952c <__multadd>
 8019640:	e7ee      	b.n	8019620 <__s2b+0x68>
 8019642:	bf00      	nop
 8019644:	0801cbe8 	.word	0x0801cbe8
 8019648:	0801cc74 	.word	0x0801cc74

0801964c <__hi0bits>:
 801964c:	0c03      	lsrs	r3, r0, #16
 801964e:	041b      	lsls	r3, r3, #16
 8019650:	b9d3      	cbnz	r3, 8019688 <__hi0bits+0x3c>
 8019652:	0400      	lsls	r0, r0, #16
 8019654:	2310      	movs	r3, #16
 8019656:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801965a:	bf04      	itt	eq
 801965c:	0200      	lsleq	r0, r0, #8
 801965e:	3308      	addeq	r3, #8
 8019660:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019664:	bf04      	itt	eq
 8019666:	0100      	lsleq	r0, r0, #4
 8019668:	3304      	addeq	r3, #4
 801966a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801966e:	bf04      	itt	eq
 8019670:	0080      	lsleq	r0, r0, #2
 8019672:	3302      	addeq	r3, #2
 8019674:	2800      	cmp	r0, #0
 8019676:	db05      	blt.n	8019684 <__hi0bits+0x38>
 8019678:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801967c:	f103 0301 	add.w	r3, r3, #1
 8019680:	bf08      	it	eq
 8019682:	2320      	moveq	r3, #32
 8019684:	4618      	mov	r0, r3
 8019686:	4770      	bx	lr
 8019688:	2300      	movs	r3, #0
 801968a:	e7e4      	b.n	8019656 <__hi0bits+0xa>

0801968c <__lo0bits>:
 801968c:	6803      	ldr	r3, [r0, #0]
 801968e:	f013 0207 	ands.w	r2, r3, #7
 8019692:	4601      	mov	r1, r0
 8019694:	d00b      	beq.n	80196ae <__lo0bits+0x22>
 8019696:	07da      	lsls	r2, r3, #31
 8019698:	d423      	bmi.n	80196e2 <__lo0bits+0x56>
 801969a:	0798      	lsls	r0, r3, #30
 801969c:	bf49      	itett	mi
 801969e:	085b      	lsrmi	r3, r3, #1
 80196a0:	089b      	lsrpl	r3, r3, #2
 80196a2:	2001      	movmi	r0, #1
 80196a4:	600b      	strmi	r3, [r1, #0]
 80196a6:	bf5c      	itt	pl
 80196a8:	600b      	strpl	r3, [r1, #0]
 80196aa:	2002      	movpl	r0, #2
 80196ac:	4770      	bx	lr
 80196ae:	b298      	uxth	r0, r3
 80196b0:	b9a8      	cbnz	r0, 80196de <__lo0bits+0x52>
 80196b2:	0c1b      	lsrs	r3, r3, #16
 80196b4:	2010      	movs	r0, #16
 80196b6:	b2da      	uxtb	r2, r3
 80196b8:	b90a      	cbnz	r2, 80196be <__lo0bits+0x32>
 80196ba:	3008      	adds	r0, #8
 80196bc:	0a1b      	lsrs	r3, r3, #8
 80196be:	071a      	lsls	r2, r3, #28
 80196c0:	bf04      	itt	eq
 80196c2:	091b      	lsreq	r3, r3, #4
 80196c4:	3004      	addeq	r0, #4
 80196c6:	079a      	lsls	r2, r3, #30
 80196c8:	bf04      	itt	eq
 80196ca:	089b      	lsreq	r3, r3, #2
 80196cc:	3002      	addeq	r0, #2
 80196ce:	07da      	lsls	r2, r3, #31
 80196d0:	d403      	bmi.n	80196da <__lo0bits+0x4e>
 80196d2:	085b      	lsrs	r3, r3, #1
 80196d4:	f100 0001 	add.w	r0, r0, #1
 80196d8:	d005      	beq.n	80196e6 <__lo0bits+0x5a>
 80196da:	600b      	str	r3, [r1, #0]
 80196dc:	4770      	bx	lr
 80196de:	4610      	mov	r0, r2
 80196e0:	e7e9      	b.n	80196b6 <__lo0bits+0x2a>
 80196e2:	2000      	movs	r0, #0
 80196e4:	4770      	bx	lr
 80196e6:	2020      	movs	r0, #32
 80196e8:	4770      	bx	lr
	...

080196ec <__i2b>:
 80196ec:	b510      	push	{r4, lr}
 80196ee:	460c      	mov	r4, r1
 80196f0:	2101      	movs	r1, #1
 80196f2:	f7ff feb9 	bl	8019468 <_Balloc>
 80196f6:	4602      	mov	r2, r0
 80196f8:	b928      	cbnz	r0, 8019706 <__i2b+0x1a>
 80196fa:	4b05      	ldr	r3, [pc, #20]	; (8019710 <__i2b+0x24>)
 80196fc:	4805      	ldr	r0, [pc, #20]	; (8019714 <__i2b+0x28>)
 80196fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019702:	f000 fdff 	bl	801a304 <__assert_func>
 8019706:	2301      	movs	r3, #1
 8019708:	6144      	str	r4, [r0, #20]
 801970a:	6103      	str	r3, [r0, #16]
 801970c:	bd10      	pop	{r4, pc}
 801970e:	bf00      	nop
 8019710:	0801cbe8 	.word	0x0801cbe8
 8019714:	0801cc74 	.word	0x0801cc74

08019718 <__multiply>:
 8019718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801971c:	4691      	mov	r9, r2
 801971e:	690a      	ldr	r2, [r1, #16]
 8019720:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019724:	429a      	cmp	r2, r3
 8019726:	bfb8      	it	lt
 8019728:	460b      	movlt	r3, r1
 801972a:	460c      	mov	r4, r1
 801972c:	bfbc      	itt	lt
 801972e:	464c      	movlt	r4, r9
 8019730:	4699      	movlt	r9, r3
 8019732:	6927      	ldr	r7, [r4, #16]
 8019734:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019738:	68a3      	ldr	r3, [r4, #8]
 801973a:	6861      	ldr	r1, [r4, #4]
 801973c:	eb07 060a 	add.w	r6, r7, sl
 8019740:	42b3      	cmp	r3, r6
 8019742:	b085      	sub	sp, #20
 8019744:	bfb8      	it	lt
 8019746:	3101      	addlt	r1, #1
 8019748:	f7ff fe8e 	bl	8019468 <_Balloc>
 801974c:	b930      	cbnz	r0, 801975c <__multiply+0x44>
 801974e:	4602      	mov	r2, r0
 8019750:	4b44      	ldr	r3, [pc, #272]	; (8019864 <__multiply+0x14c>)
 8019752:	4845      	ldr	r0, [pc, #276]	; (8019868 <__multiply+0x150>)
 8019754:	f240 115d 	movw	r1, #349	; 0x15d
 8019758:	f000 fdd4 	bl	801a304 <__assert_func>
 801975c:	f100 0514 	add.w	r5, r0, #20
 8019760:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019764:	462b      	mov	r3, r5
 8019766:	2200      	movs	r2, #0
 8019768:	4543      	cmp	r3, r8
 801976a:	d321      	bcc.n	80197b0 <__multiply+0x98>
 801976c:	f104 0314 	add.w	r3, r4, #20
 8019770:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019774:	f109 0314 	add.w	r3, r9, #20
 8019778:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801977c:	9202      	str	r2, [sp, #8]
 801977e:	1b3a      	subs	r2, r7, r4
 8019780:	3a15      	subs	r2, #21
 8019782:	f022 0203 	bic.w	r2, r2, #3
 8019786:	3204      	adds	r2, #4
 8019788:	f104 0115 	add.w	r1, r4, #21
 801978c:	428f      	cmp	r7, r1
 801978e:	bf38      	it	cc
 8019790:	2204      	movcc	r2, #4
 8019792:	9201      	str	r2, [sp, #4]
 8019794:	9a02      	ldr	r2, [sp, #8]
 8019796:	9303      	str	r3, [sp, #12]
 8019798:	429a      	cmp	r2, r3
 801979a:	d80c      	bhi.n	80197b6 <__multiply+0x9e>
 801979c:	2e00      	cmp	r6, #0
 801979e:	dd03      	ble.n	80197a8 <__multiply+0x90>
 80197a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d05a      	beq.n	801985e <__multiply+0x146>
 80197a8:	6106      	str	r6, [r0, #16]
 80197aa:	b005      	add	sp, #20
 80197ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197b0:	f843 2b04 	str.w	r2, [r3], #4
 80197b4:	e7d8      	b.n	8019768 <__multiply+0x50>
 80197b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80197ba:	f1ba 0f00 	cmp.w	sl, #0
 80197be:	d024      	beq.n	801980a <__multiply+0xf2>
 80197c0:	f104 0e14 	add.w	lr, r4, #20
 80197c4:	46a9      	mov	r9, r5
 80197c6:	f04f 0c00 	mov.w	ip, #0
 80197ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80197ce:	f8d9 1000 	ldr.w	r1, [r9]
 80197d2:	fa1f fb82 	uxth.w	fp, r2
 80197d6:	b289      	uxth	r1, r1
 80197d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80197dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80197e0:	f8d9 2000 	ldr.w	r2, [r9]
 80197e4:	4461      	add	r1, ip
 80197e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80197ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80197ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80197f2:	b289      	uxth	r1, r1
 80197f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80197f8:	4577      	cmp	r7, lr
 80197fa:	f849 1b04 	str.w	r1, [r9], #4
 80197fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019802:	d8e2      	bhi.n	80197ca <__multiply+0xb2>
 8019804:	9a01      	ldr	r2, [sp, #4]
 8019806:	f845 c002 	str.w	ip, [r5, r2]
 801980a:	9a03      	ldr	r2, [sp, #12]
 801980c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019810:	3304      	adds	r3, #4
 8019812:	f1b9 0f00 	cmp.w	r9, #0
 8019816:	d020      	beq.n	801985a <__multiply+0x142>
 8019818:	6829      	ldr	r1, [r5, #0]
 801981a:	f104 0c14 	add.w	ip, r4, #20
 801981e:	46ae      	mov	lr, r5
 8019820:	f04f 0a00 	mov.w	sl, #0
 8019824:	f8bc b000 	ldrh.w	fp, [ip]
 8019828:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801982c:	fb09 220b 	mla	r2, r9, fp, r2
 8019830:	4492      	add	sl, r2
 8019832:	b289      	uxth	r1, r1
 8019834:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8019838:	f84e 1b04 	str.w	r1, [lr], #4
 801983c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8019840:	f8be 1000 	ldrh.w	r1, [lr]
 8019844:	0c12      	lsrs	r2, r2, #16
 8019846:	fb09 1102 	mla	r1, r9, r2, r1
 801984a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801984e:	4567      	cmp	r7, ip
 8019850:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019854:	d8e6      	bhi.n	8019824 <__multiply+0x10c>
 8019856:	9a01      	ldr	r2, [sp, #4]
 8019858:	50a9      	str	r1, [r5, r2]
 801985a:	3504      	adds	r5, #4
 801985c:	e79a      	b.n	8019794 <__multiply+0x7c>
 801985e:	3e01      	subs	r6, #1
 8019860:	e79c      	b.n	801979c <__multiply+0x84>
 8019862:	bf00      	nop
 8019864:	0801cbe8 	.word	0x0801cbe8
 8019868:	0801cc74 	.word	0x0801cc74

0801986c <__pow5mult>:
 801986c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019870:	4615      	mov	r5, r2
 8019872:	f012 0203 	ands.w	r2, r2, #3
 8019876:	4606      	mov	r6, r0
 8019878:	460f      	mov	r7, r1
 801987a:	d007      	beq.n	801988c <__pow5mult+0x20>
 801987c:	4c25      	ldr	r4, [pc, #148]	; (8019914 <__pow5mult+0xa8>)
 801987e:	3a01      	subs	r2, #1
 8019880:	2300      	movs	r3, #0
 8019882:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019886:	f7ff fe51 	bl	801952c <__multadd>
 801988a:	4607      	mov	r7, r0
 801988c:	10ad      	asrs	r5, r5, #2
 801988e:	d03d      	beq.n	801990c <__pow5mult+0xa0>
 8019890:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019892:	b97c      	cbnz	r4, 80198b4 <__pow5mult+0x48>
 8019894:	2010      	movs	r0, #16
 8019896:	f7ff fdcd 	bl	8019434 <malloc>
 801989a:	4602      	mov	r2, r0
 801989c:	6270      	str	r0, [r6, #36]	; 0x24
 801989e:	b928      	cbnz	r0, 80198ac <__pow5mult+0x40>
 80198a0:	4b1d      	ldr	r3, [pc, #116]	; (8019918 <__pow5mult+0xac>)
 80198a2:	481e      	ldr	r0, [pc, #120]	; (801991c <__pow5mult+0xb0>)
 80198a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80198a8:	f000 fd2c 	bl	801a304 <__assert_func>
 80198ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80198b0:	6004      	str	r4, [r0, #0]
 80198b2:	60c4      	str	r4, [r0, #12]
 80198b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80198b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80198bc:	b94c      	cbnz	r4, 80198d2 <__pow5mult+0x66>
 80198be:	f240 2171 	movw	r1, #625	; 0x271
 80198c2:	4630      	mov	r0, r6
 80198c4:	f7ff ff12 	bl	80196ec <__i2b>
 80198c8:	2300      	movs	r3, #0
 80198ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80198ce:	4604      	mov	r4, r0
 80198d0:	6003      	str	r3, [r0, #0]
 80198d2:	f04f 0900 	mov.w	r9, #0
 80198d6:	07eb      	lsls	r3, r5, #31
 80198d8:	d50a      	bpl.n	80198f0 <__pow5mult+0x84>
 80198da:	4639      	mov	r1, r7
 80198dc:	4622      	mov	r2, r4
 80198de:	4630      	mov	r0, r6
 80198e0:	f7ff ff1a 	bl	8019718 <__multiply>
 80198e4:	4639      	mov	r1, r7
 80198e6:	4680      	mov	r8, r0
 80198e8:	4630      	mov	r0, r6
 80198ea:	f7ff fdfd 	bl	80194e8 <_Bfree>
 80198ee:	4647      	mov	r7, r8
 80198f0:	106d      	asrs	r5, r5, #1
 80198f2:	d00b      	beq.n	801990c <__pow5mult+0xa0>
 80198f4:	6820      	ldr	r0, [r4, #0]
 80198f6:	b938      	cbnz	r0, 8019908 <__pow5mult+0x9c>
 80198f8:	4622      	mov	r2, r4
 80198fa:	4621      	mov	r1, r4
 80198fc:	4630      	mov	r0, r6
 80198fe:	f7ff ff0b 	bl	8019718 <__multiply>
 8019902:	6020      	str	r0, [r4, #0]
 8019904:	f8c0 9000 	str.w	r9, [r0]
 8019908:	4604      	mov	r4, r0
 801990a:	e7e4      	b.n	80198d6 <__pow5mult+0x6a>
 801990c:	4638      	mov	r0, r7
 801990e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019912:	bf00      	nop
 8019914:	0801cdc0 	.word	0x0801cdc0
 8019918:	0801cb76 	.word	0x0801cb76
 801991c:	0801cc74 	.word	0x0801cc74

08019920 <__lshift>:
 8019920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019924:	460c      	mov	r4, r1
 8019926:	6849      	ldr	r1, [r1, #4]
 8019928:	6923      	ldr	r3, [r4, #16]
 801992a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801992e:	68a3      	ldr	r3, [r4, #8]
 8019930:	4607      	mov	r7, r0
 8019932:	4691      	mov	r9, r2
 8019934:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019938:	f108 0601 	add.w	r6, r8, #1
 801993c:	42b3      	cmp	r3, r6
 801993e:	db0b      	blt.n	8019958 <__lshift+0x38>
 8019940:	4638      	mov	r0, r7
 8019942:	f7ff fd91 	bl	8019468 <_Balloc>
 8019946:	4605      	mov	r5, r0
 8019948:	b948      	cbnz	r0, 801995e <__lshift+0x3e>
 801994a:	4602      	mov	r2, r0
 801994c:	4b2a      	ldr	r3, [pc, #168]	; (80199f8 <__lshift+0xd8>)
 801994e:	482b      	ldr	r0, [pc, #172]	; (80199fc <__lshift+0xdc>)
 8019950:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019954:	f000 fcd6 	bl	801a304 <__assert_func>
 8019958:	3101      	adds	r1, #1
 801995a:	005b      	lsls	r3, r3, #1
 801995c:	e7ee      	b.n	801993c <__lshift+0x1c>
 801995e:	2300      	movs	r3, #0
 8019960:	f100 0114 	add.w	r1, r0, #20
 8019964:	f100 0210 	add.w	r2, r0, #16
 8019968:	4618      	mov	r0, r3
 801996a:	4553      	cmp	r3, sl
 801996c:	db37      	blt.n	80199de <__lshift+0xbe>
 801996e:	6920      	ldr	r0, [r4, #16]
 8019970:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019974:	f104 0314 	add.w	r3, r4, #20
 8019978:	f019 091f 	ands.w	r9, r9, #31
 801997c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019980:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019984:	d02f      	beq.n	80199e6 <__lshift+0xc6>
 8019986:	f1c9 0e20 	rsb	lr, r9, #32
 801998a:	468a      	mov	sl, r1
 801998c:	f04f 0c00 	mov.w	ip, #0
 8019990:	681a      	ldr	r2, [r3, #0]
 8019992:	fa02 f209 	lsl.w	r2, r2, r9
 8019996:	ea42 020c 	orr.w	r2, r2, ip
 801999a:	f84a 2b04 	str.w	r2, [sl], #4
 801999e:	f853 2b04 	ldr.w	r2, [r3], #4
 80199a2:	4298      	cmp	r0, r3
 80199a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80199a8:	d8f2      	bhi.n	8019990 <__lshift+0x70>
 80199aa:	1b03      	subs	r3, r0, r4
 80199ac:	3b15      	subs	r3, #21
 80199ae:	f023 0303 	bic.w	r3, r3, #3
 80199b2:	3304      	adds	r3, #4
 80199b4:	f104 0215 	add.w	r2, r4, #21
 80199b8:	4290      	cmp	r0, r2
 80199ba:	bf38      	it	cc
 80199bc:	2304      	movcc	r3, #4
 80199be:	f841 c003 	str.w	ip, [r1, r3]
 80199c2:	f1bc 0f00 	cmp.w	ip, #0
 80199c6:	d001      	beq.n	80199cc <__lshift+0xac>
 80199c8:	f108 0602 	add.w	r6, r8, #2
 80199cc:	3e01      	subs	r6, #1
 80199ce:	4638      	mov	r0, r7
 80199d0:	612e      	str	r6, [r5, #16]
 80199d2:	4621      	mov	r1, r4
 80199d4:	f7ff fd88 	bl	80194e8 <_Bfree>
 80199d8:	4628      	mov	r0, r5
 80199da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199de:	f842 0f04 	str.w	r0, [r2, #4]!
 80199e2:	3301      	adds	r3, #1
 80199e4:	e7c1      	b.n	801996a <__lshift+0x4a>
 80199e6:	3904      	subs	r1, #4
 80199e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80199ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80199f0:	4298      	cmp	r0, r3
 80199f2:	d8f9      	bhi.n	80199e8 <__lshift+0xc8>
 80199f4:	e7ea      	b.n	80199cc <__lshift+0xac>
 80199f6:	bf00      	nop
 80199f8:	0801cbe8 	.word	0x0801cbe8
 80199fc:	0801cc74 	.word	0x0801cc74

08019a00 <__mcmp>:
 8019a00:	b530      	push	{r4, r5, lr}
 8019a02:	6902      	ldr	r2, [r0, #16]
 8019a04:	690c      	ldr	r4, [r1, #16]
 8019a06:	1b12      	subs	r2, r2, r4
 8019a08:	d10e      	bne.n	8019a28 <__mcmp+0x28>
 8019a0a:	f100 0314 	add.w	r3, r0, #20
 8019a0e:	3114      	adds	r1, #20
 8019a10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019a14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019a18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019a1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019a20:	42a5      	cmp	r5, r4
 8019a22:	d003      	beq.n	8019a2c <__mcmp+0x2c>
 8019a24:	d305      	bcc.n	8019a32 <__mcmp+0x32>
 8019a26:	2201      	movs	r2, #1
 8019a28:	4610      	mov	r0, r2
 8019a2a:	bd30      	pop	{r4, r5, pc}
 8019a2c:	4283      	cmp	r3, r0
 8019a2e:	d3f3      	bcc.n	8019a18 <__mcmp+0x18>
 8019a30:	e7fa      	b.n	8019a28 <__mcmp+0x28>
 8019a32:	f04f 32ff 	mov.w	r2, #4294967295
 8019a36:	e7f7      	b.n	8019a28 <__mcmp+0x28>

08019a38 <__mdiff>:
 8019a38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a3c:	460c      	mov	r4, r1
 8019a3e:	4606      	mov	r6, r0
 8019a40:	4611      	mov	r1, r2
 8019a42:	4620      	mov	r0, r4
 8019a44:	4690      	mov	r8, r2
 8019a46:	f7ff ffdb 	bl	8019a00 <__mcmp>
 8019a4a:	1e05      	subs	r5, r0, #0
 8019a4c:	d110      	bne.n	8019a70 <__mdiff+0x38>
 8019a4e:	4629      	mov	r1, r5
 8019a50:	4630      	mov	r0, r6
 8019a52:	f7ff fd09 	bl	8019468 <_Balloc>
 8019a56:	b930      	cbnz	r0, 8019a66 <__mdiff+0x2e>
 8019a58:	4b3a      	ldr	r3, [pc, #232]	; (8019b44 <__mdiff+0x10c>)
 8019a5a:	4602      	mov	r2, r0
 8019a5c:	f240 2132 	movw	r1, #562	; 0x232
 8019a60:	4839      	ldr	r0, [pc, #228]	; (8019b48 <__mdiff+0x110>)
 8019a62:	f000 fc4f 	bl	801a304 <__assert_func>
 8019a66:	2301      	movs	r3, #1
 8019a68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019a6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a70:	bfa4      	itt	ge
 8019a72:	4643      	movge	r3, r8
 8019a74:	46a0      	movge	r8, r4
 8019a76:	4630      	mov	r0, r6
 8019a78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019a7c:	bfa6      	itte	ge
 8019a7e:	461c      	movge	r4, r3
 8019a80:	2500      	movge	r5, #0
 8019a82:	2501      	movlt	r5, #1
 8019a84:	f7ff fcf0 	bl	8019468 <_Balloc>
 8019a88:	b920      	cbnz	r0, 8019a94 <__mdiff+0x5c>
 8019a8a:	4b2e      	ldr	r3, [pc, #184]	; (8019b44 <__mdiff+0x10c>)
 8019a8c:	4602      	mov	r2, r0
 8019a8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019a92:	e7e5      	b.n	8019a60 <__mdiff+0x28>
 8019a94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019a98:	6926      	ldr	r6, [r4, #16]
 8019a9a:	60c5      	str	r5, [r0, #12]
 8019a9c:	f104 0914 	add.w	r9, r4, #20
 8019aa0:	f108 0514 	add.w	r5, r8, #20
 8019aa4:	f100 0e14 	add.w	lr, r0, #20
 8019aa8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019aac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019ab0:	f108 0210 	add.w	r2, r8, #16
 8019ab4:	46f2      	mov	sl, lr
 8019ab6:	2100      	movs	r1, #0
 8019ab8:	f859 3b04 	ldr.w	r3, [r9], #4
 8019abc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019ac0:	fa1f f883 	uxth.w	r8, r3
 8019ac4:	fa11 f18b 	uxtah	r1, r1, fp
 8019ac8:	0c1b      	lsrs	r3, r3, #16
 8019aca:	eba1 0808 	sub.w	r8, r1, r8
 8019ace:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019ad2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019ad6:	fa1f f888 	uxth.w	r8, r8
 8019ada:	1419      	asrs	r1, r3, #16
 8019adc:	454e      	cmp	r6, r9
 8019ade:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019ae2:	f84a 3b04 	str.w	r3, [sl], #4
 8019ae6:	d8e7      	bhi.n	8019ab8 <__mdiff+0x80>
 8019ae8:	1b33      	subs	r3, r6, r4
 8019aea:	3b15      	subs	r3, #21
 8019aec:	f023 0303 	bic.w	r3, r3, #3
 8019af0:	3304      	adds	r3, #4
 8019af2:	3415      	adds	r4, #21
 8019af4:	42a6      	cmp	r6, r4
 8019af6:	bf38      	it	cc
 8019af8:	2304      	movcc	r3, #4
 8019afa:	441d      	add	r5, r3
 8019afc:	4473      	add	r3, lr
 8019afe:	469e      	mov	lr, r3
 8019b00:	462e      	mov	r6, r5
 8019b02:	4566      	cmp	r6, ip
 8019b04:	d30e      	bcc.n	8019b24 <__mdiff+0xec>
 8019b06:	f10c 0203 	add.w	r2, ip, #3
 8019b0a:	1b52      	subs	r2, r2, r5
 8019b0c:	f022 0203 	bic.w	r2, r2, #3
 8019b10:	3d03      	subs	r5, #3
 8019b12:	45ac      	cmp	ip, r5
 8019b14:	bf38      	it	cc
 8019b16:	2200      	movcc	r2, #0
 8019b18:	441a      	add	r2, r3
 8019b1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019b1e:	b17b      	cbz	r3, 8019b40 <__mdiff+0x108>
 8019b20:	6107      	str	r7, [r0, #16]
 8019b22:	e7a3      	b.n	8019a6c <__mdiff+0x34>
 8019b24:	f856 8b04 	ldr.w	r8, [r6], #4
 8019b28:	fa11 f288 	uxtah	r2, r1, r8
 8019b2c:	1414      	asrs	r4, r2, #16
 8019b2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019b32:	b292      	uxth	r2, r2
 8019b34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019b38:	f84e 2b04 	str.w	r2, [lr], #4
 8019b3c:	1421      	asrs	r1, r4, #16
 8019b3e:	e7e0      	b.n	8019b02 <__mdiff+0xca>
 8019b40:	3f01      	subs	r7, #1
 8019b42:	e7ea      	b.n	8019b1a <__mdiff+0xe2>
 8019b44:	0801cbe8 	.word	0x0801cbe8
 8019b48:	0801cc74 	.word	0x0801cc74

08019b4c <__ulp>:
 8019b4c:	b082      	sub	sp, #8
 8019b4e:	ed8d 0b00 	vstr	d0, [sp]
 8019b52:	9b01      	ldr	r3, [sp, #4]
 8019b54:	4912      	ldr	r1, [pc, #72]	; (8019ba0 <__ulp+0x54>)
 8019b56:	4019      	ands	r1, r3
 8019b58:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019b5c:	2900      	cmp	r1, #0
 8019b5e:	dd05      	ble.n	8019b6c <__ulp+0x20>
 8019b60:	2200      	movs	r2, #0
 8019b62:	460b      	mov	r3, r1
 8019b64:	ec43 2b10 	vmov	d0, r2, r3
 8019b68:	b002      	add	sp, #8
 8019b6a:	4770      	bx	lr
 8019b6c:	4249      	negs	r1, r1
 8019b6e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019b72:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019b76:	f04f 0200 	mov.w	r2, #0
 8019b7a:	f04f 0300 	mov.w	r3, #0
 8019b7e:	da04      	bge.n	8019b8a <__ulp+0x3e>
 8019b80:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019b84:	fa41 f300 	asr.w	r3, r1, r0
 8019b88:	e7ec      	b.n	8019b64 <__ulp+0x18>
 8019b8a:	f1a0 0114 	sub.w	r1, r0, #20
 8019b8e:	291e      	cmp	r1, #30
 8019b90:	bfda      	itte	le
 8019b92:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019b96:	fa20 f101 	lsrle.w	r1, r0, r1
 8019b9a:	2101      	movgt	r1, #1
 8019b9c:	460a      	mov	r2, r1
 8019b9e:	e7e1      	b.n	8019b64 <__ulp+0x18>
 8019ba0:	7ff00000 	.word	0x7ff00000

08019ba4 <__b2d>:
 8019ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ba6:	6905      	ldr	r5, [r0, #16]
 8019ba8:	f100 0714 	add.w	r7, r0, #20
 8019bac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019bb0:	1f2e      	subs	r6, r5, #4
 8019bb2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019bb6:	4620      	mov	r0, r4
 8019bb8:	f7ff fd48 	bl	801964c <__hi0bits>
 8019bbc:	f1c0 0320 	rsb	r3, r0, #32
 8019bc0:	280a      	cmp	r0, #10
 8019bc2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019c40 <__b2d+0x9c>
 8019bc6:	600b      	str	r3, [r1, #0]
 8019bc8:	dc14      	bgt.n	8019bf4 <__b2d+0x50>
 8019bca:	f1c0 0e0b 	rsb	lr, r0, #11
 8019bce:	fa24 f10e 	lsr.w	r1, r4, lr
 8019bd2:	42b7      	cmp	r7, r6
 8019bd4:	ea41 030c 	orr.w	r3, r1, ip
 8019bd8:	bf34      	ite	cc
 8019bda:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019bde:	2100      	movcs	r1, #0
 8019be0:	3015      	adds	r0, #21
 8019be2:	fa04 f000 	lsl.w	r0, r4, r0
 8019be6:	fa21 f10e 	lsr.w	r1, r1, lr
 8019bea:	ea40 0201 	orr.w	r2, r0, r1
 8019bee:	ec43 2b10 	vmov	d0, r2, r3
 8019bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bf4:	42b7      	cmp	r7, r6
 8019bf6:	bf3a      	itte	cc
 8019bf8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019bfc:	f1a5 0608 	subcc.w	r6, r5, #8
 8019c00:	2100      	movcs	r1, #0
 8019c02:	380b      	subs	r0, #11
 8019c04:	d017      	beq.n	8019c36 <__b2d+0x92>
 8019c06:	f1c0 0c20 	rsb	ip, r0, #32
 8019c0a:	fa04 f500 	lsl.w	r5, r4, r0
 8019c0e:	42be      	cmp	r6, r7
 8019c10:	fa21 f40c 	lsr.w	r4, r1, ip
 8019c14:	ea45 0504 	orr.w	r5, r5, r4
 8019c18:	bf8c      	ite	hi
 8019c1a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019c1e:	2400      	movls	r4, #0
 8019c20:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019c24:	fa01 f000 	lsl.w	r0, r1, r0
 8019c28:	fa24 f40c 	lsr.w	r4, r4, ip
 8019c2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019c30:	ea40 0204 	orr.w	r2, r0, r4
 8019c34:	e7db      	b.n	8019bee <__b2d+0x4a>
 8019c36:	ea44 030c 	orr.w	r3, r4, ip
 8019c3a:	460a      	mov	r2, r1
 8019c3c:	e7d7      	b.n	8019bee <__b2d+0x4a>
 8019c3e:	bf00      	nop
 8019c40:	3ff00000 	.word	0x3ff00000

08019c44 <__d2b>:
 8019c44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019c48:	4689      	mov	r9, r1
 8019c4a:	2101      	movs	r1, #1
 8019c4c:	ec57 6b10 	vmov	r6, r7, d0
 8019c50:	4690      	mov	r8, r2
 8019c52:	f7ff fc09 	bl	8019468 <_Balloc>
 8019c56:	4604      	mov	r4, r0
 8019c58:	b930      	cbnz	r0, 8019c68 <__d2b+0x24>
 8019c5a:	4602      	mov	r2, r0
 8019c5c:	4b25      	ldr	r3, [pc, #148]	; (8019cf4 <__d2b+0xb0>)
 8019c5e:	4826      	ldr	r0, [pc, #152]	; (8019cf8 <__d2b+0xb4>)
 8019c60:	f240 310a 	movw	r1, #778	; 0x30a
 8019c64:	f000 fb4e 	bl	801a304 <__assert_func>
 8019c68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019c6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019c70:	bb35      	cbnz	r5, 8019cc0 <__d2b+0x7c>
 8019c72:	2e00      	cmp	r6, #0
 8019c74:	9301      	str	r3, [sp, #4]
 8019c76:	d028      	beq.n	8019cca <__d2b+0x86>
 8019c78:	4668      	mov	r0, sp
 8019c7a:	9600      	str	r6, [sp, #0]
 8019c7c:	f7ff fd06 	bl	801968c <__lo0bits>
 8019c80:	9900      	ldr	r1, [sp, #0]
 8019c82:	b300      	cbz	r0, 8019cc6 <__d2b+0x82>
 8019c84:	9a01      	ldr	r2, [sp, #4]
 8019c86:	f1c0 0320 	rsb	r3, r0, #32
 8019c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8019c8e:	430b      	orrs	r3, r1
 8019c90:	40c2      	lsrs	r2, r0
 8019c92:	6163      	str	r3, [r4, #20]
 8019c94:	9201      	str	r2, [sp, #4]
 8019c96:	9b01      	ldr	r3, [sp, #4]
 8019c98:	61a3      	str	r3, [r4, #24]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	bf14      	ite	ne
 8019c9e:	2202      	movne	r2, #2
 8019ca0:	2201      	moveq	r2, #1
 8019ca2:	6122      	str	r2, [r4, #16]
 8019ca4:	b1d5      	cbz	r5, 8019cdc <__d2b+0x98>
 8019ca6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019caa:	4405      	add	r5, r0
 8019cac:	f8c9 5000 	str.w	r5, [r9]
 8019cb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019cb4:	f8c8 0000 	str.w	r0, [r8]
 8019cb8:	4620      	mov	r0, r4
 8019cba:	b003      	add	sp, #12
 8019cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019cc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019cc4:	e7d5      	b.n	8019c72 <__d2b+0x2e>
 8019cc6:	6161      	str	r1, [r4, #20]
 8019cc8:	e7e5      	b.n	8019c96 <__d2b+0x52>
 8019cca:	a801      	add	r0, sp, #4
 8019ccc:	f7ff fcde 	bl	801968c <__lo0bits>
 8019cd0:	9b01      	ldr	r3, [sp, #4]
 8019cd2:	6163      	str	r3, [r4, #20]
 8019cd4:	2201      	movs	r2, #1
 8019cd6:	6122      	str	r2, [r4, #16]
 8019cd8:	3020      	adds	r0, #32
 8019cda:	e7e3      	b.n	8019ca4 <__d2b+0x60>
 8019cdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019ce0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019ce4:	f8c9 0000 	str.w	r0, [r9]
 8019ce8:	6918      	ldr	r0, [r3, #16]
 8019cea:	f7ff fcaf 	bl	801964c <__hi0bits>
 8019cee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019cf2:	e7df      	b.n	8019cb4 <__d2b+0x70>
 8019cf4:	0801cbe8 	.word	0x0801cbe8
 8019cf8:	0801cc74 	.word	0x0801cc74

08019cfc <__ratio>:
 8019cfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d00:	4688      	mov	r8, r1
 8019d02:	4669      	mov	r1, sp
 8019d04:	4681      	mov	r9, r0
 8019d06:	f7ff ff4d 	bl	8019ba4 <__b2d>
 8019d0a:	a901      	add	r1, sp, #4
 8019d0c:	4640      	mov	r0, r8
 8019d0e:	ec55 4b10 	vmov	r4, r5, d0
 8019d12:	f7ff ff47 	bl	8019ba4 <__b2d>
 8019d16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019d1a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019d1e:	eba3 0c02 	sub.w	ip, r3, r2
 8019d22:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019d26:	1a9b      	subs	r3, r3, r2
 8019d28:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019d2c:	ec51 0b10 	vmov	r0, r1, d0
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	bfd6      	itet	le
 8019d34:	460a      	movle	r2, r1
 8019d36:	462a      	movgt	r2, r5
 8019d38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019d3c:	468b      	mov	fp, r1
 8019d3e:	462f      	mov	r7, r5
 8019d40:	bfd4      	ite	le
 8019d42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019d46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019d4a:	4620      	mov	r0, r4
 8019d4c:	ee10 2a10 	vmov	r2, s0
 8019d50:	465b      	mov	r3, fp
 8019d52:	4639      	mov	r1, r7
 8019d54:	f7e6 fd92 	bl	800087c <__aeabi_ddiv>
 8019d58:	ec41 0b10 	vmov	d0, r0, r1
 8019d5c:	b003      	add	sp, #12
 8019d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d62 <__copybits>:
 8019d62:	3901      	subs	r1, #1
 8019d64:	b570      	push	{r4, r5, r6, lr}
 8019d66:	1149      	asrs	r1, r1, #5
 8019d68:	6914      	ldr	r4, [r2, #16]
 8019d6a:	3101      	adds	r1, #1
 8019d6c:	f102 0314 	add.w	r3, r2, #20
 8019d70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019d74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019d78:	1f05      	subs	r5, r0, #4
 8019d7a:	42a3      	cmp	r3, r4
 8019d7c:	d30c      	bcc.n	8019d98 <__copybits+0x36>
 8019d7e:	1aa3      	subs	r3, r4, r2
 8019d80:	3b11      	subs	r3, #17
 8019d82:	f023 0303 	bic.w	r3, r3, #3
 8019d86:	3211      	adds	r2, #17
 8019d88:	42a2      	cmp	r2, r4
 8019d8a:	bf88      	it	hi
 8019d8c:	2300      	movhi	r3, #0
 8019d8e:	4418      	add	r0, r3
 8019d90:	2300      	movs	r3, #0
 8019d92:	4288      	cmp	r0, r1
 8019d94:	d305      	bcc.n	8019da2 <__copybits+0x40>
 8019d96:	bd70      	pop	{r4, r5, r6, pc}
 8019d98:	f853 6b04 	ldr.w	r6, [r3], #4
 8019d9c:	f845 6f04 	str.w	r6, [r5, #4]!
 8019da0:	e7eb      	b.n	8019d7a <__copybits+0x18>
 8019da2:	f840 3b04 	str.w	r3, [r0], #4
 8019da6:	e7f4      	b.n	8019d92 <__copybits+0x30>

08019da8 <__any_on>:
 8019da8:	f100 0214 	add.w	r2, r0, #20
 8019dac:	6900      	ldr	r0, [r0, #16]
 8019dae:	114b      	asrs	r3, r1, #5
 8019db0:	4298      	cmp	r0, r3
 8019db2:	b510      	push	{r4, lr}
 8019db4:	db11      	blt.n	8019dda <__any_on+0x32>
 8019db6:	dd0a      	ble.n	8019dce <__any_on+0x26>
 8019db8:	f011 011f 	ands.w	r1, r1, #31
 8019dbc:	d007      	beq.n	8019dce <__any_on+0x26>
 8019dbe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019dc2:	fa24 f001 	lsr.w	r0, r4, r1
 8019dc6:	fa00 f101 	lsl.w	r1, r0, r1
 8019dca:	428c      	cmp	r4, r1
 8019dcc:	d10b      	bne.n	8019de6 <__any_on+0x3e>
 8019dce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019dd2:	4293      	cmp	r3, r2
 8019dd4:	d803      	bhi.n	8019dde <__any_on+0x36>
 8019dd6:	2000      	movs	r0, #0
 8019dd8:	bd10      	pop	{r4, pc}
 8019dda:	4603      	mov	r3, r0
 8019ddc:	e7f7      	b.n	8019dce <__any_on+0x26>
 8019dde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019de2:	2900      	cmp	r1, #0
 8019de4:	d0f5      	beq.n	8019dd2 <__any_on+0x2a>
 8019de6:	2001      	movs	r0, #1
 8019de8:	e7f6      	b.n	8019dd8 <__any_on+0x30>

08019dea <_calloc_r>:
 8019dea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019dec:	fba1 2402 	umull	r2, r4, r1, r2
 8019df0:	b94c      	cbnz	r4, 8019e06 <_calloc_r+0x1c>
 8019df2:	4611      	mov	r1, r2
 8019df4:	9201      	str	r2, [sp, #4]
 8019df6:	f000 f87b 	bl	8019ef0 <_malloc_r>
 8019dfa:	9a01      	ldr	r2, [sp, #4]
 8019dfc:	4605      	mov	r5, r0
 8019dfe:	b930      	cbnz	r0, 8019e0e <_calloc_r+0x24>
 8019e00:	4628      	mov	r0, r5
 8019e02:	b003      	add	sp, #12
 8019e04:	bd30      	pop	{r4, r5, pc}
 8019e06:	220c      	movs	r2, #12
 8019e08:	6002      	str	r2, [r0, #0]
 8019e0a:	2500      	movs	r5, #0
 8019e0c:	e7f8      	b.n	8019e00 <_calloc_r+0x16>
 8019e0e:	4621      	mov	r1, r4
 8019e10:	f7fc fbce 	bl	80165b0 <memset>
 8019e14:	e7f4      	b.n	8019e00 <_calloc_r+0x16>
	...

08019e18 <_free_r>:
 8019e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e1a:	2900      	cmp	r1, #0
 8019e1c:	d044      	beq.n	8019ea8 <_free_r+0x90>
 8019e1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e22:	9001      	str	r0, [sp, #4]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	f1a1 0404 	sub.w	r4, r1, #4
 8019e2a:	bfb8      	it	lt
 8019e2c:	18e4      	addlt	r4, r4, r3
 8019e2e:	f000 fab3 	bl	801a398 <__malloc_lock>
 8019e32:	4a1e      	ldr	r2, [pc, #120]	; (8019eac <_free_r+0x94>)
 8019e34:	9801      	ldr	r0, [sp, #4]
 8019e36:	6813      	ldr	r3, [r2, #0]
 8019e38:	b933      	cbnz	r3, 8019e48 <_free_r+0x30>
 8019e3a:	6063      	str	r3, [r4, #4]
 8019e3c:	6014      	str	r4, [r2, #0]
 8019e3e:	b003      	add	sp, #12
 8019e40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e44:	f000 baae 	b.w	801a3a4 <__malloc_unlock>
 8019e48:	42a3      	cmp	r3, r4
 8019e4a:	d908      	bls.n	8019e5e <_free_r+0x46>
 8019e4c:	6825      	ldr	r5, [r4, #0]
 8019e4e:	1961      	adds	r1, r4, r5
 8019e50:	428b      	cmp	r3, r1
 8019e52:	bf01      	itttt	eq
 8019e54:	6819      	ldreq	r1, [r3, #0]
 8019e56:	685b      	ldreq	r3, [r3, #4]
 8019e58:	1949      	addeq	r1, r1, r5
 8019e5a:	6021      	streq	r1, [r4, #0]
 8019e5c:	e7ed      	b.n	8019e3a <_free_r+0x22>
 8019e5e:	461a      	mov	r2, r3
 8019e60:	685b      	ldr	r3, [r3, #4]
 8019e62:	b10b      	cbz	r3, 8019e68 <_free_r+0x50>
 8019e64:	42a3      	cmp	r3, r4
 8019e66:	d9fa      	bls.n	8019e5e <_free_r+0x46>
 8019e68:	6811      	ldr	r1, [r2, #0]
 8019e6a:	1855      	adds	r5, r2, r1
 8019e6c:	42a5      	cmp	r5, r4
 8019e6e:	d10b      	bne.n	8019e88 <_free_r+0x70>
 8019e70:	6824      	ldr	r4, [r4, #0]
 8019e72:	4421      	add	r1, r4
 8019e74:	1854      	adds	r4, r2, r1
 8019e76:	42a3      	cmp	r3, r4
 8019e78:	6011      	str	r1, [r2, #0]
 8019e7a:	d1e0      	bne.n	8019e3e <_free_r+0x26>
 8019e7c:	681c      	ldr	r4, [r3, #0]
 8019e7e:	685b      	ldr	r3, [r3, #4]
 8019e80:	6053      	str	r3, [r2, #4]
 8019e82:	4421      	add	r1, r4
 8019e84:	6011      	str	r1, [r2, #0]
 8019e86:	e7da      	b.n	8019e3e <_free_r+0x26>
 8019e88:	d902      	bls.n	8019e90 <_free_r+0x78>
 8019e8a:	230c      	movs	r3, #12
 8019e8c:	6003      	str	r3, [r0, #0]
 8019e8e:	e7d6      	b.n	8019e3e <_free_r+0x26>
 8019e90:	6825      	ldr	r5, [r4, #0]
 8019e92:	1961      	adds	r1, r4, r5
 8019e94:	428b      	cmp	r3, r1
 8019e96:	bf04      	itt	eq
 8019e98:	6819      	ldreq	r1, [r3, #0]
 8019e9a:	685b      	ldreq	r3, [r3, #4]
 8019e9c:	6063      	str	r3, [r4, #4]
 8019e9e:	bf04      	itt	eq
 8019ea0:	1949      	addeq	r1, r1, r5
 8019ea2:	6021      	streq	r1, [r4, #0]
 8019ea4:	6054      	str	r4, [r2, #4]
 8019ea6:	e7ca      	b.n	8019e3e <_free_r+0x26>
 8019ea8:	b003      	add	sp, #12
 8019eaa:	bd30      	pop	{r4, r5, pc}
 8019eac:	2001e930 	.word	0x2001e930

08019eb0 <sbrk_aligned>:
 8019eb0:	b570      	push	{r4, r5, r6, lr}
 8019eb2:	4e0e      	ldr	r6, [pc, #56]	; (8019eec <sbrk_aligned+0x3c>)
 8019eb4:	460c      	mov	r4, r1
 8019eb6:	6831      	ldr	r1, [r6, #0]
 8019eb8:	4605      	mov	r5, r0
 8019eba:	b911      	cbnz	r1, 8019ec2 <sbrk_aligned+0x12>
 8019ebc:	f000 f9f0 	bl	801a2a0 <_sbrk_r>
 8019ec0:	6030      	str	r0, [r6, #0]
 8019ec2:	4621      	mov	r1, r4
 8019ec4:	4628      	mov	r0, r5
 8019ec6:	f000 f9eb 	bl	801a2a0 <_sbrk_r>
 8019eca:	1c43      	adds	r3, r0, #1
 8019ecc:	d00a      	beq.n	8019ee4 <sbrk_aligned+0x34>
 8019ece:	1cc4      	adds	r4, r0, #3
 8019ed0:	f024 0403 	bic.w	r4, r4, #3
 8019ed4:	42a0      	cmp	r0, r4
 8019ed6:	d007      	beq.n	8019ee8 <sbrk_aligned+0x38>
 8019ed8:	1a21      	subs	r1, r4, r0
 8019eda:	4628      	mov	r0, r5
 8019edc:	f000 f9e0 	bl	801a2a0 <_sbrk_r>
 8019ee0:	3001      	adds	r0, #1
 8019ee2:	d101      	bne.n	8019ee8 <sbrk_aligned+0x38>
 8019ee4:	f04f 34ff 	mov.w	r4, #4294967295
 8019ee8:	4620      	mov	r0, r4
 8019eea:	bd70      	pop	{r4, r5, r6, pc}
 8019eec:	2001e934 	.word	0x2001e934

08019ef0 <_malloc_r>:
 8019ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ef4:	1ccd      	adds	r5, r1, #3
 8019ef6:	f025 0503 	bic.w	r5, r5, #3
 8019efa:	3508      	adds	r5, #8
 8019efc:	2d0c      	cmp	r5, #12
 8019efe:	bf38      	it	cc
 8019f00:	250c      	movcc	r5, #12
 8019f02:	2d00      	cmp	r5, #0
 8019f04:	4607      	mov	r7, r0
 8019f06:	db01      	blt.n	8019f0c <_malloc_r+0x1c>
 8019f08:	42a9      	cmp	r1, r5
 8019f0a:	d905      	bls.n	8019f18 <_malloc_r+0x28>
 8019f0c:	230c      	movs	r3, #12
 8019f0e:	603b      	str	r3, [r7, #0]
 8019f10:	2600      	movs	r6, #0
 8019f12:	4630      	mov	r0, r6
 8019f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f18:	4e2e      	ldr	r6, [pc, #184]	; (8019fd4 <_malloc_r+0xe4>)
 8019f1a:	f000 fa3d 	bl	801a398 <__malloc_lock>
 8019f1e:	6833      	ldr	r3, [r6, #0]
 8019f20:	461c      	mov	r4, r3
 8019f22:	bb34      	cbnz	r4, 8019f72 <_malloc_r+0x82>
 8019f24:	4629      	mov	r1, r5
 8019f26:	4638      	mov	r0, r7
 8019f28:	f7ff ffc2 	bl	8019eb0 <sbrk_aligned>
 8019f2c:	1c43      	adds	r3, r0, #1
 8019f2e:	4604      	mov	r4, r0
 8019f30:	d14d      	bne.n	8019fce <_malloc_r+0xde>
 8019f32:	6834      	ldr	r4, [r6, #0]
 8019f34:	4626      	mov	r6, r4
 8019f36:	2e00      	cmp	r6, #0
 8019f38:	d140      	bne.n	8019fbc <_malloc_r+0xcc>
 8019f3a:	6823      	ldr	r3, [r4, #0]
 8019f3c:	4631      	mov	r1, r6
 8019f3e:	4638      	mov	r0, r7
 8019f40:	eb04 0803 	add.w	r8, r4, r3
 8019f44:	f000 f9ac 	bl	801a2a0 <_sbrk_r>
 8019f48:	4580      	cmp	r8, r0
 8019f4a:	d13a      	bne.n	8019fc2 <_malloc_r+0xd2>
 8019f4c:	6821      	ldr	r1, [r4, #0]
 8019f4e:	3503      	adds	r5, #3
 8019f50:	1a6d      	subs	r5, r5, r1
 8019f52:	f025 0503 	bic.w	r5, r5, #3
 8019f56:	3508      	adds	r5, #8
 8019f58:	2d0c      	cmp	r5, #12
 8019f5a:	bf38      	it	cc
 8019f5c:	250c      	movcc	r5, #12
 8019f5e:	4629      	mov	r1, r5
 8019f60:	4638      	mov	r0, r7
 8019f62:	f7ff ffa5 	bl	8019eb0 <sbrk_aligned>
 8019f66:	3001      	adds	r0, #1
 8019f68:	d02b      	beq.n	8019fc2 <_malloc_r+0xd2>
 8019f6a:	6823      	ldr	r3, [r4, #0]
 8019f6c:	442b      	add	r3, r5
 8019f6e:	6023      	str	r3, [r4, #0]
 8019f70:	e00e      	b.n	8019f90 <_malloc_r+0xa0>
 8019f72:	6822      	ldr	r2, [r4, #0]
 8019f74:	1b52      	subs	r2, r2, r5
 8019f76:	d41e      	bmi.n	8019fb6 <_malloc_r+0xc6>
 8019f78:	2a0b      	cmp	r2, #11
 8019f7a:	d916      	bls.n	8019faa <_malloc_r+0xba>
 8019f7c:	1961      	adds	r1, r4, r5
 8019f7e:	42a3      	cmp	r3, r4
 8019f80:	6025      	str	r5, [r4, #0]
 8019f82:	bf18      	it	ne
 8019f84:	6059      	strne	r1, [r3, #4]
 8019f86:	6863      	ldr	r3, [r4, #4]
 8019f88:	bf08      	it	eq
 8019f8a:	6031      	streq	r1, [r6, #0]
 8019f8c:	5162      	str	r2, [r4, r5]
 8019f8e:	604b      	str	r3, [r1, #4]
 8019f90:	4638      	mov	r0, r7
 8019f92:	f104 060b 	add.w	r6, r4, #11
 8019f96:	f000 fa05 	bl	801a3a4 <__malloc_unlock>
 8019f9a:	f026 0607 	bic.w	r6, r6, #7
 8019f9e:	1d23      	adds	r3, r4, #4
 8019fa0:	1af2      	subs	r2, r6, r3
 8019fa2:	d0b6      	beq.n	8019f12 <_malloc_r+0x22>
 8019fa4:	1b9b      	subs	r3, r3, r6
 8019fa6:	50a3      	str	r3, [r4, r2]
 8019fa8:	e7b3      	b.n	8019f12 <_malloc_r+0x22>
 8019faa:	6862      	ldr	r2, [r4, #4]
 8019fac:	42a3      	cmp	r3, r4
 8019fae:	bf0c      	ite	eq
 8019fb0:	6032      	streq	r2, [r6, #0]
 8019fb2:	605a      	strne	r2, [r3, #4]
 8019fb4:	e7ec      	b.n	8019f90 <_malloc_r+0xa0>
 8019fb6:	4623      	mov	r3, r4
 8019fb8:	6864      	ldr	r4, [r4, #4]
 8019fba:	e7b2      	b.n	8019f22 <_malloc_r+0x32>
 8019fbc:	4634      	mov	r4, r6
 8019fbe:	6876      	ldr	r6, [r6, #4]
 8019fc0:	e7b9      	b.n	8019f36 <_malloc_r+0x46>
 8019fc2:	230c      	movs	r3, #12
 8019fc4:	603b      	str	r3, [r7, #0]
 8019fc6:	4638      	mov	r0, r7
 8019fc8:	f000 f9ec 	bl	801a3a4 <__malloc_unlock>
 8019fcc:	e7a1      	b.n	8019f12 <_malloc_r+0x22>
 8019fce:	6025      	str	r5, [r4, #0]
 8019fd0:	e7de      	b.n	8019f90 <_malloc_r+0xa0>
 8019fd2:	bf00      	nop
 8019fd4:	2001e930 	.word	0x2001e930

08019fd8 <__ssputs_r>:
 8019fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fdc:	688e      	ldr	r6, [r1, #8]
 8019fde:	429e      	cmp	r6, r3
 8019fe0:	4682      	mov	sl, r0
 8019fe2:	460c      	mov	r4, r1
 8019fe4:	4690      	mov	r8, r2
 8019fe6:	461f      	mov	r7, r3
 8019fe8:	d838      	bhi.n	801a05c <__ssputs_r+0x84>
 8019fea:	898a      	ldrh	r2, [r1, #12]
 8019fec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019ff0:	d032      	beq.n	801a058 <__ssputs_r+0x80>
 8019ff2:	6825      	ldr	r5, [r4, #0]
 8019ff4:	6909      	ldr	r1, [r1, #16]
 8019ff6:	eba5 0901 	sub.w	r9, r5, r1
 8019ffa:	6965      	ldr	r5, [r4, #20]
 8019ffc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a000:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a004:	3301      	adds	r3, #1
 801a006:	444b      	add	r3, r9
 801a008:	106d      	asrs	r5, r5, #1
 801a00a:	429d      	cmp	r5, r3
 801a00c:	bf38      	it	cc
 801a00e:	461d      	movcc	r5, r3
 801a010:	0553      	lsls	r3, r2, #21
 801a012:	d531      	bpl.n	801a078 <__ssputs_r+0xa0>
 801a014:	4629      	mov	r1, r5
 801a016:	f7ff ff6b 	bl	8019ef0 <_malloc_r>
 801a01a:	4606      	mov	r6, r0
 801a01c:	b950      	cbnz	r0, 801a034 <__ssputs_r+0x5c>
 801a01e:	230c      	movs	r3, #12
 801a020:	f8ca 3000 	str.w	r3, [sl]
 801a024:	89a3      	ldrh	r3, [r4, #12]
 801a026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a02a:	81a3      	strh	r3, [r4, #12]
 801a02c:	f04f 30ff 	mov.w	r0, #4294967295
 801a030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a034:	6921      	ldr	r1, [r4, #16]
 801a036:	464a      	mov	r2, r9
 801a038:	f7fc faac 	bl	8016594 <memcpy>
 801a03c:	89a3      	ldrh	r3, [r4, #12]
 801a03e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a046:	81a3      	strh	r3, [r4, #12]
 801a048:	6126      	str	r6, [r4, #16]
 801a04a:	6165      	str	r5, [r4, #20]
 801a04c:	444e      	add	r6, r9
 801a04e:	eba5 0509 	sub.w	r5, r5, r9
 801a052:	6026      	str	r6, [r4, #0]
 801a054:	60a5      	str	r5, [r4, #8]
 801a056:	463e      	mov	r6, r7
 801a058:	42be      	cmp	r6, r7
 801a05a:	d900      	bls.n	801a05e <__ssputs_r+0x86>
 801a05c:	463e      	mov	r6, r7
 801a05e:	6820      	ldr	r0, [r4, #0]
 801a060:	4632      	mov	r2, r6
 801a062:	4641      	mov	r1, r8
 801a064:	f000 f97e 	bl	801a364 <memmove>
 801a068:	68a3      	ldr	r3, [r4, #8]
 801a06a:	1b9b      	subs	r3, r3, r6
 801a06c:	60a3      	str	r3, [r4, #8]
 801a06e:	6823      	ldr	r3, [r4, #0]
 801a070:	4433      	add	r3, r6
 801a072:	6023      	str	r3, [r4, #0]
 801a074:	2000      	movs	r0, #0
 801a076:	e7db      	b.n	801a030 <__ssputs_r+0x58>
 801a078:	462a      	mov	r2, r5
 801a07a:	f000 f999 	bl	801a3b0 <_realloc_r>
 801a07e:	4606      	mov	r6, r0
 801a080:	2800      	cmp	r0, #0
 801a082:	d1e1      	bne.n	801a048 <__ssputs_r+0x70>
 801a084:	6921      	ldr	r1, [r4, #16]
 801a086:	4650      	mov	r0, sl
 801a088:	f7ff fec6 	bl	8019e18 <_free_r>
 801a08c:	e7c7      	b.n	801a01e <__ssputs_r+0x46>
	...

0801a090 <_svfiprintf_r>:
 801a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a094:	4698      	mov	r8, r3
 801a096:	898b      	ldrh	r3, [r1, #12]
 801a098:	061b      	lsls	r3, r3, #24
 801a09a:	b09d      	sub	sp, #116	; 0x74
 801a09c:	4607      	mov	r7, r0
 801a09e:	460d      	mov	r5, r1
 801a0a0:	4614      	mov	r4, r2
 801a0a2:	d50e      	bpl.n	801a0c2 <_svfiprintf_r+0x32>
 801a0a4:	690b      	ldr	r3, [r1, #16]
 801a0a6:	b963      	cbnz	r3, 801a0c2 <_svfiprintf_r+0x32>
 801a0a8:	2140      	movs	r1, #64	; 0x40
 801a0aa:	f7ff ff21 	bl	8019ef0 <_malloc_r>
 801a0ae:	6028      	str	r0, [r5, #0]
 801a0b0:	6128      	str	r0, [r5, #16]
 801a0b2:	b920      	cbnz	r0, 801a0be <_svfiprintf_r+0x2e>
 801a0b4:	230c      	movs	r3, #12
 801a0b6:	603b      	str	r3, [r7, #0]
 801a0b8:	f04f 30ff 	mov.w	r0, #4294967295
 801a0bc:	e0d1      	b.n	801a262 <_svfiprintf_r+0x1d2>
 801a0be:	2340      	movs	r3, #64	; 0x40
 801a0c0:	616b      	str	r3, [r5, #20]
 801a0c2:	2300      	movs	r3, #0
 801a0c4:	9309      	str	r3, [sp, #36]	; 0x24
 801a0c6:	2320      	movs	r3, #32
 801a0c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a0cc:	f8cd 800c 	str.w	r8, [sp, #12]
 801a0d0:	2330      	movs	r3, #48	; 0x30
 801a0d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a27c <_svfiprintf_r+0x1ec>
 801a0d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a0da:	f04f 0901 	mov.w	r9, #1
 801a0de:	4623      	mov	r3, r4
 801a0e0:	469a      	mov	sl, r3
 801a0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a0e6:	b10a      	cbz	r2, 801a0ec <_svfiprintf_r+0x5c>
 801a0e8:	2a25      	cmp	r2, #37	; 0x25
 801a0ea:	d1f9      	bne.n	801a0e0 <_svfiprintf_r+0x50>
 801a0ec:	ebba 0b04 	subs.w	fp, sl, r4
 801a0f0:	d00b      	beq.n	801a10a <_svfiprintf_r+0x7a>
 801a0f2:	465b      	mov	r3, fp
 801a0f4:	4622      	mov	r2, r4
 801a0f6:	4629      	mov	r1, r5
 801a0f8:	4638      	mov	r0, r7
 801a0fa:	f7ff ff6d 	bl	8019fd8 <__ssputs_r>
 801a0fe:	3001      	adds	r0, #1
 801a100:	f000 80aa 	beq.w	801a258 <_svfiprintf_r+0x1c8>
 801a104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a106:	445a      	add	r2, fp
 801a108:	9209      	str	r2, [sp, #36]	; 0x24
 801a10a:	f89a 3000 	ldrb.w	r3, [sl]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	f000 80a2 	beq.w	801a258 <_svfiprintf_r+0x1c8>
 801a114:	2300      	movs	r3, #0
 801a116:	f04f 32ff 	mov.w	r2, #4294967295
 801a11a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a11e:	f10a 0a01 	add.w	sl, sl, #1
 801a122:	9304      	str	r3, [sp, #16]
 801a124:	9307      	str	r3, [sp, #28]
 801a126:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a12a:	931a      	str	r3, [sp, #104]	; 0x68
 801a12c:	4654      	mov	r4, sl
 801a12e:	2205      	movs	r2, #5
 801a130:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a134:	4851      	ldr	r0, [pc, #324]	; (801a27c <_svfiprintf_r+0x1ec>)
 801a136:	f7e6 f86b 	bl	8000210 <memchr>
 801a13a:	9a04      	ldr	r2, [sp, #16]
 801a13c:	b9d8      	cbnz	r0, 801a176 <_svfiprintf_r+0xe6>
 801a13e:	06d0      	lsls	r0, r2, #27
 801a140:	bf44      	itt	mi
 801a142:	2320      	movmi	r3, #32
 801a144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a148:	0711      	lsls	r1, r2, #28
 801a14a:	bf44      	itt	mi
 801a14c:	232b      	movmi	r3, #43	; 0x2b
 801a14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a152:	f89a 3000 	ldrb.w	r3, [sl]
 801a156:	2b2a      	cmp	r3, #42	; 0x2a
 801a158:	d015      	beq.n	801a186 <_svfiprintf_r+0xf6>
 801a15a:	9a07      	ldr	r2, [sp, #28]
 801a15c:	4654      	mov	r4, sl
 801a15e:	2000      	movs	r0, #0
 801a160:	f04f 0c0a 	mov.w	ip, #10
 801a164:	4621      	mov	r1, r4
 801a166:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a16a:	3b30      	subs	r3, #48	; 0x30
 801a16c:	2b09      	cmp	r3, #9
 801a16e:	d94e      	bls.n	801a20e <_svfiprintf_r+0x17e>
 801a170:	b1b0      	cbz	r0, 801a1a0 <_svfiprintf_r+0x110>
 801a172:	9207      	str	r2, [sp, #28]
 801a174:	e014      	b.n	801a1a0 <_svfiprintf_r+0x110>
 801a176:	eba0 0308 	sub.w	r3, r0, r8
 801a17a:	fa09 f303 	lsl.w	r3, r9, r3
 801a17e:	4313      	orrs	r3, r2
 801a180:	9304      	str	r3, [sp, #16]
 801a182:	46a2      	mov	sl, r4
 801a184:	e7d2      	b.n	801a12c <_svfiprintf_r+0x9c>
 801a186:	9b03      	ldr	r3, [sp, #12]
 801a188:	1d19      	adds	r1, r3, #4
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	9103      	str	r1, [sp, #12]
 801a18e:	2b00      	cmp	r3, #0
 801a190:	bfbb      	ittet	lt
 801a192:	425b      	neglt	r3, r3
 801a194:	f042 0202 	orrlt.w	r2, r2, #2
 801a198:	9307      	strge	r3, [sp, #28]
 801a19a:	9307      	strlt	r3, [sp, #28]
 801a19c:	bfb8      	it	lt
 801a19e:	9204      	strlt	r2, [sp, #16]
 801a1a0:	7823      	ldrb	r3, [r4, #0]
 801a1a2:	2b2e      	cmp	r3, #46	; 0x2e
 801a1a4:	d10c      	bne.n	801a1c0 <_svfiprintf_r+0x130>
 801a1a6:	7863      	ldrb	r3, [r4, #1]
 801a1a8:	2b2a      	cmp	r3, #42	; 0x2a
 801a1aa:	d135      	bne.n	801a218 <_svfiprintf_r+0x188>
 801a1ac:	9b03      	ldr	r3, [sp, #12]
 801a1ae:	1d1a      	adds	r2, r3, #4
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	9203      	str	r2, [sp, #12]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	bfb8      	it	lt
 801a1b8:	f04f 33ff 	movlt.w	r3, #4294967295
 801a1bc:	3402      	adds	r4, #2
 801a1be:	9305      	str	r3, [sp, #20]
 801a1c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a28c <_svfiprintf_r+0x1fc>
 801a1c4:	7821      	ldrb	r1, [r4, #0]
 801a1c6:	2203      	movs	r2, #3
 801a1c8:	4650      	mov	r0, sl
 801a1ca:	f7e6 f821 	bl	8000210 <memchr>
 801a1ce:	b140      	cbz	r0, 801a1e2 <_svfiprintf_r+0x152>
 801a1d0:	2340      	movs	r3, #64	; 0x40
 801a1d2:	eba0 000a 	sub.w	r0, r0, sl
 801a1d6:	fa03 f000 	lsl.w	r0, r3, r0
 801a1da:	9b04      	ldr	r3, [sp, #16]
 801a1dc:	4303      	orrs	r3, r0
 801a1de:	3401      	adds	r4, #1
 801a1e0:	9304      	str	r3, [sp, #16]
 801a1e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1e6:	4826      	ldr	r0, [pc, #152]	; (801a280 <_svfiprintf_r+0x1f0>)
 801a1e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a1ec:	2206      	movs	r2, #6
 801a1ee:	f7e6 f80f 	bl	8000210 <memchr>
 801a1f2:	2800      	cmp	r0, #0
 801a1f4:	d038      	beq.n	801a268 <_svfiprintf_r+0x1d8>
 801a1f6:	4b23      	ldr	r3, [pc, #140]	; (801a284 <_svfiprintf_r+0x1f4>)
 801a1f8:	bb1b      	cbnz	r3, 801a242 <_svfiprintf_r+0x1b2>
 801a1fa:	9b03      	ldr	r3, [sp, #12]
 801a1fc:	3307      	adds	r3, #7
 801a1fe:	f023 0307 	bic.w	r3, r3, #7
 801a202:	3308      	adds	r3, #8
 801a204:	9303      	str	r3, [sp, #12]
 801a206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a208:	4433      	add	r3, r6
 801a20a:	9309      	str	r3, [sp, #36]	; 0x24
 801a20c:	e767      	b.n	801a0de <_svfiprintf_r+0x4e>
 801a20e:	fb0c 3202 	mla	r2, ip, r2, r3
 801a212:	460c      	mov	r4, r1
 801a214:	2001      	movs	r0, #1
 801a216:	e7a5      	b.n	801a164 <_svfiprintf_r+0xd4>
 801a218:	2300      	movs	r3, #0
 801a21a:	3401      	adds	r4, #1
 801a21c:	9305      	str	r3, [sp, #20]
 801a21e:	4619      	mov	r1, r3
 801a220:	f04f 0c0a 	mov.w	ip, #10
 801a224:	4620      	mov	r0, r4
 801a226:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a22a:	3a30      	subs	r2, #48	; 0x30
 801a22c:	2a09      	cmp	r2, #9
 801a22e:	d903      	bls.n	801a238 <_svfiprintf_r+0x1a8>
 801a230:	2b00      	cmp	r3, #0
 801a232:	d0c5      	beq.n	801a1c0 <_svfiprintf_r+0x130>
 801a234:	9105      	str	r1, [sp, #20]
 801a236:	e7c3      	b.n	801a1c0 <_svfiprintf_r+0x130>
 801a238:	fb0c 2101 	mla	r1, ip, r1, r2
 801a23c:	4604      	mov	r4, r0
 801a23e:	2301      	movs	r3, #1
 801a240:	e7f0      	b.n	801a224 <_svfiprintf_r+0x194>
 801a242:	ab03      	add	r3, sp, #12
 801a244:	9300      	str	r3, [sp, #0]
 801a246:	462a      	mov	r2, r5
 801a248:	4b0f      	ldr	r3, [pc, #60]	; (801a288 <_svfiprintf_r+0x1f8>)
 801a24a:	a904      	add	r1, sp, #16
 801a24c:	4638      	mov	r0, r7
 801a24e:	f7fc fa57 	bl	8016700 <_printf_float>
 801a252:	1c42      	adds	r2, r0, #1
 801a254:	4606      	mov	r6, r0
 801a256:	d1d6      	bne.n	801a206 <_svfiprintf_r+0x176>
 801a258:	89ab      	ldrh	r3, [r5, #12]
 801a25a:	065b      	lsls	r3, r3, #25
 801a25c:	f53f af2c 	bmi.w	801a0b8 <_svfiprintf_r+0x28>
 801a260:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a262:	b01d      	add	sp, #116	; 0x74
 801a264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a268:	ab03      	add	r3, sp, #12
 801a26a:	9300      	str	r3, [sp, #0]
 801a26c:	462a      	mov	r2, r5
 801a26e:	4b06      	ldr	r3, [pc, #24]	; (801a288 <_svfiprintf_r+0x1f8>)
 801a270:	a904      	add	r1, sp, #16
 801a272:	4638      	mov	r0, r7
 801a274:	f7fc fce8 	bl	8016c48 <_printf_i>
 801a278:	e7eb      	b.n	801a252 <_svfiprintf_r+0x1c2>
 801a27a:	bf00      	nop
 801a27c:	0801cdcc 	.word	0x0801cdcc
 801a280:	0801cdd6 	.word	0x0801cdd6
 801a284:	08016701 	.word	0x08016701
 801a288:	08019fd9 	.word	0x08019fd9
 801a28c:	0801cdd2 	.word	0x0801cdd2

0801a290 <nan>:
 801a290:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a298 <nan+0x8>
 801a294:	4770      	bx	lr
 801a296:	bf00      	nop
 801a298:	00000000 	.word	0x00000000
 801a29c:	7ff80000 	.word	0x7ff80000

0801a2a0 <_sbrk_r>:
 801a2a0:	b538      	push	{r3, r4, r5, lr}
 801a2a2:	4d06      	ldr	r5, [pc, #24]	; (801a2bc <_sbrk_r+0x1c>)
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	4604      	mov	r4, r0
 801a2a8:	4608      	mov	r0, r1
 801a2aa:	602b      	str	r3, [r5, #0]
 801a2ac:	f7f0 ff5a 	bl	800b164 <_sbrk>
 801a2b0:	1c43      	adds	r3, r0, #1
 801a2b2:	d102      	bne.n	801a2ba <_sbrk_r+0x1a>
 801a2b4:	682b      	ldr	r3, [r5, #0]
 801a2b6:	b103      	cbz	r3, 801a2ba <_sbrk_r+0x1a>
 801a2b8:	6023      	str	r3, [r4, #0]
 801a2ba:	bd38      	pop	{r3, r4, r5, pc}
 801a2bc:	2001e938 	.word	0x2001e938

0801a2c0 <strncmp>:
 801a2c0:	b510      	push	{r4, lr}
 801a2c2:	b17a      	cbz	r2, 801a2e4 <strncmp+0x24>
 801a2c4:	4603      	mov	r3, r0
 801a2c6:	3901      	subs	r1, #1
 801a2c8:	1884      	adds	r4, r0, r2
 801a2ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a2ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a2d2:	4290      	cmp	r0, r2
 801a2d4:	d101      	bne.n	801a2da <strncmp+0x1a>
 801a2d6:	42a3      	cmp	r3, r4
 801a2d8:	d101      	bne.n	801a2de <strncmp+0x1e>
 801a2da:	1a80      	subs	r0, r0, r2
 801a2dc:	bd10      	pop	{r4, pc}
 801a2de:	2800      	cmp	r0, #0
 801a2e0:	d1f3      	bne.n	801a2ca <strncmp+0xa>
 801a2e2:	e7fa      	b.n	801a2da <strncmp+0x1a>
 801a2e4:	4610      	mov	r0, r2
 801a2e6:	e7f9      	b.n	801a2dc <strncmp+0x1c>

0801a2e8 <__ascii_wctomb>:
 801a2e8:	b149      	cbz	r1, 801a2fe <__ascii_wctomb+0x16>
 801a2ea:	2aff      	cmp	r2, #255	; 0xff
 801a2ec:	bf85      	ittet	hi
 801a2ee:	238a      	movhi	r3, #138	; 0x8a
 801a2f0:	6003      	strhi	r3, [r0, #0]
 801a2f2:	700a      	strbls	r2, [r1, #0]
 801a2f4:	f04f 30ff 	movhi.w	r0, #4294967295
 801a2f8:	bf98      	it	ls
 801a2fa:	2001      	movls	r0, #1
 801a2fc:	4770      	bx	lr
 801a2fe:	4608      	mov	r0, r1
 801a300:	4770      	bx	lr
	...

0801a304 <__assert_func>:
 801a304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a306:	4614      	mov	r4, r2
 801a308:	461a      	mov	r2, r3
 801a30a:	4b09      	ldr	r3, [pc, #36]	; (801a330 <__assert_func+0x2c>)
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	4605      	mov	r5, r0
 801a310:	68d8      	ldr	r0, [r3, #12]
 801a312:	b14c      	cbz	r4, 801a328 <__assert_func+0x24>
 801a314:	4b07      	ldr	r3, [pc, #28]	; (801a334 <__assert_func+0x30>)
 801a316:	9100      	str	r1, [sp, #0]
 801a318:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a31c:	4906      	ldr	r1, [pc, #24]	; (801a338 <__assert_func+0x34>)
 801a31e:	462b      	mov	r3, r5
 801a320:	f000 f80e 	bl	801a340 <fiprintf>
 801a324:	f000 fa8c 	bl	801a840 <abort>
 801a328:	4b04      	ldr	r3, [pc, #16]	; (801a33c <__assert_func+0x38>)
 801a32a:	461c      	mov	r4, r3
 801a32c:	e7f3      	b.n	801a316 <__assert_func+0x12>
 801a32e:	bf00      	nop
 801a330:	200000a4 	.word	0x200000a4
 801a334:	0801cddd 	.word	0x0801cddd
 801a338:	0801cdea 	.word	0x0801cdea
 801a33c:	0801ce18 	.word	0x0801ce18

0801a340 <fiprintf>:
 801a340:	b40e      	push	{r1, r2, r3}
 801a342:	b503      	push	{r0, r1, lr}
 801a344:	4601      	mov	r1, r0
 801a346:	ab03      	add	r3, sp, #12
 801a348:	4805      	ldr	r0, [pc, #20]	; (801a360 <fiprintf+0x20>)
 801a34a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a34e:	6800      	ldr	r0, [r0, #0]
 801a350:	9301      	str	r3, [sp, #4]
 801a352:	f000 f885 	bl	801a460 <_vfiprintf_r>
 801a356:	b002      	add	sp, #8
 801a358:	f85d eb04 	ldr.w	lr, [sp], #4
 801a35c:	b003      	add	sp, #12
 801a35e:	4770      	bx	lr
 801a360:	200000a4 	.word	0x200000a4

0801a364 <memmove>:
 801a364:	4288      	cmp	r0, r1
 801a366:	b510      	push	{r4, lr}
 801a368:	eb01 0402 	add.w	r4, r1, r2
 801a36c:	d902      	bls.n	801a374 <memmove+0x10>
 801a36e:	4284      	cmp	r4, r0
 801a370:	4623      	mov	r3, r4
 801a372:	d807      	bhi.n	801a384 <memmove+0x20>
 801a374:	1e43      	subs	r3, r0, #1
 801a376:	42a1      	cmp	r1, r4
 801a378:	d008      	beq.n	801a38c <memmove+0x28>
 801a37a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a37e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a382:	e7f8      	b.n	801a376 <memmove+0x12>
 801a384:	4402      	add	r2, r0
 801a386:	4601      	mov	r1, r0
 801a388:	428a      	cmp	r2, r1
 801a38a:	d100      	bne.n	801a38e <memmove+0x2a>
 801a38c:	bd10      	pop	{r4, pc}
 801a38e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a396:	e7f7      	b.n	801a388 <memmove+0x24>

0801a398 <__malloc_lock>:
 801a398:	4801      	ldr	r0, [pc, #4]	; (801a3a0 <__malloc_lock+0x8>)
 801a39a:	f000 bc11 	b.w	801abc0 <__retarget_lock_acquire_recursive>
 801a39e:	bf00      	nop
 801a3a0:	2001e93c 	.word	0x2001e93c

0801a3a4 <__malloc_unlock>:
 801a3a4:	4801      	ldr	r0, [pc, #4]	; (801a3ac <__malloc_unlock+0x8>)
 801a3a6:	f000 bc0c 	b.w	801abc2 <__retarget_lock_release_recursive>
 801a3aa:	bf00      	nop
 801a3ac:	2001e93c 	.word	0x2001e93c

0801a3b0 <_realloc_r>:
 801a3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3b4:	4680      	mov	r8, r0
 801a3b6:	4614      	mov	r4, r2
 801a3b8:	460e      	mov	r6, r1
 801a3ba:	b921      	cbnz	r1, 801a3c6 <_realloc_r+0x16>
 801a3bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a3c0:	4611      	mov	r1, r2
 801a3c2:	f7ff bd95 	b.w	8019ef0 <_malloc_r>
 801a3c6:	b92a      	cbnz	r2, 801a3d4 <_realloc_r+0x24>
 801a3c8:	f7ff fd26 	bl	8019e18 <_free_r>
 801a3cc:	4625      	mov	r5, r4
 801a3ce:	4628      	mov	r0, r5
 801a3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3d4:	f000 fc5c 	bl	801ac90 <_malloc_usable_size_r>
 801a3d8:	4284      	cmp	r4, r0
 801a3da:	4607      	mov	r7, r0
 801a3dc:	d802      	bhi.n	801a3e4 <_realloc_r+0x34>
 801a3de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a3e2:	d812      	bhi.n	801a40a <_realloc_r+0x5a>
 801a3e4:	4621      	mov	r1, r4
 801a3e6:	4640      	mov	r0, r8
 801a3e8:	f7ff fd82 	bl	8019ef0 <_malloc_r>
 801a3ec:	4605      	mov	r5, r0
 801a3ee:	2800      	cmp	r0, #0
 801a3f0:	d0ed      	beq.n	801a3ce <_realloc_r+0x1e>
 801a3f2:	42bc      	cmp	r4, r7
 801a3f4:	4622      	mov	r2, r4
 801a3f6:	4631      	mov	r1, r6
 801a3f8:	bf28      	it	cs
 801a3fa:	463a      	movcs	r2, r7
 801a3fc:	f7fc f8ca 	bl	8016594 <memcpy>
 801a400:	4631      	mov	r1, r6
 801a402:	4640      	mov	r0, r8
 801a404:	f7ff fd08 	bl	8019e18 <_free_r>
 801a408:	e7e1      	b.n	801a3ce <_realloc_r+0x1e>
 801a40a:	4635      	mov	r5, r6
 801a40c:	e7df      	b.n	801a3ce <_realloc_r+0x1e>

0801a40e <__sfputc_r>:
 801a40e:	6893      	ldr	r3, [r2, #8]
 801a410:	3b01      	subs	r3, #1
 801a412:	2b00      	cmp	r3, #0
 801a414:	b410      	push	{r4}
 801a416:	6093      	str	r3, [r2, #8]
 801a418:	da08      	bge.n	801a42c <__sfputc_r+0x1e>
 801a41a:	6994      	ldr	r4, [r2, #24]
 801a41c:	42a3      	cmp	r3, r4
 801a41e:	db01      	blt.n	801a424 <__sfputc_r+0x16>
 801a420:	290a      	cmp	r1, #10
 801a422:	d103      	bne.n	801a42c <__sfputc_r+0x1e>
 801a424:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a428:	f000 b94a 	b.w	801a6c0 <__swbuf_r>
 801a42c:	6813      	ldr	r3, [r2, #0]
 801a42e:	1c58      	adds	r0, r3, #1
 801a430:	6010      	str	r0, [r2, #0]
 801a432:	7019      	strb	r1, [r3, #0]
 801a434:	4608      	mov	r0, r1
 801a436:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a43a:	4770      	bx	lr

0801a43c <__sfputs_r>:
 801a43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a43e:	4606      	mov	r6, r0
 801a440:	460f      	mov	r7, r1
 801a442:	4614      	mov	r4, r2
 801a444:	18d5      	adds	r5, r2, r3
 801a446:	42ac      	cmp	r4, r5
 801a448:	d101      	bne.n	801a44e <__sfputs_r+0x12>
 801a44a:	2000      	movs	r0, #0
 801a44c:	e007      	b.n	801a45e <__sfputs_r+0x22>
 801a44e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a452:	463a      	mov	r2, r7
 801a454:	4630      	mov	r0, r6
 801a456:	f7ff ffda 	bl	801a40e <__sfputc_r>
 801a45a:	1c43      	adds	r3, r0, #1
 801a45c:	d1f3      	bne.n	801a446 <__sfputs_r+0xa>
 801a45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a460 <_vfiprintf_r>:
 801a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a464:	460d      	mov	r5, r1
 801a466:	b09d      	sub	sp, #116	; 0x74
 801a468:	4614      	mov	r4, r2
 801a46a:	4698      	mov	r8, r3
 801a46c:	4606      	mov	r6, r0
 801a46e:	b118      	cbz	r0, 801a478 <_vfiprintf_r+0x18>
 801a470:	6983      	ldr	r3, [r0, #24]
 801a472:	b90b      	cbnz	r3, 801a478 <_vfiprintf_r+0x18>
 801a474:	f000 fb06 	bl	801aa84 <__sinit>
 801a478:	4b89      	ldr	r3, [pc, #548]	; (801a6a0 <_vfiprintf_r+0x240>)
 801a47a:	429d      	cmp	r5, r3
 801a47c:	d11b      	bne.n	801a4b6 <_vfiprintf_r+0x56>
 801a47e:	6875      	ldr	r5, [r6, #4]
 801a480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a482:	07d9      	lsls	r1, r3, #31
 801a484:	d405      	bmi.n	801a492 <_vfiprintf_r+0x32>
 801a486:	89ab      	ldrh	r3, [r5, #12]
 801a488:	059a      	lsls	r2, r3, #22
 801a48a:	d402      	bmi.n	801a492 <_vfiprintf_r+0x32>
 801a48c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a48e:	f000 fb97 	bl	801abc0 <__retarget_lock_acquire_recursive>
 801a492:	89ab      	ldrh	r3, [r5, #12]
 801a494:	071b      	lsls	r3, r3, #28
 801a496:	d501      	bpl.n	801a49c <_vfiprintf_r+0x3c>
 801a498:	692b      	ldr	r3, [r5, #16]
 801a49a:	b9eb      	cbnz	r3, 801a4d8 <_vfiprintf_r+0x78>
 801a49c:	4629      	mov	r1, r5
 801a49e:	4630      	mov	r0, r6
 801a4a0:	f000 f960 	bl	801a764 <__swsetup_r>
 801a4a4:	b1c0      	cbz	r0, 801a4d8 <_vfiprintf_r+0x78>
 801a4a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a4a8:	07dc      	lsls	r4, r3, #31
 801a4aa:	d50e      	bpl.n	801a4ca <_vfiprintf_r+0x6a>
 801a4ac:	f04f 30ff 	mov.w	r0, #4294967295
 801a4b0:	b01d      	add	sp, #116	; 0x74
 801a4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4b6:	4b7b      	ldr	r3, [pc, #492]	; (801a6a4 <_vfiprintf_r+0x244>)
 801a4b8:	429d      	cmp	r5, r3
 801a4ba:	d101      	bne.n	801a4c0 <_vfiprintf_r+0x60>
 801a4bc:	68b5      	ldr	r5, [r6, #8]
 801a4be:	e7df      	b.n	801a480 <_vfiprintf_r+0x20>
 801a4c0:	4b79      	ldr	r3, [pc, #484]	; (801a6a8 <_vfiprintf_r+0x248>)
 801a4c2:	429d      	cmp	r5, r3
 801a4c4:	bf08      	it	eq
 801a4c6:	68f5      	ldreq	r5, [r6, #12]
 801a4c8:	e7da      	b.n	801a480 <_vfiprintf_r+0x20>
 801a4ca:	89ab      	ldrh	r3, [r5, #12]
 801a4cc:	0598      	lsls	r0, r3, #22
 801a4ce:	d4ed      	bmi.n	801a4ac <_vfiprintf_r+0x4c>
 801a4d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a4d2:	f000 fb76 	bl	801abc2 <__retarget_lock_release_recursive>
 801a4d6:	e7e9      	b.n	801a4ac <_vfiprintf_r+0x4c>
 801a4d8:	2300      	movs	r3, #0
 801a4da:	9309      	str	r3, [sp, #36]	; 0x24
 801a4dc:	2320      	movs	r3, #32
 801a4de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a4e2:	f8cd 800c 	str.w	r8, [sp, #12]
 801a4e6:	2330      	movs	r3, #48	; 0x30
 801a4e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a6ac <_vfiprintf_r+0x24c>
 801a4ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a4f0:	f04f 0901 	mov.w	r9, #1
 801a4f4:	4623      	mov	r3, r4
 801a4f6:	469a      	mov	sl, r3
 801a4f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a4fc:	b10a      	cbz	r2, 801a502 <_vfiprintf_r+0xa2>
 801a4fe:	2a25      	cmp	r2, #37	; 0x25
 801a500:	d1f9      	bne.n	801a4f6 <_vfiprintf_r+0x96>
 801a502:	ebba 0b04 	subs.w	fp, sl, r4
 801a506:	d00b      	beq.n	801a520 <_vfiprintf_r+0xc0>
 801a508:	465b      	mov	r3, fp
 801a50a:	4622      	mov	r2, r4
 801a50c:	4629      	mov	r1, r5
 801a50e:	4630      	mov	r0, r6
 801a510:	f7ff ff94 	bl	801a43c <__sfputs_r>
 801a514:	3001      	adds	r0, #1
 801a516:	f000 80aa 	beq.w	801a66e <_vfiprintf_r+0x20e>
 801a51a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a51c:	445a      	add	r2, fp
 801a51e:	9209      	str	r2, [sp, #36]	; 0x24
 801a520:	f89a 3000 	ldrb.w	r3, [sl]
 801a524:	2b00      	cmp	r3, #0
 801a526:	f000 80a2 	beq.w	801a66e <_vfiprintf_r+0x20e>
 801a52a:	2300      	movs	r3, #0
 801a52c:	f04f 32ff 	mov.w	r2, #4294967295
 801a530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a534:	f10a 0a01 	add.w	sl, sl, #1
 801a538:	9304      	str	r3, [sp, #16]
 801a53a:	9307      	str	r3, [sp, #28]
 801a53c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a540:	931a      	str	r3, [sp, #104]	; 0x68
 801a542:	4654      	mov	r4, sl
 801a544:	2205      	movs	r2, #5
 801a546:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a54a:	4858      	ldr	r0, [pc, #352]	; (801a6ac <_vfiprintf_r+0x24c>)
 801a54c:	f7e5 fe60 	bl	8000210 <memchr>
 801a550:	9a04      	ldr	r2, [sp, #16]
 801a552:	b9d8      	cbnz	r0, 801a58c <_vfiprintf_r+0x12c>
 801a554:	06d1      	lsls	r1, r2, #27
 801a556:	bf44      	itt	mi
 801a558:	2320      	movmi	r3, #32
 801a55a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a55e:	0713      	lsls	r3, r2, #28
 801a560:	bf44      	itt	mi
 801a562:	232b      	movmi	r3, #43	; 0x2b
 801a564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a568:	f89a 3000 	ldrb.w	r3, [sl]
 801a56c:	2b2a      	cmp	r3, #42	; 0x2a
 801a56e:	d015      	beq.n	801a59c <_vfiprintf_r+0x13c>
 801a570:	9a07      	ldr	r2, [sp, #28]
 801a572:	4654      	mov	r4, sl
 801a574:	2000      	movs	r0, #0
 801a576:	f04f 0c0a 	mov.w	ip, #10
 801a57a:	4621      	mov	r1, r4
 801a57c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a580:	3b30      	subs	r3, #48	; 0x30
 801a582:	2b09      	cmp	r3, #9
 801a584:	d94e      	bls.n	801a624 <_vfiprintf_r+0x1c4>
 801a586:	b1b0      	cbz	r0, 801a5b6 <_vfiprintf_r+0x156>
 801a588:	9207      	str	r2, [sp, #28]
 801a58a:	e014      	b.n	801a5b6 <_vfiprintf_r+0x156>
 801a58c:	eba0 0308 	sub.w	r3, r0, r8
 801a590:	fa09 f303 	lsl.w	r3, r9, r3
 801a594:	4313      	orrs	r3, r2
 801a596:	9304      	str	r3, [sp, #16]
 801a598:	46a2      	mov	sl, r4
 801a59a:	e7d2      	b.n	801a542 <_vfiprintf_r+0xe2>
 801a59c:	9b03      	ldr	r3, [sp, #12]
 801a59e:	1d19      	adds	r1, r3, #4
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	9103      	str	r1, [sp, #12]
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	bfbb      	ittet	lt
 801a5a8:	425b      	neglt	r3, r3
 801a5aa:	f042 0202 	orrlt.w	r2, r2, #2
 801a5ae:	9307      	strge	r3, [sp, #28]
 801a5b0:	9307      	strlt	r3, [sp, #28]
 801a5b2:	bfb8      	it	lt
 801a5b4:	9204      	strlt	r2, [sp, #16]
 801a5b6:	7823      	ldrb	r3, [r4, #0]
 801a5b8:	2b2e      	cmp	r3, #46	; 0x2e
 801a5ba:	d10c      	bne.n	801a5d6 <_vfiprintf_r+0x176>
 801a5bc:	7863      	ldrb	r3, [r4, #1]
 801a5be:	2b2a      	cmp	r3, #42	; 0x2a
 801a5c0:	d135      	bne.n	801a62e <_vfiprintf_r+0x1ce>
 801a5c2:	9b03      	ldr	r3, [sp, #12]
 801a5c4:	1d1a      	adds	r2, r3, #4
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	9203      	str	r2, [sp, #12]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	bfb8      	it	lt
 801a5ce:	f04f 33ff 	movlt.w	r3, #4294967295
 801a5d2:	3402      	adds	r4, #2
 801a5d4:	9305      	str	r3, [sp, #20]
 801a5d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a6bc <_vfiprintf_r+0x25c>
 801a5da:	7821      	ldrb	r1, [r4, #0]
 801a5dc:	2203      	movs	r2, #3
 801a5de:	4650      	mov	r0, sl
 801a5e0:	f7e5 fe16 	bl	8000210 <memchr>
 801a5e4:	b140      	cbz	r0, 801a5f8 <_vfiprintf_r+0x198>
 801a5e6:	2340      	movs	r3, #64	; 0x40
 801a5e8:	eba0 000a 	sub.w	r0, r0, sl
 801a5ec:	fa03 f000 	lsl.w	r0, r3, r0
 801a5f0:	9b04      	ldr	r3, [sp, #16]
 801a5f2:	4303      	orrs	r3, r0
 801a5f4:	3401      	adds	r4, #1
 801a5f6:	9304      	str	r3, [sp, #16]
 801a5f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5fc:	482c      	ldr	r0, [pc, #176]	; (801a6b0 <_vfiprintf_r+0x250>)
 801a5fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a602:	2206      	movs	r2, #6
 801a604:	f7e5 fe04 	bl	8000210 <memchr>
 801a608:	2800      	cmp	r0, #0
 801a60a:	d03f      	beq.n	801a68c <_vfiprintf_r+0x22c>
 801a60c:	4b29      	ldr	r3, [pc, #164]	; (801a6b4 <_vfiprintf_r+0x254>)
 801a60e:	bb1b      	cbnz	r3, 801a658 <_vfiprintf_r+0x1f8>
 801a610:	9b03      	ldr	r3, [sp, #12]
 801a612:	3307      	adds	r3, #7
 801a614:	f023 0307 	bic.w	r3, r3, #7
 801a618:	3308      	adds	r3, #8
 801a61a:	9303      	str	r3, [sp, #12]
 801a61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a61e:	443b      	add	r3, r7
 801a620:	9309      	str	r3, [sp, #36]	; 0x24
 801a622:	e767      	b.n	801a4f4 <_vfiprintf_r+0x94>
 801a624:	fb0c 3202 	mla	r2, ip, r2, r3
 801a628:	460c      	mov	r4, r1
 801a62a:	2001      	movs	r0, #1
 801a62c:	e7a5      	b.n	801a57a <_vfiprintf_r+0x11a>
 801a62e:	2300      	movs	r3, #0
 801a630:	3401      	adds	r4, #1
 801a632:	9305      	str	r3, [sp, #20]
 801a634:	4619      	mov	r1, r3
 801a636:	f04f 0c0a 	mov.w	ip, #10
 801a63a:	4620      	mov	r0, r4
 801a63c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a640:	3a30      	subs	r2, #48	; 0x30
 801a642:	2a09      	cmp	r2, #9
 801a644:	d903      	bls.n	801a64e <_vfiprintf_r+0x1ee>
 801a646:	2b00      	cmp	r3, #0
 801a648:	d0c5      	beq.n	801a5d6 <_vfiprintf_r+0x176>
 801a64a:	9105      	str	r1, [sp, #20]
 801a64c:	e7c3      	b.n	801a5d6 <_vfiprintf_r+0x176>
 801a64e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a652:	4604      	mov	r4, r0
 801a654:	2301      	movs	r3, #1
 801a656:	e7f0      	b.n	801a63a <_vfiprintf_r+0x1da>
 801a658:	ab03      	add	r3, sp, #12
 801a65a:	9300      	str	r3, [sp, #0]
 801a65c:	462a      	mov	r2, r5
 801a65e:	4b16      	ldr	r3, [pc, #88]	; (801a6b8 <_vfiprintf_r+0x258>)
 801a660:	a904      	add	r1, sp, #16
 801a662:	4630      	mov	r0, r6
 801a664:	f7fc f84c 	bl	8016700 <_printf_float>
 801a668:	4607      	mov	r7, r0
 801a66a:	1c78      	adds	r0, r7, #1
 801a66c:	d1d6      	bne.n	801a61c <_vfiprintf_r+0x1bc>
 801a66e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a670:	07d9      	lsls	r1, r3, #31
 801a672:	d405      	bmi.n	801a680 <_vfiprintf_r+0x220>
 801a674:	89ab      	ldrh	r3, [r5, #12]
 801a676:	059a      	lsls	r2, r3, #22
 801a678:	d402      	bmi.n	801a680 <_vfiprintf_r+0x220>
 801a67a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a67c:	f000 faa1 	bl	801abc2 <__retarget_lock_release_recursive>
 801a680:	89ab      	ldrh	r3, [r5, #12]
 801a682:	065b      	lsls	r3, r3, #25
 801a684:	f53f af12 	bmi.w	801a4ac <_vfiprintf_r+0x4c>
 801a688:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a68a:	e711      	b.n	801a4b0 <_vfiprintf_r+0x50>
 801a68c:	ab03      	add	r3, sp, #12
 801a68e:	9300      	str	r3, [sp, #0]
 801a690:	462a      	mov	r2, r5
 801a692:	4b09      	ldr	r3, [pc, #36]	; (801a6b8 <_vfiprintf_r+0x258>)
 801a694:	a904      	add	r1, sp, #16
 801a696:	4630      	mov	r0, r6
 801a698:	f7fc fad6 	bl	8016c48 <_printf_i>
 801a69c:	e7e4      	b.n	801a668 <_vfiprintf_r+0x208>
 801a69e:	bf00      	nop
 801a6a0:	0801ce3c 	.word	0x0801ce3c
 801a6a4:	0801ce5c 	.word	0x0801ce5c
 801a6a8:	0801ce1c 	.word	0x0801ce1c
 801a6ac:	0801cdcc 	.word	0x0801cdcc
 801a6b0:	0801cdd6 	.word	0x0801cdd6
 801a6b4:	08016701 	.word	0x08016701
 801a6b8:	0801a43d 	.word	0x0801a43d
 801a6bc:	0801cdd2 	.word	0x0801cdd2

0801a6c0 <__swbuf_r>:
 801a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6c2:	460e      	mov	r6, r1
 801a6c4:	4614      	mov	r4, r2
 801a6c6:	4605      	mov	r5, r0
 801a6c8:	b118      	cbz	r0, 801a6d2 <__swbuf_r+0x12>
 801a6ca:	6983      	ldr	r3, [r0, #24]
 801a6cc:	b90b      	cbnz	r3, 801a6d2 <__swbuf_r+0x12>
 801a6ce:	f000 f9d9 	bl	801aa84 <__sinit>
 801a6d2:	4b21      	ldr	r3, [pc, #132]	; (801a758 <__swbuf_r+0x98>)
 801a6d4:	429c      	cmp	r4, r3
 801a6d6:	d12b      	bne.n	801a730 <__swbuf_r+0x70>
 801a6d8:	686c      	ldr	r4, [r5, #4]
 801a6da:	69a3      	ldr	r3, [r4, #24]
 801a6dc:	60a3      	str	r3, [r4, #8]
 801a6de:	89a3      	ldrh	r3, [r4, #12]
 801a6e0:	071a      	lsls	r2, r3, #28
 801a6e2:	d52f      	bpl.n	801a744 <__swbuf_r+0x84>
 801a6e4:	6923      	ldr	r3, [r4, #16]
 801a6e6:	b36b      	cbz	r3, 801a744 <__swbuf_r+0x84>
 801a6e8:	6923      	ldr	r3, [r4, #16]
 801a6ea:	6820      	ldr	r0, [r4, #0]
 801a6ec:	1ac0      	subs	r0, r0, r3
 801a6ee:	6963      	ldr	r3, [r4, #20]
 801a6f0:	b2f6      	uxtb	r6, r6
 801a6f2:	4283      	cmp	r3, r0
 801a6f4:	4637      	mov	r7, r6
 801a6f6:	dc04      	bgt.n	801a702 <__swbuf_r+0x42>
 801a6f8:	4621      	mov	r1, r4
 801a6fa:	4628      	mov	r0, r5
 801a6fc:	f000 f92e 	bl	801a95c <_fflush_r>
 801a700:	bb30      	cbnz	r0, 801a750 <__swbuf_r+0x90>
 801a702:	68a3      	ldr	r3, [r4, #8]
 801a704:	3b01      	subs	r3, #1
 801a706:	60a3      	str	r3, [r4, #8]
 801a708:	6823      	ldr	r3, [r4, #0]
 801a70a:	1c5a      	adds	r2, r3, #1
 801a70c:	6022      	str	r2, [r4, #0]
 801a70e:	701e      	strb	r6, [r3, #0]
 801a710:	6963      	ldr	r3, [r4, #20]
 801a712:	3001      	adds	r0, #1
 801a714:	4283      	cmp	r3, r0
 801a716:	d004      	beq.n	801a722 <__swbuf_r+0x62>
 801a718:	89a3      	ldrh	r3, [r4, #12]
 801a71a:	07db      	lsls	r3, r3, #31
 801a71c:	d506      	bpl.n	801a72c <__swbuf_r+0x6c>
 801a71e:	2e0a      	cmp	r6, #10
 801a720:	d104      	bne.n	801a72c <__swbuf_r+0x6c>
 801a722:	4621      	mov	r1, r4
 801a724:	4628      	mov	r0, r5
 801a726:	f000 f919 	bl	801a95c <_fflush_r>
 801a72a:	b988      	cbnz	r0, 801a750 <__swbuf_r+0x90>
 801a72c:	4638      	mov	r0, r7
 801a72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a730:	4b0a      	ldr	r3, [pc, #40]	; (801a75c <__swbuf_r+0x9c>)
 801a732:	429c      	cmp	r4, r3
 801a734:	d101      	bne.n	801a73a <__swbuf_r+0x7a>
 801a736:	68ac      	ldr	r4, [r5, #8]
 801a738:	e7cf      	b.n	801a6da <__swbuf_r+0x1a>
 801a73a:	4b09      	ldr	r3, [pc, #36]	; (801a760 <__swbuf_r+0xa0>)
 801a73c:	429c      	cmp	r4, r3
 801a73e:	bf08      	it	eq
 801a740:	68ec      	ldreq	r4, [r5, #12]
 801a742:	e7ca      	b.n	801a6da <__swbuf_r+0x1a>
 801a744:	4621      	mov	r1, r4
 801a746:	4628      	mov	r0, r5
 801a748:	f000 f80c 	bl	801a764 <__swsetup_r>
 801a74c:	2800      	cmp	r0, #0
 801a74e:	d0cb      	beq.n	801a6e8 <__swbuf_r+0x28>
 801a750:	f04f 37ff 	mov.w	r7, #4294967295
 801a754:	e7ea      	b.n	801a72c <__swbuf_r+0x6c>
 801a756:	bf00      	nop
 801a758:	0801ce3c 	.word	0x0801ce3c
 801a75c:	0801ce5c 	.word	0x0801ce5c
 801a760:	0801ce1c 	.word	0x0801ce1c

0801a764 <__swsetup_r>:
 801a764:	4b32      	ldr	r3, [pc, #200]	; (801a830 <__swsetup_r+0xcc>)
 801a766:	b570      	push	{r4, r5, r6, lr}
 801a768:	681d      	ldr	r5, [r3, #0]
 801a76a:	4606      	mov	r6, r0
 801a76c:	460c      	mov	r4, r1
 801a76e:	b125      	cbz	r5, 801a77a <__swsetup_r+0x16>
 801a770:	69ab      	ldr	r3, [r5, #24]
 801a772:	b913      	cbnz	r3, 801a77a <__swsetup_r+0x16>
 801a774:	4628      	mov	r0, r5
 801a776:	f000 f985 	bl	801aa84 <__sinit>
 801a77a:	4b2e      	ldr	r3, [pc, #184]	; (801a834 <__swsetup_r+0xd0>)
 801a77c:	429c      	cmp	r4, r3
 801a77e:	d10f      	bne.n	801a7a0 <__swsetup_r+0x3c>
 801a780:	686c      	ldr	r4, [r5, #4]
 801a782:	89a3      	ldrh	r3, [r4, #12]
 801a784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a788:	0719      	lsls	r1, r3, #28
 801a78a:	d42c      	bmi.n	801a7e6 <__swsetup_r+0x82>
 801a78c:	06dd      	lsls	r5, r3, #27
 801a78e:	d411      	bmi.n	801a7b4 <__swsetup_r+0x50>
 801a790:	2309      	movs	r3, #9
 801a792:	6033      	str	r3, [r6, #0]
 801a794:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a798:	81a3      	strh	r3, [r4, #12]
 801a79a:	f04f 30ff 	mov.w	r0, #4294967295
 801a79e:	e03e      	b.n	801a81e <__swsetup_r+0xba>
 801a7a0:	4b25      	ldr	r3, [pc, #148]	; (801a838 <__swsetup_r+0xd4>)
 801a7a2:	429c      	cmp	r4, r3
 801a7a4:	d101      	bne.n	801a7aa <__swsetup_r+0x46>
 801a7a6:	68ac      	ldr	r4, [r5, #8]
 801a7a8:	e7eb      	b.n	801a782 <__swsetup_r+0x1e>
 801a7aa:	4b24      	ldr	r3, [pc, #144]	; (801a83c <__swsetup_r+0xd8>)
 801a7ac:	429c      	cmp	r4, r3
 801a7ae:	bf08      	it	eq
 801a7b0:	68ec      	ldreq	r4, [r5, #12]
 801a7b2:	e7e6      	b.n	801a782 <__swsetup_r+0x1e>
 801a7b4:	0758      	lsls	r0, r3, #29
 801a7b6:	d512      	bpl.n	801a7de <__swsetup_r+0x7a>
 801a7b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a7ba:	b141      	cbz	r1, 801a7ce <__swsetup_r+0x6a>
 801a7bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a7c0:	4299      	cmp	r1, r3
 801a7c2:	d002      	beq.n	801a7ca <__swsetup_r+0x66>
 801a7c4:	4630      	mov	r0, r6
 801a7c6:	f7ff fb27 	bl	8019e18 <_free_r>
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	6363      	str	r3, [r4, #52]	; 0x34
 801a7ce:	89a3      	ldrh	r3, [r4, #12]
 801a7d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a7d4:	81a3      	strh	r3, [r4, #12]
 801a7d6:	2300      	movs	r3, #0
 801a7d8:	6063      	str	r3, [r4, #4]
 801a7da:	6923      	ldr	r3, [r4, #16]
 801a7dc:	6023      	str	r3, [r4, #0]
 801a7de:	89a3      	ldrh	r3, [r4, #12]
 801a7e0:	f043 0308 	orr.w	r3, r3, #8
 801a7e4:	81a3      	strh	r3, [r4, #12]
 801a7e6:	6923      	ldr	r3, [r4, #16]
 801a7e8:	b94b      	cbnz	r3, 801a7fe <__swsetup_r+0x9a>
 801a7ea:	89a3      	ldrh	r3, [r4, #12]
 801a7ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a7f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a7f4:	d003      	beq.n	801a7fe <__swsetup_r+0x9a>
 801a7f6:	4621      	mov	r1, r4
 801a7f8:	4630      	mov	r0, r6
 801a7fa:	f000 fa09 	bl	801ac10 <__smakebuf_r>
 801a7fe:	89a0      	ldrh	r0, [r4, #12]
 801a800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a804:	f010 0301 	ands.w	r3, r0, #1
 801a808:	d00a      	beq.n	801a820 <__swsetup_r+0xbc>
 801a80a:	2300      	movs	r3, #0
 801a80c:	60a3      	str	r3, [r4, #8]
 801a80e:	6963      	ldr	r3, [r4, #20]
 801a810:	425b      	negs	r3, r3
 801a812:	61a3      	str	r3, [r4, #24]
 801a814:	6923      	ldr	r3, [r4, #16]
 801a816:	b943      	cbnz	r3, 801a82a <__swsetup_r+0xc6>
 801a818:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a81c:	d1ba      	bne.n	801a794 <__swsetup_r+0x30>
 801a81e:	bd70      	pop	{r4, r5, r6, pc}
 801a820:	0781      	lsls	r1, r0, #30
 801a822:	bf58      	it	pl
 801a824:	6963      	ldrpl	r3, [r4, #20]
 801a826:	60a3      	str	r3, [r4, #8]
 801a828:	e7f4      	b.n	801a814 <__swsetup_r+0xb0>
 801a82a:	2000      	movs	r0, #0
 801a82c:	e7f7      	b.n	801a81e <__swsetup_r+0xba>
 801a82e:	bf00      	nop
 801a830:	200000a4 	.word	0x200000a4
 801a834:	0801ce3c 	.word	0x0801ce3c
 801a838:	0801ce5c 	.word	0x0801ce5c
 801a83c:	0801ce1c 	.word	0x0801ce1c

0801a840 <abort>:
 801a840:	b508      	push	{r3, lr}
 801a842:	2006      	movs	r0, #6
 801a844:	f000 fa54 	bl	801acf0 <raise>
 801a848:	2001      	movs	r0, #1
 801a84a:	f7f0 fc13 	bl	800b074 <_exit>
	...

0801a850 <__sflush_r>:
 801a850:	898a      	ldrh	r2, [r1, #12]
 801a852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a856:	4605      	mov	r5, r0
 801a858:	0710      	lsls	r0, r2, #28
 801a85a:	460c      	mov	r4, r1
 801a85c:	d458      	bmi.n	801a910 <__sflush_r+0xc0>
 801a85e:	684b      	ldr	r3, [r1, #4]
 801a860:	2b00      	cmp	r3, #0
 801a862:	dc05      	bgt.n	801a870 <__sflush_r+0x20>
 801a864:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a866:	2b00      	cmp	r3, #0
 801a868:	dc02      	bgt.n	801a870 <__sflush_r+0x20>
 801a86a:	2000      	movs	r0, #0
 801a86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a872:	2e00      	cmp	r6, #0
 801a874:	d0f9      	beq.n	801a86a <__sflush_r+0x1a>
 801a876:	2300      	movs	r3, #0
 801a878:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a87c:	682f      	ldr	r7, [r5, #0]
 801a87e:	602b      	str	r3, [r5, #0]
 801a880:	d032      	beq.n	801a8e8 <__sflush_r+0x98>
 801a882:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a884:	89a3      	ldrh	r3, [r4, #12]
 801a886:	075a      	lsls	r2, r3, #29
 801a888:	d505      	bpl.n	801a896 <__sflush_r+0x46>
 801a88a:	6863      	ldr	r3, [r4, #4]
 801a88c:	1ac0      	subs	r0, r0, r3
 801a88e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a890:	b10b      	cbz	r3, 801a896 <__sflush_r+0x46>
 801a892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a894:	1ac0      	subs	r0, r0, r3
 801a896:	2300      	movs	r3, #0
 801a898:	4602      	mov	r2, r0
 801a89a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a89c:	6a21      	ldr	r1, [r4, #32]
 801a89e:	4628      	mov	r0, r5
 801a8a0:	47b0      	blx	r6
 801a8a2:	1c43      	adds	r3, r0, #1
 801a8a4:	89a3      	ldrh	r3, [r4, #12]
 801a8a6:	d106      	bne.n	801a8b6 <__sflush_r+0x66>
 801a8a8:	6829      	ldr	r1, [r5, #0]
 801a8aa:	291d      	cmp	r1, #29
 801a8ac:	d82c      	bhi.n	801a908 <__sflush_r+0xb8>
 801a8ae:	4a2a      	ldr	r2, [pc, #168]	; (801a958 <__sflush_r+0x108>)
 801a8b0:	40ca      	lsrs	r2, r1
 801a8b2:	07d6      	lsls	r6, r2, #31
 801a8b4:	d528      	bpl.n	801a908 <__sflush_r+0xb8>
 801a8b6:	2200      	movs	r2, #0
 801a8b8:	6062      	str	r2, [r4, #4]
 801a8ba:	04d9      	lsls	r1, r3, #19
 801a8bc:	6922      	ldr	r2, [r4, #16]
 801a8be:	6022      	str	r2, [r4, #0]
 801a8c0:	d504      	bpl.n	801a8cc <__sflush_r+0x7c>
 801a8c2:	1c42      	adds	r2, r0, #1
 801a8c4:	d101      	bne.n	801a8ca <__sflush_r+0x7a>
 801a8c6:	682b      	ldr	r3, [r5, #0]
 801a8c8:	b903      	cbnz	r3, 801a8cc <__sflush_r+0x7c>
 801a8ca:	6560      	str	r0, [r4, #84]	; 0x54
 801a8cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a8ce:	602f      	str	r7, [r5, #0]
 801a8d0:	2900      	cmp	r1, #0
 801a8d2:	d0ca      	beq.n	801a86a <__sflush_r+0x1a>
 801a8d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a8d8:	4299      	cmp	r1, r3
 801a8da:	d002      	beq.n	801a8e2 <__sflush_r+0x92>
 801a8dc:	4628      	mov	r0, r5
 801a8de:	f7ff fa9b 	bl	8019e18 <_free_r>
 801a8e2:	2000      	movs	r0, #0
 801a8e4:	6360      	str	r0, [r4, #52]	; 0x34
 801a8e6:	e7c1      	b.n	801a86c <__sflush_r+0x1c>
 801a8e8:	6a21      	ldr	r1, [r4, #32]
 801a8ea:	2301      	movs	r3, #1
 801a8ec:	4628      	mov	r0, r5
 801a8ee:	47b0      	blx	r6
 801a8f0:	1c41      	adds	r1, r0, #1
 801a8f2:	d1c7      	bne.n	801a884 <__sflush_r+0x34>
 801a8f4:	682b      	ldr	r3, [r5, #0]
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	d0c4      	beq.n	801a884 <__sflush_r+0x34>
 801a8fa:	2b1d      	cmp	r3, #29
 801a8fc:	d001      	beq.n	801a902 <__sflush_r+0xb2>
 801a8fe:	2b16      	cmp	r3, #22
 801a900:	d101      	bne.n	801a906 <__sflush_r+0xb6>
 801a902:	602f      	str	r7, [r5, #0]
 801a904:	e7b1      	b.n	801a86a <__sflush_r+0x1a>
 801a906:	89a3      	ldrh	r3, [r4, #12]
 801a908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a90c:	81a3      	strh	r3, [r4, #12]
 801a90e:	e7ad      	b.n	801a86c <__sflush_r+0x1c>
 801a910:	690f      	ldr	r7, [r1, #16]
 801a912:	2f00      	cmp	r7, #0
 801a914:	d0a9      	beq.n	801a86a <__sflush_r+0x1a>
 801a916:	0793      	lsls	r3, r2, #30
 801a918:	680e      	ldr	r6, [r1, #0]
 801a91a:	bf08      	it	eq
 801a91c:	694b      	ldreq	r3, [r1, #20]
 801a91e:	600f      	str	r7, [r1, #0]
 801a920:	bf18      	it	ne
 801a922:	2300      	movne	r3, #0
 801a924:	eba6 0807 	sub.w	r8, r6, r7
 801a928:	608b      	str	r3, [r1, #8]
 801a92a:	f1b8 0f00 	cmp.w	r8, #0
 801a92e:	dd9c      	ble.n	801a86a <__sflush_r+0x1a>
 801a930:	6a21      	ldr	r1, [r4, #32]
 801a932:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a934:	4643      	mov	r3, r8
 801a936:	463a      	mov	r2, r7
 801a938:	4628      	mov	r0, r5
 801a93a:	47b0      	blx	r6
 801a93c:	2800      	cmp	r0, #0
 801a93e:	dc06      	bgt.n	801a94e <__sflush_r+0xfe>
 801a940:	89a3      	ldrh	r3, [r4, #12]
 801a942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a946:	81a3      	strh	r3, [r4, #12]
 801a948:	f04f 30ff 	mov.w	r0, #4294967295
 801a94c:	e78e      	b.n	801a86c <__sflush_r+0x1c>
 801a94e:	4407      	add	r7, r0
 801a950:	eba8 0800 	sub.w	r8, r8, r0
 801a954:	e7e9      	b.n	801a92a <__sflush_r+0xda>
 801a956:	bf00      	nop
 801a958:	20400001 	.word	0x20400001

0801a95c <_fflush_r>:
 801a95c:	b538      	push	{r3, r4, r5, lr}
 801a95e:	690b      	ldr	r3, [r1, #16]
 801a960:	4605      	mov	r5, r0
 801a962:	460c      	mov	r4, r1
 801a964:	b913      	cbnz	r3, 801a96c <_fflush_r+0x10>
 801a966:	2500      	movs	r5, #0
 801a968:	4628      	mov	r0, r5
 801a96a:	bd38      	pop	{r3, r4, r5, pc}
 801a96c:	b118      	cbz	r0, 801a976 <_fflush_r+0x1a>
 801a96e:	6983      	ldr	r3, [r0, #24]
 801a970:	b90b      	cbnz	r3, 801a976 <_fflush_r+0x1a>
 801a972:	f000 f887 	bl	801aa84 <__sinit>
 801a976:	4b14      	ldr	r3, [pc, #80]	; (801a9c8 <_fflush_r+0x6c>)
 801a978:	429c      	cmp	r4, r3
 801a97a:	d11b      	bne.n	801a9b4 <_fflush_r+0x58>
 801a97c:	686c      	ldr	r4, [r5, #4]
 801a97e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d0ef      	beq.n	801a966 <_fflush_r+0xa>
 801a986:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a988:	07d0      	lsls	r0, r2, #31
 801a98a:	d404      	bmi.n	801a996 <_fflush_r+0x3a>
 801a98c:	0599      	lsls	r1, r3, #22
 801a98e:	d402      	bmi.n	801a996 <_fflush_r+0x3a>
 801a990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a992:	f000 f915 	bl	801abc0 <__retarget_lock_acquire_recursive>
 801a996:	4628      	mov	r0, r5
 801a998:	4621      	mov	r1, r4
 801a99a:	f7ff ff59 	bl	801a850 <__sflush_r>
 801a99e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a9a0:	07da      	lsls	r2, r3, #31
 801a9a2:	4605      	mov	r5, r0
 801a9a4:	d4e0      	bmi.n	801a968 <_fflush_r+0xc>
 801a9a6:	89a3      	ldrh	r3, [r4, #12]
 801a9a8:	059b      	lsls	r3, r3, #22
 801a9aa:	d4dd      	bmi.n	801a968 <_fflush_r+0xc>
 801a9ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a9ae:	f000 f908 	bl	801abc2 <__retarget_lock_release_recursive>
 801a9b2:	e7d9      	b.n	801a968 <_fflush_r+0xc>
 801a9b4:	4b05      	ldr	r3, [pc, #20]	; (801a9cc <_fflush_r+0x70>)
 801a9b6:	429c      	cmp	r4, r3
 801a9b8:	d101      	bne.n	801a9be <_fflush_r+0x62>
 801a9ba:	68ac      	ldr	r4, [r5, #8]
 801a9bc:	e7df      	b.n	801a97e <_fflush_r+0x22>
 801a9be:	4b04      	ldr	r3, [pc, #16]	; (801a9d0 <_fflush_r+0x74>)
 801a9c0:	429c      	cmp	r4, r3
 801a9c2:	bf08      	it	eq
 801a9c4:	68ec      	ldreq	r4, [r5, #12]
 801a9c6:	e7da      	b.n	801a97e <_fflush_r+0x22>
 801a9c8:	0801ce3c 	.word	0x0801ce3c
 801a9cc:	0801ce5c 	.word	0x0801ce5c
 801a9d0:	0801ce1c 	.word	0x0801ce1c

0801a9d4 <std>:
 801a9d4:	2300      	movs	r3, #0
 801a9d6:	b510      	push	{r4, lr}
 801a9d8:	4604      	mov	r4, r0
 801a9da:	e9c0 3300 	strd	r3, r3, [r0]
 801a9de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a9e2:	6083      	str	r3, [r0, #8]
 801a9e4:	8181      	strh	r1, [r0, #12]
 801a9e6:	6643      	str	r3, [r0, #100]	; 0x64
 801a9e8:	81c2      	strh	r2, [r0, #14]
 801a9ea:	6183      	str	r3, [r0, #24]
 801a9ec:	4619      	mov	r1, r3
 801a9ee:	2208      	movs	r2, #8
 801a9f0:	305c      	adds	r0, #92	; 0x5c
 801a9f2:	f7fb fddd 	bl	80165b0 <memset>
 801a9f6:	4b05      	ldr	r3, [pc, #20]	; (801aa0c <std+0x38>)
 801a9f8:	6263      	str	r3, [r4, #36]	; 0x24
 801a9fa:	4b05      	ldr	r3, [pc, #20]	; (801aa10 <std+0x3c>)
 801a9fc:	62a3      	str	r3, [r4, #40]	; 0x28
 801a9fe:	4b05      	ldr	r3, [pc, #20]	; (801aa14 <std+0x40>)
 801aa00:	62e3      	str	r3, [r4, #44]	; 0x2c
 801aa02:	4b05      	ldr	r3, [pc, #20]	; (801aa18 <std+0x44>)
 801aa04:	6224      	str	r4, [r4, #32]
 801aa06:	6323      	str	r3, [r4, #48]	; 0x30
 801aa08:	bd10      	pop	{r4, pc}
 801aa0a:	bf00      	nop
 801aa0c:	0801ad29 	.word	0x0801ad29
 801aa10:	0801ad4b 	.word	0x0801ad4b
 801aa14:	0801ad83 	.word	0x0801ad83
 801aa18:	0801ada7 	.word	0x0801ada7

0801aa1c <_cleanup_r>:
 801aa1c:	4901      	ldr	r1, [pc, #4]	; (801aa24 <_cleanup_r+0x8>)
 801aa1e:	f000 b8af 	b.w	801ab80 <_fwalk_reent>
 801aa22:	bf00      	nop
 801aa24:	0801a95d 	.word	0x0801a95d

0801aa28 <__sfmoreglue>:
 801aa28:	b570      	push	{r4, r5, r6, lr}
 801aa2a:	2268      	movs	r2, #104	; 0x68
 801aa2c:	1e4d      	subs	r5, r1, #1
 801aa2e:	4355      	muls	r5, r2
 801aa30:	460e      	mov	r6, r1
 801aa32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801aa36:	f7ff fa5b 	bl	8019ef0 <_malloc_r>
 801aa3a:	4604      	mov	r4, r0
 801aa3c:	b140      	cbz	r0, 801aa50 <__sfmoreglue+0x28>
 801aa3e:	2100      	movs	r1, #0
 801aa40:	e9c0 1600 	strd	r1, r6, [r0]
 801aa44:	300c      	adds	r0, #12
 801aa46:	60a0      	str	r0, [r4, #8]
 801aa48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801aa4c:	f7fb fdb0 	bl	80165b0 <memset>
 801aa50:	4620      	mov	r0, r4
 801aa52:	bd70      	pop	{r4, r5, r6, pc}

0801aa54 <__sfp_lock_acquire>:
 801aa54:	4801      	ldr	r0, [pc, #4]	; (801aa5c <__sfp_lock_acquire+0x8>)
 801aa56:	f000 b8b3 	b.w	801abc0 <__retarget_lock_acquire_recursive>
 801aa5a:	bf00      	nop
 801aa5c:	2001e93d 	.word	0x2001e93d

0801aa60 <__sfp_lock_release>:
 801aa60:	4801      	ldr	r0, [pc, #4]	; (801aa68 <__sfp_lock_release+0x8>)
 801aa62:	f000 b8ae 	b.w	801abc2 <__retarget_lock_release_recursive>
 801aa66:	bf00      	nop
 801aa68:	2001e93d 	.word	0x2001e93d

0801aa6c <__sinit_lock_acquire>:
 801aa6c:	4801      	ldr	r0, [pc, #4]	; (801aa74 <__sinit_lock_acquire+0x8>)
 801aa6e:	f000 b8a7 	b.w	801abc0 <__retarget_lock_acquire_recursive>
 801aa72:	bf00      	nop
 801aa74:	2001e93e 	.word	0x2001e93e

0801aa78 <__sinit_lock_release>:
 801aa78:	4801      	ldr	r0, [pc, #4]	; (801aa80 <__sinit_lock_release+0x8>)
 801aa7a:	f000 b8a2 	b.w	801abc2 <__retarget_lock_release_recursive>
 801aa7e:	bf00      	nop
 801aa80:	2001e93e 	.word	0x2001e93e

0801aa84 <__sinit>:
 801aa84:	b510      	push	{r4, lr}
 801aa86:	4604      	mov	r4, r0
 801aa88:	f7ff fff0 	bl	801aa6c <__sinit_lock_acquire>
 801aa8c:	69a3      	ldr	r3, [r4, #24]
 801aa8e:	b11b      	cbz	r3, 801aa98 <__sinit+0x14>
 801aa90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa94:	f7ff bff0 	b.w	801aa78 <__sinit_lock_release>
 801aa98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801aa9c:	6523      	str	r3, [r4, #80]	; 0x50
 801aa9e:	4b13      	ldr	r3, [pc, #76]	; (801aaec <__sinit+0x68>)
 801aaa0:	4a13      	ldr	r2, [pc, #76]	; (801aaf0 <__sinit+0x6c>)
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	62a2      	str	r2, [r4, #40]	; 0x28
 801aaa6:	42a3      	cmp	r3, r4
 801aaa8:	bf04      	itt	eq
 801aaaa:	2301      	moveq	r3, #1
 801aaac:	61a3      	streq	r3, [r4, #24]
 801aaae:	4620      	mov	r0, r4
 801aab0:	f000 f820 	bl	801aaf4 <__sfp>
 801aab4:	6060      	str	r0, [r4, #4]
 801aab6:	4620      	mov	r0, r4
 801aab8:	f000 f81c 	bl	801aaf4 <__sfp>
 801aabc:	60a0      	str	r0, [r4, #8]
 801aabe:	4620      	mov	r0, r4
 801aac0:	f000 f818 	bl	801aaf4 <__sfp>
 801aac4:	2200      	movs	r2, #0
 801aac6:	60e0      	str	r0, [r4, #12]
 801aac8:	2104      	movs	r1, #4
 801aaca:	6860      	ldr	r0, [r4, #4]
 801aacc:	f7ff ff82 	bl	801a9d4 <std>
 801aad0:	68a0      	ldr	r0, [r4, #8]
 801aad2:	2201      	movs	r2, #1
 801aad4:	2109      	movs	r1, #9
 801aad6:	f7ff ff7d 	bl	801a9d4 <std>
 801aada:	68e0      	ldr	r0, [r4, #12]
 801aadc:	2202      	movs	r2, #2
 801aade:	2112      	movs	r1, #18
 801aae0:	f7ff ff78 	bl	801a9d4 <std>
 801aae4:	2301      	movs	r3, #1
 801aae6:	61a3      	str	r3, [r4, #24]
 801aae8:	e7d2      	b.n	801aa90 <__sinit+0xc>
 801aaea:	bf00      	nop
 801aaec:	0801c9d8 	.word	0x0801c9d8
 801aaf0:	0801aa1d 	.word	0x0801aa1d

0801aaf4 <__sfp>:
 801aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaf6:	4607      	mov	r7, r0
 801aaf8:	f7ff ffac 	bl	801aa54 <__sfp_lock_acquire>
 801aafc:	4b1e      	ldr	r3, [pc, #120]	; (801ab78 <__sfp+0x84>)
 801aafe:	681e      	ldr	r6, [r3, #0]
 801ab00:	69b3      	ldr	r3, [r6, #24]
 801ab02:	b913      	cbnz	r3, 801ab0a <__sfp+0x16>
 801ab04:	4630      	mov	r0, r6
 801ab06:	f7ff ffbd 	bl	801aa84 <__sinit>
 801ab0a:	3648      	adds	r6, #72	; 0x48
 801ab0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ab10:	3b01      	subs	r3, #1
 801ab12:	d503      	bpl.n	801ab1c <__sfp+0x28>
 801ab14:	6833      	ldr	r3, [r6, #0]
 801ab16:	b30b      	cbz	r3, 801ab5c <__sfp+0x68>
 801ab18:	6836      	ldr	r6, [r6, #0]
 801ab1a:	e7f7      	b.n	801ab0c <__sfp+0x18>
 801ab1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ab20:	b9d5      	cbnz	r5, 801ab58 <__sfp+0x64>
 801ab22:	4b16      	ldr	r3, [pc, #88]	; (801ab7c <__sfp+0x88>)
 801ab24:	60e3      	str	r3, [r4, #12]
 801ab26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ab2a:	6665      	str	r5, [r4, #100]	; 0x64
 801ab2c:	f000 f847 	bl	801abbe <__retarget_lock_init_recursive>
 801ab30:	f7ff ff96 	bl	801aa60 <__sfp_lock_release>
 801ab34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ab38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ab3c:	6025      	str	r5, [r4, #0]
 801ab3e:	61a5      	str	r5, [r4, #24]
 801ab40:	2208      	movs	r2, #8
 801ab42:	4629      	mov	r1, r5
 801ab44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ab48:	f7fb fd32 	bl	80165b0 <memset>
 801ab4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ab50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ab54:	4620      	mov	r0, r4
 801ab56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab58:	3468      	adds	r4, #104	; 0x68
 801ab5a:	e7d9      	b.n	801ab10 <__sfp+0x1c>
 801ab5c:	2104      	movs	r1, #4
 801ab5e:	4638      	mov	r0, r7
 801ab60:	f7ff ff62 	bl	801aa28 <__sfmoreglue>
 801ab64:	4604      	mov	r4, r0
 801ab66:	6030      	str	r0, [r6, #0]
 801ab68:	2800      	cmp	r0, #0
 801ab6a:	d1d5      	bne.n	801ab18 <__sfp+0x24>
 801ab6c:	f7ff ff78 	bl	801aa60 <__sfp_lock_release>
 801ab70:	230c      	movs	r3, #12
 801ab72:	603b      	str	r3, [r7, #0]
 801ab74:	e7ee      	b.n	801ab54 <__sfp+0x60>
 801ab76:	bf00      	nop
 801ab78:	0801c9d8 	.word	0x0801c9d8
 801ab7c:	ffff0001 	.word	0xffff0001

0801ab80 <_fwalk_reent>:
 801ab80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab84:	4606      	mov	r6, r0
 801ab86:	4688      	mov	r8, r1
 801ab88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ab8c:	2700      	movs	r7, #0
 801ab8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ab92:	f1b9 0901 	subs.w	r9, r9, #1
 801ab96:	d505      	bpl.n	801aba4 <_fwalk_reent+0x24>
 801ab98:	6824      	ldr	r4, [r4, #0]
 801ab9a:	2c00      	cmp	r4, #0
 801ab9c:	d1f7      	bne.n	801ab8e <_fwalk_reent+0xe>
 801ab9e:	4638      	mov	r0, r7
 801aba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aba4:	89ab      	ldrh	r3, [r5, #12]
 801aba6:	2b01      	cmp	r3, #1
 801aba8:	d907      	bls.n	801abba <_fwalk_reent+0x3a>
 801abaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801abae:	3301      	adds	r3, #1
 801abb0:	d003      	beq.n	801abba <_fwalk_reent+0x3a>
 801abb2:	4629      	mov	r1, r5
 801abb4:	4630      	mov	r0, r6
 801abb6:	47c0      	blx	r8
 801abb8:	4307      	orrs	r7, r0
 801abba:	3568      	adds	r5, #104	; 0x68
 801abbc:	e7e9      	b.n	801ab92 <_fwalk_reent+0x12>

0801abbe <__retarget_lock_init_recursive>:
 801abbe:	4770      	bx	lr

0801abc0 <__retarget_lock_acquire_recursive>:
 801abc0:	4770      	bx	lr

0801abc2 <__retarget_lock_release_recursive>:
 801abc2:	4770      	bx	lr

0801abc4 <__swhatbuf_r>:
 801abc4:	b570      	push	{r4, r5, r6, lr}
 801abc6:	460e      	mov	r6, r1
 801abc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801abcc:	2900      	cmp	r1, #0
 801abce:	b096      	sub	sp, #88	; 0x58
 801abd0:	4614      	mov	r4, r2
 801abd2:	461d      	mov	r5, r3
 801abd4:	da08      	bge.n	801abe8 <__swhatbuf_r+0x24>
 801abd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801abda:	2200      	movs	r2, #0
 801abdc:	602a      	str	r2, [r5, #0]
 801abde:	061a      	lsls	r2, r3, #24
 801abe0:	d410      	bmi.n	801ac04 <__swhatbuf_r+0x40>
 801abe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801abe6:	e00e      	b.n	801ac06 <__swhatbuf_r+0x42>
 801abe8:	466a      	mov	r2, sp
 801abea:	f000 f903 	bl	801adf4 <_fstat_r>
 801abee:	2800      	cmp	r0, #0
 801abf0:	dbf1      	blt.n	801abd6 <__swhatbuf_r+0x12>
 801abf2:	9a01      	ldr	r2, [sp, #4]
 801abf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801abf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801abfc:	425a      	negs	r2, r3
 801abfe:	415a      	adcs	r2, r3
 801ac00:	602a      	str	r2, [r5, #0]
 801ac02:	e7ee      	b.n	801abe2 <__swhatbuf_r+0x1e>
 801ac04:	2340      	movs	r3, #64	; 0x40
 801ac06:	2000      	movs	r0, #0
 801ac08:	6023      	str	r3, [r4, #0]
 801ac0a:	b016      	add	sp, #88	; 0x58
 801ac0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ac10 <__smakebuf_r>:
 801ac10:	898b      	ldrh	r3, [r1, #12]
 801ac12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ac14:	079d      	lsls	r5, r3, #30
 801ac16:	4606      	mov	r6, r0
 801ac18:	460c      	mov	r4, r1
 801ac1a:	d507      	bpl.n	801ac2c <__smakebuf_r+0x1c>
 801ac1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ac20:	6023      	str	r3, [r4, #0]
 801ac22:	6123      	str	r3, [r4, #16]
 801ac24:	2301      	movs	r3, #1
 801ac26:	6163      	str	r3, [r4, #20]
 801ac28:	b002      	add	sp, #8
 801ac2a:	bd70      	pop	{r4, r5, r6, pc}
 801ac2c:	ab01      	add	r3, sp, #4
 801ac2e:	466a      	mov	r2, sp
 801ac30:	f7ff ffc8 	bl	801abc4 <__swhatbuf_r>
 801ac34:	9900      	ldr	r1, [sp, #0]
 801ac36:	4605      	mov	r5, r0
 801ac38:	4630      	mov	r0, r6
 801ac3a:	f7ff f959 	bl	8019ef0 <_malloc_r>
 801ac3e:	b948      	cbnz	r0, 801ac54 <__smakebuf_r+0x44>
 801ac40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ac44:	059a      	lsls	r2, r3, #22
 801ac46:	d4ef      	bmi.n	801ac28 <__smakebuf_r+0x18>
 801ac48:	f023 0303 	bic.w	r3, r3, #3
 801ac4c:	f043 0302 	orr.w	r3, r3, #2
 801ac50:	81a3      	strh	r3, [r4, #12]
 801ac52:	e7e3      	b.n	801ac1c <__smakebuf_r+0xc>
 801ac54:	4b0d      	ldr	r3, [pc, #52]	; (801ac8c <__smakebuf_r+0x7c>)
 801ac56:	62b3      	str	r3, [r6, #40]	; 0x28
 801ac58:	89a3      	ldrh	r3, [r4, #12]
 801ac5a:	6020      	str	r0, [r4, #0]
 801ac5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ac60:	81a3      	strh	r3, [r4, #12]
 801ac62:	9b00      	ldr	r3, [sp, #0]
 801ac64:	6163      	str	r3, [r4, #20]
 801ac66:	9b01      	ldr	r3, [sp, #4]
 801ac68:	6120      	str	r0, [r4, #16]
 801ac6a:	b15b      	cbz	r3, 801ac84 <__smakebuf_r+0x74>
 801ac6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ac70:	4630      	mov	r0, r6
 801ac72:	f000 f8d1 	bl	801ae18 <_isatty_r>
 801ac76:	b128      	cbz	r0, 801ac84 <__smakebuf_r+0x74>
 801ac78:	89a3      	ldrh	r3, [r4, #12]
 801ac7a:	f023 0303 	bic.w	r3, r3, #3
 801ac7e:	f043 0301 	orr.w	r3, r3, #1
 801ac82:	81a3      	strh	r3, [r4, #12]
 801ac84:	89a0      	ldrh	r0, [r4, #12]
 801ac86:	4305      	orrs	r5, r0
 801ac88:	81a5      	strh	r5, [r4, #12]
 801ac8a:	e7cd      	b.n	801ac28 <__smakebuf_r+0x18>
 801ac8c:	0801aa1d 	.word	0x0801aa1d

0801ac90 <_malloc_usable_size_r>:
 801ac90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ac94:	1f18      	subs	r0, r3, #4
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	bfbc      	itt	lt
 801ac9a:	580b      	ldrlt	r3, [r1, r0]
 801ac9c:	18c0      	addlt	r0, r0, r3
 801ac9e:	4770      	bx	lr

0801aca0 <_raise_r>:
 801aca0:	291f      	cmp	r1, #31
 801aca2:	b538      	push	{r3, r4, r5, lr}
 801aca4:	4604      	mov	r4, r0
 801aca6:	460d      	mov	r5, r1
 801aca8:	d904      	bls.n	801acb4 <_raise_r+0x14>
 801acaa:	2316      	movs	r3, #22
 801acac:	6003      	str	r3, [r0, #0]
 801acae:	f04f 30ff 	mov.w	r0, #4294967295
 801acb2:	bd38      	pop	{r3, r4, r5, pc}
 801acb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801acb6:	b112      	cbz	r2, 801acbe <_raise_r+0x1e>
 801acb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801acbc:	b94b      	cbnz	r3, 801acd2 <_raise_r+0x32>
 801acbe:	4620      	mov	r0, r4
 801acc0:	f000 f830 	bl	801ad24 <_getpid_r>
 801acc4:	462a      	mov	r2, r5
 801acc6:	4601      	mov	r1, r0
 801acc8:	4620      	mov	r0, r4
 801acca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801acce:	f000 b817 	b.w	801ad00 <_kill_r>
 801acd2:	2b01      	cmp	r3, #1
 801acd4:	d00a      	beq.n	801acec <_raise_r+0x4c>
 801acd6:	1c59      	adds	r1, r3, #1
 801acd8:	d103      	bne.n	801ace2 <_raise_r+0x42>
 801acda:	2316      	movs	r3, #22
 801acdc:	6003      	str	r3, [r0, #0]
 801acde:	2001      	movs	r0, #1
 801ace0:	e7e7      	b.n	801acb2 <_raise_r+0x12>
 801ace2:	2400      	movs	r4, #0
 801ace4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ace8:	4628      	mov	r0, r5
 801acea:	4798      	blx	r3
 801acec:	2000      	movs	r0, #0
 801acee:	e7e0      	b.n	801acb2 <_raise_r+0x12>

0801acf0 <raise>:
 801acf0:	4b02      	ldr	r3, [pc, #8]	; (801acfc <raise+0xc>)
 801acf2:	4601      	mov	r1, r0
 801acf4:	6818      	ldr	r0, [r3, #0]
 801acf6:	f7ff bfd3 	b.w	801aca0 <_raise_r>
 801acfa:	bf00      	nop
 801acfc:	200000a4 	.word	0x200000a4

0801ad00 <_kill_r>:
 801ad00:	b538      	push	{r3, r4, r5, lr}
 801ad02:	4d07      	ldr	r5, [pc, #28]	; (801ad20 <_kill_r+0x20>)
 801ad04:	2300      	movs	r3, #0
 801ad06:	4604      	mov	r4, r0
 801ad08:	4608      	mov	r0, r1
 801ad0a:	4611      	mov	r1, r2
 801ad0c:	602b      	str	r3, [r5, #0]
 801ad0e:	f7f0 f9a1 	bl	800b054 <_kill>
 801ad12:	1c43      	adds	r3, r0, #1
 801ad14:	d102      	bne.n	801ad1c <_kill_r+0x1c>
 801ad16:	682b      	ldr	r3, [r5, #0]
 801ad18:	b103      	cbz	r3, 801ad1c <_kill_r+0x1c>
 801ad1a:	6023      	str	r3, [r4, #0]
 801ad1c:	bd38      	pop	{r3, r4, r5, pc}
 801ad1e:	bf00      	nop
 801ad20:	2001e938 	.word	0x2001e938

0801ad24 <_getpid_r>:
 801ad24:	f7f0 b98e 	b.w	800b044 <_getpid>

0801ad28 <__sread>:
 801ad28:	b510      	push	{r4, lr}
 801ad2a:	460c      	mov	r4, r1
 801ad2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad30:	f000 f894 	bl	801ae5c <_read_r>
 801ad34:	2800      	cmp	r0, #0
 801ad36:	bfab      	itete	ge
 801ad38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ad3a:	89a3      	ldrhlt	r3, [r4, #12]
 801ad3c:	181b      	addge	r3, r3, r0
 801ad3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ad42:	bfac      	ite	ge
 801ad44:	6563      	strge	r3, [r4, #84]	; 0x54
 801ad46:	81a3      	strhlt	r3, [r4, #12]
 801ad48:	bd10      	pop	{r4, pc}

0801ad4a <__swrite>:
 801ad4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad4e:	461f      	mov	r7, r3
 801ad50:	898b      	ldrh	r3, [r1, #12]
 801ad52:	05db      	lsls	r3, r3, #23
 801ad54:	4605      	mov	r5, r0
 801ad56:	460c      	mov	r4, r1
 801ad58:	4616      	mov	r6, r2
 801ad5a:	d505      	bpl.n	801ad68 <__swrite+0x1e>
 801ad5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad60:	2302      	movs	r3, #2
 801ad62:	2200      	movs	r2, #0
 801ad64:	f000 f868 	bl	801ae38 <_lseek_r>
 801ad68:	89a3      	ldrh	r3, [r4, #12]
 801ad6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ad6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ad72:	81a3      	strh	r3, [r4, #12]
 801ad74:	4632      	mov	r2, r6
 801ad76:	463b      	mov	r3, r7
 801ad78:	4628      	mov	r0, r5
 801ad7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad7e:	f000 b817 	b.w	801adb0 <_write_r>

0801ad82 <__sseek>:
 801ad82:	b510      	push	{r4, lr}
 801ad84:	460c      	mov	r4, r1
 801ad86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad8a:	f000 f855 	bl	801ae38 <_lseek_r>
 801ad8e:	1c43      	adds	r3, r0, #1
 801ad90:	89a3      	ldrh	r3, [r4, #12]
 801ad92:	bf15      	itete	ne
 801ad94:	6560      	strne	r0, [r4, #84]	; 0x54
 801ad96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ad9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ad9e:	81a3      	strheq	r3, [r4, #12]
 801ada0:	bf18      	it	ne
 801ada2:	81a3      	strhne	r3, [r4, #12]
 801ada4:	bd10      	pop	{r4, pc}

0801ada6 <__sclose>:
 801ada6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801adaa:	f000 b813 	b.w	801add4 <_close_r>
	...

0801adb0 <_write_r>:
 801adb0:	b538      	push	{r3, r4, r5, lr}
 801adb2:	4d07      	ldr	r5, [pc, #28]	; (801add0 <_write_r+0x20>)
 801adb4:	4604      	mov	r4, r0
 801adb6:	4608      	mov	r0, r1
 801adb8:	4611      	mov	r1, r2
 801adba:	2200      	movs	r2, #0
 801adbc:	602a      	str	r2, [r5, #0]
 801adbe:	461a      	mov	r2, r3
 801adc0:	f7f0 f97f 	bl	800b0c2 <_write>
 801adc4:	1c43      	adds	r3, r0, #1
 801adc6:	d102      	bne.n	801adce <_write_r+0x1e>
 801adc8:	682b      	ldr	r3, [r5, #0]
 801adca:	b103      	cbz	r3, 801adce <_write_r+0x1e>
 801adcc:	6023      	str	r3, [r4, #0]
 801adce:	bd38      	pop	{r3, r4, r5, pc}
 801add0:	2001e938 	.word	0x2001e938

0801add4 <_close_r>:
 801add4:	b538      	push	{r3, r4, r5, lr}
 801add6:	4d06      	ldr	r5, [pc, #24]	; (801adf0 <_close_r+0x1c>)
 801add8:	2300      	movs	r3, #0
 801adda:	4604      	mov	r4, r0
 801addc:	4608      	mov	r0, r1
 801adde:	602b      	str	r3, [r5, #0]
 801ade0:	f7f0 f98b 	bl	800b0fa <_close>
 801ade4:	1c43      	adds	r3, r0, #1
 801ade6:	d102      	bne.n	801adee <_close_r+0x1a>
 801ade8:	682b      	ldr	r3, [r5, #0]
 801adea:	b103      	cbz	r3, 801adee <_close_r+0x1a>
 801adec:	6023      	str	r3, [r4, #0]
 801adee:	bd38      	pop	{r3, r4, r5, pc}
 801adf0:	2001e938 	.word	0x2001e938

0801adf4 <_fstat_r>:
 801adf4:	b538      	push	{r3, r4, r5, lr}
 801adf6:	4d07      	ldr	r5, [pc, #28]	; (801ae14 <_fstat_r+0x20>)
 801adf8:	2300      	movs	r3, #0
 801adfa:	4604      	mov	r4, r0
 801adfc:	4608      	mov	r0, r1
 801adfe:	4611      	mov	r1, r2
 801ae00:	602b      	str	r3, [r5, #0]
 801ae02:	f7f0 f986 	bl	800b112 <_fstat>
 801ae06:	1c43      	adds	r3, r0, #1
 801ae08:	d102      	bne.n	801ae10 <_fstat_r+0x1c>
 801ae0a:	682b      	ldr	r3, [r5, #0]
 801ae0c:	b103      	cbz	r3, 801ae10 <_fstat_r+0x1c>
 801ae0e:	6023      	str	r3, [r4, #0]
 801ae10:	bd38      	pop	{r3, r4, r5, pc}
 801ae12:	bf00      	nop
 801ae14:	2001e938 	.word	0x2001e938

0801ae18 <_isatty_r>:
 801ae18:	b538      	push	{r3, r4, r5, lr}
 801ae1a:	4d06      	ldr	r5, [pc, #24]	; (801ae34 <_isatty_r+0x1c>)
 801ae1c:	2300      	movs	r3, #0
 801ae1e:	4604      	mov	r4, r0
 801ae20:	4608      	mov	r0, r1
 801ae22:	602b      	str	r3, [r5, #0]
 801ae24:	f7f0 f985 	bl	800b132 <_isatty>
 801ae28:	1c43      	adds	r3, r0, #1
 801ae2a:	d102      	bne.n	801ae32 <_isatty_r+0x1a>
 801ae2c:	682b      	ldr	r3, [r5, #0]
 801ae2e:	b103      	cbz	r3, 801ae32 <_isatty_r+0x1a>
 801ae30:	6023      	str	r3, [r4, #0]
 801ae32:	bd38      	pop	{r3, r4, r5, pc}
 801ae34:	2001e938 	.word	0x2001e938

0801ae38 <_lseek_r>:
 801ae38:	b538      	push	{r3, r4, r5, lr}
 801ae3a:	4d07      	ldr	r5, [pc, #28]	; (801ae58 <_lseek_r+0x20>)
 801ae3c:	4604      	mov	r4, r0
 801ae3e:	4608      	mov	r0, r1
 801ae40:	4611      	mov	r1, r2
 801ae42:	2200      	movs	r2, #0
 801ae44:	602a      	str	r2, [r5, #0]
 801ae46:	461a      	mov	r2, r3
 801ae48:	f7f0 f97e 	bl	800b148 <_lseek>
 801ae4c:	1c43      	adds	r3, r0, #1
 801ae4e:	d102      	bne.n	801ae56 <_lseek_r+0x1e>
 801ae50:	682b      	ldr	r3, [r5, #0]
 801ae52:	b103      	cbz	r3, 801ae56 <_lseek_r+0x1e>
 801ae54:	6023      	str	r3, [r4, #0]
 801ae56:	bd38      	pop	{r3, r4, r5, pc}
 801ae58:	2001e938 	.word	0x2001e938

0801ae5c <_read_r>:
 801ae5c:	b538      	push	{r3, r4, r5, lr}
 801ae5e:	4d07      	ldr	r5, [pc, #28]	; (801ae7c <_read_r+0x20>)
 801ae60:	4604      	mov	r4, r0
 801ae62:	4608      	mov	r0, r1
 801ae64:	4611      	mov	r1, r2
 801ae66:	2200      	movs	r2, #0
 801ae68:	602a      	str	r2, [r5, #0]
 801ae6a:	461a      	mov	r2, r3
 801ae6c:	f7f0 f90c 	bl	800b088 <_read>
 801ae70:	1c43      	adds	r3, r0, #1
 801ae72:	d102      	bne.n	801ae7a <_read_r+0x1e>
 801ae74:	682b      	ldr	r3, [r5, #0]
 801ae76:	b103      	cbz	r3, 801ae7a <_read_r+0x1e>
 801ae78:	6023      	str	r3, [r4, #0]
 801ae7a:	bd38      	pop	{r3, r4, r5, pc}
 801ae7c:	2001e938 	.word	0x2001e938

0801ae80 <cos>:
 801ae80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ae82:	ec53 2b10 	vmov	r2, r3, d0
 801ae86:	4826      	ldr	r0, [pc, #152]	; (801af20 <cos+0xa0>)
 801ae88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ae8c:	4281      	cmp	r1, r0
 801ae8e:	dc06      	bgt.n	801ae9e <cos+0x1e>
 801ae90:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801af18 <cos+0x98>
 801ae94:	b005      	add	sp, #20
 801ae96:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae9a:	f000 baa9 	b.w	801b3f0 <__kernel_cos>
 801ae9e:	4821      	ldr	r0, [pc, #132]	; (801af24 <cos+0xa4>)
 801aea0:	4281      	cmp	r1, r0
 801aea2:	dd09      	ble.n	801aeb8 <cos+0x38>
 801aea4:	ee10 0a10 	vmov	r0, s0
 801aea8:	4619      	mov	r1, r3
 801aeaa:	f7e5 fa05 	bl	80002b8 <__aeabi_dsub>
 801aeae:	ec41 0b10 	vmov	d0, r0, r1
 801aeb2:	b005      	add	sp, #20
 801aeb4:	f85d fb04 	ldr.w	pc, [sp], #4
 801aeb8:	4668      	mov	r0, sp
 801aeba:	f000 f88d 	bl	801afd8 <__ieee754_rem_pio2>
 801aebe:	f000 0003 	and.w	r0, r0, #3
 801aec2:	2801      	cmp	r0, #1
 801aec4:	d00b      	beq.n	801aede <cos+0x5e>
 801aec6:	2802      	cmp	r0, #2
 801aec8:	d016      	beq.n	801aef8 <cos+0x78>
 801aeca:	b9e0      	cbnz	r0, 801af06 <cos+0x86>
 801aecc:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aed0:	ed9d 0b00 	vldr	d0, [sp]
 801aed4:	f000 fa8c 	bl	801b3f0 <__kernel_cos>
 801aed8:	ec51 0b10 	vmov	r0, r1, d0
 801aedc:	e7e7      	b.n	801aeae <cos+0x2e>
 801aede:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aee2:	ed9d 0b00 	vldr	d0, [sp]
 801aee6:	f000 fe9b 	bl	801bc20 <__kernel_sin>
 801aeea:	ec53 2b10 	vmov	r2, r3, d0
 801aeee:	ee10 0a10 	vmov	r0, s0
 801aef2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801aef6:	e7da      	b.n	801aeae <cos+0x2e>
 801aef8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aefc:	ed9d 0b00 	vldr	d0, [sp]
 801af00:	f000 fa76 	bl	801b3f0 <__kernel_cos>
 801af04:	e7f1      	b.n	801aeea <cos+0x6a>
 801af06:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af0a:	ed9d 0b00 	vldr	d0, [sp]
 801af0e:	2001      	movs	r0, #1
 801af10:	f000 fe86 	bl	801bc20 <__kernel_sin>
 801af14:	e7e0      	b.n	801aed8 <cos+0x58>
 801af16:	bf00      	nop
	...
 801af20:	3fe921fb 	.word	0x3fe921fb
 801af24:	7fefffff 	.word	0x7fefffff

0801af28 <sin>:
 801af28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801af2a:	ec53 2b10 	vmov	r2, r3, d0
 801af2e:	4828      	ldr	r0, [pc, #160]	; (801afd0 <sin+0xa8>)
 801af30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801af34:	4281      	cmp	r1, r0
 801af36:	dc07      	bgt.n	801af48 <sin+0x20>
 801af38:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801afc8 <sin+0xa0>
 801af3c:	2000      	movs	r0, #0
 801af3e:	b005      	add	sp, #20
 801af40:	f85d eb04 	ldr.w	lr, [sp], #4
 801af44:	f000 be6c 	b.w	801bc20 <__kernel_sin>
 801af48:	4822      	ldr	r0, [pc, #136]	; (801afd4 <sin+0xac>)
 801af4a:	4281      	cmp	r1, r0
 801af4c:	dd09      	ble.n	801af62 <sin+0x3a>
 801af4e:	ee10 0a10 	vmov	r0, s0
 801af52:	4619      	mov	r1, r3
 801af54:	f7e5 f9b0 	bl	80002b8 <__aeabi_dsub>
 801af58:	ec41 0b10 	vmov	d0, r0, r1
 801af5c:	b005      	add	sp, #20
 801af5e:	f85d fb04 	ldr.w	pc, [sp], #4
 801af62:	4668      	mov	r0, sp
 801af64:	f000 f838 	bl	801afd8 <__ieee754_rem_pio2>
 801af68:	f000 0003 	and.w	r0, r0, #3
 801af6c:	2801      	cmp	r0, #1
 801af6e:	d00c      	beq.n	801af8a <sin+0x62>
 801af70:	2802      	cmp	r0, #2
 801af72:	d011      	beq.n	801af98 <sin+0x70>
 801af74:	b9f0      	cbnz	r0, 801afb4 <sin+0x8c>
 801af76:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af7a:	ed9d 0b00 	vldr	d0, [sp]
 801af7e:	2001      	movs	r0, #1
 801af80:	f000 fe4e 	bl	801bc20 <__kernel_sin>
 801af84:	ec51 0b10 	vmov	r0, r1, d0
 801af88:	e7e6      	b.n	801af58 <sin+0x30>
 801af8a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af8e:	ed9d 0b00 	vldr	d0, [sp]
 801af92:	f000 fa2d 	bl	801b3f0 <__kernel_cos>
 801af96:	e7f5      	b.n	801af84 <sin+0x5c>
 801af98:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af9c:	ed9d 0b00 	vldr	d0, [sp]
 801afa0:	2001      	movs	r0, #1
 801afa2:	f000 fe3d 	bl	801bc20 <__kernel_sin>
 801afa6:	ec53 2b10 	vmov	r2, r3, d0
 801afaa:	ee10 0a10 	vmov	r0, s0
 801afae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801afb2:	e7d1      	b.n	801af58 <sin+0x30>
 801afb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801afb8:	ed9d 0b00 	vldr	d0, [sp]
 801afbc:	f000 fa18 	bl	801b3f0 <__kernel_cos>
 801afc0:	e7f1      	b.n	801afa6 <sin+0x7e>
 801afc2:	bf00      	nop
 801afc4:	f3af 8000 	nop.w
	...
 801afd0:	3fe921fb 	.word	0x3fe921fb
 801afd4:	7fefffff 	.word	0x7fefffff

0801afd8 <__ieee754_rem_pio2>:
 801afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afdc:	ed2d 8b02 	vpush	{d8}
 801afe0:	ec55 4b10 	vmov	r4, r5, d0
 801afe4:	4bca      	ldr	r3, [pc, #808]	; (801b310 <__ieee754_rem_pio2+0x338>)
 801afe6:	b08b      	sub	sp, #44	; 0x2c
 801afe8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801afec:	4598      	cmp	r8, r3
 801afee:	4682      	mov	sl, r0
 801aff0:	9502      	str	r5, [sp, #8]
 801aff2:	dc08      	bgt.n	801b006 <__ieee754_rem_pio2+0x2e>
 801aff4:	2200      	movs	r2, #0
 801aff6:	2300      	movs	r3, #0
 801aff8:	ed80 0b00 	vstr	d0, [r0]
 801affc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b000:	f04f 0b00 	mov.w	fp, #0
 801b004:	e028      	b.n	801b058 <__ieee754_rem_pio2+0x80>
 801b006:	4bc3      	ldr	r3, [pc, #780]	; (801b314 <__ieee754_rem_pio2+0x33c>)
 801b008:	4598      	cmp	r8, r3
 801b00a:	dc78      	bgt.n	801b0fe <__ieee754_rem_pio2+0x126>
 801b00c:	9b02      	ldr	r3, [sp, #8]
 801b00e:	4ec2      	ldr	r6, [pc, #776]	; (801b318 <__ieee754_rem_pio2+0x340>)
 801b010:	2b00      	cmp	r3, #0
 801b012:	ee10 0a10 	vmov	r0, s0
 801b016:	a3b0      	add	r3, pc, #704	; (adr r3, 801b2d8 <__ieee754_rem_pio2+0x300>)
 801b018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b01c:	4629      	mov	r1, r5
 801b01e:	dd39      	ble.n	801b094 <__ieee754_rem_pio2+0xbc>
 801b020:	f7e5 f94a 	bl	80002b8 <__aeabi_dsub>
 801b024:	45b0      	cmp	r8, r6
 801b026:	4604      	mov	r4, r0
 801b028:	460d      	mov	r5, r1
 801b02a:	d01b      	beq.n	801b064 <__ieee754_rem_pio2+0x8c>
 801b02c:	a3ac      	add	r3, pc, #688	; (adr r3, 801b2e0 <__ieee754_rem_pio2+0x308>)
 801b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b032:	f7e5 f941 	bl	80002b8 <__aeabi_dsub>
 801b036:	4602      	mov	r2, r0
 801b038:	460b      	mov	r3, r1
 801b03a:	e9ca 2300 	strd	r2, r3, [sl]
 801b03e:	4620      	mov	r0, r4
 801b040:	4629      	mov	r1, r5
 801b042:	f7e5 f939 	bl	80002b8 <__aeabi_dsub>
 801b046:	a3a6      	add	r3, pc, #664	; (adr r3, 801b2e0 <__ieee754_rem_pio2+0x308>)
 801b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b04c:	f7e5 f934 	bl	80002b8 <__aeabi_dsub>
 801b050:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b054:	f04f 0b01 	mov.w	fp, #1
 801b058:	4658      	mov	r0, fp
 801b05a:	b00b      	add	sp, #44	; 0x2c
 801b05c:	ecbd 8b02 	vpop	{d8}
 801b060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b064:	a3a0      	add	r3, pc, #640	; (adr r3, 801b2e8 <__ieee754_rem_pio2+0x310>)
 801b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b06a:	f7e5 f925 	bl	80002b8 <__aeabi_dsub>
 801b06e:	a3a0      	add	r3, pc, #640	; (adr r3, 801b2f0 <__ieee754_rem_pio2+0x318>)
 801b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b074:	4604      	mov	r4, r0
 801b076:	460d      	mov	r5, r1
 801b078:	f7e5 f91e 	bl	80002b8 <__aeabi_dsub>
 801b07c:	4602      	mov	r2, r0
 801b07e:	460b      	mov	r3, r1
 801b080:	e9ca 2300 	strd	r2, r3, [sl]
 801b084:	4620      	mov	r0, r4
 801b086:	4629      	mov	r1, r5
 801b088:	f7e5 f916 	bl	80002b8 <__aeabi_dsub>
 801b08c:	a398      	add	r3, pc, #608	; (adr r3, 801b2f0 <__ieee754_rem_pio2+0x318>)
 801b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b092:	e7db      	b.n	801b04c <__ieee754_rem_pio2+0x74>
 801b094:	f7e5 f912 	bl	80002bc <__adddf3>
 801b098:	45b0      	cmp	r8, r6
 801b09a:	4604      	mov	r4, r0
 801b09c:	460d      	mov	r5, r1
 801b09e:	d016      	beq.n	801b0ce <__ieee754_rem_pio2+0xf6>
 801b0a0:	a38f      	add	r3, pc, #572	; (adr r3, 801b2e0 <__ieee754_rem_pio2+0x308>)
 801b0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0a6:	f7e5 f909 	bl	80002bc <__adddf3>
 801b0aa:	4602      	mov	r2, r0
 801b0ac:	460b      	mov	r3, r1
 801b0ae:	e9ca 2300 	strd	r2, r3, [sl]
 801b0b2:	4620      	mov	r0, r4
 801b0b4:	4629      	mov	r1, r5
 801b0b6:	f7e5 f8ff 	bl	80002b8 <__aeabi_dsub>
 801b0ba:	a389      	add	r3, pc, #548	; (adr r3, 801b2e0 <__ieee754_rem_pio2+0x308>)
 801b0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0c0:	f7e5 f8fc 	bl	80002bc <__adddf3>
 801b0c4:	f04f 3bff 	mov.w	fp, #4294967295
 801b0c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b0cc:	e7c4      	b.n	801b058 <__ieee754_rem_pio2+0x80>
 801b0ce:	a386      	add	r3, pc, #536	; (adr r3, 801b2e8 <__ieee754_rem_pio2+0x310>)
 801b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0d4:	f7e5 f8f2 	bl	80002bc <__adddf3>
 801b0d8:	a385      	add	r3, pc, #532	; (adr r3, 801b2f0 <__ieee754_rem_pio2+0x318>)
 801b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0de:	4604      	mov	r4, r0
 801b0e0:	460d      	mov	r5, r1
 801b0e2:	f7e5 f8eb 	bl	80002bc <__adddf3>
 801b0e6:	4602      	mov	r2, r0
 801b0e8:	460b      	mov	r3, r1
 801b0ea:	e9ca 2300 	strd	r2, r3, [sl]
 801b0ee:	4620      	mov	r0, r4
 801b0f0:	4629      	mov	r1, r5
 801b0f2:	f7e5 f8e1 	bl	80002b8 <__aeabi_dsub>
 801b0f6:	a37e      	add	r3, pc, #504	; (adr r3, 801b2f0 <__ieee754_rem_pio2+0x318>)
 801b0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0fc:	e7e0      	b.n	801b0c0 <__ieee754_rem_pio2+0xe8>
 801b0fe:	4b87      	ldr	r3, [pc, #540]	; (801b31c <__ieee754_rem_pio2+0x344>)
 801b100:	4598      	cmp	r8, r3
 801b102:	f300 80d9 	bgt.w	801b2b8 <__ieee754_rem_pio2+0x2e0>
 801b106:	f000 fe49 	bl	801bd9c <fabs>
 801b10a:	ec55 4b10 	vmov	r4, r5, d0
 801b10e:	ee10 0a10 	vmov	r0, s0
 801b112:	a379      	add	r3, pc, #484	; (adr r3, 801b2f8 <__ieee754_rem_pio2+0x320>)
 801b114:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b118:	4629      	mov	r1, r5
 801b11a:	f7e5 fa85 	bl	8000628 <__aeabi_dmul>
 801b11e:	4b80      	ldr	r3, [pc, #512]	; (801b320 <__ieee754_rem_pio2+0x348>)
 801b120:	2200      	movs	r2, #0
 801b122:	f7e5 f8cb 	bl	80002bc <__adddf3>
 801b126:	f7e5 fd2f 	bl	8000b88 <__aeabi_d2iz>
 801b12a:	4683      	mov	fp, r0
 801b12c:	f7e5 fa12 	bl	8000554 <__aeabi_i2d>
 801b130:	4602      	mov	r2, r0
 801b132:	460b      	mov	r3, r1
 801b134:	ec43 2b18 	vmov	d8, r2, r3
 801b138:	a367      	add	r3, pc, #412	; (adr r3, 801b2d8 <__ieee754_rem_pio2+0x300>)
 801b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b13e:	f7e5 fa73 	bl	8000628 <__aeabi_dmul>
 801b142:	4602      	mov	r2, r0
 801b144:	460b      	mov	r3, r1
 801b146:	4620      	mov	r0, r4
 801b148:	4629      	mov	r1, r5
 801b14a:	f7e5 f8b5 	bl	80002b8 <__aeabi_dsub>
 801b14e:	a364      	add	r3, pc, #400	; (adr r3, 801b2e0 <__ieee754_rem_pio2+0x308>)
 801b150:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b154:	4606      	mov	r6, r0
 801b156:	460f      	mov	r7, r1
 801b158:	ec51 0b18 	vmov	r0, r1, d8
 801b15c:	f7e5 fa64 	bl	8000628 <__aeabi_dmul>
 801b160:	f1bb 0f1f 	cmp.w	fp, #31
 801b164:	4604      	mov	r4, r0
 801b166:	460d      	mov	r5, r1
 801b168:	dc0d      	bgt.n	801b186 <__ieee754_rem_pio2+0x1ae>
 801b16a:	4b6e      	ldr	r3, [pc, #440]	; (801b324 <__ieee754_rem_pio2+0x34c>)
 801b16c:	f10b 32ff 	add.w	r2, fp, #4294967295
 801b170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b174:	4543      	cmp	r3, r8
 801b176:	d006      	beq.n	801b186 <__ieee754_rem_pio2+0x1ae>
 801b178:	4622      	mov	r2, r4
 801b17a:	462b      	mov	r3, r5
 801b17c:	4630      	mov	r0, r6
 801b17e:	4639      	mov	r1, r7
 801b180:	f7e5 f89a 	bl	80002b8 <__aeabi_dsub>
 801b184:	e00f      	b.n	801b1a6 <__ieee754_rem_pio2+0x1ce>
 801b186:	462b      	mov	r3, r5
 801b188:	4622      	mov	r2, r4
 801b18a:	4630      	mov	r0, r6
 801b18c:	4639      	mov	r1, r7
 801b18e:	f7e5 f893 	bl	80002b8 <__aeabi_dsub>
 801b192:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b196:	9303      	str	r3, [sp, #12]
 801b198:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b19c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801b1a0:	f1b8 0f10 	cmp.w	r8, #16
 801b1a4:	dc02      	bgt.n	801b1ac <__ieee754_rem_pio2+0x1d4>
 801b1a6:	e9ca 0100 	strd	r0, r1, [sl]
 801b1aa:	e039      	b.n	801b220 <__ieee754_rem_pio2+0x248>
 801b1ac:	a34e      	add	r3, pc, #312	; (adr r3, 801b2e8 <__ieee754_rem_pio2+0x310>)
 801b1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1b2:	ec51 0b18 	vmov	r0, r1, d8
 801b1b6:	f7e5 fa37 	bl	8000628 <__aeabi_dmul>
 801b1ba:	4604      	mov	r4, r0
 801b1bc:	460d      	mov	r5, r1
 801b1be:	4602      	mov	r2, r0
 801b1c0:	460b      	mov	r3, r1
 801b1c2:	4630      	mov	r0, r6
 801b1c4:	4639      	mov	r1, r7
 801b1c6:	f7e5 f877 	bl	80002b8 <__aeabi_dsub>
 801b1ca:	4602      	mov	r2, r0
 801b1cc:	460b      	mov	r3, r1
 801b1ce:	4680      	mov	r8, r0
 801b1d0:	4689      	mov	r9, r1
 801b1d2:	4630      	mov	r0, r6
 801b1d4:	4639      	mov	r1, r7
 801b1d6:	f7e5 f86f 	bl	80002b8 <__aeabi_dsub>
 801b1da:	4622      	mov	r2, r4
 801b1dc:	462b      	mov	r3, r5
 801b1de:	f7e5 f86b 	bl	80002b8 <__aeabi_dsub>
 801b1e2:	a343      	add	r3, pc, #268	; (adr r3, 801b2f0 <__ieee754_rem_pio2+0x318>)
 801b1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1e8:	4604      	mov	r4, r0
 801b1ea:	460d      	mov	r5, r1
 801b1ec:	ec51 0b18 	vmov	r0, r1, d8
 801b1f0:	f7e5 fa1a 	bl	8000628 <__aeabi_dmul>
 801b1f4:	4622      	mov	r2, r4
 801b1f6:	462b      	mov	r3, r5
 801b1f8:	f7e5 f85e 	bl	80002b8 <__aeabi_dsub>
 801b1fc:	4602      	mov	r2, r0
 801b1fe:	460b      	mov	r3, r1
 801b200:	4604      	mov	r4, r0
 801b202:	460d      	mov	r5, r1
 801b204:	4640      	mov	r0, r8
 801b206:	4649      	mov	r1, r9
 801b208:	f7e5 f856 	bl	80002b8 <__aeabi_dsub>
 801b20c:	9a03      	ldr	r2, [sp, #12]
 801b20e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b212:	1ad3      	subs	r3, r2, r3
 801b214:	2b31      	cmp	r3, #49	; 0x31
 801b216:	dc24      	bgt.n	801b262 <__ieee754_rem_pio2+0x28a>
 801b218:	e9ca 0100 	strd	r0, r1, [sl]
 801b21c:	4646      	mov	r6, r8
 801b21e:	464f      	mov	r7, r9
 801b220:	e9da 8900 	ldrd	r8, r9, [sl]
 801b224:	4630      	mov	r0, r6
 801b226:	4642      	mov	r2, r8
 801b228:	464b      	mov	r3, r9
 801b22a:	4639      	mov	r1, r7
 801b22c:	f7e5 f844 	bl	80002b8 <__aeabi_dsub>
 801b230:	462b      	mov	r3, r5
 801b232:	4622      	mov	r2, r4
 801b234:	f7e5 f840 	bl	80002b8 <__aeabi_dsub>
 801b238:	9b02      	ldr	r3, [sp, #8]
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b240:	f6bf af0a 	bge.w	801b058 <__ieee754_rem_pio2+0x80>
 801b244:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b248:	f8ca 3004 	str.w	r3, [sl, #4]
 801b24c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b250:	f8ca 8000 	str.w	r8, [sl]
 801b254:	f8ca 0008 	str.w	r0, [sl, #8]
 801b258:	f8ca 300c 	str.w	r3, [sl, #12]
 801b25c:	f1cb 0b00 	rsb	fp, fp, #0
 801b260:	e6fa      	b.n	801b058 <__ieee754_rem_pio2+0x80>
 801b262:	a327      	add	r3, pc, #156	; (adr r3, 801b300 <__ieee754_rem_pio2+0x328>)
 801b264:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b268:	ec51 0b18 	vmov	r0, r1, d8
 801b26c:	f7e5 f9dc 	bl	8000628 <__aeabi_dmul>
 801b270:	4604      	mov	r4, r0
 801b272:	460d      	mov	r5, r1
 801b274:	4602      	mov	r2, r0
 801b276:	460b      	mov	r3, r1
 801b278:	4640      	mov	r0, r8
 801b27a:	4649      	mov	r1, r9
 801b27c:	f7e5 f81c 	bl	80002b8 <__aeabi_dsub>
 801b280:	4602      	mov	r2, r0
 801b282:	460b      	mov	r3, r1
 801b284:	4606      	mov	r6, r0
 801b286:	460f      	mov	r7, r1
 801b288:	4640      	mov	r0, r8
 801b28a:	4649      	mov	r1, r9
 801b28c:	f7e5 f814 	bl	80002b8 <__aeabi_dsub>
 801b290:	4622      	mov	r2, r4
 801b292:	462b      	mov	r3, r5
 801b294:	f7e5 f810 	bl	80002b8 <__aeabi_dsub>
 801b298:	a31b      	add	r3, pc, #108	; (adr r3, 801b308 <__ieee754_rem_pio2+0x330>)
 801b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b29e:	4604      	mov	r4, r0
 801b2a0:	460d      	mov	r5, r1
 801b2a2:	ec51 0b18 	vmov	r0, r1, d8
 801b2a6:	f7e5 f9bf 	bl	8000628 <__aeabi_dmul>
 801b2aa:	4622      	mov	r2, r4
 801b2ac:	462b      	mov	r3, r5
 801b2ae:	f7e5 f803 	bl	80002b8 <__aeabi_dsub>
 801b2b2:	4604      	mov	r4, r0
 801b2b4:	460d      	mov	r5, r1
 801b2b6:	e75f      	b.n	801b178 <__ieee754_rem_pio2+0x1a0>
 801b2b8:	4b1b      	ldr	r3, [pc, #108]	; (801b328 <__ieee754_rem_pio2+0x350>)
 801b2ba:	4598      	cmp	r8, r3
 801b2bc:	dd36      	ble.n	801b32c <__ieee754_rem_pio2+0x354>
 801b2be:	ee10 2a10 	vmov	r2, s0
 801b2c2:	462b      	mov	r3, r5
 801b2c4:	4620      	mov	r0, r4
 801b2c6:	4629      	mov	r1, r5
 801b2c8:	f7e4 fff6 	bl	80002b8 <__aeabi_dsub>
 801b2cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b2d0:	e9ca 0100 	strd	r0, r1, [sl]
 801b2d4:	e694      	b.n	801b000 <__ieee754_rem_pio2+0x28>
 801b2d6:	bf00      	nop
 801b2d8:	54400000 	.word	0x54400000
 801b2dc:	3ff921fb 	.word	0x3ff921fb
 801b2e0:	1a626331 	.word	0x1a626331
 801b2e4:	3dd0b461 	.word	0x3dd0b461
 801b2e8:	1a600000 	.word	0x1a600000
 801b2ec:	3dd0b461 	.word	0x3dd0b461
 801b2f0:	2e037073 	.word	0x2e037073
 801b2f4:	3ba3198a 	.word	0x3ba3198a
 801b2f8:	6dc9c883 	.word	0x6dc9c883
 801b2fc:	3fe45f30 	.word	0x3fe45f30
 801b300:	2e000000 	.word	0x2e000000
 801b304:	3ba3198a 	.word	0x3ba3198a
 801b308:	252049c1 	.word	0x252049c1
 801b30c:	397b839a 	.word	0x397b839a
 801b310:	3fe921fb 	.word	0x3fe921fb
 801b314:	4002d97b 	.word	0x4002d97b
 801b318:	3ff921fb 	.word	0x3ff921fb
 801b31c:	413921fb 	.word	0x413921fb
 801b320:	3fe00000 	.word	0x3fe00000
 801b324:	0801ce7c 	.word	0x0801ce7c
 801b328:	7fefffff 	.word	0x7fefffff
 801b32c:	ea4f 5428 	mov.w	r4, r8, asr #20
 801b330:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801b334:	ee10 0a10 	vmov	r0, s0
 801b338:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801b33c:	ee10 6a10 	vmov	r6, s0
 801b340:	460f      	mov	r7, r1
 801b342:	f7e5 fc21 	bl	8000b88 <__aeabi_d2iz>
 801b346:	f7e5 f905 	bl	8000554 <__aeabi_i2d>
 801b34a:	4602      	mov	r2, r0
 801b34c:	460b      	mov	r3, r1
 801b34e:	4630      	mov	r0, r6
 801b350:	4639      	mov	r1, r7
 801b352:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b356:	f7e4 ffaf 	bl	80002b8 <__aeabi_dsub>
 801b35a:	4b23      	ldr	r3, [pc, #140]	; (801b3e8 <__ieee754_rem_pio2+0x410>)
 801b35c:	2200      	movs	r2, #0
 801b35e:	f7e5 f963 	bl	8000628 <__aeabi_dmul>
 801b362:	460f      	mov	r7, r1
 801b364:	4606      	mov	r6, r0
 801b366:	f7e5 fc0f 	bl	8000b88 <__aeabi_d2iz>
 801b36a:	f7e5 f8f3 	bl	8000554 <__aeabi_i2d>
 801b36e:	4602      	mov	r2, r0
 801b370:	460b      	mov	r3, r1
 801b372:	4630      	mov	r0, r6
 801b374:	4639      	mov	r1, r7
 801b376:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b37a:	f7e4 ff9d 	bl	80002b8 <__aeabi_dsub>
 801b37e:	4b1a      	ldr	r3, [pc, #104]	; (801b3e8 <__ieee754_rem_pio2+0x410>)
 801b380:	2200      	movs	r2, #0
 801b382:	f7e5 f951 	bl	8000628 <__aeabi_dmul>
 801b386:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b38a:	ad04      	add	r5, sp, #16
 801b38c:	f04f 0803 	mov.w	r8, #3
 801b390:	46a9      	mov	r9, r5
 801b392:	2600      	movs	r6, #0
 801b394:	2700      	movs	r7, #0
 801b396:	4632      	mov	r2, r6
 801b398:	463b      	mov	r3, r7
 801b39a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801b39e:	46c3      	mov	fp, r8
 801b3a0:	3d08      	subs	r5, #8
 801b3a2:	f108 38ff 	add.w	r8, r8, #4294967295
 801b3a6:	f7e5 fba7 	bl	8000af8 <__aeabi_dcmpeq>
 801b3aa:	2800      	cmp	r0, #0
 801b3ac:	d1f3      	bne.n	801b396 <__ieee754_rem_pio2+0x3be>
 801b3ae:	4b0f      	ldr	r3, [pc, #60]	; (801b3ec <__ieee754_rem_pio2+0x414>)
 801b3b0:	9301      	str	r3, [sp, #4]
 801b3b2:	2302      	movs	r3, #2
 801b3b4:	9300      	str	r3, [sp, #0]
 801b3b6:	4622      	mov	r2, r4
 801b3b8:	465b      	mov	r3, fp
 801b3ba:	4651      	mov	r1, sl
 801b3bc:	4648      	mov	r0, r9
 801b3be:	f000 f8df 	bl	801b580 <__kernel_rem_pio2>
 801b3c2:	9b02      	ldr	r3, [sp, #8]
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	4683      	mov	fp, r0
 801b3c8:	f6bf ae46 	bge.w	801b058 <__ieee754_rem_pio2+0x80>
 801b3cc:	e9da 2100 	ldrd	r2, r1, [sl]
 801b3d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b3d4:	e9ca 2300 	strd	r2, r3, [sl]
 801b3d8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801b3dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b3e0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801b3e4:	e73a      	b.n	801b25c <__ieee754_rem_pio2+0x284>
 801b3e6:	bf00      	nop
 801b3e8:	41700000 	.word	0x41700000
 801b3ec:	0801cefc 	.word	0x0801cefc

0801b3f0 <__kernel_cos>:
 801b3f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3f4:	ec57 6b10 	vmov	r6, r7, d0
 801b3f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801b3fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801b400:	ed8d 1b00 	vstr	d1, [sp]
 801b404:	da07      	bge.n	801b416 <__kernel_cos+0x26>
 801b406:	ee10 0a10 	vmov	r0, s0
 801b40a:	4639      	mov	r1, r7
 801b40c:	f7e5 fbbc 	bl	8000b88 <__aeabi_d2iz>
 801b410:	2800      	cmp	r0, #0
 801b412:	f000 8088 	beq.w	801b526 <__kernel_cos+0x136>
 801b416:	4632      	mov	r2, r6
 801b418:	463b      	mov	r3, r7
 801b41a:	4630      	mov	r0, r6
 801b41c:	4639      	mov	r1, r7
 801b41e:	f7e5 f903 	bl	8000628 <__aeabi_dmul>
 801b422:	4b51      	ldr	r3, [pc, #324]	; (801b568 <__kernel_cos+0x178>)
 801b424:	2200      	movs	r2, #0
 801b426:	4604      	mov	r4, r0
 801b428:	460d      	mov	r5, r1
 801b42a:	f7e5 f8fd 	bl	8000628 <__aeabi_dmul>
 801b42e:	a340      	add	r3, pc, #256	; (adr r3, 801b530 <__kernel_cos+0x140>)
 801b430:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b434:	4682      	mov	sl, r0
 801b436:	468b      	mov	fp, r1
 801b438:	4620      	mov	r0, r4
 801b43a:	4629      	mov	r1, r5
 801b43c:	f7e5 f8f4 	bl	8000628 <__aeabi_dmul>
 801b440:	a33d      	add	r3, pc, #244	; (adr r3, 801b538 <__kernel_cos+0x148>)
 801b442:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b446:	f7e4 ff39 	bl	80002bc <__adddf3>
 801b44a:	4622      	mov	r2, r4
 801b44c:	462b      	mov	r3, r5
 801b44e:	f7e5 f8eb 	bl	8000628 <__aeabi_dmul>
 801b452:	a33b      	add	r3, pc, #236	; (adr r3, 801b540 <__kernel_cos+0x150>)
 801b454:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b458:	f7e4 ff2e 	bl	80002b8 <__aeabi_dsub>
 801b45c:	4622      	mov	r2, r4
 801b45e:	462b      	mov	r3, r5
 801b460:	f7e5 f8e2 	bl	8000628 <__aeabi_dmul>
 801b464:	a338      	add	r3, pc, #224	; (adr r3, 801b548 <__kernel_cos+0x158>)
 801b466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b46a:	f7e4 ff27 	bl	80002bc <__adddf3>
 801b46e:	4622      	mov	r2, r4
 801b470:	462b      	mov	r3, r5
 801b472:	f7e5 f8d9 	bl	8000628 <__aeabi_dmul>
 801b476:	a336      	add	r3, pc, #216	; (adr r3, 801b550 <__kernel_cos+0x160>)
 801b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b47c:	f7e4 ff1c 	bl	80002b8 <__aeabi_dsub>
 801b480:	4622      	mov	r2, r4
 801b482:	462b      	mov	r3, r5
 801b484:	f7e5 f8d0 	bl	8000628 <__aeabi_dmul>
 801b488:	a333      	add	r3, pc, #204	; (adr r3, 801b558 <__kernel_cos+0x168>)
 801b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b48e:	f7e4 ff15 	bl	80002bc <__adddf3>
 801b492:	4622      	mov	r2, r4
 801b494:	462b      	mov	r3, r5
 801b496:	f7e5 f8c7 	bl	8000628 <__aeabi_dmul>
 801b49a:	4622      	mov	r2, r4
 801b49c:	462b      	mov	r3, r5
 801b49e:	f7e5 f8c3 	bl	8000628 <__aeabi_dmul>
 801b4a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b4a6:	4604      	mov	r4, r0
 801b4a8:	460d      	mov	r5, r1
 801b4aa:	4630      	mov	r0, r6
 801b4ac:	4639      	mov	r1, r7
 801b4ae:	f7e5 f8bb 	bl	8000628 <__aeabi_dmul>
 801b4b2:	460b      	mov	r3, r1
 801b4b4:	4602      	mov	r2, r0
 801b4b6:	4629      	mov	r1, r5
 801b4b8:	4620      	mov	r0, r4
 801b4ba:	f7e4 fefd 	bl	80002b8 <__aeabi_dsub>
 801b4be:	4b2b      	ldr	r3, [pc, #172]	; (801b56c <__kernel_cos+0x17c>)
 801b4c0:	4598      	cmp	r8, r3
 801b4c2:	4606      	mov	r6, r0
 801b4c4:	460f      	mov	r7, r1
 801b4c6:	dc10      	bgt.n	801b4ea <__kernel_cos+0xfa>
 801b4c8:	4602      	mov	r2, r0
 801b4ca:	460b      	mov	r3, r1
 801b4cc:	4650      	mov	r0, sl
 801b4ce:	4659      	mov	r1, fp
 801b4d0:	f7e4 fef2 	bl	80002b8 <__aeabi_dsub>
 801b4d4:	460b      	mov	r3, r1
 801b4d6:	4926      	ldr	r1, [pc, #152]	; (801b570 <__kernel_cos+0x180>)
 801b4d8:	4602      	mov	r2, r0
 801b4da:	2000      	movs	r0, #0
 801b4dc:	f7e4 feec 	bl	80002b8 <__aeabi_dsub>
 801b4e0:	ec41 0b10 	vmov	d0, r0, r1
 801b4e4:	b003      	add	sp, #12
 801b4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4ea:	4b22      	ldr	r3, [pc, #136]	; (801b574 <__kernel_cos+0x184>)
 801b4ec:	4920      	ldr	r1, [pc, #128]	; (801b570 <__kernel_cos+0x180>)
 801b4ee:	4598      	cmp	r8, r3
 801b4f0:	bfcc      	ite	gt
 801b4f2:	4d21      	ldrgt	r5, [pc, #132]	; (801b578 <__kernel_cos+0x188>)
 801b4f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801b4f8:	2400      	movs	r4, #0
 801b4fa:	4622      	mov	r2, r4
 801b4fc:	462b      	mov	r3, r5
 801b4fe:	2000      	movs	r0, #0
 801b500:	f7e4 feda 	bl	80002b8 <__aeabi_dsub>
 801b504:	4622      	mov	r2, r4
 801b506:	4680      	mov	r8, r0
 801b508:	4689      	mov	r9, r1
 801b50a:	462b      	mov	r3, r5
 801b50c:	4650      	mov	r0, sl
 801b50e:	4659      	mov	r1, fp
 801b510:	f7e4 fed2 	bl	80002b8 <__aeabi_dsub>
 801b514:	4632      	mov	r2, r6
 801b516:	463b      	mov	r3, r7
 801b518:	f7e4 fece 	bl	80002b8 <__aeabi_dsub>
 801b51c:	4602      	mov	r2, r0
 801b51e:	460b      	mov	r3, r1
 801b520:	4640      	mov	r0, r8
 801b522:	4649      	mov	r1, r9
 801b524:	e7da      	b.n	801b4dc <__kernel_cos+0xec>
 801b526:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801b560 <__kernel_cos+0x170>
 801b52a:	e7db      	b.n	801b4e4 <__kernel_cos+0xf4>
 801b52c:	f3af 8000 	nop.w
 801b530:	be8838d4 	.word	0xbe8838d4
 801b534:	bda8fae9 	.word	0xbda8fae9
 801b538:	bdb4b1c4 	.word	0xbdb4b1c4
 801b53c:	3e21ee9e 	.word	0x3e21ee9e
 801b540:	809c52ad 	.word	0x809c52ad
 801b544:	3e927e4f 	.word	0x3e927e4f
 801b548:	19cb1590 	.word	0x19cb1590
 801b54c:	3efa01a0 	.word	0x3efa01a0
 801b550:	16c15177 	.word	0x16c15177
 801b554:	3f56c16c 	.word	0x3f56c16c
 801b558:	5555554c 	.word	0x5555554c
 801b55c:	3fa55555 	.word	0x3fa55555
 801b560:	00000000 	.word	0x00000000
 801b564:	3ff00000 	.word	0x3ff00000
 801b568:	3fe00000 	.word	0x3fe00000
 801b56c:	3fd33332 	.word	0x3fd33332
 801b570:	3ff00000 	.word	0x3ff00000
 801b574:	3fe90000 	.word	0x3fe90000
 801b578:	3fd20000 	.word	0x3fd20000
 801b57c:	00000000 	.word	0x00000000

0801b580 <__kernel_rem_pio2>:
 801b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b584:	ed2d 8b02 	vpush	{d8}
 801b588:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801b58c:	f112 0f14 	cmn.w	r2, #20
 801b590:	9308      	str	r3, [sp, #32]
 801b592:	9101      	str	r1, [sp, #4]
 801b594:	4bc4      	ldr	r3, [pc, #784]	; (801b8a8 <__kernel_rem_pio2+0x328>)
 801b596:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801b598:	900b      	str	r0, [sp, #44]	; 0x2c
 801b59a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b59e:	9302      	str	r3, [sp, #8]
 801b5a0:	9b08      	ldr	r3, [sp, #32]
 801b5a2:	f103 33ff 	add.w	r3, r3, #4294967295
 801b5a6:	bfa8      	it	ge
 801b5a8:	1ed4      	subge	r4, r2, #3
 801b5aa:	9306      	str	r3, [sp, #24]
 801b5ac:	bfb2      	itee	lt
 801b5ae:	2400      	movlt	r4, #0
 801b5b0:	2318      	movge	r3, #24
 801b5b2:	fb94 f4f3 	sdivge	r4, r4, r3
 801b5b6:	f06f 0317 	mvn.w	r3, #23
 801b5ba:	fb04 3303 	mla	r3, r4, r3, r3
 801b5be:	eb03 0a02 	add.w	sl, r3, r2
 801b5c2:	9b02      	ldr	r3, [sp, #8]
 801b5c4:	9a06      	ldr	r2, [sp, #24]
 801b5c6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 801b898 <__kernel_rem_pio2+0x318>
 801b5ca:	eb03 0802 	add.w	r8, r3, r2
 801b5ce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801b5d0:	1aa7      	subs	r7, r4, r2
 801b5d2:	ae22      	add	r6, sp, #136	; 0x88
 801b5d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801b5d8:	2500      	movs	r5, #0
 801b5da:	4545      	cmp	r5, r8
 801b5dc:	dd13      	ble.n	801b606 <__kernel_rem_pio2+0x86>
 801b5de:	9b08      	ldr	r3, [sp, #32]
 801b5e0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 801b898 <__kernel_rem_pio2+0x318>
 801b5e4:	aa22      	add	r2, sp, #136	; 0x88
 801b5e6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801b5ea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801b5ee:	f04f 0800 	mov.w	r8, #0
 801b5f2:	9b02      	ldr	r3, [sp, #8]
 801b5f4:	4598      	cmp	r8, r3
 801b5f6:	dc2f      	bgt.n	801b658 <__kernel_rem_pio2+0xd8>
 801b5f8:	ed8d 8b04 	vstr	d8, [sp, #16]
 801b5fc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801b600:	462f      	mov	r7, r5
 801b602:	2600      	movs	r6, #0
 801b604:	e01b      	b.n	801b63e <__kernel_rem_pio2+0xbe>
 801b606:	42ef      	cmn	r7, r5
 801b608:	d407      	bmi.n	801b61a <__kernel_rem_pio2+0x9a>
 801b60a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801b60e:	f7e4 ffa1 	bl	8000554 <__aeabi_i2d>
 801b612:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b616:	3501      	adds	r5, #1
 801b618:	e7df      	b.n	801b5da <__kernel_rem_pio2+0x5a>
 801b61a:	ec51 0b18 	vmov	r0, r1, d8
 801b61e:	e7f8      	b.n	801b612 <__kernel_rem_pio2+0x92>
 801b620:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b624:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801b628:	f7e4 fffe 	bl	8000628 <__aeabi_dmul>
 801b62c:	4602      	mov	r2, r0
 801b62e:	460b      	mov	r3, r1
 801b630:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b634:	f7e4 fe42 	bl	80002bc <__adddf3>
 801b638:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b63c:	3601      	adds	r6, #1
 801b63e:	9b06      	ldr	r3, [sp, #24]
 801b640:	429e      	cmp	r6, r3
 801b642:	f1a7 0708 	sub.w	r7, r7, #8
 801b646:	ddeb      	ble.n	801b620 <__kernel_rem_pio2+0xa0>
 801b648:	ed9d 7b04 	vldr	d7, [sp, #16]
 801b64c:	f108 0801 	add.w	r8, r8, #1
 801b650:	ecab 7b02 	vstmia	fp!, {d7}
 801b654:	3508      	adds	r5, #8
 801b656:	e7cc      	b.n	801b5f2 <__kernel_rem_pio2+0x72>
 801b658:	9b02      	ldr	r3, [sp, #8]
 801b65a:	aa0e      	add	r2, sp, #56	; 0x38
 801b65c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b660:	930d      	str	r3, [sp, #52]	; 0x34
 801b662:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801b664:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b668:	9c02      	ldr	r4, [sp, #8]
 801b66a:	930c      	str	r3, [sp, #48]	; 0x30
 801b66c:	00e3      	lsls	r3, r4, #3
 801b66e:	930a      	str	r3, [sp, #40]	; 0x28
 801b670:	ab9a      	add	r3, sp, #616	; 0x268
 801b672:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b676:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801b67a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801b67e:	ab72      	add	r3, sp, #456	; 0x1c8
 801b680:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801b684:	46c3      	mov	fp, r8
 801b686:	46a1      	mov	r9, r4
 801b688:	f1b9 0f00 	cmp.w	r9, #0
 801b68c:	f1a5 0508 	sub.w	r5, r5, #8
 801b690:	dc77      	bgt.n	801b782 <__kernel_rem_pio2+0x202>
 801b692:	ec47 6b10 	vmov	d0, r6, r7
 801b696:	4650      	mov	r0, sl
 801b698:	f000 fc0a 	bl	801beb0 <scalbn>
 801b69c:	ec57 6b10 	vmov	r6, r7, d0
 801b6a0:	2200      	movs	r2, #0
 801b6a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801b6a6:	ee10 0a10 	vmov	r0, s0
 801b6aa:	4639      	mov	r1, r7
 801b6ac:	f7e4 ffbc 	bl	8000628 <__aeabi_dmul>
 801b6b0:	ec41 0b10 	vmov	d0, r0, r1
 801b6b4:	f000 fb7c 	bl	801bdb0 <floor>
 801b6b8:	4b7c      	ldr	r3, [pc, #496]	; (801b8ac <__kernel_rem_pio2+0x32c>)
 801b6ba:	ec51 0b10 	vmov	r0, r1, d0
 801b6be:	2200      	movs	r2, #0
 801b6c0:	f7e4 ffb2 	bl	8000628 <__aeabi_dmul>
 801b6c4:	4602      	mov	r2, r0
 801b6c6:	460b      	mov	r3, r1
 801b6c8:	4630      	mov	r0, r6
 801b6ca:	4639      	mov	r1, r7
 801b6cc:	f7e4 fdf4 	bl	80002b8 <__aeabi_dsub>
 801b6d0:	460f      	mov	r7, r1
 801b6d2:	4606      	mov	r6, r0
 801b6d4:	f7e5 fa58 	bl	8000b88 <__aeabi_d2iz>
 801b6d8:	9004      	str	r0, [sp, #16]
 801b6da:	f7e4 ff3b 	bl	8000554 <__aeabi_i2d>
 801b6de:	4602      	mov	r2, r0
 801b6e0:	460b      	mov	r3, r1
 801b6e2:	4630      	mov	r0, r6
 801b6e4:	4639      	mov	r1, r7
 801b6e6:	f7e4 fde7 	bl	80002b8 <__aeabi_dsub>
 801b6ea:	f1ba 0f00 	cmp.w	sl, #0
 801b6ee:	4606      	mov	r6, r0
 801b6f0:	460f      	mov	r7, r1
 801b6f2:	dd6d      	ble.n	801b7d0 <__kernel_rem_pio2+0x250>
 801b6f4:	1e62      	subs	r2, r4, #1
 801b6f6:	ab0e      	add	r3, sp, #56	; 0x38
 801b6f8:	9d04      	ldr	r5, [sp, #16]
 801b6fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b6fe:	f1ca 0118 	rsb	r1, sl, #24
 801b702:	fa40 f301 	asr.w	r3, r0, r1
 801b706:	441d      	add	r5, r3
 801b708:	408b      	lsls	r3, r1
 801b70a:	1ac0      	subs	r0, r0, r3
 801b70c:	ab0e      	add	r3, sp, #56	; 0x38
 801b70e:	9504      	str	r5, [sp, #16]
 801b710:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801b714:	f1ca 0317 	rsb	r3, sl, #23
 801b718:	fa40 fb03 	asr.w	fp, r0, r3
 801b71c:	f1bb 0f00 	cmp.w	fp, #0
 801b720:	dd65      	ble.n	801b7ee <__kernel_rem_pio2+0x26e>
 801b722:	9b04      	ldr	r3, [sp, #16]
 801b724:	2200      	movs	r2, #0
 801b726:	3301      	adds	r3, #1
 801b728:	9304      	str	r3, [sp, #16]
 801b72a:	4615      	mov	r5, r2
 801b72c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801b730:	4294      	cmp	r4, r2
 801b732:	f300 809c 	bgt.w	801b86e <__kernel_rem_pio2+0x2ee>
 801b736:	f1ba 0f00 	cmp.w	sl, #0
 801b73a:	dd07      	ble.n	801b74c <__kernel_rem_pio2+0x1cc>
 801b73c:	f1ba 0f01 	cmp.w	sl, #1
 801b740:	f000 80c0 	beq.w	801b8c4 <__kernel_rem_pio2+0x344>
 801b744:	f1ba 0f02 	cmp.w	sl, #2
 801b748:	f000 80c6 	beq.w	801b8d8 <__kernel_rem_pio2+0x358>
 801b74c:	f1bb 0f02 	cmp.w	fp, #2
 801b750:	d14d      	bne.n	801b7ee <__kernel_rem_pio2+0x26e>
 801b752:	4632      	mov	r2, r6
 801b754:	463b      	mov	r3, r7
 801b756:	4956      	ldr	r1, [pc, #344]	; (801b8b0 <__kernel_rem_pio2+0x330>)
 801b758:	2000      	movs	r0, #0
 801b75a:	f7e4 fdad 	bl	80002b8 <__aeabi_dsub>
 801b75e:	4606      	mov	r6, r0
 801b760:	460f      	mov	r7, r1
 801b762:	2d00      	cmp	r5, #0
 801b764:	d043      	beq.n	801b7ee <__kernel_rem_pio2+0x26e>
 801b766:	4650      	mov	r0, sl
 801b768:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801b8a0 <__kernel_rem_pio2+0x320>
 801b76c:	f000 fba0 	bl	801beb0 <scalbn>
 801b770:	4630      	mov	r0, r6
 801b772:	4639      	mov	r1, r7
 801b774:	ec53 2b10 	vmov	r2, r3, d0
 801b778:	f7e4 fd9e 	bl	80002b8 <__aeabi_dsub>
 801b77c:	4606      	mov	r6, r0
 801b77e:	460f      	mov	r7, r1
 801b780:	e035      	b.n	801b7ee <__kernel_rem_pio2+0x26e>
 801b782:	4b4c      	ldr	r3, [pc, #304]	; (801b8b4 <__kernel_rem_pio2+0x334>)
 801b784:	2200      	movs	r2, #0
 801b786:	4630      	mov	r0, r6
 801b788:	4639      	mov	r1, r7
 801b78a:	f7e4 ff4d 	bl	8000628 <__aeabi_dmul>
 801b78e:	f7e5 f9fb 	bl	8000b88 <__aeabi_d2iz>
 801b792:	f7e4 fedf 	bl	8000554 <__aeabi_i2d>
 801b796:	4602      	mov	r2, r0
 801b798:	460b      	mov	r3, r1
 801b79a:	ec43 2b18 	vmov	d8, r2, r3
 801b79e:	4b46      	ldr	r3, [pc, #280]	; (801b8b8 <__kernel_rem_pio2+0x338>)
 801b7a0:	2200      	movs	r2, #0
 801b7a2:	f7e4 ff41 	bl	8000628 <__aeabi_dmul>
 801b7a6:	4602      	mov	r2, r0
 801b7a8:	460b      	mov	r3, r1
 801b7aa:	4630      	mov	r0, r6
 801b7ac:	4639      	mov	r1, r7
 801b7ae:	f7e4 fd83 	bl	80002b8 <__aeabi_dsub>
 801b7b2:	f7e5 f9e9 	bl	8000b88 <__aeabi_d2iz>
 801b7b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b7ba:	f84b 0b04 	str.w	r0, [fp], #4
 801b7be:	ec51 0b18 	vmov	r0, r1, d8
 801b7c2:	f7e4 fd7b 	bl	80002bc <__adddf3>
 801b7c6:	f109 39ff 	add.w	r9, r9, #4294967295
 801b7ca:	4606      	mov	r6, r0
 801b7cc:	460f      	mov	r7, r1
 801b7ce:	e75b      	b.n	801b688 <__kernel_rem_pio2+0x108>
 801b7d0:	d106      	bne.n	801b7e0 <__kernel_rem_pio2+0x260>
 801b7d2:	1e63      	subs	r3, r4, #1
 801b7d4:	aa0e      	add	r2, sp, #56	; 0x38
 801b7d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b7da:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801b7de:	e79d      	b.n	801b71c <__kernel_rem_pio2+0x19c>
 801b7e0:	4b36      	ldr	r3, [pc, #216]	; (801b8bc <__kernel_rem_pio2+0x33c>)
 801b7e2:	2200      	movs	r2, #0
 801b7e4:	f7e5 f9a6 	bl	8000b34 <__aeabi_dcmpge>
 801b7e8:	2800      	cmp	r0, #0
 801b7ea:	d13d      	bne.n	801b868 <__kernel_rem_pio2+0x2e8>
 801b7ec:	4683      	mov	fp, r0
 801b7ee:	2200      	movs	r2, #0
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	4630      	mov	r0, r6
 801b7f4:	4639      	mov	r1, r7
 801b7f6:	f7e5 f97f 	bl	8000af8 <__aeabi_dcmpeq>
 801b7fa:	2800      	cmp	r0, #0
 801b7fc:	f000 80c0 	beq.w	801b980 <__kernel_rem_pio2+0x400>
 801b800:	1e65      	subs	r5, r4, #1
 801b802:	462b      	mov	r3, r5
 801b804:	2200      	movs	r2, #0
 801b806:	9902      	ldr	r1, [sp, #8]
 801b808:	428b      	cmp	r3, r1
 801b80a:	da6c      	bge.n	801b8e6 <__kernel_rem_pio2+0x366>
 801b80c:	2a00      	cmp	r2, #0
 801b80e:	f000 8089 	beq.w	801b924 <__kernel_rem_pio2+0x3a4>
 801b812:	ab0e      	add	r3, sp, #56	; 0x38
 801b814:	f1aa 0a18 	sub.w	sl, sl, #24
 801b818:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	f000 80ad 	beq.w	801b97c <__kernel_rem_pio2+0x3fc>
 801b822:	4650      	mov	r0, sl
 801b824:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 801b8a0 <__kernel_rem_pio2+0x320>
 801b828:	f000 fb42 	bl	801beb0 <scalbn>
 801b82c:	ab9a      	add	r3, sp, #616	; 0x268
 801b82e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b832:	ec57 6b10 	vmov	r6, r7, d0
 801b836:	00ec      	lsls	r4, r5, #3
 801b838:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801b83c:	46aa      	mov	sl, r5
 801b83e:	f1ba 0f00 	cmp.w	sl, #0
 801b842:	f280 80d6 	bge.w	801b9f2 <__kernel_rem_pio2+0x472>
 801b846:	ed9f 8b14 	vldr	d8, [pc, #80]	; 801b898 <__kernel_rem_pio2+0x318>
 801b84a:	462e      	mov	r6, r5
 801b84c:	2e00      	cmp	r6, #0
 801b84e:	f2c0 8104 	blt.w	801ba5a <__kernel_rem_pio2+0x4da>
 801b852:	ab72      	add	r3, sp, #456	; 0x1c8
 801b854:	ed8d 8b06 	vstr	d8, [sp, #24]
 801b858:	f8df a064 	ldr.w	sl, [pc, #100]	; 801b8c0 <__kernel_rem_pio2+0x340>
 801b85c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 801b860:	f04f 0800 	mov.w	r8, #0
 801b864:	1baf      	subs	r7, r5, r6
 801b866:	e0ea      	b.n	801ba3e <__kernel_rem_pio2+0x4be>
 801b868:	f04f 0b02 	mov.w	fp, #2
 801b86c:	e759      	b.n	801b722 <__kernel_rem_pio2+0x1a2>
 801b86e:	f8d8 3000 	ldr.w	r3, [r8]
 801b872:	b955      	cbnz	r5, 801b88a <__kernel_rem_pio2+0x30a>
 801b874:	b123      	cbz	r3, 801b880 <__kernel_rem_pio2+0x300>
 801b876:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801b87a:	f8c8 3000 	str.w	r3, [r8]
 801b87e:	2301      	movs	r3, #1
 801b880:	3201      	adds	r2, #1
 801b882:	f108 0804 	add.w	r8, r8, #4
 801b886:	461d      	mov	r5, r3
 801b888:	e752      	b.n	801b730 <__kernel_rem_pio2+0x1b0>
 801b88a:	1acb      	subs	r3, r1, r3
 801b88c:	f8c8 3000 	str.w	r3, [r8]
 801b890:	462b      	mov	r3, r5
 801b892:	e7f5      	b.n	801b880 <__kernel_rem_pio2+0x300>
 801b894:	f3af 8000 	nop.w
	...
 801b8a4:	3ff00000 	.word	0x3ff00000
 801b8a8:	0801d048 	.word	0x0801d048
 801b8ac:	40200000 	.word	0x40200000
 801b8b0:	3ff00000 	.word	0x3ff00000
 801b8b4:	3e700000 	.word	0x3e700000
 801b8b8:	41700000 	.word	0x41700000
 801b8bc:	3fe00000 	.word	0x3fe00000
 801b8c0:	0801d008 	.word	0x0801d008
 801b8c4:	1e62      	subs	r2, r4, #1
 801b8c6:	ab0e      	add	r3, sp, #56	; 0x38
 801b8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b8cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b8d0:	a90e      	add	r1, sp, #56	; 0x38
 801b8d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b8d6:	e739      	b.n	801b74c <__kernel_rem_pio2+0x1cc>
 801b8d8:	1e62      	subs	r2, r4, #1
 801b8da:	ab0e      	add	r3, sp, #56	; 0x38
 801b8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b8e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b8e4:	e7f4      	b.n	801b8d0 <__kernel_rem_pio2+0x350>
 801b8e6:	a90e      	add	r1, sp, #56	; 0x38
 801b8e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b8ec:	3b01      	subs	r3, #1
 801b8ee:	430a      	orrs	r2, r1
 801b8f0:	e789      	b.n	801b806 <__kernel_rem_pio2+0x286>
 801b8f2:	3301      	adds	r3, #1
 801b8f4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801b8f8:	2900      	cmp	r1, #0
 801b8fa:	d0fa      	beq.n	801b8f2 <__kernel_rem_pio2+0x372>
 801b8fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b8fe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801b902:	446a      	add	r2, sp
 801b904:	3a98      	subs	r2, #152	; 0x98
 801b906:	920a      	str	r2, [sp, #40]	; 0x28
 801b908:	9a08      	ldr	r2, [sp, #32]
 801b90a:	18e3      	adds	r3, r4, r3
 801b90c:	18a5      	adds	r5, r4, r2
 801b90e:	aa22      	add	r2, sp, #136	; 0x88
 801b910:	f104 0801 	add.w	r8, r4, #1
 801b914:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801b918:	9304      	str	r3, [sp, #16]
 801b91a:	9b04      	ldr	r3, [sp, #16]
 801b91c:	4543      	cmp	r3, r8
 801b91e:	da04      	bge.n	801b92a <__kernel_rem_pio2+0x3aa>
 801b920:	461c      	mov	r4, r3
 801b922:	e6a3      	b.n	801b66c <__kernel_rem_pio2+0xec>
 801b924:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b926:	2301      	movs	r3, #1
 801b928:	e7e4      	b.n	801b8f4 <__kernel_rem_pio2+0x374>
 801b92a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b92c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801b930:	f7e4 fe10 	bl	8000554 <__aeabi_i2d>
 801b934:	e8e5 0102 	strd	r0, r1, [r5], #8
 801b938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b93a:	46ab      	mov	fp, r5
 801b93c:	461c      	mov	r4, r3
 801b93e:	f04f 0900 	mov.w	r9, #0
 801b942:	2600      	movs	r6, #0
 801b944:	2700      	movs	r7, #0
 801b946:	9b06      	ldr	r3, [sp, #24]
 801b948:	4599      	cmp	r9, r3
 801b94a:	dd06      	ble.n	801b95a <__kernel_rem_pio2+0x3da>
 801b94c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b94e:	e8e3 6702 	strd	r6, r7, [r3], #8
 801b952:	f108 0801 	add.w	r8, r8, #1
 801b956:	930a      	str	r3, [sp, #40]	; 0x28
 801b958:	e7df      	b.n	801b91a <__kernel_rem_pio2+0x39a>
 801b95a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801b95e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801b962:	f7e4 fe61 	bl	8000628 <__aeabi_dmul>
 801b966:	4602      	mov	r2, r0
 801b968:	460b      	mov	r3, r1
 801b96a:	4630      	mov	r0, r6
 801b96c:	4639      	mov	r1, r7
 801b96e:	f7e4 fca5 	bl	80002bc <__adddf3>
 801b972:	f109 0901 	add.w	r9, r9, #1
 801b976:	4606      	mov	r6, r0
 801b978:	460f      	mov	r7, r1
 801b97a:	e7e4      	b.n	801b946 <__kernel_rem_pio2+0x3c6>
 801b97c:	3d01      	subs	r5, #1
 801b97e:	e748      	b.n	801b812 <__kernel_rem_pio2+0x292>
 801b980:	ec47 6b10 	vmov	d0, r6, r7
 801b984:	f1ca 0000 	rsb	r0, sl, #0
 801b988:	f000 fa92 	bl	801beb0 <scalbn>
 801b98c:	ec57 6b10 	vmov	r6, r7, d0
 801b990:	4ba0      	ldr	r3, [pc, #640]	; (801bc14 <__kernel_rem_pio2+0x694>)
 801b992:	ee10 0a10 	vmov	r0, s0
 801b996:	2200      	movs	r2, #0
 801b998:	4639      	mov	r1, r7
 801b99a:	f7e5 f8cb 	bl	8000b34 <__aeabi_dcmpge>
 801b99e:	b1f8      	cbz	r0, 801b9e0 <__kernel_rem_pio2+0x460>
 801b9a0:	4b9d      	ldr	r3, [pc, #628]	; (801bc18 <__kernel_rem_pio2+0x698>)
 801b9a2:	2200      	movs	r2, #0
 801b9a4:	4630      	mov	r0, r6
 801b9a6:	4639      	mov	r1, r7
 801b9a8:	f7e4 fe3e 	bl	8000628 <__aeabi_dmul>
 801b9ac:	f7e5 f8ec 	bl	8000b88 <__aeabi_d2iz>
 801b9b0:	4680      	mov	r8, r0
 801b9b2:	f7e4 fdcf 	bl	8000554 <__aeabi_i2d>
 801b9b6:	4b97      	ldr	r3, [pc, #604]	; (801bc14 <__kernel_rem_pio2+0x694>)
 801b9b8:	2200      	movs	r2, #0
 801b9ba:	f7e4 fe35 	bl	8000628 <__aeabi_dmul>
 801b9be:	460b      	mov	r3, r1
 801b9c0:	4602      	mov	r2, r0
 801b9c2:	4639      	mov	r1, r7
 801b9c4:	4630      	mov	r0, r6
 801b9c6:	f7e4 fc77 	bl	80002b8 <__aeabi_dsub>
 801b9ca:	f7e5 f8dd 	bl	8000b88 <__aeabi_d2iz>
 801b9ce:	1c65      	adds	r5, r4, #1
 801b9d0:	ab0e      	add	r3, sp, #56	; 0x38
 801b9d2:	f10a 0a18 	add.w	sl, sl, #24
 801b9d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b9da:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801b9de:	e720      	b.n	801b822 <__kernel_rem_pio2+0x2a2>
 801b9e0:	4630      	mov	r0, r6
 801b9e2:	4639      	mov	r1, r7
 801b9e4:	f7e5 f8d0 	bl	8000b88 <__aeabi_d2iz>
 801b9e8:	ab0e      	add	r3, sp, #56	; 0x38
 801b9ea:	4625      	mov	r5, r4
 801b9ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b9f0:	e717      	b.n	801b822 <__kernel_rem_pio2+0x2a2>
 801b9f2:	ab0e      	add	r3, sp, #56	; 0x38
 801b9f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801b9f8:	f7e4 fdac 	bl	8000554 <__aeabi_i2d>
 801b9fc:	4632      	mov	r2, r6
 801b9fe:	463b      	mov	r3, r7
 801ba00:	f7e4 fe12 	bl	8000628 <__aeabi_dmul>
 801ba04:	4b84      	ldr	r3, [pc, #528]	; (801bc18 <__kernel_rem_pio2+0x698>)
 801ba06:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801ba0a:	2200      	movs	r2, #0
 801ba0c:	4630      	mov	r0, r6
 801ba0e:	4639      	mov	r1, r7
 801ba10:	f7e4 fe0a 	bl	8000628 <__aeabi_dmul>
 801ba14:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ba18:	4606      	mov	r6, r0
 801ba1a:	460f      	mov	r7, r1
 801ba1c:	e70f      	b.n	801b83e <__kernel_rem_pio2+0x2be>
 801ba1e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801ba22:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801ba26:	f7e4 fdff 	bl	8000628 <__aeabi_dmul>
 801ba2a:	4602      	mov	r2, r0
 801ba2c:	460b      	mov	r3, r1
 801ba2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ba32:	f7e4 fc43 	bl	80002bc <__adddf3>
 801ba36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ba3a:	f108 0801 	add.w	r8, r8, #1
 801ba3e:	9b02      	ldr	r3, [sp, #8]
 801ba40:	4598      	cmp	r8, r3
 801ba42:	dc01      	bgt.n	801ba48 <__kernel_rem_pio2+0x4c8>
 801ba44:	45b8      	cmp	r8, r7
 801ba46:	ddea      	ble.n	801ba1e <__kernel_rem_pio2+0x49e>
 801ba48:	ed9d 7b06 	vldr	d7, [sp, #24]
 801ba4c:	ab4a      	add	r3, sp, #296	; 0x128
 801ba4e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801ba52:	ed87 7b00 	vstr	d7, [r7]
 801ba56:	3e01      	subs	r6, #1
 801ba58:	e6f8      	b.n	801b84c <__kernel_rem_pio2+0x2cc>
 801ba5a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801ba5c:	2b02      	cmp	r3, #2
 801ba5e:	dc0b      	bgt.n	801ba78 <__kernel_rem_pio2+0x4f8>
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	dc35      	bgt.n	801bad0 <__kernel_rem_pio2+0x550>
 801ba64:	d059      	beq.n	801bb1a <__kernel_rem_pio2+0x59a>
 801ba66:	9b04      	ldr	r3, [sp, #16]
 801ba68:	f003 0007 	and.w	r0, r3, #7
 801ba6c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801ba70:	ecbd 8b02 	vpop	{d8}
 801ba74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba78:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801ba7a:	2b03      	cmp	r3, #3
 801ba7c:	d1f3      	bne.n	801ba66 <__kernel_rem_pio2+0x4e6>
 801ba7e:	ab4a      	add	r3, sp, #296	; 0x128
 801ba80:	4423      	add	r3, r4
 801ba82:	9306      	str	r3, [sp, #24]
 801ba84:	461c      	mov	r4, r3
 801ba86:	469a      	mov	sl, r3
 801ba88:	9502      	str	r5, [sp, #8]
 801ba8a:	9b02      	ldr	r3, [sp, #8]
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	f1aa 0a08 	sub.w	sl, sl, #8
 801ba92:	dc6b      	bgt.n	801bb6c <__kernel_rem_pio2+0x5ec>
 801ba94:	46aa      	mov	sl, r5
 801ba96:	f1ba 0f01 	cmp.w	sl, #1
 801ba9a:	f1a4 0408 	sub.w	r4, r4, #8
 801ba9e:	f300 8085 	bgt.w	801bbac <__kernel_rem_pio2+0x62c>
 801baa2:	9c06      	ldr	r4, [sp, #24]
 801baa4:	2000      	movs	r0, #0
 801baa6:	3408      	adds	r4, #8
 801baa8:	2100      	movs	r1, #0
 801baaa:	2d01      	cmp	r5, #1
 801baac:	f300 809d 	bgt.w	801bbea <__kernel_rem_pio2+0x66a>
 801bab0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801bab4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 801bab8:	f1bb 0f00 	cmp.w	fp, #0
 801babc:	f040 809b 	bne.w	801bbf6 <__kernel_rem_pio2+0x676>
 801bac0:	9b01      	ldr	r3, [sp, #4]
 801bac2:	e9c3 5600 	strd	r5, r6, [r3]
 801bac6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801baca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801bace:	e7ca      	b.n	801ba66 <__kernel_rem_pio2+0x4e6>
 801bad0:	3408      	adds	r4, #8
 801bad2:	ab4a      	add	r3, sp, #296	; 0x128
 801bad4:	441c      	add	r4, r3
 801bad6:	462e      	mov	r6, r5
 801bad8:	2000      	movs	r0, #0
 801bada:	2100      	movs	r1, #0
 801badc:	2e00      	cmp	r6, #0
 801bade:	da36      	bge.n	801bb4e <__kernel_rem_pio2+0x5ce>
 801bae0:	f1bb 0f00 	cmp.w	fp, #0
 801bae4:	d039      	beq.n	801bb5a <__kernel_rem_pio2+0x5da>
 801bae6:	4602      	mov	r2, r0
 801bae8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801baec:	9c01      	ldr	r4, [sp, #4]
 801baee:	e9c4 2300 	strd	r2, r3, [r4]
 801baf2:	4602      	mov	r2, r0
 801baf4:	460b      	mov	r3, r1
 801baf6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801bafa:	f7e4 fbdd 	bl	80002b8 <__aeabi_dsub>
 801bafe:	ae4c      	add	r6, sp, #304	; 0x130
 801bb00:	2401      	movs	r4, #1
 801bb02:	42a5      	cmp	r5, r4
 801bb04:	da2c      	bge.n	801bb60 <__kernel_rem_pio2+0x5e0>
 801bb06:	f1bb 0f00 	cmp.w	fp, #0
 801bb0a:	d002      	beq.n	801bb12 <__kernel_rem_pio2+0x592>
 801bb0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bb10:	4619      	mov	r1, r3
 801bb12:	9b01      	ldr	r3, [sp, #4]
 801bb14:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801bb18:	e7a5      	b.n	801ba66 <__kernel_rem_pio2+0x4e6>
 801bb1a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801bb1e:	eb0d 0403 	add.w	r4, sp, r3
 801bb22:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801bb26:	2000      	movs	r0, #0
 801bb28:	2100      	movs	r1, #0
 801bb2a:	2d00      	cmp	r5, #0
 801bb2c:	da09      	bge.n	801bb42 <__kernel_rem_pio2+0x5c2>
 801bb2e:	f1bb 0f00 	cmp.w	fp, #0
 801bb32:	d002      	beq.n	801bb3a <__kernel_rem_pio2+0x5ba>
 801bb34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bb38:	4619      	mov	r1, r3
 801bb3a:	9b01      	ldr	r3, [sp, #4]
 801bb3c:	e9c3 0100 	strd	r0, r1, [r3]
 801bb40:	e791      	b.n	801ba66 <__kernel_rem_pio2+0x4e6>
 801bb42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801bb46:	f7e4 fbb9 	bl	80002bc <__adddf3>
 801bb4a:	3d01      	subs	r5, #1
 801bb4c:	e7ed      	b.n	801bb2a <__kernel_rem_pio2+0x5aa>
 801bb4e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801bb52:	f7e4 fbb3 	bl	80002bc <__adddf3>
 801bb56:	3e01      	subs	r6, #1
 801bb58:	e7c0      	b.n	801badc <__kernel_rem_pio2+0x55c>
 801bb5a:	4602      	mov	r2, r0
 801bb5c:	460b      	mov	r3, r1
 801bb5e:	e7c5      	b.n	801baec <__kernel_rem_pio2+0x56c>
 801bb60:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801bb64:	f7e4 fbaa 	bl	80002bc <__adddf3>
 801bb68:	3401      	adds	r4, #1
 801bb6a:	e7ca      	b.n	801bb02 <__kernel_rem_pio2+0x582>
 801bb6c:	e9da 8900 	ldrd	r8, r9, [sl]
 801bb70:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801bb74:	9b02      	ldr	r3, [sp, #8]
 801bb76:	3b01      	subs	r3, #1
 801bb78:	9302      	str	r3, [sp, #8]
 801bb7a:	4632      	mov	r2, r6
 801bb7c:	463b      	mov	r3, r7
 801bb7e:	4640      	mov	r0, r8
 801bb80:	4649      	mov	r1, r9
 801bb82:	f7e4 fb9b 	bl	80002bc <__adddf3>
 801bb86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801bb8a:	4602      	mov	r2, r0
 801bb8c:	460b      	mov	r3, r1
 801bb8e:	4640      	mov	r0, r8
 801bb90:	4649      	mov	r1, r9
 801bb92:	f7e4 fb91 	bl	80002b8 <__aeabi_dsub>
 801bb96:	4632      	mov	r2, r6
 801bb98:	463b      	mov	r3, r7
 801bb9a:	f7e4 fb8f 	bl	80002bc <__adddf3>
 801bb9e:	ed9d 7b08 	vldr	d7, [sp, #32]
 801bba2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801bba6:	ed8a 7b00 	vstr	d7, [sl]
 801bbaa:	e76e      	b.n	801ba8a <__kernel_rem_pio2+0x50a>
 801bbac:	e9d4 8900 	ldrd	r8, r9, [r4]
 801bbb0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801bbb4:	4640      	mov	r0, r8
 801bbb6:	4632      	mov	r2, r6
 801bbb8:	463b      	mov	r3, r7
 801bbba:	4649      	mov	r1, r9
 801bbbc:	f7e4 fb7e 	bl	80002bc <__adddf3>
 801bbc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bbc4:	4602      	mov	r2, r0
 801bbc6:	460b      	mov	r3, r1
 801bbc8:	4640      	mov	r0, r8
 801bbca:	4649      	mov	r1, r9
 801bbcc:	f7e4 fb74 	bl	80002b8 <__aeabi_dsub>
 801bbd0:	4632      	mov	r2, r6
 801bbd2:	463b      	mov	r3, r7
 801bbd4:	f7e4 fb72 	bl	80002bc <__adddf3>
 801bbd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bbdc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801bbe0:	ed84 7b00 	vstr	d7, [r4]
 801bbe4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bbe8:	e755      	b.n	801ba96 <__kernel_rem_pio2+0x516>
 801bbea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801bbee:	f7e4 fb65 	bl	80002bc <__adddf3>
 801bbf2:	3d01      	subs	r5, #1
 801bbf4:	e759      	b.n	801baaa <__kernel_rem_pio2+0x52a>
 801bbf6:	9b01      	ldr	r3, [sp, #4]
 801bbf8:	9a01      	ldr	r2, [sp, #4]
 801bbfa:	601d      	str	r5, [r3, #0]
 801bbfc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801bc00:	605c      	str	r4, [r3, #4]
 801bc02:	609f      	str	r7, [r3, #8]
 801bc04:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801bc08:	60d3      	str	r3, [r2, #12]
 801bc0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bc0e:	6110      	str	r0, [r2, #16]
 801bc10:	6153      	str	r3, [r2, #20]
 801bc12:	e728      	b.n	801ba66 <__kernel_rem_pio2+0x4e6>
 801bc14:	41700000 	.word	0x41700000
 801bc18:	3e700000 	.word	0x3e700000
 801bc1c:	00000000 	.word	0x00000000

0801bc20 <__kernel_sin>:
 801bc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc24:	ed2d 8b04 	vpush	{d8-d9}
 801bc28:	eeb0 8a41 	vmov.f32	s16, s2
 801bc2c:	eef0 8a61 	vmov.f32	s17, s3
 801bc30:	ec55 4b10 	vmov	r4, r5, d0
 801bc34:	b083      	sub	sp, #12
 801bc36:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801bc3a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801bc3e:	9001      	str	r0, [sp, #4]
 801bc40:	da06      	bge.n	801bc50 <__kernel_sin+0x30>
 801bc42:	ee10 0a10 	vmov	r0, s0
 801bc46:	4629      	mov	r1, r5
 801bc48:	f7e4 ff9e 	bl	8000b88 <__aeabi_d2iz>
 801bc4c:	2800      	cmp	r0, #0
 801bc4e:	d051      	beq.n	801bcf4 <__kernel_sin+0xd4>
 801bc50:	4622      	mov	r2, r4
 801bc52:	462b      	mov	r3, r5
 801bc54:	4620      	mov	r0, r4
 801bc56:	4629      	mov	r1, r5
 801bc58:	f7e4 fce6 	bl	8000628 <__aeabi_dmul>
 801bc5c:	4682      	mov	sl, r0
 801bc5e:	468b      	mov	fp, r1
 801bc60:	4602      	mov	r2, r0
 801bc62:	460b      	mov	r3, r1
 801bc64:	4620      	mov	r0, r4
 801bc66:	4629      	mov	r1, r5
 801bc68:	f7e4 fcde 	bl	8000628 <__aeabi_dmul>
 801bc6c:	a341      	add	r3, pc, #260	; (adr r3, 801bd74 <__kernel_sin+0x154>)
 801bc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc72:	4680      	mov	r8, r0
 801bc74:	4689      	mov	r9, r1
 801bc76:	4650      	mov	r0, sl
 801bc78:	4659      	mov	r1, fp
 801bc7a:	f7e4 fcd5 	bl	8000628 <__aeabi_dmul>
 801bc7e:	a33f      	add	r3, pc, #252	; (adr r3, 801bd7c <__kernel_sin+0x15c>)
 801bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc84:	f7e4 fb18 	bl	80002b8 <__aeabi_dsub>
 801bc88:	4652      	mov	r2, sl
 801bc8a:	465b      	mov	r3, fp
 801bc8c:	f7e4 fccc 	bl	8000628 <__aeabi_dmul>
 801bc90:	a33c      	add	r3, pc, #240	; (adr r3, 801bd84 <__kernel_sin+0x164>)
 801bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc96:	f7e4 fb11 	bl	80002bc <__adddf3>
 801bc9a:	4652      	mov	r2, sl
 801bc9c:	465b      	mov	r3, fp
 801bc9e:	f7e4 fcc3 	bl	8000628 <__aeabi_dmul>
 801bca2:	a33a      	add	r3, pc, #232	; (adr r3, 801bd8c <__kernel_sin+0x16c>)
 801bca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bca8:	f7e4 fb06 	bl	80002b8 <__aeabi_dsub>
 801bcac:	4652      	mov	r2, sl
 801bcae:	465b      	mov	r3, fp
 801bcb0:	f7e4 fcba 	bl	8000628 <__aeabi_dmul>
 801bcb4:	a337      	add	r3, pc, #220	; (adr r3, 801bd94 <__kernel_sin+0x174>)
 801bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcba:	f7e4 faff 	bl	80002bc <__adddf3>
 801bcbe:	9b01      	ldr	r3, [sp, #4]
 801bcc0:	4606      	mov	r6, r0
 801bcc2:	460f      	mov	r7, r1
 801bcc4:	b9eb      	cbnz	r3, 801bd02 <__kernel_sin+0xe2>
 801bcc6:	4602      	mov	r2, r0
 801bcc8:	460b      	mov	r3, r1
 801bcca:	4650      	mov	r0, sl
 801bccc:	4659      	mov	r1, fp
 801bcce:	f7e4 fcab 	bl	8000628 <__aeabi_dmul>
 801bcd2:	a325      	add	r3, pc, #148	; (adr r3, 801bd68 <__kernel_sin+0x148>)
 801bcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcd8:	f7e4 faee 	bl	80002b8 <__aeabi_dsub>
 801bcdc:	4642      	mov	r2, r8
 801bcde:	464b      	mov	r3, r9
 801bce0:	f7e4 fca2 	bl	8000628 <__aeabi_dmul>
 801bce4:	4602      	mov	r2, r0
 801bce6:	460b      	mov	r3, r1
 801bce8:	4620      	mov	r0, r4
 801bcea:	4629      	mov	r1, r5
 801bcec:	f7e4 fae6 	bl	80002bc <__adddf3>
 801bcf0:	4604      	mov	r4, r0
 801bcf2:	460d      	mov	r5, r1
 801bcf4:	ec45 4b10 	vmov	d0, r4, r5
 801bcf8:	b003      	add	sp, #12
 801bcfa:	ecbd 8b04 	vpop	{d8-d9}
 801bcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd02:	4b1b      	ldr	r3, [pc, #108]	; (801bd70 <__kernel_sin+0x150>)
 801bd04:	ec51 0b18 	vmov	r0, r1, d8
 801bd08:	2200      	movs	r2, #0
 801bd0a:	f7e4 fc8d 	bl	8000628 <__aeabi_dmul>
 801bd0e:	4632      	mov	r2, r6
 801bd10:	ec41 0b19 	vmov	d9, r0, r1
 801bd14:	463b      	mov	r3, r7
 801bd16:	4640      	mov	r0, r8
 801bd18:	4649      	mov	r1, r9
 801bd1a:	f7e4 fc85 	bl	8000628 <__aeabi_dmul>
 801bd1e:	4602      	mov	r2, r0
 801bd20:	460b      	mov	r3, r1
 801bd22:	ec51 0b19 	vmov	r0, r1, d9
 801bd26:	f7e4 fac7 	bl	80002b8 <__aeabi_dsub>
 801bd2a:	4652      	mov	r2, sl
 801bd2c:	465b      	mov	r3, fp
 801bd2e:	f7e4 fc7b 	bl	8000628 <__aeabi_dmul>
 801bd32:	ec53 2b18 	vmov	r2, r3, d8
 801bd36:	f7e4 fabf 	bl	80002b8 <__aeabi_dsub>
 801bd3a:	a30b      	add	r3, pc, #44	; (adr r3, 801bd68 <__kernel_sin+0x148>)
 801bd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd40:	4606      	mov	r6, r0
 801bd42:	460f      	mov	r7, r1
 801bd44:	4640      	mov	r0, r8
 801bd46:	4649      	mov	r1, r9
 801bd48:	f7e4 fc6e 	bl	8000628 <__aeabi_dmul>
 801bd4c:	4602      	mov	r2, r0
 801bd4e:	460b      	mov	r3, r1
 801bd50:	4630      	mov	r0, r6
 801bd52:	4639      	mov	r1, r7
 801bd54:	f7e4 fab2 	bl	80002bc <__adddf3>
 801bd58:	4602      	mov	r2, r0
 801bd5a:	460b      	mov	r3, r1
 801bd5c:	4620      	mov	r0, r4
 801bd5e:	4629      	mov	r1, r5
 801bd60:	f7e4 faaa 	bl	80002b8 <__aeabi_dsub>
 801bd64:	e7c4      	b.n	801bcf0 <__kernel_sin+0xd0>
 801bd66:	bf00      	nop
 801bd68:	55555549 	.word	0x55555549
 801bd6c:	3fc55555 	.word	0x3fc55555
 801bd70:	3fe00000 	.word	0x3fe00000
 801bd74:	5acfd57c 	.word	0x5acfd57c
 801bd78:	3de5d93a 	.word	0x3de5d93a
 801bd7c:	8a2b9ceb 	.word	0x8a2b9ceb
 801bd80:	3e5ae5e6 	.word	0x3e5ae5e6
 801bd84:	57b1fe7d 	.word	0x57b1fe7d
 801bd88:	3ec71de3 	.word	0x3ec71de3
 801bd8c:	19c161d5 	.word	0x19c161d5
 801bd90:	3f2a01a0 	.word	0x3f2a01a0
 801bd94:	1110f8a6 	.word	0x1110f8a6
 801bd98:	3f811111 	.word	0x3f811111

0801bd9c <fabs>:
 801bd9c:	ec51 0b10 	vmov	r0, r1, d0
 801bda0:	ee10 2a10 	vmov	r2, s0
 801bda4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bda8:	ec43 2b10 	vmov	d0, r2, r3
 801bdac:	4770      	bx	lr
	...

0801bdb0 <floor>:
 801bdb0:	ec51 0b10 	vmov	r0, r1, d0
 801bdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bdb8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801bdbc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801bdc0:	2e13      	cmp	r6, #19
 801bdc2:	ee10 5a10 	vmov	r5, s0
 801bdc6:	ee10 8a10 	vmov	r8, s0
 801bdca:	460c      	mov	r4, r1
 801bdcc:	dc32      	bgt.n	801be34 <floor+0x84>
 801bdce:	2e00      	cmp	r6, #0
 801bdd0:	da14      	bge.n	801bdfc <floor+0x4c>
 801bdd2:	a333      	add	r3, pc, #204	; (adr r3, 801bea0 <floor+0xf0>)
 801bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdd8:	f7e4 fa70 	bl	80002bc <__adddf3>
 801bddc:	2200      	movs	r2, #0
 801bdde:	2300      	movs	r3, #0
 801bde0:	f7e4 feb2 	bl	8000b48 <__aeabi_dcmpgt>
 801bde4:	b138      	cbz	r0, 801bdf6 <floor+0x46>
 801bde6:	2c00      	cmp	r4, #0
 801bde8:	da57      	bge.n	801be9a <floor+0xea>
 801bdea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801bdee:	431d      	orrs	r5, r3
 801bdf0:	d001      	beq.n	801bdf6 <floor+0x46>
 801bdf2:	4c2d      	ldr	r4, [pc, #180]	; (801bea8 <floor+0xf8>)
 801bdf4:	2500      	movs	r5, #0
 801bdf6:	4621      	mov	r1, r4
 801bdf8:	4628      	mov	r0, r5
 801bdfa:	e025      	b.n	801be48 <floor+0x98>
 801bdfc:	4f2b      	ldr	r7, [pc, #172]	; (801beac <floor+0xfc>)
 801bdfe:	4137      	asrs	r7, r6
 801be00:	ea01 0307 	and.w	r3, r1, r7
 801be04:	4303      	orrs	r3, r0
 801be06:	d01f      	beq.n	801be48 <floor+0x98>
 801be08:	a325      	add	r3, pc, #148	; (adr r3, 801bea0 <floor+0xf0>)
 801be0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be0e:	f7e4 fa55 	bl	80002bc <__adddf3>
 801be12:	2200      	movs	r2, #0
 801be14:	2300      	movs	r3, #0
 801be16:	f7e4 fe97 	bl	8000b48 <__aeabi_dcmpgt>
 801be1a:	2800      	cmp	r0, #0
 801be1c:	d0eb      	beq.n	801bdf6 <floor+0x46>
 801be1e:	2c00      	cmp	r4, #0
 801be20:	bfbe      	ittt	lt
 801be22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801be26:	fa43 f606 	asrlt.w	r6, r3, r6
 801be2a:	19a4      	addlt	r4, r4, r6
 801be2c:	ea24 0407 	bic.w	r4, r4, r7
 801be30:	2500      	movs	r5, #0
 801be32:	e7e0      	b.n	801bdf6 <floor+0x46>
 801be34:	2e33      	cmp	r6, #51	; 0x33
 801be36:	dd0b      	ble.n	801be50 <floor+0xa0>
 801be38:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801be3c:	d104      	bne.n	801be48 <floor+0x98>
 801be3e:	ee10 2a10 	vmov	r2, s0
 801be42:	460b      	mov	r3, r1
 801be44:	f7e4 fa3a 	bl	80002bc <__adddf3>
 801be48:	ec41 0b10 	vmov	d0, r0, r1
 801be4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be50:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801be54:	f04f 33ff 	mov.w	r3, #4294967295
 801be58:	fa23 f707 	lsr.w	r7, r3, r7
 801be5c:	4207      	tst	r7, r0
 801be5e:	d0f3      	beq.n	801be48 <floor+0x98>
 801be60:	a30f      	add	r3, pc, #60	; (adr r3, 801bea0 <floor+0xf0>)
 801be62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be66:	f7e4 fa29 	bl	80002bc <__adddf3>
 801be6a:	2200      	movs	r2, #0
 801be6c:	2300      	movs	r3, #0
 801be6e:	f7e4 fe6b 	bl	8000b48 <__aeabi_dcmpgt>
 801be72:	2800      	cmp	r0, #0
 801be74:	d0bf      	beq.n	801bdf6 <floor+0x46>
 801be76:	2c00      	cmp	r4, #0
 801be78:	da02      	bge.n	801be80 <floor+0xd0>
 801be7a:	2e14      	cmp	r6, #20
 801be7c:	d103      	bne.n	801be86 <floor+0xd6>
 801be7e:	3401      	adds	r4, #1
 801be80:	ea25 0507 	bic.w	r5, r5, r7
 801be84:	e7b7      	b.n	801bdf6 <floor+0x46>
 801be86:	2301      	movs	r3, #1
 801be88:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801be8c:	fa03 f606 	lsl.w	r6, r3, r6
 801be90:	4435      	add	r5, r6
 801be92:	4545      	cmp	r5, r8
 801be94:	bf38      	it	cc
 801be96:	18e4      	addcc	r4, r4, r3
 801be98:	e7f2      	b.n	801be80 <floor+0xd0>
 801be9a:	2500      	movs	r5, #0
 801be9c:	462c      	mov	r4, r5
 801be9e:	e7aa      	b.n	801bdf6 <floor+0x46>
 801bea0:	8800759c 	.word	0x8800759c
 801bea4:	7e37e43c 	.word	0x7e37e43c
 801bea8:	bff00000 	.word	0xbff00000
 801beac:	000fffff 	.word	0x000fffff

0801beb0 <scalbn>:
 801beb0:	b570      	push	{r4, r5, r6, lr}
 801beb2:	ec55 4b10 	vmov	r4, r5, d0
 801beb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801beba:	4606      	mov	r6, r0
 801bebc:	462b      	mov	r3, r5
 801bebe:	b99a      	cbnz	r2, 801bee8 <scalbn+0x38>
 801bec0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801bec4:	4323      	orrs	r3, r4
 801bec6:	d036      	beq.n	801bf36 <scalbn+0x86>
 801bec8:	4b39      	ldr	r3, [pc, #228]	; (801bfb0 <scalbn+0x100>)
 801beca:	4629      	mov	r1, r5
 801becc:	ee10 0a10 	vmov	r0, s0
 801bed0:	2200      	movs	r2, #0
 801bed2:	f7e4 fba9 	bl	8000628 <__aeabi_dmul>
 801bed6:	4b37      	ldr	r3, [pc, #220]	; (801bfb4 <scalbn+0x104>)
 801bed8:	429e      	cmp	r6, r3
 801beda:	4604      	mov	r4, r0
 801bedc:	460d      	mov	r5, r1
 801bede:	da10      	bge.n	801bf02 <scalbn+0x52>
 801bee0:	a32b      	add	r3, pc, #172	; (adr r3, 801bf90 <scalbn+0xe0>)
 801bee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bee6:	e03a      	b.n	801bf5e <scalbn+0xae>
 801bee8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801beec:	428a      	cmp	r2, r1
 801beee:	d10c      	bne.n	801bf0a <scalbn+0x5a>
 801bef0:	ee10 2a10 	vmov	r2, s0
 801bef4:	4620      	mov	r0, r4
 801bef6:	4629      	mov	r1, r5
 801bef8:	f7e4 f9e0 	bl	80002bc <__adddf3>
 801befc:	4604      	mov	r4, r0
 801befe:	460d      	mov	r5, r1
 801bf00:	e019      	b.n	801bf36 <scalbn+0x86>
 801bf02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801bf06:	460b      	mov	r3, r1
 801bf08:	3a36      	subs	r2, #54	; 0x36
 801bf0a:	4432      	add	r2, r6
 801bf0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801bf10:	428a      	cmp	r2, r1
 801bf12:	dd08      	ble.n	801bf26 <scalbn+0x76>
 801bf14:	2d00      	cmp	r5, #0
 801bf16:	a120      	add	r1, pc, #128	; (adr r1, 801bf98 <scalbn+0xe8>)
 801bf18:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf1c:	da1c      	bge.n	801bf58 <scalbn+0xa8>
 801bf1e:	a120      	add	r1, pc, #128	; (adr r1, 801bfa0 <scalbn+0xf0>)
 801bf20:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf24:	e018      	b.n	801bf58 <scalbn+0xa8>
 801bf26:	2a00      	cmp	r2, #0
 801bf28:	dd08      	ble.n	801bf3c <scalbn+0x8c>
 801bf2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bf2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bf32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801bf36:	ec45 4b10 	vmov	d0, r4, r5
 801bf3a:	bd70      	pop	{r4, r5, r6, pc}
 801bf3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801bf40:	da19      	bge.n	801bf76 <scalbn+0xc6>
 801bf42:	f24c 3350 	movw	r3, #50000	; 0xc350
 801bf46:	429e      	cmp	r6, r3
 801bf48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801bf4c:	dd0a      	ble.n	801bf64 <scalbn+0xb4>
 801bf4e:	a112      	add	r1, pc, #72	; (adr r1, 801bf98 <scalbn+0xe8>)
 801bf50:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d1e2      	bne.n	801bf1e <scalbn+0x6e>
 801bf58:	a30f      	add	r3, pc, #60	; (adr r3, 801bf98 <scalbn+0xe8>)
 801bf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf5e:	f7e4 fb63 	bl	8000628 <__aeabi_dmul>
 801bf62:	e7cb      	b.n	801befc <scalbn+0x4c>
 801bf64:	a10a      	add	r1, pc, #40	; (adr r1, 801bf90 <scalbn+0xe0>)
 801bf66:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d0b8      	beq.n	801bee0 <scalbn+0x30>
 801bf6e:	a10e      	add	r1, pc, #56	; (adr r1, 801bfa8 <scalbn+0xf8>)
 801bf70:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf74:	e7b4      	b.n	801bee0 <scalbn+0x30>
 801bf76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bf7a:	3236      	adds	r2, #54	; 0x36
 801bf7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bf80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801bf84:	4620      	mov	r0, r4
 801bf86:	4b0c      	ldr	r3, [pc, #48]	; (801bfb8 <scalbn+0x108>)
 801bf88:	2200      	movs	r2, #0
 801bf8a:	e7e8      	b.n	801bf5e <scalbn+0xae>
 801bf8c:	f3af 8000 	nop.w
 801bf90:	c2f8f359 	.word	0xc2f8f359
 801bf94:	01a56e1f 	.word	0x01a56e1f
 801bf98:	8800759c 	.word	0x8800759c
 801bf9c:	7e37e43c 	.word	0x7e37e43c
 801bfa0:	8800759c 	.word	0x8800759c
 801bfa4:	fe37e43c 	.word	0xfe37e43c
 801bfa8:	c2f8f359 	.word	0xc2f8f359
 801bfac:	81a56e1f 	.word	0x81a56e1f
 801bfb0:	43500000 	.word	0x43500000
 801bfb4:	ffff3cb0 	.word	0xffff3cb0
 801bfb8:	3c900000 	.word	0x3c900000

0801bfbc <_init>:
 801bfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bfbe:	bf00      	nop
 801bfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bfc2:	bc08      	pop	{r3}
 801bfc4:	469e      	mov	lr, r3
 801bfc6:	4770      	bx	lr

0801bfc8 <_fini>:
 801bfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bfca:	bf00      	nop
 801bfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bfce:	bc08      	pop	{r3}
 801bfd0:	469e      	mov	lr, r3
 801bfd2:	4770      	bx	lr
